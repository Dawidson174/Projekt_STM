
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f64c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055e4  0801f820  0801f820  00020820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024e04  08024e04  00026390  2**0
                  CONTENTS
  4 .ARM          00000008  08024e04  08024e04  00025e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024e0c  08024e0c  00026390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024e0c  08024e0c  00025e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024e10  08024e10  00025e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08024e14  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000250  08025064  00026250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002f0  08025104  000262f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f2b0  20000390  080251a4  00026390  2**2
                  ALLOC
 12 ._user_heap_stack 00000800  2000f640  080251a4  00026640  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003da65  00000000  00000000  000263c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009913  00000000  00000000  00063e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002c88  00000000  00000000  0006d738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000232f  00000000  00000000  000703c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b979  00000000  00000000  000726ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048851  00000000  00000000  000ae068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d4f9  00000000  00000000  000f68b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00213db2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c878  00000000  00000000  00213df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008f  00000000  00000000  00220670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000390 	.word	0x20000390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f804 	.word	0x0801f804

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000394 	.word	0x20000394
 800020c:	0801f804 	.word	0x0801f804

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fa47 	bl	8001434 <null_ptr_check>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d117      	bne.n	8000fe2 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	20d0      	movs	r0, #208	@ 0xd0
 8000fba:	f000 f818 	bl	8000fee <bmp2_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b58      	cmp	r3, #88	@ 0x58
 8000fd0:	d105      	bne.n	8000fde <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa79 	bl	80014ca <get_calib_param>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fde:	23fc      	movs	r3, #252	@ 0xfc
 8000fe0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b087      	sub	sp, #28
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f000 fa18 	bl	8001434 <null_ptr_check>
 8001004:	4603      	mov	r3, r0
 8001006:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d11e      	bne.n	800104e <bmp2_get_regs+0x60>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01b      	beq.n	800104e <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001024:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68dc      	ldr	r4, [r3, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	47a0      	blx	r4
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 8001048:	23fe      	movs	r3, #254	@ 0xfe
 800104a:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800104c:	e001      	b.n	8001052 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b08b      	sub	sp, #44	@ 0x2c
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d901      	bls.n	8001076 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f000 f9dc 	bl	8001434 <null_ptr_check>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001082:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001086:	2b00      	cmp	r3, #0
 8001088:	d150      	bne.n	800112c <bmp2_set_regs+0xce>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d04d      	beq.n	800112c <bmp2_set_regs+0xce>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d04a      	beq.n	800112c <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d043      	beq.n	8001124 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010aa:	2300      	movs	r3, #0
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	e00d      	b.n	80010cc <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	440b      	add	r3, r1
 80010be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	3301      	adds	r3, #1
 80010ca:	77fb      	strb	r3, [r7, #31]
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8ed      	bhi.n	80010b0 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d90b      	bls.n	80010f2 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010da:	f107 0114 	add.w	r1, r7, #20
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f9c6 	bl	8001474 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3b01      	subs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	e001      	b.n	80010f6 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691c      	ldr	r4, [r3, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f107 0114 	add.w	r1, r7, #20
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	47a0      	blx	r4
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 800111c:	23fe      	movs	r3, #254	@ 0xfe
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 8001122:	e007      	b.n	8001134 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 8001124:	23fd      	movs	r3, #253	@ 0xfd
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 800112a:	e003      	b.n	8001134 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001132:	e000      	b.n	8001136 <bmp2_set_regs+0xd8>
        if (len > 0)
 8001134:	bf00      	nop
    }

    return rslt;
 8001136:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800113a:	4618      	mov	r0, r3
 800113c:	372c      	adds	r7, #44	@ 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800114a:	23e0      	movs	r3, #224	@ 0xe0
 800114c:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 800114e:	23b6      	movs	r3, #182	@ 0xb6
 8001150:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001152:	f107 010d 	add.w	r1, r7, #13
 8001156:	f107 000e 	add.w	r0, r7, #14
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f7ff ff7e 	bl	800105e <bmp2_set_regs>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]

    return rslt;
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800117c:	2300      	movs	r3, #0
 800117e:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d02d      	beq.n	80011e2 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	20f4      	movs	r0, #244	@ 0xf4
 8001190:	f7ff ff2d 	bl	8000fee <bmp2_get_regs>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d122      	bne.n	80011e6 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	109b      	asrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	109b      	asrs	r3, r3, #2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	715a      	strb	r2, [r3, #5]
 80011e0:	e001      	b.n	80011e6 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011e2:	23ff      	movs	r3, #255	@ 0xff
 80011e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f9fd 	bl	8001600 <conf_sensor>
 8001206:	4603      	mov	r3, r0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01b      	beq.n	8001258 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 8001220:	f107 010e 	add.w	r1, r7, #14
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	20f3      	movs	r0, #243	@ 0xf3
 800122a:	f7ff fee0 	bl	8000fee <bmp2_get_regs>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d110      	bne.n	800125c <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	10db      	asrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	705a      	strb	r2, [r3, #1]
 8001256:	e001      	b.n	800125c <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9bf 	bl	8001600 <conf_sensor>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	2300      	movs	r3, #0
 80012a2:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d024      	beq.n	80012fe <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 80012b4:	f107 0110 	add.w	r1, r7, #16
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2206      	movs	r2, #6
 80012bc:	20f7      	movs	r0, #247	@ 0xf7
 80012be:	f7ff fe96 	bl	8000fee <bmp2_get_regs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d119      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fab9 	bl	8001850 <parse_sensor_data>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10b      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f80b 	bl	800130e <bmp2_compensate_data>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e001      	b.n	8001302 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012fe:	23ff      	movs	r3, #255	@ 0xff
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f88a 	bl	8001434 <null_ptr_check>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 8001324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d129      	bne.n	8001380 <bmp2_compensate_data+0x72>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d026      	beq.n	8001380 <bmp2_compensate_data+0x72>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3308      	adds	r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fabb 	bl	80018d8 <compensate_temperature>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fba7 	bl	8001ac8 <compensate_pressure>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800137e:	e001      	b.n	8001384 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001380:	23ff      	movs	r3, #255	@ 0xff
 8001382:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b092      	sub	sp, #72	@ 0x48
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <bmp2_compute_meas_time+0x9c>)
 800139e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <bmp2_compute_meas_time+0xa0>)
 80013ae:	f107 0410 	add.w	r4, r7, #16
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f837 	bl	8001434 <null_ptr_check>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d122      	bne.n	800141a <bmp2_compute_meas_time+0x8a>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d01f      	beq.n	800141a <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e1b      	ldrb	r3, [r3, #24]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d111      	bne.n	8001406 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3348      	adds	r3, #72	@ 0x48
 80013ea:	443b      	add	r3, r7
 80013ec:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3348      	adds	r3, #72	@ 0x48
 80013f8:	443b      	add	r3, r7
 80013fa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013fe:	441a      	add	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001404:	e00c      	b.n	8001420 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3348      	adds	r3, #72	@ 0x48
 800140e:	443b      	add	r3, r7
 8001410:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001418:	e002      	b.n	8001420 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800141a:	23ff      	movs	r3, #255	@ 0xff
 800141c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8001420:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8001424:	4618      	mov	r0, r3
 8001426:	3748      	adds	r7, #72	@ 0x48
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	0801f820 	.word	0x0801f820
 8001430:	0801f834 	.word	0x0801f834

08001434 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <null_ptr_check+0x26>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <null_ptr_check+0x26>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800145a:	23ff      	movs	r3, #255	@ 0xff
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e001      	b.n	8001464 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e015      	b.n	80014b4 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	441a      	add	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	440b      	add	r3, r1
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3e5      	bcc.n	8001488 <interleave_data+0x14>
    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b08a      	sub	sp, #40	@ 0x28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2219      	movs	r2, #25
 80014f0:	2088      	movs	r0, #136	@ 0x88
 80014f2:	f7ff fd7c 	bl	8000fee <bmp2_get_regs>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001500:	2b00      	cmp	r3, #0
 8001502:	d177      	bne.n	80015f4 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 800152a:	7c7b      	ldrb	r3, [r7, #17]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	7c3b      	ldrb	r3, [r7, #16]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21a      	sxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	7cbb      	ldrb	r3, [r7, #18]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7d3b      	ldrb	r3, [r7, #20]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001574:	7e7b      	ldrb	r3, [r7, #25]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7e3b      	ldrb	r3, [r7, #24]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7ebb      	ldrb	r3, [r7, #26]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001598:	7f7b      	ldrb	r3, [r7, #29]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7f3b      	ldrb	r3, [r7, #28]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 80015bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800160e:	2300      	movs	r3, #0
 8001610:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 8001612:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001616:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d074      	beq.n	8001708 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800161e:	f107 0114 	add.w	r1, r7, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	20f4      	movs	r0, #244	@ 0xf4
 8001628:	f7ff fce1 	bl	8000fee <bmp2_get_regs>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d169      	bne.n	800170c <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fd82 	bl	8001142 <bmp2_soft_reset>
 800163e:	4603      	mov	r3, r0
 8001640:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d160      	bne.n	800170c <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f861 	bl	8001718 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 8001656:	7d7b      	ldrb	r3, [r7, #21]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	b25a      	sxtb	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001670:	7d7b      	ldrb	r3, [r7, #21]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f023 031c 	bic.w	r3, r3, #28
 8001678:	b25a      	sxtb	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001690:	7d7b      	ldrb	r3, [r7, #21]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 80016ae:	f107 0114 	add.w	r1, r7, #20
 80016b2:	f107 0010 	add.w	r0, r7, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f7ff fcd0 	bl	800105e <bmp2_set_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 80016c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d120      	bne.n	800170c <conf_sensor+0x10c>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01d      	beq.n	800170c <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016d6:	7d3b      	ldrb	r3, [r7, #20]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016f2:	f107 0114 	add.w	r1, r7, #20
 80016f6:	f107 0010 	add.w	r0, r7, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f7ff fcae 	bl	800105e <bmp2_set_regs>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
 8001706:	e001      	b.n	800170c <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	2b04      	cmp	r3, #4
 8001728:	f200 808b 	bhi.w	8001842 <set_os_mode+0x12a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <set_os_mode+0x1c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001749 	.word	0x08001749
 8001738:	0800177b 	.word	0x0800177b
 800173c:	080017ad 	.word	0x080017ad
 8001740:	080017df 	.word	0x080017df
 8001744:	08001811 	.word	0x08001811
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 031c 	bic.w	r3, r3, #28
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
            break;
 8001778:	e064      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	b25b      	sxtb	r3, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f023 031c 	bic.w	r3, r3, #28
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
            break;
 80017aa:	e04b      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 031c 	bic.w	r3, r3, #28
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f043 030c 	orr.w	r3, r3, #12
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
            break;
 80017dc:	e032      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f023 031c 	bic.w	r3, r3, #28
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	b25b      	sxtb	r3, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	701a      	strb	r2, [r3, #0]
            break;
 800180e:	e019      	b.n	8001844 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	b25b      	sxtb	r3, r3
 800181c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001820:	b25b      	sxtb	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	f023 031c 	bic.w	r3, r3, #28
 8001832:	b25b      	sxtb	r3, r3
 8001834:	f043 0314 	orr.w	r3, r3, #20
 8001838:	b25b      	sxtb	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	701a      	strb	r2, [r3, #0]
            break;
 8001840:	e000      	b.n	8001844 <set_os_mode+0x12c>
        default:
            break;
 8001842:	bf00      	nop
    }
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3302      	adds	r3, #2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	b2db      	uxtb	r3, r3
 8001876:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3303      	adds	r3, #3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	031b      	lsls	r3, r3, #12
 800188e:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3305      	adds	r3, #5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f000 fae5 	bl	8001e90 <st_check_boundaries>
 80018c6:	4603      	mov	r3, r0
 80018c8:	72fb      	strb	r3, [r7, #11]

    return rslt;
 80018ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b08c      	sub	sp, #48	@ 0x30
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe47 	bl	8000584 <__aeabi_i2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <compensate_temperature+0x1d4>)
 80018fc:	f7fe ffd6 	bl	80008ac <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8b9b      	ldrh	r3, [r3, #28]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe29 	bl	8000564 <__aeabi_ui2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <compensate_temperature+0x1d8>)
 8001918:	f7fe ffc8 	bl	80008ac <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fce0 	bl	80002e8 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe24 	bl	8000584 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fe88 	bl	8000658 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe15 	bl	8000584 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001962:	f7fe ffa3 	bl	80008ac <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8b9b      	ldrh	r3, [r3, #28]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf6 	bl	8000564 <__aeabi_ui2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <compensate_temperature+0x1dc>)
 800197e:	f7fe ff95 	bl	80008ac <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe fcad 	bl	80002e8 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdf2 	bl	8000584 <__aeabi_i2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019a8:	f7fe ff80 	bl	80008ac <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8b9b      	ldrh	r3, [r3, #28]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdd3 	bl	8000564 <__aeabi_ui2d>
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab4 <compensate_temperature+0x1dc>)
 80019c4:	f7fe ff72 	bl	80008ac <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7fe fc8a 	bl	80002e8 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe3c 	bl	8000658 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdc8 	bl	8000584 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
    var2 =
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe2c 	bl	8000658 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe fc6c 	bl	80002ec <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8cc 	bl	8000bb8 <__aeabi_d2iz>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a2e:	f7fe fc5d 	bl	80002ec <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <compensate_temperature+0x1e0>)
 8001a40:	f7fe ff34 	bl	80008ac <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a56:	f7ff f871 	bl	8000b3c <__aeabi_dcmplt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a66:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a7a:	f7ff f87d 	bl	8000b78 <__aeabi_dcmpgt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a9a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3730      	adds	r7, #48	@ 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aac:	40d00000 	.word	0x40d00000
 8001ab0:	40900000 	.word	0x40900000
 8001ab4:	40c00000 	.word	0x40c00000
 8001ab8:	40b40000 	.word	0x40b40000
 8001abc:	c0440000 	.word	0xc0440000
 8001ac0:	40554000 	.word	0x40554000
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd4a 	bl	8000584 <__aeabi_i2d>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af8:	f7fe fed8 	bl	80008ac <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4bcb      	ldr	r3, [pc, #812]	@ (8001e38 <compensate_pressure+0x370>)
 8001b0a:	f7fe fbed 	bl	80002e8 <__aeabi_dsub>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1e:	f7fe fd9b 	bl	8000658 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd27 	bl	8000584 <__aeabi_i2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fd8b 	bl	8000658 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e3c <compensate_pressure+0x374>)
 8001b50:	f7fe feac 	bl	80008ac <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd0e 	bl	8000584 <__aeabi_i2d>
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd74 	bl	8000658 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	f7fe fbb6 	bl	80002ec <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b88:	f7fe fbb0 	bl	80002ec <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4ba9      	ldr	r3, [pc, #676]	@ (8001e40 <compensate_pressure+0x378>)
 8001b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9e:	f7fe fe85 	bl	80008ac <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fce7 	bl	8000584 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4ba2      	ldr	r3, [pc, #648]	@ (8001e44 <compensate_pressure+0x37c>)
 8001bbc:	f7fe fd4c 	bl	8000658 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb90 	bl	80002ec <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcd2 	bl	8000584 <__aeabi_i2d>
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd38 	bl	8000658 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd30 	bl	8000658 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b90      	ldr	r3, [pc, #576]	@ (8001e48 <compensate_pressure+0x380>)
 8001c06:	f7fe fe51 	bl	80008ac <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4614      	mov	r4, r2
 8001c10:	461d      	mov	r5, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb3 	bl	8000584 <__aeabi_i2d>
 8001c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c22:	f7fe fd19 	bl	8000658 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb5d 	bl	80002ec <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <compensate_pressure+0x380>)
 8001c40:	f7fe fe34 	bl	80008ac <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <compensate_pressure+0x374>)
 8001c52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c56:	f7fe fe29 	bl	80008ac <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <compensate_pressure+0x384>)
 8001c68:	f7fe fb40 	bl	80002ec <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc73 	bl	8000564 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fce7 	bl	8000658 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c9e:	f7fe ff4d 	bl	8000b3c <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <compensate_pressure+0x1f8>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb4:	f7fe ff60 	bl	8000b78 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80de 	beq.w	8001e7c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc4d 	bl	8000564 <__aeabi_ui2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	495f      	ldr	r1, [pc, #380]	@ (8001e50 <compensate_pressure+0x388>)
 8001cd4:	f7fe fb08 	bl	80002e8 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e54 <compensate_pressure+0x38c>)
 8001ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cea:	f7fe fddf 	bl	80008ac <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cf6:	f7fe faf7 	bl	80002e8 <__aeabi_dsub>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a347      	add	r3, pc, #284	@ (adr r3, 8001e20 <compensate_pressure+0x358>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fca6 	bl	8000658 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d18:	f7fe fdc8 	bl	80008ac <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc2a 	bl	8000584 <__aeabi_i2d>
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc90 	bl	8000658 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d44:	f7fe fc88 	bl	8000658 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <compensate_pressure+0x390>)
 8001d56:	f7fe fda9 	bl	80008ac <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc0b 	bl	8000584 <__aeabi_i2d>
 8001d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d72:	f7fe fc71 	bl	8000658 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <compensate_pressure+0x374>)
 8001d84:	f7fe fd92 	bl	80008ac <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe faa8 	bl	80002ec <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbea 	bl	8000584 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa98 	bl	80002ec <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <compensate_pressure+0x394>)
 8001dca:	f7fe fd6f 	bl	80008ac <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dd6:	f7fe fa89 	bl	80002ec <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001de2:	a311      	add	r3, pc, #68	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dec:	f7fe fea6 	bl	8000b3c <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001df6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e00:	2303      	movs	r3, #3
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e06:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e30 <compensate_pressure+0x368>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e10:	f7fe feb2 	bl	8000b78 <__aeabi_dcmpgt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	e022      	b.n	8001e60 <compensate_pressure+0x398>
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40b86a00 	.word	0x40b86a00
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40dd4c00 	.word	0x40dd4c00
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40fadb00 	.word	0x40fadb00
 8001e38:	40ef4000 	.word	0x40ef4000
 8001e3c:	40e00000 	.word	0x40e00000
 8001e40:	40100000 	.word	0x40100000
 8001e44:	40f00000 	.word	0x40f00000
 8001e48:	41200000 	.word	0x41200000
 8001e4c:	3ff00000 	.word	0x3ff00000
 8001e50:	41300000 	.word	0x41300000
 8001e54:	40b00000 	.word	0x40b00000
 8001e58:	41e00000 	.word	0x41e00000
 8001e5c:	40300000 	.word	0x40300000
 8001e60:	d007      	beq.n	8001e72 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e62:	a309      	add	r3, pc, #36	@ (adr r3, 8001e88 <compensate_pressure+0x3c0>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40fadb00 	.word	0x40fadb00

08001e90 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db03      	blt.n	8001eac <st_check_boundaries+0x1c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	dd09      	ble.n	8001ec0 <st_check_boundaries+0x30>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db06      	blt.n	8001ec0 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	dc02      	bgt.n	8001ec0 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001eba:	23fa      	movs	r3, #250	@ 0xfa
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e023      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <st_check_boundaries+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd09      	ble.n	8001ee2 <st_check_boundaries+0x52>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db06      	blt.n	8001ee2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	dc02      	bgt.n	8001ee2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001edc:	23fb      	movs	r3, #251	@ 0xfb
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e012      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db03      	blt.n	8001ef0 <st_check_boundaries+0x60>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	dd09      	ble.n	8001f04 <st_check_boundaries+0x74>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db03      	blt.n	8001efe <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <st_check_boundaries+0x88>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dd02      	ble.n	8001f04 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001efe:	23f9      	movs	r3, #249	@ 0xf9
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e001      	b.n	8001f08 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	000ffff0 	.word	0x000ffff0

08001f1c <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff f837 	bl	8000f98 <bmp2_init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f91c 	bl	8001172 <bmp2_get_config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f42:	2300      	movs	r3, #0
 8001f44:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f46:	2303      	movs	r3, #3
 8001f48:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f94e 	bl	80011f2 <bmp2_set_config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff f980 	bl	8001268 <bmp2_set_power_mode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f6c:	f107 0108 	add.w	r1, r7, #8
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fa0a 	bl	8001390 <bmp2_compute_meas_time>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6858      	ldr	r0, [r3, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	891b      	ldrh	r3, [r3, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f003 fb72 	bl	800569c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 010f 	add.w	r1, r7, #15
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f005 f971 	bl	80072aa <HAL_SPI_Transmit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	f005 fad5 	bl	8007586 <HAL_SPI_Receive>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6858      	ldr	r0, [r3, #4]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	891b      	ldrh	r3, [r3, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f003 fb53 	bl	800569c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <bmp2_spi_read+0x74>
    iError = -1;
 8001ffc:	23ff      	movs	r3, #255	@ 0xff
 8001ffe:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002000:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6858      	ldr	r0, [r3, #4]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	891b      	ldrh	r3, [r3, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	f003 fb32 	bl	800569c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 010f 	add.w	r1, r7, #15
 8002040:	2305      	movs	r3, #5
 8002042:	2201      	movs	r2, #1
 8002044:	f005 f931 	bl	80072aa <HAL_SPI_Transmit>
 8002048:	4603      	mov	r3, r0
 800204a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2305      	movs	r3, #5
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	f005 f927 	bl	80072aa <HAL_SPI_Transmit>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	4413      	add	r3, r2
 8002064:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6858      	ldr	r0, [r3, #4]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	f003 fb13 	bl	800569c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002076:	7dbb      	ldrb	r3, [r7, #22]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <bmp2_spi_write+0x74>
    iError = -1;
 800207c:	23ff      	movs	r3, #255	@ 0xff
 800207e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <bmp2_delay_us+0x24>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fcd9 	bl	8003a58 <HAL_Delay>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 80020c0:	23ff      	movs	r3, #255	@ 0xff
 80020c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	899b      	ldrh	r3, [r3, #12]
 80020cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f89a 	bl	8001210 <bmp2_get_status>
 80020dc:	4603      	mov	r3, r0
 80020de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f8d2 	bl	8001292 <bmp2_get_sensor_data>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <BMP2_ReadData+0xc4>)
 8002108:	f7fe fbd0 	bl	80008ac <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 8002116:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 8002124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <BMP2_ReadData+0x80>
 800212c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	dccd      	bgt.n	80020d0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	684c      	ldr	r4, [r1, #4]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd61 	bl	8000c08 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	684c      	ldr	r4, [r1, #4]
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd56 	bl	8000c08 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002168:	729a      	strb	r2, [r3, #10]

  return rslt;
 800216a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800216e:	4618      	mov	r0, r3
 8002170:	372c      	adds	r7, #44	@ 0x2c
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	40590000 	.word	0x40590000

0800217c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800218c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <vApplicationGetIdleTaskMemory+0x30>)
 8002192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200003bc 	.word	0x200003bc
 80021ac:	2000045c 	.word	0x2000045c

080021b0 <StartTempSensorTask>:
  * @param  None
  * @retval None
  */

void StartTempSensorTask(void *argument)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    double temp, press;
    for(;;)
    {
        osMutexWait(i2cMutexHandle, osWaitForever);
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <StartTempSensorTask+0x80>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	4618      	mov	r0, r3
 80021c2:	f008 ffa9 	bl	800b118 <osMutexWait>
        if (BMP2_ReadData(&bmp2dev, &press, &temp) == BMP2_OK)
 80021c6:	f107 0210 	add.w	r2, r7, #16
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4619      	mov	r1, r3
 80021d0:	4818      	ldr	r0, [pc, #96]	@ (8002234 <StartTempSensorTask+0x84>)
 80021d2:	f7ff ff6f 	bl	80020b4 <BMP2_ReadData>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11f      	bne.n	800221c <StartTempSensorTask+0x6c>
        {
            temp_mdegC = (int)(temp * 1000);
 80021dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <StartTempSensorTask+0x88>)
 80021e6:	f7fe fa37 	bl	8000658 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7fe fce1 	bl	8000bb8 <__aeabi_d2iz>
 80021f6:	4603      	mov	r3, r0
 80021f8:	4a10      	ldr	r2, [pc, #64]	@ (800223c <StartTempSensorTask+0x8c>)
 80021fa:	6013      	str	r3, [r2, #0]
            press_Pa = (int)(press * 100);
 80021fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <StartTempSensorTask+0x90>)
 8002206:	f7fe fa27 	bl	8000658 <__aeabi_dmul>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7fe fcd1 	bl	8000bb8 <__aeabi_d2iz>
 8002216:	4603      	mov	r3, r0
 8002218:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <StartTempSensorTask+0x94>)
 800221a:	6013      	str	r3, [r2, #0]
        }
        else
        {

        }
        osMutexRelease(i2cMutexHandle);
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <StartTempSensorTask+0x80>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f008 ffc7 	bl	800b1b4 <osMutexRelease>

        osDelay(500);
 8002226:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800222a:	f008 ff49 	bl	800b0c0 <osDelay>
        osMutexWait(i2cMutexHandle, osWaitForever);
 800222e:	e7c3      	b.n	80021b8 <StartTempSensorTask+0x8>
 8002230:	200003b8 	.word	0x200003b8
 8002234:	20000018 	.word	0x20000018
 8002238:	408f4000 	.word	0x408f4000
 800223c:	200006d8 	.word	0x200006d8
 8002240:	40590000 	.word	0x40590000
 8002244:	200006dc 	.word	0x200006dc

08002248 <StartLCDTask>:
    }
}

void StartLCDTask(void *argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        osMutexWait(i2cMutexHandle, osWaitForever);
 8002250:	4b1f      	ldr	r3, [pc, #124]	@ (80022d0 <StartLCDTask+0x88>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	4618      	mov	r0, r3
 800225a:	f008 ff5d 	bl	800b118 <osMutexWait>

        char buffer[16];
        sprintf(buffer, "Set temp.: %.2f", my_variable);
 800225e:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <StartLCDTask+0x8c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f9a0 	bl	80005a8 <__aeabi_f2d>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	f107 0018 	add.w	r0, r7, #24
 8002270:	4919      	ldr	r1, [pc, #100]	@ (80022d8 <StartLCDTask+0x90>)
 8002272:	f01b f91b 	bl	801d4ac <siprintf>
        sprintf((char *)disp.f_line, "%s", buffer);
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	461a      	mov	r2, r3
 800227c:	4917      	ldr	r1, [pc, #92]	@ (80022dc <StartLCDTask+0x94>)
 800227e:	4818      	ldr	r0, [pc, #96]	@ (80022e0 <StartLCDTask+0x98>)
 8002280:	f01b f914 	bl	801d4ac <siprintf>
        lcd_display(&disp);
 8002284:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <StartLCDTask+0x9c>)
 8002286:	f000 fc77 	bl	8002b78 <lcd_display>

        char buffer2[16];
        sprintf(buffer2, "Act. temp.: %.1f", temp_mdegC / 1000.0);  // Konwersja na stopnie Celsjusza
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <StartLCDTask+0xa0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f978 	bl	8000584 <__aeabi_i2d>
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <StartLCDTask+0xa4>)
 800229a:	f7fe fb07 	bl	80008ac <__aeabi_ddiv>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	f107 0008 	add.w	r0, r7, #8
 80022a6:	4912      	ldr	r1, [pc, #72]	@ (80022f0 <StartLCDTask+0xa8>)
 80022a8:	f01b f900 	bl	801d4ac <siprintf>
        sprintf((char *)disp.s_line, "%s", buffer2);
 80022ac:	f107 0308 	add.w	r3, r7, #8
 80022b0:	461a      	mov	r2, r3
 80022b2:	490a      	ldr	r1, [pc, #40]	@ (80022dc <StartLCDTask+0x94>)
 80022b4:	480f      	ldr	r0, [pc, #60]	@ (80022f4 <StartLCDTask+0xac>)
 80022b6:	f01b f8f9 	bl	801d4ac <siprintf>
        osMutexRelease(i2cMutexHandle);
 80022ba:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <StartLCDTask+0x88>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f008 ff78 	bl	800b1b4 <osMutexRelease>
        osDelay(1000);
 80022c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022c8:	f008 fefa 	bl	800b0c0 <osDelay>
    {
 80022cc:	bf00      	nop
 80022ce:	e7bf      	b.n	8002250 <StartLCDTask+0x8>
 80022d0:	200003b8 	.word	0x200003b8
 80022d4:	20000054 	.word	0x20000054
 80022d8:	0801f854 	.word	0x0801f854
 80022dc:	0801f864 	.word	0x0801f864
 80022e0:	200006b1 	.word	0x200006b1
 80022e4:	200006b0 	.word	0x200006b0
 80022e8:	200006d8 	.word	0x200006d8
 80022ec:	408f4000 	.word	0x408f4000
 80022f0:	0801f868 	.word	0x0801f868
 80022f4:	200006c2 	.word	0x200006c2

080022f8 <StartFanControlTask>:
    }
}

void StartFanControlTask(void const *argument) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

    for (;;) {

        osMutexWait(i2cMutexHandle, osWaitForever);
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <StartFanControlTask+0x70>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	4618      	mov	r0, r3
 800230a:	f008 ff05 	bl	800b118 <osMutexWait>

        float current_temp = (float)temp_mdegC / 1000.0f;
 800230e:	4b17      	ldr	r3, [pc, #92]	@ (800236c <StartFanControlTask+0x74>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002370 <StartFanControlTask+0x78>
 800231e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002322:	edc7 7a03 	vstr	s15, [r7, #12]
        float set_temp = my_variable;
 8002326:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <StartFanControlTask+0x7c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60bb      	str	r3, [r7, #8]


        if (set_temp < current_temp) {
 800232c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002330:	edd7 7a03 	vldr	s15, [r7, #12]
 8002334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	d505      	bpl.n	800234a <StartFanControlTask+0x52>
            HAL_GPIO_WritePin(FAN_CONTROL_GPIO_Port, FAN_CONTROL_Pin, GPIO_PIN_SET);  // Włącz wentylator
 800233e:	2201      	movs	r2, #1
 8002340:	2120      	movs	r1, #32
 8002342:	480d      	ldr	r0, [pc, #52]	@ (8002378 <StartFanControlTask+0x80>)
 8002344:	f003 f9aa 	bl	800569c <HAL_GPIO_WritePin>
 8002348:	e004      	b.n	8002354 <StartFanControlTask+0x5c>
        } else {
            HAL_GPIO_WritePin(FAN_CONTROL_GPIO_Port, FAN_CONTROL_Pin, GPIO_PIN_RESET);  // Wyłącz wentylator
 800234a:	2200      	movs	r2, #0
 800234c:	2120      	movs	r1, #32
 800234e:	480a      	ldr	r0, [pc, #40]	@ (8002378 <StartFanControlTask+0x80>)
 8002350:	f003 f9a4 	bl	800569c <HAL_GPIO_WritePin>
        }

        osMutexRelease(i2cMutexHandle);
 8002354:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <StartFanControlTask+0x70>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f008 ff2b 	bl	800b1b4 <osMutexRelease>
        osDelay(pdMS_TO_TICKS(1000));  // Odświeżanie co sekundę
 800235e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002362:	f008 fead 	bl	800b0c0 <osDelay>
    for (;;) {
 8002366:	e7cb      	b.n	8002300 <StartFanControlTask+0x8>
 8002368:	200003b8 	.word	0x200003b8
 800236c:	200006d8 	.word	0x200006d8
 8002370:	447a0000 	.word	0x447a0000
 8002374:	20000054 	.word	0x20000054
 8002378:	40020400 	.word	0x40020400

0800237c <StartHttpServerTask>:
}



void StartHttpServerTask(void *argument)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    while (!netif_is_up(&gnetif))
 8002384:	e002      	b.n	800238c <StartHttpServerTask+0x10>
    {
        osDelay(100);
 8002386:	2064      	movs	r0, #100	@ 0x64
 8002388:	f008 fe9a 	bl	800b0c0 <osDelay>
    while (!netif_is_up(&gnetif))
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <StartHttpServerTask+0x2c>)
 800238e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f5      	beq.n	8002386 <StartHttpServerTask+0xa>
    }

    httpd_init();
 800239a:	f00f f86d 	bl	8011478 <httpd_init>

    for (;;)
    {
        osDelay(1000);
 800239e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a2:	f008 fe8d 	bl	800b0c0 <osDelay>
 80023a6:	e7fa      	b.n	800239e <StartHttpServerTask+0x22>
 80023a8:	2000086c 	.word	0x2000086c

080023ac <MX_FREERTOS_Init>:
    }
}

void MX_FREERTOS_Init(void) {
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b0b4      	sub	sp, #208	@ 0xd0
 80023b0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80023b2:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <MX_FREERTOS_Init+0x114>)
 80023b4:	f107 04b4 	add.w	r4, r7, #180	@ 0xb4
 80023b8:	461d      	mov	r5, r3
 80023ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80023c6:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80023ca:	2100      	movs	r1, #0
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 fe2b 	bl	800b028 <osThreadCreate>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4a3b      	ldr	r2, [pc, #236]	@ (80024c4 <MX_FREERTOS_Init+0x118>)
 80023d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 80023d8:	4b3b      	ldr	r3, [pc, #236]	@ (80024c8 <MX_FREERTOS_Init+0x11c>)
 80023da:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 80023de:	461d      	mov	r5, r3
 80023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 80023ec:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 fe18 	bl	800b028 <osThreadCreate>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a34      	ldr	r2, [pc, #208]	@ (80024cc <MX_FREERTOS_Init+0x120>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <MX_FREERTOS_Init+0x124>)
 8002400:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8002404:	461d      	mov	r5, r3
 8002406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800240a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800240e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 8002412:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f008 fe05 	bl	800b028 <osThreadCreate>
 800241e:	4603      	mov	r3, r0
 8002420:	4a2c      	ldr	r2, [pc, #176]	@ (80024d4 <MX_FREERTOS_Init+0x128>)
 8002422:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(tempSensorTask, StartTempSensorTask, osPriorityLow, 0, 512);
 8002424:	4b2c      	ldr	r3, [pc, #176]	@ (80024d8 <MX_FREERTOS_Init+0x12c>)
 8002426:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800242a:	461d      	mov	r5, r3
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(tempSensorTask), NULL);
 8002438:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f008 fdf2 	bl	800b028 <osThreadCreate>
  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 256);
 8002444:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <MX_FREERTOS_Init+0x130>)
 8002446:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800244a:	461d      	mov	r5, r3
 800244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002450:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002454:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(lcdTask), NULL);
 8002458:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f008 fde2 	bl	800b028 <osThreadCreate>
  osThreadDef(fanTask, StartFanControlTask, osPriorityNormal, 0, 512);
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <MX_FREERTOS_Init+0x134>)
 8002466:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800246a:	461d      	mov	r5, r3
 800246c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(fanTask), NULL);
 8002478:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f008 fdd2 	bl	800b028 <osThreadCreate>
  osMutexDef(i2cMutex);
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
  i2cMutexHandle = osMutexCreate(osMutex(i2cMutex));
 800248c:	f107 0320 	add.w	r3, r7, #32
 8002490:	4618      	mov	r0, r3
 8002492:	f008 fe29 	bl	800b0e8 <osMutexCreate>
 8002496:	4603      	mov	r3, r0
 8002498:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <MX_FREERTOS_Init+0x138>)
 800249a:	6013      	str	r3, [r2, #0]
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <MX_FREERTOS_Init+0x13c>)
 800249e:	1d3c      	adds	r4, r7, #4
 80024a0:	461d      	mov	r5, r3
 80024a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f008 fdb8 	bl	800b028 <osThreadCreate>


  /* USER CODE END RTOS_THREADS */

}
 80024b8:	bf00      	nop
 80024ba:	37d0      	adds	r7, #208	@ 0xd0
 80024bc:	46bd      	mov	sp, r7
 80024be:	bdb0      	pop	{r4, r5, r7, pc}
 80024c0:	0801f888 	.word	0x0801f888
 80024c4:	200003ac 	.word	0x200003ac
 80024c8:	0801f8b0 	.word	0x0801f8b0
 80024cc:	200003b0 	.word	0x200003b0
 80024d0:	0801f8d8 	.word	0x0801f8d8
 80024d4:	200003b4 	.word	0x200003b4
 80024d8:	0801f904 	.word	0x0801f904
 80024dc:	0801f928 	.word	0x0801f928
 80024e0:	0801f94c 	.word	0x0801f94c
 80024e4:	200003b8 	.word	0x200003b8
 80024e8:	0801f978 	.word	0x0801f978

080024ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80024f4:	f007 ff26 	bl	800a344 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80024f8:	2101      	movs	r1, #1
 80024fa:	4804      	ldr	r0, [pc, #16]	@ (800250c <StartDefaultTask+0x20>)
 80024fc:	f003 f8e7 	bl	80056ce <HAL_GPIO_TogglePin>
    osDelay(100);
 8002500:	2064      	movs	r0, #100	@ 0x64
 8002502:	f008 fddd 	bl	800b0c0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002506:	bf00      	nop
 8002508:	e7f6      	b.n	80024f8 <StartDefaultTask+0xc>
 800250a:	bf00      	nop
 800250c:	40020400 	.word	0x40020400

08002510 <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0a0      	sub	sp, #128	@ 0x80
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 800251c:	2064      	movs	r0, #100	@ 0x64
 800251e:	f008 fdcf 	bl	800b0c0 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2020      	movs	r0, #32
 8002528:	f00b fdf6 	bl	800e118 <netconn_new_with_proto_and_callback>
 800252c:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 800252e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002530:	2b00      	cmp	r3, #0
 8002532:	d107      	bne.n	8002544 <StartUdpEcho+0x34>
 8002534:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <StartUdpEcho+0xe4>)
 8002536:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800253a:	492f      	ldr	r1, [pc, #188]	@ (80025f8 <StartUdpEcho+0xe8>)
 800253c:	482f      	ldr	r0, [pc, #188]	@ (80025fc <StartUdpEcho+0xec>)
 800253e:	f01a ffa3 	bl	801d488 <iprintf>
 8002542:	e053      	b.n	80025ec <StartUdpEcho+0xdc>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 8002544:	2208      	movs	r2, #8
 8002546:	492e      	ldr	r1, [pc, #184]	@ (8002600 <StartUdpEcho+0xf0>)
 8002548:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800254a:	f00b fe9f 	bl	800e28c <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 800254e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002552:	4619      	mov	r1, r3
 8002554:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002556:	f00c f905 	bl	800e764 <netconn_recv>
 800255a:	4603      	mov	r3, r0
 800255c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 8002560:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <StartUdpEcho+0x3e>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002568:	2201      	movs	r2, #1
 800256a:	2180      	movs	r1, #128	@ 0x80
 800256c:	4825      	ldr	r0, [pc, #148]	@ (8002604 <StartUdpEcho+0xf4>)
 800256e:	f003 f895 	bl	800569c <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 8002572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002574:	6818      	ldr	r0, [r3, #0]
 8002576:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800257a:	2300      	movs	r3, #0
 800257c:	2220      	movs	r2, #32
 800257e:	f010 fdc9 	bl	8013114 <pbuf_copy_partial>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	891b      	ldrh	r3, [r3, #8]
 800258c:	429a      	cmp	r2, r3
 800258e:	d123      	bne.n	80025d8 <StartUdpEcho+0xc8>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 8002590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002592:	3301      	adds	r3, #1
 8002594:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 8002596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	891b      	ldrh	r3, [r3, #8]
 800259c:	3380      	adds	r3, #128	@ 0x80
 800259e:	443b      	add	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 80025a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80025aa:	f107 000c 	add.w	r0, r7, #12
 80025ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80025b0:	4915      	ldr	r1, [pc, #84]	@ (8002608 <StartUdpEcho+0xf8>)
 80025b2:	f01a ff7b 	bl	801d4ac <siprintf>
 80025b6:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 80025b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80025bc:	b292      	uxth	r2, r2
 80025be:	f107 010c 	add.w	r1, r7, #12
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00d fee2 	bl	801038c <netbuf_ref>
		err = netconn_send(conn, buf);
 80025c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ca:	4619      	mov	r1, r3
 80025cc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80025ce:	f00c f943 	bl	800e858 <netconn_send>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 80025d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025da:	4618      	mov	r0, r3
 80025dc:	f00d feb6 	bl	801034c <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2180      	movs	r1, #128	@ 0x80
 80025e4:	4807      	ldr	r0, [pc, #28]	@ (8002604 <StartUdpEcho+0xf4>)
 80025e6:	f003 f859 	bl	800569c <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 80025ea:	e7b0      	b.n	800254e <StartUdpEcho+0x3e>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 80025ec:	3780      	adds	r7, #128	@ 0x80
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0801f994 	.word	0x0801f994
 80025f8:	0801f9ac 	.word	0x0801f9ac
 80025fc:	0801f9c4 	.word	0x0801f9c4
 8002600:	08024a1c 	.word	0x08024a1c
 8002604:	40020400 	.word	0x40020400
 8002608:	0801f9ec 	.word	0x0801f9ec

0800260c <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b096      	sub	sp, #88	@ 0x58
 8002610:	af02      	add	r7, sp, #8
 8002612:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8002618:	2064      	movs	r0, #100	@ 0x64
 800261a:	f008 fd51 	bl	800b0c0 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2010      	movs	r0, #16
 8002624:	f00b fd78 	bl	800e118 <netconn_new_with_proto_and_callback>
 8002628:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 800262a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8083 	beq.w	8002738 <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 8002632:	2207      	movs	r2, #7
 8002634:	2100      	movs	r1, #0
 8002636:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002638:	f00b fe28 	bl	800e28c <netconn_bind>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 8002642:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002646:	2b00      	cmp	r3, #0
 8002648:	d172      	bne.n	8002730 <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 800264a:	21ff      	movs	r1, #255	@ 0xff
 800264c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800264e:	f00b fe55 	bl	800e2fc <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 8002652:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002656:	4619      	mov	r1, r3
 8002658:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800265a:	f00b fe7b 	bl	800e354 <netconn_accept>
 800265e:	4603      	mov	r3, r0
 8002660:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 8002664:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f2      	bne.n	8002652 <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 800266c:	e04d      	b.n	800270a <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800266e:	2201      	movs	r2, #1
 8002670:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002674:	4832      	ldr	r0, [pc, #200]	@ (8002740 <StartTcpEcho+0x134>)
 8002676:	f003 f811 	bl	800569c <HAL_GPIO_WritePin>
		    msg_cnt++;
 800267a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800267c:	3301      	adds	r3, #1
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 8002680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002682:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8002686:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800268a:	4618      	mov	r0, r3
 800268c:	f00d fec8 	bl	8010420 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002696:	492b      	ldr	r1, [pc, #172]	@ (8002744 <StartTcpEcho+0x138>)
 8002698:	4618      	mov	r0, r3
 800269a:	f01a ff07 	bl	801d4ac <siprintf>
 800269e:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 80026a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026a4:	f107 010c 	add.w	r1, r7, #12
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2301      	movs	r3, #1
 80026ae:	f00c f901 	bl	800e8b4 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 80026b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026b6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80026b8:	461a      	mov	r2, r3
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	f00c f8f8 	bl	800e8b4 <netconn_write_partly>
			  char postfix[] = "\r\n";
 80026c4:	4a20      	ldr	r2, [pc, #128]	@ (8002748 <StartTcpEcho+0x13c>)
 80026c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4611      	mov	r1, r2
 80026ce:	8019      	strh	r1, [r3, #0]
 80026d0:	3302      	adds	r3, #2
 80026d2:	0c12      	lsrs	r2, r2, #16
 80026d4:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 80026d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026d8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	2202      	movs	r2, #2
 80026e4:	f00c f8e6 	bl	800e8b4 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	4618      	mov	r0, r3
 80026ec:	f00d fee2 	bl	80104b4 <netbuf_next>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	dac4      	bge.n	8002680 <StartTcpEcho+0x74>
            netbuf_delete(buf);
 80026f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00d fe27 	bl	801034c <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002704:	480e      	ldr	r0, [pc, #56]	@ (8002740 <StartTcpEcho+0x134>)
 8002706:	f002 ffc9 	bl	800569c <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 800270a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f00c f826 	bl	800e764 <netconn_recv>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0a7      	beq.n	800266e <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 800271e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002720:	4618      	mov	r0, r3
 8002722:	f00c f9c9 	bl	800eab8 <netconn_close>
		  netconn_delete(newconn);
 8002726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002728:	4618      	mov	r0, r3
 800272a:	f00b fd93 	bl	800e254 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 800272e:	e790      	b.n	8002652 <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 8002730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002732:	4618      	mov	r0, r3
 8002734:	f00b fd8e 	bl	800e254 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 8002738:	bf00      	nop
 800273a:	3750      	adds	r7, #80	@ 0x50
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40020400 	.word	0x40020400
 8002744:	0801fa00 	.word	0x0801fa00
 8002748:	0801fa14 	.word	0x0801fa14

0800274c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	@ 0x30
 8002750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
 8002760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002762:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a6b      	ldr	r2, [pc, #428]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b63      	ldr	r3, [pc, #396]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002792:	4b60      	ldr	r3, [pc, #384]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a59      	ldr	r2, [pc, #356]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b57      	ldr	r3, [pc, #348]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b54      	ldr	r3, [pc, #336]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a53      	ldr	r2, [pc, #332]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b51      	ldr	r3, [pc, #324]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	4b4e      	ldr	r3, [pc, #312]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	4a4d      	ldr	r2, [pc, #308]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027f2:	4b48      	ldr	r3, [pc, #288]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	4a47      	ldr	r2, [pc, #284]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 80027f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fe:	4b45      	ldr	r3, [pc, #276]	@ (8002914 <MX_GPIO_Init+0x1c8>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	2110      	movs	r1, #16
 800280e:	4842      	ldr	r0, [pc, #264]	@ (8002918 <MX_GPIO_Init+0x1cc>)
 8002810:	f002 ff44 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|FAN_CONTROL_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f244 01a1 	movw	r1, #16545	@ 0x40a1
 800281a:	4840      	ldr	r0, [pc, #256]	@ (800291c <MX_GPIO_Init+0x1d0>)
 800281c:	f002 ff3e 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002820:	2200      	movs	r2, #0
 8002822:	2140      	movs	r1, #64	@ 0x40
 8002824:	483e      	ldr	r0, [pc, #248]	@ (8002920 <MX_GPIO_Init+0x1d4>)
 8002826:	f002 ff39 	bl	800569c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 800282a:	2310      	movs	r3, #16
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4835      	ldr	r0, [pc, #212]	@ (8002918 <MX_GPIO_Init+0x1cc>)
 8002842:	f002 fd7f 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800284c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4831      	ldr	r0, [pc, #196]	@ (8002924 <MX_GPIO_Init+0x1d8>)
 800285e:	f002 fd71 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|FAN_CONTROL_Pin|LD2_Pin;
 8002862:	f244 03a1 	movw	r3, #16545	@ 0x40a1
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4828      	ldr	r0, [pc, #160]	@ (800291c <MX_GPIO_Init+0x1d0>)
 800287c:	f002 fd62 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002880:	2340      	movs	r3, #64	@ 0x40
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002884:	2301      	movs	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288c:	2300      	movs	r3, #0
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	4822      	ldr	r0, [pc, #136]	@ (8002920 <MX_GPIO_Init+0x1d4>)
 8002898:	f002 fd54 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	481c      	ldr	r0, [pc, #112]	@ (8002920 <MX_GPIO_Init+0x1d4>)
 80028b0:	f002 fd48 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80028b4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80028b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028c6:	230a      	movs	r3, #10
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4619      	mov	r1, r3
 80028d0:	4815      	ldr	r0, [pc, #84]	@ (8002928 <MX_GPIO_Init+0x1dc>)
 80028d2:	f002 fd37 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80028d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028dc:	2300      	movs	r3, #0
 80028de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	480f      	ldr	r0, [pc, #60]	@ (8002928 <MX_GPIO_Init+0x1dc>)
 80028ec:	f002 fd2a 	bl	8005344 <HAL_GPIO_Init>

  /* Konfiguracja pinu PB5 jako wyjście */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028f0:	2320      	movs	r3, #32
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f4:	2301      	movs	r3, #1
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	4805      	ldr	r0, [pc, #20]	@ (800291c <MX_GPIO_Init+0x1d0>)
 8002908:	f002 fd1c 	bl	8005344 <HAL_GPIO_Init>
}
 800290c:	bf00      	nop
 800290e:	3730      	adds	r7, #48	@ 0x30
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	40021000 	.word	0x40021000
 800291c:	40020400 	.word	0x40020400
 8002920:	40021800 	.word	0x40021800
 8002924:	40020800 	.word	0x40020800
 8002928:	40020000 	.word	0x40020000

0800292c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002932:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <MX_I2C1_Init+0x78>)
 8002934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002938:	4a1b      	ldr	r2, [pc, #108]	@ (80029a8 <MX_I2C1_Init+0x7c>)
 800293a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800293c:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <MX_I2C1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002942:	4b17      	ldr	r3, [pc, #92]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002944:	2201      	movs	r2, #1
 8002946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002948:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <MX_I2C1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800295a:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <MX_I2C1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002962:	2200      	movs	r2, #0
 8002964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002966:	480e      	ldr	r0, [pc, #56]	@ (80029a0 <MX_I2C1_Init+0x74>)
 8002968:	f002 fecc 	bl	8005704 <HAL_I2C_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002972:	f000 fb2f 	bl	8002fd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002976:	2100      	movs	r1, #0
 8002978:	4809      	ldr	r0, [pc, #36]	@ (80029a0 <MX_I2C1_Init+0x74>)
 800297a:	f003 fa39 	bl	8005df0 <HAL_I2CEx_ConfigAnalogFilter>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002984:	f000 fb26 	bl	8002fd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002988:	2100      	movs	r1, #0
 800298a:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_I2C1_Init+0x74>)
 800298c:	f003 fa7b 	bl	8005e86 <HAL_I2CEx_ConfigDigitalFilter>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002996:	f000 fb1d 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2000065c 	.word	0x2000065c
 80029a4:	40005400 	.word	0x40005400
 80029a8:	20404768 	.word	0x20404768

080029ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0aa      	sub	sp, #168	@ 0xa8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2284      	movs	r2, #132	@ 0x84
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f01a fdfa 	bl	801d5c6 <memset>
  if(i2cHandle->Instance==I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a22      	ldr	r2, [pc, #136]	@ (8002a60 <HAL_I2C_MspInit+0xb4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d13c      	bne.n	8002a56 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80029dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80029e2:	2300      	movs	r3, #0
 80029e4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 ffc2 	bl	8006974 <HAL_RCCEx_PeriphCLKConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029f6:	f000 faed 	bl	8002fd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1a:	2312      	movs	r3, #18
 8002a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a36:	4619      	mov	r1, r3
 8002a38:	480b      	ldr	r0, [pc, #44]	@ (8002a68 <HAL_I2C_MspInit+0xbc>)
 8002a3a:	f002 fc83 	bl	8005344 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3e:	4b09      	ldr	r3, [pc, #36]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 8002a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <HAL_I2C_MspInit+0xb8>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a56:	bf00      	nop
 8002a58:	37a8      	adds	r7, #168	@ 0xa8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40005400 	.word	0x40005400
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40020400 	.word	0x40020400

08002a6c <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8002a82:	2308      	movs	r3, #8
 8002a84:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8002a86:	2028      	movs	r0, #40	@ 0x28
 8002a88:	f000 ffe6 	bl	8003a58 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	2130      	movs	r1, #48	@ 0x30
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 f829 	bl	8002aec <lcd_write>
	HAL_Delay(5);
 8002a9a:	2005      	movs	r0, #5
 8002a9c:	f000 ffdc 	bl	8003a58 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	2130      	movs	r1, #48	@ 0x30
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f81f 	bl	8002aec <lcd_write>
	HAL_Delay(1);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f000 ffd2 	bl	8003a58 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	7bfa      	ldrb	r2, [r7, #15]
 8002aba:	2130      	movs	r1, #48	@ 0x30
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f815 	bl	8002aec <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f80e 	bl	8002aec <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	210c      	movs	r1, #12
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f807 	bl	8002aec <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f89f 	bl	8002c22 <lcd_clear>

}
 8002ae4:	bf00      	nop
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
 8002af6:	460b      	mov	r3, r1
 8002af8:	71bb      	strb	r3, [r7, #6]
 8002afa:	4613      	mov	r3, r2
 8002afc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	f023 030f 	bic.w	r3, r3, #15
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	797b      	ldrb	r3, [r7, #5]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8002b14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b18:	f023 030f 	bic.w	r3, r3, #15
 8002b1c:	b25a      	sxtb	r2, r3
 8002b1e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	797b      	ldrb	r3, [r7, #5]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f043 0304 	orr.w	r3, r3, #4
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	b25a      	sxtb	r2, r3
 8002b44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	b299      	uxth	r1, r3
 8002b54:	f107 020c 	add.w	r2, r7, #12
 8002b58:	2364      	movs	r3, #100	@ 0x64
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <lcd_write+0x88>)
 8002b60:	f002 fe60 	bl	8005824 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8002b64:	2005      	movs	r0, #5
 8002b66:	f000 ff77 	bl	8003a58 <HAL_Delay>
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000065c 	.word	0x2000065c

08002b78 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	2300      	movs	r3, #0
 8002b86:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8002b92:	2308      	movs	r3, #8
 8002b94:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f843 	bl	8002c22 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	2180      	movs	r1, #128	@ 0x80
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ffa1 	bl	8002aec <lcd_write>
	while(lcd->f_line[i])
 8002baa:	e00f      	b.n	8002bcc <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7818      	ldrb	r0, [r3, #0]
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	7859      	ldrb	r1, [r3, #1]
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f7ff ff93 	bl	8002aec <lcd_write>
		i++;
 8002bc6:	7bbb      	ldrb	r3, [r7, #14]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8002bcc:	7bbb      	ldrb	r3, [r7, #14]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e9      	bne.n	8002bac <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	21c0      	movs	r1, #192	@ 0xc0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff81 	bl	8002aec <lcd_write>
	while(lcd->s_line[i])
 8002bea:	e00f      	b.n	8002c0c <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7818      	ldrb	r0, [r3, #0]
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	7c99      	ldrb	r1, [r3, #18]
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	f7ff ff73 	bl	8002aec <lcd_write>
		i++;
 8002c06:	7bbb      	ldrb	r3, [r7, #14]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8002c0c:	7bbb      	ldrb	r3, [r7, #14]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	7c9b      	ldrb	r3, [r3, #18]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <lcd_display+0x74>
	}
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8002c38:	2308      	movs	r3, #8
 8002c3a:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ff51 	bl	8002aec <lcd_write>
}
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  return (HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	f04f 33ff 	mov.w	r3, #4294967295
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4807      	ldr	r0, [pc, #28]	@ (8002c88 <_write+0x34>)
 8002c6c:	f006 f8dc 	bl	8008e28 <HAL_UART_Transmit>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <_write+0x26>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e001      	b.n	8002c7e <_write+0x2a>
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200007e0 	.word	0x200007e0

08002c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08c      	sub	sp, #48	@ 0x30
 8002c90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c92:	f000 fe83 	bl	800399c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c96:	f000 f8c7 	bl	8002e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9a:	f7ff fd57 	bl	800274c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002c9e:	f000 fc5b 	bl	8003558 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002ca2:	f7ff fe43 	bl	800292c <MX_I2C1_Init>
  MX_SPI4_Init();
 8002ca6:	f000 f99b 	bl	8002fe0 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002caa:	f000 fb3f 	bl	800332c <MX_TIM2_Init>
  MX_TIM7_Init();
 8002cae:	f000 fbb3 	bl	8003418 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	@ (8002de8 <main+0x15c>)
 8002cb4:	224e      	movs	r2, #78	@ 0x4e
 8002cb6:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <main+0x15c>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  lcd_init(&disp);
 8002cc0:	4849      	ldr	r0, [pc, #292]	@ (8002de8 <main+0x15c>)
 8002cc2:	f7ff fed3 	bl	8002a6c <lcd_init>
  sprintf((char *)disp.f_line, "Wartosc: %.2f", my_variable);
 8002cc6:	4b49      	ldr	r3, [pc, #292]	@ (8002dec <main+0x160>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc6c 	bl	80005a8 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4946      	ldr	r1, [pc, #280]	@ (8002df0 <main+0x164>)
 8002cd6:	4847      	ldr	r0, [pc, #284]	@ (8002df4 <main+0x168>)
 8002cd8:	f01a fbe8 	bl	801d4ac <siprintf>
  sprintf((char *)disp.s_line, "");
 8002cdc:	4946      	ldr	r1, [pc, #280]	@ (8002df8 <main+0x16c>)
 8002cde:	4847      	ldr	r0, [pc, #284]	@ (8002dfc <main+0x170>)
 8002ce0:	f01a fbe4 	bl	801d4ac <siprintf>
  lcd_display(&disp);
 8002ce4:	4840      	ldr	r0, [pc, #256]	@ (8002de8 <main+0x15c>)
 8002ce6:	f7ff ff47 	bl	8002b78 <lcd_display>

  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8002cea:	2201      	movs	r2, #1
 8002cec:	4944      	ldr	r1, [pc, #272]	@ (8002e00 <main+0x174>)
 8002cee:	4845      	ldr	r0, [pc, #276]	@ (8002e04 <main+0x178>)
 8002cf0:	f006 f91d 	bl	8008f2e <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev);
 8002cf4:	4844      	ldr	r0, [pc, #272]	@ (8002e08 <main+0x17c>)
 8002cf6:	f7ff f911 	bl	8001f1c <BMP2_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002cfa:	f7ff fb57 	bl	80023ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002cfe:	f008 f97c 	bl	800affa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float prev_variable = 0;
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
	  if (prev_variable != my_variable) {
 8002d08:	4b38      	ldr	r3, [pc, #224]	@ (8002dec <main+0x160>)
 8002d0a:	edd3 7a00 	vldr	s15, [r3]
 8002d0e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002d12:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d016      	beq.n	8002d4a <main+0xbe>
	  char buffer[16];
	  sprintf(buffer, "Val: %.2f", my_variable);
 8002d1c:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <main+0x160>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fd fc41 	bl	80005a8 <__aeabi_f2d>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	4937      	ldr	r1, [pc, #220]	@ (8002e0c <main+0x180>)
 8002d2e:	f01a fbbd 	bl	801d4ac <siprintf>
	  sprintf((char *)disp.f_line, "%s", buffer);
 8002d32:	463b      	mov	r3, r7
 8002d34:	461a      	mov	r2, r3
 8002d36:	4936      	ldr	r1, [pc, #216]	@ (8002e10 <main+0x184>)
 8002d38:	482e      	ldr	r0, [pc, #184]	@ (8002df4 <main+0x168>)
 8002d3a:	f01a fbb7 	bl	801d4ac <siprintf>
	  lcd_display(&disp);  // Aktualizacja wyświetlacza LCD
 8002d3e:	482a      	ldr	r0, [pc, #168]	@ (8002de8 <main+0x15c>)
 8002d40:	f7ff ff1a 	bl	8002b78 <lcd_display>
	  prev_variable = my_variable;
 8002d44:	4b29      	ldr	r3, [pc, #164]	@ (8002dec <main+0x160>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	      HAL_Delay(500);
 8002d4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d4e:	f000 fe83 	bl	8003a58 <HAL_Delay>

	      double temp, press;
	          BMP2_ReadData(&bmp2dev, &press, &temp);
 8002d52:	f107 0218 	add.w	r2, r7, #24
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	482a      	ldr	r0, [pc, #168]	@ (8002e08 <main+0x17c>)
 8002d5e:	f7ff f9a9 	bl	80020b4 <BMP2_ReadData>
	          temp_mdegC = 1000*temp;
 8002d62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e14 <main+0x188>)
 8002d6c:	f7fd fc74 	bl	8000658 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7fd ff1e 	bl	8000bb8 <__aeabi_d2iz>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a26      	ldr	r2, [pc, #152]	@ (8002e18 <main+0x18c>)
 8002d80:	6013      	str	r3, [r2, #0]
	          press_Pa = 100*press;
 8002d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	4b24      	ldr	r3, [pc, #144]	@ (8002e1c <main+0x190>)
 8002d8c:	f7fd fc64 	bl	8000658 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd ff0e 	bl	8000bb8 <__aeabi_d2iz>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a20      	ldr	r2, [pc, #128]	@ (8002e20 <main+0x194>)
 8002da0:	6013      	str	r3, [r2, #0]
	          printf("{\"id\":1,\"temp\":%5.2f, \"press\":%7.2f }\r\n", (float)temp, (float)press);
 8002da2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fd ff2d 	bl	8000c08 <__aeabi_d2f>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbf9 	bl	80005a8 <__aeabi_f2d>
 8002db6:	4604      	mov	r4, r0
 8002db8:	460d      	mov	r5, r1
 8002dba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd ff21 	bl	8000c08 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbed 	bl	80005a8 <__aeabi_f2d>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	e9cd 2300 	strd	r2, r3, [sp]
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	462b      	mov	r3, r5
 8002dda:	4812      	ldr	r0, [pc, #72]	@ (8002e24 <main+0x198>)
 8002ddc:	f01a fb54 	bl	801d488 <iprintf>
	          HAL_Delay(250);
 8002de0:	20fa      	movs	r0, #250	@ 0xfa
 8002de2:	f000 fe39 	bl	8003a58 <HAL_Delay>
  {
 8002de6:	e78f      	b.n	8002d08 <main+0x7c>
 8002de8:	200006b0 	.word	0x200006b0
 8002dec:	20000054 	.word	0x20000054
 8002df0:	0801fa18 	.word	0x0801fa18
 8002df4:	200006b1 	.word	0x200006b1
 8002df8:	0801fa28 	.word	0x0801fa28
 8002dfc:	200006c2 	.word	0x200006c2
 8002e00:	200006d4 	.word	0x200006d4
 8002e04:	200007e0 	.word	0x200007e0
 8002e08:	20000018 	.word	0x20000018
 8002e0c:	0801fa2c 	.word	0x0801fa2c
 8002e10:	0801fa38 	.word	0x0801fa38
 8002e14:	408f4000 	.word	0x408f4000
 8002e18:	200006d8 	.word	0x200006d8
 8002e1c:	40590000 	.word	0x40590000
 8002e20:	200006dc 	.word	0x200006dc
 8002e24:	0801fa3c 	.word	0x0801fa3c

08002e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b094      	sub	sp, #80	@ 0x50
 8002e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	2230      	movs	r2, #48	@ 0x30
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f01a fbc5 	bl	801d5c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e4c:	f003 f868 	bl	8005f20 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <SystemClock_Config+0xd4>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a29      	ldr	r2, [pc, #164]	@ (8002efc <SystemClock_Config+0xd4>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <SystemClock_Config+0xd4>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <SystemClock_Config+0xd8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a24      	ldr	r2, [pc, #144]	@ (8002f00 <SystemClock_Config+0xd8>)
 8002e6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b22      	ldr	r3, [pc, #136]	@ (8002f00 <SystemClock_Config+0xd8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e84:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002e94:	2304      	movs	r3, #4
 8002e96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002e98:	23d8      	movs	r3, #216	@ 0xd8
 8002e9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ea4:	f107 0320 	add.w	r3, r7, #32
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 f899 	bl	8005fe0 <HAL_RCC_OscConfig>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002eb4:	f000 f88e 	bl	8002fd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002eb8:	f003 f842 	bl	8005f40 <HAL_PWREx_EnableOverDrive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002ec2:	f000 f887 	bl	8002fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec6:	230f      	movs	r3, #15
 8002ec8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ed2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ed6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002edc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2107      	movs	r1, #7
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fb1f 	bl	8006528 <HAL_RCC_ClockConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002ef0:	f000 f870 	bl	8002fd4 <Error_Handler>
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	3750      	adds	r7, #80	@ 0x50
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40007000 	.word	0x40007000

08002f04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2a      	ldr	r2, [pc, #168]	@ (8002fbc <HAL_UART_RxCpltCallback+0xb8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d14d      	bne.n	8002fb2 <HAL_UART_RxCpltCallback+0xae>
        if (rx_buffer[0] == '+') {
 8002f16:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xbc>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b2b      	cmp	r3, #43	@ 0x2b
 8002f1c:	d113      	bne.n	8002f46 <HAL_UART_RxCpltCallback+0x42>
            my_variable += 0.5;
 8002f1e:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fb40 	bl	80005a8 <__aeabi_f2d>
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b26      	ldr	r3, [pc, #152]	@ (8002fc8 <HAL_UART_RxCpltCallback+0xc4>)
 8002f2e:	f7fd f9dd 	bl	80002ec <__adddf3>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fe65 	bl	8000c08 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a20      	ldr	r2, [pc, #128]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e016      	b.n	8002f74 <HAL_UART_RxCpltCallback+0x70>
        } else if (rx_buffer[0] == '-') {
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xbc>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f4c:	d112      	bne.n	8002f74 <HAL_UART_RxCpltCallback+0x70>
            my_variable -= 0.5;
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd fb28 	bl	80005a8 <__aeabi_f2d>
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <HAL_UART_RxCpltCallback+0xc4>)
 8002f5e:	f7fd f9c3 	bl	80002e8 <__aeabi_dsub>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fe4d 	bl	8000c08 <__aeabi_d2f>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f72:	6013      	str	r3, [r2, #0]
        }

        // Wysyłanie aktualnej wartości
        char response[20];
        sprintf(response, "%.2f\n", my_variable);
 8002f74:	4b13      	ldr	r3, [pc, #76]	@ (8002fc4 <HAL_UART_RxCpltCallback+0xc0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fb15 	bl	80005a8 <__aeabi_f2d>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	f107 000c 	add.w	r0, r7, #12
 8002f86:	4911      	ldr	r1, [pc, #68]	@ (8002fcc <HAL_UART_RxCpltCallback+0xc8>)
 8002f88:	f01a fa90 	bl	801d4ac <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd f99d 	bl	80002d0 <strlen>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f107 010c 	add.w	r1, r7, #12
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	480b      	ldr	r0, [pc, #44]	@ (8002fd0 <HAL_UART_RxCpltCallback+0xcc>)
 8002fa4:	f005 ff40 	bl	8008e28 <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);  // Ponowne włączenie odbioru
 8002fa8:	2201      	movs	r2, #1
 8002faa:	4905      	ldr	r1, [pc, #20]	@ (8002fc0 <HAL_UART_RxCpltCallback+0xbc>)
 8002fac:	4808      	ldr	r0, [pc, #32]	@ (8002fd0 <HAL_UART_RxCpltCallback+0xcc>)
 8002fae:	f005 ffbe 	bl	8008f2e <HAL_UART_Receive_IT>
    }
}
 8002fb2:	bf00      	nop
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	200006d4 	.word	0x200006d4
 8002fc4:	20000054 	.word	0x20000054
 8002fc8:	3fe00000 	.word	0x3fe00000
 8002fcc:	0801fa64 	.word	0x0801fa64
 8002fd0:	200007e0 	.word	0x200007e0

08002fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd8:	b672      	cpsid	i
}
 8002fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <Error_Handler+0x8>

08002fe0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <MX_SPI4_Init+0x74>)
 8002fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <MX_SPI4_Init+0x78>)
 8002fe8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <MX_SPI4_Init+0x74>)
 8002fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ff0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <MX_SPI4_Init+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ff8:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_SPI4_Init+0x74>)
 8002ffa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002ffe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003002:	2202      	movs	r2, #2
 8003004:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003008:	2201      	movs	r2, #1
 800300a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800300c:	4b11      	ldr	r3, [pc, #68]	@ (8003054 <MX_SPI4_Init+0x74>)
 800300e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003012:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003016:	2218      	movs	r2, #24
 8003018:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <MX_SPI4_Init+0x74>)
 800301c:	2200      	movs	r2, #0
 800301e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003022:	2200      	movs	r2, #0
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003028:	2200      	movs	r2, #0
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <MX_SPI4_Init+0x74>)
 800302e:	2207      	movs	r2, #7
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003034:	2200      	movs	r2, #0
 8003036:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <MX_SPI4_Init+0x74>)
 800303a:	2200      	movs	r2, #0
 800303c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800303e:	4805      	ldr	r0, [pc, #20]	@ (8003054 <MX_SPI4_Init+0x74>)
 8003040:	f004 f888 	bl	8007154 <HAL_SPI_Init>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800304a:	f7ff ffc3 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200006e0 	.word	0x200006e0
 8003058:	40013400 	.word	0x40013400

0800305c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_SPI_MspInit+0x7c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d127      	bne.n	80030ce <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003096:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a10      	ldr	r2, [pc, #64]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 800309c:	f043 0310 	orr.w	r3, r3, #16
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <HAL_SPI_MspInit+0x80>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SPI_SCK_Pin|BMP280_SPI_MISO_Pin|BMP280_SPI_MOSI_Pin;
 80030ae:	2364      	movs	r3, #100	@ 0x64
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80030be:	2305      	movs	r3, #5
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4619      	mov	r1, r3
 80030c8:	4805      	ldr	r0, [pc, #20]	@ (80030e0 <HAL_SPI_MspInit+0x84>)
 80030ca:	f002 f93b 	bl	8005344 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80030ce:	bf00      	nop
 80030d0:	3728      	adds	r7, #40	@ 0x28
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40013400 	.word	0x40013400
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40021000 	.word	0x40021000

080030e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	4b11      	ldr	r3, [pc, #68]	@ (8003130 <HAL_MspInit+0x4c>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	4a10      	ldr	r2, [pc, #64]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fe:	607b      	str	r3, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_MspInit+0x4c>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_MspInit+0x4c>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_MspInit+0x4c>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	210f      	movs	r1, #15
 800311e:	f06f 0001 	mvn.w	r0, #1
 8003122:	f000 fd98 	bl	8003c56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <NMI_Handler+0x4>

0800313c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <HardFault_Handler+0x4>

08003144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <MemManage_Handler+0x4>

0800314c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003150:	bf00      	nop
 8003152:	e7fd      	b.n	8003150 <BusFault_Handler+0x4>

08003154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <UsageFault_Handler+0x4>

0800315c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316e:	f000 fc53 	bl	8003a18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003172:	f00a f949 	bl	800d408 <xTaskGetSchedulerState>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d001      	beq.n	8003180 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800317c:	f00a fd2c 	bl	800dbd8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003188:	4802      	ldr	r0, [pc, #8]	@ (8003194 <USART3_IRQHandler+0x10>)
 800318a:	f005 ff15 	bl	8008fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	200007e0 	.word	0x200007e0

08003198 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800319c:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <ETH_IRQHandler+0x10>)
 800319e:	f001 f9fd 	bl	800459c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000524c 	.word	0x2000524c

080031ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
	return 1;
 80031b0:	2301      	movs	r3, #1
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <_kill>:

int _kill(int pid, int sig)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <_kill+0x20>)
 80031c8:	2216      	movs	r2, #22
 80031ca:	601a      	str	r2, [r3, #0]
	return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	2000f630 	.word	0x2000f630

080031e0 <_exit>:

void _exit (int status)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031e8:	f04f 31ff 	mov.w	r1, #4294967295
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ffe5 	bl	80031bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80031f2:	bf00      	nop
 80031f4:	e7fd      	b.n	80031f2 <_exit+0x12>

080031f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e00a      	b.n	800321e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003208:	f3af 8000 	nop.w
 800320c:	4601      	mov	r1, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	60ba      	str	r2, [r7, #8]
 8003214:	b2ca      	uxtb	r2, r1
 8003216:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3301      	adds	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	dbf0      	blt.n	8003208 <_read+0x12>
	}

return len;
 8003226:	687b      	ldr	r3, [r7, #4]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	return -1;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003258:	605a      	str	r2, [r3, #4]
	return 0;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <_isatty>:

int _isatty(int file)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	return 1;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800327e:	b480      	push	{r7}
 8003280:	b085      	sub	sp, #20
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
	return 0;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032a0:	4a14      	ldr	r2, [pc, #80]	@ (80032f4 <_sbrk+0x5c>)
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <_sbrk+0x60>)
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <_sbrk+0x64>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <_sbrk+0x68>)
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <_sbrk+0x64>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d205      	bcs.n	80032d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <_sbrk+0x6c>)
 80032ca:	220c      	movs	r2, #12
 80032cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295
 80032d2:	e009      	b.n	80032e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <_sbrk+0x64>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <_sbrk+0x64>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	4a06      	ldr	r2, [pc, #24]	@ (80032fc <_sbrk+0x64>)
 80032e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e6:	68fb      	ldr	r3, [r7, #12]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20050000 	.word	0x20050000
 80032f8:	00000400 	.word	0x00000400
 80032fc:	20000744 	.word	0x20000744
 8003300:	2000f640 	.word	0x2000f640
 8003304:	2000f630 	.word	0x2000f630

08003308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800330c:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <SystemInit+0x20>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	4a05      	ldr	r2, [pc, #20]	@ (8003328 <SystemInit+0x20>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08e      	sub	sp, #56	@ 0x38
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800334c:	463b      	mov	r3, r7
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	615a      	str	r2, [r3, #20]
 800335c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800335e:	4b2d      	ldr	r3, [pc, #180]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003360:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8003366:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003368:	226b      	movs	r2, #107	@ 0x6b
 800336a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800336c:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <MX_TIM2_Init+0xe8>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003372:	4b28      	ldr	r3, [pc, #160]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003374:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800337a:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <MX_TIM2_Init+0xe8>)
 800337c:	2200      	movs	r2, #0
 800337e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003380:	4b24      	ldr	r3, [pc, #144]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003382:	2200      	movs	r2, #0
 8003384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003386:	4823      	ldr	r0, [pc, #140]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003388:	f004 fe44 	bl	8008014 <HAL_TIM_Base_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003392:	f7ff fe1f 	bl	8002fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800339c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033a0:	4619      	mov	r1, r3
 80033a2:	481c      	ldr	r0, [pc, #112]	@ (8003414 <MX_TIM2_Init+0xe8>)
 80033a4:	f005 f802 	bl	80083ac <HAL_TIM_ConfigClockSource>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80033ae:	f7ff fe11 	bl	8002fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033b2:	4818      	ldr	r0, [pc, #96]	@ (8003414 <MX_TIM2_Init+0xe8>)
 80033b4:	f004 fe85 	bl	80080c2 <HAL_TIM_PWM_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80033be:	f7ff fe09 	bl	8002fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033ca:	f107 031c 	add.w	r3, r7, #28
 80033ce:	4619      	mov	r1, r3
 80033d0:	4810      	ldr	r0, [pc, #64]	@ (8003414 <MX_TIM2_Init+0xe8>)
 80033d2:	f005 fc4d 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80033dc:	f7ff fdfa 	bl	8002fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033e0:	2360      	movs	r3, #96	@ 0x60
 80033e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033f0:	463b      	mov	r3, r7
 80033f2:	220c      	movs	r2, #12
 80033f4:	4619      	mov	r1, r3
 80033f6:	4807      	ldr	r0, [pc, #28]	@ (8003414 <MX_TIM2_Init+0xe8>)
 80033f8:	f004 fec4 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003402:	f7ff fde7 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003406:	4803      	ldr	r0, [pc, #12]	@ (8003414 <MX_TIM2_Init+0xe8>)
 8003408:	f000 f870 	bl	80034ec <HAL_TIM_MspPostInit>

}
 800340c:	bf00      	nop
 800340e:	3738      	adds	r7, #56	@ 0x38
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000748 	.word	0x20000748

08003418 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003428:	4b15      	ldr	r3, [pc, #84]	@ (8003480 <MX_TIM7_Init+0x68>)
 800342a:	4a16      	ldr	r2, [pc, #88]	@ (8003484 <MX_TIM7_Init+0x6c>)
 800342c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800342e:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <MX_TIM7_Init+0x68>)
 8003430:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8003434:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <MX_TIM7_Init+0x68>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800343c:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <MX_TIM7_Init+0x68>)
 800343e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003442:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003444:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <MX_TIM7_Init+0x68>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800344a:	480d      	ldr	r0, [pc, #52]	@ (8003480 <MX_TIM7_Init+0x68>)
 800344c:	f004 fde2 	bl	8008014 <HAL_TIM_Base_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003456:	f7ff fdbd 	bl	8002fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4806      	ldr	r0, [pc, #24]	@ (8003480 <MX_TIM7_Init+0x68>)
 8003468:	f005 fc02 	bl	8008c70 <HAL_TIMEx_MasterConfigSynchronization>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003472:	f7ff fdaf 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000794 	.word	0x20000794
 8003484:	40001400 	.word	0x40001400

08003488 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003498:	d10c      	bne.n	80034b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	4a11      	ldr	r2, [pc, #68]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a6:	4b0f      	ldr	r3, [pc, #60]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80034b2:	e010      	b.n	80034d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a0b      	ldr	r2, [pc, #44]	@ (80034e8 <HAL_TIM_Base_MspInit+0x60>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10b      	bne.n	80034d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034be:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_TIM_Base_MspInit+0x5c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40001400 	.word	0x40001400

080034ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 030c 	add.w	r3, r7, #12
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
 8003502:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800350c:	d11b      	bne.n	8003546 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_TIM_MspPostInit+0x64>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	4a0f      	ldr	r2, [pc, #60]	@ (8003550 <HAL_TIM_MspPostInit+0x64>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6313      	str	r3, [r2, #48]	@ 0x30
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <HAL_TIM_MspPostInit+0x64>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8003526:	2308      	movs	r3, #8
 8003528:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 800353a:	f107 030c 	add.w	r3, r7, #12
 800353e:	4619      	mov	r1, r3
 8003540:	4804      	ldr	r0, [pc, #16]	@ (8003554 <HAL_TIM_MspPostInit+0x68>)
 8003542:	f001 feff 	bl	8005344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003546:	bf00      	nop
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000

08003558 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800355c:	4b14      	ldr	r3, [pc, #80]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 800355e:	4a15      	ldr	r2, [pc, #84]	@ (80035b4 <MX_USART3_UART_Init+0x5c>)
 8003560:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003562:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003568:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800356a:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 800356c:	2200      	movs	r2, #0
 800356e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003570:	4b0f      	ldr	r3, [pc, #60]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003572:	2200      	movs	r2, #0
 8003574:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003576:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800357c:	4b0c      	ldr	r3, [pc, #48]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 800357e:	220c      	movs	r2, #12
 8003580:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003584:	2200      	movs	r2, #0
 8003586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800358e:	4b08      	ldr	r3, [pc, #32]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800359a:	4805      	ldr	r0, [pc, #20]	@ (80035b0 <MX_USART3_UART_Init+0x58>)
 800359c:	f005 fbf6 	bl	8008d8c <HAL_UART_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80035a6:	f7ff fd15 	bl	8002fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200007e0 	.word	0x200007e0
 80035b4:	40004800 	.word	0x40004800

080035b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b0aa      	sub	sp, #168	@ 0xa8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d0:	f107 0310 	add.w	r3, r7, #16
 80035d4:	2284      	movs	r2, #132	@ 0x84
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f019 fff4 	bl	801d5c6 <memset>
  if(uartHandle->Instance==USART3)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a26      	ldr	r2, [pc, #152]	@ (800367c <HAL_UART_MspInit+0xc4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d144      	bne.n	8003672 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035ee:	2300      	movs	r3, #0
 80035f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 f9bc 	bl	8006974 <HAL_RCCEx_PeriphCLKConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003602:	f7ff fce7 	bl	8002fd4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003606:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	4a1d      	ldr	r2, [pc, #116]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003610:	6413      	str	r3, [r2, #64]	@ 0x40
 8003612:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800361e:	4b18      	ldr	r3, [pc, #96]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 8003624:	f043 0308 	orr.w	r3, r3, #8
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <HAL_UART_MspInit+0xc8>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003636:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800363a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364a:	2303      	movs	r3, #3
 800364c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003650:	2307      	movs	r3, #7
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003656:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800365a:	4619      	mov	r1, r3
 800365c:	4809      	ldr	r0, [pc, #36]	@ (8003684 <HAL_UART_MspInit+0xcc>)
 800365e:	f001 fe71 	bl	8005344 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2105      	movs	r1, #5
 8003666:	2027      	movs	r0, #39	@ 0x27
 8003668:	f000 faf5 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800366c:	2027      	movs	r0, #39	@ 0x27
 800366e:	f000 fb0e 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003672:	bf00      	nop
 8003674:	37a8      	adds	r7, #168	@ 0xa8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40004800 	.word	0x40004800
 8003680:	40023800 	.word	0x40023800
 8003684:	40020c00 	.word	0x40020c00

08003688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800368c:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800368e:	490e      	ldr	r1, [pc, #56]	@ (80036c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003690:	4a0e      	ldr	r2, [pc, #56]	@ (80036cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003694:	e002      	b.n	800369c <LoopCopyDataInit>

08003696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800369a:	3304      	adds	r3, #4

0800369c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800369c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a0:	d3f9      	bcc.n	8003696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036a2:	4a0b      	ldr	r2, [pc, #44]	@ (80036d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80036a4:	4c0b      	ldr	r4, [pc, #44]	@ (80036d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a8:	e001      	b.n	80036ae <LoopFillZerobss>

080036aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036ac:	3204      	adds	r2, #4

080036ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b0:	d3fb      	bcc.n	80036aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80036b2:	f7ff fe29 	bl	8003308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036b6:	f01a f84d 	bl	801d754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ba:	f7ff fae7 	bl	8002c8c <main>
  bx  lr    
 80036be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80036c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80036cc:	08024e14 	.word	0x08024e14
  ldr r2, =_sbss
 80036d0:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 80036d4:	2000f640 	.word	0x2000f640

080036d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d8:	e7fe      	b.n	80036d8 <ADC_IRQHandler>

080036da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <LAN8742_RegisterBusIO+0x28>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <LAN8742_RegisterBusIO+0x28>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <LAN8742_RegisterBusIO+0x28>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	e014      	b.n	8003732 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d17c      	bne.n	8003858 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e01c      	b.n	80037b2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f107 0208 	add.w	r2, r7, #8
 8003780:	2112      	movs	r1, #18
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	4798      	blx	r3
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	da03      	bge.n	8003794 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800378c:	f06f 0304 	mvn.w	r3, #4
 8003790:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003792:	e00b      	b.n	80037ac <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	429a      	cmp	r2, r3
 800379e:	d105      	bne.n	80037ac <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
         break;
 80037aa:	e005      	b.n	80037b8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	3301      	adds	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b1f      	cmp	r3, #31
 80037b6:	d9df      	bls.n	8003778 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b1f      	cmp	r3, #31
 80037be:	d902      	bls.n	80037c6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80037c0:	f06f 0302 	mvn.w	r3, #2
 80037c4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d145      	bne.n	8003858 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6810      	ldr	r0, [r2, #0]
 80037d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80037d8:	2100      	movs	r1, #0
 80037da:	4798      	blx	r3
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db37      	blt.n	8003852 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6810      	ldr	r0, [r2, #0]
 80037ea:	f107 0208 	add.w	r2, r7, #8
 80037ee:	2100      	movs	r1, #0
 80037f0:	4798      	blx	r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db28      	blt.n	800384a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4798      	blx	r3
 80037fe:	4603      	mov	r3, r0
 8003800:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003802:	e01c      	b.n	800383e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	4798      	blx	r3
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003816:	d80e      	bhi.n	8003836 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6810      	ldr	r0, [r2, #0]
 8003820:	f107 0208 	add.w	r2, r7, #8
 8003824:	2100      	movs	r1, #0
 8003826:	4798      	blx	r3
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	da07      	bge.n	800383e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800382e:	f06f 0304 	mvn.w	r3, #4
 8003832:	613b      	str	r3, [r7, #16]
                 break;
 8003834:	e010      	b.n	8003858 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003836:	f06f 0301 	mvn.w	r3, #1
 800383a:	613b      	str	r3, [r7, #16]
               break;
 800383c:	e00c      	b.n	8003858 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1dd      	bne.n	8003804 <LAN8742_Init+0xc6>
 8003848:	e006      	b.n	8003858 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800384a:	f06f 0304 	mvn.w	r3, #4
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e002      	b.n	8003858 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003852:	f06f 0303 	mvn.w	r3, #3
 8003856:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d112      	bne.n	8003884 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4798      	blx	r3
 8003864:	4603      	mov	r3, r0
 8003866:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003868:	bf00      	nop
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4798      	blx	r3
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800387c:	d9f5      	bls.n	800386a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003884:	693b      	ldr	r3, [r7, #16]
 }
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6810      	ldr	r0, [r2, #0]
 80038a2:	f107 020c 	add.w	r2, r7, #12
 80038a6:	2101      	movs	r1, #1
 80038a8:	4798      	blx	r3
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	da02      	bge.n	80038b6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038b0:	f06f 0304 	mvn.w	r3, #4
 80038b4:	e06e      	b.n	8003994 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6810      	ldr	r0, [r2, #0]
 80038be:	f107 020c 	add.w	r2, r7, #12
 80038c2:	2101      	movs	r1, #1
 80038c4:	4798      	blx	r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	da02      	bge.n	80038d2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038cc:	f06f 0304 	mvn.w	r3, #4
 80038d0:	e060      	b.n	8003994 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80038dc:	2301      	movs	r3, #1
 80038de:	e059      	b.n	8003994 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6810      	ldr	r0, [r2, #0]
 80038e8:	f107 020c 	add.w	r2, r7, #12
 80038ec:	2100      	movs	r1, #0
 80038ee:	4798      	blx	r3
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da02      	bge.n	80038fc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80038f6:	f06f 0304 	mvn.w	r3, #4
 80038fa:	e04b      	b.n	8003994 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d11b      	bne.n	800393e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d006      	beq.n	800391e <LAN8742_GetLinkState+0x90>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800391a:	2302      	movs	r3, #2
 800391c:	e03a      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003928:	2303      	movs	r3, #3
 800392a:	e033      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003936:	2304      	movs	r3, #4
 8003938:	e02c      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800393a:	2305      	movs	r3, #5
 800393c:	e02a      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6810      	ldr	r0, [r2, #0]
 8003946:	f107 020c 	add.w	r2, r7, #12
 800394a:	211f      	movs	r1, #31
 800394c:	4798      	blx	r3
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	da02      	bge.n	800395a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003954:	f06f 0304 	mvn.w	r3, #4
 8003958:	e01c      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003964:	2306      	movs	r3, #6
 8003966:	e015      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 031c 	and.w	r3, r3, #28
 800396e:	2b18      	cmp	r3, #24
 8003970:	d101      	bne.n	8003976 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003972:	2302      	movs	r3, #2
 8003974:	e00e      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 031c 	and.w	r3, r3, #28
 800397c:	2b08      	cmp	r3, #8
 800397e:	d101      	bne.n	8003984 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003980:	2303      	movs	r3, #3
 8003982:	e007      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 031c 	and.w	r3, r3, #28
 800398a:	2b14      	cmp	r3, #20
 800398c:	d101      	bne.n	8003992 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800398e:	2304      	movs	r3, #4
 8003990:	e000      	b.n	8003994 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003992:	2305      	movs	r3, #5
    }				
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a0:	2003      	movs	r0, #3
 80039a2:	f000 f94d 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039a6:	200f      	movs	r0, #15
 80039a8:	f000 f806 	bl	80039b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ac:	f7ff fb9a 	bl	80030e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039c0:	4b12      	ldr	r3, [pc, #72]	@ (8003a0c <HAL_InitTick+0x54>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <HAL_InitTick+0x58>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f967 	bl	8003caa <HAL_SYSTICK_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00e      	b.n	8003a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0f      	cmp	r3, #15
 80039ea:	d80a      	bhi.n	8003a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039ec:	2200      	movs	r2, #0
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	f000 f92f 	bl	8003c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f8:	4a06      	ldr	r2, [pc, #24]	@ (8003a14 <HAL_InitTick+0x5c>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000058 	.word	0x20000058
 8003a10:	20000060 	.word	0x20000060
 8003a14:	2000005c 	.word	0x2000005c

08003a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_IncTick+0x20>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_IncTick+0x24>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <HAL_IncTick+0x24>)
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000060 	.word	0x20000060
 8003a3c:	20000868 	.word	0x20000868

08003a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return uwTick;
 8003a44:	4b03      	ldr	r3, [pc, #12]	@ (8003a54 <HAL_GetTick+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000868 	.word	0x20000868

08003a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7ff ffee 	bl	8003a40 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d005      	beq.n	8003a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a72:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <HAL_Delay+0x44>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a7e:	bf00      	nop
 8003a80:	f7ff ffde 	bl	8003a40 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d8f7      	bhi.n	8003a80 <HAL_Delay+0x28>
  {
  }
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000060 	.word	0x20000060

08003aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003abc:	4013      	ands	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ac8:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60d3      	str	r3, [r2, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	e000ed00 	.word	0xe000ed00
 8003ae4:	05fa0000 	.word	0x05fa0000

08003ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aec:	4b04      	ldr	r3, [pc, #16]	@ (8003b00 <__NVIC_GetPriorityGrouping+0x18>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	f003 0307 	and.w	r3, r3, #7
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	db0b      	blt.n	8003b2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	f003 021f 	and.w	r2, r3, #31
 8003b1c:	4907      	ldr	r1, [pc, #28]	@ (8003b3c <__NVIC_EnableIRQ+0x38>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2001      	movs	r0, #1
 8003b26:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000e100 	.word	0xe000e100

08003b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	6039      	str	r1, [r7, #0]
 8003b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	db0a      	blt.n	8003b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	490c      	ldr	r1, [pc, #48]	@ (8003b8c <__NVIC_SetPriority+0x4c>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	0112      	lsls	r2, r2, #4
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	440b      	add	r3, r1
 8003b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b68:	e00a      	b.n	8003b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	4908      	ldr	r1, [pc, #32]	@ (8003b90 <__NVIC_SetPriority+0x50>)
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	3b04      	subs	r3, #4
 8003b78:	0112      	lsls	r2, r2, #4
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	761a      	strb	r2, [r3, #24]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000e100 	.word	0xe000e100
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b089      	sub	sp, #36	@ 0x24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f1c3 0307 	rsb	r3, r3, #7
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	bf28      	it	cs
 8003bb2:	2304      	movcs	r3, #4
 8003bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2b06      	cmp	r3, #6
 8003bbc:	d902      	bls.n	8003bc4 <NVIC_EncodePriority+0x30>
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3b03      	subs	r3, #3
 8003bc2:	e000      	b.n	8003bc6 <NVIC_EncodePriority+0x32>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa01 f303 	lsl.w	r3, r1, r3
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bec:	4313      	orrs	r3, r2
         );
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3724      	adds	r7, #36	@ 0x24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c0c:	d301      	bcc.n	8003c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00f      	b.n	8003c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c12:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <SysTick_Config+0x40>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c1a:	210f      	movs	r1, #15
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f7ff ff8e 	bl	8003b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <SysTick_Config+0x40>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c2a:	4b04      	ldr	r3, [pc, #16]	@ (8003c3c <SysTick_Config+0x40>)
 8003c2c:	2207      	movs	r2, #7
 8003c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	e000e010 	.word	0xe000e010

08003c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff29 	bl	8003aa0 <__NVIC_SetPriorityGrouping>
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
 8003c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c68:	f7ff ff3e 	bl	8003ae8 <__NVIC_GetPriorityGrouping>
 8003c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7ff ff8e 	bl	8003b94 <NVIC_EncodePriority>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff5d 	bl	8003b40 <__NVIC_SetPriority>
}
 8003c86:	bf00      	nop
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ff31 	bl	8003b04 <__NVIC_EnableIRQ>
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffa2 	bl	8003bfc <SysTick_Config>
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cd0:	f7ff feb6 	bl	8003a40 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d008      	beq.n	8003cf4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e052      	b.n	8003d9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0216 	bic.w	r2, r2, #22
 8003d02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_DMA_Abort+0x62>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0208 	bic.w	r2, r2, #8
 8003d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d44:	e013      	b.n	8003d6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d46:	f7ff fe7b 	bl	8003a40 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d90c      	bls.n	8003d6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e015      	b.n	8003d9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e4      	bne.n	8003d46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d80:	223f      	movs	r2, #63	@ 0x3f
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d004      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2280      	movs	r2, #128	@ 0x80
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e00c      	b.n	8003dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2205      	movs	r2, #5
 8003dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06a      	b.n	8003ed0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2223      	movs	r2, #35	@ 0x23
 8003e08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f006 feb1 	bl	800ab74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e12:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <HAL_ETH_Init+0xf0>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	4a30      	ldr	r2, [pc, #192]	@ (8003ed8 <HAL_ETH_Init+0xf0>)
 8003e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed8 <HAL_ETH_Init+0xf0>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <HAL_ETH_Init+0xf4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003edc <HAL_ETH_Init+0xf4>)
 8003e30:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e34:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003e36:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_ETH_Init+0xf4>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4927      	ldr	r1, [pc, #156]	@ (8003edc <HAL_ETH_Init+0xf4>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_ETH_Init+0xf4>)
 8003e46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e60:	f7ff fdee 	bl	8003a40 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e66:	e011      	b.n	8003e8c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003e68:	f7ff fdea 	bl	8003a40 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003e76:	d909      	bls.n	8003e8c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	22e0      	movs	r2, #224	@ 0xe0
 8003e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e021      	b.n	8003ed0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e4      	bne.n	8003e68 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 ffac 	bl	8004dfc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f001 f853 	bl	8004f50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f001 f8a9 	bl	8005002 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f001 f811 	bl	8004ee0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40013800 	.word	0x40013800

08003ee0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d150      	bne.n	8003f94 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2223      	movs	r2, #35	@ 0x23
 8003ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fa7b 	bl	80043fc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0208 	orr.w	r2, r2, #8
 8003f14:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7ff fd9a 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0204 	orr.w	r2, r2, #4
 8003f3a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fd87 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fdf3 	bl	8004b3e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f6e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f86:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2223      	movs	r2, #35	@ 0x23
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d17b      	bne.n	80040aa <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2223      	movs	r2, #35	@ 0x23
 8003fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003fce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b35      	ldr	r3, [pc, #212]	@ (80040b4 <HAL_ETH_Start_IT+0x114>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003ff4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9fc 	bl	80043fc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0208 	orr.w	r2, r2, #8
 8004012:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800401c:	2001      	movs	r0, #1
 800401e:	f7ff fd1b 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0204 	orr.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004042:	2001      	movs	r0, #1
 8004044:	f7ff fd08 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fd74 	bl	8004b3e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800406c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	f043 0302 	orr.w	r3, r3, #2
 8004080:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004084:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800408e:	69d9      	ldr	r1, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <HAL_ETH_Start_IT+0x118>)
 8004096:	430b      	orrs	r3, r1
 8004098:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800409c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2223      	movs	r2, #35	@ 0x23
 80040a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	00020060 	.word	0x00020060
 80040b8:	0001a0c1 	.word	0x0001a0c1

080040bc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ca:	2b23      	cmp	r3, #35	@ 0x23
 80040cc:	d16e      	bne.n	80041ac <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2223      	movs	r2, #35	@ 0x23
 80040d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b34      	ldr	r3, [pc, #208]	@ (80041b8 <HAL_ETH_Stop_IT+0xfc>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040ec:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004100:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004104:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800411c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0204 	bic.w	r2, r2, #4
 800412c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004136:	2001      	movs	r0, #1
 8004138:	f7ff fc8e 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fcfa 	bl	8004b3e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0208 	bic.w	r2, r2, #8
 8004158:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004162:	2001      	movs	r0, #1
 8004164:	f7ff fc78 	bl	8003a58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e00e      	b.n	8004194 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	3212      	adds	r2, #18
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d9ed      	bls.n	8004176 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2210      	movs	r2, #16
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	fffe5f3e 	.word	0xfffe5f3e

080041bc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e045      	b.n	800426c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e6:	2b23      	cmp	r3, #35	@ 0x23
 80041e8:	d13f      	bne.n	800426a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80041f2:	2201      	movs	r2, #1
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 ff70 	bl	80050dc <ETH_Prepare_Tx_Descriptors>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004208:	f043 0202 	orr.w	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e02a      	b.n	800426c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004216:	f3bf 8f4f 	dsb	sy
}
 800421a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	629a      	str	r2, [r3, #40]	@ 0x28
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422a:	2b03      	cmp	r3, #3
 800422c:	d904      	bls.n	8004238 <HAL_ETH_Transmit_IT+0x7c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	1f1a      	subs	r2, r3, #4
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004252:	461a      	mov	r2, r3
 8004254:	2304      	movs	r3, #4
 8004256:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f043 0201 	orr.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0a8      	b.n	80043f2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a6:	2b23      	cmp	r3, #35	@ 0x23
 80042a8:	d001      	beq.n	80042ae <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e0a1      	b.n	80043f2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	3212      	adds	r2, #18
 80042ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042be:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c4:	f1c3 0304 	rsb	r3, r3, #4
 80042c8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80042ca:	e06a      	b.n	80043a2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d103      	bne.n	80042fc <HAL_ETH_ReadData+0x88>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d040      	beq.n	800437e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004330:	3b04      	subs	r3, #4
 8004332:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004358:	461a      	mov	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f006 fdd5 	bl	800af0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	441a      	add	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2200      	movs	r2, #0
 800437c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3301      	adds	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d902      	bls.n	8004390 <HAL_ETH_ReadData+0x11c>
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3b04      	subs	r3, #4
 800438e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	3212      	adds	r2, #18
 8004396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	3301      	adds	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db06      	blt.n	80043b8 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d202      	bcs.n	80043b8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d089      	beq.n	80042cc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	441a      	add	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f815 	bl	80043fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d108      	bne.n	80043f0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004408:	2301      	movs	r3, #1
 800440a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004410:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	3212      	adds	r2, #18
 8004418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004422:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004424:	e040      	b.n	80044a8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d112      	bne.n	8004454 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800442e:	f107 030c 	add.w	r3, r7, #12
 8004432:	4618      	mov	r0, r3
 8004434:	f006 fd3a 	bl	800aeac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	74fb      	strb	r3, [r7, #19]
 8004442:	e007      	b.n	8004454 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	461a      	mov	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d026      	beq.n	80044a8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	2b00      	cmp	r3, #0
 8004460:	d103      	bne.n	800446a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4a1e      	ldr	r2, [pc, #120]	@ (80044e0 <ETH_UpdateDescriptor+0xe4>)
 8004466:	605a      	str	r2, [r3, #4]
 8004468:	e003      	b.n	8004472 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8004470:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004472:	f3bf 8f5f 	dmb	sy
}
 8004476:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3301      	adds	r3, #1
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d902      	bls.n	8004496 <ETH_UpdateDescriptor+0x9a>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3b04      	subs	r3, #4
 8004494:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	3212      	adds	r2, #18
 800449c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a0:	617b      	str	r3, [r7, #20]
      desccount--;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <ETH_UpdateDescriptor+0xb8>
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1b8      	bne.n	8004426 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d00c      	beq.n	80044d8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c6:	461a      	mov	r2, r3
 80044c8:	2300      	movs	r3, #0
 80044ca:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80044d8:	bf00      	nop
 80044da:	3720      	adds	r7, #32
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	800045f8 	.word	0x800045f8

080044e4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3318      	adds	r3, #24
 80044f0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004502:	e03f      	b.n	8004584 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004504:	2301      	movs	r3, #1
 8004506:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3b01      	subs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	3304      	adds	r3, #4
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	3301      	adds	r3, #1
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d028      	beq.n	8004584 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68d9      	ldr	r1, [r3, #12]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	440b      	add	r3, r1
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	db1b      	blt.n	8004580 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3304      	adds	r3, #4
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4618      	mov	r0, r3
 8004556:	f006 fd1b 	bl	800af90 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	3304      	adds	r3, #4
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800457e:	e001      	b.n	8004584 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_ETH_ReleaseTxPacket+0xac>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1b9      	bne.n	8004504 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b2:	2b40      	cmp	r3, #64	@ 0x40
 80045b4:	d112      	bne.n	80045dc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c4:	2b40      	cmp	r3, #64	@ 0x40
 80045c6:	d109      	bne.n	80045dc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b50      	ldr	r3, [pc, #320]	@ (8004714 <HAL_ETH_IRQHandler+0x178>)
 80045d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f006 f830 	bl	800a63c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d113      	bne.n	8004616 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10a      	bne.n	8004616 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004608:	461a      	mov	r2, r3
 800460a:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800460e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f006 f823 	bl	800a65c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004624:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004628:	d14c      	bne.n	80046c4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463c:	d142      	bne.n	80046c4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f043 0208 	orr.w	r2, r3, #8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004660:	d11a      	bne.n	8004698 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	4b2a      	ldr	r3, [pc, #168]	@ (8004718 <HAL_ETH_IRQHandler+0x17c>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004688:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800468c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	22e0      	movs	r2, #224	@ 0xe0
 8004692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004696:	e012      	b.n	80046be <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	f248 6380 	movw	r3, #34432	@ 0x8680
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b6:	461a      	mov	r2, r3
 80046b8:	f248 6380 	movw	r3, #34432	@ 0x8680
 80046bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f005 ffdc 	bl	800a67c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d10e      	bne.n	80046f0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f81c 	bl	8004720 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80046f0:	4b0a      	ldr	r3, [pc, #40]	@ (800471c <HAL_ETH_IRQHandler+0x180>)
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80046fc:	4b07      	ldr	r3, [pc, #28]	@ (800471c <HAL_ETH_IRQHandler+0x180>)
 80046fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004702:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f815 	bl	8004734 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	00010040 	.word	0x00010040
 8004718:	007e2000 	.word	0x007e2000
 800471c:	40013c00 	.word	0x40013c00

08004720 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f003 031c 	and.w	r3, r3, #28
 8004764:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	02db      	lsls	r3, r3, #11
 800476a:	b29b      	uxth	r3, r3
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	019b      	lsls	r3, r3, #6
 8004776:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0302 	bic.w	r3, r3, #2
 8004786:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f043 0301 	orr.w	r3, r3, #1
 800478e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004798:	f7ff f952 	bl	8003a40 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800479e:	e00d      	b.n	80047bc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80047a0:	f7ff f94e 	bl	8003a40 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ae:	d301      	bcc.n	80047b4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e010      	b.n	80047d6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ec      	bne.n	80047a0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	461a      	mov	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	f003 031c 	and.w	r3, r3, #28
 80047fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	02db      	lsls	r3, r3, #11
 8004800:	b29b      	uxth	r3, r3
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	019b      	lsls	r3, r3, #6
 800480c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f043 0302 	orr.w	r3, r3, #2
 800481c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004838:	f7ff f902 	bl	8003a40 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800483e:	e00d      	b.n	800485c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004840:	f7ff f8fe 	bl	8003a40 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800484e:	d301      	bcc.n	8004854 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e009      	b.n	8004868 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1ec      	bne.n	8004840 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0d9      	b.n	8004a38 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	461a      	mov	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	bf14      	ite	ne
 8004976:	2301      	movne	r3, #1
 8004978:	2300      	moveq	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	461a      	mov	r2, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf14      	ite	ne
 8004a28:	2301      	movne	r3, #1
 8004a2a:	2300      	moveq	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e00b      	b.n	8004a70 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d105      	bne.n	8004a6e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f88f 	bl	8004b88 <ETH_SetMACConfig>

    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
  }
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 031c 	bic.w	r3, r3, #28
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004a90:	f001 ff3c 	bl	800690c <HAL_RCC_GetHCLKFreq>
 8004a94:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d908      	bls.n	8004ab0 <HAL_ETH_SetMDIOClockRange+0x38>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d804      	bhi.n	8004ab0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f043 0308 	orr.w	r3, r3, #8
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e027      	b.n	8004b00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d908      	bls.n	8004aca <HAL_ETH_SetMDIOClockRange+0x52>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4a17      	ldr	r2, [pc, #92]	@ (8004b18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d204      	bcs.n	8004aca <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f043 030c 	orr.w	r3, r3, #12
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e01a      	b.n	8004b00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	4a12      	ldr	r2, [pc, #72]	@ (8004b18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d303      	bcc.n	8004ada <HAL_ETH_SetMDIOClockRange+0x62>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a11      	ldr	r2, [pc, #68]	@ (8004b1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d911      	bls.n	8004afe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4a0f      	ldr	r2, [pc, #60]	@ (8004b1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d908      	bls.n	8004af4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8004b20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d804      	bhi.n	8004af4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e005      	b.n	8004b00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f043 0310 	orr.w	r3, r3, #16
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	e000      	b.n	8004b00 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004afe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	611a      	str	r2, [r3, #16]
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	01312cff 	.word	0x01312cff
 8004b14:	02160ebf 	.word	0x02160ebf
 8004b18:	03938700 	.word	0x03938700
 8004b1c:	05f5e0ff 	.word	0x05f5e0ff
 8004b20:	08f0d17f 	.word	0x08f0d17f

08004b24 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b6e:	2001      	movs	r0, #1
 8004b70:	f7fe ff72 	bl	8003a58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b7e:	6193      	str	r3, [r2, #24]
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4b51      	ldr	r3, [pc, #324]	@ (8004ce4 <ETH_SetMACConfig+0x15c>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7c1b      	ldrb	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <ETH_SetMACConfig+0x28>
 8004baa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004bae:	e000      	b.n	8004bb2 <ETH_SetMACConfig+0x2a>
 8004bb0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	7c5b      	ldrb	r3, [r3, #17]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <ETH_SetMACConfig+0x38>
 8004bba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bbe:	e000      	b.n	8004bc2 <ETH_SetMACConfig+0x3a>
 8004bc0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004bc2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004bc8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	7fdb      	ldrb	r3, [r3, #31]
 8004bce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004bd0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004bd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	7f92      	ldrb	r2, [r2, #30]
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d102      	bne.n	8004be6 <ETH_SetMACConfig+0x5e>
 8004be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004be4:	e000      	b.n	8004be8 <ETH_SetMACConfig+0x60>
 8004be6:	2200      	movs	r2, #0
                        macconf->Speed |
 8004be8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	7f1b      	ldrb	r3, [r3, #28]
 8004bee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004bf0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bf6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	791b      	ldrb	r3, [r3, #4]
 8004bfc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004bfe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	d102      	bne.n	8004c10 <ETH_SetMACConfig+0x88>
 8004c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0e:	e000      	b.n	8004c12 <ETH_SetMACConfig+0x8a>
 8004c10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004c12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	7bdb      	ldrb	r3, [r3, #15]
 8004c18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004c1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004c20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f7fe ff08 	bl	8003a58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004c5e:	4013      	ands	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	d101      	bne.n	8004c76 <ETH_SetMACConfig+0xee>
 8004c72:	2280      	movs	r2, #128	@ 0x80
 8004c74:	e000      	b.n	8004c78 <ETH_SetMACConfig+0xf0>
 8004c76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004c86:	2a01      	cmp	r2, #1
 8004c88:	d101      	bne.n	8004c8e <ETH_SetMACConfig+0x106>
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	e000      	b.n	8004c90 <ETH_SetMACConfig+0x108>
 8004c8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004c90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004c98:	2a01      	cmp	r2, #1
 8004c9a:	d101      	bne.n	8004ca0 <ETH_SetMACConfig+0x118>
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	e000      	b.n	8004ca2 <ETH_SetMACConfig+0x11a>
 8004ca0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004caa:	2a01      	cmp	r2, #1
 8004cac:	d101      	bne.n	8004cb2 <ETH_SetMACConfig+0x12a>
 8004cae:	2202      	movs	r2, #2
 8004cb0:	e000      	b.n	8004cb4 <ETH_SetMACConfig+0x12c>
 8004cb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7fe fec3 	bl	8003a58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	619a      	str	r2, [r3, #24]
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	ff20810f 	.word	0xff20810f

08004ce8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4b3d      	ldr	r3, [pc, #244]	@ (8004df8 <ETH_SetDMAConfig+0x110>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	7b1b      	ldrb	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <ETH_SetDMAConfig+0x2c>
 8004d0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004d12:	e000      	b.n	8004d16 <ETH_SetDMAConfig+0x2e>
 8004d14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	7b5b      	ldrb	r3, [r3, #13]
 8004d1a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d1c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	7f52      	ldrb	r2, [r2, #29]
 8004d22:	2a00      	cmp	r2, #0
 8004d24:	d102      	bne.n	8004d2c <ETH_SetDMAConfig+0x44>
 8004d26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d2a:	e000      	b.n	8004d2e <ETH_SetDMAConfig+0x46>
 8004d2c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004d2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	7b9b      	ldrb	r3, [r3, #14]
 8004d34:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004d36:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004d3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	7f1b      	ldrb	r3, [r3, #28]
 8004d42:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004d44:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	7f9b      	ldrb	r3, [r3, #30]
 8004d4a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d4c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d52:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d5a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7fe fe6a 	bl	8003a58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	791b      	ldrb	r3, [r3, #4]
 8004d96:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d9c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004da2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004da8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004db0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004db2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004dba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004dc0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004dce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f7fe fe3b 	bl	8003a58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dea:	461a      	mov	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6013      	str	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	f8de3f23 	.word	0xf8de3f23

08004dfc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b0a6      	sub	sp, #152	@ 0x98
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e62:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fe86 	bl	8004b88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004eac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004eb0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004eb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004eb6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ebc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ecc:	f107 0308 	add.w	r3, r7, #8
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ff08 	bl	8004ce8 <ETH_SetDMAConfig>
}
 8004ed8:	bf00      	nop
 8004eda:	3798      	adds	r7, #152	@ 0x98
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3305      	adds	r3, #5
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	3204      	adds	r2, #4
 8004ef8:	7812      	ldrb	r2, [r2, #0]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <ETH_MACAddressConfig+0x68>)
 8004f02:	4413      	add	r3, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	061a      	lsls	r2, r3, #24
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3302      	adds	r3, #2
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	041b      	lsls	r3, r3, #16
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	021b      	lsls	r3, r3, #8
 8004f24:	4313      	orrs	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <ETH_MACAddressConfig+0x6c>)
 8004f32:	4413      	add	r3, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	6013      	str	r3, [r2, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40028040 	.word	0x40028040
 8004f4c:	40028044 	.word	0x40028044

08004f50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e03e      	b.n	8004fdc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	440b      	add	r3, r1
 8004f6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	3206      	adds	r2, #6
 8004f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d80c      	bhi.n	8004fc0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	440b      	add	r3, r1
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e004      	b.n	8004fca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d9bd      	bls.n	8004f5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff4:	611a      	str	r2, [r3, #16]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	e046      	b.n	800509e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6919      	ldr	r1, [r3, #16]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2200      	movs	r2, #0
 800502c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2200      	movs	r2, #0
 8005032:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800504c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8005054:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	3212      	adds	r2, #18
 800506a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d80c      	bhi.n	800508e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6919      	ldr	r1, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	461a      	mov	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	60da      	str	r2, [r3, #12]
 800508c:	e004      	b.n	8005098 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	461a      	mov	r2, r3
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3301      	adds	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d9b5      	bls.n	8005010 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ce:	60da      	str	r2, [r3, #12]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80050dc:	b480      	push	{r7}
 80050de:	b08d      	sub	sp, #52	@ 0x34
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3318      	adds	r3, #24
 80050ec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005106:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800511a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800511e:	d007      	beq.n	8005130 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	3304      	adds	r3, #4
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005130:	2302      	movs	r3, #2
 8005132:	e0ff      	b.n	8005334 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	3301      	adds	r3, #1
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b7d      	ldr	r3, [pc, #500]	@ (8005340 <ETH_Prepare_Tx_Descriptors+0x264>)
 800514a:	4013      	ands	r3, r2
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	6852      	ldr	r2, [r2, #4]
 8005150:	431a      	orrs	r2, r3
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	431a      	orrs	r2, r3
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	431a      	orrs	r2, r3
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80051b6:	f3bf 8f5f 	dmb	sy
}
 80051ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80051c8:	e082      	b.n	80052d0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e005      	b.n	80051f6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80051f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f8:	3301      	adds	r3, #1
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d902      	bls.n	8005208 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	3b04      	subs	r3, #4
 8005206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005210:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800522a:	d007      	beq.n	800523c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005230:	3304      	adds	r3, #4
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d029      	beq.n	8005290 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800524a:	2300      	movs	r3, #0
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524e:	e019      	b.n	8005284 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005250:	f3bf 8f5f 	dmb	sy
}
 8005254:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005264:	3301      	adds	r3, #1
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526a:	2b03      	cmp	r3, #3
 800526c:	d902      	bls.n	8005274 <ETH_Prepare_Tx_Descriptors+0x198>
 800526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005270:	3b04      	subs	r3, #4
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800527c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	3301      	adds	r3, #1
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	429a      	cmp	r2, r3
 800528a:	d3e1      	bcc.n	8005250 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800528c:	2302      	movs	r3, #2
 800528e:	e051      	b.n	8005334 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	3301      	adds	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <ETH_Prepare_Tx_Descriptors+0x264>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	6852      	ldr	r2, [r2, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3301      	adds	r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80052be:	f3bf 8f5f 	dmb	sy
}
 80052c2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f47f af78 	bne.w	80051ca <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e005      	b.n	80052fa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800530a:	6979      	ldr	r1, [r7, #20]
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	3304      	adds	r3, #4
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800531a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800531c:	b672      	cpsid	i
}
 800531e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800532e:	b662      	cpsie	i
}
 8005330:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3734      	adds	r7, #52	@ 0x34
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	ffffe000 	.word	0xffffe000

08005344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005344:	b480      	push	{r7}
 8005346:	b089      	sub	sp, #36	@ 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e175      	b.n	8005650 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005364:	2201      	movs	r2, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	f040 8164 	bne.w	800564a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d005      	beq.n	800539a <HAL_GPIO_Init+0x56>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d130      	bne.n	80053fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 0201 	and.w	r2, r3, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d017      	beq.n	8005438 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d123      	bne.n	800548c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	220f      	movs	r2, #15
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2203      	movs	r2, #3
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0203 	and.w	r2, r3, #3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80be 	beq.w	800564a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ce:	4b66      	ldr	r3, [pc, #408]	@ (8005668 <HAL_GPIO_Init+0x324>)
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d2:	4a65      	ldr	r2, [pc, #404]	@ (8005668 <HAL_GPIO_Init+0x324>)
 80054d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80054da:	4b63      	ldr	r3, [pc, #396]	@ (8005668 <HAL_GPIO_Init+0x324>)
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80054e6:	4a61      	ldr	r2, [pc, #388]	@ (800566c <HAL_GPIO_Init+0x328>)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	3302      	adds	r3, #2
 80054ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	4013      	ands	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a58      	ldr	r2, [pc, #352]	@ (8005670 <HAL_GPIO_Init+0x32c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d037      	beq.n	8005582 <HAL_GPIO_Init+0x23e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a57      	ldr	r2, [pc, #348]	@ (8005674 <HAL_GPIO_Init+0x330>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_GPIO_Init+0x23a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_GPIO_Init+0x334>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <HAL_GPIO_Init+0x236>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a55      	ldr	r2, [pc, #340]	@ (800567c <HAL_GPIO_Init+0x338>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d025      	beq.n	8005576 <HAL_GPIO_Init+0x232>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a54      	ldr	r2, [pc, #336]	@ (8005680 <HAL_GPIO_Init+0x33c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01f      	beq.n	8005572 <HAL_GPIO_Init+0x22e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a53      	ldr	r2, [pc, #332]	@ (8005684 <HAL_GPIO_Init+0x340>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d019      	beq.n	800556e <HAL_GPIO_Init+0x22a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a52      	ldr	r2, [pc, #328]	@ (8005688 <HAL_GPIO_Init+0x344>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <HAL_GPIO_Init+0x226>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a51      	ldr	r2, [pc, #324]	@ (800568c <HAL_GPIO_Init+0x348>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00d      	beq.n	8005566 <HAL_GPIO_Init+0x222>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a50      	ldr	r2, [pc, #320]	@ (8005690 <HAL_GPIO_Init+0x34c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <HAL_GPIO_Init+0x21e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a4f      	ldr	r2, [pc, #316]	@ (8005694 <HAL_GPIO_Init+0x350>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <HAL_GPIO_Init+0x21a>
 800555a:	2309      	movs	r3, #9
 800555c:	e012      	b.n	8005584 <HAL_GPIO_Init+0x240>
 800555e:	230a      	movs	r3, #10
 8005560:	e010      	b.n	8005584 <HAL_GPIO_Init+0x240>
 8005562:	2308      	movs	r3, #8
 8005564:	e00e      	b.n	8005584 <HAL_GPIO_Init+0x240>
 8005566:	2307      	movs	r3, #7
 8005568:	e00c      	b.n	8005584 <HAL_GPIO_Init+0x240>
 800556a:	2306      	movs	r3, #6
 800556c:	e00a      	b.n	8005584 <HAL_GPIO_Init+0x240>
 800556e:	2305      	movs	r3, #5
 8005570:	e008      	b.n	8005584 <HAL_GPIO_Init+0x240>
 8005572:	2304      	movs	r3, #4
 8005574:	e006      	b.n	8005584 <HAL_GPIO_Init+0x240>
 8005576:	2303      	movs	r3, #3
 8005578:	e004      	b.n	8005584 <HAL_GPIO_Init+0x240>
 800557a:	2302      	movs	r3, #2
 800557c:	e002      	b.n	8005584 <HAL_GPIO_Init+0x240>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <HAL_GPIO_Init+0x240>
 8005582:	2300      	movs	r3, #0
 8005584:	69fa      	ldr	r2, [r7, #28]
 8005586:	f002 0203 	and.w	r2, r2, #3
 800558a:	0092      	lsls	r2, r2, #2
 800558c:	4093      	lsls	r3, r2
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005594:	4935      	ldr	r1, [pc, #212]	@ (800566c <HAL_GPIO_Init+0x328>)
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	089b      	lsrs	r3, r3, #2
 800559a:	3302      	adds	r3, #2
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <HAL_GPIO_Init+0x354>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055c6:	4a34      	ldr	r2, [pc, #208]	@ (8005698 <HAL_GPIO_Init+0x354>)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055cc:	4b32      	ldr	r3, [pc, #200]	@ (8005698 <HAL_GPIO_Init+0x354>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d003      	beq.n	80055f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055f0:	4a29      	ldr	r2, [pc, #164]	@ (8005698 <HAL_GPIO_Init+0x354>)
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055f6:	4b28      	ldr	r3, [pc, #160]	@ (8005698 <HAL_GPIO_Init+0x354>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800561a:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <HAL_GPIO_Init+0x354>)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <HAL_GPIO_Init+0x354>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	43db      	mvns	r3, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4013      	ands	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005644:	4a14      	ldr	r2, [pc, #80]	@ (8005698 <HAL_GPIO_Init+0x354>)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	3301      	adds	r3, #1
 800564e:	61fb      	str	r3, [r7, #28]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	2b0f      	cmp	r3, #15
 8005654:	f67f ae86 	bls.w	8005364 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	3724      	adds	r7, #36	@ 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	40013800 	.word	0x40013800
 8005670:	40020000 	.word	0x40020000
 8005674:	40020400 	.word	0x40020400
 8005678:	40020800 	.word	0x40020800
 800567c:	40020c00 	.word	0x40020c00
 8005680:	40021000 	.word	0x40021000
 8005684:	40021400 	.word	0x40021400
 8005688:	40021800 	.word	0x40021800
 800568c:	40021c00 	.word	0x40021c00
 8005690:	40022000 	.word	0x40022000
 8005694:	40022400 	.word	0x40022400
 8005698:	40013c00 	.word	0x40013c00

0800569c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
 80056a8:	4613      	mov	r3, r2
 80056aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056ac:	787b      	ldrb	r3, [r7, #1]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056b2:	887a      	ldrh	r2, [r7, #2]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80056b8:	e003      	b.n	80056c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80056ba:	887b      	ldrh	r3, [r7, #2]
 80056bc:	041a      	lsls	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	619a      	str	r2, [r3, #24]
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	460b      	mov	r3, r1
 80056d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056e0:	887a      	ldrh	r2, [r7, #2]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4013      	ands	r3, r2
 80056e6:	041a      	lsls	r2, r3, #16
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	43d9      	mvns	r1, r3
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	400b      	ands	r3, r1
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	619a      	str	r2, [r3, #24]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e07f      	b.n	8005816 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fd f93e 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	@ 0x24
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005754:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005764:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	e006      	b.n	800578c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800578a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b02      	cmp	r3, #2
 8005792:	d104      	bne.n	800579e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800579c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005820 <HAL_I2C_Init+0x11c>)
 80057aa:	430b      	orrs	r3, r1
 80057ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69d9      	ldr	r1, [r3, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1a      	ldr	r2, [r3, #32]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	02008000 	.word	0x02008000

08005824 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	461a      	mov	r2, r3
 8005830:	460b      	mov	r3, r1
 8005832:	817b      	strh	r3, [r7, #10]
 8005834:	4613      	mov	r3, r2
 8005836:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b20      	cmp	r3, #32
 8005842:	f040 80da 	bne.w	80059fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_I2C_Master_Transmit+0x30>
 8005850:	2302      	movs	r3, #2
 8005852:	e0d3      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800585c:	f7fe f8f0 	bl	8003a40 <HAL_GetTick>
 8005860:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	2319      	movs	r3, #25
 8005868:	2201      	movs	r2, #1
 800586a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 f8f0 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0be      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2221      	movs	r2, #33	@ 0x21
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2210      	movs	r2, #16
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	893a      	ldrh	r2, [r7, #8]
 800589e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2bff      	cmp	r3, #255	@ 0xff
 80058ae:	d90e      	bls.n	80058ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	22ff      	movs	r2, #255	@ 0xff
 80058b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	4b51      	ldr	r3, [pc, #324]	@ (8005a04 <HAL_I2C_Master_Transmit+0x1e0>)
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fa60 	bl	8005d8c <I2C_TransferConfig>
 80058cc:	e06c      	b.n	80059a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	8979      	ldrh	r1, [r7, #10]
 80058e0:	4b48      	ldr	r3, [pc, #288]	@ (8005a04 <HAL_I2C_Master_Transmit+0x1e0>)
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fa4f 	bl	8005d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80058ee:	e05b      	b.n	80059a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	6a39      	ldr	r1, [r7, #32]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f8ed 	bl	8005ad4 <I2C_WaitOnTXISFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e07b      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d034      	beq.n	80059a8 <HAL_I2C_Master_Transmit+0x184>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d130      	bne.n	80059a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	2200      	movs	r2, #0
 800594e:	2180      	movs	r1, #128	@ 0x80
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f87f 	bl	8005a54 <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e04d      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2bff      	cmp	r3, #255	@ 0xff
 8005968:	d90e      	bls.n	8005988 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	22ff      	movs	r2, #255	@ 0xff
 800596e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	b2da      	uxtb	r2, r3
 8005976:	8979      	ldrh	r1, [r7, #10]
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fa03 	bl	8005d8c <I2C_TransferConfig>
 8005986:	e00f      	b.n	80059a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005996:	b2da      	uxtb	r2, r3
 8005998:	8979      	ldrh	r1, [r7, #10]
 800599a:	2300      	movs	r3, #0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 f9f2 	bl	8005d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d19e      	bne.n	80058f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	6a39      	ldr	r1, [r7, #32]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f8cc 	bl	8005b54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01a      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2220      	movs	r2, #32
 80059cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6859      	ldr	r1, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <HAL_I2C_Master_Transmit+0x1e4>)
 80059da:	400b      	ands	r3, r1
 80059dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	80002000 	.word	0x80002000
 8005a08:	fe00e800 	.word	0xfe00e800

08005a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d103      	bne.n	8005a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d007      	beq.n	8005a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0201 	orr.w	r2, r2, #1
 8005a46:	619a      	str	r2, [r3, #24]
  }
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	4613      	mov	r3, r2
 8005a62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a64:	e022      	b.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6c:	d01e      	beq.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6e:	f7fd ffe7 	bl	8003a40 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d113      	bne.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e00f      	b.n	8005acc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d0cd      	beq.n	8005a66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ae0:	e02c      	b.n	8005b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f870 	bl	8005bcc <I2C_IsErrorOccurred>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e02a      	b.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afc:	d01e      	beq.n	8005b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afe:	f7fd ff9f 	bl	8003a40 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d302      	bcc.n	8005b14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d113      	bne.n	8005b3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b18:	f043 0220 	orr.w	r2, r3, #32
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e007      	b.n	8005b4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d1cb      	bne.n	8005ae2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b60:	e028      	b.n	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f830 	bl	8005bcc <I2C_IsErrorOccurred>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e026      	b.n	8005bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b76:	f7fd ff63 	bl	8003a40 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d302      	bcc.n	8005b8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d113      	bne.n	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e007      	b.n	8005bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d1cf      	bne.n	8005b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005be6:	2300      	movs	r3, #0
 8005be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d068      	beq.n	8005cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c00:	e049      	b.n	8005c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d045      	beq.n	8005c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fd ff19 	bl	8003a40 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <I2C_IsErrorOccurred+0x54>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d13a      	bne.n	8005c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c42:	d121      	bne.n	8005c88 <I2C_IsErrorOccurred+0xbc>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c4a:	d01d      	beq.n	8005c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005c4c:	7cfb      	ldrb	r3, [r7, #19]
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d01a      	beq.n	8005c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005c62:	f7fd feed 	bl	8003a40 <HAL_GetTick>
 8005c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c68:	e00e      	b.n	8005c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c6a:	f7fd fee9 	bl	8003a40 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b19      	cmp	r3, #25
 8005c76:	d907      	bls.n	8005c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f043 0320 	orr.w	r3, r3, #32
 8005c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005c86:	e006      	b.n	8005c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d1e9      	bne.n	8005c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d003      	beq.n	8005cac <I2C_IsErrorOccurred+0xe0>
 8005ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0aa      	beq.n	8005c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f043 0304 	orr.w	r3, r3, #4
 8005cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00b      	beq.n	8005d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	f043 0302 	orr.w	r3, r3, #2
 8005d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005d38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d01c      	beq.n	8005d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff fe63 	bl	8005a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6859      	ldr	r1, [r3, #4]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <I2C_IsErrorOccurred+0x1bc>)
 8005d52:	400b      	ands	r3, r1
 8005d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3728      	adds	r7, #40	@ 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	fe00e800 	.word	0xfe00e800

08005d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005da4:	7a7b      	ldrb	r3, [r7, #9]
 8005da6:	041b      	lsls	r3, r3, #16
 8005da8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	0d5b      	lsrs	r3, r3, #21
 8005dc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005dca:	4b08      	ldr	r3, [pc, #32]	@ (8005dec <I2C_TransferConfig+0x60>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	ea02 0103 	and.w	r1, r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	03ff63ff 	.word	0x03ff63ff

08005df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d138      	bne.n	8005e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e032      	b.n	8005e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	@ 0x24
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0201 	bic.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6819      	ldr	r1, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0201 	orr.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e000      	b.n	8005e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
  }
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d139      	bne.n	8005f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e033      	b.n	8005f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	@ 0x24
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e000      	b.n	8005f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f10:	2302      	movs	r3, #2
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
	...

08005f20 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f24:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a04      	ldr	r2, [pc, #16]	@ (8005f3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40007000 	.word	0x40007000

08005f40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f4a:	4b23      	ldr	r3, [pc, #140]	@ (8005fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4e:	4a22      	ldr	r2, [pc, #136]	@ (8005fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f56:	4b20      	ldr	r3, [pc, #128]	@ (8005fd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f62:	4b1e      	ldr	r3, [pc, #120]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a1d      	ldr	r2, [pc, #116]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f6e:	f7fd fd67 	bl	8003a40 <HAL_GetTick>
 8005f72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f74:	e009      	b.n	8005f8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f76:	f7fd fd63 	bl	8003a40 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f84:	d901      	bls.n	8005f8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e022      	b.n	8005fd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f8a:	4b14      	ldr	r3, [pc, #80]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f96:	d1ee      	bne.n	8005f76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f98:	4b10      	ldr	r3, [pc, #64]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fa4:	f7fd fd4c 	bl	8003a40 <HAL_GetTick>
 8005fa8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005faa:	e009      	b.n	8005fc0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fac:	f7fd fd48 	bl	8003a40 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fba:	d901      	bls.n	8005fc0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e007      	b.n	8005fd0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fc0:	4b06      	ldr	r3, [pc, #24]	@ (8005fdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d1ee      	bne.n	8005fac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	40007000 	.word	0x40007000

08005fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e291      	b.n	800651a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 8087 	beq.w	8006112 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006004:	4b96      	ldr	r3, [pc, #600]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b04      	cmp	r3, #4
 800600e:	d00c      	beq.n	800602a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006010:	4b93      	ldr	r3, [pc, #588]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 030c 	and.w	r3, r3, #12
 8006018:	2b08      	cmp	r3, #8
 800601a:	d112      	bne.n	8006042 <HAL_RCC_OscConfig+0x62>
 800601c:	4b90      	ldr	r3, [pc, #576]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006024:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006028:	d10b      	bne.n	8006042 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800602a:	4b8d      	ldr	r3, [pc, #564]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d06c      	beq.n	8006110 <HAL_RCC_OscConfig+0x130>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d168      	bne.n	8006110 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e26b      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800604a:	d106      	bne.n	800605a <HAL_RCC_OscConfig+0x7a>
 800604c:	4b84      	ldr	r3, [pc, #528]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a83      	ldr	r2, [pc, #524]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	e02e      	b.n	80060b8 <HAL_RCC_OscConfig+0xd8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0x9c>
 8006062:	4b7f      	ldr	r3, [pc, #508]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7e      	ldr	r2, [pc, #504]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b7c      	ldr	r3, [pc, #496]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a7b      	ldr	r2, [pc, #492]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006074:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e01d      	b.n	80060b8 <HAL_RCC_OscConfig+0xd8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006084:	d10c      	bne.n	80060a0 <HAL_RCC_OscConfig+0xc0>
 8006086:	4b76      	ldr	r3, [pc, #472]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a75      	ldr	r2, [pc, #468]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800608c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	4b73      	ldr	r3, [pc, #460]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a72      	ldr	r2, [pc, #456]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	e00b      	b.n	80060b8 <HAL_RCC_OscConfig+0xd8>
 80060a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6e      	ldr	r2, [pc, #440]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80060a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a6b      	ldr	r2, [pc, #428]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80060b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d013      	beq.n	80060e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c0:	f7fd fcbe 	bl	8003a40 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c8:	f7fd fcba 	bl	8003a40 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b64      	cmp	r3, #100	@ 0x64
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e21f      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060da:	4b61      	ldr	r3, [pc, #388]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0xe8>
 80060e6:	e014      	b.n	8006112 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e8:	f7fd fcaa 	bl	8003a40 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f0:	f7fd fca6 	bl	8003a40 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b64      	cmp	r3, #100	@ 0x64
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e20b      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006102:	4b57      	ldr	r3, [pc, #348]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x110>
 800610e:	e000      	b.n	8006112 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d069      	beq.n	80061f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800611e:	4b50      	ldr	r3, [pc, #320]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 030c 	and.w	r3, r3, #12
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800612a:	4b4d      	ldr	r3, [pc, #308]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b08      	cmp	r3, #8
 8006134:	d11c      	bne.n	8006170 <HAL_RCC_OscConfig+0x190>
 8006136:	4b4a      	ldr	r3, [pc, #296]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d116      	bne.n	8006170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006142:	4b47      	ldr	r3, [pc, #284]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_RCC_OscConfig+0x17a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d001      	beq.n	800615a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e1df      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615a:	4b41      	ldr	r3, [pc, #260]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	493d      	ldr	r1, [pc, #244]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800616e:	e040      	b.n	80061f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d023      	beq.n	80061c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006178:	4b39      	ldr	r3, [pc, #228]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a38      	ldr	r2, [pc, #224]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fd fc5c 	bl	8003a40 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618c:	f7fd fc58 	bl	8003a40 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e1bd      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619e:	4b30      	ldr	r3, [pc, #192]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	4929      	ldr	r1, [pc, #164]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]
 80061be:	e018      	b.n	80061f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c0:	4b27      	ldr	r3, [pc, #156]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a26      	ldr	r2, [pc, #152]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd fc38 	bl	8003a40 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fd fc34 	bl	8003a40 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e199      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d038      	beq.n	8006270 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d019      	beq.n	800623a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006206:	4b16      	ldr	r3, [pc, #88]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620a:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006212:	f7fd fc15 	bl	8003a40 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800621a:	f7fd fc11 	bl	8003a40 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e176      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800622e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f0      	beq.n	800621a <HAL_RCC_OscConfig+0x23a>
 8006238:	e01a      	b.n	8006270 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800623a:	4b09      	ldr	r3, [pc, #36]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 800623c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800623e:	4a08      	ldr	r2, [pc, #32]	@ (8006260 <HAL_RCC_OscConfig+0x280>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006246:	f7fd fbfb 	bl	8003a40 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800624c:	e00a      	b.n	8006264 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800624e:	f7fd fbf7 	bl	8003a40 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d903      	bls.n	8006264 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e15c      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
 8006260:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006264:	4b91      	ldr	r3, [pc, #580]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ee      	bne.n	800624e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80a4 	beq.w	80063c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627e:	4b8b      	ldr	r3, [pc, #556]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	4b88      	ldr	r3, [pc, #544]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	4a87      	ldr	r2, [pc, #540]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	@ 0x40
 8006296:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a2:	2301      	movs	r3, #1
 80062a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a6:	4b82      	ldr	r3, [pc, #520]	@ (80064b0 <HAL_RCC_OscConfig+0x4d0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d118      	bne.n	80062e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80062b2:	4b7f      	ldr	r3, [pc, #508]	@ (80064b0 <HAL_RCC_OscConfig+0x4d0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a7e      	ldr	r2, [pc, #504]	@ (80064b0 <HAL_RCC_OscConfig+0x4d0>)
 80062b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062be:	f7fd fbbf 	bl	8003a40 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c6:	f7fd fbbb 	bl	8003a40 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b64      	cmp	r3, #100	@ 0x64
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e120      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062d8:	4b75      	ldr	r3, [pc, #468]	@ (80064b0 <HAL_RCC_OscConfig+0x4d0>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <HAL_RCC_OscConfig+0x31a>
 80062ec:	4b6f      	ldr	r3, [pc, #444]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	4a6e      	ldr	r2, [pc, #440]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f8:	e02d      	b.n	8006356 <HAL_RCC_OscConfig+0x376>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <HAL_RCC_OscConfig+0x33c>
 8006302:	4b6a      	ldr	r3, [pc, #424]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	4a69      	ldr	r2, [pc, #420]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006308:	f023 0301 	bic.w	r3, r3, #1
 800630c:	6713      	str	r3, [r2, #112]	@ 0x70
 800630e:	4b67      	ldr	r3, [pc, #412]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006312:	4a66      	ldr	r2, [pc, #408]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006314:	f023 0304 	bic.w	r3, r3, #4
 8006318:	6713      	str	r3, [r2, #112]	@ 0x70
 800631a:	e01c      	b.n	8006356 <HAL_RCC_OscConfig+0x376>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	2b05      	cmp	r3, #5
 8006322:	d10c      	bne.n	800633e <HAL_RCC_OscConfig+0x35e>
 8006324:	4b61      	ldr	r3, [pc, #388]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	4a60      	ldr	r2, [pc, #384]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800632a:	f043 0304 	orr.w	r3, r3, #4
 800632e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006330:	4b5e      	ldr	r3, [pc, #376]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006334:	4a5d      	ldr	r2, [pc, #372]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006336:	f043 0301 	orr.w	r3, r3, #1
 800633a:	6713      	str	r3, [r2, #112]	@ 0x70
 800633c:	e00b      	b.n	8006356 <HAL_RCC_OscConfig+0x376>
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5a      	ldr	r2, [pc, #360]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006344:	f023 0301 	bic.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	4b58      	ldr	r3, [pc, #352]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a57      	ldr	r2, [pc, #348]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006350:	f023 0304 	bic.w	r3, r3, #4
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d015      	beq.n	800638a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800635e:	f7fd fb6f 	bl	8003a40 <HAL_GetTick>
 8006362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006364:	e00a      	b.n	800637c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006366:	f7fd fb6b 	bl	8003a40 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006374:	4293      	cmp	r3, r2
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e0ce      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637c:	4b4b      	ldr	r3, [pc, #300]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800637e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0ee      	beq.n	8006366 <HAL_RCC_OscConfig+0x386>
 8006388:	e014      	b.n	80063b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638a:	f7fd fb59 	bl	8003a40 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006390:	e00a      	b.n	80063a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006392:	f7fd fb55 	bl	8003a40 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e0b8      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063a8:	4b40      	ldr	r3, [pc, #256]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ee      	bne.n	8006392 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d105      	bne.n	80063c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ba:	4b3c      	ldr	r3, [pc, #240]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063be:	4a3b      	ldr	r2, [pc, #236]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80a4 	beq.w	8006518 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063d0:	4b36      	ldr	r3, [pc, #216]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 030c 	and.w	r3, r3, #12
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d06b      	beq.n	80064b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d149      	bne.n	8006478 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e4:	4b31      	ldr	r3, [pc, #196]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a30      	ldr	r2, [pc, #192]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fd fb26 	bl	8003a40 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f8:	f7fd fb22 	bl	8003a40 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e087      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006424:	019b      	lsls	r3, r3, #6
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	3b01      	subs	r3, #1
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006438:	061b      	lsls	r3, r3, #24
 800643a:	4313      	orrs	r3, r2
 800643c:	4a1b      	ldr	r2, [pc, #108]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800643e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006442:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006444:	4b19      	ldr	r3, [pc, #100]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a18      	ldr	r2, [pc, #96]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800644a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800644e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fd faf6 	bl	8003a40 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006458:	f7fd faf2 	bl	8003a40 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e057      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800646a:	4b10      	ldr	r3, [pc, #64]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x478>
 8006476:	e04f      	b.n	8006518 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006478:	4b0c      	ldr	r3, [pc, #48]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0b      	ldr	r2, [pc, #44]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 800647e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006484:	f7fd fadc 	bl	8003a40 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648c:	f7fd fad8 	bl	8003a40 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e03d      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649e:	4b03      	ldr	r3, [pc, #12]	@ (80064ac <HAL_RCC_OscConfig+0x4cc>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0x4ac>
 80064aa:	e035      	b.n	8006518 <HAL_RCC_OscConfig+0x538>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80064b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006524 <HAL_RCC_OscConfig+0x544>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d028      	beq.n	8006514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d121      	bne.n	8006514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d11a      	bne.n	8006514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d111      	bne.n	8006514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	3b01      	subs	r3, #1
 80064fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d107      	bne.n	8006514 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006510:	429a      	cmp	r2, r3
 8006512:	d001      	beq.n	8006518 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40023800 	.word	0x40023800

08006528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0d0      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006540:	4b6a      	ldr	r3, [pc, #424]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d910      	bls.n	8006570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800654e:	4b67      	ldr	r3, [pc, #412]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f023 020f 	bic.w	r2, r3, #15
 8006556:	4965      	ldr	r1, [pc, #404]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	4313      	orrs	r3, r2
 800655c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655e:	4b63      	ldr	r3, [pc, #396]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0b8      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d020      	beq.n	80065be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006588:	4b59      	ldr	r3, [pc, #356]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4a58      	ldr	r2, [pc, #352]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 800658e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a0:	4b53      	ldr	r3, [pc, #332]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a52      	ldr	r2, [pc, #328]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ac:	4b50      	ldr	r3, [pc, #320]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	494d      	ldr	r1, [pc, #308]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d040      	beq.n	800664c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d107      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d2:	4b47      	ldr	r3, [pc, #284]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d115      	bne.n	800660a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e07f      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d107      	bne.n	80065fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ea:	4b41      	ldr	r3, [pc, #260]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e073      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fa:	4b3d      	ldr	r3, [pc, #244]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e06b      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660a:	4b39      	ldr	r3, [pc, #228]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f023 0203 	bic.w	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4936      	ldr	r1, [pc, #216]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661c:	f7fd fa10 	bl	8003a40 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006622:	e00a      	b.n	800663a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006624:	f7fd fa0c 	bl	8003a40 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e053      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663a:	4b2d      	ldr	r3, [pc, #180]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 020c 	and.w	r2, r3, #12
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	429a      	cmp	r2, r3
 800664a:	d1eb      	bne.n	8006624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d210      	bcs.n	800667c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665a:	4b24      	ldr	r3, [pc, #144]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f023 020f 	bic.w	r2, r3, #15
 8006662:	4922      	ldr	r1, [pc, #136]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666a:	4b20      	ldr	r3, [pc, #128]	@ (80066ec <HAL_RCC_ClockConfig+0x1c4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d001      	beq.n	800667c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e032      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d008      	beq.n	800669a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006688:	4b19      	ldr	r3, [pc, #100]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	4916      	ldr	r1, [pc, #88]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 8006696:	4313      	orrs	r3, r2
 8006698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d009      	beq.n	80066ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80066a6:	4b12      	ldr	r3, [pc, #72]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	490e      	ldr	r1, [pc, #56]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066ba:	f000 f821 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c8>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	490a      	ldr	r1, [pc, #40]	@ (80066f4 <HAL_RCC_ClockConfig+0x1cc>)
 80066cc:	5ccb      	ldrb	r3, [r1, r3]
 80066ce:	fa22 f303 	lsr.w	r3, r2, r3
 80066d2:	4a09      	ldr	r2, [pc, #36]	@ (80066f8 <HAL_RCC_ClockConfig+0x1d0>)
 80066d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80066d6:	4b09      	ldr	r3, [pc, #36]	@ (80066fc <HAL_RCC_ClockConfig+0x1d4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd f96c 	bl	80039b8 <HAL_InitTick>

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023c00 	.word	0x40023c00
 80066f0:	40023800 	.word	0x40023800
 80066f4:	08023200 	.word	0x08023200
 80066f8:	20000058 	.word	0x20000058
 80066fc:	2000005c 	.word	0x2000005c

08006700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006704:	b094      	sub	sp, #80	@ 0x50
 8006706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	647b      	str	r3, [r7, #68]	@ 0x44
 800670c:	2300      	movs	r3, #0
 800670e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006710:	2300      	movs	r3, #0
 8006712:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006718:	4b79      	ldr	r3, [pc, #484]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 030c 	and.w	r3, r3, #12
 8006720:	2b08      	cmp	r3, #8
 8006722:	d00d      	beq.n	8006740 <HAL_RCC_GetSysClockFreq+0x40>
 8006724:	2b08      	cmp	r3, #8
 8006726:	f200 80e1 	bhi.w	80068ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_RCC_GetSysClockFreq+0x34>
 800672e:	2b04      	cmp	r3, #4
 8006730:	d003      	beq.n	800673a <HAL_RCC_GetSysClockFreq+0x3a>
 8006732:	e0db      	b.n	80068ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006734:	4b73      	ldr	r3, [pc, #460]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x204>)
 8006736:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006738:	e0db      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800673a:	4b73      	ldr	r3, [pc, #460]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x208>)
 800673c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800673e:	e0d8      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006740:	4b6f      	ldr	r3, [pc, #444]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006748:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800674a:	4b6d      	ldr	r3, [pc, #436]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d063      	beq.n	800681e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006756:	4b6a      	ldr	r3, [pc, #424]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	2200      	movs	r2, #0
 800675e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006760:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006772:	4622      	mov	r2, r4
 8006774:	462b      	mov	r3, r5
 8006776:	f04f 0000 	mov.w	r0, #0
 800677a:	f04f 0100 	mov.w	r1, #0
 800677e:	0159      	lsls	r1, r3, #5
 8006780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006784:	0150      	lsls	r0, r2, #5
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4621      	mov	r1, r4
 800678c:	1a51      	subs	r1, r2, r1
 800678e:	6139      	str	r1, [r7, #16]
 8006790:	4629      	mov	r1, r5
 8006792:	eb63 0301 	sbc.w	r3, r3, r1
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a4:	4659      	mov	r1, fp
 80067a6:	018b      	lsls	r3, r1, #6
 80067a8:	4651      	mov	r1, sl
 80067aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067ae:	4651      	mov	r1, sl
 80067b0:	018a      	lsls	r2, r1, #6
 80067b2:	4651      	mov	r1, sl
 80067b4:	ebb2 0801 	subs.w	r8, r2, r1
 80067b8:	4659      	mov	r1, fp
 80067ba:	eb63 0901 	sbc.w	r9, r3, r1
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d2:	4690      	mov	r8, r2
 80067d4:	4699      	mov	r9, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	eb18 0303 	adds.w	r3, r8, r3
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	462b      	mov	r3, r5
 80067e0:	eb49 0303 	adc.w	r3, r9, r3
 80067e4:	60fb      	str	r3, [r7, #12]
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067f2:	4629      	mov	r1, r5
 80067f4:	024b      	lsls	r3, r1, #9
 80067f6:	4621      	mov	r1, r4
 80067f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067fc:	4621      	mov	r1, r4
 80067fe:	024a      	lsls	r2, r1, #9
 8006800:	4610      	mov	r0, r2
 8006802:	4619      	mov	r1, r3
 8006804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006806:	2200      	movs	r2, #0
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800680a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800680c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006810:	f7fa fa4a 	bl	8000ca8 <__aeabi_uldivmod>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4613      	mov	r3, r2
 800681a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800681c:	e058      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681e:	4b38      	ldr	r3, [pc, #224]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	2200      	movs	r2, #0
 8006826:	4618      	mov	r0, r3
 8006828:	4611      	mov	r1, r2
 800682a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	2300      	movs	r3, #0
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
 8006834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	f04f 0000 	mov.w	r0, #0
 8006840:	f04f 0100 	mov.w	r1, #0
 8006844:	0159      	lsls	r1, r3, #5
 8006846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800684a:	0150      	lsls	r0, r2, #5
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4641      	mov	r1, r8
 8006852:	ebb2 0a01 	subs.w	sl, r2, r1
 8006856:	4649      	mov	r1, r9
 8006858:	eb63 0b01 	sbc.w	fp, r3, r1
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800686c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006870:	ebb2 040a 	subs.w	r4, r2, sl
 8006874:	eb63 050b 	sbc.w	r5, r3, fp
 8006878:	f04f 0200 	mov.w	r2, #0
 800687c:	f04f 0300 	mov.w	r3, #0
 8006880:	00eb      	lsls	r3, r5, #3
 8006882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006886:	00e2      	lsls	r2, r4, #3
 8006888:	4614      	mov	r4, r2
 800688a:	461d      	mov	r5, r3
 800688c:	4643      	mov	r3, r8
 800688e:	18e3      	adds	r3, r4, r3
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	464b      	mov	r3, r9
 8006894:	eb45 0303 	adc.w	r3, r5, r3
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068a6:	4629      	mov	r1, r5
 80068a8:	028b      	lsls	r3, r1, #10
 80068aa:	4621      	mov	r1, r4
 80068ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068b0:	4621      	mov	r1, r4
 80068b2:	028a      	lsls	r2, r1, #10
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ba:	2200      	movs	r2, #0
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	61fa      	str	r2, [r7, #28]
 80068c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c4:	f7fa f9f0 	bl	8000ca8 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4613      	mov	r3, r2
 80068ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	3301      	adds	r3, #1
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068ec:	4b05      	ldr	r3, [pc, #20]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3750      	adds	r7, #80	@ 0x50
 80068f8:	46bd      	mov	sp, r7
 80068fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fe:	bf00      	nop
 8006900:	40023800 	.word	0x40023800
 8006904:	00f42400 	.word	0x00f42400
 8006908:	007a1200 	.word	0x007a1200

0800690c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006910:	4b03      	ldr	r3, [pc, #12]	@ (8006920 <HAL_RCC_GetHCLKFreq+0x14>)
 8006912:	681b      	ldr	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	20000058 	.word	0x20000058

08006924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006928:	f7ff fff0 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0a9b      	lsrs	r3, r3, #10
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	@ (8006948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	08023210 	.word	0x08023210

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006950:	f7ff ffdc 	bl	800690c <HAL_RCC_GetHCLKFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	4b05      	ldr	r3, [pc, #20]	@ (800696c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4903      	ldr	r1, [pc, #12]	@ (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006962:	5ccb      	ldrb	r3, [r1, r3]
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40023800 	.word	0x40023800
 8006970:	08023210 	.word	0x08023210

08006974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d012      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800699c:	4b69      	ldr	r3, [pc, #420]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a68      	ldr	r2, [pc, #416]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80069a6:	6093      	str	r3, [r2, #8]
 80069a8:	4b66      	ldr	r3, [pc, #408]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	4964      	ldr	r1, [pc, #400]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d017      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069d4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069dc:	4959      	ldr	r1, [pc, #356]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069ec:	d101      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80069ee:	2301      	movs	r3, #1
 80069f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a0a:	4b4e      	ldr	r3, [pc, #312]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a18:	494a      	ldr	r1, [pc, #296]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a28:	d101      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a46:	2301      	movs	r3, #1
 8006a48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 808b 	beq.w	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a58:	4b3a      	ldr	r3, [pc, #232]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	4a39      	ldr	r2, [pc, #228]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a64:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a70:	4b35      	ldr	r3, [pc, #212]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a34      	ldr	r2, [pc, #208]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7c:	f7fc ffe0 	bl	8003a40 <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a84:	f7fc ffdc 	bl	8003a40 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	@ 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e357      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a96:	4b2c      	ldr	r3, [pc, #176]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aa2:	4b28      	ldr	r3, [pc, #160]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d035      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d02e      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ac0:	4b20      	ldr	r3, [pc, #128]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006aca:	4b1e      	ldr	r3, [pc, #120]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ace:	4a1d      	ldr	r2, [pc, #116]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ad4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	4a1a      	ldr	r2, [pc, #104]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ae0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ae2:	4a18      	ldr	r2, [pc, #96]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ae8:	4b16      	ldr	r3, [pc, #88]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d114      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fc ffa4 	bl	8003a40 <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afa:	e00a      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006afc:	f7fc ffa0 	bl	8003a40 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e319      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	4b0c      	ldr	r3, [pc, #48]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0ee      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2a:	d111      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b2c:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b3a:	400b      	ands	r3, r1
 8006b3c:	4901      	ldr	r1, [pc, #4]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
 8006b42:	e00b      	b.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b44:	40023800 	.word	0x40023800
 8006b48:	40007000 	.word	0x40007000
 8006b4c:	0ffffcff 	.word	0x0ffffcff
 8006b50:	4baa      	ldr	r3, [pc, #680]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	4aa9      	ldr	r2, [pc, #676]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b56:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b5a:	6093      	str	r3, [r2, #8]
 8006b5c:	4ba7      	ldr	r3, [pc, #668]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b68:	49a4      	ldr	r1, [pc, #656]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d010      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b7a:	4ba0      	ldr	r3, [pc, #640]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b80:	4a9e      	ldr	r2, [pc, #632]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	4999      	ldr	r1, [pc, #612]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ba8:	4b94      	ldr	r3, [pc, #592]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb6:	4991      	ldr	r1, [pc, #580]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bca:	4b8c      	ldr	r3, [pc, #560]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd8:	4988      	ldr	r1, [pc, #544]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00a      	beq.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bec:	4b83      	ldr	r3, [pc, #524]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bfa:	4980      	ldr	r1, [pc, #512]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c14:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1c:	4977      	ldr	r1, [pc, #476]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c30:	4b72      	ldr	r3, [pc, #456]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c36:	f023 0203 	bic.w	r2, r3, #3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3e:	496f      	ldr	r1, [pc, #444]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c52:	4b6a      	ldr	r3, [pc, #424]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c58:	f023 020c 	bic.w	r2, r3, #12
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c60:	4966      	ldr	r1, [pc, #408]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c74:	4b61      	ldr	r3, [pc, #388]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c82:	495e      	ldr	r1, [pc, #376]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c96:	4b59      	ldr	r3, [pc, #356]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c9c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca4:	4955      	ldr	r1, [pc, #340]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cb8:	4b50      	ldr	r3, [pc, #320]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc6:	494d      	ldr	r1, [pc, #308]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006cda:	4b48      	ldr	r3, [pc, #288]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ce0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce8:	4944      	ldr	r1, [pc, #272]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00a      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d02:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0a:	493c      	ldr	r1, [pc, #240]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d1e:	4b37      	ldr	r3, [pc, #220]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d2c:	4933      	ldr	r1, [pc, #204]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d40:	4b2e      	ldr	r3, [pc, #184]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d46:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d4e:	492b      	ldr	r1, [pc, #172]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d011      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d62:	4b26      	ldr	r3, [pc, #152]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d70:	4922      	ldr	r1, [pc, #136]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d80:	d101      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006d82:	2301      	movs	r3, #1
 8006d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006d92:	2301      	movs	r3, #1
 8006d94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006da2:	4b16      	ldr	r3, [pc, #88]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db0:	4912      	ldr	r1, [pc, #72]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd4:	4909      	ldr	r1, [pc, #36]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d006      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80d9 	beq.w	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006df0:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a01      	ldr	r2, [pc, #4]	@ (8006dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006dfa:	e001      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e02:	f7fc fe1d 	bl	8003a40 <HAL_GetTick>
 8006e06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e08:	e008      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e0a:	f7fc fe19 	bl	8003a40 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b64      	cmp	r3, #100	@ 0x64
 8006e16:	d901      	bls.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e194      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f0      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d021      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d11d      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e3c:	4b64      	ldr	r3, [pc, #400]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e4a:	4b61      	ldr	r3, [pc, #388]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e50:	0e1b      	lsrs	r3, r3, #24
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	019a      	lsls	r2, r3, #6
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	431a      	orrs	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	061b      	lsls	r3, r3, #24
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	071b      	lsls	r3, r3, #28
 8006e70:	4957      	ldr	r1, [pc, #348]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e8c:	d00a      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d02e      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ea2:	d129      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eb2:	4b47      	ldr	r3, [pc, #284]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb8:	0f1b      	lsrs	r3, r3, #28
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	019a      	lsls	r2, r3, #6
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	071b      	lsls	r3, r3, #28
 8006ed8:	493d      	ldr	r1, [pc, #244]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ee6:	f023 021f 	bic.w	r2, r3, #31
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	4937      	ldr	r1, [pc, #220]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01d      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f04:	4b32      	ldr	r3, [pc, #200]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f0a:	0e1b      	lsrs	r3, r3, #24
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f12:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f18:	0f1b      	lsrs	r3, r3, #28
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	019a      	lsls	r2, r3, #6
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	431a      	orrs	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	071b      	lsls	r3, r3, #28
 8006f38:	4925      	ldr	r1, [pc, #148]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d011      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	019a      	lsls	r2, r3, #6
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	061b      	lsls	r3, r3, #24
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	071b      	lsls	r3, r3, #28
 8006f68:	4919      	ldr	r1, [pc, #100]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f70:	4b17      	ldr	r3, [pc, #92]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a16      	ldr	r2, [pc, #88]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7c:	f7fc fd60 	bl	8003a40 <HAL_GetTick>
 8006f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f84:	f7fc fd5c 	bl	8003a40 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	@ 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e0d7      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	f040 80cd 	bne.w	8007144 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006faa:	4b09      	ldr	r3, [pc, #36]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a08      	ldr	r2, [pc, #32]	@ (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb6:	f7fc fd43 	bl	8003a40 <HAL_GetTick>
 8006fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fbc:	e00a      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fbe:	f7fc fd3f 	bl	8003a40 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b64      	cmp	r3, #100	@ 0x64
 8006fca:	d903      	bls.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e0ba      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006fd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fe0:	d0ed      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d02e      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d12a      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800700a:	4b51      	ldr	r3, [pc, #324]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007018:	4b4d      	ldr	r3, [pc, #308]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800701a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701e:	0f1b      	lsrs	r3, r3, #28
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	019a      	lsls	r2, r3, #6
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	061b      	lsls	r3, r3, #24
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	071b      	lsls	r3, r3, #28
 800703e:	4944      	ldr	r1, [pc, #272]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007046:	4b42      	ldr	r3, [pc, #264]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800704c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	3b01      	subs	r3, #1
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	493d      	ldr	r1, [pc, #244]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d022      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007074:	d11d      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007076:	4b36      	ldr	r3, [pc, #216]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707c:	0e1b      	lsrs	r3, r3, #24
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007084:	4b32      	ldr	r3, [pc, #200]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708a:	0f1b      	lsrs	r3, r3, #28
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	019a      	lsls	r2, r3, #6
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	431a      	orrs	r2, r3
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	061b      	lsls	r3, r3, #24
 80070a4:	431a      	orrs	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	071b      	lsls	r3, r3, #28
 80070aa:	4929      	ldr	r1, [pc, #164]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d028      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070be:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	0e1b      	lsrs	r3, r3, #24
 80070c6:	f003 030f 	and.w	r3, r3, #15
 80070ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070cc:	4b20      	ldr	r3, [pc, #128]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	019a      	lsls	r2, r3, #6
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	431a      	orrs	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	431a      	orrs	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	071b      	lsls	r3, r3, #28
 80070f2:	4917      	ldr	r1, [pc, #92]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070fa:	4b15      	ldr	r3, [pc, #84]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007100:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	4911      	ldr	r1, [pc, #68]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800710a:	4313      	orrs	r3, r2
 800710c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007110:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a0e      	ldr	r2, [pc, #56]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800711a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711c:	f7fc fc90 	bl	8003a40 <HAL_GetTick>
 8007120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007124:	f7fc fc8c 	bl	8003a40 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b64      	cmp	r3, #100	@ 0x64
 8007130:	d901      	bls.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e007      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007136:	4b06      	ldr	r3, [pc, #24]	@ (8007150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800713e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007142:	d1ef      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800

08007154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e09d      	b.n	80072a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d108      	bne.n	8007180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007176:	d009      	beq.n	800718c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	61da      	str	r2, [r3, #28]
 800717e:	e005      	b.n	800718c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fb ff58 	bl	800305c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071cc:	d902      	bls.n	80071d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	e002      	b.n	80071da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80071e2:	d007      	beq.n	80071f4 <HAL_SPI_Init+0xa0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071ec:	d002      	beq.n	80071f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007222:	431a      	orrs	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007236:	ea42 0103 	orr.w	r1, r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	0c1b      	lsrs	r3, r3, #16
 8007250:	f003 0204 	and.w	r2, r3, #4
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	431a      	orrs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007270:	ea42 0103 	orr.w	r1, r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69da      	ldr	r2, [r3, #28]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b088      	sub	sp, #32
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_SPI_Transmit+0x22>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e158      	b.n	800757e <HAL_SPI_Transmit+0x2d4>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d4:	f7fc fbb4 	bl	8003a40 <HAL_GetTick>
 80072d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d002      	beq.n	80072f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072ea:	2302      	movs	r3, #2
 80072ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072ee:	e13d      	b.n	800756c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <HAL_SPI_Transmit+0x52>
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d102      	bne.n	8007302 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007300:	e134      	b.n	800756c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2203      	movs	r2, #3
 8007306:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800734c:	d10f      	bne.n	800736e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800735c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800736c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d007      	beq.n	800738c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800738a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007394:	d94b      	bls.n	800742e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_SPI_Transmit+0xfa>
 800739e:	8afb      	ldrh	r3, [r7, #22]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d13e      	bne.n	8007422 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	881a      	ldrh	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b4:	1c9a      	adds	r2, r3, #2
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80073c8:	e02b      	b.n	8007422 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d112      	bne.n	80073fe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073dc:	881a      	ldrh	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	1c9a      	adds	r2, r3, #2
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	3b01      	subs	r3, #1
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073fc:	e011      	b.n	8007422 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fe:	f7fc fb1f 	bl	8003a40 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d803      	bhi.n	8007416 <HAL_SPI_Transmit+0x16c>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d102      	bne.n	800741c <HAL_SPI_Transmit+0x172>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007420:	e0a4      	b.n	800756c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ce      	bne.n	80073ca <HAL_SPI_Transmit+0x120>
 800742c:	e07c      	b.n	8007528 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_SPI_Transmit+0x192>
 8007436:	8afb      	ldrh	r3, [r7, #22]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d170      	bne.n	800751e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b01      	cmp	r3, #1
 8007444:	d912      	bls.n	800746c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007456:	1c9a      	adds	r2, r3, #2
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b02      	subs	r3, #2
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800746a:	e058      	b.n	800751e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007488:	b29b      	uxth	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	b29a      	uxth	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007492:	e044      	b.n	800751e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d12b      	bne.n	80074fa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d912      	bls.n	80074d2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	881a      	ldrh	r2, [r3, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b02      	subs	r3, #2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074d0:	e025      	b.n	800751e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074f8:	e011      	b.n	800751e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074fa:	f7fc faa1 	bl	8003a40 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	429a      	cmp	r2, r3
 8007508:	d803      	bhi.n	8007512 <HAL_SPI_Transmit+0x268>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d102      	bne.n	8007518 <HAL_SPI_Transmit+0x26e>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800751c:	e026      	b.n	800756c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007522:	b29b      	uxth	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1b5      	bne.n	8007494 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 fd07 	bl	8007f40 <SPI_EndRxTxTransaction>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10a      	bne.n	800755c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e000      	b.n	800756c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800756a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800757c:	7ffb      	ldrb	r3, [r7, #31]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3720      	adds	r7, #32
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af02      	add	r7, sp, #8
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	603b      	str	r3, [r7, #0]
 8007592:	4613      	mov	r3, r2
 8007594:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075a2:	d112      	bne.n	80075ca <HAL_SPI_Receive+0x44>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10e      	bne.n	80075ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2204      	movs	r2, #4
 80075b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075b4:	88fa      	ldrh	r2, [r7, #6]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68b9      	ldr	r1, [r7, #8]
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f910 	bl	80077e6 <HAL_SPI_TransmitReceive>
 80075c6:	4603      	mov	r3, r0
 80075c8:	e109      	b.n	80077de <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_SPI_Receive+0x52>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e102      	b.n	80077de <HAL_SPI_Receive+0x258>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e0:	f7fc fa2e 	bl	8003a40 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d002      	beq.n	80075f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
 80075f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075f6:	e0e9      	b.n	80077cc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <HAL_SPI_Receive+0x7e>
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007608:	e0e0      	b.n	80077cc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2204      	movs	r2, #4
 800760e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007654:	d908      	bls.n	8007668 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007664:	605a      	str	r2, [r3, #4]
 8007666:	e007      	b.n	8007678 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007676:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007680:	d10f      	bne.n	80076a2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b40      	cmp	r3, #64	@ 0x40
 80076ae:	d007      	beq.n	80076c0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076c8:	d867      	bhi.n	800779a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076ca:	e030      	b.n	800772e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d117      	bne.n	800770a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f103 020c 	add.w	r2, r3, #12
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007708:	e011      	b.n	800772e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800770a:	f7fc f999 	bl	8003a40 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d803      	bhi.n	8007722 <HAL_SPI_Receive+0x19c>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d102      	bne.n	8007728 <HAL_SPI_Receive+0x1a2>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800772c:	e04e      	b.n	80077cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1c8      	bne.n	80076cc <HAL_SPI_Receive+0x146>
 800773a:	e034      	b.n	80077a6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b01      	cmp	r3, #1
 8007748:	d115      	bne.n	8007776 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007754:	b292      	uxth	r2, r2
 8007756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	1c9a      	adds	r2, r3, #2
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007774:	e011      	b.n	800779a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007776:	f7fc f963 	bl	8003a40 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d803      	bhi.n	800778e <HAL_SPI_Receive+0x208>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778c:	d102      	bne.n	8007794 <HAL_SPI_Receive+0x20e>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007798:	e018      	b.n	80077cc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1ca      	bne.n	800773c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fb4c 	bl	8007e48 <SPI_EndRxTransaction>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	75fb      	strb	r3, [r7, #23]
 80077c8:	e000      	b.n	80077cc <HAL_SPI_Receive+0x246>
  }

error :
 80077ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b08a      	sub	sp, #40	@ 0x28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077f4:	2301      	movs	r3, #1
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_SPI_TransmitReceive+0x26>
 8007808:	2302      	movs	r3, #2
 800780a:	e1fb      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x41e>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007814:	f7fc f914 	bl	8003a40 <HAL_GetTick>
 8007818:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007820:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800782c:	887b      	ldrh	r3, [r7, #2]
 800782e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007830:	7efb      	ldrb	r3, [r7, #27]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d00e      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x6e>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800783c:	d106      	bne.n	800784c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <HAL_SPI_TransmitReceive+0x66>
 8007846:	7efb      	ldrb	r3, [r7, #27]
 8007848:	2b04      	cmp	r3, #4
 800784a:	d003      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800784c:	2302      	movs	r3, #2
 800784e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007852:	e1cd      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x80>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x80>
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d103      	bne.n	800786e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800786c:	e1c0      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b04      	cmp	r3, #4
 8007878:	d003      	beq.n	8007882 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2205      	movs	r2, #5
 800787e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	887a      	ldrh	r2, [r7, #2]
 8007892:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	887a      	ldrh	r2, [r7, #2]
 80078ae:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078c4:	d802      	bhi.n	80078cc <HAL_SPI_TransmitReceive+0xe6>
 80078c6:	8a3b      	ldrh	r3, [r7, #16]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d908      	bls.n	80078de <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078da:	605a      	str	r2, [r3, #4]
 80078dc:	e007      	b.n	80078ee <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b40      	cmp	r3, #64	@ 0x40
 80078fa:	d007      	beq.n	800790c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007914:	d97c      	bls.n	8007a10 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_TransmitReceive+0x13e>
 800791e:	8a7b      	ldrh	r3, [r7, #18]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d169      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007948:	e056      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d11b      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x1aa>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d016      	beq.n	8007990 <HAL_SPI_TransmitReceive+0x1aa>
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	2b01      	cmp	r3, #1
 8007966:	d113      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	1c9a      	adds	r2, r3, #2
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d11c      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x1f2>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b4:	b292      	uxth	r2, r2
 80079b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079d4:	2301      	movs	r3, #1
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079d8:	f7fc f832 	bl	8003a40 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d807      	bhi.n	80079f8 <HAL_SPI_TransmitReceive+0x212>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ee:	d003      	beq.n	80079f8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80079f6:	e0fb      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1a3      	bne.n	800794a <HAL_SPI_TransmitReceive+0x164>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d19d      	bne.n	800794a <HAL_SPI_TransmitReceive+0x164>
 8007a0e:	e0df      	b.n	8007bd0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_SPI_TransmitReceive+0x23a>
 8007a18:	8a7b      	ldrh	r3, [r7, #18]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	f040 80cb 	bne.w	8007bb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d912      	bls.n	8007a50 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	881a      	ldrh	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3a:	1c9a      	adds	r2, r3, #2
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b02      	subs	r3, #2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a4e:	e0b2      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a76:	e09e      	b.n	8007bb6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d134      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x30a>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d02f      	beq.n	8007af0 <HAL_SPI_TransmitReceive+0x30a>
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d12c      	bne.n	8007af0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d912      	bls.n	8007ac6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	881a      	ldrh	r2, [r3, #0]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	1c9a      	adds	r2, r3, #2
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b02      	subs	r3, #2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ac4:	e012      	b.n	8007aec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	330c      	adds	r3, #12
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d148      	bne.n	8007b90 <HAL_SPI_TransmitReceive+0x3aa>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d042      	beq.n	8007b90 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d923      	bls.n	8007b5e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b20:	b292      	uxth	r2, r2
 8007b22:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	1c9a      	adds	r2, r3, #2
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b02      	subs	r3, #2
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d81f      	bhi.n	8007b8c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b5a:	605a      	str	r2, [r3, #4]
 8007b5c:	e016      	b.n	8007b8c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f103 020c 	add.w	r2, r3, #12
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6a:	7812      	ldrb	r2, [r2, #0]
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b74:	1c5a      	adds	r2, r3, #1
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b90:	f7fb ff56 	bl	8003a40 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d803      	bhi.n	8007ba8 <HAL_SPI_TransmitReceive+0x3c2>
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d102      	bne.n	8007bae <HAL_SPI_TransmitReceive+0x3c8>
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8007bb4:	e01c      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f af5b 	bne.w	8007a78 <HAL_SPI_TransmitReceive+0x292>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f47f af54 	bne.w	8007a78 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f9b3 	bl	8007f40 <SPI_EndRxTxTransaction>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2220      	movs	r2, #32
 8007bea:	661a      	str	r2, [r3, #96]	@ 0x60
 8007bec:	e000      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007c00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3728      	adds	r7, #40	@ 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c1c:	f7fb ff10 	bl	8003a40 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	1a9b      	subs	r3, r3, r2
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4413      	add	r3, r2
 8007c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c2c:	f7fb ff08 	bl	8003a40 <HAL_GetTick>
 8007c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c32:	4b39      	ldr	r3, [pc, #228]	@ (8007d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	015b      	lsls	r3, r3, #5
 8007c38:	0d1b      	lsrs	r3, r3, #20
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
 8007c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c42:	e054      	b.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d050      	beq.n	8007cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c4c:	f7fb fef8 	bl	8003a40 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d902      	bls.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d13d      	bne.n	8007cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c7a:	d111      	bne.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c84:	d004      	beq.n	8007c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8e:	d107      	bne.n	8007ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca8:	d10f      	bne.n	8007cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e017      	b.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d19b      	bne.n	8007c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20000058 	.word	0x20000058

08007d1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	@ 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007d2e:	f7fb fe87 	bl	8003a40 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007d3e:	f7fb fe7f 	bl	8003a40 <HAL_GetTick>
 8007d42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	00da      	lsls	r2, r3, #3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	0d1b      	lsrs	r3, r3, #20
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d64:	e060      	b.n	8007e28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d6c:	d107      	bne.n	8007d7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d84:	d050      	beq.n	8007e28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d86:	f7fb fe5b 	bl	8003a40 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d902      	bls.n	8007d9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d13d      	bne.n	8007e18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007daa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007db4:	d111      	bne.n	8007dda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dbe:	d004      	beq.n	8007dca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc8:	d107      	bne.n	8007dda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007de2:	d10f      	bne.n	8007e04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e010      	b.n	8007e3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4013      	ands	r3, r2
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d196      	bne.n	8007d66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3728      	adds	r7, #40	@ 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20000058 	.word	0x20000058

08007e48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e5c:	d111      	bne.n	8007e82 <SPI_EndRxTransaction+0x3a>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e66:	d004      	beq.n	8007e72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e70:	d107      	bne.n	8007e82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e8a:	d112      	bne.n	8007eb2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	2180      	movs	r1, #128	@ 0x80
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff feb8 	bl	8007c0c <SPI_WaitFlagStateUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d021      	beq.n	8007ee6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea6:	f043 0220 	orr.w	r2, r3, #32
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e03d      	b.n	8007f2e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007eb2:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <SPI_EndRxTransaction+0xf0>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a21      	ldr	r2, [pc, #132]	@ (8007f3c <SPI_EndRxTransaction+0xf4>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	0d5b      	lsrs	r3, r3, #21
 8007ebe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
 8007ec6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00a      	beq.n	8007ee4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ede:	2b80      	cmp	r3, #128	@ 0x80
 8007ee0:	d0f2      	beq.n	8007ec8 <SPI_EndRxTransaction+0x80>
 8007ee2:	e000      	b.n	8007ee6 <SPI_EndRxTransaction+0x9e>
        break;
 8007ee4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eee:	d11d      	bne.n	8007f2c <SPI_EndRxTransaction+0xe4>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ef8:	d004      	beq.n	8007f04 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f02:	d113      	bne.n	8007f2c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f7ff ff03 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f20:	f043 0220 	orr.w	r2, r3, #32
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e000      	b.n	8007f2e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000058 	.word	0x20000058
 8007f3c:	165e9f81 	.word	0x165e9f81

08007f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fedf 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f68:	f043 0220 	orr.w	r2, r3, #32
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e046      	b.n	8008002 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f74:	4b25      	ldr	r3, [pc, #148]	@ (800800c <SPI_EndRxTxTransaction+0xcc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a25      	ldr	r2, [pc, #148]	@ (8008010 <SPI_EndRxTxTransaction+0xd0>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	0d5b      	lsrs	r3, r3, #21
 8007f80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f92:	d112      	bne.n	8007fba <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2180      	movs	r1, #128	@ 0x80
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fe34 	bl	8007c0c <SPI_WaitFlagStateUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e023      	b.n	8008002 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d0f2      	beq.n	8007fba <SPI_EndRxTxTransaction+0x7a>
 8007fd4:	e000      	b.n	8007fd8 <SPI_EndRxTxTransaction+0x98>
        break;
 8007fd6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff fe99 	bl	8007d1c <SPI_WaitFifoStateUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ff4:	f043 0220 	orr.w	r2, r3, #32
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e000      	b.n	8008002 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20000058 	.word	0x20000058
 8008010:	165e9f81 	.word	0x165e9f81

08008014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e049      	b.n	80080ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fb fa24 	bl	8003488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3304      	adds	r3, #4
 8008050:	4619      	mov	r1, r3
 8008052:	4610      	mov	r0, r2
 8008054:	f000 fa74 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e049      	b.n	8008168 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f841 	bl	8008170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2202      	movs	r2, #2
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f000 fa1d 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800819e:	2302      	movs	r3, #2
 80081a0:	e0ff      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b14      	cmp	r3, #20
 80081ae:	f200 80f0 	bhi.w	8008392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80081b2:	a201      	add	r2, pc, #4	@ (adr r2, 80081b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	0800820d 	.word	0x0800820d
 80081bc:	08008393 	.word	0x08008393
 80081c0:	08008393 	.word	0x08008393
 80081c4:	08008393 	.word	0x08008393
 80081c8:	0800824d 	.word	0x0800824d
 80081cc:	08008393 	.word	0x08008393
 80081d0:	08008393 	.word	0x08008393
 80081d4:	08008393 	.word	0x08008393
 80081d8:	0800828f 	.word	0x0800828f
 80081dc:	08008393 	.word	0x08008393
 80081e0:	08008393 	.word	0x08008393
 80081e4:	08008393 	.word	0x08008393
 80081e8:	080082cf 	.word	0x080082cf
 80081ec:	08008393 	.word	0x08008393
 80081f0:	08008393 	.word	0x08008393
 80081f4:	08008393 	.word	0x08008393
 80081f8:	08008311 	.word	0x08008311
 80081fc:	08008393 	.word	0x08008393
 8008200:	08008393 	.word	0x08008393
 8008204:	08008393 	.word	0x08008393
 8008208:	08008351 	.word	0x08008351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 fa34 	bl	8008680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f042 0208 	orr.w	r2, r2, #8
 8008226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0204 	bic.w	r2, r2, #4
 8008236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6999      	ldr	r1, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	619a      	str	r2, [r3, #24]
      break;
 800824a:	e0a5      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fa86 	bl	8008764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6999      	ldr	r1, [r3, #24]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	021a      	lsls	r2, r3, #8
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	619a      	str	r2, [r3, #24]
      break;
 800828c:	e084      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fadd 	bl	8008854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69da      	ldr	r2, [r3, #28]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0208 	orr.w	r2, r2, #8
 80082a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0204 	bic.w	r2, r2, #4
 80082b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69d9      	ldr	r1, [r3, #28]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	61da      	str	r2, [r3, #28]
      break;
 80082cc:	e064      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 fb33 	bl	8008940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69da      	ldr	r2, [r3, #28]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69d9      	ldr	r1, [r3, #28]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	021a      	lsls	r2, r3, #8
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	61da      	str	r2, [r3, #28]
      break;
 800830e:	e043      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fb6a 	bl	80089f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0208 	orr.w	r2, r2, #8
 800832a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0204 	bic.w	r2, r2, #4
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800834e:	e023      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fb9c 	bl	8008a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800837a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	021a      	lsls	r2, r3, #8
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008390:	e002      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
      break;
 8008396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3718      	adds	r7, #24
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop

080083ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083b6:	2300      	movs	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_TIM_ConfigClockSource+0x1c>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0b4      	b.n	8008532 <HAL_TIM_ConfigClockSource+0x186>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	4b56      	ldr	r3, [pc, #344]	@ (800853c <HAL_TIM_ConfigClockSource+0x190>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008400:	d03e      	beq.n	8008480 <HAL_TIM_ConfigClockSource+0xd4>
 8008402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008406:	f200 8087 	bhi.w	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840e:	f000 8086 	beq.w	800851e <HAL_TIM_ConfigClockSource+0x172>
 8008412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008416:	d87f      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008418:	2b70      	cmp	r3, #112	@ 0x70
 800841a:	d01a      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0xa6>
 800841c:	2b70      	cmp	r3, #112	@ 0x70
 800841e:	d87b      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008420:	2b60      	cmp	r3, #96	@ 0x60
 8008422:	d050      	beq.n	80084c6 <HAL_TIM_ConfigClockSource+0x11a>
 8008424:	2b60      	cmp	r3, #96	@ 0x60
 8008426:	d877      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008428:	2b50      	cmp	r3, #80	@ 0x50
 800842a:	d03c      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0xfa>
 800842c:	2b50      	cmp	r3, #80	@ 0x50
 800842e:	d873      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008430:	2b40      	cmp	r3, #64	@ 0x40
 8008432:	d058      	beq.n	80084e6 <HAL_TIM_ConfigClockSource+0x13a>
 8008434:	2b40      	cmp	r3, #64	@ 0x40
 8008436:	d86f      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008438:	2b30      	cmp	r3, #48	@ 0x30
 800843a:	d064      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x15a>
 800843c:	2b30      	cmp	r3, #48	@ 0x30
 800843e:	d86b      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b20      	cmp	r3, #32
 8008442:	d060      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x15a>
 8008444:	2b20      	cmp	r3, #32
 8008446:	d867      	bhi.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b00      	cmp	r3, #0
 800844a:	d05c      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x15a>
 800844c:	2b10      	cmp	r3, #16
 800844e:	d05a      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0x15a>
 8008450:	e062      	b.n	8008518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008462:	f000 fbe5 	bl	8008c30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	609a      	str	r2, [r3, #8]
      break;
 800847e:	e04f      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008490:	f000 fbce 	bl	8008c30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689a      	ldr	r2, [r3, #8]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084a2:	609a      	str	r2, [r3, #8]
      break;
 80084a4:	e03c      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	461a      	mov	r2, r3
 80084b4:	f000 fb42 	bl	8008b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2150      	movs	r1, #80	@ 0x50
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 fb9b 	bl	8008bfa <TIM_ITRx_SetConfig>
      break;
 80084c4:	e02c      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084d2:	461a      	mov	r2, r3
 80084d4:	f000 fb61 	bl	8008b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2160      	movs	r1, #96	@ 0x60
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fb8b 	bl	8008bfa <TIM_ITRx_SetConfig>
      break;
 80084e4:	e01c      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f2:	461a      	mov	r2, r3
 80084f4:	f000 fb22 	bl	8008b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2140      	movs	r1, #64	@ 0x40
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fb7b 	bl	8008bfa <TIM_ITRx_SetConfig>
      break;
 8008504:	e00c      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f000 fb72 	bl	8008bfa <TIM_ITRx_SetConfig>
      break;
 8008516:	e003      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
      break;
 800851c:	e000      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800851e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	fffeff88 	.word	0xfffeff88

08008540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a40      	ldr	r2, [pc, #256]	@ (8008654 <TIM_Base_SetConfig+0x114>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d013      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800855e:	d00f      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3d      	ldr	r2, [pc, #244]	@ (8008658 <TIM_Base_SetConfig+0x118>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00b      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3c      	ldr	r2, [pc, #240]	@ (800865c <TIM_Base_SetConfig+0x11c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3b      	ldr	r2, [pc, #236]	@ (8008660 <TIM_Base_SetConfig+0x120>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3a      	ldr	r2, [pc, #232]	@ (8008664 <TIM_Base_SetConfig+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d108      	bne.n	8008592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2f      	ldr	r2, [pc, #188]	@ (8008654 <TIM_Base_SetConfig+0x114>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d02b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a0:	d027      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2c      	ldr	r2, [pc, #176]	@ (8008658 <TIM_Base_SetConfig+0x118>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d023      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2b      	ldr	r2, [pc, #172]	@ (800865c <TIM_Base_SetConfig+0x11c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d01f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a2a      	ldr	r2, [pc, #168]	@ (8008660 <TIM_Base_SetConfig+0x120>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a29      	ldr	r2, [pc, #164]	@ (8008664 <TIM_Base_SetConfig+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d017      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a28      	ldr	r2, [pc, #160]	@ (8008668 <TIM_Base_SetConfig+0x128>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d013      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a27      	ldr	r2, [pc, #156]	@ (800866c <TIM_Base_SetConfig+0x12c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a26      	ldr	r2, [pc, #152]	@ (8008670 <TIM_Base_SetConfig+0x130>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a25      	ldr	r2, [pc, #148]	@ (8008674 <TIM_Base_SetConfig+0x134>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a24      	ldr	r2, [pc, #144]	@ (8008678 <TIM_Base_SetConfig+0x138>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a23      	ldr	r2, [pc, #140]	@ (800867c <TIM_Base_SetConfig+0x13c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d108      	bne.n	8008604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0a      	ldr	r2, [pc, #40]	@ (8008654 <TIM_Base_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_Base_SetConfig+0xf8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a0c      	ldr	r2, [pc, #48]	@ (8008664 <TIM_Base_SetConfig+0x124>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d103      	bne.n	8008640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	615a      	str	r2, [r3, #20]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40010400 	.word	0x40010400
 8008668:	40014000 	.word	0x40014000
 800866c:	40014400 	.word	0x40014400
 8008670:	40014800 	.word	0x40014800
 8008674:	40001800 	.word	0x40001800
 8008678:	40001c00 	.word	0x40001c00
 800867c:	40002000 	.word	0x40002000

08008680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008758 <TIM_OC1_SetConfig+0xd8>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 0302 	bic.w	r3, r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a21      	ldr	r2, [pc, #132]	@ (800875c <TIM_OC1_SetConfig+0xdc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC1_SetConfig+0x64>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a20      	ldr	r2, [pc, #128]	@ (8008760 <TIM_OC1_SetConfig+0xe0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d10c      	bne.n	80086fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0308 	bic.w	r3, r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 0304 	bic.w	r3, r3, #4
 80086fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a16      	ldr	r2, [pc, #88]	@ (800875c <TIM_OC1_SetConfig+0xdc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_OC1_SetConfig+0x8e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a15      	ldr	r2, [pc, #84]	@ (8008760 <TIM_OC1_SetConfig+0xe0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d111      	bne.n	8008732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	fffeff8f 	.word	0xfffeff8f
 800875c:	40010000 	.word	0x40010000
 8008760:	40010400 	.word	0x40010400

08008764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	f023 0210 	bic.w	r2, r3, #16
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4b2e      	ldr	r3, [pc, #184]	@ (8008848 <TIM_OC2_SetConfig+0xe4>)
 8008790:	4013      	ands	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800879a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	021b      	lsls	r3, r3, #8
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f023 0320 	bic.w	r3, r3, #32
 80087ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	697a      	ldr	r2, [r7, #20]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a23      	ldr	r2, [pc, #140]	@ (800884c <TIM_OC2_SetConfig+0xe8>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d003      	beq.n	80087cc <TIM_OC2_SetConfig+0x68>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a22      	ldr	r2, [pc, #136]	@ (8008850 <TIM_OC2_SetConfig+0xec>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d10d      	bne.n	80087e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	011b      	lsls	r3, r3, #4
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a18      	ldr	r2, [pc, #96]	@ (800884c <TIM_OC2_SetConfig+0xe8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d003      	beq.n	80087f8 <TIM_OC2_SetConfig+0x94>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a17      	ldr	r2, [pc, #92]	@ (8008850 <TIM_OC2_SetConfig+0xec>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d113      	bne.n	8008820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80087fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	693a      	ldr	r2, [r7, #16]
 8008824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	feff8fff 	.word	0xfeff8fff
 800884c:	40010000 	.word	0x40010000
 8008850:	40010400 	.word	0x40010400

08008854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4b2d      	ldr	r3, [pc, #180]	@ (8008934 <TIM_OC3_SetConfig+0xe0>)
 8008880:	4013      	ands	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0303 	bic.w	r3, r3, #3
 800888a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800889c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a22      	ldr	r2, [pc, #136]	@ (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d003      	beq.n	80088ba <TIM_OC3_SetConfig+0x66>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a21      	ldr	r2, [pc, #132]	@ (800893c <TIM_OC3_SetConfig+0xe8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d10d      	bne.n	80088d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a17      	ldr	r2, [pc, #92]	@ (8008938 <TIM_OC3_SetConfig+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d003      	beq.n	80088e6 <TIM_OC3_SetConfig+0x92>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a16      	ldr	r2, [pc, #88]	@ (800893c <TIM_OC3_SetConfig+0xe8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d113      	bne.n	800890e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	697a      	ldr	r2, [r7, #20]
 8008926:	621a      	str	r2, [r3, #32]
}
 8008928:	bf00      	nop
 800892a:	371c      	adds	r7, #28
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	fffeff8f 	.word	0xfffeff8f
 8008938:	40010000 	.word	0x40010000
 800893c:	40010400 	.word	0x40010400

08008940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4b1e      	ldr	r3, [pc, #120]	@ (80089e4 <TIM_OC4_SetConfig+0xa4>)
 800896c:	4013      	ands	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800898a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	031b      	lsls	r3, r3, #12
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a13      	ldr	r2, [pc, #76]	@ (80089e8 <TIM_OC4_SetConfig+0xa8>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC4_SetConfig+0x68>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a12      	ldr	r2, [pc, #72]	@ (80089ec <TIM_OC4_SetConfig+0xac>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d109      	bne.n	80089bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	019b      	lsls	r3, r3, #6
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	693a      	ldr	r2, [r7, #16]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	feff8fff 	.word	0xfeff8fff
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40010400 	.word	0x40010400

080089f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008a88 <TIM_OC5_SetConfig+0x98>)
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a12      	ldr	r2, [pc, #72]	@ (8008a8c <TIM_OC5_SetConfig+0x9c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d003      	beq.n	8008a4e <TIM_OC5_SetConfig+0x5e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a11      	ldr	r2, [pc, #68]	@ (8008a90 <TIM_OC5_SetConfig+0xa0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d109      	bne.n	8008a62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	021b      	lsls	r3, r3, #8
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	621a      	str	r2, [r3, #32]
}
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	fffeff8f 	.word	0xfffeff8f
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b1c      	ldr	r3, [pc, #112]	@ (8008b30 <TIM_OC6_SetConfig+0x9c>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	021b      	lsls	r3, r3, #8
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	051b      	lsls	r3, r3, #20
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a13      	ldr	r2, [pc, #76]	@ (8008b34 <TIM_OC6_SetConfig+0xa0>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_OC6_SetConfig+0x60>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	@ (8008b38 <TIM_OC6_SetConfig+0xa4>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d109      	bne.n	8008b08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	feff8fff 	.word	0xfeff8fff
 8008b34:	40010000 	.word	0x40010000
 8008b38:	40010400 	.word	0x40010400

08008b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f023 0201 	bic.w	r2, r3, #1
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f023 030a 	bic.w	r3, r3, #10
 8008b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b7a:	697a      	ldr	r2, [r7, #20]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	621a      	str	r2, [r3, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b087      	sub	sp, #28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f023 0210 	bic.w	r2, r3, #16
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	031b      	lsls	r3, r3, #12
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	621a      	str	r2, [r3, #32]
}
 8008bee:	bf00      	nop
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bfa:	b480      	push	{r7}
 8008bfc:	b085      	sub	sp, #20
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	f043 0307 	orr.w	r3, r3, #7
 8008c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	609a      	str	r2, [r3, #8]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
 8008c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	021a      	lsls	r2, r3, #8
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	609a      	str	r2, [r3, #8]
}
 8008c64:	bf00      	nop
 8008c66:	371c      	adds	r7, #28
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e06d      	b.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a30      	ldr	r2, [pc, #192]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d004      	beq.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d108      	bne.n	8008cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a20      	ldr	r2, [pc, #128]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d022      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cfa:	d01d      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1d      	ldr	r2, [pc, #116]	@ (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d018      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d013      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a1a      	ldr	r2, [pc, #104]	@ (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00e      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a15      	ldr	r2, [pc, #84]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d009      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a16      	ldr	r2, [pc, #88]	@ (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d004      	beq.n	8008d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a15      	ldr	r2, [pc, #84]	@ (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d10c      	bne.n	8008d52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40010000 	.word	0x40010000
 8008d74:	40010400 	.word	0x40010400
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00
 8008d84:	40014000 	.word	0x40014000
 8008d88:	40001800 	.word	0x40001800

08008d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d101      	bne.n	8008d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e040      	b.n	8008e20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7fa fc02 	bl	80035b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2224      	movs	r2, #36	@ 0x24
 8008db8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fbe6 	bl	800959c <UART_SetConfig>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e022      	b.n	8008e20 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fe3e 	bl	8009a64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fec5 	bl	8009ba8 <UART_CheckIdleState>
 8008e1e:	4603      	mov	r3, r0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	@ 0x28
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d171      	bne.n	8008f24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Transmit+0x24>
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e06a      	b.n	8008f26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2221      	movs	r2, #33	@ 0x21
 8008e5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e5e:	f7fa fdef 	bl	8003a40 <HAL_GetTick>
 8008e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e7c:	d108      	bne.n	8008e90 <HAL_UART_Transmit+0x68>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	e003      	b.n	8008e98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e98:	e02c      	b.n	8008ef4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 feb6 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e038      	b.n	8008f26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ec8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	3302      	adds	r3, #2
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e007      	b.n	8008ee2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	781a      	ldrb	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1cc      	bne.n	8008e9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2200      	movs	r2, #0
 8008f08:	2140      	movs	r1, #64	@ 0x40
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fe83 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e005      	b.n	8008f26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e000      	b.n	8008f26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b08a      	sub	sp, #40	@ 0x28
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d132      	bne.n	8008fac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <HAL_UART_Receive_IT+0x24>
 8008f4c:	88fb      	ldrh	r3, [r7, #6]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d101      	bne.n	8008f56 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e02b      	b.n	8008fae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d018      	beq.n	8008f9c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	613b      	str	r3, [r7, #16]
   return(result);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f88:	623b      	str	r3, [r7, #32]
 8008f8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	6a3a      	ldr	r2, [r7, #32]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e6      	bne.n	8008f6a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fefe 	bl	8009da4 <UART_Start_Receive_IT>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	e000      	b.n	8008fae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008fac:	2302      	movs	r3, #2
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	@ 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b0ba      	sub	sp, #232	@ 0xe8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008fe2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008fec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009004:	f003 0320 	and.w	r3, r3, #32
 8009008:	2b00      	cmp	r3, #0
 800900a:	d009      	beq.n	8009020 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8297 	beq.w	8009544 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
      }
      return;
 800901e:	e291      	b.n	8009544 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8117 	beq.w	8009258 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800902a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009036:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800903a:	4b85      	ldr	r3, [pc, #532]	@ (8009250 <HAL_UART_IRQHandler+0x298>)
 800903c:	4013      	ands	r3, r2
 800903e:	2b00      	cmp	r3, #0
 8009040:	f000 810a 	beq.w	8009258 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d011      	beq.n	8009074 <HAL_UART_IRQHandler+0xbc>
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2201      	movs	r2, #1
 8009062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800906a:	f043 0201 	orr.w	r2, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d011      	beq.n	80090a4 <HAL_UART_IRQHandler+0xec>
 8009080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00b      	beq.n	80090a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2202      	movs	r2, #2
 8009092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800909a:	f043 0204 	orr.w	r2, r3, #4
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a8:	f003 0304 	and.w	r3, r3, #4
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d011      	beq.n	80090d4 <HAL_UART_IRQHandler+0x11c>
 80090b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2204      	movs	r2, #4
 80090c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090ca:	f043 0202 	orr.w	r2, r3, #2
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d017      	beq.n	8009110 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d105      	bne.n	80090f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80090ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2208      	movs	r2, #8
 80090fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009106:	f043 0208 	orr.w	r2, r3, #8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009118:	2b00      	cmp	r3, #0
 800911a:	d012      	beq.n	8009142 <HAL_UART_IRQHandler+0x18a>
 800911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00c      	beq.n	8009142 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009138:	f043 0220 	orr.w	r2, r3, #32
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 81fd 	beq.w	8009548 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00d      	beq.n	8009176 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800917c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918a:	2b40      	cmp	r3, #64	@ 0x40
 800918c:	d005      	beq.n	800919a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800918e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009192:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009196:	2b00      	cmp	r3, #0
 8009198:	d04f      	beq.n	800923a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fec8 	bl	8009f30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091aa:	2b40      	cmp	r3, #64	@ 0x40
 80091ac:	d141      	bne.n	8009232 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	3308      	adds	r3, #8
 80091b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3308      	adds	r3, #8
 80091d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091ea:	e841 2300 	strex	r3, r2, [r1]
 80091ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1d9      	bne.n	80091ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d013      	beq.n	800922a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009206:	4a13      	ldr	r2, [pc, #76]	@ (8009254 <HAL_UART_IRQHandler+0x29c>)
 8009208:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800920e:	4618      	mov	r0, r3
 8009210:	f7fa fdc7 	bl	8003da2 <HAL_DMA_Abort_IT>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d017      	beq.n	800924a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800921e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	e00f      	b.n	800924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f9a0 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009230:	e00b      	b.n	800924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f99c 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	e007      	b.n	800924a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f998 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009248:	e17e      	b.n	8009548 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924a:	bf00      	nop
    return;
 800924c:	e17c      	b.n	8009548 <HAL_UART_IRQHandler+0x590>
 800924e:	bf00      	nop
 8009250:	04000120 	.word	0x04000120
 8009254:	08009ff9 	.word	0x08009ff9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800925c:	2b01      	cmp	r3, #1
 800925e:	f040 814c 	bne.w	80094fa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 8145 	beq.w	80094fa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009274:	f003 0310 	and.w	r3, r3, #16
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 813e 	beq.w	80094fa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2210      	movs	r2, #16
 8009284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009290:	2b40      	cmp	r3, #64	@ 0x40
 8009292:	f040 80b6 	bne.w	8009402 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8150 	beq.w	800954c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80092b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092b6:	429a      	cmp	r2, r3
 80092b8:	f080 8148 	bcs.w	800954c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d0:	f000 8086 	beq.w	80093e0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80092fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009302:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800930a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1da      	bne.n	80092d4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800932e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3308      	adds	r3, #8
 800933e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009342:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009346:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800934a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e1      	bne.n	800931e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800936a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800936c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800937e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009380:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009384:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800938c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e3      	bne.n	800935a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b0:	f023 0310 	bic.w	r3, r3, #16
 80093b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	461a      	mov	r2, r3
 80093be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093ca:	e841 2300 	strex	r3, r2, [r1]
 80093ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1e4      	bne.n	80093a0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fa fc71 	bl	8003cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f8c2 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009400:	e0a4      	b.n	800954c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800940e:	b29b      	uxth	r3, r3
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8096 	beq.w	8009550 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 8091 	beq.w	8009550 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800943c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009450:	647b      	str	r3, [r7, #68]	@ 0x44
 8009452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800945e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e4      	bne.n	800942e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946e:	e853 3f00 	ldrex	r3, [r3]
 8009472:	623b      	str	r3, [r7, #32]
   return(result);
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	f023 0301 	bic.w	r3, r3, #1
 800947a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009488:	633a      	str	r2, [r7, #48]	@ 0x30
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800948e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009490:	e841 2300 	strex	r3, r2, [r1]
 8009494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e3      	bne.n	8009464 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2220      	movs	r2, #32
 80094a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f023 0310 	bic.w	r3, r3, #16
 80094c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	69b9      	ldr	r1, [r7, #24]
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	617b      	str	r3, [r7, #20]
   return(result);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e4      	bne.n	80094b0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f846 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f8:	e02a      	b.n	8009550 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80094fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800950a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800950e:	2b00      	cmp	r3, #0
 8009510:	d008      	beq.n	8009524 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009516:	2b00      	cmp	r3, #0
 8009518:	d01c      	beq.n	8009554 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
    }
    return;
 8009522:	e017      	b.n	8009554 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d012      	beq.n	8009556 <HAL_UART_IRQHandler+0x59e>
 8009530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00c      	beq.n	8009556 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fd71 	bl	800a024 <UART_EndTransmit_IT>
    return;
 8009542:	e008      	b.n	8009556 <HAL_UART_IRQHandler+0x59e>
      return;
 8009544:	bf00      	nop
 8009546:	e006      	b.n	8009556 <HAL_UART_IRQHandler+0x59e>
    return;
 8009548:	bf00      	nop
 800954a:	e004      	b.n	8009556 <HAL_UART_IRQHandler+0x59e>
      return;
 800954c:	bf00      	nop
 800954e:	e002      	b.n	8009556 <HAL_UART_IRQHandler+0x59e>
      return;
 8009550:	bf00      	nop
 8009552:	e000      	b.n	8009556 <HAL_UART_IRQHandler+0x59e>
    return;
 8009554:	bf00      	nop
  }

}
 8009556:	37e8      	adds	r7, #232	@ 0xe8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	431a      	orrs	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	431a      	orrs	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	4313      	orrs	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4ba6      	ldr	r3, [pc, #664]	@ (8009860 <UART_SetConfig+0x2c4>)
 80095c8:	4013      	ands	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6812      	ldr	r2, [r2, #0]
 80095ce:	6979      	ldr	r1, [r7, #20]
 80095d0:	430b      	orrs	r3, r1
 80095d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	430a      	orrs	r2, r1
 800960c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a94      	ldr	r2, [pc, #592]	@ (8009864 <UART_SetConfig+0x2c8>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d120      	bne.n	800965a <UART_SetConfig+0xbe>
 8009618:	4b93      	ldr	r3, [pc, #588]	@ (8009868 <UART_SetConfig+0x2cc>)
 800961a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	2b03      	cmp	r3, #3
 8009624:	d816      	bhi.n	8009654 <UART_SetConfig+0xb8>
 8009626:	a201      	add	r2, pc, #4	@ (adr r2, 800962c <UART_SetConfig+0x90>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	0800963d 	.word	0x0800963d
 8009630:	08009649 	.word	0x08009649
 8009634:	08009643 	.word	0x08009643
 8009638:	0800964f 	.word	0x0800964f
 800963c:	2301      	movs	r3, #1
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e150      	b.n	80098e4 <UART_SetConfig+0x348>
 8009642:	2302      	movs	r3, #2
 8009644:	77fb      	strb	r3, [r7, #31]
 8009646:	e14d      	b.n	80098e4 <UART_SetConfig+0x348>
 8009648:	2304      	movs	r3, #4
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e14a      	b.n	80098e4 <UART_SetConfig+0x348>
 800964e:	2308      	movs	r3, #8
 8009650:	77fb      	strb	r3, [r7, #31]
 8009652:	e147      	b.n	80098e4 <UART_SetConfig+0x348>
 8009654:	2310      	movs	r3, #16
 8009656:	77fb      	strb	r3, [r7, #31]
 8009658:	e144      	b.n	80098e4 <UART_SetConfig+0x348>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a83      	ldr	r2, [pc, #524]	@ (800986c <UART_SetConfig+0x2d0>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d132      	bne.n	80096ca <UART_SetConfig+0x12e>
 8009664:	4b80      	ldr	r3, [pc, #512]	@ (8009868 <UART_SetConfig+0x2cc>)
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966a:	f003 030c 	and.w	r3, r3, #12
 800966e:	2b0c      	cmp	r3, #12
 8009670:	d828      	bhi.n	80096c4 <UART_SetConfig+0x128>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <UART_SetConfig+0xdc>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080096ad 	.word	0x080096ad
 800967c:	080096c5 	.word	0x080096c5
 8009680:	080096c5 	.word	0x080096c5
 8009684:	080096c5 	.word	0x080096c5
 8009688:	080096b9 	.word	0x080096b9
 800968c:	080096c5 	.word	0x080096c5
 8009690:	080096c5 	.word	0x080096c5
 8009694:	080096c5 	.word	0x080096c5
 8009698:	080096b3 	.word	0x080096b3
 800969c:	080096c5 	.word	0x080096c5
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	080096bf 	.word	0x080096bf
 80096ac:	2300      	movs	r3, #0
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e118      	b.n	80098e4 <UART_SetConfig+0x348>
 80096b2:	2302      	movs	r3, #2
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e115      	b.n	80098e4 <UART_SetConfig+0x348>
 80096b8:	2304      	movs	r3, #4
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e112      	b.n	80098e4 <UART_SetConfig+0x348>
 80096be:	2308      	movs	r3, #8
 80096c0:	77fb      	strb	r3, [r7, #31]
 80096c2:	e10f      	b.n	80098e4 <UART_SetConfig+0x348>
 80096c4:	2310      	movs	r3, #16
 80096c6:	77fb      	strb	r3, [r7, #31]
 80096c8:	e10c      	b.n	80098e4 <UART_SetConfig+0x348>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a68      	ldr	r2, [pc, #416]	@ (8009870 <UART_SetConfig+0x2d4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d120      	bne.n	8009716 <UART_SetConfig+0x17a>
 80096d4:	4b64      	ldr	r3, [pc, #400]	@ (8009868 <UART_SetConfig+0x2cc>)
 80096d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80096de:	2b30      	cmp	r3, #48	@ 0x30
 80096e0:	d013      	beq.n	800970a <UART_SetConfig+0x16e>
 80096e2:	2b30      	cmp	r3, #48	@ 0x30
 80096e4:	d814      	bhi.n	8009710 <UART_SetConfig+0x174>
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d009      	beq.n	80096fe <UART_SetConfig+0x162>
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	d810      	bhi.n	8009710 <UART_SetConfig+0x174>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <UART_SetConfig+0x15c>
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d006      	beq.n	8009704 <UART_SetConfig+0x168>
 80096f6:	e00b      	b.n	8009710 <UART_SetConfig+0x174>
 80096f8:	2300      	movs	r3, #0
 80096fa:	77fb      	strb	r3, [r7, #31]
 80096fc:	e0f2      	b.n	80098e4 <UART_SetConfig+0x348>
 80096fe:	2302      	movs	r3, #2
 8009700:	77fb      	strb	r3, [r7, #31]
 8009702:	e0ef      	b.n	80098e4 <UART_SetConfig+0x348>
 8009704:	2304      	movs	r3, #4
 8009706:	77fb      	strb	r3, [r7, #31]
 8009708:	e0ec      	b.n	80098e4 <UART_SetConfig+0x348>
 800970a:	2308      	movs	r3, #8
 800970c:	77fb      	strb	r3, [r7, #31]
 800970e:	e0e9      	b.n	80098e4 <UART_SetConfig+0x348>
 8009710:	2310      	movs	r3, #16
 8009712:	77fb      	strb	r3, [r7, #31]
 8009714:	e0e6      	b.n	80098e4 <UART_SetConfig+0x348>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a56      	ldr	r2, [pc, #344]	@ (8009874 <UART_SetConfig+0x2d8>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d120      	bne.n	8009762 <UART_SetConfig+0x1c6>
 8009720:	4b51      	ldr	r3, [pc, #324]	@ (8009868 <UART_SetConfig+0x2cc>)
 8009722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800972a:	2bc0      	cmp	r3, #192	@ 0xc0
 800972c:	d013      	beq.n	8009756 <UART_SetConfig+0x1ba>
 800972e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009730:	d814      	bhi.n	800975c <UART_SetConfig+0x1c0>
 8009732:	2b80      	cmp	r3, #128	@ 0x80
 8009734:	d009      	beq.n	800974a <UART_SetConfig+0x1ae>
 8009736:	2b80      	cmp	r3, #128	@ 0x80
 8009738:	d810      	bhi.n	800975c <UART_SetConfig+0x1c0>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <UART_SetConfig+0x1a8>
 800973e:	2b40      	cmp	r3, #64	@ 0x40
 8009740:	d006      	beq.n	8009750 <UART_SetConfig+0x1b4>
 8009742:	e00b      	b.n	800975c <UART_SetConfig+0x1c0>
 8009744:	2300      	movs	r3, #0
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e0cc      	b.n	80098e4 <UART_SetConfig+0x348>
 800974a:	2302      	movs	r3, #2
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e0c9      	b.n	80098e4 <UART_SetConfig+0x348>
 8009750:	2304      	movs	r3, #4
 8009752:	77fb      	strb	r3, [r7, #31]
 8009754:	e0c6      	b.n	80098e4 <UART_SetConfig+0x348>
 8009756:	2308      	movs	r3, #8
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e0c3      	b.n	80098e4 <UART_SetConfig+0x348>
 800975c:	2310      	movs	r3, #16
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	e0c0      	b.n	80098e4 <UART_SetConfig+0x348>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a44      	ldr	r2, [pc, #272]	@ (8009878 <UART_SetConfig+0x2dc>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d125      	bne.n	80097b8 <UART_SetConfig+0x21c>
 800976c:	4b3e      	ldr	r3, [pc, #248]	@ (8009868 <UART_SetConfig+0x2cc>)
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800977a:	d017      	beq.n	80097ac <UART_SetConfig+0x210>
 800977c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009780:	d817      	bhi.n	80097b2 <UART_SetConfig+0x216>
 8009782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009786:	d00b      	beq.n	80097a0 <UART_SetConfig+0x204>
 8009788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800978c:	d811      	bhi.n	80097b2 <UART_SetConfig+0x216>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <UART_SetConfig+0x1fe>
 8009792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009796:	d006      	beq.n	80097a6 <UART_SetConfig+0x20a>
 8009798:	e00b      	b.n	80097b2 <UART_SetConfig+0x216>
 800979a:	2300      	movs	r3, #0
 800979c:	77fb      	strb	r3, [r7, #31]
 800979e:	e0a1      	b.n	80098e4 <UART_SetConfig+0x348>
 80097a0:	2302      	movs	r3, #2
 80097a2:	77fb      	strb	r3, [r7, #31]
 80097a4:	e09e      	b.n	80098e4 <UART_SetConfig+0x348>
 80097a6:	2304      	movs	r3, #4
 80097a8:	77fb      	strb	r3, [r7, #31]
 80097aa:	e09b      	b.n	80098e4 <UART_SetConfig+0x348>
 80097ac:	2308      	movs	r3, #8
 80097ae:	77fb      	strb	r3, [r7, #31]
 80097b0:	e098      	b.n	80098e4 <UART_SetConfig+0x348>
 80097b2:	2310      	movs	r3, #16
 80097b4:	77fb      	strb	r3, [r7, #31]
 80097b6:	e095      	b.n	80098e4 <UART_SetConfig+0x348>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a2f      	ldr	r2, [pc, #188]	@ (800987c <UART_SetConfig+0x2e0>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d125      	bne.n	800980e <UART_SetConfig+0x272>
 80097c2:	4b29      	ldr	r3, [pc, #164]	@ (8009868 <UART_SetConfig+0x2cc>)
 80097c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80097cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d0:	d017      	beq.n	8009802 <UART_SetConfig+0x266>
 80097d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80097d6:	d817      	bhi.n	8009808 <UART_SetConfig+0x26c>
 80097d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097dc:	d00b      	beq.n	80097f6 <UART_SetConfig+0x25a>
 80097de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097e2:	d811      	bhi.n	8009808 <UART_SetConfig+0x26c>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <UART_SetConfig+0x254>
 80097e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ec:	d006      	beq.n	80097fc <UART_SetConfig+0x260>
 80097ee:	e00b      	b.n	8009808 <UART_SetConfig+0x26c>
 80097f0:	2301      	movs	r3, #1
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e076      	b.n	80098e4 <UART_SetConfig+0x348>
 80097f6:	2302      	movs	r3, #2
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e073      	b.n	80098e4 <UART_SetConfig+0x348>
 80097fc:	2304      	movs	r3, #4
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e070      	b.n	80098e4 <UART_SetConfig+0x348>
 8009802:	2308      	movs	r3, #8
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e06d      	b.n	80098e4 <UART_SetConfig+0x348>
 8009808:	2310      	movs	r3, #16
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e06a      	b.n	80098e4 <UART_SetConfig+0x348>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1b      	ldr	r2, [pc, #108]	@ (8009880 <UART_SetConfig+0x2e4>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d138      	bne.n	800988a <UART_SetConfig+0x2ee>
 8009818:	4b13      	ldr	r3, [pc, #76]	@ (8009868 <UART_SetConfig+0x2cc>)
 800981a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009822:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009826:	d017      	beq.n	8009858 <UART_SetConfig+0x2bc>
 8009828:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800982c:	d82a      	bhi.n	8009884 <UART_SetConfig+0x2e8>
 800982e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009832:	d00b      	beq.n	800984c <UART_SetConfig+0x2b0>
 8009834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009838:	d824      	bhi.n	8009884 <UART_SetConfig+0x2e8>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <UART_SetConfig+0x2aa>
 800983e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009842:	d006      	beq.n	8009852 <UART_SetConfig+0x2b6>
 8009844:	e01e      	b.n	8009884 <UART_SetConfig+0x2e8>
 8009846:	2300      	movs	r3, #0
 8009848:	77fb      	strb	r3, [r7, #31]
 800984a:	e04b      	b.n	80098e4 <UART_SetConfig+0x348>
 800984c:	2302      	movs	r3, #2
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e048      	b.n	80098e4 <UART_SetConfig+0x348>
 8009852:	2304      	movs	r3, #4
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e045      	b.n	80098e4 <UART_SetConfig+0x348>
 8009858:	2308      	movs	r3, #8
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e042      	b.n	80098e4 <UART_SetConfig+0x348>
 800985e:	bf00      	nop
 8009860:	efff69f3 	.word	0xefff69f3
 8009864:	40011000 	.word	0x40011000
 8009868:	40023800 	.word	0x40023800
 800986c:	40004400 	.word	0x40004400
 8009870:	40004800 	.word	0x40004800
 8009874:	40004c00 	.word	0x40004c00
 8009878:	40005000 	.word	0x40005000
 800987c:	40011400 	.word	0x40011400
 8009880:	40007800 	.word	0x40007800
 8009884:	2310      	movs	r3, #16
 8009886:	77fb      	strb	r3, [r7, #31]
 8009888:	e02c      	b.n	80098e4 <UART_SetConfig+0x348>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a72      	ldr	r2, [pc, #456]	@ (8009a58 <UART_SetConfig+0x4bc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d125      	bne.n	80098e0 <UART_SetConfig+0x344>
 8009894:	4b71      	ldr	r3, [pc, #452]	@ (8009a5c <UART_SetConfig+0x4c0>)
 8009896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800989e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80098a2:	d017      	beq.n	80098d4 <UART_SetConfig+0x338>
 80098a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80098a8:	d817      	bhi.n	80098da <UART_SetConfig+0x33e>
 80098aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098ae:	d00b      	beq.n	80098c8 <UART_SetConfig+0x32c>
 80098b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098b4:	d811      	bhi.n	80098da <UART_SetConfig+0x33e>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <UART_SetConfig+0x326>
 80098ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098be:	d006      	beq.n	80098ce <UART_SetConfig+0x332>
 80098c0:	e00b      	b.n	80098da <UART_SetConfig+0x33e>
 80098c2:	2300      	movs	r3, #0
 80098c4:	77fb      	strb	r3, [r7, #31]
 80098c6:	e00d      	b.n	80098e4 <UART_SetConfig+0x348>
 80098c8:	2302      	movs	r3, #2
 80098ca:	77fb      	strb	r3, [r7, #31]
 80098cc:	e00a      	b.n	80098e4 <UART_SetConfig+0x348>
 80098ce:	2304      	movs	r3, #4
 80098d0:	77fb      	strb	r3, [r7, #31]
 80098d2:	e007      	b.n	80098e4 <UART_SetConfig+0x348>
 80098d4:	2308      	movs	r3, #8
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e004      	b.n	80098e4 <UART_SetConfig+0x348>
 80098da:	2310      	movs	r3, #16
 80098dc:	77fb      	strb	r3, [r7, #31]
 80098de:	e001      	b.n	80098e4 <UART_SetConfig+0x348>
 80098e0:	2310      	movs	r3, #16
 80098e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098ec:	d15b      	bne.n	80099a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80098ee:	7ffb      	ldrb	r3, [r7, #31]
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d828      	bhi.n	8009946 <UART_SetConfig+0x3aa>
 80098f4:	a201      	add	r2, pc, #4	@ (adr r2, 80098fc <UART_SetConfig+0x360>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009921 	.word	0x08009921
 8009900:	08009929 	.word	0x08009929
 8009904:	08009931 	.word	0x08009931
 8009908:	08009947 	.word	0x08009947
 800990c:	08009937 	.word	0x08009937
 8009910:	08009947 	.word	0x08009947
 8009914:	08009947 	.word	0x08009947
 8009918:	08009947 	.word	0x08009947
 800991c:	0800993f 	.word	0x0800993f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009920:	f7fd f800 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8009924:	61b8      	str	r0, [r7, #24]
        break;
 8009926:	e013      	b.n	8009950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009928:	f7fd f810 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 800992c:	61b8      	str	r0, [r7, #24]
        break;
 800992e:	e00f      	b.n	8009950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009930:	4b4b      	ldr	r3, [pc, #300]	@ (8009a60 <UART_SetConfig+0x4c4>)
 8009932:	61bb      	str	r3, [r7, #24]
        break;
 8009934:	e00c      	b.n	8009950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009936:	f7fc fee3 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 800993a:	61b8      	str	r0, [r7, #24]
        break;
 800993c:	e008      	b.n	8009950 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009942:	61bb      	str	r3, [r7, #24]
        break;
 8009944:	e004      	b.n	8009950 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	77bb      	strb	r3, [r7, #30]
        break;
 800994e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d074      	beq.n	8009a40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	005a      	lsls	r2, r3, #1
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	441a      	add	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	fbb2 f3f3 	udiv	r3, r2, r3
 800996a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b0f      	cmp	r3, #15
 8009970:	d916      	bls.n	80099a0 <UART_SetConfig+0x404>
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009978:	d212      	bcs.n	80099a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	b29b      	uxth	r3, r3
 800997e:	f023 030f 	bic.w	r3, r3, #15
 8009982:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	085b      	lsrs	r3, r3, #1
 8009988:	b29b      	uxth	r3, r3
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	b29a      	uxth	r2, r3
 8009990:	89fb      	ldrh	r3, [r7, #14]
 8009992:	4313      	orrs	r3, r2
 8009994:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	89fa      	ldrh	r2, [r7, #14]
 800999c:	60da      	str	r2, [r3, #12]
 800999e:	e04f      	b.n	8009a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	77bb      	strb	r3, [r7, #30]
 80099a4:	e04c      	b.n	8009a40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d828      	bhi.n	80099fe <UART_SetConfig+0x462>
 80099ac:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <UART_SetConfig+0x418>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	080099ff 	.word	0x080099ff
 80099c4:	080099ef 	.word	0x080099ef
 80099c8:	080099ff 	.word	0x080099ff
 80099cc:	080099ff 	.word	0x080099ff
 80099d0:	080099ff 	.word	0x080099ff
 80099d4:	080099f7 	.word	0x080099f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d8:	f7fc ffa4 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 80099dc:	61b8      	str	r0, [r7, #24]
        break;
 80099de:	e013      	b.n	8009a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099e0:	f7fc ffb4 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 80099e4:	61b8      	str	r0, [r7, #24]
        break;
 80099e6:	e00f      	b.n	8009a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009a60 <UART_SetConfig+0x4c4>)
 80099ea:	61bb      	str	r3, [r7, #24]
        break;
 80099ec:	e00c      	b.n	8009a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ee:	f7fc fe87 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 80099f2:	61b8      	str	r0, [r7, #24]
        break;
 80099f4:	e008      	b.n	8009a08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099fa:	61bb      	str	r3, [r7, #24]
        break;
 80099fc:	e004      	b.n	8009a08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	77bb      	strb	r3, [r7, #30]
        break;
 8009a06:	bf00      	nop
    }

    if (pclk != 0U)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d018      	beq.n	8009a40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	085a      	lsrs	r2, r3, #1
 8009a14:	69bb      	ldr	r3, [r7, #24]
 8009a16:	441a      	add	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2b0f      	cmp	r3, #15
 8009a26:	d909      	bls.n	8009a3c <UART_SetConfig+0x4a0>
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a2e:	d205      	bcs.n	8009a3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	e001      	b.n	8009a40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009a4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3720      	adds	r7, #32
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	40007c00 	.word	0x40007c00
 8009a5c:	40023800 	.word	0x40023800
 8009a60:	00f42400 	.word	0x00f42400

08009a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	430a      	orrs	r2, r1
 8009aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	f003 0308 	and.w	r3, r3, #8
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af8:	f003 0310 	and.w	r3, r3, #16
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00a      	beq.n	8009b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1a:	f003 0320 	and.w	r3, r3, #32
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d01a      	beq.n	8009b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b62:	d10a      	bne.n	8009b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00a      	beq.n	8009b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	605a      	str	r2, [r3, #4]
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af02      	add	r7, sp, #8
 8009bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bb8:	f7f9 ff42 	bl	8003a40 <HAL_GetTick>
 8009bbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b08      	cmp	r3, #8
 8009bca:	d10e      	bne.n	8009bea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f81b 	bl	8009c16 <UART_WaitOnFlagUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e011      	b.n	8009c0e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2220      	movs	r2, #32
 8009bee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b09c      	sub	sp, #112	@ 0x70
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4613      	mov	r3, r2
 8009c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c26:	e0a7      	b.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	f000 80a3 	beq.w	8009d78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c32:	f7f9 ff05 	bl	8003a40 <HAL_GetTick>
 8009c36:	4602      	mov	r2, r0
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d302      	bcc.n	8009c48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d13f      	bne.n	8009cc8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c58:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009c5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c68:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009c6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009c6e:	e841 2300 	strex	r3, r2, [r1]
 8009c72:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1e6      	bne.n	8009c48 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8c:	f023 0301 	bic.w	r3, r3, #1
 8009c90:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	3308      	adds	r3, #8
 8009c98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009c9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e5      	bne.n	8009c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2220      	movs	r2, #32
 8009cb2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e068      	b.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0304 	and.w	r3, r3, #4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d050      	beq.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	69db      	ldr	r3, [r3, #28]
 8009cdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ce4:	d148      	bne.n	8009d78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d10:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e6      	bne.n	8009cf0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	3308      	adds	r3, #8
 8009d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	613b      	str	r3, [r7, #16]
   return(result);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	3308      	adds	r3, #8
 8009d40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d42:	623a      	str	r2, [r7, #32]
 8009d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	69f9      	ldr	r1, [r7, #28]
 8009d48:	6a3a      	ldr	r2, [r7, #32]
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e5      	bne.n	8009d22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e010      	b.n	8009d9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	69da      	ldr	r2, [r3, #28]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4013      	ands	r3, r2
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	bf0c      	ite	eq
 8009d88:	2301      	moveq	r3, #1
 8009d8a:	2300      	movne	r3, #0
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	461a      	mov	r2, r3
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	f43f af48 	beq.w	8009c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3770      	adds	r7, #112	@ 0x70
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b097      	sub	sp, #92	@ 0x5c
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	4613      	mov	r3, r2
 8009db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	88fa      	ldrh	r2, [r7, #6]
 8009dbc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	88fa      	ldrh	r2, [r7, #6]
 8009dc4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dd6:	d10e      	bne.n	8009df6 <UART_Start_Receive_IT+0x52>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d105      	bne.n	8009dec <UART_Start_Receive_IT+0x48>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009de6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009dea:	e02d      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	22ff      	movs	r2, #255	@ 0xff
 8009df0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009df4:	e028      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10d      	bne.n	8009e1a <UART_Start_Receive_IT+0x76>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d104      	bne.n	8009e10 <UART_Start_Receive_IT+0x6c>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	22ff      	movs	r2, #255	@ 0xff
 8009e0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e0e:	e01b      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	227f      	movs	r2, #127	@ 0x7f
 8009e14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e18:	e016      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e22:	d10d      	bne.n	8009e40 <UART_Start_Receive_IT+0x9c>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <UART_Start_Receive_IT+0x92>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	227f      	movs	r2, #127	@ 0x7f
 8009e30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e34:	e008      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	223f      	movs	r2, #63	@ 0x3f
 8009e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009e3e:	e003      	b.n	8009e48 <UART_Start_Receive_IT+0xa4>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2222      	movs	r2, #34	@ 0x22
 8009e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6a:	f043 0301 	orr.w	r3, r3, #1
 8009e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3308      	adds	r3, #8
 8009e76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e78:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009e7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e5      	bne.n	8009e58 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e94:	d107      	bne.n	8009ea6 <UART_Start_Receive_IT+0x102>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4a21      	ldr	r2, [pc, #132]	@ (8009f28 <UART_Start_Receive_IT+0x184>)
 8009ea2:	669a      	str	r2, [r3, #104]	@ 0x68
 8009ea4:	e002      	b.n	8009eac <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4a20      	ldr	r2, [pc, #128]	@ (8009f2c <UART_Start_Receive_IT+0x188>)
 8009eaa:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d019      	beq.n	8009ee8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e6      	bne.n	8009eb4 <UART_Start_Receive_IT+0x110>
 8009ee6:	e018      	b.n	8009f1a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f043 0320 	orr.w	r3, r3, #32
 8009efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f06:	623b      	str	r3, [r7, #32]
 8009f08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	69f9      	ldr	r1, [r7, #28]
 8009f0c:	6a3a      	ldr	r2, [r7, #32]
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e6      	bne.n	8009ee8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	375c      	adds	r7, #92	@ 0x5c
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	0800a1df 	.word	0x0800a1df
 8009f2c:	0800a079 	.word	0x0800a079

08009f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b095      	sub	sp, #84	@ 0x54
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f40:	e853 3f00 	ldrex	r3, [r3]
 8009f44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	461a      	mov	r2, r3
 8009f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f5e:	e841 2300 	strex	r3, r2, [r1]
 8009f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1e6      	bne.n	8009f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3308      	adds	r3, #8
 8009f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	e853 3f00 	ldrex	r3, [r3]
 8009f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	f023 0301 	bic.w	r3, r3, #1
 8009f80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e5      	bne.n	8009f6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d118      	bne.n	8009fd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	e853 3f00 	ldrex	r3, [r3]
 8009fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f023 0310 	bic.w	r3, r3, #16
 8009fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fc4:	61bb      	str	r3, [r7, #24]
 8009fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	6979      	ldr	r1, [r7, #20]
 8009fca:	69ba      	ldr	r2, [r7, #24]
 8009fcc:	e841 2300 	strex	r3, r2, [r1]
 8009fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e6      	bne.n	8009fa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2220      	movs	r2, #32
 8009fdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009fec:	bf00      	nop
 8009fee:	3754      	adds	r7, #84	@ 0x54
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff faaa 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	60bb      	str	r3, [r7, #8]
   return(result);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a040:	61fb      	str	r3, [r7, #28]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	61bb      	str	r3, [r7, #24]
 800a04c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6979      	ldr	r1, [r7, #20]
 800a050:	69ba      	ldr	r2, [r7, #24]
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	613b      	str	r3, [r7, #16]
   return(result);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e6      	bne.n	800a02c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fa76 	bl	800955c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a070:	bf00      	nop
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b096      	sub	sp, #88	@ 0x58
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a086:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a090:	2b22      	cmp	r3, #34	@ 0x22
 800a092:	f040 8098 	bne.w	800a1c6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a0a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a0a4:	b2d9      	uxtb	r1, r3
 800a0a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b0:	400a      	ands	r2, r1
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d17b      	bne.n	800a1d6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e6      	bne.n	800a0de <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	623b      	str	r3, [r7, #32]
   return(result);
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	f023 0301 	bic.w	r3, r3, #1
 800a126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a130:	633a      	str	r2, [r7, #48]	@ 0x30
 800a132:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e5      	bne.n	800a110 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2220      	movs	r2, #32
 800a148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d12e      	bne.n	800a1be <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	e853 3f00 	ldrex	r3, [r3]
 800a172:	60fb      	str	r3, [r7, #12]
   return(result);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f023 0310 	bic.w	r3, r3, #16
 800a17a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a188:	69b9      	ldr	r1, [r7, #24]
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	e841 2300 	strex	r3, r2, [r1]
 800a190:	617b      	str	r3, [r7, #20]
   return(result);
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1e6      	bne.n	800a166 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f003 0310 	and.w	r3, r3, #16
 800a1a2:	2b10      	cmp	r3, #16
 800a1a4:	d103      	bne.n	800a1ae <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff f9e4 	bl	8009584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1bc:	e00b      	b.n	800a1d6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7f8 fea0 	bl	8002f04 <HAL_UART_RxCpltCallback>
}
 800a1c4:	e007      	b.n	800a1d6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	699a      	ldr	r2, [r3, #24]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0208 	orr.w	r2, r2, #8
 800a1d4:	619a      	str	r2, [r3, #24]
}
 800a1d6:	bf00      	nop
 800a1d8:	3758      	adds	r7, #88	@ 0x58
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b096      	sub	sp, #88	@ 0x58
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a1ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1f6:	2b22      	cmp	r3, #34	@ 0x22
 800a1f8:	f040 8098 	bne.w	800a32c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a202:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a20a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a20c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a210:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a214:	4013      	ands	r3, r2
 800a216:	b29a      	uxth	r2, r3
 800a218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a21a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a220:	1c9a      	adds	r2, r3, #2
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	3b01      	subs	r3, #1
 800a230:	b29a      	uxth	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a23e:	b29b      	uxth	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d17b      	bne.n	800a33c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a258:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a262:	643b      	str	r3, [r7, #64]	@ 0x40
 800a264:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a268:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e6      	bne.n	800a244 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3308      	adds	r3, #8
 800a27c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27e:	6a3b      	ldr	r3, [r7, #32]
 800a280:	e853 3f00 	ldrex	r3, [r3]
 800a284:	61fb      	str	r3, [r7, #28]
   return(result);
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f023 0301 	bic.w	r3, r3, #1
 800a28c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3308      	adds	r3, #8
 800a294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a29c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a29e:	e841 2300 	strex	r3, r2, [r1]
 800a2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e5      	bne.n	800a276 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2220      	movs	r2, #32
 800a2ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d12e      	bne.n	800a324 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	e853 3f00 	ldrex	r3, [r3]
 800a2d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	f023 0310 	bic.w	r3, r3, #16
 800a2e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ee:	6979      	ldr	r1, [r7, #20]
 800a2f0:	69ba      	ldr	r2, [r7, #24]
 800a2f2:	e841 2300 	strex	r3, r2, [r1]
 800a2f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1e6      	bne.n	800a2cc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	f003 0310 	and.w	r3, r3, #16
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d103      	bne.n	800a314 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2210      	movs	r2, #16
 800a312:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff f931 	bl	8009584 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a322:	e00b      	b.n	800a33c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7f8 fded 	bl	8002f04 <HAL_UART_RxCpltCallback>
}
 800a32a:	e007      	b.n	800a33c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f042 0208 	orr.w	r2, r2, #8
 800a33a:	619a      	str	r2, [r3, #24]
}
 800a33c:	bf00      	nop
 800a33e:	3758      	adds	r7, #88	@ 0x58
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}

0800a344 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a344:	b5b0      	push	{r4, r5, r7, lr}
 800a346:	b08c      	sub	sp, #48	@ 0x30
 800a348:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a34a:	4b96      	ldr	r3, [pc, #600]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a34c:	22c0      	movs	r2, #192	@ 0xc0
 800a34e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a350:	4b94      	ldr	r3, [pc, #592]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a352:	22a8      	movs	r2, #168	@ 0xa8
 800a354:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a356:	4b93      	ldr	r3, [pc, #588]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a358:	2201      	movs	r2, #1
 800a35a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 800a35c:	4b91      	ldr	r3, [pc, #580]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a35e:	2242      	movs	r2, #66	@ 0x42
 800a360:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a362:	4b91      	ldr	r3, [pc, #580]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a364:	22ff      	movs	r2, #255	@ 0xff
 800a366:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a368:	4b8f      	ldr	r3, [pc, #572]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a36a:	22ff      	movs	r2, #255	@ 0xff
 800a36c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a36e:	4b8e      	ldr	r3, [pc, #568]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a370:	22ff      	movs	r2, #255	@ 0xff
 800a372:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a374:	4b8c      	ldr	r3, [pc, #560]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a376:	2200      	movs	r2, #0
 800a378:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a37a:	4b8c      	ldr	r3, [pc, #560]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a37c:	22c0      	movs	r2, #192	@ 0xc0
 800a37e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a380:	4b8a      	ldr	r3, [pc, #552]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a382:	22a8      	movs	r2, #168	@ 0xa8
 800a384:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a386:	4b89      	ldr	r3, [pc, #548]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a388:	2201      	movs	r2, #1
 800a38a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a38c:	4b87      	ldr	r3, [pc, #540]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a38e:	2201      	movs	r2, #1
 800a390:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a392:	2100      	movs	r1, #0
 800a394:	2000      	movs	r0, #0
 800a396:	f006 fa2b 	bl	80107f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a39a:	4b82      	ldr	r3, [pc, #520]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	061a      	lsls	r2, r3, #24
 800a3a0:	4b80      	ldr	r3, [pc, #512]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3a2:	785b      	ldrb	r3, [r3, #1]
 800a3a4:	041b      	lsls	r3, r3, #16
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	4b7e      	ldr	r3, [pc, #504]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3aa:	789b      	ldrb	r3, [r3, #2]
 800a3ac:	021b      	lsls	r3, r3, #8
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	4a7c      	ldr	r2, [pc, #496]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3b2:	78d2      	ldrb	r2, [r2, #3]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	061a      	lsls	r2, r3, #24
 800a3b8:	4b7a      	ldr	r3, [pc, #488]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	0619      	lsls	r1, r3, #24
 800a3be:	4b79      	ldr	r3, [pc, #484]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	041b      	lsls	r3, r3, #16
 800a3c4:	4319      	orrs	r1, r3
 800a3c6:	4b77      	ldr	r3, [pc, #476]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3c8:	789b      	ldrb	r3, [r3, #2]
 800a3ca:	021b      	lsls	r3, r3, #8
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	4975      	ldr	r1, [pc, #468]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3d0:	78c9      	ldrb	r1, [r1, #3]
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	021b      	lsls	r3, r3, #8
 800a3d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	4b71      	ldr	r3, [pc, #452]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	0619      	lsls	r1, r3, #24
 800a3e2:	4b70      	ldr	r3, [pc, #448]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3e4:	785b      	ldrb	r3, [r3, #1]
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	4319      	orrs	r1, r3
 800a3ea:	4b6e      	ldr	r3, [pc, #440]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3ec:	789b      	ldrb	r3, [r3, #2]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	430b      	orrs	r3, r1
 800a3f2:	496c      	ldr	r1, [pc, #432]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a3f4:	78c9      	ldrb	r1, [r1, #3]
 800a3f6:	430b      	orrs	r3, r1
 800a3f8:	0a1b      	lsrs	r3, r3, #8
 800a3fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3fe:	431a      	orrs	r2, r3
 800a400:	4b68      	ldr	r3, [pc, #416]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	0619      	lsls	r1, r3, #24
 800a406:	4b67      	ldr	r3, [pc, #412]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	041b      	lsls	r3, r3, #16
 800a40c:	4319      	orrs	r1, r3
 800a40e:	4b65      	ldr	r3, [pc, #404]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a410:	789b      	ldrb	r3, [r3, #2]
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	430b      	orrs	r3, r1
 800a416:	4963      	ldr	r1, [pc, #396]	@ (800a5a4 <MX_LWIP_Init+0x260>)
 800a418:	78c9      	ldrb	r1, [r1, #3]
 800a41a:	430b      	orrs	r3, r1
 800a41c:	0e1b      	lsrs	r3, r3, #24
 800a41e:	4313      	orrs	r3, r2
 800a420:	4a63      	ldr	r2, [pc, #396]	@ (800a5b0 <MX_LWIP_Init+0x26c>)
 800a422:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a424:	4b60      	ldr	r3, [pc, #384]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	061a      	lsls	r2, r3, #24
 800a42a:	4b5f      	ldr	r3, [pc, #380]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a42c:	785b      	ldrb	r3, [r3, #1]
 800a42e:	041b      	lsls	r3, r3, #16
 800a430:	431a      	orrs	r2, r3
 800a432:	4b5d      	ldr	r3, [pc, #372]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a434:	789b      	ldrb	r3, [r3, #2]
 800a436:	021b      	lsls	r3, r3, #8
 800a438:	4313      	orrs	r3, r2
 800a43a:	4a5b      	ldr	r2, [pc, #364]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a43c:	78d2      	ldrb	r2, [r2, #3]
 800a43e:	4313      	orrs	r3, r2
 800a440:	061a      	lsls	r2, r3, #24
 800a442:	4b59      	ldr	r3, [pc, #356]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	0619      	lsls	r1, r3, #24
 800a448:	4b57      	ldr	r3, [pc, #348]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a44a:	785b      	ldrb	r3, [r3, #1]
 800a44c:	041b      	lsls	r3, r3, #16
 800a44e:	4319      	orrs	r1, r3
 800a450:	4b55      	ldr	r3, [pc, #340]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a452:	789b      	ldrb	r3, [r3, #2]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	430b      	orrs	r3, r1
 800a458:	4953      	ldr	r1, [pc, #332]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a45a:	78c9      	ldrb	r1, [r1, #3]
 800a45c:	430b      	orrs	r3, r1
 800a45e:	021b      	lsls	r3, r3, #8
 800a460:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a464:	431a      	orrs	r2, r3
 800a466:	4b50      	ldr	r3, [pc, #320]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	0619      	lsls	r1, r3, #24
 800a46c:	4b4e      	ldr	r3, [pc, #312]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	4319      	orrs	r1, r3
 800a474:	4b4c      	ldr	r3, [pc, #304]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a476:	789b      	ldrb	r3, [r3, #2]
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	430b      	orrs	r3, r1
 800a47c:	494a      	ldr	r1, [pc, #296]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a47e:	78c9      	ldrb	r1, [r1, #3]
 800a480:	430b      	orrs	r3, r1
 800a482:	0a1b      	lsrs	r3, r3, #8
 800a484:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a488:	431a      	orrs	r2, r3
 800a48a:	4b47      	ldr	r3, [pc, #284]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	0619      	lsls	r1, r3, #24
 800a490:	4b45      	ldr	r3, [pc, #276]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	041b      	lsls	r3, r3, #16
 800a496:	4319      	orrs	r1, r3
 800a498:	4b43      	ldr	r3, [pc, #268]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a49a:	789b      	ldrb	r3, [r3, #2]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	430b      	orrs	r3, r1
 800a4a0:	4941      	ldr	r1, [pc, #260]	@ (800a5a8 <MX_LWIP_Init+0x264>)
 800a4a2:	78c9      	ldrb	r1, [r1, #3]
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	0e1b      	lsrs	r3, r3, #24
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	4a42      	ldr	r2, [pc, #264]	@ (800a5b4 <MX_LWIP_Init+0x270>)
 800a4ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a4ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	061a      	lsls	r2, r3, #24
 800a4b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	041b      	lsls	r3, r3, #16
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4be:	789b      	ldrb	r3, [r3, #2]
 800a4c0:	021b      	lsls	r3, r3, #8
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	4a39      	ldr	r2, [pc, #228]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4c6:	78d2      	ldrb	r2, [r2, #3]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	061a      	lsls	r2, r3, #24
 800a4cc:	4b37      	ldr	r3, [pc, #220]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	0619      	lsls	r1, r3, #24
 800a4d2:	4b36      	ldr	r3, [pc, #216]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	041b      	lsls	r3, r3, #16
 800a4d8:	4319      	orrs	r1, r3
 800a4da:	4b34      	ldr	r3, [pc, #208]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4dc:	789b      	ldrb	r3, [r3, #2]
 800a4de:	021b      	lsls	r3, r3, #8
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	4932      	ldr	r1, [pc, #200]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4e4:	78c9      	ldrb	r1, [r1, #3]
 800a4e6:	430b      	orrs	r3, r1
 800a4e8:	021b      	lsls	r3, r3, #8
 800a4ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	0619      	lsls	r1, r3, #24
 800a4f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a4f8:	785b      	ldrb	r3, [r3, #1]
 800a4fa:	041b      	lsls	r3, r3, #16
 800a4fc:	4319      	orrs	r1, r3
 800a4fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a500:	789b      	ldrb	r3, [r3, #2]
 800a502:	021b      	lsls	r3, r3, #8
 800a504:	430b      	orrs	r3, r1
 800a506:	4929      	ldr	r1, [pc, #164]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a508:	78c9      	ldrb	r1, [r1, #3]
 800a50a:	430b      	orrs	r3, r1
 800a50c:	0a1b      	lsrs	r3, r3, #8
 800a50e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a512:	431a      	orrs	r2, r3
 800a514:	4b25      	ldr	r3, [pc, #148]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	0619      	lsls	r1, r3, #24
 800a51a:	4b24      	ldr	r3, [pc, #144]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	041b      	lsls	r3, r3, #16
 800a520:	4319      	orrs	r1, r3
 800a522:	4b22      	ldr	r3, [pc, #136]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a524:	789b      	ldrb	r3, [r3, #2]
 800a526:	021b      	lsls	r3, r3, #8
 800a528:	430b      	orrs	r3, r1
 800a52a:	4920      	ldr	r1, [pc, #128]	@ (800a5ac <MX_LWIP_Init+0x268>)
 800a52c:	78c9      	ldrb	r1, [r1, #3]
 800a52e:	430b      	orrs	r3, r1
 800a530:	0e1b      	lsrs	r3, r3, #24
 800a532:	4313      	orrs	r3, r2
 800a534:	4a20      	ldr	r2, [pc, #128]	@ (800a5b8 <MX_LWIP_Init+0x274>)
 800a536:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a538:	4b20      	ldr	r3, [pc, #128]	@ (800a5bc <MX_LWIP_Init+0x278>)
 800a53a:	9302      	str	r3, [sp, #8]
 800a53c:	4b20      	ldr	r3, [pc, #128]	@ (800a5c0 <MX_LWIP_Init+0x27c>)
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	2300      	movs	r3, #0
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	4b1c      	ldr	r3, [pc, #112]	@ (800a5b8 <MX_LWIP_Init+0x274>)
 800a546:	4a1b      	ldr	r2, [pc, #108]	@ (800a5b4 <MX_LWIP_Init+0x270>)
 800a548:	4919      	ldr	r1, [pc, #100]	@ (800a5b0 <MX_LWIP_Init+0x26c>)
 800a54a:	481e      	ldr	r0, [pc, #120]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a54c:	f007 fd6a 	bl	8012024 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a550:	481c      	ldr	r0, [pc, #112]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a552:	f007 ff19 	bl	8012388 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a556:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a558:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a55c:	089b      	lsrs	r3, r3, #2
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a568:	4816      	ldr	r0, [pc, #88]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a56a:	f007 ff1d 	bl	80123a8 <netif_set_up>
 800a56e:	e002      	b.n	800a576 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a570:	4814      	ldr	r0, [pc, #80]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a572:	f007 ff85 	bl	8012480 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a576:	4914      	ldr	r1, [pc, #80]	@ (800a5c8 <MX_LWIP_Init+0x284>)
 800a578:	4812      	ldr	r0, [pc, #72]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a57a:	f008 f817 	bl	80125ac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a57e:	4b13      	ldr	r3, [pc, #76]	@ (800a5cc <MX_LWIP_Init+0x288>)
 800a580:	1d3c      	adds	r4, r7, #4
 800a582:	461d      	mov	r5, r3
 800a584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a588:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a58c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a590:	1d3b      	adds	r3, r7, #4
 800a592:	490c      	ldr	r1, [pc, #48]	@ (800a5c4 <MX_LWIP_Init+0x280>)
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fd47 	bl	800b028 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a59a:	bf00      	nop
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	200008ac 	.word	0x200008ac
 800a5a8:	200008b0 	.word	0x200008b0
 800a5ac:	200008b4 	.word	0x200008b4
 800a5b0:	200008a0 	.word	0x200008a0
 800a5b4:	200008a4 	.word	0x200008a4
 800a5b8:	200008a8 	.word	0x200008a8
 800a5bc:	08010701 	.word	0x08010701
 800a5c0:	0800aac9 	.word	0x0800aac9
 800a5c4:	2000086c 	.word	0x2000086c
 800a5c8:	0800a5d1 	.word	0x0800a5d1
 800a5cc:	0801fa74 	.word	0x0801fa74

0800a5d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <SCB_InvalidateDCache_by_Addr>:
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5fa:	f3bf 8f4f 	dsb	sy
}
 800a5fe:	bf00      	nop
    while (op_size > 0) {
 800a600:	e00b      	b.n	800a61a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a602:	4a0d      	ldr	r2, [pc, #52]	@ (800a638 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	4413      	add	r3, r2
 800a610:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	dcf0      	bgt.n	800a602 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a620:	f3bf 8f4f 	dsb	sy
}
 800a624:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a626:	f3bf 8f6f 	isb	sy
}
 800a62a:	bf00      	nop
}
 800a62c:	bf00      	nop
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a644:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <HAL_ETH_RxCpltCallback+0x1c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fe69 	bl	800b320 <osSemaphoreRelease>
}
 800a64e:	bf00      	nop
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20005244 	.word	0x20005244

0800a65c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a664:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <HAL_ETH_TxCpltCallback+0x1c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 fe59 	bl	800b320 <osSemaphoreRelease>
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20005248 	.word	0x20005248

0800a67c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f7fa fa4d 	bl	8004b24 <HAL_ETH_GetDMAError>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a690:	2b80      	cmp	r3, #128	@ 0x80
 800a692:	d104      	bne.n	800a69e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a694:	4b04      	ldr	r3, [pc, #16]	@ (800a6a8 <HAL_ETH_ErrorCallback+0x2c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fe41 	bl	800b320 <osSemaphoreRelease>
  }
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20005244 	.word	0x20005244

0800a6ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a6ac:	b5b0      	push	{r4, r5, r7, lr}
 800a6ae:	b0a8      	sub	sp, #160	@ 0xa0
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800a6c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6ca:	2264      	movs	r2, #100	@ 0x64
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f012 ff79 	bl	801d5c6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a6d4:	4b85      	ldr	r3, [pc, #532]	@ (800a8ec <low_level_init+0x240>)
 800a6d6:	4a86      	ldr	r2, [pc, #536]	@ (800a8f0 <low_level_init+0x244>)
 800a6d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 800a6e0:	2380      	movs	r3, #128	@ 0x80
 800a6e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 800a6e6:	23e1      	movs	r3, #225	@ 0xe1
 800a6e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800a6fe:	4a7b      	ldr	r2, [pc, #492]	@ (800a8ec <low_level_init+0x240>)
 800a700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a704:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a706:	4b79      	ldr	r3, [pc, #484]	@ (800a8ec <low_level_init+0x240>)
 800a708:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a70c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a70e:	4b77      	ldr	r3, [pc, #476]	@ (800a8ec <low_level_init+0x240>)
 800a710:	4a78      	ldr	r2, [pc, #480]	@ (800a8f4 <low_level_init+0x248>)
 800a712:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a714:	4b75      	ldr	r3, [pc, #468]	@ (800a8ec <low_level_init+0x240>)
 800a716:	4a78      	ldr	r2, [pc, #480]	@ (800a8f8 <low_level_init+0x24c>)
 800a718:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a71a:	4b74      	ldr	r3, [pc, #464]	@ (800a8ec <low_level_init+0x240>)
 800a71c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a720:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a722:	4872      	ldr	r0, [pc, #456]	@ (800a8ec <low_level_init+0x240>)
 800a724:	f7f9 fb60 	bl	8003de8 <HAL_ETH_Init>
 800a728:	4603      	mov	r3, r0
 800a72a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a72e:	2238      	movs	r2, #56	@ 0x38
 800a730:	2100      	movs	r1, #0
 800a732:	4872      	ldr	r0, [pc, #456]	@ (800a8fc <low_level_init+0x250>)
 800a734:	f012 ff47 	bl	801d5c6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a738:	4b70      	ldr	r3, [pc, #448]	@ (800a8fc <low_level_init+0x250>)
 800a73a:	2221      	movs	r2, #33	@ 0x21
 800a73c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a73e:	4b6f      	ldr	r3, [pc, #444]	@ (800a8fc <low_level_init+0x250>)
 800a740:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a744:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a746:	4b6d      	ldr	r3, [pc, #436]	@ (800a8fc <low_level_init+0x250>)
 800a748:	2200      	movs	r2, #0
 800a74a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a74c:	486c      	ldr	r0, [pc, #432]	@ (800a900 <low_level_init+0x254>)
 800a74e:	f007 fb23 	bl	8011d98 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2206      	movs	r2, #6
 800a756:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a75a:	4b64      	ldr	r3, [pc, #400]	@ (800a8ec <low_level_init+0x240>)
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	781a      	ldrb	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a766:	4b61      	ldr	r3, [pc, #388]	@ (800a8ec <low_level_init+0x240>)
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	785a      	ldrb	r2, [r3, #1]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a772:	4b5e      	ldr	r3, [pc, #376]	@ (800a8ec <low_level_init+0x240>)
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	789a      	ldrb	r2, [r3, #2]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a77e:	4b5b      	ldr	r3, [pc, #364]	@ (800a8ec <low_level_init+0x240>)
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	78da      	ldrb	r2, [r3, #3]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a78a:	4b58      	ldr	r3, [pc, #352]	@ (800a8ec <low_level_init+0x240>)
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	791a      	ldrb	r2, [r3, #4]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a796:	4b55      	ldr	r3, [pc, #340]	@ (800a8ec <low_level_init+0x240>)
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	795a      	ldrb	r2, [r3, #5]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a7a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7b0:	f043 030a 	orr.w	r3, r3, #10
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800a7bc:	2203      	movs	r2, #3
 800a7be:	2100      	movs	r1, #0
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	f001 f8a4 	bl	800b90e <xQueueGenericCreate>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4a4e      	ldr	r2, [pc, #312]	@ (800a904 <low_level_init+0x258>)
 800a7ca:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800a7cc:	2203      	movs	r2, #3
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	f001 f89c 	bl	800b90e <xQueueGenericCreate>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4a4b      	ldr	r2, [pc, #300]	@ (800a908 <low_level_init+0x25c>)
 800a7da:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a7dc:	4b4b      	ldr	r3, [pc, #300]	@ (800a90c <low_level_init+0x260>)
 800a7de:	f107 0408 	add.w	r4, r7, #8
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a7f0:	f107 0308 	add.w	r3, r7, #8
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 fc16 	bl	800b028 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a7fc:	4944      	ldr	r1, [pc, #272]	@ (800a910 <low_level_init+0x264>)
 800a7fe:	4845      	ldr	r0, [pc, #276]	@ (800a914 <low_level_init+0x268>)
 800a800:	f7f8 ff6b 	bl	80036da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a804:	4843      	ldr	r0, [pc, #268]	@ (800a914 <low_level_init+0x268>)
 800a806:	f7f8 ff9a 	bl	800373e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a80a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d165      	bne.n	800a8de <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a812:	4840      	ldr	r0, [pc, #256]	@ (800a914 <low_level_init+0x268>)
 800a814:	f7f9 f83b 	bl	800388e <LAN8742_GetLinkState>
 800a818:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a81c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a820:	2b01      	cmp	r3, #1
 800a822:	dc06      	bgt.n	800a832 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f007 fe91 	bl	801254c <netif_set_link_down>
      netif_set_down(netif);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f007 fe28 	bl	8012480 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a830:	e057      	b.n	800a8e2 <low_level_init+0x236>
      switch (PHYLinkState)
 800a832:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a836:	3b02      	subs	r3, #2
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d82b      	bhi.n	800a894 <low_level_init+0x1e8>
 800a83c:	a201      	add	r2, pc, #4	@ (adr r2, 800a844 <low_level_init+0x198>)
 800a83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a842:	bf00      	nop
 800a844:	0800a855 	.word	0x0800a855
 800a848:	0800a867 	.word	0x0800a867
 800a84c:	0800a877 	.word	0x0800a877
 800a850:	0800a887 	.word	0x0800a887
        duplex = ETH_FULLDUPLEX_MODE;
 800a854:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a85c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a864:	e01f      	b.n	800a8a6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a86c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a874:	e017      	b.n	800a8a6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a876:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a87a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800a87e:	2300      	movs	r3, #0
 800a880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a884:	e00f      	b.n	800a8a6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800a886:	2300      	movs	r3, #0
 800a888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800a88c:	2300      	movs	r3, #0
 800a88e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a892:	e008      	b.n	800a8a6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800a894:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800a89c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800a8a4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a8a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	480f      	ldr	r0, [pc, #60]	@ (800a8ec <low_level_init+0x240>)
 800a8ae:	f7f9 ffdf 	bl	8004870 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a8b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8b6:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 800a8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8bc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a8be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4809      	ldr	r0, [pc, #36]	@ (800a8ec <low_level_init+0x240>)
 800a8c6:	f7fa f8bd 	bl	8004a44 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a8ca:	4808      	ldr	r0, [pc, #32]	@ (800a8ec <low_level_init+0x240>)
 800a8cc:	f7f9 fb68 	bl	8003fa0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f007 fd69 	bl	80123a8 <netif_set_up>
    netif_set_link_up(netif);
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f007 fe04 	bl	80124e4 <netif_set_link_up>
}
 800a8dc:	e001      	b.n	800a8e2 <low_level_init+0x236>
    Error_Handler();
 800a8de:	f7f8 fb79 	bl	8002fd4 <Error_Handler>
}
 800a8e2:	bf00      	nop
 800a8e4:	37a0      	adds	r7, #160	@ 0xa0
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	2000524c 	.word	0x2000524c
 800a8f0:	40028000 	.word	0x40028000
 800a8f4:	200002f0 	.word	0x200002f0
 800a8f8:	20000250 	.word	0x20000250
 800a8fc:	200052fc 	.word	0x200052fc
 800a900:	08023218 	.word	0x08023218
 800a904:	20005244 	.word	0x20005244
 800a908:	20005248 	.word	0x20005248
 800a90c:	0801fa98 	.word	0x0801fa98
 800a910:	20000064 	.word	0x20000064
 800a914:	20005334 	.word	0x20005334

0800a918 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b092      	sub	sp, #72	@ 0x48
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a930:	f107 030c 	add.w	r3, r7, #12
 800a934:	2230      	movs	r2, #48	@ 0x30
 800a936:	2100      	movs	r1, #0
 800a938:	4618      	mov	r0, r3
 800a93a:	f012 fe44 	bl	801d5c6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	2230      	movs	r2, #48	@ 0x30
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f012 fe3d 	bl	801d5c6 <memset>

  for(q = p; q != NULL; q = q->next)
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a950:	e045      	b.n	800a9de <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a954:	2b03      	cmp	r3, #3
 800a956:	d902      	bls.n	800a95e <low_level_output+0x46>
      return ERR_IF;
 800a958:	f06f 030b 	mvn.w	r3, #11
 800a95c:	e065      	b.n	800aa2a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800a95e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a960:	6859      	ldr	r1, [r3, #4]
 800a962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a964:	4613      	mov	r3, r2
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	4413      	add	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	3348      	adds	r3, #72	@ 0x48
 800a96e:	443b      	add	r3, r7
 800a970:	3b3c      	subs	r3, #60	@ 0x3c
 800a972:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a974:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a976:	895b      	ldrh	r3, [r3, #10]
 800a978:	4619      	mov	r1, r3
 800a97a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a97c:	4613      	mov	r3, r2
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	3348      	adds	r3, #72	@ 0x48
 800a986:	443b      	add	r3, r7
 800a988:	3b38      	subs	r3, #56	@ 0x38
 800a98a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d011      	beq.n	800a9b6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a994:	1e5a      	subs	r2, r3, #1
 800a996:	f107 000c 	add.w	r0, r7, #12
 800a99a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a99c:	460b      	mov	r3, r1
 800a99e:	005b      	lsls	r3, r3, #1
 800a9a0:	440b      	add	r3, r1
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	18c1      	adds	r1, r0, r3
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	005b      	lsls	r3, r3, #1
 800a9aa:	4413      	add	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	3348      	adds	r3, #72	@ 0x48
 800a9b0:	443b      	add	r3, r7
 800a9b2:	3b34      	subs	r3, #52	@ 0x34
 800a9b4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d109      	bne.n	800a9d2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a9be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	3348      	adds	r3, #72	@ 0x48
 800a9ca:	443b      	add	r3, r7
 800a9cc:	3b34      	subs	r3, #52	@ 0x34
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a9d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1b6      	bne.n	800a952 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4b12      	ldr	r3, [pc, #72]	@ (800aa34 <low_level_output+0x11c>)
 800a9ec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a9ee:	4a11      	ldr	r2, [pc, #68]	@ (800aa34 <low_level_output+0x11c>)
 800a9f0:	f107 030c 	add.w	r3, r7, #12
 800a9f4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a9f6:	4a0f      	ldr	r2, [pc, #60]	@ (800aa34 <low_level_output+0x11c>)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a9fc:	6838      	ldr	r0, [r7, #0]
 800a9fe:	f008 fa29 	bl	8012e54 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800aa02:	490c      	ldr	r1, [pc, #48]	@ (800aa34 <low_level_output+0x11c>)
 800aa04:	480c      	ldr	r0, [pc, #48]	@ (800aa38 <low_level_output+0x120>)
 800aa06:	f7f9 fbd9 	bl	80041bc <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800aa0a:	bf00      	nop
 800aa0c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa3c <low_level_output+0x124>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f04f 31ff 	mov.w	r1, #4294967295
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 fc35 	bl	800b284 <osSemaphoreWait>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f5      	bne.n	800aa0c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800aa20:	4805      	ldr	r0, [pc, #20]	@ (800aa38 <low_level_output+0x120>)
 800aa22:	f7f9 fd5f 	bl	80044e4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800aa26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3748      	adds	r7, #72	@ 0x48
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	200052fc 	.word	0x200052fc
 800aa38:	2000524c 	.word	0x2000524c
 800aa3c:	20005248 	.word	0x20005248

0800aa40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <low_level_input+0x2c>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4805      	ldr	r0, [pc, #20]	@ (800aa70 <low_level_input+0x30>)
 800aa5c:	f7f9 fc0a 	bl	8004274 <HAL_ETH_ReadData>
  }

  return p;
 800aa60:	68fb      	ldr	r3, [r7, #12]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20005240 	.word	0x20005240
 800aa70:	2000524c 	.word	0x2000524c

0800aa74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aa84:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <ethernetif_input+0x50>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f04f 31ff 	mov.w	r1, #4294967295
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fbf9 	bl	800b284 <osSemaphoreWait>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f5      	bne.n	800aa84 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f7ff ffd1 	bl	800aa40 <low_level_input>
 800aa9e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00a      	beq.n	800aabc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	68b9      	ldr	r1, [r7, #8]
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	4798      	blx	r3
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f008 f926 	bl	8012d08 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1ea      	bne.n	800aa98 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aac2:	e7df      	b.n	800aa84 <ethernetif_input+0x10>
 800aac4:	20005244 	.word	0x20005244

0800aac8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <ethernetif_init+0x1c>
 800aad6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab10 <ethernetif_init+0x48>)
 800aad8:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800aadc:	490d      	ldr	r1, [pc, #52]	@ (800ab14 <ethernetif_init+0x4c>)
 800aade:	480e      	ldr	r0, [pc, #56]	@ (800ab18 <ethernetif_init+0x50>)
 800aae0:	f012 fcd2 	bl	801d488 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2273      	movs	r2, #115	@ 0x73
 800aae8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2274      	movs	r2, #116	@ 0x74
 800aaf0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a09      	ldr	r2, [pc, #36]	@ (800ab1c <ethernetif_init+0x54>)
 800aaf8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a08      	ldr	r2, [pc, #32]	@ (800ab20 <ethernetif_init+0x58>)
 800aafe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f7ff fdd3 	bl	800a6ac <low_level_init>

  return ERR_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	0801fab4 	.word	0x0801fab4
 800ab14:	0801fad0 	.word	0x0801fad0
 800ab18:	0801fae0 	.word	0x0801fae0
 800ab1c:	0801a921 	.word	0x0801a921
 800ab20:	0800a919 	.word	0x0800a919

0800ab24 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ab30:	68f9      	ldr	r1, [r7, #12]
 800ab32:	4809      	ldr	r0, [pc, #36]	@ (800ab58 <pbuf_free_custom+0x34>)
 800ab34:	f007 fa20 	bl	8011f78 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ab38:	4b08      	ldr	r3, [pc, #32]	@ (800ab5c <pbuf_free_custom+0x38>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d107      	bne.n	800ab50 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ab40:	4b06      	ldr	r3, [pc, #24]	@ (800ab5c <pbuf_free_custom+0x38>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ab46:	4b06      	ldr	r3, [pc, #24]	@ (800ab60 <pbuf_free_custom+0x3c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 fbe8 	bl	800b320 <osSemaphoreRelease>
  }
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	08023218 	.word	0x08023218
 800ab5c:	20005240 	.word	0x20005240
 800ab60:	20005244 	.word	0x20005244

0800ab64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ab68:	f7f8 ff6a 	bl	8003a40 <HAL_GetTick>
 800ab6c:	4603      	mov	r3, r0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	@ 0x38
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab80:	2200      	movs	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	605a      	str	r2, [r3, #4]
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a52      	ldr	r2, [pc, #328]	@ (800acdc <HAL_ETH_MspInit+0x168>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	f040 809e 	bne.w	800acd4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab98:	4b51      	ldr	r3, [pc, #324]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ab9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab9c:	4a50      	ldr	r2, [pc, #320]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ab9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aba2:	6313      	str	r3, [r2, #48]	@ 0x30
 800aba4:	4b4e      	ldr	r3, [pc, #312]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800aba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abac:	623b      	str	r3, [r7, #32]
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	4b4b      	ldr	r3, [pc, #300]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb4:	4a4a      	ldr	r2, [pc, #296]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800abba:	6313      	str	r3, [r2, #48]	@ 0x30
 800abbc:	4b48      	ldr	r3, [pc, #288]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	4b45      	ldr	r3, [pc, #276]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abcc:	4a44      	ldr	r2, [pc, #272]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800abd2:	6313      	str	r3, [r2, #48]	@ 0x30
 800abd4:	4b42      	ldr	r3, [pc, #264]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800abe0:	4b3f      	ldr	r3, [pc, #252]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe4:	4a3e      	ldr	r2, [pc, #248]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abe6:	f043 0304 	orr.w	r3, r3, #4
 800abea:	6313      	str	r3, [r2, #48]	@ 0x30
 800abec:	4b3c      	ldr	r3, [pc, #240]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	617b      	str	r3, [r7, #20]
 800abf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abf8:	4b39      	ldr	r3, [pc, #228]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfc:	4a38      	ldr	r2, [pc, #224]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800abfe:	f043 0301 	orr.w	r3, r3, #1
 800ac02:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac04:	4b36      	ldr	r3, [pc, #216]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac10:	4b33      	ldr	r3, [pc, #204]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac14:	4a32      	ldr	r2, [pc, #200]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac16:	f043 0302 	orr.w	r3, r3, #2
 800ac1a:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac1c:	4b30      	ldr	r3, [pc, #192]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac28:	4b2d      	ldr	r3, [pc, #180]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac2c:	4a2c      	ldr	r2, [pc, #176]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac32:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac34:	4b2a      	ldr	r3, [pc, #168]	@ (800ace0 <HAL_ETH_MspInit+0x16c>)
 800ac36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3c:	60bb      	str	r3, [r7, #8]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ac40:	2332      	movs	r3, #50	@ 0x32
 800ac42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac44:	2302      	movs	r3, #2
 800ac46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac50:	230b      	movs	r3, #11
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4822      	ldr	r0, [pc, #136]	@ (800ace4 <HAL_ETH_MspInit+0x170>)
 800ac5c:	f7fa fb72 	bl	8005344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ac60:	2386      	movs	r3, #134	@ 0x86
 800ac62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac64:	2302      	movs	r3, #2
 800ac66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac70:	230b      	movs	r3, #11
 800ac72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac78:	4619      	mov	r1, r3
 800ac7a:	481b      	ldr	r0, [pc, #108]	@ (800ace8 <HAL_ETH_MspInit+0x174>)
 800ac7c:	f7fa fb62 	bl	8005344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ac80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac86:	2302      	movs	r3, #2
 800ac88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ac92:	230b      	movs	r3, #11
 800ac94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ac96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4813      	ldr	r0, [pc, #76]	@ (800acec <HAL_ETH_MspInit+0x178>)
 800ac9e:	f7fa fb51 	bl	8005344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800aca2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800aca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aca8:	2302      	movs	r3, #2
 800acaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acac:	2300      	movs	r3, #0
 800acae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acb0:	2303      	movs	r3, #3
 800acb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800acb4:	230b      	movs	r3, #11
 800acb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800acb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acbc:	4619      	mov	r1, r3
 800acbe:	480c      	ldr	r0, [pc, #48]	@ (800acf0 <HAL_ETH_MspInit+0x17c>)
 800acc0:	f7fa fb40 	bl	8005344 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800acc4:	2200      	movs	r2, #0
 800acc6:	2105      	movs	r1, #5
 800acc8:	203d      	movs	r0, #61	@ 0x3d
 800acca:	f7f8 ffc4 	bl	8003c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800acce:	203d      	movs	r0, #61	@ 0x3d
 800acd0:	f7f8 ffdd 	bl	8003c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800acd4:	bf00      	nop
 800acd6:	3738      	adds	r7, #56	@ 0x38
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	40028000 	.word	0x40028000
 800ace0:	40023800 	.word	0x40023800
 800ace4:	40020800 	.word	0x40020800
 800ace8:	40020000 	.word	0x40020000
 800acec:	40020400 	.word	0x40020400
 800acf0:	40021800 	.word	0x40021800

0800acf4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800acf8:	4802      	ldr	r0, [pc, #8]	@ (800ad04 <ETH_PHY_IO_Init+0x10>)
 800acfa:	f7f9 febd 	bl	8004a78 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	2000524c 	.word	0x2000524c

0800ad08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	af00      	add	r7, sp, #0
  return 0;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	68f9      	ldr	r1, [r7, #12]
 800ad2a:	4807      	ldr	r0, [pc, #28]	@ (800ad48 <ETH_PHY_IO_ReadReg+0x30>)
 800ad2c:	f7f9 fd0c 	bl	8004748 <HAL_ETH_ReadPHYRegister>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ad36:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3a:	e000      	b.n	800ad3e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	2000524c 	.word	0x2000524c

0800ad4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	68ba      	ldr	r2, [r7, #8]
 800ad5c:	68f9      	ldr	r1, [r7, #12]
 800ad5e:	4807      	ldr	r0, [pc, #28]	@ (800ad7c <ETH_PHY_IO_WriteReg+0x30>)
 800ad60:	f7f9 fd3d 	bl	80047de <HAL_ETH_WritePHYRegister>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ad6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6e:	e000      	b.n	800ad72 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	2000524c 	.word	0x2000524c

0800ad80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad84:	f7f8 fe5c 	bl	8003a40 <HAL_GetTick>
 800ad88:	4603      	mov	r3, r0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b0a0      	sub	sp, #128	@ 0x80
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ad98:	f107 0308 	add.w	r3, r7, #8
 800ad9c:	2264      	movs	r2, #100	@ 0x64
 800ad9e:	2100      	movs	r1, #0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f012 fc10 	bl	801d5c6 <memset>
  int32_t PHYLinkState = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adae:	2300      	movs	r3, #0
 800adb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800adb2:	2300      	movs	r3, #0
 800adb4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800adba:	483a      	ldr	r0, [pc, #232]	@ (800aea4 <ethernet_link_thread+0x114>)
 800adbc:	f7f8 fd67 	bl	800388e <LAN8742_GetLinkState>
 800adc0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800adc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adc8:	089b      	lsrs	r3, r3, #2
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00c      	beq.n	800adee <ethernet_link_thread+0x5e>
 800add4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add6:	2b01      	cmp	r3, #1
 800add8:	dc09      	bgt.n	800adee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800adda:	4833      	ldr	r0, [pc, #204]	@ (800aea8 <ethernet_link_thread+0x118>)
 800addc:	f7f9 f96e 	bl	80040bc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ade0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ade2:	f007 fb4d 	bl	8012480 <netif_set_down>
    netif_set_link_down(netif);
 800ade6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ade8:	f007 fbb0 	bl	801254c <netif_set_link_down>
 800adec:	e055      	b.n	800ae9a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800adee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d14e      	bne.n	800ae9a <ethernet_link_thread+0x10a>
 800adfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	dd4b      	ble.n	800ae9a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ae02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae04:	3b02      	subs	r3, #2
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d82a      	bhi.n	800ae60 <ethernet_link_thread+0xd0>
 800ae0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae10 <ethernet_link_thread+0x80>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800ae21 	.word	0x0800ae21
 800ae14:	0800ae33 	.word	0x0800ae33
 800ae18:	0800ae43 	.word	0x0800ae43
 800ae1c:	0800ae53 	.word	0x0800ae53
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ae20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae24:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae2a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae30:	e017      	b.n	800ae62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800ae36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae3a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae40:	e00f      	b.n	800ae62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ae42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae46:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae50:	e007      	b.n	800ae62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800ae56:	2300      	movs	r3, #0
 800ae58:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800ae5e:	e000      	b.n	800ae62 <ethernet_link_thread+0xd2>
    default:
      break;
 800ae60:	bf00      	nop
    }

    if(linkchanged)
 800ae62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d018      	beq.n	800ae9a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ae68:	f107 0308 	add.w	r3, r7, #8
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	480e      	ldr	r0, [pc, #56]	@ (800aea8 <ethernet_link_thread+0x118>)
 800ae70:	f7f9 fcfe 	bl	8004870 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ae74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae76:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ae78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae7a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ae7c:	f107 0308 	add.w	r3, r7, #8
 800ae80:	4619      	mov	r1, r3
 800ae82:	4809      	ldr	r0, [pc, #36]	@ (800aea8 <ethernet_link_thread+0x118>)
 800ae84:	f7f9 fdde 	bl	8004a44 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800ae88:	4807      	ldr	r0, [pc, #28]	@ (800aea8 <ethernet_link_thread+0x118>)
 800ae8a:	f7f9 f829 	bl	8003ee0 <HAL_ETH_Start>
      netif_set_up(netif);
 800ae8e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae90:	f007 fa8a 	bl	80123a8 <netif_set_up>
      netif_set_link_up(netif);
 800ae94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ae96:	f007 fb25 	bl	80124e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ae9a:	2064      	movs	r0, #100	@ 0x64
 800ae9c:	f000 f910 	bl	800b0c0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aea0:	e78b      	b.n	800adba <ethernet_link_thread+0x2a>
 800aea2:	bf00      	nop
 800aea4:	20005334 	.word	0x20005334
 800aea8:	2000524c 	.word	0x2000524c

0800aeac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aeb4:	4812      	ldr	r0, [pc, #72]	@ (800af00 <HAL_ETH_RxAllocateCallback+0x54>)
 800aeb6:	f006 ffeb 	bl	8011e90 <memp_malloc_pool>
 800aeba:	60f8      	str	r0, [r7, #12]
  if (p)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d014      	beq.n	800aeec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f103 0220 	add.w	r2, r3, #32
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4a0d      	ldr	r2, [pc, #52]	@ (800af04 <HAL_ETH_RxAllocateCallback+0x58>)
 800aed0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800aeda:	9201      	str	r2, [sp, #4]
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2241      	movs	r2, #65	@ 0x41
 800aee2:	2100      	movs	r1, #0
 800aee4:	2000      	movs	r0, #0
 800aee6:	f007 fd55 	bl	8012994 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800aeea:	e005      	b.n	800aef8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800aeec:	4b06      	ldr	r3, [pc, #24]	@ (800af08 <HAL_ETH_RxAllocateCallback+0x5c>)
 800aeee:	2201      	movs	r2, #1
 800aef0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]
}
 800aef8:	bf00      	nop
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	08023218 	.word	0x08023218
 800af04:	0800ab25 	.word	0x0800ab25
 800af08:	20005240 	.word	0x20005240

0800af0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
 800af18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	3b20      	subs	r3, #32
 800af2a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2200      	movs	r2, #0
 800af36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	887a      	ldrh	r2, [r7, #2]
 800af3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d103      	bne.n	800af4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	69fa      	ldr	r2, [r7, #28]
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	e003      	b.n	800af56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	61fb      	str	r3, [r7, #28]
 800af62:	e009      	b.n	800af78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	891a      	ldrh	r2, [r3, #8]
 800af68:	887b      	ldrh	r3, [r7, #2]
 800af6a:	4413      	add	r3, r2
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	61fb      	str	r3, [r7, #28]
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f2      	bne.n	800af64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800af7e:	887b      	ldrh	r3, [r7, #2]
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff fb2e 	bl	800a5e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800af88:	bf00      	nop
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f007 feb5 	bl	8012d08 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	4603      	mov	r3, r0
 800afae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800afb0:	2300      	movs	r3, #0
 800afb2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800afb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800afb8:	2b84      	cmp	r3, #132	@ 0x84
 800afba:	d005      	beq.n	800afc8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800afbc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4413      	add	r3, r2
 800afc4:	3303      	adds	r3, #3
 800afc6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800afc8:	68fb      	ldr	r3, [r7, #12]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afdc:	f3ef 8305 	mrs	r3, IPSR
 800afe0:	607b      	str	r3, [r7, #4]
  return(result);
 800afe2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	bf14      	ite	ne
 800afe8:	2301      	movne	r3, #1
 800afea:	2300      	moveq	r3, #0
 800afec:	b2db      	uxtb	r3, r3
}
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800affe:	f001 fdad 	bl	800cb5c <vTaskStartScheduler>
  
  return osOK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	bd80      	pop	{r7, pc}

0800b008 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b00c:	f7ff ffe3 	bl	800afd6 <inHandlerMode>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b016:	f001 fecd 	bl	800cdb4 <xTaskGetTickCountFromISR>
 800b01a:	4603      	mov	r3, r0
 800b01c:	e002      	b.n	800b024 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b01e:	f001 feb9 	bl	800cd94 <xTaskGetTickCount>
 800b022:	4603      	mov	r3, r0
  }
}
 800b024:	4618      	mov	r0, r3
 800b026:	bd80      	pop	{r7, pc}

0800b028 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02a:	b089      	sub	sp, #36	@ 0x24
 800b02c:	af04      	add	r7, sp, #16
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d020      	beq.n	800b07c <osThreadCreate+0x54>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d01c      	beq.n	800b07c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685c      	ldr	r4, [r3, #4]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	691e      	ldr	r6, [r3, #16]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff ffa6 	bl	800afa6 <makeFreeRtosPriority>
 800b05a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	695b      	ldr	r3, [r3, #20]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b064:	9202      	str	r2, [sp, #8]
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	9100      	str	r1, [sp, #0]
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	4632      	mov	r2, r6
 800b06e:	4629      	mov	r1, r5
 800b070:	4620      	mov	r0, r4
 800b072:	f001 fb83 	bl	800c77c <xTaskCreateStatic>
 800b076:	4603      	mov	r3, r0
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e01c      	b.n	800b0b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685c      	ldr	r4, [r3, #4]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b088:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff ff88 	bl	800afa6 <makeFreeRtosPriority>
 800b096:	4602      	mov	r2, r0
 800b098:	f107 030c 	add.w	r3, r7, #12
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	9200      	str	r2, [sp, #0]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f001 fbce 	bl	800c848 <xTaskCreate>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d001      	beq.n	800b0b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e000      	b.n	800b0b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <osDelay+0x16>
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	e000      	b.n	800b0d8 <osDelay+0x18>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fd07 	bl	800caec <vTaskDelay>
  
  return osOK;
 800b0de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	2001      	movs	r0, #1
 800b100:	f000 fc99 	bl	800ba36 <xQueueCreateMutexStatic>
 800b104:	4603      	mov	r3, r0
 800b106:	e003      	b.n	800b110 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b108:	2001      	movs	r0, #1
 800b10a:	f000 fc7c 	bl	800ba06 <xQueueCreateMutex>
 800b10e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b110:	4618      	mov	r0, r3
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b122:	2300      	movs	r3, #0
 800b124:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d101      	bne.n	800b130 <osMutexWait+0x18>
    return osErrorParameter;
 800b12c:	2380      	movs	r3, #128	@ 0x80
 800b12e:	e03a      	b.n	800b1a6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d103      	bne.n	800b144 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b13c:	f04f 33ff 	mov.w	r3, #4294967295
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	e009      	b.n	800b158 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d006      	beq.n	800b158 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d101      	bne.n	800b158 <osMutexWait+0x40>
      ticks = 1;
 800b154:	2301      	movs	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b158:	f7ff ff3d 	bl	800afd6 <inHandlerMode>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d017      	beq.n	800b192 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b162:	f107 0308 	add.w	r3, r7, #8
 800b166:	461a      	mov	r2, r3
 800b168:	2100      	movs	r1, #0
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 f8c4 	bl	800c2f8 <xQueueReceiveFromISR>
 800b170:	4603      	mov	r3, r0
 800b172:	2b01      	cmp	r3, #1
 800b174:	d001      	beq.n	800b17a <osMutexWait+0x62>
      return osErrorOS;
 800b176:	23ff      	movs	r3, #255	@ 0xff
 800b178:	e015      	b.n	800b1a6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d011      	beq.n	800b1a4 <osMutexWait+0x8c>
 800b180:	4b0b      	ldr	r3, [pc, #44]	@ (800b1b0 <osMutexWait+0x98>)
 800b182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	e008      	b.n	800b1a4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b192:	68f9      	ldr	r1, [r7, #12]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 ff97 	bl	800c0c8 <xQueueSemaphoreTake>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d001      	beq.n	800b1a4 <osMutexWait+0x8c>
    return osErrorOS;
 800b1a0:	23ff      	movs	r3, #255	@ 0xff
 800b1a2:	e000      	b.n	800b1a6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	e000ed04 	.word	0xe000ed04

0800b1b4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b1c4:	f7ff ff07 	bl	800afd6 <inHandlerMode>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d016      	beq.n	800b1fc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 fdf6 	bl	800bdc6 <xQueueGiveFromISR>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d001      	beq.n	800b1e4 <osMutexRelease+0x30>
      return osErrorOS;
 800b1e0:	23ff      	movs	r3, #255	@ 0xff
 800b1e2:	e017      	b.n	800b214 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d013      	beq.n	800b212 <osMutexRelease+0x5e>
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b21c <osMutexRelease+0x68>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	e00a      	b.n	800b212 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	2100      	movs	r1, #0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fc32 	bl	800ba6c <xQueueGenericSend>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d001      	beq.n	800b212 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b20e:	23ff      	movs	r3, #255	@ 0xff
 800b210:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b212:	68fb      	ldr	r3, [r7, #12]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af02      	add	r7, sp, #8
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00f      	beq.n	800b252 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d10a      	bne.n	800b24e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	2203      	movs	r2, #3
 800b23e:	9200      	str	r2, [sp, #0]
 800b240:	2200      	movs	r2, #0
 800b242:	2100      	movs	r1, #0
 800b244:	2001      	movs	r0, #1
 800b246:	f000 fadb 	bl	800b800 <xQueueGenericCreateStatic>
 800b24a:	4603      	mov	r3, r0
 800b24c:	e016      	b.n	800b27c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	e014      	b.n	800b27c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d110      	bne.n	800b27a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b258:	2203      	movs	r2, #3
 800b25a:	2100      	movs	r1, #0
 800b25c:	2001      	movs	r0, #1
 800b25e:	f000 fb56 	bl	800b90e <xQueueGenericCreate>
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d005      	beq.n	800b276 <osSemaphoreCreate+0x56>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2200      	movs	r2, #0
 800b26e:	2100      	movs	r1, #0
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f000 fbfb 	bl	800ba6c <xQueueGenericSend>
      return sema;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	e000      	b.n	800b27c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b27a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b298:	2380      	movs	r3, #128	@ 0x80
 800b29a:	e03a      	b.n	800b312 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d103      	bne.n	800b2b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	e009      	b.n	800b2c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d006      	beq.n	800b2c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <osSemaphoreWait+0x40>
      ticks = 1;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b2c4:	f7ff fe87 	bl	800afd6 <inHandlerMode>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d017      	beq.n	800b2fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b2ce:	f107 0308 	add.w	r3, r7, #8
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f001 f80e 	bl	800c2f8 <xQueueReceiveFromISR>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d001      	beq.n	800b2e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b2e2:	23ff      	movs	r3, #255	@ 0xff
 800b2e4:	e015      	b.n	800b312 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d011      	beq.n	800b310 <osSemaphoreWait+0x8c>
 800b2ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b31c <osSemaphoreWait+0x98>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	e008      	b.n	800b310 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fee1 	bl	800c0c8 <xQueueSemaphoreTake>
 800b306:	4603      	mov	r3, r0
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d001      	beq.n	800b310 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b30c:	23ff      	movs	r3, #255	@ 0xff
 800b30e:	e000      	b.n	800b312 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	e000ed04 	.word	0xe000ed04

0800b320 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b330:	f7ff fe51 	bl	800afd6 <inHandlerMode>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d016      	beq.n	800b368 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b33a:	f107 0308 	add.w	r3, r7, #8
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fd40 	bl	800bdc6 <xQueueGiveFromISR>
 800b346:	4603      	mov	r3, r0
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d001      	beq.n	800b350 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b34c:	23ff      	movs	r3, #255	@ 0xff
 800b34e:	e017      	b.n	800b380 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d013      	beq.n	800b37e <osSemaphoreRelease+0x5e>
 800b356:	4b0c      	ldr	r3, [pc, #48]	@ (800b388 <osSemaphoreRelease+0x68>)
 800b358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
 800b366:	e00a      	b.n	800b37e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b368:	2300      	movs	r3, #0
 800b36a:	2200      	movs	r2, #0
 800b36c:	2100      	movs	r1, #0
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fb7c 	bl	800ba6c <xQueueGenericSend>
 800b374:	4603      	mov	r3, r0
 800b376:	2b01      	cmp	r3, #1
 800b378:	d001      	beq.n	800b37e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b37a:	23ff      	movs	r3, #255	@ 0xff
 800b37c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b37e:	68fb      	ldr	r3, [r7, #12]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b394:	f7ff fe1f 	bl	800afd6 <inHandlerMode>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b39e:	2382      	movs	r3, #130	@ 0x82
 800b3a0:	e003      	b.n	800b3aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 f872 	bl	800c48c <vQueueDelete>

  return osOK; 
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b3b2:	b590      	push	{r4, r7, lr}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	af02      	add	r7, sp, #8
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d011      	beq.n	800b3e8 <osMessageCreate+0x36>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00d      	beq.n	800b3e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6818      	ldr	r0, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6859      	ldr	r1, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	689a      	ldr	r2, [r3, #8]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	2400      	movs	r4, #0
 800b3de:	9400      	str	r4, [sp, #0]
 800b3e0:	f000 fa0e 	bl	800b800 <xQueueGenericCreateStatic>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	e008      	b.n	800b3fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	f000 fa8b 	bl	800b90e <xQueueGenericCreate>
 800b3f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd90      	pop	{r4, r7, pc}
	...

0800b404 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b410:	2300      	movs	r3, #0
 800b412:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <osMessagePut+0x1e>
    ticks = 1;
 800b41e:	2301      	movs	r3, #1
 800b420:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b422:	f7ff fdd8 	bl	800afd6 <inHandlerMode>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d018      	beq.n	800b45e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b42c:	f107 0210 	add.w	r2, r7, #16
 800b430:	f107 0108 	add.w	r1, r7, #8
 800b434:	2300      	movs	r3, #0
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 fc22 	bl	800bc80 <xQueueGenericSendFromISR>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d001      	beq.n	800b446 <osMessagePut+0x42>
      return osErrorOS;
 800b442:	23ff      	movs	r3, #255	@ 0xff
 800b444:	e018      	b.n	800b478 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d014      	beq.n	800b476 <osMessagePut+0x72>
 800b44c:	4b0c      	ldr	r3, [pc, #48]	@ (800b480 <osMessagePut+0x7c>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	e00b      	b.n	800b476 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b45e:	f107 0108 	add.w	r1, r7, #8
 800b462:	2300      	movs	r3, #0
 800b464:	697a      	ldr	r2, [r7, #20]
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f000 fb00 	bl	800ba6c <xQueueGenericSend>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d001      	beq.n	800b476 <osMessagePut+0x72>
      return osErrorOS;
 800b472:	23ff      	movs	r3, #255	@ 0xff
 800b474:	e000      	b.n	800b478 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	e000ed04 	.word	0xe000ed04

0800b484 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b484:	b590      	push	{r4, r7, lr}
 800b486:	b08b      	sub	sp, #44	@ 0x2c
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10a      	bne.n	800b4b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b49e:	2380      	movs	r3, #128	@ 0x80
 800b4a0:	617b      	str	r3, [r7, #20]
    return event;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	461c      	mov	r4, r3
 800b4a6:	f107 0314 	add.w	r3, r7, #20
 800b4aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4b2:	e054      	b.n	800b55e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d103      	bne.n	800b4cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ca:	e009      	b.n	800b4e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <osMessageGet+0x5c>
      ticks = 1;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b4e0:	f7ff fd79 	bl	800afd6 <inHandlerMode>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01c      	beq.n	800b524 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b4ea:	f107 0220 	add.w	r2, r7, #32
 800b4ee:	f107 0314 	add.w	r3, r7, #20
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	68b8      	ldr	r0, [r7, #8]
 800b4f8:	f000 fefe 	bl	800c2f8 <xQueueReceiveFromISR>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d102      	bne.n	800b508 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b502:	2310      	movs	r3, #16
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e001      	b.n	800b50c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b508:	2300      	movs	r3, #0
 800b50a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d01d      	beq.n	800b54e <osMessageGet+0xca>
 800b512:	4b15      	ldr	r3, [pc, #84]	@ (800b568 <osMessageGet+0xe4>)
 800b514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b518:	601a      	str	r2, [r3, #0]
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	e014      	b.n	800b54e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b524:	f107 0314 	add.w	r3, r7, #20
 800b528:	3304      	adds	r3, #4
 800b52a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b52c:	4619      	mov	r1, r3
 800b52e:	68b8      	ldr	r0, [r7, #8]
 800b530:	f000 fce2 	bl	800bef8 <xQueueReceive>
 800b534:	4603      	mov	r3, r0
 800b536:	2b01      	cmp	r3, #1
 800b538:	d102      	bne.n	800b540 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b53a:	2310      	movs	r3, #16
 800b53c:	617b      	str	r3, [r7, #20]
 800b53e:	e006      	b.n	800b54e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d101      	bne.n	800b54a <osMessageGet+0xc6>
 800b546:	2300      	movs	r3, #0
 800b548:	e000      	b.n	800b54c <osMessageGet+0xc8>
 800b54a:	2340      	movs	r3, #64	@ 0x40
 800b54c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	461c      	mov	r4, r3
 800b552:	f107 0314 	add.w	r3, r7, #20
 800b556:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b55a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	372c      	adds	r7, #44	@ 0x2c
 800b562:	46bd      	mov	sp, r7
 800b564:	bd90      	pop	{r4, r7, pc}
 800b566:	bf00      	nop
 800b568:	e000ed04 	.word	0xe000ed04

0800b56c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b574:	f7ff fd2f 	bl	800afd6 <inHandlerMode>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d004      	beq.n	800b588 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 ff63 	bl	800c44a <uxQueueMessagesWaitingFromISR>
 800b584:	4603      	mov	r3, r0
 800b586:	e003      	b.n	800b590 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 ff3d 	bl	800c408 <uxQueueMessagesWaiting>
 800b58e:	4603      	mov	r3, r0
  }
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b5a0:	f7ff fd19 	bl	800afd6 <inHandlerMode>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <osMessageDelete+0x16>
    return osErrorISR;
 800b5aa:	2382      	movs	r3, #130	@ 0x82
 800b5ac:	e003      	b.n	800b5b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 ff6c 	bl	800c48c <vQueueDelete>

  return osOK; 
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f103 0208 	add.w	r2, r3, #8
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f103 0208 	add.w	r2, r3, #8
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f103 0208 	add.w	r2, r3, #8
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5f2:	bf00      	nop
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	689b      	ldr	r3, [r3, #8]
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
}
 800b654:	bf00      	nop
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b676:	d103      	bne.n	800b680 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	60fb      	str	r3, [r7, #12]
 800b67e:	e00c      	b.n	800b69a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	3308      	adds	r3, #8
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	e002      	b.n	800b68e <vListInsert+0x2e>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	429a      	cmp	r2, r3
 800b698:	d2f6      	bcs.n	800b688 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	601a      	str	r2, [r3, #0]
}
 800b6c6:	bf00      	nop
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b085      	sub	sp, #20
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6892      	ldr	r2, [r2, #8]
 800b6e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	6852      	ldr	r2, [r2, #4]
 800b6f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d103      	bne.n	800b706 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
	...

0800b728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10d      	bne.n	800b758 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b740:	b672      	cpsid	i
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	b662      	cpsie	i
 800b750:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b752:	bf00      	nop
 800b754:	bf00      	nop
 800b756:	e7fd      	b.n	800b754 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b758:	f002 f9a8 	bl	800daac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b764:	68f9      	ldr	r1, [r7, #12]
 800b766:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b768:	fb01 f303 	mul.w	r3, r1, r3
 800b76c:	441a      	add	r2, r3
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b788:	3b01      	subs	r3, #1
 800b78a:	68f9      	ldr	r1, [r7, #12]
 800b78c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b78e:	fb01 f303 	mul.w	r3, r1, r3
 800b792:	441a      	add	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	22ff      	movs	r2, #255	@ 0xff
 800b79c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	22ff      	movs	r2, #255	@ 0xff
 800b7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d114      	bne.n	800b7d8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d01a      	beq.n	800b7ec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	3310      	adds	r3, #16
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f001 fc56 	bl	800d06c <xTaskRemoveFromEventList>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d012      	beq.n	800b7ec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7fc <xQueueGenericReset+0xd4>)
 800b7c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7cc:	601a      	str	r2, [r3, #0]
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	e009      	b.n	800b7ec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3310      	adds	r3, #16
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff feee 	bl	800b5be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3324      	adds	r3, #36	@ 0x24
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7ff fee9 	bl	800b5be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7ec:	f002 f994 	bl	800db18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7f0:	2301      	movs	r3, #1
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	e000ed04 	.word	0xe000ed04

0800b800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b800:	b580      	push	{r7, lr}
 800b802:	b08e      	sub	sp, #56	@ 0x38
 800b804:	af02      	add	r7, sp, #8
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
 800b80c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10d      	bne.n	800b830 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b818:	b672      	cpsid	i
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	b662      	cpsie	i
 800b828:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b82a:	bf00      	nop
 800b82c:	bf00      	nop
 800b82e:	e7fd      	b.n	800b82c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10d      	bne.n	800b852 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	b672      	cpsid	i
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	b662      	cpsie	i
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b84c:	bf00      	nop
 800b84e:	bf00      	nop
 800b850:	e7fd      	b.n	800b84e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <xQueueGenericCreateStatic+0x5e>
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d001      	beq.n	800b862 <xQueueGenericCreateStatic+0x62>
 800b85e:	2301      	movs	r3, #1
 800b860:	e000      	b.n	800b864 <xQueueGenericCreateStatic+0x64>
 800b862:	2300      	movs	r3, #0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d10d      	bne.n	800b884 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86c:	b672      	cpsid	i
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	b662      	cpsie	i
 800b87c:	623b      	str	r3, [r7, #32]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d102      	bne.n	800b890 <xQueueGenericCreateStatic+0x90>
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <xQueueGenericCreateStatic+0x94>
 800b890:	2301      	movs	r3, #1
 800b892:	e000      	b.n	800b896 <xQueueGenericCreateStatic+0x96>
 800b894:	2300      	movs	r3, #0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10d      	bne.n	800b8b6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b89a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89e:	b672      	cpsid	i
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	b662      	cpsie	i
 800b8ae:	61fb      	str	r3, [r7, #28]
}
 800b8b0:	bf00      	nop
 800b8b2:	bf00      	nop
 800b8b4:	e7fd      	b.n	800b8b2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8b6:	2348      	movs	r3, #72	@ 0x48
 800b8b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2b48      	cmp	r3, #72	@ 0x48
 800b8be:	d00d      	beq.n	800b8dc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c4:	b672      	cpsid	i
 800b8c6:	f383 8811 	msr	BASEPRI, r3
 800b8ca:	f3bf 8f6f 	isb	sy
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	b662      	cpsie	i
 800b8d4:	61bb      	str	r3, [r7, #24]
}
 800b8d6:	bf00      	nop
 800b8d8:	bf00      	nop
 800b8da:	e7fd      	b.n	800b8d8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00d      	beq.n	800b904 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	68b9      	ldr	r1, [r7, #8]
 800b8fe:	68f8      	ldr	r0, [r7, #12]
 800b900:	f000 f848 	bl	800b994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b906:	4618      	mov	r0, r3
 800b908:	3730      	adds	r7, #48	@ 0x30
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b08a      	sub	sp, #40	@ 0x28
 800b912:	af02      	add	r7, sp, #8
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	60b9      	str	r1, [r7, #8]
 800b918:	4613      	mov	r3, r2
 800b91a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <xQueueGenericCreate+0x30>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b926:	b672      	cpsid	i
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	b662      	cpsie	i
 800b936:	613b      	str	r3, [r7, #16]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b944:	2300      	movs	r3, #0
 800b946:	61fb      	str	r3, [r7, #28]
 800b948:	e004      	b.n	800b954 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	fb02 f303 	mul.w	r3, r2, r3
 800b952:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	3348      	adds	r3, #72	@ 0x48
 800b958:	4618      	mov	r0, r3
 800b95a:	f002 f9d5 	bl	800dd08 <pvPortMalloc>
 800b95e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d011      	beq.n	800b98a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	3348      	adds	r3, #72	@ 0x48
 800b96e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b978:	79fa      	ldrb	r2, [r7, #7]
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	4613      	mov	r3, r2
 800b980:	697a      	ldr	r2, [r7, #20]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f805 	bl	800b994 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b98a:	69bb      	ldr	r3, [r7, #24]
	}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3720      	adds	r7, #32
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d103      	bne.n	800b9b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9a8:	69bb      	ldr	r3, [r7, #24]
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	e002      	b.n	800b9b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9c2:	2101      	movs	r1, #1
 800b9c4:	69b8      	ldr	r0, [r7, #24]
 800b9c6:	f7ff feaf 	bl	800b728 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00e      	beq.n	800b9fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f837 	bl	800ba6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b086      	sub	sp, #24
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba10:	2301      	movs	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	2300      	movs	r3, #0
 800ba16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6939      	ldr	r1, [r7, #16]
 800ba1e:	6978      	ldr	r0, [r7, #20]
 800ba20:	f7ff ff75 	bl	800b90e <xQueueGenericCreate>
 800ba24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff ffd3 	bl	800b9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b088      	sub	sp, #32
 800ba3a:	af02      	add	r7, sp, #8
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	6039      	str	r1, [r7, #0]
 800ba40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba42:	2301      	movs	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	2300      	movs	r3, #0
 800ba48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba4a:	79fb      	ldrb	r3, [r7, #7]
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2200      	movs	r2, #0
 800ba52:	6939      	ldr	r1, [r7, #16]
 800ba54:	6978      	ldr	r0, [r7, #20]
 800ba56:	f7ff fed3 	bl	800b800 <xQueueGenericCreateStatic>
 800ba5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff ffb8 	bl	800b9d2 <prvInitialiseMutex>

		return xNewQueue;
 800ba62:	68fb      	ldr	r3, [r7, #12]
	}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08e      	sub	sp, #56	@ 0x38
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ba82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10d      	bne.n	800baa4 <xQueueGenericSend+0x38>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8c:	b672      	cpsid	i
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	b662      	cpsie	i
 800ba9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ba9e:	bf00      	nop
 800baa0:	bf00      	nop
 800baa2:	e7fd      	b.n	800baa0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d103      	bne.n	800bab2 <xQueueGenericSend+0x46>
 800baaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <xQueueGenericSend+0x4a>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e000      	b.n	800bab8 <xQueueGenericSend+0x4c>
 800bab6:	2300      	movs	r3, #0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10d      	bne.n	800bad8 <xQueueGenericSend+0x6c>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac0:	b672      	cpsid	i
 800bac2:	f383 8811 	msr	BASEPRI, r3
 800bac6:	f3bf 8f6f 	isb	sy
 800baca:	f3bf 8f4f 	dsb	sy
 800bace:	b662      	cpsie	i
 800bad0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bad2:	bf00      	nop
 800bad4:	bf00      	nop
 800bad6:	e7fd      	b.n	800bad4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSend+0x7a>
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <xQueueGenericSend+0x7e>
 800bae6:	2301      	movs	r3, #1
 800bae8:	e000      	b.n	800baec <xQueueGenericSend+0x80>
 800baea:	2300      	movs	r3, #0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10d      	bne.n	800bb0c <xQueueGenericSend+0xa0>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf4:	b672      	cpsid	i
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	b662      	cpsie	i
 800bb04:	623b      	str	r3, [r7, #32]
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	e7fd      	b.n	800bb08 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb0c:	f001 fc7c 	bl	800d408 <xTaskGetSchedulerState>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d102      	bne.n	800bb1c <xQueueGenericSend+0xb0>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <xQueueGenericSend+0xb4>
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e000      	b.n	800bb22 <xQueueGenericSend+0xb6>
 800bb20:	2300      	movs	r3, #0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10d      	bne.n	800bb42 <xQueueGenericSend+0xd6>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	b672      	cpsid	i
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	b662      	cpsie	i
 800bb3a:	61fb      	str	r3, [r7, #28]
}
 800bb3c:	bf00      	nop
 800bb3e:	bf00      	nop
 800bb40:	e7fd      	b.n	800bb3e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb42:	f001 ffb3 	bl	800daac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d302      	bcc.n	800bb58 <xQueueGenericSend+0xec>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d129      	bne.n	800bbac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb5e:	f000 fcd3 	bl	800c508 <prvCopyDataToQueue>
 800bb62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d010      	beq.n	800bb8e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6e:	3324      	adds	r3, #36	@ 0x24
 800bb70:	4618      	mov	r0, r3
 800bb72:	f001 fa7b 	bl	800d06c <xTaskRemoveFromEventList>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d013      	beq.n	800bba4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb7c:	4b3f      	ldr	r3, [pc, #252]	@ (800bc7c <xQueueGenericSend+0x210>)
 800bb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb82:	601a      	str	r2, [r3, #0]
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	e00a      	b.n	800bba4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb94:	4b39      	ldr	r3, [pc, #228]	@ (800bc7c <xQueueGenericSend+0x210>)
 800bb96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bba4:	f001 ffb8 	bl	800db18 <vPortExitCritical>
				return pdPASS;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e063      	b.n	800bc74 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d103      	bne.n	800bbba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbb2:	f001 ffb1 	bl	800db18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	e05c      	b.n	800bc74 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d106      	bne.n	800bbce <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbc0:	f107 0314 	add.w	r3, r7, #20
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f001 fab7 	bl	800d138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbce:	f001 ffa3 	bl	800db18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbd2:	f001 f831 	bl	800cc38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbd6:	f001 ff69 	bl	800daac <vPortEnterCritical>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbe0:	b25b      	sxtb	r3, r3
 800bbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbe6:	d103      	bne.n	800bbf0 <xQueueGenericSend+0x184>
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbf6:	b25b      	sxtb	r3, r3
 800bbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfc:	d103      	bne.n	800bc06 <xQueueGenericSend+0x19a>
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc06:	f001 ff87 	bl	800db18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc0a:	1d3a      	adds	r2, r7, #4
 800bc0c:	f107 0314 	add.w	r3, r7, #20
 800bc10:	4611      	mov	r1, r2
 800bc12:	4618      	mov	r0, r3
 800bc14:	f001 faa6 	bl	800d164 <xTaskCheckForTimeOut>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d124      	bne.n	800bc68 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc20:	f000 fd6a 	bl	800c6f8 <prvIsQueueFull>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d018      	beq.n	800bc5c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	3310      	adds	r3, #16
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 f9f2 	bl	800d01c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc3a:	f000 fcf5 	bl	800c628 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc3e:	f001 f809 	bl	800cc54 <xTaskResumeAll>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f47f af7c 	bne.w	800bb42 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bc4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc7c <xQueueGenericSend+0x210>)
 800bc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	e772      	b.n	800bb42 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc5e:	f000 fce3 	bl	800c628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc62:	f000 fff7 	bl	800cc54 <xTaskResumeAll>
 800bc66:	e76c      	b.n	800bb42 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc6a:	f000 fcdd 	bl	800c628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc6e:	f000 fff1 	bl	800cc54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3738      	adds	r7, #56	@ 0x38
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	e000ed04 	.word	0xe000ed04

0800bc80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08e      	sub	sp, #56	@ 0x38
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d10d      	bne.n	800bcb4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800bc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc9c:	b672      	cpsid	i
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	b662      	cpsie	i
 800bcac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bcae:	bf00      	nop
 800bcb0:	bf00      	nop
 800bcb2:	e7fd      	b.n	800bcb0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d103      	bne.n	800bcc2 <xQueueGenericSendFromISR+0x42>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <xQueueGenericSendFromISR+0x46>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <xQueueGenericSendFromISR+0x48>
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10d      	bne.n	800bce8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800bccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd0:	b672      	cpsid	i
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	b662      	cpsie	i
 800bce0:	623b      	str	r3, [r7, #32]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b02      	cmp	r3, #2
 800bcec:	d103      	bne.n	800bcf6 <xQueueGenericSendFromISR+0x76>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d101      	bne.n	800bcfa <xQueueGenericSendFromISR+0x7a>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e000      	b.n	800bcfc <xQueueGenericSendFromISR+0x7c>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10d      	bne.n	800bd1c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	b672      	cpsid	i
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	b662      	cpsie	i
 800bd14:	61fb      	str	r3, [r7, #28]
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd1c:	f001 ffae 	bl	800dc7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd20:	f3ef 8211 	mrs	r2, BASEPRI
 800bd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd28:	b672      	cpsid	i
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	b662      	cpsie	i
 800bd38:	61ba      	str	r2, [r7, #24]
 800bd3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d302      	bcc.n	800bd52 <xQueueGenericSendFromISR+0xd2>
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d12c      	bne.n	800bdac <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	68b9      	ldr	r1, [r7, #8]
 800bd60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd62:	f000 fbd1 	bl	800c508 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd66:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6e:	d112      	bne.n	800bd96 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d016      	beq.n	800bda6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7a:	3324      	adds	r3, #36	@ 0x24
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 f975 	bl	800d06c <xTaskRemoveFromEventList>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00e      	beq.n	800bda6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00b      	beq.n	800bda6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	e007      	b.n	800bda6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	b25a      	sxtb	r2, r3
 800bda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bda6:	2301      	movs	r3, #1
 800bda8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800bdaa:	e001      	b.n	800bdb0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3738      	adds	r7, #56	@ 0x38
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08e      	sub	sp, #56	@ 0x38
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
 800bdce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10d      	bne.n	800bdf6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdde:	b672      	cpsid	i
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	b662      	cpsie	i
 800bdee:	623b      	str	r3, [r7, #32]
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	e7fd      	b.n	800bdf2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00d      	beq.n	800be1a <xQueueGiveFromISR+0x54>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be02:	b672      	cpsid	i
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	b662      	cpsie	i
 800be12:	61fb      	str	r3, [r7, #28]
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	e7fd      	b.n	800be16 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <xQueueGiveFromISR+0x64>
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <xQueueGiveFromISR+0x68>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <xQueueGiveFromISR+0x6a>
 800be2e:	2300      	movs	r3, #0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10d      	bne.n	800be50 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	b672      	cpsid	i
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	b662      	cpsie	i
 800be48:	61bb      	str	r3, [r7, #24]
}
 800be4a:	bf00      	nop
 800be4c:	bf00      	nop
 800be4e:	e7fd      	b.n	800be4c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be50:	f001 ff14 	bl	800dc7c <vPortValidateInterruptPriority>
	__asm volatile
 800be54:	f3ef 8211 	mrs	r2, BASEPRI
 800be58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be5c:	b672      	cpsid	i
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	b662      	cpsie	i
 800be6c:	617a      	str	r2, [r7, #20]
 800be6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800be70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800be72:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be78:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800be7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be80:	429a      	cmp	r2, r3
 800be82:	d22b      	bcs.n	800bedc <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800be9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be9e:	d112      	bne.n	800bec6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d016      	beq.n	800bed6 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beaa:	3324      	adds	r3, #36	@ 0x24
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f8dd 	bl	800d06c <xTaskRemoveFromEventList>
 800beb2:	4603      	mov	r3, r0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00e      	beq.n	800bed6 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00b      	beq.n	800bed6 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	2201      	movs	r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e007      	b.n	800bed6 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800beca:	3301      	adds	r3, #1
 800becc:	b2db      	uxtb	r3, r3
 800bece:	b25a      	sxtb	r2, r3
 800bed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bed6:	2301      	movs	r3, #1
 800bed8:	637b      	str	r3, [r7, #52]	@ 0x34
 800beda:	e001      	b.n	800bee0 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	637b      	str	r3, [r7, #52]	@ 0x34
 800bee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f383 8811 	msr	BASEPRI, r3
}
 800beea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800beec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3738      	adds	r7, #56	@ 0x38
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
	...

0800bef8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b08c      	sub	sp, #48	@ 0x30
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf04:	2300      	movs	r3, #0
 800bf06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10d      	bne.n	800bf2e <xQueueReceive+0x36>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	b672      	cpsid	i
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	b662      	cpsie	i
 800bf26:	623b      	str	r3, [r7, #32]
}
 800bf28:	bf00      	nop
 800bf2a:	bf00      	nop
 800bf2c:	e7fd      	b.n	800bf2a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <xQueueReceive+0x44>
 800bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <xQueueReceive+0x48>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e000      	b.n	800bf42 <xQueueReceive+0x4a>
 800bf40:	2300      	movs	r3, #0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10d      	bne.n	800bf62 <xQueueReceive+0x6a>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	b672      	cpsid	i
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	b662      	cpsie	i
 800bf5a:	61fb      	str	r3, [r7, #28]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf62:	f001 fa51 	bl	800d408 <xTaskGetSchedulerState>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d102      	bne.n	800bf72 <xQueueReceive+0x7a>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <xQueueReceive+0x7e>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <xQueueReceive+0x80>
 800bf76:	2300      	movs	r3, #0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10d      	bne.n	800bf98 <xQueueReceive+0xa0>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf80:	b672      	cpsid	i
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	b662      	cpsie	i
 800bf90:	61bb      	str	r3, [r7, #24]
}
 800bf92:	bf00      	nop
 800bf94:	bf00      	nop
 800bf96:	e7fd      	b.n	800bf94 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf98:	f001 fd88 	bl	800daac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfac:	f000 fb16 	bl	800c5dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00f      	beq.n	800bfe0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc2:	3310      	adds	r3, #16
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f001 f851 	bl	800d06c <xTaskRemoveFromEventList>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d007      	beq.n	800bfe0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfd0:	4b3c      	ldr	r3, [pc, #240]	@ (800c0c4 <xQueueReceive+0x1cc>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfe0:	f001 fd9a 	bl	800db18 <vPortExitCritical>
				return pdPASS;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e069      	b.n	800c0bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d103      	bne.n	800bff6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfee:	f001 fd93 	bl	800db18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bff2:	2300      	movs	r3, #0
 800bff4:	e062      	b.n	800c0bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bffc:	f107 0310 	add.w	r3, r7, #16
 800c000:	4618      	mov	r0, r3
 800c002:	f001 f899 	bl	800d138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c006:	2301      	movs	r3, #1
 800c008:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c00a:	f001 fd85 	bl	800db18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c00e:	f000 fe13 	bl	800cc38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c012:	f001 fd4b 	bl	800daac <vPortEnterCritical>
 800c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c01c:	b25b      	sxtb	r3, r3
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c022:	d103      	bne.n	800c02c <xQueueReceive+0x134>
 800c024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c032:	b25b      	sxtb	r3, r3
 800c034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c038:	d103      	bne.n	800c042 <xQueueReceive+0x14a>
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c042:	f001 fd69 	bl	800db18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c046:	1d3a      	adds	r2, r7, #4
 800c048:	f107 0310 	add.w	r3, r7, #16
 800c04c:	4611      	mov	r1, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f001 f888 	bl	800d164 <xTaskCheckForTimeOut>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d123      	bne.n	800c0a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c05a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c05c:	f000 fb36 	bl	800c6cc <prvIsQueueEmpty>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d017      	beq.n	800c096 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	3324      	adds	r3, #36	@ 0x24
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4611      	mov	r1, r2
 800c06e:	4618      	mov	r0, r3
 800c070:	f000 ffd4 	bl	800d01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c076:	f000 fad7 	bl	800c628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c07a:	f000 fdeb 	bl	800cc54 <xTaskResumeAll>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d189      	bne.n	800bf98 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c084:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c4 <xQueueReceive+0x1cc>)
 800c086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	f3bf 8f6f 	isb	sy
 800c094:	e780      	b.n	800bf98 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c096:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c098:	f000 fac6 	bl	800c628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c09c:	f000 fdda 	bl	800cc54 <xTaskResumeAll>
 800c0a0:	e77a      	b.n	800bf98 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c0a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a4:	f000 fac0 	bl	800c628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0a8:	f000 fdd4 	bl	800cc54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0ae:	f000 fb0d 	bl	800c6cc <prvIsQueueEmpty>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	f43f af6f 	beq.w	800bf98 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3730      	adds	r7, #48	@ 0x30
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08e      	sub	sp, #56	@ 0x38
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10d      	bne.n	800c100 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e8:	b672      	cpsid	i
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	b662      	cpsie	i
 800c0f8:	623b      	str	r3, [r7, #32]
}
 800c0fa:	bf00      	nop
 800c0fc:	bf00      	nop
 800c0fe:	e7fd      	b.n	800c0fc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00d      	beq.n	800c124 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	b672      	cpsid	i
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	b662      	cpsie	i
 800c11c:	61fb      	str	r3, [r7, #28]
}
 800c11e:	bf00      	nop
 800c120:	bf00      	nop
 800c122:	e7fd      	b.n	800c120 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c124:	f001 f970 	bl	800d408 <xTaskGetSchedulerState>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d102      	bne.n	800c134 <xQueueSemaphoreTake+0x6c>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <xQueueSemaphoreTake+0x70>
 800c134:	2301      	movs	r3, #1
 800c136:	e000      	b.n	800c13a <xQueueSemaphoreTake+0x72>
 800c138:	2300      	movs	r3, #0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d10d      	bne.n	800c15a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c142:	b672      	cpsid	i
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	b662      	cpsie	i
 800c152:	61bb      	str	r3, [r7, #24]
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop
 800c158:	e7fd      	b.n	800c156 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c15a:	f001 fca7 	bl	800daac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c162:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c166:	2b00      	cmp	r3, #0
 800c168:	d024      	beq.n	800c1b4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	1e5a      	subs	r2, r3, #1
 800c16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c170:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d104      	bne.n	800c184 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c17a:	f001 fb0f 	bl	800d79c <pvTaskIncrementMutexHeldCount>
 800c17e:	4602      	mov	r2, r0
 800c180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c182:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00f      	beq.n	800c1ac <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c18e:	3310      	adds	r3, #16
 800c190:	4618      	mov	r0, r3
 800c192:	f000 ff6b 	bl	800d06c <xTaskRemoveFromEventList>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c19c:	4b55      	ldr	r3, [pc, #340]	@ (800c2f4 <xQueueSemaphoreTake+0x22c>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1ac:	f001 fcb4 	bl	800db18 <vPortExitCritical>
				return pdPASS;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e09a      	b.n	800c2ea <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d114      	bne.n	800c1e4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00d      	beq.n	800c1dc <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	b672      	cpsid	i
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	b662      	cpsie	i
 800c1d4:	617b      	str	r3, [r7, #20]
}
 800c1d6:	bf00      	nop
 800c1d8:	bf00      	nop
 800c1da:	e7fd      	b.n	800c1d8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c1dc:	f001 fc9c 	bl	800db18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	e082      	b.n	800c2ea <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d106      	bne.n	800c1f8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 ffa2 	bl	800d138 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1f8:	f001 fc8e 	bl	800db18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1fc:	f000 fd1c 	bl	800cc38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c200:	f001 fc54 	bl	800daac <vPortEnterCritical>
 800c204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c206:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c20a:	b25b      	sxtb	r3, r3
 800c20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c210:	d103      	bne.n	800c21a <xQueueSemaphoreTake+0x152>
 800c212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c21c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c220:	b25b      	sxtb	r3, r3
 800c222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c226:	d103      	bne.n	800c230 <xQueueSemaphoreTake+0x168>
 800c228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c230:	f001 fc72 	bl	800db18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c234:	463a      	mov	r2, r7
 800c236:	f107 030c 	add.w	r3, r7, #12
 800c23a:	4611      	mov	r1, r2
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 ff91 	bl	800d164 <xTaskCheckForTimeOut>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d132      	bne.n	800c2ae <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c24a:	f000 fa3f 	bl	800c6cc <prvIsQueueEmpty>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	d026      	beq.n	800c2a2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d109      	bne.n	800c270 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c25c:	f001 fc26 	bl	800daac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	4618      	mov	r0, r3
 800c266:	f001 f8ed 	bl	800d444 <xTaskPriorityInherit>
 800c26a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c26c:	f001 fc54 	bl	800db18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c272:	3324      	adds	r3, #36	@ 0x24
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fecf 	bl	800d01c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c27e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c280:	f000 f9d2 	bl	800c628 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c284:	f000 fce6 	bl	800cc54 <xTaskResumeAll>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f47f af65 	bne.w	800c15a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c290:	4b18      	ldr	r3, [pc, #96]	@ (800c2f4 <xQueueSemaphoreTake+0x22c>)
 800c292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	e75b      	b.n	800c15a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c2a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2a4:	f000 f9c0 	bl	800c628 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2a8:	f000 fcd4 	bl	800cc54 <xTaskResumeAll>
 800c2ac:	e755      	b.n	800c15a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c2ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2b0:	f000 f9ba 	bl	800c628 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2b4:	f000 fcce 	bl	800cc54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2ba:	f000 fa07 	bl	800c6cc <prvIsQueueEmpty>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f43f af4a 	beq.w	800c15a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00d      	beq.n	800c2e8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c2cc:	f001 fbee 	bl	800daac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c2d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2d2:	f000 f901 	bl	800c4d8 <prvGetDisinheritPriorityAfterTimeout>
 800c2d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 f9bc 	bl	800d65c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c2e4:	f001 fc18 	bl	800db18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3738      	adds	r7, #56	@ 0x38
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	e000ed04 	.word	0xe000ed04

0800c2f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b08e      	sub	sp, #56	@ 0x38
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10d      	bne.n	800c32a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	b672      	cpsid	i
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	b662      	cpsie	i
 800c322:	623b      	str	r3, [r7, #32]
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop
 800c328:	e7fd      	b.n	800c326 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <xQueueReceiveFromISR+0x40>
 800c330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c334:	2b00      	cmp	r3, #0
 800c336:	d101      	bne.n	800c33c <xQueueReceiveFromISR+0x44>
 800c338:	2301      	movs	r3, #1
 800c33a:	e000      	b.n	800c33e <xQueueReceiveFromISR+0x46>
 800c33c:	2300      	movs	r3, #0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10d      	bne.n	800c35e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	b672      	cpsid	i
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	b662      	cpsie	i
 800c356:	61fb      	str	r3, [r7, #28]
}
 800c358:	bf00      	nop
 800c35a:	bf00      	nop
 800c35c:	e7fd      	b.n	800c35a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c35e:	f001 fc8d 	bl	800dc7c <vPortValidateInterruptPriority>
	__asm volatile
 800c362:	f3ef 8211 	mrs	r2, BASEPRI
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	b672      	cpsid	i
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	b662      	cpsie	i
 800c37a:	61ba      	str	r2, [r7, #24]
 800c37c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c37e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c380:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c386:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d02f      	beq.n	800c3ee <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c39c:	f000 f91e 	bl	800c5dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a2:	1e5a      	subs	r2, r3, #1
 800c3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c3a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b0:	d112      	bne.n	800c3d8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d016      	beq.n	800c3e8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	3310      	adds	r3, #16
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fe54 	bl	800d06c <xTaskRemoveFromEventList>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00e      	beq.n	800c3e8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	601a      	str	r2, [r3, #0]
 800c3d6:	e007      	b.n	800c3e8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3dc:	3301      	adds	r3, #1
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	b25a      	sxtb	r2, r3
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3ec:	e001      	b.n	800c3f2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	f383 8811 	msr	BASEPRI, r3
}
 800c3fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c400:	4618      	mov	r0, r3
 800c402:	3738      	adds	r7, #56	@ 0x38
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10d      	bne.n	800c432 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	b672      	cpsid	i
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	b662      	cpsie	i
 800c42a:	60bb      	str	r3, [r7, #8]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800c432:	f001 fb3b 	bl	800daac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c43a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c43c:	f001 fb6c 	bl	800db18 <vPortExitCritical>

	return uxReturn;
 800c440:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c44a:	b480      	push	{r7}
 800c44c:	b087      	sub	sp, #28
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10d      	bne.n	800c478 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800c45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c460:	b672      	cpsid	i
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	b662      	cpsie	i
 800c470:	60fb      	str	r3, [r7, #12]
}
 800c472:	bf00      	nop
 800c474:	bf00      	nop
 800c476:	e7fd      	b.n	800c474 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c47c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c47e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c480:	4618      	mov	r0, r3
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10d      	bne.n	800c4ba <vQueueDelete+0x2e>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	b672      	cpsid	i
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	b662      	cpsie	i
 800c4b2:	60bb      	str	r3, [r7, #8]
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop
 800c4b8:	e7fd      	b.n	800c4b6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f000 f934 	bl	800c728 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f001 fcea 	bl	800dea4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c4d0:	bf00      	nop
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f1c3 0307 	rsb	r3, r3, #7
 800c4f2:	60fb      	str	r3, [r7, #12]
 800c4f4:	e001      	b.n	800c4fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10d      	bne.n	800c542 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d14d      	bne.n	800c5ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	4618      	mov	r0, r3
 800c534:	f001 f806 	bl	800d544 <xTaskPriorityDisinherit>
 800c538:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	609a      	str	r2, [r3, #8]
 800c540:	e043      	b.n	800c5ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d119      	bne.n	800c57c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6858      	ldr	r0, [r3, #4]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c550:	461a      	mov	r2, r3
 800c552:	68b9      	ldr	r1, [r7, #8]
 800c554:	f011 f925 	bl	801d7a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c560:	441a      	add	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685a      	ldr	r2, [r3, #4]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d32b      	bcc.n	800c5ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	e026      	b.n	800c5ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	68d8      	ldr	r0, [r3, #12]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c584:	461a      	mov	r2, r3
 800c586:	68b9      	ldr	r1, [r7, #8]
 800c588:	f011 f90b 	bl	801d7a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68da      	ldr	r2, [r3, #12]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c594:	425b      	negs	r3, r3
 800c596:	441a      	add	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d207      	bcs.n	800c5b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	689a      	ldr	r2, [r3, #8]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	425b      	negs	r3, r3
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d105      	bne.n	800c5ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c5d2:	697b      	ldr	r3, [r7, #20]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d018      	beq.n	800c620 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f6:	441a      	add	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	429a      	cmp	r2, r3
 800c606:	d303      	bcc.n	800c610 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68d9      	ldr	r1, [r3, #12]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c618:	461a      	mov	r2, r3
 800c61a:	6838      	ldr	r0, [r7, #0]
 800c61c:	f011 f8c1 	bl	801d7a2 <memcpy>
	}
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c630:	f001 fa3c 	bl	800daac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c63a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c63c:	e011      	b.n	800c662 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c642:	2b00      	cmp	r3, #0
 800c644:	d012      	beq.n	800c66c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	3324      	adds	r3, #36	@ 0x24
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fd0e 	bl	800d06c <xTaskRemoveFromEventList>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d001      	beq.n	800c65a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c656:	f000 fded 	bl	800d234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
 800c65c:	3b01      	subs	r3, #1
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c666:	2b00      	cmp	r3, #0
 800c668:	dce9      	bgt.n	800c63e <prvUnlockQueue+0x16>
 800c66a:	e000      	b.n	800c66e <prvUnlockQueue+0x46>
					break;
 800c66c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	22ff      	movs	r2, #255	@ 0xff
 800c672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c676:	f001 fa4f 	bl	800db18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c67a:	f001 fa17 	bl	800daac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c684:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c686:	e011      	b.n	800c6ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	691b      	ldr	r3, [r3, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d012      	beq.n	800c6b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	3310      	adds	r3, #16
 800c694:	4618      	mov	r0, r3
 800c696:	f000 fce9 	bl	800d06c <xTaskRemoveFromEventList>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d001      	beq.n	800c6a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6a0:	f000 fdc8 	bl	800d234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	dce9      	bgt.n	800c688 <prvUnlockQueue+0x60>
 800c6b4:	e000      	b.n	800c6b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	22ff      	movs	r2, #255	@ 0xff
 800c6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c6c0:	f001 fa2a 	bl	800db18 <vPortExitCritical>
}
 800c6c4:	bf00      	nop
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6d4:	f001 f9ea 	bl	800daac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	60fb      	str	r3, [r7, #12]
 800c6e4:	e001      	b.n	800c6ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6ea:	f001 fa15 	bl	800db18 <vPortExitCritical>

	return xReturn;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c700:	f001 f9d4 	bl	800daac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d102      	bne.n	800c716 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c710:	2301      	movs	r3, #1
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e001      	b.n	800c71a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c71a:	f001 f9fd 	bl	800db18 <vPortExitCritical>

	return xReturn;
 800c71e:	68fb      	ldr	r3, [r7, #12]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c730:	2300      	movs	r3, #0
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e016      	b.n	800c764 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c736:	4a10      	ldr	r2, [pc, #64]	@ (800c778 <vQueueUnregisterQueue+0x50>)
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	4413      	add	r3, r2
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	429a      	cmp	r2, r3
 800c744:	d10b      	bne.n	800c75e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c746:	4a0c      	ldr	r2, [pc, #48]	@ (800c778 <vQueueUnregisterQueue+0x50>)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2100      	movs	r1, #0
 800c74c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c750:	4a09      	ldr	r2, [pc, #36]	@ (800c778 <vQueueUnregisterQueue+0x50>)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	00db      	lsls	r3, r3, #3
 800c756:	4413      	add	r3, r2
 800c758:	2200      	movs	r2, #0
 800c75a:	605a      	str	r2, [r3, #4]
				break;
 800c75c:	e006      	b.n	800c76c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b07      	cmp	r3, #7
 800c768:	d9e5      	bls.n	800c736 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c76a:	bf00      	nop
 800c76c:	bf00      	nop
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	20005354 	.word	0x20005354

0800c77c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08e      	sub	sp, #56	@ 0x38
 800c780:	af04      	add	r7, sp, #16
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	607a      	str	r2, [r7, #4]
 800c788:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10d      	bne.n	800c7ac <xTaskCreateStatic+0x30>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c794:	b672      	cpsid	i
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	b662      	cpsie	i
 800c7a4:	623b      	str	r3, [r7, #32]
}
 800c7a6:	bf00      	nop
 800c7a8:	bf00      	nop
 800c7aa:	e7fd      	b.n	800c7a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10d      	bne.n	800c7ce <xTaskCreateStatic+0x52>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b6:	b672      	cpsid	i
 800c7b8:	f383 8811 	msr	BASEPRI, r3
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	b662      	cpsie	i
 800c7c6:	61fb      	str	r3, [r7, #28]
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	e7fd      	b.n	800c7ca <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7ce:	23a0      	movs	r3, #160	@ 0xa0
 800c7d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	2ba0      	cmp	r3, #160	@ 0xa0
 800c7d6:	d00d      	beq.n	800c7f4 <xTaskCreateStatic+0x78>
	__asm volatile
 800c7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7dc:	b672      	cpsid	i
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	b662      	cpsie	i
 800c7ec:	61bb      	str	r3, [r7, #24]
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	e7fd      	b.n	800c7f0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d01e      	beq.n	800c83a <xTaskCreateStatic+0xbe>
 800c7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d01b      	beq.n	800c83a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c804:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c80a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	2202      	movs	r2, #2
 800c810:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c814:	2300      	movs	r3, #0
 800c816:	9303      	str	r3, [sp, #12]
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	f107 0314 	add.w	r3, r7, #20
 800c820:	9301      	str	r3, [sp, #4]
 800c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f851 	bl	800c8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c832:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c834:	f000 f8f0 	bl	800ca18 <prvAddNewTaskToReadyList>
 800c838:	e001      	b.n	800c83e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c83e:	697b      	ldr	r3, [r7, #20]
	}
 800c840:	4618      	mov	r0, r3
 800c842:	3728      	adds	r7, #40	@ 0x28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08c      	sub	sp, #48	@ 0x30
 800c84c:	af04      	add	r7, sp, #16
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	603b      	str	r3, [r7, #0]
 800c854:	4613      	mov	r3, r2
 800c856:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c858:	88fb      	ldrh	r3, [r7, #6]
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 fa53 	bl	800dd08 <pvPortMalloc>
 800c862:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00e      	beq.n	800c888 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c86a:	20a0      	movs	r0, #160	@ 0xa0
 800c86c:	f001 fa4c 	bl	800dd08 <pvPortMalloc>
 800c870:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c87e:	e005      	b.n	800c88c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c880:	6978      	ldr	r0, [r7, #20]
 800c882:	f001 fb0f 	bl	800dea4 <vPortFree>
 800c886:	e001      	b.n	800c88c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d017      	beq.n	800c8c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c89a:	88fa      	ldrh	r2, [r7, #6]
 800c89c:	2300      	movs	r3, #0
 800c89e:	9303      	str	r3, [sp, #12]
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	9302      	str	r3, [sp, #8]
 800c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f000 f80f 	bl	800c8d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8b6:	69f8      	ldr	r0, [r7, #28]
 800c8b8:	f000 f8ae 	bl	800ca18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	61bb      	str	r3, [r7, #24]
 800c8c0:	e002      	b.n	800c8c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c8c8:	69bb      	ldr	r3, [r7, #24]
	}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8e6:	6879      	ldr	r1, [r7, #4]
 800c8e8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c8ec:	440b      	add	r3, r1
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	f023 0307 	bic.w	r3, r3, #7
 800c8fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	f003 0307 	and.w	r3, r3, #7
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00d      	beq.n	800c922 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	b672      	cpsid	i
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	b662      	cpsie	i
 800c91a:	617b      	str	r3, [r7, #20]
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	e7fd      	b.n	800c91e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01f      	beq.n	800c968 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c928:	2300      	movs	r3, #0
 800c92a:	61fb      	str	r3, [r7, #28]
 800c92c:	e012      	b.n	800c954 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	4413      	add	r3, r2
 800c934:	7819      	ldrb	r1, [r3, #0]
 800c936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	4413      	add	r3, r2
 800c93c:	3334      	adds	r3, #52	@ 0x34
 800c93e:	460a      	mov	r2, r1
 800c940:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	4413      	add	r3, r2
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d006      	beq.n	800c95c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	3301      	adds	r3, #1
 800c952:	61fb      	str	r3, [r7, #28]
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b0f      	cmp	r3, #15
 800c958:	d9e9      	bls.n	800c92e <prvInitialiseNewTask+0x5a>
 800c95a:	e000      	b.n	800c95e <prvInitialiseNewTask+0x8a>
			{
				break;
 800c95c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c960:	2200      	movs	r2, #0
 800c962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c966:	e003      	b.n	800c970 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c972:	2b06      	cmp	r3, #6
 800c974:	d901      	bls.n	800c97a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c976:	2306      	movs	r3, #6
 800c978:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c97e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c984:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c988:	2200      	movs	r2, #0
 800c98a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c98e:	3304      	adds	r3, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fe34 	bl	800b5fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c998:	3318      	adds	r3, #24
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fe fe2f 	bl	800b5fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a8:	f1c3 0207 	rsb	r2, r3, #7
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	334c      	adds	r3, #76	@ 0x4c
 800c9ca:	224c      	movs	r2, #76	@ 0x4c
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f010 fdf9 	bl	801d5c6 <memset>
 800c9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d6:	4a0d      	ldr	r2, [pc, #52]	@ (800ca0c <prvInitialiseNewTask+0x138>)
 800c9d8:	651a      	str	r2, [r3, #80]	@ 0x50
 800c9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9dc:	4a0c      	ldr	r2, [pc, #48]	@ (800ca10 <prvInitialiseNewTask+0x13c>)
 800c9de:	655a      	str	r2, [r3, #84]	@ 0x54
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e2:	4a0c      	ldr	r2, [pc, #48]	@ (800ca14 <prvInitialiseNewTask+0x140>)
 800c9e4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	68f9      	ldr	r1, [r7, #12]
 800c9ea:	69b8      	ldr	r0, [r7, #24]
 800c9ec:	f000 ff50 	bl	800d890 <pxPortInitialiseStack>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca02:	bf00      	nop
 800ca04:	3720      	adds	r7, #32
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	2000f4f4 	.word	0x2000f4f4
 800ca10:	2000f55c 	.word	0x2000f55c
 800ca14:	2000f5c4 	.word	0x2000f5c4

0800ca18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca20:	f001 f844 	bl	800daac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca24:	4b2a      	ldr	r3, [pc, #168]	@ (800cad0 <prvAddNewTaskToReadyList+0xb8>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	4a29      	ldr	r2, [pc, #164]	@ (800cad0 <prvAddNewTaskToReadyList+0xb8>)
 800ca2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca2e:	4b29      	ldr	r3, [pc, #164]	@ (800cad4 <prvAddNewTaskToReadyList+0xbc>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d109      	bne.n	800ca4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca36:	4a27      	ldr	r2, [pc, #156]	@ (800cad4 <prvAddNewTaskToReadyList+0xbc>)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca3c:	4b24      	ldr	r3, [pc, #144]	@ (800cad0 <prvAddNewTaskToReadyList+0xb8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d110      	bne.n	800ca66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca44:	f000 fc1a 	bl	800d27c <prvInitialiseTaskLists>
 800ca48:	e00d      	b.n	800ca66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca4a:	4b23      	ldr	r3, [pc, #140]	@ (800cad8 <prvAddNewTaskToReadyList+0xc0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d109      	bne.n	800ca66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca52:	4b20      	ldr	r3, [pc, #128]	@ (800cad4 <prvAddNewTaskToReadyList+0xbc>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d802      	bhi.n	800ca66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca60:	4a1c      	ldr	r2, [pc, #112]	@ (800cad4 <prvAddNewTaskToReadyList+0xbc>)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca66:	4b1d      	ldr	r3, [pc, #116]	@ (800cadc <prvAddNewTaskToReadyList+0xc4>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	4a1b      	ldr	r2, [pc, #108]	@ (800cadc <prvAddNewTaskToReadyList+0xc4>)
 800ca6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca74:	2201      	movs	r2, #1
 800ca76:	409a      	lsls	r2, r3
 800ca78:	4b19      	ldr	r3, [pc, #100]	@ (800cae0 <prvAddNewTaskToReadyList+0xc8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	4a18      	ldr	r2, [pc, #96]	@ (800cae0 <prvAddNewTaskToReadyList+0xc8>)
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca86:	4613      	mov	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4a15      	ldr	r2, [pc, #84]	@ (800cae4 <prvAddNewTaskToReadyList+0xcc>)
 800ca90:	441a      	add	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3304      	adds	r3, #4
 800ca96:	4619      	mov	r1, r3
 800ca98:	4610      	mov	r0, r2
 800ca9a:	f7fe fdbd 	bl	800b618 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca9e:	f001 f83b 	bl	800db18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800caa2:	4b0d      	ldr	r3, [pc, #52]	@ (800cad8 <prvAddNewTaskToReadyList+0xc0>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00e      	beq.n	800cac8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800caaa:	4b0a      	ldr	r3, [pc, #40]	@ (800cad4 <prvAddNewTaskToReadyList+0xbc>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d207      	bcs.n	800cac8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cab8:	4b0b      	ldr	r3, [pc, #44]	@ (800cae8 <prvAddNewTaskToReadyList+0xd0>)
 800caba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20005494 	.word	0x20005494
 800cad4:	20005394 	.word	0x20005394
 800cad8:	200054a0 	.word	0x200054a0
 800cadc:	200054b0 	.word	0x200054b0
 800cae0:	2000549c 	.word	0x2000549c
 800cae4:	20005398 	.word	0x20005398
 800cae8:	e000ed04 	.word	0xe000ed04

0800caec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01a      	beq.n	800cb34 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cafe:	4b15      	ldr	r3, [pc, #84]	@ (800cb54 <vTaskDelay+0x68>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00d      	beq.n	800cb22 <vTaskDelay+0x36>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0a:	b672      	cpsid	i
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	b662      	cpsie	i
 800cb1a:	60bb      	str	r3, [r7, #8]
}
 800cb1c:	bf00      	nop
 800cb1e:	bf00      	nop
 800cb20:	e7fd      	b.n	800cb1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cb22:	f000 f889 	bl	800cc38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb26:	2100      	movs	r1, #0
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fe4b 	bl	800d7c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb2e:	f000 f891 	bl	800cc54 <xTaskResumeAll>
 800cb32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d107      	bne.n	800cb4a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800cb3a:	4b07      	ldr	r3, [pc, #28]	@ (800cb58 <vTaskDelay+0x6c>)
 800cb3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb40:	601a      	str	r2, [r3, #0]
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb4a:	bf00      	nop
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200054bc 	.word	0x200054bc
 800cb58:	e000ed04 	.word	0xe000ed04

0800cb5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	@ 0x28
 800cb60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb66:	2300      	movs	r3, #0
 800cb68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	1d39      	adds	r1, r7, #4
 800cb6e:	f107 0308 	add.w	r3, r7, #8
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f5 fb02 	bl	800217c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb78:	6839      	ldr	r1, [r7, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	9202      	str	r2, [sp, #8]
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	2300      	movs	r3, #0
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	2300      	movs	r3, #0
 800cb88:	460a      	mov	r2, r1
 800cb8a:	4923      	ldr	r1, [pc, #140]	@ (800cc18 <vTaskStartScheduler+0xbc>)
 800cb8c:	4823      	ldr	r0, [pc, #140]	@ (800cc1c <vTaskStartScheduler+0xc0>)
 800cb8e:	f7ff fdf5 	bl	800c77c <xTaskCreateStatic>
 800cb92:	4603      	mov	r3, r0
 800cb94:	4a22      	ldr	r2, [pc, #136]	@ (800cc20 <vTaskStartScheduler+0xc4>)
 800cb96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb98:	4b21      	ldr	r3, [pc, #132]	@ (800cc20 <vTaskStartScheduler+0xc4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cba0:	2301      	movs	r3, #1
 800cba2:	617b      	str	r3, [r7, #20]
 800cba4:	e001      	b.n	800cbaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d11d      	bne.n	800cbec <vTaskStartScheduler+0x90>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb4:	b672      	cpsid	i
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	b662      	cpsie	i
 800cbc4:	613b      	str	r3, [r7, #16]
}
 800cbc6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cbc8:	4b16      	ldr	r3, [pc, #88]	@ (800cc24 <vTaskStartScheduler+0xc8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	334c      	adds	r3, #76	@ 0x4c
 800cbce:	4a16      	ldr	r2, [pc, #88]	@ (800cc28 <vTaskStartScheduler+0xcc>)
 800cbd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbd2:	4b16      	ldr	r3, [pc, #88]	@ (800cc2c <vTaskStartScheduler+0xd0>)
 800cbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbda:	4b15      	ldr	r3, [pc, #84]	@ (800cc30 <vTaskStartScheduler+0xd4>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbe0:	4b14      	ldr	r3, [pc, #80]	@ (800cc34 <vTaskStartScheduler+0xd8>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbe6:	f000 fee3 	bl	800d9b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbea:	e011      	b.n	800cc10 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf2:	d10d      	bne.n	800cc10 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf8:	b672      	cpsid	i
 800cbfa:	f383 8811 	msr	BASEPRI, r3
 800cbfe:	f3bf 8f6f 	isb	sy
 800cc02:	f3bf 8f4f 	dsb	sy
 800cc06:	b662      	cpsie	i
 800cc08:	60fb      	str	r3, [r7, #12]
}
 800cc0a:	bf00      	nop
 800cc0c:	bf00      	nop
 800cc0e:	e7fd      	b.n	800cc0c <vTaskStartScheduler+0xb0>
}
 800cc10:	bf00      	nop
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	0801fb08 	.word	0x0801fb08
 800cc1c:	0800d24d 	.word	0x0800d24d
 800cc20:	200054b8 	.word	0x200054b8
 800cc24:	20005394 	.word	0x20005394
 800cc28:	20000094 	.word	0x20000094
 800cc2c:	200054b4 	.word	0x200054b4
 800cc30:	200054a0 	.word	0x200054a0
 800cc34:	20005498 	.word	0x20005498

0800cc38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cc3c:	4b04      	ldr	r3, [pc, #16]	@ (800cc50 <vTaskSuspendAll+0x18>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3301      	adds	r3, #1
 800cc42:	4a03      	ldr	r2, [pc, #12]	@ (800cc50 <vTaskSuspendAll+0x18>)
 800cc44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cc46:	bf00      	nop
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	200054bc 	.word	0x200054bc

0800cc54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc62:	4b43      	ldr	r3, [pc, #268]	@ (800cd70 <xTaskResumeAll+0x11c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10d      	bne.n	800cc86 <xTaskResumeAll+0x32>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	b672      	cpsid	i
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	b662      	cpsie	i
 800cc7e:	603b      	str	r3, [r7, #0]
}
 800cc80:	bf00      	nop
 800cc82:	bf00      	nop
 800cc84:	e7fd      	b.n	800cc82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc86:	f000 ff11 	bl	800daac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc8a:	4b39      	ldr	r3, [pc, #228]	@ (800cd70 <xTaskResumeAll+0x11c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4a37      	ldr	r2, [pc, #220]	@ (800cd70 <xTaskResumeAll+0x11c>)
 800cc92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc94:	4b36      	ldr	r3, [pc, #216]	@ (800cd70 <xTaskResumeAll+0x11c>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d161      	bne.n	800cd60 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc9c:	4b35      	ldr	r3, [pc, #212]	@ (800cd74 <xTaskResumeAll+0x120>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d05d      	beq.n	800cd60 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cca4:	e02e      	b.n	800cd04 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cca6:	4b34      	ldr	r3, [pc, #208]	@ (800cd78 <xTaskResumeAll+0x124>)
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	3318      	adds	r3, #24
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fd0d 	bl	800b6d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3304      	adds	r3, #4
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fe fd08 	bl	800b6d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	409a      	lsls	r2, r3
 800ccca:	4b2c      	ldr	r3, [pc, #176]	@ (800cd7c <xTaskResumeAll+0x128>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	4a2a      	ldr	r2, [pc, #168]	@ (800cd7c <xTaskResumeAll+0x128>)
 800ccd2:	6013      	str	r3, [r2, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccd8:	4613      	mov	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4a27      	ldr	r2, [pc, #156]	@ (800cd80 <xTaskResumeAll+0x12c>)
 800cce2:	441a      	add	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3304      	adds	r3, #4
 800cce8:	4619      	mov	r1, r3
 800ccea:	4610      	mov	r0, r2
 800ccec:	f7fe fc94 	bl	800b618 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccf4:	4b23      	ldr	r3, [pc, #140]	@ (800cd84 <xTaskResumeAll+0x130>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d302      	bcc.n	800cd04 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ccfe:	4b22      	ldr	r3, [pc, #136]	@ (800cd88 <xTaskResumeAll+0x134>)
 800cd00:	2201      	movs	r2, #1
 800cd02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd04:	4b1c      	ldr	r3, [pc, #112]	@ (800cd78 <xTaskResumeAll+0x124>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1cc      	bne.n	800cca6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d001      	beq.n	800cd16 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd12:	f000 fb59 	bl	800d3c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cd16:	4b1d      	ldr	r3, [pc, #116]	@ (800cd8c <xTaskResumeAll+0x138>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d010      	beq.n	800cd44 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd22:	f000 f859 	bl	800cdd8 <xTaskIncrementTick>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cd2c:	4b16      	ldr	r3, [pc, #88]	@ (800cd88 <xTaskResumeAll+0x134>)
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	3b01      	subs	r3, #1
 800cd36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1f1      	bne.n	800cd22 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cd3e:	4b13      	ldr	r3, [pc, #76]	@ (800cd8c <xTaskResumeAll+0x138>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd44:	4b10      	ldr	r3, [pc, #64]	@ (800cd88 <xTaskResumeAll+0x134>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d009      	beq.n	800cd60 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd50:	4b0f      	ldr	r3, [pc, #60]	@ (800cd90 <xTaskResumeAll+0x13c>)
 800cd52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd60:	f000 feda 	bl	800db18 <vPortExitCritical>

	return xAlreadyYielded;
 800cd64:	68bb      	ldr	r3, [r7, #8]
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	200054bc 	.word	0x200054bc
 800cd74:	20005494 	.word	0x20005494
 800cd78:	20005454 	.word	0x20005454
 800cd7c:	2000549c 	.word	0x2000549c
 800cd80:	20005398 	.word	0x20005398
 800cd84:	20005394 	.word	0x20005394
 800cd88:	200054a8 	.word	0x200054a8
 800cd8c:	200054a4 	.word	0x200054a4
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cd9a:	4b05      	ldr	r3, [pc, #20]	@ (800cdb0 <xTaskGetTickCount+0x1c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cda0:	687b      	ldr	r3, [r7, #4]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20005498 	.word	0x20005498

0800cdb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdba:	f000 ff5f 	bl	800dc7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cdc2:	4b04      	ldr	r3, [pc, #16]	@ (800cdd4 <xTaskGetTickCountFromISR+0x20>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdc8:	683b      	ldr	r3, [r7, #0]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20005498 	.word	0x20005498

0800cdd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cde2:	4b50      	ldr	r3, [pc, #320]	@ (800cf24 <xTaskIncrementTick+0x14c>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f040 808b 	bne.w	800cf02 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cdec:	4b4e      	ldr	r3, [pc, #312]	@ (800cf28 <xTaskIncrementTick+0x150>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cdf4:	4a4c      	ldr	r2, [pc, #304]	@ (800cf28 <xTaskIncrementTick+0x150>)
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d123      	bne.n	800ce48 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce00:	4b4a      	ldr	r3, [pc, #296]	@ (800cf2c <xTaskIncrementTick+0x154>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00d      	beq.n	800ce26 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0e:	b672      	cpsid	i
 800ce10:	f383 8811 	msr	BASEPRI, r3
 800ce14:	f3bf 8f6f 	isb	sy
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	b662      	cpsie	i
 800ce1e:	603b      	str	r3, [r7, #0]
}
 800ce20:	bf00      	nop
 800ce22:	bf00      	nop
 800ce24:	e7fd      	b.n	800ce22 <xTaskIncrementTick+0x4a>
 800ce26:	4b41      	ldr	r3, [pc, #260]	@ (800cf2c <xTaskIncrementTick+0x154>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	4b40      	ldr	r3, [pc, #256]	@ (800cf30 <xTaskIncrementTick+0x158>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a3e      	ldr	r2, [pc, #248]	@ (800cf2c <xTaskIncrementTick+0x154>)
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	4a3e      	ldr	r2, [pc, #248]	@ (800cf30 <xTaskIncrementTick+0x158>)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6013      	str	r3, [r2, #0]
 800ce3a:	4b3e      	ldr	r3, [pc, #248]	@ (800cf34 <xTaskIncrementTick+0x15c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	4a3c      	ldr	r2, [pc, #240]	@ (800cf34 <xTaskIncrementTick+0x15c>)
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	f000 fac0 	bl	800d3c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce48:	4b3b      	ldr	r3, [pc, #236]	@ (800cf38 <xTaskIncrementTick+0x160>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	693a      	ldr	r2, [r7, #16]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d348      	bcc.n	800cee4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce52:	4b36      	ldr	r3, [pc, #216]	@ (800cf2c <xTaskIncrementTick+0x154>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d104      	bne.n	800ce66 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce5c:	4b36      	ldr	r3, [pc, #216]	@ (800cf38 <xTaskIncrementTick+0x160>)
 800ce5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce62:	601a      	str	r2, [r3, #0]
					break;
 800ce64:	e03e      	b.n	800cee4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce66:	4b31      	ldr	r3, [pc, #196]	@ (800cf2c <xTaskIncrementTick+0x154>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d203      	bcs.n	800ce86 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce7e:	4a2e      	ldr	r2, [pc, #184]	@ (800cf38 <xTaskIncrementTick+0x160>)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce84:	e02e      	b.n	800cee4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	3304      	adds	r3, #4
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fc21 	bl	800b6d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d004      	beq.n	800cea2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fc18 	bl	800b6d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea6:	2201      	movs	r2, #1
 800cea8:	409a      	lsls	r2, r3
 800ceaa:	4b24      	ldr	r3, [pc, #144]	@ (800cf3c <xTaskIncrementTick+0x164>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	4a22      	ldr	r2, [pc, #136]	@ (800cf3c <xTaskIncrementTick+0x164>)
 800ceb2:	6013      	str	r3, [r2, #0]
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4a1f      	ldr	r2, [pc, #124]	@ (800cf40 <xTaskIncrementTick+0x168>)
 800cec2:	441a      	add	r2, r3
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	3304      	adds	r3, #4
 800cec8:	4619      	mov	r1, r3
 800ceca:	4610      	mov	r0, r2
 800cecc:	f7fe fba4 	bl	800b618 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced4:	4b1b      	ldr	r3, [pc, #108]	@ (800cf44 <xTaskIncrementTick+0x16c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d3b9      	bcc.n	800ce52 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800cede:	2301      	movs	r3, #1
 800cee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cee2:	e7b6      	b.n	800ce52 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cee4:	4b17      	ldr	r3, [pc, #92]	@ (800cf44 <xTaskIncrementTick+0x16c>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceea:	4915      	ldr	r1, [pc, #84]	@ (800cf40 <xTaskIncrementTick+0x168>)
 800ceec:	4613      	mov	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	440b      	add	r3, r1
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d907      	bls.n	800cf0c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cefc:	2301      	movs	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	e004      	b.n	800cf0c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cf02:	4b11      	ldr	r3, [pc, #68]	@ (800cf48 <xTaskIncrementTick+0x170>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3301      	adds	r3, #1
 800cf08:	4a0f      	ldr	r2, [pc, #60]	@ (800cf48 <xTaskIncrementTick+0x170>)
 800cf0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cf0c:	4b0f      	ldr	r3, [pc, #60]	@ (800cf4c <xTaskIncrementTick+0x174>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cf14:	2301      	movs	r3, #1
 800cf16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cf18:	697b      	ldr	r3, [r7, #20]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3718      	adds	r7, #24
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	200054bc 	.word	0x200054bc
 800cf28:	20005498 	.word	0x20005498
 800cf2c:	2000544c 	.word	0x2000544c
 800cf30:	20005450 	.word	0x20005450
 800cf34:	200054ac 	.word	0x200054ac
 800cf38:	200054b4 	.word	0x200054b4
 800cf3c:	2000549c 	.word	0x2000549c
 800cf40:	20005398 	.word	0x20005398
 800cf44:	20005394 	.word	0x20005394
 800cf48:	200054a4 	.word	0x200054a4
 800cf4c:	200054a8 	.word	0x200054a8

0800cf50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf56:	4b2b      	ldr	r3, [pc, #172]	@ (800d004 <vTaskSwitchContext+0xb4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf5e:	4b2a      	ldr	r3, [pc, #168]	@ (800d008 <vTaskSwitchContext+0xb8>)
 800cf60:	2201      	movs	r2, #1
 800cf62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf64:	e047      	b.n	800cff6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cf66:	4b28      	ldr	r3, [pc, #160]	@ (800d008 <vTaskSwitchContext+0xb8>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6c:	4b27      	ldr	r3, [pc, #156]	@ (800d00c <vTaskSwitchContext+0xbc>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	fab3 f383 	clz	r3, r3
 800cf78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf7a:	7afb      	ldrb	r3, [r7, #11]
 800cf7c:	f1c3 031f 	rsb	r3, r3, #31
 800cf80:	617b      	str	r3, [r7, #20]
 800cf82:	4923      	ldr	r1, [pc, #140]	@ (800d010 <vTaskSwitchContext+0xc0>)
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	4613      	mov	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	440b      	add	r3, r1
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d10d      	bne.n	800cfb2 <vTaskSwitchContext+0x62>
	__asm volatile
 800cf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9a:	b672      	cpsid	i
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	b662      	cpsie	i
 800cfaa:	607b      	str	r3, [r7, #4]
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	e7fd      	b.n	800cfae <vTaskSwitchContext+0x5e>
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4a14      	ldr	r2, [pc, #80]	@ (800d010 <vTaskSwitchContext+0xc0>)
 800cfbe:	4413      	add	r3, r2
 800cfc0:	613b      	str	r3, [r7, #16]
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	605a      	str	r2, [r3, #4]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d104      	bne.n	800cfe2 <vTaskSwitchContext+0x92>
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	685a      	ldr	r2, [r3, #4]
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	605a      	str	r2, [r3, #4]
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	4a0a      	ldr	r2, [pc, #40]	@ (800d014 <vTaskSwitchContext+0xc4>)
 800cfea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cfec:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <vTaskSwitchContext+0xc4>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	334c      	adds	r3, #76	@ 0x4c
 800cff2:	4a09      	ldr	r2, [pc, #36]	@ (800d018 <vTaskSwitchContext+0xc8>)
 800cff4:	6013      	str	r3, [r2, #0]
}
 800cff6:	bf00      	nop
 800cff8:	371c      	adds	r7, #28
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	200054bc 	.word	0x200054bc
 800d008:	200054a8 	.word	0x200054a8
 800d00c:	2000549c 	.word	0x2000549c
 800d010:	20005398 	.word	0x20005398
 800d014:	20005394 	.word	0x20005394
 800d018:	20000094 	.word	0x20000094

0800d01c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10d      	bne.n	800d048 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d030:	b672      	cpsid	i
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	b662      	cpsie	i
 800d040:	60fb      	str	r3, [r7, #12]
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	e7fd      	b.n	800d044 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d048:	4b07      	ldr	r3, [pc, #28]	@ (800d068 <vTaskPlaceOnEventList+0x4c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3318      	adds	r3, #24
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7fe fb05 	bl	800b660 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d056:	2101      	movs	r1, #1
 800d058:	6838      	ldr	r0, [r7, #0]
 800d05a:	f000 fbb3 	bl	800d7c4 <prvAddCurrentTaskToDelayedList>
}
 800d05e:	bf00      	nop
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20005394 	.word	0x20005394

0800d06c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d10d      	bne.n	800d09e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d086:	b672      	cpsid	i
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	b662      	cpsie	i
 800d096:	60fb      	str	r3, [r7, #12]
}
 800d098:	bf00      	nop
 800d09a:	bf00      	nop
 800d09c:	e7fd      	b.n	800d09a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	3318      	adds	r3, #24
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fe fb15 	bl	800b6d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d120 <xTaskRemoveFromEventList+0xb4>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d11c      	bne.n	800d0ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fb0c 	bl	800b6d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0be:	2201      	movs	r2, #1
 800d0c0:	409a      	lsls	r2, r3
 800d0c2:	4b18      	ldr	r3, [pc, #96]	@ (800d124 <xTaskRemoveFromEventList+0xb8>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	4a16      	ldr	r2, [pc, #88]	@ (800d124 <xTaskRemoveFromEventList+0xb8>)
 800d0ca:	6013      	str	r3, [r2, #0]
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4a13      	ldr	r2, [pc, #76]	@ (800d128 <xTaskRemoveFromEventList+0xbc>)
 800d0da:	441a      	add	r2, r3
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	4610      	mov	r0, r2
 800d0e4:	f7fe fa98 	bl	800b618 <vListInsertEnd>
 800d0e8:	e005      	b.n	800d0f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	3318      	adds	r3, #24
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	480e      	ldr	r0, [pc, #56]	@ (800d12c <xTaskRemoveFromEventList+0xc0>)
 800d0f2:	f7fe fa91 	bl	800b618 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d130 <xTaskRemoveFromEventList+0xc4>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d100:	429a      	cmp	r2, r3
 800d102:	d905      	bls.n	800d110 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d104:	2301      	movs	r3, #1
 800d106:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d108:	4b0a      	ldr	r3, [pc, #40]	@ (800d134 <xTaskRemoveFromEventList+0xc8>)
 800d10a:	2201      	movs	r2, #1
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	e001      	b.n	800d114 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d110:	2300      	movs	r3, #0
 800d112:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d114:	697b      	ldr	r3, [r7, #20]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	200054bc 	.word	0x200054bc
 800d124:	2000549c 	.word	0x2000549c
 800d128:	20005398 	.word	0x20005398
 800d12c:	20005454 	.word	0x20005454
 800d130:	20005394 	.word	0x20005394
 800d134:	200054a8 	.word	0x200054a8

0800d138 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d140:	4b06      	ldr	r3, [pc, #24]	@ (800d15c <vTaskInternalSetTimeOutState+0x24>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d148:	4b05      	ldr	r3, [pc, #20]	@ (800d160 <vTaskInternalSetTimeOutState+0x28>)
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	605a      	str	r2, [r3, #4]
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	200054ac 	.word	0x200054ac
 800d160:	20005498 	.word	0x20005498

0800d164 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10d      	bne.n	800d190 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	b672      	cpsid	i
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	b662      	cpsie	i
 800d188:	613b      	str	r3, [r7, #16]
}
 800d18a:	bf00      	nop
 800d18c:	bf00      	nop
 800d18e:	e7fd      	b.n	800d18c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d10d      	bne.n	800d1b2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d19a:	b672      	cpsid	i
 800d19c:	f383 8811 	msr	BASEPRI, r3
 800d1a0:	f3bf 8f6f 	isb	sy
 800d1a4:	f3bf 8f4f 	dsb	sy
 800d1a8:	b662      	cpsie	i
 800d1aa:	60fb      	str	r3, [r7, #12]
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	e7fd      	b.n	800d1ae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d1b2:	f000 fc7b 	bl	800daac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d1b6:	4b1d      	ldr	r3, [pc, #116]	@ (800d22c <xTaskCheckForTimeOut+0xc8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	69ba      	ldr	r2, [r7, #24]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ce:	d102      	bne.n	800d1d6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61fb      	str	r3, [r7, #28]
 800d1d4:	e023      	b.n	800d21e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	4b15      	ldr	r3, [pc, #84]	@ (800d230 <xTaskCheckForTimeOut+0xcc>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d007      	beq.n	800d1f2 <xTaskCheckForTimeOut+0x8e>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d302      	bcc.n	800d1f2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	61fb      	str	r3, [r7, #28]
 800d1f0:	e015      	b.n	800d21e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d20b      	bcs.n	800d214 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	1ad2      	subs	r2, r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f7ff ff95 	bl	800d138 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d20e:	2300      	movs	r3, #0
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	e004      	b.n	800d21e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2200      	movs	r2, #0
 800d218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d21a:	2301      	movs	r3, #1
 800d21c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d21e:	f000 fc7b 	bl	800db18 <vPortExitCritical>

	return xReturn;
 800d222:	69fb      	ldr	r3, [r7, #28]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3720      	adds	r7, #32
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	20005498 	.word	0x20005498
 800d230:	200054ac 	.word	0x200054ac

0800d234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d234:	b480      	push	{r7}
 800d236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d238:	4b03      	ldr	r3, [pc, #12]	@ (800d248 <vTaskMissedYield+0x14>)
 800d23a:	2201      	movs	r2, #1
 800d23c:	601a      	str	r2, [r3, #0]
}
 800d23e:	bf00      	nop
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	200054a8 	.word	0x200054a8

0800d24c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d254:	f000 f852 	bl	800d2fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d258:	4b06      	ldr	r3, [pc, #24]	@ (800d274 <prvIdleTask+0x28>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d9f9      	bls.n	800d254 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d260:	4b05      	ldr	r3, [pc, #20]	@ (800d278 <prvIdleTask+0x2c>)
 800d262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d270:	e7f0      	b.n	800d254 <prvIdleTask+0x8>
 800d272:	bf00      	nop
 800d274:	20005398 	.word	0x20005398
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d282:	2300      	movs	r3, #0
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	e00c      	b.n	800d2a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4a12      	ldr	r2, [pc, #72]	@ (800d2dc <prvInitialiseTaskLists+0x60>)
 800d294:	4413      	add	r3, r2
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe f991 	bl	800b5be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	607b      	str	r3, [r7, #4]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b06      	cmp	r3, #6
 800d2a6:	d9ef      	bls.n	800d288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2a8:	480d      	ldr	r0, [pc, #52]	@ (800d2e0 <prvInitialiseTaskLists+0x64>)
 800d2aa:	f7fe f988 	bl	800b5be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2ae:	480d      	ldr	r0, [pc, #52]	@ (800d2e4 <prvInitialiseTaskLists+0x68>)
 800d2b0:	f7fe f985 	bl	800b5be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2b4:	480c      	ldr	r0, [pc, #48]	@ (800d2e8 <prvInitialiseTaskLists+0x6c>)
 800d2b6:	f7fe f982 	bl	800b5be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2ba:	480c      	ldr	r0, [pc, #48]	@ (800d2ec <prvInitialiseTaskLists+0x70>)
 800d2bc:	f7fe f97f 	bl	800b5be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2c0:	480b      	ldr	r0, [pc, #44]	@ (800d2f0 <prvInitialiseTaskLists+0x74>)
 800d2c2:	f7fe f97c 	bl	800b5be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d2f4 <prvInitialiseTaskLists+0x78>)
 800d2c8:	4a05      	ldr	r2, [pc, #20]	@ (800d2e0 <prvInitialiseTaskLists+0x64>)
 800d2ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f8 <prvInitialiseTaskLists+0x7c>)
 800d2ce:	4a05      	ldr	r2, [pc, #20]	@ (800d2e4 <prvInitialiseTaskLists+0x68>)
 800d2d0:	601a      	str	r2, [r3, #0]
}
 800d2d2:	bf00      	nop
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	20005398 	.word	0x20005398
 800d2e0:	20005424 	.word	0x20005424
 800d2e4:	20005438 	.word	0x20005438
 800d2e8:	20005454 	.word	0x20005454
 800d2ec:	20005468 	.word	0x20005468
 800d2f0:	20005480 	.word	0x20005480
 800d2f4:	2000544c 	.word	0x2000544c
 800d2f8:	20005450 	.word	0x20005450

0800d2fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d302:	e019      	b.n	800d338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d304:	f000 fbd2 	bl	800daac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d308:	4b10      	ldr	r3, [pc, #64]	@ (800d34c <prvCheckTasksWaitingTermination+0x50>)
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe f9dc 	bl	800b6d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d31a:	4b0d      	ldr	r3, [pc, #52]	@ (800d350 <prvCheckTasksWaitingTermination+0x54>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3b01      	subs	r3, #1
 800d320:	4a0b      	ldr	r2, [pc, #44]	@ (800d350 <prvCheckTasksWaitingTermination+0x54>)
 800d322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d324:	4b0b      	ldr	r3, [pc, #44]	@ (800d354 <prvCheckTasksWaitingTermination+0x58>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3b01      	subs	r3, #1
 800d32a:	4a0a      	ldr	r2, [pc, #40]	@ (800d354 <prvCheckTasksWaitingTermination+0x58>)
 800d32c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d32e:	f000 fbf3 	bl	800db18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f810 	bl	800d358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d338:	4b06      	ldr	r3, [pc, #24]	@ (800d354 <prvCheckTasksWaitingTermination+0x58>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e1      	bne.n	800d304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d340:	bf00      	nop
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	20005468 	.word	0x20005468
 800d350:	20005494 	.word	0x20005494
 800d354:	2000547c 	.word	0x2000547c

0800d358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	334c      	adds	r3, #76	@ 0x4c
 800d364:	4618      	mov	r0, r3
 800d366:	f010 f969 	bl	801d63c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d370:	2b00      	cmp	r3, #0
 800d372:	d108      	bne.n	800d386 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d378:	4618      	mov	r0, r3
 800d37a:	f000 fd93 	bl	800dea4 <vPortFree>
				vPortFree( pxTCB );
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fd90 	bl	800dea4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d384:	e01b      	b.n	800d3be <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d103      	bne.n	800d398 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fd87 	bl	800dea4 <vPortFree>
	}
 800d396:	e012      	b.n	800d3be <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d00d      	beq.n	800d3be <prvDeleteTCB+0x66>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a6:	b672      	cpsid	i
 800d3a8:	f383 8811 	msr	BASEPRI, r3
 800d3ac:	f3bf 8f6f 	isb	sy
 800d3b0:	f3bf 8f4f 	dsb	sy
 800d3b4:	b662      	cpsie	i
 800d3b6:	60fb      	str	r3, [r7, #12]
}
 800d3b8:	bf00      	nop
 800d3ba:	bf00      	nop
 800d3bc:	e7fd      	b.n	800d3ba <prvDeleteTCB+0x62>
	}
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d400 <prvResetNextTaskUnblockTime+0x38>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d104      	bne.n	800d3e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d404 <prvResetNextTaskUnblockTime+0x3c>)
 800d3da:	f04f 32ff 	mov.w	r2, #4294967295
 800d3de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d3e0:	e008      	b.n	800d3f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3e2:	4b07      	ldr	r3, [pc, #28]	@ (800d400 <prvResetNextTaskUnblockTime+0x38>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	4a04      	ldr	r2, [pc, #16]	@ (800d404 <prvResetNextTaskUnblockTime+0x3c>)
 800d3f2:	6013      	str	r3, [r2, #0]
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr
 800d400:	2000544c 	.word	0x2000544c
 800d404:	200054b4 	.word	0x200054b4

0800d408 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d40e:	4b0b      	ldr	r3, [pc, #44]	@ (800d43c <xTaskGetSchedulerState+0x34>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d102      	bne.n	800d41c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d416:	2301      	movs	r3, #1
 800d418:	607b      	str	r3, [r7, #4]
 800d41a:	e008      	b.n	800d42e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d41c:	4b08      	ldr	r3, [pc, #32]	@ (800d440 <xTaskGetSchedulerState+0x38>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d424:	2302      	movs	r3, #2
 800d426:	607b      	str	r3, [r7, #4]
 800d428:	e001      	b.n	800d42e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d42a:	2300      	movs	r3, #0
 800d42c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d42e:	687b      	ldr	r3, [r7, #4]
	}
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr
 800d43c:	200054a0 	.word	0x200054a0
 800d440:	200054bc 	.word	0x200054bc

0800d444 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d450:	2300      	movs	r3, #0
 800d452:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d069      	beq.n	800d52e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d45e:	4b36      	ldr	r3, [pc, #216]	@ (800d538 <xTaskPriorityInherit+0xf4>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d464:	429a      	cmp	r2, r3
 800d466:	d259      	bcs.n	800d51c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	db06      	blt.n	800d47e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d470:	4b31      	ldr	r3, [pc, #196]	@ (800d538 <xTaskPriorityInherit+0xf4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d476:	f1c3 0207 	rsb	r2, r3, #7
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	6959      	ldr	r1, [r3, #20]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d486:	4613      	mov	r3, r2
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	4a2b      	ldr	r2, [pc, #172]	@ (800d53c <xTaskPriorityInherit+0xf8>)
 800d490:	4413      	add	r3, r2
 800d492:	4299      	cmp	r1, r3
 800d494:	d13a      	bne.n	800d50c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	3304      	adds	r3, #4
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe f919 	bl	800b6d2 <uxListRemove>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d115      	bne.n	800d4d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4aa:	4924      	ldr	r1, [pc, #144]	@ (800d53c <xTaskPriorityInherit+0xf8>)
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	4413      	add	r3, r2
 800d4b2:	009b      	lsls	r3, r3, #2
 800d4b4:	440b      	add	r3, r1
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <xTaskPriorityInherit+0x8e>
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c6:	43da      	mvns	r2, r3
 800d4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d540 <xTaskPriorityInherit+0xfc>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d540 <xTaskPriorityInherit+0xfc>)
 800d4d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d4d2:	4b19      	ldr	r3, [pc, #100]	@ (800d538 <xTaskPriorityInherit+0xf4>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	409a      	lsls	r2, r3
 800d4e4:	4b16      	ldr	r3, [pc, #88]	@ (800d540 <xTaskPriorityInherit+0xfc>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	4a15      	ldr	r2, [pc, #84]	@ (800d540 <xTaskPriorityInherit+0xfc>)
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	009b      	lsls	r3, r3, #2
 800d4f6:	4413      	add	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4a10      	ldr	r2, [pc, #64]	@ (800d53c <xTaskPriorityInherit+0xf8>)
 800d4fc:	441a      	add	r2, r3
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	3304      	adds	r3, #4
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f7fe f887 	bl	800b618 <vListInsertEnd>
 800d50a:	e004      	b.n	800d516 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d50c:	4b0a      	ldr	r3, [pc, #40]	@ (800d538 <xTaskPriorityInherit+0xf4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d516:	2301      	movs	r3, #1
 800d518:	60fb      	str	r3, [r7, #12]
 800d51a:	e008      	b.n	800d52e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d520:	4b05      	ldr	r3, [pc, #20]	@ (800d538 <xTaskPriorityInherit+0xf4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d526:	429a      	cmp	r2, r3
 800d528:	d201      	bcs.n	800d52e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d52a:	2301      	movs	r3, #1
 800d52c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d52e:	68fb      	ldr	r3, [r7, #12]
	}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20005394 	.word	0x20005394
 800d53c:	20005398 	.word	0x20005398
 800d540:	2000549c 	.word	0x2000549c

0800d544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d550:	2300      	movs	r3, #0
 800d552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d074      	beq.n	800d644 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d55a:	4b3d      	ldr	r3, [pc, #244]	@ (800d650 <xTaskPriorityDisinherit+0x10c>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	693a      	ldr	r2, [r7, #16]
 800d560:	429a      	cmp	r2, r3
 800d562:	d00d      	beq.n	800d580 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	b672      	cpsid	i
 800d56a:	f383 8811 	msr	BASEPRI, r3
 800d56e:	f3bf 8f6f 	isb	sy
 800d572:	f3bf 8f4f 	dsb	sy
 800d576:	b662      	cpsie	i
 800d578:	60fb      	str	r3, [r7, #12]
}
 800d57a:	bf00      	nop
 800d57c:	bf00      	nop
 800d57e:	e7fd      	b.n	800d57c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10d      	bne.n	800d5a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d58c:	b672      	cpsid	i
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	b662      	cpsie	i
 800d59c:	60bb      	str	r3, [r7, #8]
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5a8:	1e5a      	subs	r2, r3, #1
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d044      	beq.n	800d644 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d140      	bne.n	800d644 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe f883 	bl	800b6d2 <uxListRemove>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d115      	bne.n	800d5fe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d6:	491f      	ldr	r1, [pc, #124]	@ (800d654 <xTaskPriorityDisinherit+0x110>)
 800d5d8:	4613      	mov	r3, r2
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	440b      	add	r3, r1
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <xTaskPriorityDisinherit+0xba>
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f2:	43da      	mvns	r2, r3
 800d5f4:	4b18      	ldr	r3, [pc, #96]	@ (800d658 <xTaskPriorityDisinherit+0x114>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4013      	ands	r3, r2
 800d5fa:	4a17      	ldr	r2, [pc, #92]	@ (800d658 <xTaskPriorityDisinherit+0x114>)
 800d5fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d60a:	f1c3 0207 	rsb	r2, r3, #7
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d616:	2201      	movs	r2, #1
 800d618:	409a      	lsls	r2, r3
 800d61a:	4b0f      	ldr	r3, [pc, #60]	@ (800d658 <xTaskPriorityDisinherit+0x114>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4313      	orrs	r3, r2
 800d620:	4a0d      	ldr	r2, [pc, #52]	@ (800d658 <xTaskPriorityDisinherit+0x114>)
 800d622:	6013      	str	r3, [r2, #0]
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d628:	4613      	mov	r3, r2
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	4413      	add	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4a08      	ldr	r2, [pc, #32]	@ (800d654 <xTaskPriorityDisinherit+0x110>)
 800d632:	441a      	add	r2, r3
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	3304      	adds	r3, #4
 800d638:	4619      	mov	r1, r3
 800d63a:	4610      	mov	r0, r2
 800d63c:	f7fd ffec 	bl	800b618 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d640:	2301      	movs	r3, #1
 800d642:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d644:	697b      	ldr	r3, [r7, #20]
	}
 800d646:	4618      	mov	r0, r3
 800d648:	3718      	adds	r7, #24
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20005394 	.word	0x20005394
 800d654:	20005398 	.word	0x20005398
 800d658:	2000549c 	.word	0x2000549c

0800d65c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d66a:	2301      	movs	r3, #1
 800d66c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	f000 8089 	beq.w	800d788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10d      	bne.n	800d69a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	60fb      	str	r3, [r7, #12]
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop
 800d698:	e7fd      	b.n	800d696 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d902      	bls.n	800d6aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	61fb      	str	r3, [r7, #28]
 800d6a8:	e002      	b.n	800d6b0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b4:	69fa      	ldr	r2, [r7, #28]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d066      	beq.n	800d788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d161      	bne.n	800d788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d6c4:	4b32      	ldr	r3, [pc, #200]	@ (800d790 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	69ba      	ldr	r2, [r7, #24]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d10d      	bne.n	800d6ea <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	60bb      	str	r3, [r7, #8]
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	e7fd      	b.n	800d6e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	69fa      	ldr	r2, [r7, #28]
 800d6f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	db04      	blt.n	800d708 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	f1c3 0207 	rsb	r2, r3, #7
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	6959      	ldr	r1, [r3, #20]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	4613      	mov	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4413      	add	r3, r2
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4a1f      	ldr	r2, [pc, #124]	@ (800d794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d718:	4413      	add	r3, r2
 800d71a:	4299      	cmp	r1, r3
 800d71c:	d134      	bne.n	800d788 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	3304      	adds	r3, #4
 800d722:	4618      	mov	r0, r3
 800d724:	f7fd ffd5 	bl	800b6d2 <uxListRemove>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d115      	bne.n	800d75a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d732:	4918      	ldr	r1, [pc, #96]	@ (800d794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d734:	4613      	mov	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4413      	add	r3, r2
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	440b      	add	r3, r1
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	2201      	movs	r2, #1
 800d74a:	fa02 f303 	lsl.w	r3, r2, r3
 800d74e:	43da      	mvns	r2, r3
 800d750:	4b11      	ldr	r3, [pc, #68]	@ (800d798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	4013      	ands	r3, r2
 800d756:	4a10      	ldr	r2, [pc, #64]	@ (800d798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d758:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d75a:	69bb      	ldr	r3, [r7, #24]
 800d75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d75e:	2201      	movs	r2, #1
 800d760:	409a      	lsls	r2, r3
 800d762:	4b0d      	ldr	r3, [pc, #52]	@ (800d798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4313      	orrs	r3, r2
 800d768:	4a0b      	ldr	r2, [pc, #44]	@ (800d798 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d770:	4613      	mov	r3, r2
 800d772:	009b      	lsls	r3, r3, #2
 800d774:	4413      	add	r3, r2
 800d776:	009b      	lsls	r3, r3, #2
 800d778:	4a06      	ldr	r2, [pc, #24]	@ (800d794 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d77a:	441a      	add	r2, r3
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	3304      	adds	r3, #4
 800d780:	4619      	mov	r1, r3
 800d782:	4610      	mov	r0, r2
 800d784:	f7fd ff48 	bl	800b618 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d788:	bf00      	nop
 800d78a:	3720      	adds	r7, #32
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	20005394 	.word	0x20005394
 800d794:	20005398 	.word	0x20005398
 800d798:	2000549c 	.word	0x2000549c

0800d79c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d79c:	b480      	push	{r7}
 800d79e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d7a0:	4b07      	ldr	r3, [pc, #28]	@ (800d7c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d7a8:	4b05      	ldr	r3, [pc, #20]	@ (800d7c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7ae:	3201      	adds	r2, #1
 800d7b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d7b2:	4b03      	ldr	r3, [pc, #12]	@ (800d7c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
	}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	20005394 	.word	0x20005394

0800d7c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d7ce:	4b29      	ldr	r3, [pc, #164]	@ (800d874 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7d4:	4b28      	ldr	r3, [pc, #160]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fd ff79 	bl	800b6d2 <uxListRemove>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d10b      	bne.n	800d7fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d7e6:	4b24      	ldr	r3, [pc, #144]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f2:	43da      	mvns	r2, r3
 800d7f4:	4b21      	ldr	r3, [pc, #132]	@ (800d87c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	4a20      	ldr	r2, [pc, #128]	@ (800d87c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d7fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d804:	d10a      	bne.n	800d81c <prvAddCurrentTaskToDelayedList+0x58>
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d007      	beq.n	800d81c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d80c:	4b1a      	ldr	r3, [pc, #104]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3304      	adds	r3, #4
 800d812:	4619      	mov	r1, r3
 800d814:	481a      	ldr	r0, [pc, #104]	@ (800d880 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d816:	f7fd feff 	bl	800b618 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d81a:	e026      	b.n	800d86a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d824:	4b14      	ldr	r3, [pc, #80]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	429a      	cmp	r2, r3
 800d832:	d209      	bcs.n	800d848 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d834:	4b13      	ldr	r3, [pc, #76]	@ (800d884 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	4b0f      	ldr	r3, [pc, #60]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4619      	mov	r1, r3
 800d840:	4610      	mov	r0, r2
 800d842:	f7fd ff0d 	bl	800b660 <vListInsert>
}
 800d846:	e010      	b.n	800d86a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d848:	4b0f      	ldr	r3, [pc, #60]	@ (800d888 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	4b0a      	ldr	r3, [pc, #40]	@ (800d878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	3304      	adds	r3, #4
 800d852:	4619      	mov	r1, r3
 800d854:	4610      	mov	r0, r2
 800d856:	f7fd ff03 	bl	800b660 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d85a:	4b0c      	ldr	r3, [pc, #48]	@ (800d88c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	429a      	cmp	r2, r3
 800d862:	d202      	bcs.n	800d86a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d864:	4a09      	ldr	r2, [pc, #36]	@ (800d88c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6013      	str	r3, [r2, #0]
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20005498 	.word	0x20005498
 800d878:	20005394 	.word	0x20005394
 800d87c:	2000549c 	.word	0x2000549c
 800d880:	20005480 	.word	0x20005480
 800d884:	20005450 	.word	0x20005450
 800d888:	2000544c 	.word	0x2000544c
 800d88c:	200054b4 	.word	0x200054b4

0800d890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	3b04      	subs	r3, #4
 800d8a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	3b04      	subs	r3, #4
 800d8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	f023 0201 	bic.w	r2, r3, #1
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3b04      	subs	r3, #4
 800d8be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d8c0:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f4 <pxPortInitialiseStack+0x64>)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3b14      	subs	r3, #20
 800d8ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3b04      	subs	r3, #4
 800d8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f06f 0202 	mvn.w	r2, #2
 800d8de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	3b20      	subs	r3, #32
 800d8e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3714      	adds	r7, #20
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr
 800d8f4:	0800d8f9 	.word	0x0800d8f9

0800d8f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d902:	4b15      	ldr	r3, [pc, #84]	@ (800d958 <prvTaskExitError+0x60>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90a:	d00d      	beq.n	800d928 <prvTaskExitError+0x30>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d910:	b672      	cpsid	i
 800d912:	f383 8811 	msr	BASEPRI, r3
 800d916:	f3bf 8f6f 	isb	sy
 800d91a:	f3bf 8f4f 	dsb	sy
 800d91e:	b662      	cpsie	i
 800d920:	60fb      	str	r3, [r7, #12]
}
 800d922:	bf00      	nop
 800d924:	bf00      	nop
 800d926:	e7fd      	b.n	800d924 <prvTaskExitError+0x2c>
	__asm volatile
 800d928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92c:	b672      	cpsid	i
 800d92e:	f383 8811 	msr	BASEPRI, r3
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	f3bf 8f4f 	dsb	sy
 800d93a:	b662      	cpsie	i
 800d93c:	60bb      	str	r3, [r7, #8]
}
 800d93e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d940:	bf00      	nop
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d0fc      	beq.n	800d942 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	20000078 	.word	0x20000078
 800d95c:	00000000 	.word	0x00000000

0800d960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d960:	4b07      	ldr	r3, [pc, #28]	@ (800d980 <pxCurrentTCBConst2>)
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	6808      	ldr	r0, [r1, #0]
 800d966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96a:	f380 8809 	msr	PSP, r0
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f04f 0000 	mov.w	r0, #0
 800d976:	f380 8811 	msr	BASEPRI, r0
 800d97a:	4770      	bx	lr
 800d97c:	f3af 8000 	nop.w

0800d980 <pxCurrentTCBConst2>:
 800d980:	20005394 	.word	0x20005394
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop

0800d988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d988:	4808      	ldr	r0, [pc, #32]	@ (800d9ac <prvPortStartFirstTask+0x24>)
 800d98a:	6800      	ldr	r0, [r0, #0]
 800d98c:	6800      	ldr	r0, [r0, #0]
 800d98e:	f380 8808 	msr	MSP, r0
 800d992:	f04f 0000 	mov.w	r0, #0
 800d996:	f380 8814 	msr	CONTROL, r0
 800d99a:	b662      	cpsie	i
 800d99c:	b661      	cpsie	f
 800d99e:	f3bf 8f4f 	dsb	sy
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	df00      	svc	0
 800d9a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d9aa:	bf00      	nop
 800d9ac:	e000ed08 	.word	0xe000ed08

0800d9b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d9b6:	4b37      	ldr	r3, [pc, #220]	@ (800da94 <xPortStartScheduler+0xe4>)
 800d9b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	22ff      	movs	r2, #255	@ 0xff
 800d9c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9d0:	78fb      	ldrb	r3, [r7, #3]
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	4b2f      	ldr	r3, [pc, #188]	@ (800da98 <xPortStartScheduler+0xe8>)
 800d9dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9de:	4b2f      	ldr	r3, [pc, #188]	@ (800da9c <xPortStartScheduler+0xec>)
 800d9e0:	2207      	movs	r2, #7
 800d9e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9e4:	e009      	b.n	800d9fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d9e6:	4b2d      	ldr	r3, [pc, #180]	@ (800da9c <xPortStartScheduler+0xec>)
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	4a2b      	ldr	r2, [pc, #172]	@ (800da9c <xPortStartScheduler+0xec>)
 800d9ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d9f0:	78fb      	ldrb	r3, [r7, #3]
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	005b      	lsls	r3, r3, #1
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da02:	2b80      	cmp	r3, #128	@ 0x80
 800da04:	d0ef      	beq.n	800d9e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da06:	4b25      	ldr	r3, [pc, #148]	@ (800da9c <xPortStartScheduler+0xec>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f1c3 0307 	rsb	r3, r3, #7
 800da0e:	2b04      	cmp	r3, #4
 800da10:	d00d      	beq.n	800da2e <xPortStartScheduler+0x7e>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	b672      	cpsid	i
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	b662      	cpsie	i
 800da26:	60bb      	str	r3, [r7, #8]
}
 800da28:	bf00      	nop
 800da2a:	bf00      	nop
 800da2c:	e7fd      	b.n	800da2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800da2e:	4b1b      	ldr	r3, [pc, #108]	@ (800da9c <xPortStartScheduler+0xec>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	021b      	lsls	r3, r3, #8
 800da34:	4a19      	ldr	r2, [pc, #100]	@ (800da9c <xPortStartScheduler+0xec>)
 800da36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da38:	4b18      	ldr	r3, [pc, #96]	@ (800da9c <xPortStartScheduler+0xec>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da40:	4a16      	ldr	r2, [pc, #88]	@ (800da9c <xPortStartScheduler+0xec>)
 800da42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	b2da      	uxtb	r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da4c:	4b14      	ldr	r3, [pc, #80]	@ (800daa0 <xPortStartScheduler+0xf0>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a13      	ldr	r2, [pc, #76]	@ (800daa0 <xPortStartScheduler+0xf0>)
 800da52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da58:	4b11      	ldr	r3, [pc, #68]	@ (800daa0 <xPortStartScheduler+0xf0>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a10      	ldr	r2, [pc, #64]	@ (800daa0 <xPortStartScheduler+0xf0>)
 800da5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800da62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da64:	f000 f8dc 	bl	800dc20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da68:	4b0e      	ldr	r3, [pc, #56]	@ (800daa4 <xPortStartScheduler+0xf4>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da6e:	f000 f8fb 	bl	800dc68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da72:	4b0d      	ldr	r3, [pc, #52]	@ (800daa8 <xPortStartScheduler+0xf8>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a0c      	ldr	r2, [pc, #48]	@ (800daa8 <xPortStartScheduler+0xf8>)
 800da78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800da7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da7e:	f7ff ff83 	bl	800d988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da82:	f7ff fa65 	bl	800cf50 <vTaskSwitchContext>
	prvTaskExitError();
 800da86:	f7ff ff37 	bl	800d8f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	e000e400 	.word	0xe000e400
 800da98:	200054c0 	.word	0x200054c0
 800da9c:	200054c4 	.word	0x200054c4
 800daa0:	e000ed20 	.word	0xe000ed20
 800daa4:	20000078 	.word	0x20000078
 800daa8:	e000ef34 	.word	0xe000ef34

0800daac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	b672      	cpsid	i
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	b662      	cpsie	i
 800dac6:	607b      	str	r3, [r7, #4]
}
 800dac8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800daca:	4b11      	ldr	r3, [pc, #68]	@ (800db10 <vPortEnterCritical+0x64>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3301      	adds	r3, #1
 800dad0:	4a0f      	ldr	r2, [pc, #60]	@ (800db10 <vPortEnterCritical+0x64>)
 800dad2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dad4:	4b0e      	ldr	r3, [pc, #56]	@ (800db10 <vPortEnterCritical+0x64>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d112      	bne.n	800db02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dadc:	4b0d      	ldr	r3, [pc, #52]	@ (800db14 <vPortEnterCritical+0x68>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00d      	beq.n	800db02 <vPortEnterCritical+0x56>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daea:	b672      	cpsid	i
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	b662      	cpsie	i
 800dafa:	603b      	str	r3, [r7, #0]
}
 800dafc:	bf00      	nop
 800dafe:	bf00      	nop
 800db00:	e7fd      	b.n	800dafe <vPortEnterCritical+0x52>
	}
}
 800db02:	bf00      	nop
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	20000078 	.word	0x20000078
 800db14:	e000ed04 	.word	0xe000ed04

0800db18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800db1e:	4b13      	ldr	r3, [pc, #76]	@ (800db6c <vPortExitCritical+0x54>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10d      	bne.n	800db42 <vPortExitCritical+0x2a>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	b672      	cpsid	i
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	b662      	cpsie	i
 800db3a:	607b      	str	r3, [r7, #4]
}
 800db3c:	bf00      	nop
 800db3e:	bf00      	nop
 800db40:	e7fd      	b.n	800db3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800db42:	4b0a      	ldr	r3, [pc, #40]	@ (800db6c <vPortExitCritical+0x54>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	3b01      	subs	r3, #1
 800db48:	4a08      	ldr	r2, [pc, #32]	@ (800db6c <vPortExitCritical+0x54>)
 800db4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db4c:	4b07      	ldr	r3, [pc, #28]	@ (800db6c <vPortExitCritical+0x54>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d105      	bne.n	800db60 <vPortExitCritical+0x48>
 800db54:	2300      	movs	r3, #0
 800db56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f383 8811 	msr	BASEPRI, r3
}
 800db5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	20000078 	.word	0x20000078

0800db70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db70:	f3ef 8009 	mrs	r0, PSP
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	4b15      	ldr	r3, [pc, #84]	@ (800dbd0 <pxCurrentTCBConst>)
 800db7a:	681a      	ldr	r2, [r3, #0]
 800db7c:	f01e 0f10 	tst.w	lr, #16
 800db80:	bf08      	it	eq
 800db82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8a:	6010      	str	r0, [r2, #0]
 800db8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800db94:	b672      	cpsid	i
 800db96:	f380 8811 	msr	BASEPRI, r0
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	b662      	cpsie	i
 800dba4:	f7ff f9d4 	bl	800cf50 <vTaskSwitchContext>
 800dba8:	f04f 0000 	mov.w	r0, #0
 800dbac:	f380 8811 	msr	BASEPRI, r0
 800dbb0:	bc09      	pop	{r0, r3}
 800dbb2:	6819      	ldr	r1, [r3, #0]
 800dbb4:	6808      	ldr	r0, [r1, #0]
 800dbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbba:	f01e 0f10 	tst.w	lr, #16
 800dbbe:	bf08      	it	eq
 800dbc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dbc4:	f380 8809 	msr	PSP, r0
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop

0800dbd0 <pxCurrentTCBConst>:
 800dbd0:	20005394 	.word	0x20005394
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dbd4:	bf00      	nop
 800dbd6:	bf00      	nop

0800dbd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe2:	b672      	cpsid	i
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	b662      	cpsie	i
 800dbf2:	607b      	str	r3, [r7, #4]
}
 800dbf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dbf6:	f7ff f8ef 	bl	800cdd8 <xTaskIncrementTick>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d003      	beq.n	800dc08 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc00:	4b06      	ldr	r3, [pc, #24]	@ (800dc1c <xPortSysTickHandler+0x44>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	f383 8811 	msr	BASEPRI, r3
}
 800dc12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dc14:	bf00      	nop
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	e000ed04 	.word	0xe000ed04

0800dc20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dc20:	b480      	push	{r7}
 800dc22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dc24:	4b0b      	ldr	r3, [pc, #44]	@ (800dc54 <vPortSetupTimerInterrupt+0x34>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dc2a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc58 <vPortSetupTimerInterrupt+0x38>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dc30:	4b0a      	ldr	r3, [pc, #40]	@ (800dc5c <vPortSetupTimerInterrupt+0x3c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a0a      	ldr	r2, [pc, #40]	@ (800dc60 <vPortSetupTimerInterrupt+0x40>)
 800dc36:	fba2 2303 	umull	r2, r3, r2, r3
 800dc3a:	099b      	lsrs	r3, r3, #6
 800dc3c:	4a09      	ldr	r2, [pc, #36]	@ (800dc64 <vPortSetupTimerInterrupt+0x44>)
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc42:	4b04      	ldr	r3, [pc, #16]	@ (800dc54 <vPortSetupTimerInterrupt+0x34>)
 800dc44:	2207      	movs	r2, #7
 800dc46:	601a      	str	r2, [r3, #0]
}
 800dc48:	bf00      	nop
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	e000e010 	.word	0xe000e010
 800dc58:	e000e018 	.word	0xe000e018
 800dc5c:	20000058 	.word	0x20000058
 800dc60:	10624dd3 	.word	0x10624dd3
 800dc64:	e000e014 	.word	0xe000e014

0800dc68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dc78 <vPortEnableVFP+0x10>
 800dc6c:	6801      	ldr	r1, [r0, #0]
 800dc6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dc72:	6001      	str	r1, [r0, #0]
 800dc74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc76:	bf00      	nop
 800dc78:	e000ed88 	.word	0xe000ed88

0800dc7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc82:	f3ef 8305 	mrs	r3, IPSR
 800dc86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b0f      	cmp	r3, #15
 800dc8c:	d917      	bls.n	800dcbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc8e:	4a1a      	ldr	r2, [pc, #104]	@ (800dcf8 <vPortValidateInterruptPriority+0x7c>)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4413      	add	r3, r2
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc98:	4b18      	ldr	r3, [pc, #96]	@ (800dcfc <vPortValidateInterruptPriority+0x80>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	7afa      	ldrb	r2, [r7, #11]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d20d      	bcs.n	800dcbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca6:	b672      	cpsid	i
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	b662      	cpsie	i
 800dcb6:	607b      	str	r3, [r7, #4]
}
 800dcb8:	bf00      	nop
 800dcba:	bf00      	nop
 800dcbc:	e7fd      	b.n	800dcba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dcbe:	4b10      	ldr	r3, [pc, #64]	@ (800dd00 <vPortValidateInterruptPriority+0x84>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd04 <vPortValidateInterruptPriority+0x88>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d90d      	bls.n	800dcea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd2:	b672      	cpsid	i
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	b662      	cpsie	i
 800dce2:	603b      	str	r3, [r7, #0]
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
 800dce8:	e7fd      	b.n	800dce6 <vPortValidateInterruptPriority+0x6a>
	}
 800dcea:	bf00      	nop
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	e000e3f0 	.word	0xe000e3f0
 800dcfc:	200054c0 	.word	0x200054c0
 800dd00:	e000ed0c 	.word	0xe000ed0c
 800dd04:	200054c4 	.word	0x200054c4

0800dd08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08a      	sub	sp, #40	@ 0x28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd14:	f7fe ff90 	bl	800cc38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd18:	4b5d      	ldr	r3, [pc, #372]	@ (800de90 <pvPortMalloc+0x188>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd20:	f000 f920 	bl	800df64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd24:	4b5b      	ldr	r3, [pc, #364]	@ (800de94 <pvPortMalloc+0x18c>)
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f040 8094 	bne.w	800de5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d020      	beq.n	800dd7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800dd38:	2208      	movs	r2, #8
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f003 0307 	and.w	r3, r3, #7
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d017      	beq.n	800dd7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f023 0307 	bic.w	r3, r3, #7
 800dd50:	3308      	adds	r3, #8
 800dd52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f003 0307 	and.w	r3, r3, #7
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00d      	beq.n	800dd7a <pvPortMalloc+0x72>
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd62:	b672      	cpsid	i
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	b662      	cpsie	i
 800dd72:	617b      	str	r3, [r7, #20]
}
 800dd74:	bf00      	nop
 800dd76:	bf00      	nop
 800dd78:	e7fd      	b.n	800dd76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d06c      	beq.n	800de5a <pvPortMalloc+0x152>
 800dd80:	4b45      	ldr	r3, [pc, #276]	@ (800de98 <pvPortMalloc+0x190>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d867      	bhi.n	800de5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd8a:	4b44      	ldr	r3, [pc, #272]	@ (800de9c <pvPortMalloc+0x194>)
 800dd8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd8e:	4b43      	ldr	r3, [pc, #268]	@ (800de9c <pvPortMalloc+0x194>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd94:	e004      	b.n	800dda0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800dd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d903      	bls.n	800ddb2 <pvPortMalloc+0xaa>
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d1f1      	bne.n	800dd96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddb2:	4b37      	ldr	r3, [pc, #220]	@ (800de90 <pvPortMalloc+0x188>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d04e      	beq.n	800de5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2208      	movs	r2, #8
 800ddc2:	4413      	add	r3, r2
 800ddc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ddce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd0:	685a      	ldr	r2, [r3, #4]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	1ad2      	subs	r2, r2, r3
 800ddd6:	2308      	movs	r3, #8
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d922      	bls.n	800de24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ddde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	4413      	add	r3, r2
 800dde4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	f003 0307 	and.w	r3, r3, #7
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00d      	beq.n	800de0c <pvPortMalloc+0x104>
	__asm volatile
 800ddf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf4:	b672      	cpsid	i
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	b662      	cpsie	i
 800de04:	613b      	str	r3, [r7, #16]
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	e7fd      	b.n	800de08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	685a      	ldr	r2, [r3, #4]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	1ad2      	subs	r2, r2, r3
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de1e:	69b8      	ldr	r0, [r7, #24]
 800de20:	f000 f902 	bl	800e028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de24:	4b1c      	ldr	r3, [pc, #112]	@ (800de98 <pvPortMalloc+0x190>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	4a1a      	ldr	r2, [pc, #104]	@ (800de98 <pvPortMalloc+0x190>)
 800de30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de32:	4b19      	ldr	r3, [pc, #100]	@ (800de98 <pvPortMalloc+0x190>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	4b1a      	ldr	r3, [pc, #104]	@ (800dea0 <pvPortMalloc+0x198>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d203      	bcs.n	800de46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de3e:	4b16      	ldr	r3, [pc, #88]	@ (800de98 <pvPortMalloc+0x190>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a17      	ldr	r2, [pc, #92]	@ (800dea0 <pvPortMalloc+0x198>)
 800de44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <pvPortMalloc+0x18c>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	431a      	orrs	r2, r3
 800de50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de5a:	f7fe fefb 	bl	800cc54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	f003 0307 	and.w	r3, r3, #7
 800de64:	2b00      	cmp	r3, #0
 800de66:	d00d      	beq.n	800de84 <pvPortMalloc+0x17c>
	__asm volatile
 800de68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6c:	b672      	cpsid	i
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	b662      	cpsie	i
 800de7c:	60fb      	str	r3, [r7, #12]
}
 800de7e:	bf00      	nop
 800de80:	bf00      	nop
 800de82:	e7fd      	b.n	800de80 <pvPortMalloc+0x178>
	return pvReturn;
 800de84:	69fb      	ldr	r3, [r7, #28]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3728      	adds	r7, #40	@ 0x28
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2000b7e0 	.word	0x2000b7e0
 800de94:	2000b7ec 	.word	0x2000b7ec
 800de98:	2000b7e4 	.word	0x2000b7e4
 800de9c:	2000b7d8 	.word	0x2000b7d8
 800dea0:	2000b7e8 	.word	0x2000b7e8

0800dea4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d04e      	beq.n	800df54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800deb6:	2308      	movs	r3, #8
 800deb8:	425b      	negs	r3, r3
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	4413      	add	r3, r2
 800debe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	685a      	ldr	r2, [r3, #4]
 800dec8:	4b24      	ldr	r3, [pc, #144]	@ (800df5c <vPortFree+0xb8>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4013      	ands	r3, r2
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10d      	bne.n	800deee <vPortFree+0x4a>
	__asm volatile
 800ded2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded6:	b672      	cpsid	i
 800ded8:	f383 8811 	msr	BASEPRI, r3
 800dedc:	f3bf 8f6f 	isb	sy
 800dee0:	f3bf 8f4f 	dsb	sy
 800dee4:	b662      	cpsie	i
 800dee6:	60fb      	str	r3, [r7, #12]
}
 800dee8:	bf00      	nop
 800deea:	bf00      	nop
 800deec:	e7fd      	b.n	800deea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00d      	beq.n	800df12 <vPortFree+0x6e>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defa:	b672      	cpsid	i
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	b662      	cpsie	i
 800df0a:	60bb      	str	r3, [r7, #8]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	685a      	ldr	r2, [r3, #4]
 800df16:	4b11      	ldr	r3, [pc, #68]	@ (800df5c <vPortFree+0xb8>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4013      	ands	r3, r2
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d019      	beq.n	800df54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d115      	bne.n	800df54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	4b0b      	ldr	r3, [pc, #44]	@ (800df5c <vPortFree+0xb8>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	43db      	mvns	r3, r3
 800df32:	401a      	ands	r2, r3
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df38:	f7fe fe7e 	bl	800cc38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	685a      	ldr	r2, [r3, #4]
 800df40:	4b07      	ldr	r3, [pc, #28]	@ (800df60 <vPortFree+0xbc>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4413      	add	r3, r2
 800df46:	4a06      	ldr	r2, [pc, #24]	@ (800df60 <vPortFree+0xbc>)
 800df48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df4a:	6938      	ldr	r0, [r7, #16]
 800df4c:	f000 f86c 	bl	800e028 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800df50:	f7fe fe80 	bl	800cc54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df54:	bf00      	nop
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	2000b7ec 	.word	0x2000b7ec
 800df60:	2000b7e4 	.word	0x2000b7e4

0800df64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df64:	b480      	push	{r7}
 800df66:	b085      	sub	sp, #20
 800df68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df6a:	f246 3310 	movw	r3, #25360	@ 0x6310
 800df6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df70:	4b27      	ldr	r3, [pc, #156]	@ (800e010 <prvHeapInit+0xac>)
 800df72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00c      	beq.n	800df98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3307      	adds	r3, #7
 800df82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0307 	bic.w	r3, r3, #7
 800df8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	1ad3      	subs	r3, r2, r3
 800df92:	4a1f      	ldr	r2, [pc, #124]	@ (800e010 <prvHeapInit+0xac>)
 800df94:	4413      	add	r3, r2
 800df96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df9c:	4a1d      	ldr	r2, [pc, #116]	@ (800e014 <prvHeapInit+0xb0>)
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfa2:	4b1c      	ldr	r3, [pc, #112]	@ (800e014 <prvHeapInit+0xb0>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	68ba      	ldr	r2, [r7, #8]
 800dfac:	4413      	add	r3, r2
 800dfae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dfb0:	2208      	movs	r2, #8
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	1a9b      	subs	r3, r3, r2
 800dfb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f023 0307 	bic.w	r3, r3, #7
 800dfbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4a15      	ldr	r2, [pc, #84]	@ (800e018 <prvHeapInit+0xb4>)
 800dfc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dfc6:	4b14      	ldr	r3, [pc, #80]	@ (800e018 <prvHeapInit+0xb4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dfce:	4b12      	ldr	r3, [pc, #72]	@ (800e018 <prvHeapInit+0xb4>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	1ad2      	subs	r2, r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dfe4:	4b0c      	ldr	r3, [pc, #48]	@ (800e018 <prvHeapInit+0xb4>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	4a0a      	ldr	r2, [pc, #40]	@ (800e01c <prvHeapInit+0xb8>)
 800dff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	4a09      	ldr	r2, [pc, #36]	@ (800e020 <prvHeapInit+0xbc>)
 800dffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dffc:	4b09      	ldr	r3, [pc, #36]	@ (800e024 <prvHeapInit+0xc0>)
 800dffe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e002:	601a      	str	r2, [r3, #0]
}
 800e004:	bf00      	nop
 800e006:	3714      	adds	r7, #20
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	200054c8 	.word	0x200054c8
 800e014:	2000b7d8 	.word	0x2000b7d8
 800e018:	2000b7e0 	.word	0x2000b7e0
 800e01c:	2000b7e8 	.word	0x2000b7e8
 800e020:	2000b7e4 	.word	0x2000b7e4
 800e024:	2000b7ec 	.word	0x2000b7ec

0800e028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e030:	4b28      	ldr	r3, [pc, #160]	@ (800e0d4 <prvInsertBlockIntoFreeList+0xac>)
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	e002      	b.n	800e03c <prvInsertBlockIntoFreeList+0x14>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	429a      	cmp	r2, r3
 800e044:	d8f7      	bhi.n	800e036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	4413      	add	r3, r2
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	429a      	cmp	r2, r3
 800e056:	d108      	bne.n	800e06a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	441a      	add	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	68ba      	ldr	r2, [r7, #8]
 800e074:	441a      	add	r2, r3
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d118      	bne.n	800e0b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	4b15      	ldr	r3, [pc, #84]	@ (800e0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d00d      	beq.n	800e0a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	441a      	add	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	601a      	str	r2, [r3, #0]
 800e0a4:	e008      	b.n	800e0b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	e003      	b.n	800e0b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d002      	beq.n	800e0c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	2000b7d8 	.word	0x2000b7d8
 800e0d8:	2000b7e0 	.word	0x2000b7e0

0800e0dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	330c      	adds	r3, #12
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f002 fb67 	bl	80107c4 <tcpip_send_msg_wait_sem>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d103      	bne.n	800e10a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e108:	e001      	b.n	800e10e <netconn_apimsg+0x32>
  }
  return err;
 800e10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b08c      	sub	sp, #48	@ 0x30
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	4603      	mov	r3, r0
 800e120:	603a      	str	r2, [r7, #0]
 800e122:	71fb      	strb	r3, [r7, #7]
 800e124:	460b      	mov	r3, r1
 800e126:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e128:	79fb      	ldrb	r3, [r7, #7]
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f001 f951 	bl	800f3d4 <netconn_alloc>
 800e132:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d054      	beq.n	800e1e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e13a:	79bb      	ldrb	r3, [r7, #6]
 800e13c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e140:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e142:	f107 0308 	add.w	r3, r7, #8
 800e146:	4619      	mov	r1, r3
 800e148:	4829      	ldr	r0, [pc, #164]	@ (800e1f0 <netconn_new_with_proto_and_callback+0xd8>)
 800e14a:	f7ff ffc7 	bl	800e0dc <netconn_apimsg>
 800e14e:	4603      	mov	r3, r0
 800e150:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e154:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d043      	beq.n	800e1e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d005      	beq.n	800e170 <netconn_new_with_proto_and_callback+0x58>
 800e164:	4b23      	ldr	r3, [pc, #140]	@ (800e1f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e166:	22a3      	movs	r2, #163	@ 0xa3
 800e168:	4923      	ldr	r1, [pc, #140]	@ (800e1f8 <netconn_new_with_proto_and_callback+0xe0>)
 800e16a:	4824      	ldr	r0, [pc, #144]	@ (800e1fc <netconn_new_with_proto_and_callback+0xe4>)
 800e16c:	f00f f98c 	bl	801d488 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e172:	3310      	adds	r3, #16
 800e174:	4618      	mov	r0, r3
 800e176:	f00e faf6 	bl	801c766 <sys_mbox_valid>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d105      	bne.n	800e18c <netconn_new_with_proto_and_callback+0x74>
 800e180:	4b1c      	ldr	r3, [pc, #112]	@ (800e1f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e182:	22a4      	movs	r2, #164	@ 0xa4
 800e184:	491e      	ldr	r1, [pc, #120]	@ (800e200 <netconn_new_with_proto_and_callback+0xe8>)
 800e186:	481d      	ldr	r0, [pc, #116]	@ (800e1fc <netconn_new_with_proto_and_callback+0xe4>)
 800e188:	f00f f97e 	bl	801d488 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18e:	3314      	adds	r3, #20
 800e190:	4618      	mov	r0, r3
 800e192:	f00e fae8 	bl	801c766 <sys_mbox_valid>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d005      	beq.n	800e1a8 <netconn_new_with_proto_and_callback+0x90>
 800e19c:	4b15      	ldr	r3, [pc, #84]	@ (800e1f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e19e:	22a6      	movs	r2, #166	@ 0xa6
 800e1a0:	4918      	ldr	r1, [pc, #96]	@ (800e204 <netconn_new_with_proto_and_callback+0xec>)
 800e1a2:	4816      	ldr	r0, [pc, #88]	@ (800e1fc <netconn_new_with_proto_and_callback+0xe4>)
 800e1a4:	f00f f970 	bl	801d488 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1aa:	330c      	adds	r3, #12
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f00e fb6b 	bl	801c888 <sys_sem_valid>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d105      	bne.n	800e1c4 <netconn_new_with_proto_and_callback+0xac>
 800e1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e1f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e1ba:	22a9      	movs	r2, #169	@ 0xa9
 800e1bc:	4912      	ldr	r1, [pc, #72]	@ (800e208 <netconn_new_with_proto_and_callback+0xf0>)
 800e1be:	480f      	ldr	r0, [pc, #60]	@ (800e1fc <netconn_new_with_proto_and_callback+0xe4>)
 800e1c0:	f00f f962 	bl	801d488 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	330c      	adds	r3, #12
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f00e fb50 	bl	801c86e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d0:	3310      	adds	r3, #16
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f00e fa40 	bl	801c658 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e1d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1da:	2007      	movs	r0, #7
 800e1dc:	f003 fef0 	bl	8011fc0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	e000      	b.n	800e1e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3730      	adds	r7, #48	@ 0x30
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	0800f3a9 	.word	0x0800f3a9
 800e1f4:	0801fb10 	.word	0x0801fb10
 800e1f8:	0801fb44 	.word	0x0801fb44
 800e1fc:	0801fb68 	.word	0x0801fb68
 800e200:	0801fb90 	.word	0x0801fb90
 800e204:	0801fba8 	.word	0x0801fba8
 800e208:	0801fbcc 	.word	0x0801fbcc

0800e20c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08c      	sub	sp, #48	@ 0x30
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d101      	bne.n	800e21e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	e014      	b.n	800e248 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e222:	2329      	movs	r3, #41	@ 0x29
 800e224:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e226:	f107 030c 	add.w	r3, r7, #12
 800e22a:	4619      	mov	r1, r3
 800e22c:	4808      	ldr	r0, [pc, #32]	@ (800e250 <netconn_prepare_delete+0x44>)
 800e22e:	f7ff ff55 	bl	800e0dc <netconn_apimsg>
 800e232:	4603      	mov	r3, r0
 800e234:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e238:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <netconn_prepare_delete+0x3a>
    return err;
 800e240:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e244:	e000      	b.n	800e248 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3730      	adds	r7, #48	@ 0x30
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	0800f915 	.word	0x0800f915

0800e254 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <netconn_delete+0x12>
    return ERR_OK;
 800e262:	2300      	movs	r3, #0
 800e264:	e00d      	b.n	800e282 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7ff ffd0 	bl	800e20c <netconn_prepare_delete>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d102      	bne.n	800e27e <netconn_delete+0x2a>
    netconn_free(conn);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f001 f919 	bl	800f4b0 <netconn_free>
  }
  return err;
 800e27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
	...

0800e28c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b08e      	sub	sp, #56	@ 0x38
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	4613      	mov	r3, r2
 800e298:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d109      	bne.n	800e2b4 <netconn_bind+0x28>
 800e2a0:	4b11      	ldr	r3, [pc, #68]	@ (800e2e8 <netconn_bind+0x5c>)
 800e2a2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e2a6:	4911      	ldr	r1, [pc, #68]	@ (800e2ec <netconn_bind+0x60>)
 800e2a8:	4811      	ldr	r0, [pc, #68]	@ (800e2f0 <netconn_bind+0x64>)
 800e2aa:	f00f f8ed 	bl	801d488 <iprintf>
 800e2ae:	f06f 030f 	mvn.w	r3, #15
 800e2b2:	e015      	b.n	800e2e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f4 <netconn_bind+0x68>)
 800e2bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e2c6:	88fb      	ldrh	r3, [r7, #6]
 800e2c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e2ca:	f107 0314 	add.w	r3, r7, #20
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4809      	ldr	r0, [pc, #36]	@ (800e2f8 <netconn_bind+0x6c>)
 800e2d2:	f7ff ff03 	bl	800e0dc <netconn_apimsg>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e2dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3738      	adds	r7, #56	@ 0x38
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	0801fb10 	.word	0x0801fb10
 800e2ec:	0801fc48 	.word	0x0801fc48
 800e2f0:	0801fb68 	.word	0x0801fb68
 800e2f4:	08024a1c 	.word	0x08024a1c
 800e2f8:	0800fadd 	.word	0x0800fadd

0800e2fc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b08c      	sub	sp, #48	@ 0x30
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d109      	bne.n	800e322 <netconn_listen_with_backlog+0x26>
 800e30e:	4b0d      	ldr	r3, [pc, #52]	@ (800e344 <netconn_listen_with_backlog+0x48>)
 800e310:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800e314:	490c      	ldr	r1, [pc, #48]	@ (800e348 <netconn_listen_with_backlog+0x4c>)
 800e316:	480d      	ldr	r0, [pc, #52]	@ (800e34c <netconn_listen_with_backlog+0x50>)
 800e318:	f00f f8b6 	bl	801d488 <iprintf>
 800e31c:	f06f 030f 	mvn.w	r3, #15
 800e320:	e00c      	b.n	800e33c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e326:	f107 030c 	add.w	r3, r7, #12
 800e32a:	4619      	mov	r1, r3
 800e32c:	4808      	ldr	r0, [pc, #32]	@ (800e350 <netconn_listen_with_backlog+0x54>)
 800e32e:	f7ff fed5 	bl	800e0dc <netconn_apimsg>
 800e332:	4603      	mov	r3, r0
 800e334:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e338:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3730      	adds	r7, #48	@ 0x30
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	0801fb10 	.word	0x0801fb10
 800e348:	0801fcc8 	.word	0x0801fcc8
 800e34c:	0801fb68 	.word	0x0801fb68
 800e350:	0800fb51 	.word	0x0800fb51

0800e354 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d109      	bne.n	800e378 <netconn_accept+0x24>
 800e364:	4b3d      	ldr	r3, [pc, #244]	@ (800e45c <netconn_accept+0x108>)
 800e366:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e36a:	493d      	ldr	r1, [pc, #244]	@ (800e460 <netconn_accept+0x10c>)
 800e36c:	483d      	ldr	r0, [pc, #244]	@ (800e464 <netconn_accept+0x110>)
 800e36e:	f00f f88b 	bl	801d488 <iprintf>
 800e372:	f06f 030f 	mvn.w	r3, #15
 800e376:	e06c      	b.n	800e452 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <netconn_accept+0x44>
 800e384:	4b35      	ldr	r3, [pc, #212]	@ (800e45c <netconn_accept+0x108>)
 800e386:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800e38a:	4937      	ldr	r1, [pc, #220]	@ (800e468 <netconn_accept+0x114>)
 800e38c:	4835      	ldr	r0, [pc, #212]	@ (800e464 <netconn_accept+0x110>)
 800e38e:	f00f f87b 	bl	801d488 <iprintf>
 800e392:	f06f 030f 	mvn.w	r3, #15
 800e396:	e05c      	b.n	800e452 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e398:	6878      	ldr	r0, [r7, #4]
 800e39a:	f000 fb9a 	bl	800ead2 <netconn_err>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e3a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d002      	beq.n	800e3b0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e3aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ae:	e050      	b.n	800e452 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	3314      	adds	r3, #20
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f00e f9d6 	bl	801c766 <sys_mbox_valid>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d005      	beq.n	800e3cc <netconn_accept+0x78>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7f1b      	ldrb	r3, [r3, #28]
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e3cc:	f06f 030e 	mvn.w	r3, #14
 800e3d0:	e03f      	b.n	800e452 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	7f1b      	ldrb	r3, [r3, #28]
 800e3d6:	f003 0302 	and.w	r3, r3, #2
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00e      	beq.n	800e3fc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3314      	adds	r3, #20
 800e3e2:	f107 020c 	add.w	r2, r7, #12
 800e3e6:	4611      	mov	r1, r2
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f00e f9a0 	bl	801c72e <sys_arch_mbox_tryfetch>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f4:	d10a      	bne.n	800e40c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e3f6:	f06f 0306 	mvn.w	r3, #6
 800e3fa:	e02a      	b.n	800e452 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3314      	adds	r3, #20
 800e400:	f107 010c 	add.w	r1, r7, #12
 800e404:	2200      	movs	r2, #0
 800e406:	4618      	mov	r0, r3
 800e408:	f00e f952 	bl	801c6b0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e410:	2b00      	cmp	r3, #0
 800e412:	d005      	beq.n	800e420 <netconn_accept+0xcc>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e418:	2200      	movs	r2, #0
 800e41a:	2101      	movs	r1, #1
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f107 0213 	add.w	r2, r7, #19
 800e426:	4611      	mov	r1, r2
 800e428:	4618      	mov	r0, r3
 800e42a:	f000 fba3 	bl	800eb74 <lwip_netconn_is_err_msg>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e438:	e00b      	b.n	800e452 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e440:	f06f 030e 	mvn.w	r3, #14
 800e444:	e005      	b.n	800e452 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e450:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e452:	4618      	mov	r0, r3
 800e454:	3718      	adds	r7, #24
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
 800e45a:	bf00      	nop
 800e45c:	0801fb10 	.word	0x0801fb10
 800e460:	0801fce8 	.word	0x0801fce8
 800e464:	0801fb68 	.word	0x0801fb68
 800e468:	0801fd08 	.word	0x0801fd08

0800e46c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d109      	bne.n	800e498 <netconn_recv_data+0x2c>
 800e484:	4b58      	ldr	r3, [pc, #352]	@ (800e5e8 <netconn_recv_data+0x17c>)
 800e486:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e48a:	4958      	ldr	r1, [pc, #352]	@ (800e5ec <netconn_recv_data+0x180>)
 800e48c:	4858      	ldr	r0, [pc, #352]	@ (800e5f0 <netconn_recv_data+0x184>)
 800e48e:	f00e fffb 	bl	801d488 <iprintf>
 800e492:	f06f 030f 	mvn.w	r3, #15
 800e496:	e0a2      	b.n	800e5de <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d109      	bne.n	800e4b8 <netconn_recv_data+0x4c>
 800e4a4:	4b50      	ldr	r3, [pc, #320]	@ (800e5e8 <netconn_recv_data+0x17c>)
 800e4a6:	f240 224a 	movw	r2, #586	@ 0x24a
 800e4aa:	4952      	ldr	r1, [pc, #328]	@ (800e5f4 <netconn_recv_data+0x188>)
 800e4ac:	4850      	ldr	r0, [pc, #320]	@ (800e5f0 <netconn_recv_data+0x184>)
 800e4ae:	f00e ffeb 	bl	801d488 <iprintf>
 800e4b2:	f06f 030f 	mvn.w	r3, #15
 800e4b6:	e092      	b.n	800e5de <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3310      	adds	r3, #16
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f00e f952 	bl	801c766 <sys_mbox_valid>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10e      	bne.n	800e4e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f000 fb02 	bl	800ead2 <netconn_err>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e4d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d002      	beq.n	800e4e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e4da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e4de:	e07e      	b.n	800e5de <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e4e0:	f06f 030a 	mvn.w	r3, #10
 800e4e4:	e07b      	b.n	800e5de <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	7f1b      	ldrb	r3, [r3, #28]
 800e4ea:	f003 0302 	and.w	r3, r3, #2
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10f      	bne.n	800e512 <netconn_recv_data+0xa6>
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	f003 0304 	and.w	r3, r3, #4
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d10a      	bne.n	800e512 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	7f1b      	ldrb	r3, [r3, #28]
 800e500:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d023      	beq.n	800e55a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	3310      	adds	r3, #16
 800e516:	f107 0218 	add.w	r2, r7, #24
 800e51a:	4611      	mov	r1, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f00e f906 	bl	801c72e <sys_arch_mbox_tryfetch>
 800e522:	4603      	mov	r3, r0
 800e524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e528:	d11f      	bne.n	800e56a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e52a:	68f8      	ldr	r0, [r7, #12]
 800e52c:	f000 fad1 	bl	800ead2 <netconn_err>
 800e530:	4603      	mov	r3, r0
 800e532:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e534:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e53c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e540:	e04d      	b.n	800e5de <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	7f1b      	ldrb	r3, [r3, #28]
 800e546:	f003 0301 	and.w	r3, r3, #1
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d002      	beq.n	800e554 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e54e:	f06f 030a 	mvn.w	r3, #10
 800e552:	e044      	b.n	800e5de <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e554:	f06f 0306 	mvn.w	r3, #6
 800e558:	e041      	b.n	800e5de <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	3310      	adds	r3, #16
 800e55e:	f107 0118 	add.w	r1, r7, #24
 800e562:	2200      	movs	r2, #0
 800e564:	4618      	mov	r0, r3
 800e566:	f00e f8a3 	bl	801c6b0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e572:	2b10      	cmp	r3, #16
 800e574:	d117      	bne.n	800e5a6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	f107 0217 	add.w	r2, r7, #23
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 faf8 	bl	800eb74 <lwip_netconn_is_err_msg>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d009      	beq.n	800e59e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e58a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e58e:	f113 0f0f 	cmn.w	r3, #15
 800e592:	d101      	bne.n	800e598 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	e022      	b.n	800e5de <netconn_recv_data+0x172>
      }
      return err;
 800e598:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e59c:	e01f      	b.n	800e5de <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	891b      	ldrh	r3, [r3, #8]
 800e5a2:	83fb      	strh	r3, [r7, #30]
 800e5a4:	e00d      	b.n	800e5c2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e5a6:	69bb      	ldr	r3, [r7, #24]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <netconn_recv_data+0x14e>
 800e5ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e5e8 <netconn_recv_data+0x17c>)
 800e5ae:	f240 2291 	movw	r2, #657	@ 0x291
 800e5b2:	4911      	ldr	r1, [pc, #68]	@ (800e5f8 <netconn_recv_data+0x18c>)
 800e5b4:	480e      	ldr	r0, [pc, #56]	@ (800e5f0 <netconn_recv_data+0x184>)
 800e5b6:	f00e ff67 	bl	801d488 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	891b      	ldrh	r3, [r3, #8]
 800e5c0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d005      	beq.n	800e5d6 <netconn_recv_data+0x16a>
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ce:	8bfa      	ldrh	r2, [r7, #30]
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e5dc:	2300      	movs	r3, #0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3720      	adds	r7, #32
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	0801fb10 	.word	0x0801fb10
 800e5ec:	0801fd28 	.word	0x0801fd28
 800e5f0:	0801fb68 	.word	0x0801fb68
 800e5f4:	0801fd48 	.word	0x0801fd48
 800e5f8:	0801fd64 	.word	0x0801fd64

0800e5fc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d005      	beq.n	800e61a <netconn_tcp_recvd_msg+0x1e>
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e616:	2b10      	cmp	r3, #16
 800e618:	d009      	beq.n	800e62e <netconn_tcp_recvd_msg+0x32>
 800e61a:	4b0c      	ldr	r3, [pc, #48]	@ (800e64c <netconn_tcp_recvd_msg+0x50>)
 800e61c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e620:	490b      	ldr	r1, [pc, #44]	@ (800e650 <netconn_tcp_recvd_msg+0x54>)
 800e622:	480c      	ldr	r0, [pc, #48]	@ (800e654 <netconn_tcp_recvd_msg+0x58>)
 800e624:	f00e ff30 	bl	801d488 <iprintf>
 800e628:	f06f 030f 	mvn.w	r3, #15
 800e62c:	e00a      	b.n	800e644 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e63a:	6879      	ldr	r1, [r7, #4]
 800e63c:	4806      	ldr	r0, [pc, #24]	@ (800e658 <netconn_tcp_recvd_msg+0x5c>)
 800e63e:	f7ff fd4d 	bl	800e0dc <netconn_apimsg>
 800e642:	4603      	mov	r3, r0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	0801fb10 	.word	0x0801fb10
 800e650:	0801fd70 	.word	0x0801fd70
 800e654:	0801fb68 	.word	0x0801fb68
 800e658:	0800fd1b 	.word	0x0800fd1b

0800e65c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b090      	sub	sp, #64	@ 0x40
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4613      	mov	r3, r2
 800e668:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3310      	adds	r3, #16
 800e66e:	4618      	mov	r0, r3
 800e670:	f00e f879 	bl	801c766 <sys_mbox_valid>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d102      	bne.n	800e680 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e67a:	f06f 030a 	mvn.w	r3, #10
 800e67e:	e06d      	b.n	800e75c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	7f1b      	ldrb	r3, [r3, #28]
 800e684:	b25b      	sxtb	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	da07      	bge.n	800e69a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	7f1b      	ldrb	r3, [r3, #28]
 800e68e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e692:	b2da      	uxtb	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e698:	e039      	b.n	800e70e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e69a:	79fb      	ldrb	r3, [r7, #7]
 800e69c:	461a      	mov	r2, r3
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f7ff fee3 	bl	800e46c <netconn_recv_data>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e6ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e6b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e6b8:	e050      	b.n	800e75c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	f003 0308 	and.w	r3, r3, #8
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10e      	bne.n	800e6e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <netconn_recv_data_tcp+0x7a>
 800e6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d2:	891b      	ldrh	r3, [r3, #8]
 800e6d4:	e000      	b.n	800e6d8 <netconn_recv_data_tcp+0x7c>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e6da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e6dc:	f107 0214 	add.w	r2, r7, #20
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff ff8a 	bl	800e5fc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d134      	bne.n	800e758 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	f003 0310 	and.w	r3, r3, #16
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	7f1b      	ldrb	r3, [r3, #28]
 800e6fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e700:	b2da      	uxtb	r2, r3
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e706:	f06f 0306 	mvn.w	r3, #6
 800e70a:	e027      	b.n	800e75c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e70c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e712:	2b00      	cmp	r3, #0
 800e714:	d005      	beq.n	800e722 <netconn_recv_data_tcp+0xc6>
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71a:	2200      	movs	r2, #0
 800e71c:	2101      	movs	r1, #1
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10f      	bne.n	800e74a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e72a:	68f8      	ldr	r0, [r7, #12]
 800e72c:	f000 f9d1 	bl	800ead2 <netconn_err>
 800e730:	4603      	mov	r3, r0
 800e732:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800e736:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <netconn_recv_data_tcp+0xe8>
          return err;
 800e73e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e742:	e00b      	b.n	800e75c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e744:	f06f 030d 	mvn.w	r3, #13
 800e748:	e008      	b.n	800e75c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e74a:	2101      	movs	r1, #1
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f983 	bl	800ea58 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e752:	f06f 030e 	mvn.w	r3, #14
 800e756:	e001      	b.n	800e75c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e758:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3740      	adds	r7, #64	@ 0x40
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b086      	sub	sp, #24
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e76e:	2300      	movs	r3, #0
 800e770:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d109      	bne.n	800e78c <netconn_recv+0x28>
 800e778:	4b32      	ldr	r3, [pc, #200]	@ (800e844 <netconn_recv+0xe0>)
 800e77a:	f240 3263 	movw	r2, #867	@ 0x363
 800e77e:	4932      	ldr	r1, [pc, #200]	@ (800e848 <netconn_recv+0xe4>)
 800e780:	4832      	ldr	r0, [pc, #200]	@ (800e84c <netconn_recv+0xe8>)
 800e782:	f00e fe81 	bl	801d488 <iprintf>
 800e786:	f06f 030f 	mvn.w	r3, #15
 800e78a:	e056      	b.n	800e83a <netconn_recv+0xd6>
  *new_buf = NULL;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	2200      	movs	r2, #0
 800e790:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d109      	bne.n	800e7ac <netconn_recv+0x48>
 800e798:	4b2a      	ldr	r3, [pc, #168]	@ (800e844 <netconn_recv+0xe0>)
 800e79a:	f240 3265 	movw	r2, #869	@ 0x365
 800e79e:	492c      	ldr	r1, [pc, #176]	@ (800e850 <netconn_recv+0xec>)
 800e7a0:	482a      	ldr	r0, [pc, #168]	@ (800e84c <netconn_recv+0xe8>)
 800e7a2:	f00e fe71 	bl	801d488 <iprintf>
 800e7a6:	f06f 030f 	mvn.w	r3, #15
 800e7aa:	e046      	b.n	800e83a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7b4:	2b10      	cmp	r3, #16
 800e7b6:	d13a      	bne.n	800e82e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e7bc:	2006      	movs	r0, #6
 800e7be:	f003 fb89 	bl	8011ed4 <memp_malloc>
 800e7c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d102      	bne.n	800e7d0 <netconn_recv+0x6c>
      return ERR_MEM;
 800e7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ce:	e034      	b.n	800e83a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800e7d0:	f107 030c 	add.w	r3, r7, #12
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7ff ff3f 	bl	800e65c <netconn_recv_data_tcp>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d006      	beq.n	800e7f8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800e7ea:	6979      	ldr	r1, [r7, #20]
 800e7ec:	2006      	movs	r0, #6
 800e7ee:	f003 fbe7 	bl	8011fc0 <memp_free>
      return err;
 800e7f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7f6:	e020      	b.n	800e83a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <netconn_recv+0xa8>
 800e7fe:	4b11      	ldr	r3, [pc, #68]	@ (800e844 <netconn_recv+0xe0>)
 800e800:	f240 3279 	movw	r2, #889	@ 0x379
 800e804:	4913      	ldr	r1, [pc, #76]	@ (800e854 <netconn_recv+0xf0>)
 800e806:	4811      	ldr	r0, [pc, #68]	@ (800e84c <netconn_recv+0xe8>)
 800e808:	f00e fe3e 	bl	801d488 <iprintf>

    buf->p = p;
 800e80c:	68fa      	ldr	r2, [r7, #12]
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	2200      	movs	r2, #0
 800e81c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	2200      	movs	r2, #0
 800e822:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	e005      	b.n	800e83a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800e82e:	2200      	movs	r2, #0
 800e830:	6839      	ldr	r1, [r7, #0]
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fe1a 	bl	800e46c <netconn_recv_data>
 800e838:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3718      	adds	r7, #24
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	0801fb10 	.word	0x0801fb10
 800e848:	0801fd28 	.word	0x0801fd28
 800e84c:	0801fb68 	.word	0x0801fb68
 800e850:	0801fd48 	.word	0x0801fd48
 800e854:	0801fdc0 	.word	0x0801fdc0

0800e858 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b08c      	sub	sp, #48	@ 0x30
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d109      	bne.n	800e87c <netconn_send+0x24>
 800e868:	4b0e      	ldr	r3, [pc, #56]	@ (800e8a4 <netconn_send+0x4c>)
 800e86a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800e86e:	490e      	ldr	r1, [pc, #56]	@ (800e8a8 <netconn_send+0x50>)
 800e870:	480e      	ldr	r0, [pc, #56]	@ (800e8ac <netconn_send+0x54>)
 800e872:	f00e fe09 	bl	801d488 <iprintf>
 800e876:	f06f 030f 	mvn.w	r3, #15
 800e87a:	e00e      	b.n	800e89a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800e884:	f107 030c 	add.w	r3, r7, #12
 800e888:	4619      	mov	r1, r3
 800e88a:	4809      	ldr	r0, [pc, #36]	@ (800e8b0 <netconn_send+0x58>)
 800e88c:	f7ff fc26 	bl	800e0dc <netconn_apimsg>
 800e890:	4603      	mov	r3, r0
 800e892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e896:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3730      	adds	r7, #48	@ 0x30
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	0801fb10 	.word	0x0801fb10
 800e8a8:	0801fdcc 	.word	0x0801fdcc
 800e8ac:	0801fb68 	.word	0x0801fb68
 800e8b0:	0800fc81 	.word	0x0800fc81

0800e8b4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af02      	add	r7, sp, #8
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800e8ca:	78fa      	ldrb	r2, [r7, #3]
 800e8cc:	f107 0110 	add.w	r1, r7, #16
 800e8d0:	6a3b      	ldr	r3, [r7, #32]
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	68f8      	ldr	r0, [r7, #12]
 800e8da:	f000 f805 	bl	800e8e8 <netconn_write_vectors_partly>
 800e8de:	4603      	mov	r3, r0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b092      	sub	sp, #72	@ 0x48
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	4611      	mov	r1, r2
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	80fb      	strh	r3, [r7, #6]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d109      	bne.n	800e918 <netconn_write_vectors_partly+0x30>
 800e904:	4b4e      	ldr	r3, [pc, #312]	@ (800ea40 <netconn_write_vectors_partly+0x158>)
 800e906:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e90a:	494e      	ldr	r1, [pc, #312]	@ (800ea44 <netconn_write_vectors_partly+0x15c>)
 800e90c:	484e      	ldr	r0, [pc, #312]	@ (800ea48 <netconn_write_vectors_partly+0x160>)
 800e90e:	f00e fdbb 	bl	801d488 <iprintf>
 800e912:	f06f 030f 	mvn.w	r3, #15
 800e916:	e08e      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e920:	2b10      	cmp	r3, #16
 800e922:	d009      	beq.n	800e938 <netconn_write_vectors_partly+0x50>
 800e924:	4b46      	ldr	r3, [pc, #280]	@ (800ea40 <netconn_write_vectors_partly+0x158>)
 800e926:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800e92a:	4948      	ldr	r1, [pc, #288]	@ (800ea4c <netconn_write_vectors_partly+0x164>)
 800e92c:	4846      	ldr	r0, [pc, #280]	@ (800ea48 <netconn_write_vectors_partly+0x160>)
 800e92e:	f00e fdab 	bl	801d488 <iprintf>
 800e932:	f06f 0305 	mvn.w	r3, #5
 800e936:	e07e      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	7f1b      	ldrb	r3, [r3, #28]
 800e93c:	f003 0302 	and.w	r3, r3, #2
 800e940:	2b00      	cmp	r3, #0
 800e942:	d104      	bne.n	800e94e <netconn_write_vectors_partly+0x66>
 800e944:	797b      	ldrb	r3, [r7, #5]
 800e946:	f003 0304 	and.w	r3, r3, #4
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <netconn_write_vectors_partly+0x6a>
 800e94e:	2301      	movs	r3, #1
 800e950:	e000      	b.n	800e954 <netconn_write_vectors_partly+0x6c>
 800e952:	2300      	movs	r3, #0
 800e954:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e958:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d005      	beq.n	800e96c <netconn_write_vectors_partly+0x84>
 800e960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e966:	f06f 0305 	mvn.w	r3, #5
 800e96a:	e064      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800e970:	2300      	movs	r3, #0
 800e972:	643b      	str	r3, [r7, #64]	@ 0x40
 800e974:	e015      	b.n	800e9a2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800e976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	68ba      	ldr	r2, [r7, #8]
 800e97c:	4413      	add	r3, r2
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e982:	4413      	add	r3, r2
 800e984:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800e986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	4413      	add	r3, r2
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e992:	429a      	cmp	r2, r3
 800e994:	d202      	bcs.n	800e99c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800e996:	f06f 0305 	mvn.w	r3, #5
 800e99a:	e04c      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800e99c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e99e:	3301      	adds	r3, #1
 800e9a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9a2:	88fb      	ldrh	r3, [r7, #6]
 800e9a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	dbe5      	blt.n	800e976 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800e9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e040      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800e9b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	da0a      	bge.n	800e9d0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800e9ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800e9c0:	f06f 0305 	mvn.w	r3, #5
 800e9c4:	e037      	b.n	800ea36 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e9c6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e9ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800e9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e9d8:	88fb      	ldrh	r3, [r7, #6]
 800e9da:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e9e0:	797b      	ldrb	r3, [r7, #5]
 800e9e2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e9e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e9ee:	f107 0314 	add.w	r3, r7, #20
 800e9f2:	4619      	mov	r1, r3
 800e9f4:	4816      	ldr	r0, [pc, #88]	@ (800ea50 <netconn_write_vectors_partly+0x168>)
 800e9f6:	f7ff fb71 	bl	800e0dc <netconn_apimsg>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ea00:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d114      	bne.n	800ea32 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ea08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d002      	beq.n	800ea14 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ea0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea12:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ea14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10a      	bne.n	800ea32 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ea1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d006      	beq.n	800ea32 <netconn_write_vectors_partly+0x14a>
 800ea24:	4b06      	ldr	r3, [pc, #24]	@ (800ea40 <netconn_write_vectors_partly+0x158>)
 800ea26:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea2a:	490a      	ldr	r1, [pc, #40]	@ (800ea54 <netconn_write_vectors_partly+0x16c>)
 800ea2c:	4806      	ldr	r0, [pc, #24]	@ (800ea48 <netconn_write_vectors_partly+0x160>)
 800ea2e:	f00e fd2b 	bl	801d488 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ea32:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3748      	adds	r7, #72	@ 0x48
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	0801fb10 	.word	0x0801fb10
 800ea44:	0801fde8 	.word	0x0801fde8
 800ea48:	0801fb68 	.word	0x0801fb68
 800ea4c:	0801fe04 	.word	0x0801fe04
 800ea50:	0801011d 	.word	0x0801011d
 800ea54:	0801fe28 	.word	0x0801fe28

0800ea58 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b08c      	sub	sp, #48	@ 0x30
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d109      	bne.n	800ea7e <netconn_close_shutdown+0x26>
 800ea6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eaa8 <netconn_close_shutdown+0x50>)
 800ea6c:	f240 4247 	movw	r2, #1095	@ 0x447
 800ea70:	490e      	ldr	r1, [pc, #56]	@ (800eaac <netconn_close_shutdown+0x54>)
 800ea72:	480f      	ldr	r0, [pc, #60]	@ (800eab0 <netconn_close_shutdown+0x58>)
 800ea74:	f00e fd08 	bl	801d488 <iprintf>
 800ea78:	f06f 030f 	mvn.w	r3, #15
 800ea7c:	e010      	b.n	800eaa0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ea82:	78fb      	ldrb	r3, [r7, #3]
 800ea84:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ea86:	2329      	movs	r3, #41	@ 0x29
 800ea88:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ea8a:	f107 030c 	add.w	r3, r7, #12
 800ea8e:	4619      	mov	r1, r3
 800ea90:	4808      	ldr	r0, [pc, #32]	@ (800eab4 <netconn_close_shutdown+0x5c>)
 800ea92:	f7ff fb23 	bl	800e0dc <netconn_apimsg>
 800ea96:	4603      	mov	r3, r0
 800ea98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ea9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3730      	adds	r7, #48	@ 0x30
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	0801fb10 	.word	0x0801fb10
 800eaac:	0801fe4c 	.word	0x0801fe4c
 800eab0:	0801fb68 	.word	0x0801fb68
 800eab4:	08010235 	.word	0x08010235

0800eab8 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800eac0:	2103      	movs	r1, #3
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7ff ffc8 	bl	800ea58 <netconn_close_shutdown>
 800eac8:	4603      	mov	r3, r0
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b084      	sub	sp, #16
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d101      	bne.n	800eae4 <netconn_err+0x12>
    return ERR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e00d      	b.n	800eb00 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800eae4:	f00d ff5a 	bl	801c99c <sys_arch_protect>
 800eae8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7a1b      	ldrb	r3, [r3, #8]
 800eaee:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f00d ff5e 	bl	801c9b8 <sys_arch_unprotect>
  return err;
 800eafc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800eb12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb16:	f113 0f0d 	cmn.w	r3, #13
 800eb1a:	d009      	beq.n	800eb30 <lwip_netconn_err_to_msg+0x28>
 800eb1c:	f113 0f0d 	cmn.w	r3, #13
 800eb20:	dc0c      	bgt.n	800eb3c <lwip_netconn_err_to_msg+0x34>
 800eb22:	f113 0f0f 	cmn.w	r3, #15
 800eb26:	d007      	beq.n	800eb38 <lwip_netconn_err_to_msg+0x30>
 800eb28:	f113 0f0e 	cmn.w	r3, #14
 800eb2c:	d002      	beq.n	800eb34 <lwip_netconn_err_to_msg+0x2c>
 800eb2e:	e005      	b.n	800eb3c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800eb30:	4b0a      	ldr	r3, [pc, #40]	@ (800eb5c <lwip_netconn_err_to_msg+0x54>)
 800eb32:	e00e      	b.n	800eb52 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800eb34:	4b0a      	ldr	r3, [pc, #40]	@ (800eb60 <lwip_netconn_err_to_msg+0x58>)
 800eb36:	e00c      	b.n	800eb52 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800eb38:	4b0a      	ldr	r3, [pc, #40]	@ (800eb64 <lwip_netconn_err_to_msg+0x5c>)
 800eb3a:	e00a      	b.n	800eb52 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800eb3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d005      	beq.n	800eb50 <lwip_netconn_err_to_msg+0x48>
 800eb44:	4b08      	ldr	r3, [pc, #32]	@ (800eb68 <lwip_netconn_err_to_msg+0x60>)
 800eb46:	227d      	movs	r2, #125	@ 0x7d
 800eb48:	4908      	ldr	r1, [pc, #32]	@ (800eb6c <lwip_netconn_err_to_msg+0x64>)
 800eb4a:	4809      	ldr	r0, [pc, #36]	@ (800eb70 <lwip_netconn_err_to_msg+0x68>)
 800eb4c:	f00e fc9c 	bl	801d488 <iprintf>
      return NULL;
 800eb50:	2300      	movs	r3, #0
  }
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	08023224 	.word	0x08023224
 800eb60:	08023225 	.word	0x08023225
 800eb64:	08023226 	.word	0x08023226
 800eb68:	0801fe68 	.word	0x0801fe68
 800eb6c:	0801fe9c 	.word	0x0801fe9c
 800eb70:	0801feac 	.word	0x0801feac

0800eb74 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d105      	bne.n	800eb90 <lwip_netconn_is_err_msg+0x1c>
 800eb84:	4b12      	ldr	r3, [pc, #72]	@ (800ebd0 <lwip_netconn_is_err_msg+0x5c>)
 800eb86:	2285      	movs	r2, #133	@ 0x85
 800eb88:	4912      	ldr	r1, [pc, #72]	@ (800ebd4 <lwip_netconn_is_err_msg+0x60>)
 800eb8a:	4813      	ldr	r0, [pc, #76]	@ (800ebd8 <lwip_netconn_is_err_msg+0x64>)
 800eb8c:	f00e fc7c 	bl	801d488 <iprintf>

  if (msg == &netconn_aborted) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	4a12      	ldr	r2, [pc, #72]	@ (800ebdc <lwip_netconn_is_err_msg+0x68>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d104      	bne.n	800eba2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	22f3      	movs	r2, #243	@ 0xf3
 800eb9c:	701a      	strb	r2, [r3, #0]
    return 1;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e012      	b.n	800ebc8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a0e      	ldr	r2, [pc, #56]	@ (800ebe0 <lwip_netconn_is_err_msg+0x6c>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d104      	bne.n	800ebb4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	22f2      	movs	r2, #242	@ 0xf2
 800ebae:	701a      	strb	r2, [r3, #0]
    return 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e009      	b.n	800ebc8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	4a0b      	ldr	r2, [pc, #44]	@ (800ebe4 <lwip_netconn_is_err_msg+0x70>)
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d104      	bne.n	800ebc6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	22f1      	movs	r2, #241	@ 0xf1
 800ebc0:	701a      	strb	r2, [r3, #0]
    return 1;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e000      	b.n	800ebc8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	0801fe68 	.word	0x0801fe68
 800ebd4:	0801fed4 	.word	0x0801fed4
 800ebd8:	0801feac 	.word	0x0801feac
 800ebdc:	08023224 	.word	0x08023224
 800ebe0:	08023225 	.word	0x08023225
 800ebe4:	08023226 	.word	0x08023226

0800ebe8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b088      	sub	sp, #32
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	607a      	str	r2, [r7, #4]
 800ebf4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d105      	bne.n	800ec08 <recv_udp+0x20>
 800ebfc:	4b34      	ldr	r3, [pc, #208]	@ (800ecd0 <recv_udp+0xe8>)
 800ebfe:	22e5      	movs	r2, #229	@ 0xe5
 800ec00:	4934      	ldr	r1, [pc, #208]	@ (800ecd4 <recv_udp+0xec>)
 800ec02:	4835      	ldr	r0, [pc, #212]	@ (800ecd8 <recv_udp+0xf0>)
 800ec04:	f00e fc40 	bl	801d488 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d105      	bne.n	800ec1a <recv_udp+0x32>
 800ec0e:	4b30      	ldr	r3, [pc, #192]	@ (800ecd0 <recv_udp+0xe8>)
 800ec10:	22e6      	movs	r2, #230	@ 0xe6
 800ec12:	4932      	ldr	r1, [pc, #200]	@ (800ecdc <recv_udp+0xf4>)
 800ec14:	4830      	ldr	r0, [pc, #192]	@ (800ecd8 <recv_udp+0xf0>)
 800ec16:	f00e fc37 	bl	801d488 <iprintf>
  conn = (struct netconn *)arg;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d103      	bne.n	800ec2c <recv_udp+0x44>
    pbuf_free(p);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f004 f86f 	bl	8012d08 <pbuf_free>
    return;
 800ec2a:	e04d      	b.n	800ecc8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d005      	beq.n	800ec42 <recv_udp+0x5a>
 800ec36:	4b26      	ldr	r3, [pc, #152]	@ (800ecd0 <recv_udp+0xe8>)
 800ec38:	22ee      	movs	r2, #238	@ 0xee
 800ec3a:	4929      	ldr	r1, [pc, #164]	@ (800ece0 <recv_udp+0xf8>)
 800ec3c:	4826      	ldr	r0, [pc, #152]	@ (800ecd8 <recv_udp+0xf0>)
 800ec3e:	f00e fc23 	bl	801d488 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	3310      	adds	r3, #16
 800ec46:	4618      	mov	r0, r3
 800ec48:	f00d fd8d 	bl	801c766 <sys_mbox_valid>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d103      	bne.n	800ec5a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f004 f858 	bl	8012d08 <pbuf_free>
    return;
 800ec58:	e036      	b.n	800ecc8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ec5a:	2006      	movs	r0, #6
 800ec5c:	f003 f93a 	bl	8011ed4 <memp_malloc>
 800ec60:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d103      	bne.n	800ec70 <recv_udp+0x88>
    pbuf_free(p);
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f004 f84d 	bl	8012d08 <pbuf_free>
    return;
 800ec6e:	e02b      	b.n	800ecc8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ec70:	69bb      	ldr	r3, [r7, #24]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <recv_udp+0xa0>
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	e000      	b.n	800ec8a <recv_udp+0xa2>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ec92:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	891b      	ldrh	r3, [r3, #8]
 800ec98:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	3310      	adds	r3, #16
 800ec9e:	69b9      	ldr	r1, [r7, #24]
 800eca0:	4618      	mov	r0, r3
 800eca2:	f00d fceb 	bl	801c67c <sys_mbox_trypost>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d003      	beq.n	800ecb4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ecac:	69b8      	ldr	r0, [r7, #24]
 800ecae:	f001 fb4d 	bl	801034c <netbuf_delete>
    return;
 800ecb2:	e009      	b.n	800ecc8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <recv_udp+0xe0>
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc0:	8afa      	ldrh	r2, [r7, #22]
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	69f8      	ldr	r0, [r7, #28]
 800ecc6:	4798      	blx	r3
  }
}
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	0801fe68 	.word	0x0801fe68
 800ecd4:	0801fee0 	.word	0x0801fee0
 800ecd8:	0801feac 	.word	0x0801feac
 800ecdc:	0801ff04 	.word	0x0801ff04
 800ece0:	0801ff24 	.word	0x0801ff24

0800ece4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <recv_tcp+0x22>
 800ecf8:	4b36      	ldr	r3, [pc, #216]	@ (800edd4 <recv_tcp+0xf0>)
 800ecfa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ecfe:	4936      	ldr	r1, [pc, #216]	@ (800edd8 <recv_tcp+0xf4>)
 800ed00:	4836      	ldr	r0, [pc, #216]	@ (800eddc <recv_tcp+0xf8>)
 800ed02:	f00e fbc1 	bl	801d488 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d106      	bne.n	800ed1a <recv_tcp+0x36>
 800ed0c:	4b31      	ldr	r3, [pc, #196]	@ (800edd4 <recv_tcp+0xf0>)
 800ed0e:	f240 122d 	movw	r2, #301	@ 0x12d
 800ed12:	4933      	ldr	r1, [pc, #204]	@ (800ede0 <recv_tcp+0xfc>)
 800ed14:	4831      	ldr	r0, [pc, #196]	@ (800eddc <recv_tcp+0xf8>)
 800ed16:	f00e fbb7 	bl	801d488 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ed1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d006      	beq.n	800ed30 <recv_tcp+0x4c>
 800ed22:	4b2c      	ldr	r3, [pc, #176]	@ (800edd4 <recv_tcp+0xf0>)
 800ed24:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ed28:	492e      	ldr	r1, [pc, #184]	@ (800ede4 <recv_tcp+0x100>)
 800ed2a:	482c      	ldr	r0, [pc, #176]	@ (800eddc <recv_tcp+0xf8>)
 800ed2c:	f00e fbac 	bl	801d488 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <recv_tcp+0x5c>
    return ERR_VAL;
 800ed3a:	f06f 0305 	mvn.w	r3, #5
 800ed3e:	e045      	b.n	800edcc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d006      	beq.n	800ed58 <recv_tcp+0x74>
 800ed4a:	4b22      	ldr	r3, [pc, #136]	@ (800edd4 <recv_tcp+0xf0>)
 800ed4c:	f240 1235 	movw	r2, #309	@ 0x135
 800ed50:	4925      	ldr	r1, [pc, #148]	@ (800ede8 <recv_tcp+0x104>)
 800ed52:	4822      	ldr	r0, [pc, #136]	@ (800eddc <recv_tcp+0xf8>)
 800ed54:	f00e fb98 	bl	801d488 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	3310      	adds	r3, #16
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f00d fd02 	bl	801c766 <sys_mbox_valid>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d10d      	bne.n	800ed84 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d008      	beq.n	800ed80 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	891b      	ldrh	r3, [r3, #8]
 800ed72:	4619      	mov	r1, r3
 800ed74:	68b8      	ldr	r0, [r7, #8]
 800ed76:	f004 ffa1 	bl	8013cbc <tcp_recved>
      pbuf_free(p);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f003 ffc4 	bl	8012d08 <pbuf_free>
    }
    return ERR_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	e023      	b.n	800edcc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d005      	beq.n	800ed96 <recv_tcp+0xb2>
    msg = p;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	891b      	ldrh	r3, [r3, #8]
 800ed92:	83fb      	strh	r3, [r7, #30]
 800ed94:	e003      	b.n	800ed9e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ed96:	4b15      	ldr	r3, [pc, #84]	@ (800edec <recv_tcp+0x108>)
 800ed98:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	3310      	adds	r3, #16
 800eda2:	69b9      	ldr	r1, [r7, #24]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f00d fc69 	bl	801c67c <sys_mbox_trypost>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	e00a      	b.n	800edcc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d005      	beq.n	800edca <recv_tcp+0xe6>
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edc2:	8bfa      	ldrh	r2, [r7, #30]
 800edc4:	2100      	movs	r1, #0
 800edc6:	6978      	ldr	r0, [r7, #20]
 800edc8:	4798      	blx	r3
  }

  return ERR_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3720      	adds	r7, #32
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0801fe68 	.word	0x0801fe68
 800edd8:	0801ff44 	.word	0x0801ff44
 800eddc:	0801feac 	.word	0x0801feac
 800ede0:	0801ff68 	.word	0x0801ff68
 800ede4:	0801ff88 	.word	0x0801ff88
 800ede8:	0801ffa0 	.word	0x0801ffa0
 800edec:	08023226 	.word	0x08023226

0800edf0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d106      	bne.n	800ee12 <poll_tcp+0x22>
 800ee04:	4b29      	ldr	r3, [pc, #164]	@ (800eeac <poll_tcp+0xbc>)
 800ee06:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800ee0a:	4929      	ldr	r1, [pc, #164]	@ (800eeb0 <poll_tcp+0xc0>)
 800ee0c:	4829      	ldr	r0, [pc, #164]	@ (800eeb4 <poll_tcp+0xc4>)
 800ee0e:	f00e fb3b 	bl	801d488 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	785b      	ldrb	r3, [r3, #1]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d104      	bne.n	800ee24 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ee1a:	2101      	movs	r1, #1
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 ffb1 	bl	800fd84 <lwip_netconn_do_writemore>
 800ee22:	e016      	b.n	800ee52 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	2b04      	cmp	r3, #4
 800ee2a:	d112      	bne.n	800ee52 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00a      	beq.n	800ee4a <poll_tcp+0x5a>
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6a1b      	ldr	r3, [r3, #32]
 800ee38:	7a5b      	ldrb	r3, [r3, #9]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d005      	beq.n	800ee4a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	7a5a      	ldrb	r2, [r3, #9]
 800ee44:	3a01      	subs	r2, #1
 800ee46:	b2d2      	uxtb	r2, r2
 800ee48:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f000 fbf7 	bl	800f640 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	7f1b      	ldrb	r3, [r3, #28]
 800ee56:	f003 0310 	and.w	r3, r3, #16
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d021      	beq.n	800eea2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d01d      	beq.n	800eea2 <poll_tcp+0xb2>
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	685b      	ldr	r3, [r3, #4]
 800ee6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ee6e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ee72:	d316      	bcc.n	800eea2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	d810      	bhi.n	800eea2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	7f1b      	ldrb	r3, [r3, #28]
 800ee84:	f023 0310 	bic.w	r3, r3, #16
 800ee88:	b2da      	uxtb	r2, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d005      	beq.n	800eea2 <poll_tcp+0xb2>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	2102      	movs	r1, #2
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800eea2:	2300      	movs	r3, #0
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	0801fe68 	.word	0x0801fe68
 800eeb0:	0801ffc0 	.word	0x0801ffc0
 800eeb4:	0801feac 	.word	0x0801feac

0800eeb8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	4613      	mov	r3, r2
 800eec4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d106      	bne.n	800eede <sent_tcp+0x26>
 800eed0:	4b20      	ldr	r3, [pc, #128]	@ (800ef54 <sent_tcp+0x9c>)
 800eed2:	f240 1293 	movw	r2, #403	@ 0x193
 800eed6:	4920      	ldr	r1, [pc, #128]	@ (800ef58 <sent_tcp+0xa0>)
 800eed8:	4820      	ldr	r0, [pc, #128]	@ (800ef5c <sent_tcp+0xa4>)
 800eeda:	f00e fad5 	bl	801d488 <iprintf>

  if (conn) {
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d032      	beq.n	800ef4a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	785b      	ldrb	r3, [r3, #1]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d104      	bne.n	800eef6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800eeec:	2101      	movs	r1, #1
 800eeee:	6978      	ldr	r0, [r7, #20]
 800eef0:	f000 ff48 	bl	800fd84 <lwip_netconn_do_writemore>
 800eef4:	e007      	b.n	800ef06 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	785b      	ldrb	r3, [r3, #1]
 800eefa:	2b04      	cmp	r3, #4
 800eefc:	d103      	bne.n	800ef06 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800eefe:	2101      	movs	r1, #1
 800ef00:	6978      	ldr	r0, [r7, #20]
 800ef02:	f000 fb9d 	bl	800f640 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d01d      	beq.n	800ef4a <sent_tcp+0x92>
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ef16:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ef1a:	d316      	bcc.n	800ef4a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	d810      	bhi.n	800ef4a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	7f1b      	ldrb	r3, [r3, #28]
 800ef2c:	f023 0310 	bic.w	r3, r3, #16
 800ef30:	b2da      	uxtb	r2, r3
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d005      	beq.n	800ef4a <sent_tcp+0x92>
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef42:	88fa      	ldrh	r2, [r7, #6]
 800ef44:	2102      	movs	r1, #2
 800ef46:	6978      	ldr	r0, [r7, #20]
 800ef48:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3718      	adds	r7, #24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	0801fe68 	.word	0x0801fe68
 800ef58:	0801ffc0 	.word	0x0801ffc0
 800ef5c:	0801feac 	.word	0x0801feac

0800ef60 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d106      	bne.n	800ef84 <err_tcp+0x24>
 800ef76:	4b5f      	ldr	r3, [pc, #380]	@ (800f0f4 <err_tcp+0x194>)
 800ef78:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ef7c:	495e      	ldr	r1, [pc, #376]	@ (800f0f8 <err_tcp+0x198>)
 800ef7e:	485f      	ldr	r0, [pc, #380]	@ (800f0fc <err_tcp+0x19c>)
 800ef80:	f00e fa82 	bl	801d488 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ef84:	f00d fd0a 	bl	801c99c <sys_arch_protect>
 800ef88:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	78fa      	ldrb	r2, [r7, #3]
 800ef94:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	7f1b      	ldrb	r3, [r3, #28]
 800ef9a:	f043 0301 	orr.w	r3, r3, #1
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	785b      	ldrb	r3, [r3, #1]
 800efa8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800efaa:	69fb      	ldr	r3, [r7, #28]
 800efac:	2200      	movs	r2, #0
 800efae:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800efb0:	69b8      	ldr	r0, [r7, #24]
 800efb2:	f00d fd01 	bl	801c9b8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d005      	beq.n	800efca <err_tcp+0x6a>
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	2200      	movs	r2, #0
 800efc4:	2104      	movs	r1, #4
 800efc6:	69f8      	ldr	r0, [r7, #28]
 800efc8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <err_tcp+0x7e>
 800efd2:	69fb      	ldr	r3, [r7, #28]
 800efd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd6:	2200      	movs	r2, #0
 800efd8:	2100      	movs	r1, #0
 800efda:	69f8      	ldr	r0, [r7, #28]
 800efdc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d005      	beq.n	800eff2 <err_tcp+0x92>
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efea:	2200      	movs	r2, #0
 800efec:	2102      	movs	r1, #2
 800efee:	69f8      	ldr	r0, [r7, #28]
 800eff0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800eff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fd86 	bl	800eb08 <lwip_netconn_err_to_msg>
 800effc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	3310      	adds	r3, #16
 800f002:	4618      	mov	r0, r3
 800f004:	f00d fbaf 	bl	801c766 <sys_mbox_valid>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d005      	beq.n	800f01a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	3310      	adds	r3, #16
 800f012:	6939      	ldr	r1, [r7, #16]
 800f014:	4618      	mov	r0, r3
 800f016:	f00d fb31 	bl	801c67c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	3314      	adds	r3, #20
 800f01e:	4618      	mov	r0, r3
 800f020:	f00d fba1 	bl	801c766 <sys_mbox_valid>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d005      	beq.n	800f036 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	3314      	adds	r3, #20
 800f02e:	6939      	ldr	r1, [r7, #16]
 800f030:	4618      	mov	r0, r3
 800f032:	f00d fb23 	bl	801c67c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f036:	7dfb      	ldrb	r3, [r7, #23]
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d005      	beq.n	800f048 <err_tcp+0xe8>
 800f03c:	7dfb      	ldrb	r3, [r7, #23]
 800f03e:	2b04      	cmp	r3, #4
 800f040:	d002      	beq.n	800f048 <err_tcp+0xe8>
 800f042:	7dfb      	ldrb	r3, [r7, #23]
 800f044:	2b03      	cmp	r3, #3
 800f046:	d143      	bne.n	800f0d0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	7f1b      	ldrb	r3, [r3, #28]
 800f04c:	f003 0304 	and.w	r3, r3, #4
 800f050:	2b00      	cmp	r3, #0
 800f052:	bf14      	ite	ne
 800f054:	2301      	movne	r3, #1
 800f056:	2300      	moveq	r3, #0
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f05c:	69fb      	ldr	r3, [r7, #28]
 800f05e:	7f1b      	ldrb	r3, [r3, #28]
 800f060:	f023 0304 	bic.w	r3, r3, #4
 800f064:	b2da      	uxtb	r2, r3
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d13b      	bne.n	800f0e8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	6a1b      	ldr	r3, [r3, #32]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <err_tcp+0x126>
 800f078:	4b1e      	ldr	r3, [pc, #120]	@ (800f0f4 <err_tcp+0x194>)
 800f07a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f07e:	4920      	ldr	r1, [pc, #128]	@ (800f100 <err_tcp+0x1a0>)
 800f080:	481e      	ldr	r0, [pc, #120]	@ (800f0fc <err_tcp+0x19c>)
 800f082:	f00e fa01 	bl	801d488 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f086:	7dfb      	ldrb	r3, [r7, #23]
 800f088:	2b04      	cmp	r3, #4
 800f08a:	d104      	bne.n	800f096 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	6a1b      	ldr	r3, [r3, #32]
 800f090:	2200      	movs	r2, #0
 800f092:	711a      	strb	r2, [r3, #4]
 800f094:	e003      	b.n	800f09e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	6a1b      	ldr	r3, [r3, #32]
 800f09a:	78fa      	ldrb	r2, [r7, #3]
 800f09c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	330c      	adds	r3, #12
 800f0a6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	f00d fbed 	bl	801c888 <sys_sem_valid>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d106      	bne.n	800f0c2 <err_tcp+0x162>
 800f0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f0f4 <err_tcp+0x194>)
 800f0b6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800f0ba:	4912      	ldr	r1, [pc, #72]	@ (800f104 <err_tcp+0x1a4>)
 800f0bc:	480f      	ldr	r0, [pc, #60]	@ (800f0fc <err_tcp+0x19c>)
 800f0be:	f00e f9e3 	bl	801d488 <iprintf>
      conn->current_msg = NULL;
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f0c8:	68b8      	ldr	r0, [r7, #8]
 800f0ca:	f00d fbc3 	bl	801c854 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f0ce:	e00b      	b.n	800f0e8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d008      	beq.n	800f0ea <err_tcp+0x18a>
 800f0d8:	4b06      	ldr	r3, [pc, #24]	@ (800f0f4 <err_tcp+0x194>)
 800f0da:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800f0de:	490a      	ldr	r1, [pc, #40]	@ (800f108 <err_tcp+0x1a8>)
 800f0e0:	4806      	ldr	r0, [pc, #24]	@ (800f0fc <err_tcp+0x19c>)
 800f0e2:	f00e f9d1 	bl	801d488 <iprintf>
  }
}
 800f0e6:	e000      	b.n	800f0ea <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f0e8:	bf00      	nop
}
 800f0ea:	bf00      	nop
 800f0ec:	3720      	adds	r7, #32
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	0801fe68 	.word	0x0801fe68
 800f0f8:	0801ffc0 	.word	0x0801ffc0
 800f0fc:	0801feac 	.word	0x0801feac
 800f100:	0801ffd0 	.word	0x0801ffd0
 800f104:	0801ffec 	.word	0x0801ffec
 800f108:	08020008 	.word	0x08020008

0800f10c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f11a:	6879      	ldr	r1, [r7, #4]
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f005 fcb3 	bl	8014a88 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f122:	490a      	ldr	r1, [pc, #40]	@ (800f14c <setup_tcp+0x40>)
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f005 fcc1 	bl	8014aac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f12a:	4909      	ldr	r1, [pc, #36]	@ (800f150 <setup_tcp+0x44>)
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f005 fcdf 	bl	8014af0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f132:	2202      	movs	r2, #2
 800f134:	4907      	ldr	r1, [pc, #28]	@ (800f154 <setup_tcp+0x48>)
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	f005 fd36 	bl	8014ba8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f13c:	4906      	ldr	r1, [pc, #24]	@ (800f158 <setup_tcp+0x4c>)
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f005 fcf8 	bl	8014b34 <tcp_err>
}
 800f144:	bf00      	nop
 800f146:	3710      	adds	r7, #16
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	0800ece5 	.word	0x0800ece5
 800f150:	0800eeb9 	.word	0x0800eeb9
 800f154:	0800edf1 	.word	0x0800edf1
 800f158:	0800ef61 	.word	0x0800ef61

0800f15c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f15c:	b590      	push	{r4, r7, lr}
 800f15e:	b089      	sub	sp, #36	@ 0x24
 800f160:	af00      	add	r7, sp, #0
 800f162:	60f8      	str	r0, [r7, #12]
 800f164:	60b9      	str	r1, [r7, #8]
 800f166:	4613      	mov	r3, r2
 800f168:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d102      	bne.n	800f17a <accept_function+0x1e>
    return ERR_VAL;
 800f174:	f06f 0305 	mvn.w	r3, #5
 800f178:	e0a1      	b.n	800f2be <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f17a:	69fb      	ldr	r3, [r7, #28]
 800f17c:	3314      	adds	r3, #20
 800f17e:	4618      	mov	r0, r3
 800f180:	f00d faf1 	bl	801c766 <sys_mbox_valid>
 800f184:	4603      	mov	r3, r0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d102      	bne.n	800f190 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f18a:	f06f 0305 	mvn.w	r3, #5
 800f18e:	e096      	b.n	800f2be <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d11b      	bne.n	800f1ce <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	f103 0414 	add.w	r4, r3, #20
 800f19c:	f06f 000c 	mvn.w	r0, #12
 800f1a0:	f7ff fcb2 	bl	800eb08 <lwip_netconn_err_to_msg>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f00d fa67 	bl	801c67c <sys_mbox_trypost>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d005      	beq.n	800f1c8 <accept_function+0x6c>
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	69f8      	ldr	r0, [r7, #28]
 800f1c6:	4798      	blx	r3
    }
    return ERR_VAL;
 800f1c8:	f06f 0305 	mvn.w	r3, #5
 800f1cc:	e077      	b.n	800f2be <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d006      	beq.n	800f1e4 <accept_function+0x88>
 800f1d6:	4b3c      	ldr	r3, [pc, #240]	@ (800f2c8 <accept_function+0x16c>)
 800f1d8:	f240 222a 	movw	r2, #554	@ 0x22a
 800f1dc:	493b      	ldr	r1, [pc, #236]	@ (800f2cc <accept_function+0x170>)
 800f1de:	483c      	ldr	r0, [pc, #240]	@ (800f2d0 <accept_function+0x174>)
 800f1e0:	f00e f952 	bl	801d488 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	781a      	ldrb	r2, [r3, #0]
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	4610      	mov	r0, r2
 800f1f0:	f000 f8f0 	bl	800f3d4 <netconn_alloc>
 800f1f4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d11b      	bne.n	800f234 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	f103 0414 	add.w	r4, r3, #20
 800f202:	f06f 000c 	mvn.w	r0, #12
 800f206:	f7ff fc7f 	bl	800eb08 <lwip_netconn_err_to_msg>
 800f20a:	4603      	mov	r3, r0
 800f20c:	4619      	mov	r1, r3
 800f20e:	4620      	mov	r0, r4
 800f210:	f00d fa34 	bl	801c67c <sys_mbox_trypost>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d109      	bne.n	800f22e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d005      	beq.n	800f22e <accept_function+0xd2>
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f226:	2200      	movs	r2, #0
 800f228:	2100      	movs	r1, #0
 800f22a:	69f8      	ldr	r0, [r7, #28]
 800f22c:	4798      	blx	r3
    }
    return ERR_MEM;
 800f22e:	f04f 33ff 	mov.w	r3, #4294967295
 800f232:	e044      	b.n	800f2be <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f23a:	69b8      	ldr	r0, [r7, #24]
 800f23c:	f7ff ff66 	bl	800f10c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	3314      	adds	r3, #20
 800f244:	69b9      	ldr	r1, [r7, #24]
 800f246:	4618      	mov	r0, r3
 800f248:	f00d fa18 	bl	801c67c <sys_mbox_trypost>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d02a      	beq.n	800f2a8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f258:	2100      	movs	r1, #0
 800f25a:	6978      	ldr	r0, [r7, #20]
 800f25c:	f005 fc14 	bl	8014a88 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f260:	2100      	movs	r1, #0
 800f262:	6978      	ldr	r0, [r7, #20]
 800f264:	f005 fc22 	bl	8014aac <tcp_recv>
    tcp_sent(pcb, NULL);
 800f268:	2100      	movs	r1, #0
 800f26a:	6978      	ldr	r0, [r7, #20]
 800f26c:	f005 fc40 	bl	8014af0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f270:	2200      	movs	r2, #0
 800f272:	2100      	movs	r1, #0
 800f274:	6978      	ldr	r0, [r7, #20]
 800f276:	f005 fc97 	bl	8014ba8 <tcp_poll>
    tcp_err(pcb, NULL);
 800f27a:	2100      	movs	r1, #0
 800f27c:	6978      	ldr	r0, [r7, #20]
 800f27e:	f005 fc59 	bl	8014b34 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	2200      	movs	r2, #0
 800f286:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	3310      	adds	r3, #16
 800f28c:	4618      	mov	r0, r3
 800f28e:	f00d f9e3 	bl	801c658 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f292:	69bb      	ldr	r3, [r7, #24]
 800f294:	3310      	adds	r3, #16
 800f296:	4618      	mov	r0, r3
 800f298:	f00d fa76 	bl	801c788 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f29c:	69b8      	ldr	r0, [r7, #24]
 800f29e:	f000 f907 	bl	800f4b0 <netconn_free>
    return ERR_MEM;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	e00a      	b.n	800f2be <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d005      	beq.n	800f2bc <accept_function+0x160>
 800f2b0:	69fb      	ldr	r3, [r7, #28]
 800f2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	69f8      	ldr	r0, [r7, #28]
 800f2ba:	4798      	blx	r3
  }

  return ERR_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3724      	adds	r7, #36	@ 0x24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd90      	pop	{r4, r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	0801fe68 	.word	0x0801fe68
 800f2cc:	08020024 	.word	0x08020024
 800f2d0:	0801feac 	.word	0x0801feac

0800f2d4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d006      	beq.n	800f2f8 <pcb_new+0x24>
 800f2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800f398 <pcb_new+0xc4>)
 800f2ec:	f240 2265 	movw	r2, #613	@ 0x265
 800f2f0:	492a      	ldr	r1, [pc, #168]	@ (800f39c <pcb_new+0xc8>)
 800f2f2:	482b      	ldr	r0, [pc, #172]	@ (800f3a0 <pcb_new+0xcc>)
 800f2f4:	f00e f8c8 	bl	801d488 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f302:	2b10      	cmp	r3, #16
 800f304:	d022      	beq.n	800f34c <pcb_new+0x78>
 800f306:	2b20      	cmp	r3, #32
 800f308:	d133      	bne.n	800f372 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681c      	ldr	r4, [r3, #0]
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	4618      	mov	r0, r3
 800f312:	f00a fe7c 	bl	801a00e <udp_new_ip_type>
 800f316:	4603      	mov	r3, r0
 800f318:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d02a      	beq.n	800f37a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b22      	cmp	r3, #34	@ 0x22
 800f32c:	d104      	bne.n	800f338 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	2201      	movs	r2, #1
 800f336:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	6858      	ldr	r0, [r3, #4]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	4917      	ldr	r1, [pc, #92]	@ (800f3a4 <pcb_new+0xd0>)
 800f346:	f00a fde9 	bl	8019f1c <udp_recv>
      }
      break;
 800f34a:	e016      	b.n	800f37a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681c      	ldr	r4, [r3, #0]
 800f350:	7bfb      	ldrb	r3, [r7, #15]
 800f352:	4618      	mov	r0, r3
 800f354:	f005 fb8a 	bl	8014a6c <tcp_new_ip_type>
 800f358:	4603      	mov	r3, r0
 800f35a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d00b      	beq.n	800f37e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7ff fece 	bl	800f10c <setup_tcp>
      }
      break;
 800f370:	e005      	b.n	800f37e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	22fa      	movs	r2, #250	@ 0xfa
 800f376:	711a      	strb	r2, [r3, #4]
      return;
 800f378:	e00a      	b.n	800f390 <pcb_new+0xbc>
      break;
 800f37a:	bf00      	nop
 800f37c:	e000      	b.n	800f380 <pcb_new+0xac>
      break;
 800f37e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d102      	bne.n	800f390 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	22ff      	movs	r2, #255	@ 0xff
 800f38e:	711a      	strb	r2, [r3, #4]
  }
}
 800f390:	3714      	adds	r7, #20
 800f392:	46bd      	mov	sp, r7
 800f394:	bd90      	pop	{r4, r7, pc}
 800f396:	bf00      	nop
 800f398:	0801fe68 	.word	0x0801fe68
 800f39c:	0802004c 	.word	0x0802004c
 800f3a0:	0801feac 	.word	0x0801feac
 800f3a4:	0800ebe9 	.word	0x0800ebe9

0800f3a8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d102      	bne.n	800f3ca <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f3c4:	68f8      	ldr	r0, [r7, #12]
 800f3c6:	f7ff ff85 	bl	800f2d4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f3ca:	bf00      	nop
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
	...

0800f3d4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	6039      	str	r1, [r7, #0]
 800f3de:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f3e4:	2007      	movs	r0, #7
 800f3e6:	f002 fd75 	bl	8011ed4 <memp_malloc>
 800f3ea:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d101      	bne.n	800f3f6 <netconn_alloc+0x22>
    return NULL;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	e052      	b.n	800f49c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	79fa      	ldrb	r2, [r7, #7]
 800f400:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2200      	movs	r2, #0
 800f406:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f408:	79fb      	ldrb	r3, [r7, #7]
 800f40a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f40e:	2b10      	cmp	r3, #16
 800f410:	d004      	beq.n	800f41c <netconn_alloc+0x48>
 800f412:	2b20      	cmp	r3, #32
 800f414:	d105      	bne.n	800f422 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f416:	2306      	movs	r3, #6
 800f418:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f41a:	e00a      	b.n	800f432 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f41c:	2306      	movs	r3, #6
 800f41e:	617b      	str	r3, [r7, #20]
      break;
 800f420:	e007      	b.n	800f432 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f422:	4b20      	ldr	r3, [pc, #128]	@ (800f4a4 <netconn_alloc+0xd0>)
 800f424:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800f428:	491f      	ldr	r1, [pc, #124]	@ (800f4a8 <netconn_alloc+0xd4>)
 800f42a:	4820      	ldr	r0, [pc, #128]	@ (800f4ac <netconn_alloc+0xd8>)
 800f42c:	f00e f82c 	bl	801d488 <iprintf>
      goto free_and_return;
 800f430:	e02f      	b.n	800f492 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	3310      	adds	r3, #16
 800f436:	6979      	ldr	r1, [r7, #20]
 800f438:	4618      	mov	r0, r3
 800f43a:	f00d f8eb 	bl	801c614 <sys_mbox_new>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d125      	bne.n	800f490 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	330c      	adds	r3, #12
 800f448:	2100      	movs	r1, #0
 800f44a:	4618      	mov	r0, r3
 800f44c:	f00d f9a9 	bl	801c7a2 <sys_sem_new>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	3310      	adds	r3, #16
 800f45a:	4618      	mov	r0, r3
 800f45c:	f00d f8fc 	bl	801c658 <sys_mbox_free>
    goto free_and_return;
 800f460:	e017      	b.n	800f492 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	3314      	adds	r3, #20
 800f466:	4618      	mov	r0, r3
 800f468:	f00d f98e 	bl	801c788 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	2200      	movs	r2, #0
 800f470:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f04f 32ff 	mov.w	r2, #4294967295
 800f478:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	683a      	ldr	r2, [r7, #0]
 800f47e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	7cfa      	ldrb	r2, [r7, #19]
 800f48a:	771a      	strb	r2, [r3, #28]
  return conn;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	e005      	b.n	800f49c <netconn_alloc+0xc8>
    goto free_and_return;
 800f490:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f492:	68f9      	ldr	r1, [r7, #12]
 800f494:	2007      	movs	r0, #7
 800f496:	f002 fd93 	bl	8011fc0 <memp_free>
  return NULL;
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}
 800f4a4:	0801fe68 	.word	0x0801fe68
 800f4a8:	0802006c 	.word	0x0802006c
 800f4ac:	0801feac 	.word	0x0801feac

0800f4b0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d006      	beq.n	800f4ce <netconn_free+0x1e>
 800f4c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f530 <netconn_free+0x80>)
 800f4c2:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f4c6:	491b      	ldr	r1, [pc, #108]	@ (800f534 <netconn_free+0x84>)
 800f4c8:	481b      	ldr	r0, [pc, #108]	@ (800f538 <netconn_free+0x88>)
 800f4ca:	f00d ffdd 	bl	801d488 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	3310      	adds	r3, #16
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f00d f947 	bl	801c766 <sys_mbox_valid>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <netconn_free+0x3c>
 800f4de:	4b14      	ldr	r3, [pc, #80]	@ (800f530 <netconn_free+0x80>)
 800f4e0:	f240 3223 	movw	r2, #803	@ 0x323
 800f4e4:	4915      	ldr	r1, [pc, #84]	@ (800f53c <netconn_free+0x8c>)
 800f4e6:	4814      	ldr	r0, [pc, #80]	@ (800f538 <netconn_free+0x88>)
 800f4e8:	f00d ffce 	bl	801d488 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	3314      	adds	r3, #20
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f00d f938 	bl	801c766 <sys_mbox_valid>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d006      	beq.n	800f50a <netconn_free+0x5a>
 800f4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800f530 <netconn_free+0x80>)
 800f4fe:	f240 3226 	movw	r2, #806	@ 0x326
 800f502:	490f      	ldr	r1, [pc, #60]	@ (800f540 <netconn_free+0x90>)
 800f504:	480c      	ldr	r0, [pc, #48]	@ (800f538 <netconn_free+0x88>)
 800f506:	f00d ffbf 	bl	801d488 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	330c      	adds	r3, #12
 800f50e:	4618      	mov	r0, r3
 800f510:	f00d f9ad 	bl	801c86e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	330c      	adds	r3, #12
 800f518:	4618      	mov	r0, r3
 800f51a:	f00d f9c6 	bl	801c8aa <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f51e:	6879      	ldr	r1, [r7, #4]
 800f520:	2007      	movs	r0, #7
 800f522:	f002 fd4d 	bl	8011fc0 <memp_free>
}
 800f526:	bf00      	nop
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	0801fe68 	.word	0x0801fe68
 800f534:	08020094 	.word	0x08020094
 800f538:	0801feac 	.word	0x0801feac
 800f53c:	080200c4 	.word	0x080200c4
 800f540:	08020100 	.word	0x08020100

0800f544 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3310      	adds	r3, #16
 800f550:	4618      	mov	r0, r3
 800f552:	f00d f908 	bl	801c766 <sys_mbox_valid>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d02f      	beq.n	800f5bc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f55c:	e018      	b.n	800f590 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f566:	2b10      	cmp	r3, #16
 800f568:	d10e      	bne.n	800f588 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	f107 020f 	add.w	r2, r7, #15
 800f570:	4611      	mov	r1, r2
 800f572:	4618      	mov	r0, r3
 800f574:	f7ff fafe 	bl	800eb74 <lwip_netconn_is_err_msg>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d108      	bne.n	800f590 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	4618      	mov	r0, r3
 800f582:	f003 fbc1 	bl	8012d08 <pbuf_free>
 800f586:	e003      	b.n	800f590 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	4618      	mov	r0, r3
 800f58c:	f000 fede 	bl	801034c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3310      	adds	r3, #16
 800f594:	f107 0210 	add.w	r2, r7, #16
 800f598:	4611      	mov	r1, r2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f00d f8c7 	bl	801c72e <sys_arch_mbox_tryfetch>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a6:	d1da      	bne.n	800f55e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	3310      	adds	r3, #16
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f00d f853 	bl	801c658 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	3310      	adds	r3, #16
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f00d f8e6 	bl	801c788 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	3314      	adds	r3, #20
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f00d f8d0 	bl	801c766 <sys_mbox_valid>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d034      	beq.n	800f636 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f5cc:	e01d      	b.n	800f60a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	f107 020e 	add.w	r2, r7, #14
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7ff facc 	bl	800eb74 <lwip_netconn_is_err_msg>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d113      	bne.n	800f60a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f5e6:	6978      	ldr	r0, [r7, #20]
 800f5e8:	f7ff ffac 	bl	800f544 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d007      	beq.n	800f604 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f004 f985 	bl	8013908 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2200      	movs	r2, #0
 800f602:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f604:	6978      	ldr	r0, [r7, #20]
 800f606:	f7ff ff53 	bl	800f4b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	3314      	adds	r3, #20
 800f60e:	f107 0210 	add.w	r2, r7, #16
 800f612:	4611      	mov	r1, r2
 800f614:	4618      	mov	r0, r3
 800f616:	f00d f88a 	bl	801c72e <sys_arch_mbox_tryfetch>
 800f61a:	4603      	mov	r3, r0
 800f61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f620:	d1d5      	bne.n	800f5ce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	3314      	adds	r3, #20
 800f626:	4618      	mov	r0, r3
 800f628:	f00d f816 	bl	801c658 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	3314      	adds	r3, #20
 800f630:	4618      	mov	r0, r3
 800f632:	f00d f8a9 	bl	801c788 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f636:	bf00      	nop
 800f638:	3718      	adds	r7, #24
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	460b      	mov	r3, r1
 800f64a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f64c:	2300      	movs	r3, #0
 800f64e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <lwip_netconn_do_close_internal+0x24>
 800f656:	4b87      	ldr	r3, [pc, #540]	@ (800f874 <lwip_netconn_do_close_internal+0x234>)
 800f658:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f65c:	4986      	ldr	r1, [pc, #536]	@ (800f878 <lwip_netconn_do_close_internal+0x238>)
 800f65e:	4887      	ldr	r0, [pc, #540]	@ (800f87c <lwip_netconn_do_close_internal+0x23c>)
 800f660:	f00d ff12 	bl	801d488 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f66c:	2b10      	cmp	r3, #16
 800f66e:	d006      	beq.n	800f67e <lwip_netconn_do_close_internal+0x3e>
 800f670:	4b80      	ldr	r3, [pc, #512]	@ (800f874 <lwip_netconn_do_close_internal+0x234>)
 800f672:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f676:	4982      	ldr	r1, [pc, #520]	@ (800f880 <lwip_netconn_do_close_internal+0x240>)
 800f678:	4880      	ldr	r0, [pc, #512]	@ (800f87c <lwip_netconn_do_close_internal+0x23c>)
 800f67a:	f00d ff05 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	785b      	ldrb	r3, [r3, #1]
 800f682:	2b04      	cmp	r3, #4
 800f684:	d006      	beq.n	800f694 <lwip_netconn_do_close_internal+0x54>
 800f686:	4b7b      	ldr	r3, [pc, #492]	@ (800f874 <lwip_netconn_do_close_internal+0x234>)
 800f688:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f68c:	497d      	ldr	r1, [pc, #500]	@ (800f884 <lwip_netconn_do_close_internal+0x244>)
 800f68e:	487b      	ldr	r0, [pc, #492]	@ (800f87c <lwip_netconn_do_close_internal+0x23c>)
 800f690:	f00d fefa 	bl	801d488 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d106      	bne.n	800f6aa <lwip_netconn_do_close_internal+0x6a>
 800f69c:	4b75      	ldr	r3, [pc, #468]	@ (800f874 <lwip_netconn_do_close_internal+0x234>)
 800f69e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f6a2:	4979      	ldr	r1, [pc, #484]	@ (800f888 <lwip_netconn_do_close_internal+0x248>)
 800f6a4:	4875      	ldr	r0, [pc, #468]	@ (800f87c <lwip_netconn_do_close_internal+0x23c>)
 800f6a6:	f00d feef 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d106      	bne.n	800f6c0 <lwip_netconn_do_close_internal+0x80>
 800f6b2:	4b70      	ldr	r3, [pc, #448]	@ (800f874 <lwip_netconn_do_close_internal+0x234>)
 800f6b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f6b8:	4974      	ldr	r1, [pc, #464]	@ (800f88c <lwip_netconn_do_close_internal+0x24c>)
 800f6ba:	4870      	ldr	r0, [pc, #448]	@ (800f87c <lwip_netconn_do_close_internal+0x23c>)
 800f6bc:	f00d fee4 	bl	801d488 <iprintf>

  tpcb = conn->pcb.tcp;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a1b      	ldr	r3, [r3, #32]
 800f6ca:	7a1b      	ldrb	r3, [r3, #8]
 800f6cc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f6ce:	7bfb      	ldrb	r3, [r7, #15]
 800f6d0:	f003 0301 	and.w	r3, r3, #1
 800f6d4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f6d6:	7bfb      	ldrb	r3, [r7, #15]
 800f6d8:	f003 0302 	and.w	r3, r3, #2
 800f6dc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f6de:	7bfb      	ldrb	r3, [r7, #15]
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	d102      	bne.n	800f6ea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	75bb      	strb	r3, [r7, #22]
 800f6e8:	e01f      	b.n	800f72a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f6ea:	7bbb      	ldrb	r3, [r7, #14]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00e      	beq.n	800f70e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f6f4:	2b05      	cmp	r3, #5
 800f6f6:	d007      	beq.n	800f708 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f6fc:	2b06      	cmp	r3, #6
 800f6fe:	d003      	beq.n	800f708 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f704:	2b08      	cmp	r3, #8
 800f706:	d102      	bne.n	800f70e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f708:	2301      	movs	r3, #1
 800f70a:	75bb      	strb	r3, [r7, #22]
 800f70c:	e00d      	b.n	800f72a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f70e:	7b7b      	ldrb	r3, [r7, #13]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d008      	beq.n	800f726 <lwip_netconn_do_close_internal+0xe6>
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	8b5b      	ldrh	r3, [r3, #26]
 800f718:	f003 0310 	and.w	r3, r3, #16
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d002      	beq.n	800f726 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f720:	2301      	movs	r3, #1
 800f722:	75bb      	strb	r3, [r7, #22]
 800f724:	e001      	b.n	800f72a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f726:	2300      	movs	r3, #0
 800f728:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f72a:	7dbb      	ldrb	r3, [r7, #22]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d003      	beq.n	800f738 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f730:	2100      	movs	r1, #0
 800f732:	6938      	ldr	r0, [r7, #16]
 800f734:	f005 f9a8 	bl	8014a88 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d104      	bne.n	800f74a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f740:	2100      	movs	r1, #0
 800f742:	6938      	ldr	r0, [r7, #16]
 800f744:	f005 fa18 	bl	8014b78 <tcp_accept>
 800f748:	e01d      	b.n	800f786 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f74a:	7bbb      	ldrb	r3, [r7, #14]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d007      	beq.n	800f760 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f750:	2100      	movs	r1, #0
 800f752:	6938      	ldr	r0, [r7, #16]
 800f754:	f005 f9aa 	bl	8014aac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f758:	2100      	movs	r1, #0
 800f75a:	6938      	ldr	r0, [r7, #16]
 800f75c:	f005 fa0c 	bl	8014b78 <tcp_accept>
    }
    if (shut_tx) {
 800f760:	7b7b      	ldrb	r3, [r7, #13]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d003      	beq.n	800f76e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f766:	2100      	movs	r1, #0
 800f768:	6938      	ldr	r0, [r7, #16]
 800f76a:	f005 f9c1 	bl	8014af0 <tcp_sent>
    }
    if (shut_close) {
 800f76e:	7dbb      	ldrb	r3, [r7, #22]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d008      	beq.n	800f786 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f774:	2200      	movs	r2, #0
 800f776:	2100      	movs	r1, #0
 800f778:	6938      	ldr	r0, [r7, #16]
 800f77a:	f005 fa15 	bl	8014ba8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f77e:	2100      	movs	r1, #0
 800f780:	6938      	ldr	r0, [r7, #16]
 800f782:	f005 f9d7 	bl	8014b34 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f786:	7dbb      	ldrb	r3, [r7, #22]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d005      	beq.n	800f798 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f78c:	6938      	ldr	r0, [r7, #16]
 800f78e:	f003 ff75 	bl	801367c <tcp_close>
 800f792:	4603      	mov	r3, r0
 800f794:	75fb      	strb	r3, [r7, #23]
 800f796:	e007      	b.n	800f7a8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	7b7a      	ldrb	r2, [r7, #13]
 800f79c:	4619      	mov	r1, r3
 800f79e:	6938      	ldr	r0, [r7, #16]
 800f7a0:	f003 ff98 	bl	80136d4 <tcp_shutdown>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d102      	bne.n	800f7b6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	757b      	strb	r3, [r7, #21]
 800f7b4:	e016      	b.n	800f7e4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7be:	d10f      	bne.n	800f7e0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a1b      	ldr	r3, [r3, #32]
 800f7c4:	7a5b      	ldrb	r3, [r3, #9]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10c      	bne.n	800f7e4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f7ce:	7dbb      	ldrb	r3, [r7, #22]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d007      	beq.n	800f7e4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f7d4:	6938      	ldr	r0, [r7, #16]
 800f7d6:	f004 f897 	bl	8013908 <tcp_abort>
          err = ERR_OK;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	75fb      	strb	r3, [r7, #23]
 800f7de:	e001      	b.n	800f7e4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f7e4:	7d7b      	ldrb	r3, [r7, #21]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d052      	beq.n	800f890 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a1b      	ldr	r3, [r3, #32]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	330c      	adds	r3, #12
 800f7f2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6a1b      	ldr	r3, [r3, #32]
 800f7f8:	7dfa      	ldrb	r2, [r7, #23]
 800f7fa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d129      	bne.n	800f864 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f810:	7dbb      	ldrb	r3, [r7, #22]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00c      	beq.n	800f830 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2200      	movs	r2, #0
 800f81a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	d005      	beq.n	800f830 <lwip_netconn_do_close_internal+0x1f0>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f828:	2200      	movs	r2, #0
 800f82a:	2104      	movs	r1, #4
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	4798      	blx	r3
      }
      if (shut_rx) {
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d009      	beq.n	800f84a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d005      	beq.n	800f84a <lwip_netconn_do_close_internal+0x20a>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f842:	2200      	movs	r2, #0
 800f844:	2100      	movs	r1, #0
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	4798      	blx	r3
      }
      if (shut_tx) {
 800f84a:	7b7b      	ldrb	r3, [r7, #13]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d009      	beq.n	800f864 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f854:	2b00      	cmp	r3, #0
 800f856:	d005      	beq.n	800f864 <lwip_netconn_do_close_internal+0x224>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f85c:	2200      	movs	r2, #0
 800f85e:	2102      	movs	r1, #2
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f864:	78fb      	ldrb	r3, [r7, #3]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d002      	beq.n	800f870 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f86a:	68b8      	ldr	r0, [r7, #8]
 800f86c:	f00c fff2 	bl	801c854 <sys_sem_signal>
    }
    return ERR_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	e03c      	b.n	800f8ee <lwip_netconn_do_close_internal+0x2ae>
 800f874:	0801fe68 	.word	0x0801fe68
 800f878:	0802013c 	.word	0x0802013c
 800f87c:	0801feac 	.word	0x0801feac
 800f880:	0802014c 	.word	0x0802014c
 800f884:	0802016c 	.word	0x0802016c
 800f888:	08020190 	.word	0x08020190
 800f88c:	0801ffd0 	.word	0x0801ffd0
  }
  if (!close_finished) {
 800f890:	7d7b      	ldrb	r3, [r7, #21]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d11e      	bne.n	800f8d4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	7d1b      	ldrb	r3, [r3, #20]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d106      	bne.n	800f8ac <lwip_netconn_do_close_internal+0x26c>
 800f89e:	4b16      	ldr	r3, [pc, #88]	@ (800f8f8 <lwip_netconn_do_close_internal+0x2b8>)
 800f8a0:	f240 4241 	movw	r2, #1089	@ 0x441
 800f8a4:	4915      	ldr	r1, [pc, #84]	@ (800f8fc <lwip_netconn_do_close_internal+0x2bc>)
 800f8a6:	4816      	ldr	r0, [pc, #88]	@ (800f900 <lwip_netconn_do_close_internal+0x2c0>)
 800f8a8:	f00d fdee 	bl	801d488 <iprintf>
    if (shut_tx) {
 800f8ac:	7b7b      	ldrb	r3, [r7, #13]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d003      	beq.n	800f8ba <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800f8b2:	4914      	ldr	r1, [pc, #80]	@ (800f904 <lwip_netconn_do_close_internal+0x2c4>)
 800f8b4:	6938      	ldr	r0, [r7, #16]
 800f8b6:	f005 f91b 	bl	8014af0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4912      	ldr	r1, [pc, #72]	@ (800f908 <lwip_netconn_do_close_internal+0x2c8>)
 800f8be:	6938      	ldr	r0, [r7, #16]
 800f8c0:	f005 f972 	bl	8014ba8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f8c4:	4911      	ldr	r1, [pc, #68]	@ (800f90c <lwip_netconn_do_close_internal+0x2cc>)
 800f8c6:	6938      	ldr	r0, [r7, #16]
 800f8c8:	f005 f934 	bl	8014b34 <tcp_err>
    tcp_arg(tpcb, conn);
 800f8cc:	6879      	ldr	r1, [r7, #4]
 800f8ce:	6938      	ldr	r0, [r7, #16]
 800f8d0:	f005 f8da 	bl	8014a88 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d106      	bne.n	800f8ea <lwip_netconn_do_close_internal+0x2aa>
 800f8dc:	4b06      	ldr	r3, [pc, #24]	@ (800f8f8 <lwip_netconn_do_close_internal+0x2b8>)
 800f8de:	f240 424d 	movw	r2, #1101	@ 0x44d
 800f8e2:	490b      	ldr	r1, [pc, #44]	@ (800f910 <lwip_netconn_do_close_internal+0x2d0>)
 800f8e4:	4806      	ldr	r0, [pc, #24]	@ (800f900 <lwip_netconn_do_close_internal+0x2c0>)
 800f8e6:	f00d fdcf 	bl	801d488 <iprintf>
  return err;
 800f8ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3718      	adds	r7, #24
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	0801fe68 	.word	0x0801fe68
 800f8fc:	080201a4 	.word	0x080201a4
 800f900:	0801feac 	.word	0x0801feac
 800f904:	0800eeb9 	.word	0x0800eeb9
 800f908:	0800edf1 	.word	0x0800edf1
 800f90c:	0800ef61 	.word	0x0800ef61
 800f910:	080201c8 	.word	0x080201c8

0800f914 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	785b      	ldrb	r3, [r3, #1]
 800f926:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f928:	7afb      	ldrb	r3, [r7, #11]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00d      	beq.n	800f94a <lwip_netconn_do_delconn+0x36>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f938:	2b10      	cmp	r3, #16
 800f93a:	d006      	beq.n	800f94a <lwip_netconn_do_delconn+0x36>
 800f93c:	4b60      	ldr	r3, [pc, #384]	@ (800fac0 <lwip_netconn_do_delconn+0x1ac>)
 800f93e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800f942:	4960      	ldr	r1, [pc, #384]	@ (800fac4 <lwip_netconn_do_delconn+0x1b0>)
 800f944:	4860      	ldr	r0, [pc, #384]	@ (800fac8 <lwip_netconn_do_delconn+0x1b4>)
 800f946:	f00d fd9f 	bl	801d488 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f94a:	7afb      	ldrb	r3, [r7, #11]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d005      	beq.n	800f95c <lwip_netconn_do_delconn+0x48>
 800f950:	7afb      	ldrb	r3, [r7, #11]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d002      	beq.n	800f95c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f956:	7afb      	ldrb	r3, [r7, #11]
 800f958:	2b03      	cmp	r3, #3
 800f95a:	d109      	bne.n	800f970 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f95c:	7afb      	ldrb	r3, [r7, #11]
 800f95e:	2b03      	cmp	r3, #3
 800f960:	d10a      	bne.n	800f978 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	7f1b      	ldrb	r3, [r3, #28]
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d103      	bne.n	800f978 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	22fb      	movs	r2, #251	@ 0xfb
 800f974:	711a      	strb	r2, [r3, #4]
 800f976:	e097      	b.n	800faa8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f978:	7afb      	ldrb	r3, [r7, #11]
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d10d      	bne.n	800f99a <lwip_netconn_do_delconn+0x86>
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	7f1b      	ldrb	r3, [r3, #28]
 800f984:	f003 0304 	and.w	r3, r3, #4
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d106      	bne.n	800f99a <lwip_netconn_do_delconn+0x86>
 800f98c:	4b4c      	ldr	r3, [pc, #304]	@ (800fac0 <lwip_netconn_do_delconn+0x1ac>)
 800f98e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800f992:	494e      	ldr	r1, [pc, #312]	@ (800facc <lwip_netconn_do_delconn+0x1b8>)
 800f994:	484c      	ldr	r0, [pc, #304]	@ (800fac8 <lwip_netconn_do_delconn+0x1b4>)
 800f996:	f00d fd77 	bl	801d488 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2200      	movs	r2, #0
 800f99e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fdcd 	bl	800f544 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d05f      	beq.n	800fa74 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f9be:	2b10      	cmp	r3, #16
 800f9c0:	d00d      	beq.n	800f9de <lwip_netconn_do_delconn+0xca>
 800f9c2:	2b20      	cmp	r3, #32
 800f9c4:	d151      	bne.n	800fa6a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	685b      	ldr	r3, [r3, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f00a fac0 	bl	8019f5c <udp_remove>
          break;
 800f9dc:	e046      	b.n	800fa6c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	6a1b      	ldr	r3, [r3, #32]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d006      	beq.n	800f9f6 <lwip_netconn_do_delconn+0xe2>
 800f9e8:	4b35      	ldr	r3, [pc, #212]	@ (800fac0 <lwip_netconn_do_delconn+0x1ac>)
 800f9ea:	f240 4294 	movw	r2, #1172	@ 0x494
 800f9ee:	4938      	ldr	r1, [pc, #224]	@ (800fad0 <lwip_netconn_do_delconn+0x1bc>)
 800f9f0:	4835      	ldr	r0, [pc, #212]	@ (800fac8 <lwip_netconn_do_delconn+0x1b4>)
 800f9f2:	f00d fd49 	bl	801d488 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2204      	movs	r2, #4
 800f9fc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2203      	movs	r2, #3
 800fa02:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2100      	movs	r1, #0
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff fe14 	bl	800f640 <lwip_netconn_do_close_internal>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d04b      	beq.n	800fab6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	785b      	ldrb	r3, [r3, #1]
 800fa24:	2b04      	cmp	r3, #4
 800fa26:	d006      	beq.n	800fa36 <lwip_netconn_do_delconn+0x122>
 800fa28:	4b25      	ldr	r3, [pc, #148]	@ (800fac0 <lwip_netconn_do_delconn+0x1ac>)
 800fa2a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800fa2e:	4929      	ldr	r1, [pc, #164]	@ (800fad4 <lwip_netconn_do_delconn+0x1c0>)
 800fa30:	4825      	ldr	r0, [pc, #148]	@ (800fac8 <lwip_netconn_do_delconn+0x1b4>)
 800fa32:	f00d fd29 	bl	801d488 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fa36:	4828      	ldr	r0, [pc, #160]	@ (800fad8 <lwip_netconn_do_delconn+0x1c4>)
 800fa38:	f00c ff7d 	bl	801c936 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	330c      	adds	r3, #12
 800fa42:	2100      	movs	r1, #0
 800fa44:	4618      	mov	r0, r3
 800fa46:	f00c fed4 	bl	801c7f2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800fa4a:	4823      	ldr	r0, [pc, #140]	@ (800fad8 <lwip_netconn_do_delconn+0x1c4>)
 800fa4c:	f00c ff64 	bl	801c918 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	785b      	ldrb	r3, [r3, #1]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d02d      	beq.n	800fab6 <lwip_netconn_do_delconn+0x1a2>
 800fa5a:	4b19      	ldr	r3, [pc, #100]	@ (800fac0 <lwip_netconn_do_delconn+0x1ac>)
 800fa5c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800fa60:	491c      	ldr	r1, [pc, #112]	@ (800fad4 <lwip_netconn_do_delconn+0x1c0>)
 800fa62:	4819      	ldr	r0, [pc, #100]	@ (800fac8 <lwip_netconn_do_delconn+0x1b4>)
 800fa64:	f00d fd10 	bl	801d488 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fa68:	e025      	b.n	800fab6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800fa6a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2200      	movs	r2, #0
 800fa72:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d007      	beq.n	800fa8e <lwip_netconn_do_delconn+0x17a>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa84:	68fa      	ldr	r2, [r7, #12]
 800fa86:	6810      	ldr	r0, [r2, #0]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d007      	beq.n	800faa8 <lwip_netconn_do_delconn+0x194>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	6810      	ldr	r0, [r2, #0]
 800faa2:	2200      	movs	r2, #0
 800faa4:	2102      	movs	r1, #2
 800faa6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	330c      	adds	r3, #12
 800faae:	4618      	mov	r0, r3
 800fab0:	f00c feea 	bl	801c888 <sys_sem_valid>
 800fab4:	e000      	b.n	800fab8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fab6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0801fe68 	.word	0x0801fe68
 800fac4:	080201d8 	.word	0x080201d8
 800fac8:	0801feac 	.word	0x0801feac
 800facc:	080201ec 	.word	0x080201ec
 800fad0:	0802020c 	.word	0x0802020c
 800fad4:	08020228 	.word	0x08020228
 800fad8:	2000b7fc 	.word	0x2000b7fc

0800fadc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d025      	beq.n	800fb3e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fafc:	2b10      	cmp	r3, #16
 800fafe:	d00e      	beq.n	800fb1e <lwip_netconn_do_bind+0x42>
 800fb00:	2b20      	cmp	r3, #32
 800fb02:	d119      	bne.n	800fb38 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6858      	ldr	r0, [r3, #4]
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	6899      	ldr	r1, [r3, #8]
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	899b      	ldrh	r3, [r3, #12]
 800fb12:	461a      	mov	r2, r3
 800fb14:	f00a f97a 	bl	8019e0c <udp_bind>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	73fb      	strb	r3, [r7, #15]
        break;
 800fb1c:	e011      	b.n	800fb42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	6858      	ldr	r0, [r3, #4]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	6899      	ldr	r1, [r3, #8]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	899b      	ldrh	r3, [r3, #12]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	f003 fef7 	bl	8013920 <tcp_bind>
 800fb32:	4603      	mov	r3, r0
 800fb34:	73fb      	strb	r3, [r7, #15]
        break;
 800fb36:	e004      	b.n	800fb42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fb38:	23fa      	movs	r3, #250	@ 0xfa
 800fb3a:	73fb      	strb	r3, [r7, #15]
        break;
 800fb3c:	e001      	b.n	800fb42 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fb3e:	23fa      	movs	r3, #250	@ 0xfa
 800fb40:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	7bfa      	ldrb	r2, [r7, #15]
 800fb46:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d07f      	beq.n	800fc66 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb70:	2b10      	cmp	r3, #16
 800fb72:	d175      	bne.n	800fc60 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	785b      	ldrb	r3, [r3, #1]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d165      	bne.n	800fc4a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	7d1b      	ldrb	r3, [r3, #20]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d002      	beq.n	800fb90 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fb8a:	23fa      	movs	r3, #250	@ 0xfa
 800fb8c:	72fb      	strb	r3, [r7, #11]
 800fb8e:	e06c      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fb90:	23ff      	movs	r3, #255	@ 0xff
 800fb92:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	f107 020b 	add.w	r2, r7, #11
 800fb9e:	7cf9      	ldrb	r1, [r7, #19]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f003 ff87 	bl	8013ab4 <tcp_listen_with_backlog_and_err>
 800fba6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d05d      	beq.n	800fc6a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	3310      	adds	r3, #16
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f00c fdd6 	bl	801c766 <sys_mbox_valid>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d00b      	beq.n	800fbd8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	3310      	adds	r3, #16
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f00c fd46 	bl	801c658 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3310      	adds	r3, #16
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f00c fdd8 	bl	801c788 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	3314      	adds	r3, #20
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f00c fdbf 	bl	801c766 <sys_mbox_valid>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d108      	bne.n	800fc00 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3314      	adds	r3, #20
 800fbf4:	2106      	movs	r1, #6
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	f00c fd0c 	bl	801c614 <sys_mbox_new>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800fc00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d118      	bne.n	800fc3a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	4619      	mov	r1, r3
 800fc24:	4610      	mov	r0, r2
 800fc26:	f004 ff2f 	bl	8014a88 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	4912      	ldr	r1, [pc, #72]	@ (800fc7c <lwip_netconn_do_listen+0x12c>)
 800fc32:	4618      	mov	r0, r3
 800fc34:	f004 ffa0 	bl	8014b78 <tcp_accept>
 800fc38:	e017      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f003 fd1e 	bl	801367c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2200      	movs	r2, #0
 800fc46:	605a      	str	r2, [r3, #4]
 800fc48:	e00f      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	785b      	ldrb	r3, [r3, #1]
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d102      	bne.n	800fc5a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	72fb      	strb	r3, [r7, #11]
 800fc58:	e007      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800fc5a:	23f5      	movs	r3, #245	@ 0xf5
 800fc5c:	72fb      	strb	r3, [r7, #11]
 800fc5e:	e004      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800fc60:	23f0      	movs	r3, #240	@ 0xf0
 800fc62:	72fb      	strb	r3, [r7, #11]
 800fc64:	e001      	b.n	800fc6a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800fc66:	23f5      	movs	r3, #245	@ 0xf5
 800fc68:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800fc6a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fc72:	bf00      	nop
 800fc74:	3718      	adds	r7, #24
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	0800f15d 	.word	0x0800f15d

0800fc80 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b084      	sub	sp, #16
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7fe ff1e 	bl	800ead2 <netconn_err>
 800fc96:	4603      	mov	r3, r0
 800fc98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fc9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d134      	bne.n	800fd0c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d02d      	beq.n	800fd08 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fcb6:	2b20      	cmp	r3, #32
 800fcb8:	d123      	bne.n	800fd02 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d10c      	bne.n	800fcde <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	f009 feb0 	bl	8019a38 <udp_send>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800fcdc:	e016      	b.n	800fd0c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6858      	ldr	r0, [r3, #4]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	6819      	ldr	r1, [r3, #0]
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	689b      	ldr	r3, [r3, #8]
 800fcee:	f103 0208 	add.w	r2, r3, #8
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	899b      	ldrh	r3, [r3, #12]
 800fcf8:	f009 fed2 	bl	8019aa0 <udp_sendto>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	73fb      	strb	r3, [r7, #15]
          break;
 800fd00:	e004      	b.n	800fd0c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800fd02:	23f5      	movs	r3, #245	@ 0xf5
 800fd04:	73fb      	strb	r3, [r7, #15]
          break;
 800fd06:	e001      	b.n	800fd0c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fd08:	23f5      	movs	r3, #245	@ 0xf5
 800fd0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	7bfa      	ldrb	r2, [r7, #15]
 800fd10:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}

0800fd1a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fd1a:	b580      	push	{r7, lr}
 800fd1c:	b086      	sub	sp, #24
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fd26:	693b      	ldr	r3, [r7, #16]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d022      	beq.n	800fd7c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd40:	2b10      	cmp	r3, #16
 800fd42:	d11b      	bne.n	800fd7c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd50:	d202      	bcs.n	800fd58 <lwip_netconn_do_recv+0x3e>
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	e001      	b.n	800fd5c <lwip_netconn_do_recv+0x42>
 800fd58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd5c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	89fa      	ldrh	r2, [r7, #14]
 800fd66:	4611      	mov	r1, r2
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f003 ffa7 	bl	8013cbc <tcp_recved>
        remaining -= recved;
 800fd6e:	89fb      	ldrh	r3, [r7, #14]
 800fd70:	697a      	ldr	r2, [r7, #20]
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e6      	bne.n	800fd4a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800fd7c:	bf00      	nop
 800fd7e:	3718      	adds	r7, #24
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d106      	bne.n	800fda8 <lwip_netconn_do_writemore+0x24>
 800fd9a:	4b96      	ldr	r3, [pc, #600]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fd9c:	f240 6273 	movw	r2, #1651	@ 0x673
 800fda0:	4995      	ldr	r1, [pc, #596]	@ (800fff8 <lwip_netconn_do_writemore+0x274>)
 800fda2:	4896      	ldr	r0, [pc, #600]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fda4:	f00d fb70 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	785b      	ldrb	r3, [r3, #1]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d006      	beq.n	800fdbe <lwip_netconn_do_writemore+0x3a>
 800fdb0:	4b90      	ldr	r3, [pc, #576]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fdb2:	f240 6274 	movw	r2, #1652	@ 0x674
 800fdb6:	4992      	ldr	r1, [pc, #584]	@ (8010000 <lwip_netconn_do_writemore+0x27c>)
 800fdb8:	4890      	ldr	r0, [pc, #576]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fdba:	f00d fb65 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a1b      	ldr	r3, [r3, #32]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d106      	bne.n	800fdd4 <lwip_netconn_do_writemore+0x50>
 800fdc6:	4b8b      	ldr	r3, [pc, #556]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fdc8:	f240 6275 	movw	r2, #1653	@ 0x675
 800fdcc:	498d      	ldr	r1, [pc, #564]	@ (8010004 <lwip_netconn_do_writemore+0x280>)
 800fdce:	488b      	ldr	r0, [pc, #556]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fdd0:	f00d fb5a 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d106      	bne.n	800fdea <lwip_netconn_do_writemore+0x66>
 800fddc:	4b85      	ldr	r3, [pc, #532]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fdde:	f240 6276 	movw	r2, #1654	@ 0x676
 800fde2:	4989      	ldr	r1, [pc, #548]	@ (8010008 <lwip_netconn_do_writemore+0x284>)
 800fde4:	4885      	ldr	r0, [pc, #532]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fde6:	f00d fb4f 	bl	801d488 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	699a      	ldr	r2, [r3, #24]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a1b      	ldr	r3, [r3, #32]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d306      	bcc.n	800fe08 <lwip_netconn_do_writemore+0x84>
 800fdfa:	4b7e      	ldr	r3, [pc, #504]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fdfc:	f240 6277 	movw	r2, #1655	@ 0x677
 800fe00:	4982      	ldr	r1, [pc, #520]	@ (801000c <lwip_netconn_do_writemore+0x288>)
 800fe02:	487e      	ldr	r0, [pc, #504]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fe04:	f00d fb40 	bl	801d488 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a1b      	ldr	r3, [r3, #32]
 800fe0c:	899b      	ldrh	r3, [r3, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d106      	bne.n	800fe20 <lwip_netconn_do_writemore+0x9c>
 800fe12:	4b78      	ldr	r3, [pc, #480]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fe14:	f240 6279 	movw	r2, #1657	@ 0x679
 800fe18:	497d      	ldr	r1, [pc, #500]	@ (8010010 <lwip_netconn_do_writemore+0x28c>)
 800fe1a:	4878      	ldr	r0, [pc, #480]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fe1c:	f00d fb34 	bl	801d488 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a1b      	ldr	r3, [r3, #32]
 800fe24:	7f1b      	ldrb	r3, [r3, #28]
 800fe26:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7f1b      	ldrb	r3, [r3, #28]
 800fe2c:	f003 0302 	and.w	r3, r3, #2
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d104      	bne.n	800fe3e <lwip_netconn_do_writemore+0xba>
 800fe34:	7ebb      	ldrb	r3, [r7, #26]
 800fe36:	f003 0304 	and.w	r3, r3, #4
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <lwip_netconn_do_writemore+0xbe>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e000      	b.n	800fe44 <lwip_netconn_do_writemore+0xc0>
 800fe42:	2300      	movs	r3, #0
 800fe44:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a1b      	ldr	r3, [r3, #32]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a1b      	ldr	r3, [r3, #32]
 800fe52:	691b      	ldr	r3, [r3, #16]
 800fe54:	4413      	add	r3, r2
 800fe56:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a1b      	ldr	r3, [r3, #32]
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe70:	d307      	bcc.n	800fe82 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800fe72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe76:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fe78:	7ebb      	ldrb	r3, [r7, #26]
 800fe7a:	f043 0302 	orr.w	r3, r3, #2
 800fe7e:	76bb      	strb	r3, [r7, #26]
 800fe80:	e001      	b.n	800fe86 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe8e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800fe90:	89fa      	ldrh	r2, [r7, #14]
 800fe92:	8bbb      	ldrh	r3, [r7, #28]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d216      	bcs.n	800fec6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800fe98:	89fb      	ldrh	r3, [r7, #14]
 800fe9a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800fe9c:	7e3b      	ldrb	r3, [r7, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d00d      	beq.n	800febe <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800fea2:	8bbb      	ldrh	r3, [r7, #28]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10e      	bne.n	800fec6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a1b      	ldr	r3, [r3, #32]
 800feac:	699b      	ldr	r3, [r3, #24]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d102      	bne.n	800feb8 <lwip_netconn_do_writemore+0x134>
 800feb2:	f06f 0306 	mvn.w	r3, #6
 800feb6:	e000      	b.n	800feba <lwip_netconn_do_writemore+0x136>
 800feb8:	2300      	movs	r3, #0
 800feba:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800febc:	e07d      	b.n	800ffba <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800febe:	7ebb      	ldrb	r3, [r7, #26]
 800fec0:	f043 0302 	orr.w	r3, r3, #2
 800fec4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a1b      	ldr	r3, [r3, #32]
 800feca:	691a      	ldr	r2, [r3, #16]
 800fecc:	8bbb      	ldrh	r3, [r7, #28]
 800fece:	441a      	add	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a1b      	ldr	r3, [r3, #32]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d906      	bls.n	800feea <lwip_netconn_do_writemore+0x166>
 800fedc:	4b45      	ldr	r3, [pc, #276]	@ (800fff4 <lwip_netconn_do_writemore+0x270>)
 800fede:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800fee2:	494c      	ldr	r1, [pc, #304]	@ (8010014 <lwip_netconn_do_writemore+0x290>)
 800fee4:	4845      	ldr	r0, [pc, #276]	@ (800fffc <lwip_netconn_do_writemore+0x278>)
 800fee6:	f00d facf 	bl	801d488 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800feea:	8bbb      	ldrh	r3, [r7, #28]
 800feec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d103      	bne.n	800fefc <lwip_netconn_do_writemore+0x178>
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fefa:	d209      	bcs.n	800ff10 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ff00:	8bba      	ldrh	r2, [r7, #28]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d10b      	bne.n	800ff1e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6a1b      	ldr	r3, [r3, #32]
 800ff0a:	899b      	ldrh	r3, [r3, #12]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d906      	bls.n	800ff1e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ff10:	2301      	movs	r3, #1
 800ff12:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ff14:	7ebb      	ldrb	r3, [r7, #26]
 800ff16:	f043 0302 	orr.w	r3, r3, #2
 800ff1a:	76bb      	strb	r3, [r7, #26]
 800ff1c:	e001      	b.n	800ff22 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6858      	ldr	r0, [r3, #4]
 800ff26:	7ebb      	ldrb	r3, [r7, #26]
 800ff28:	8bba      	ldrh	r2, [r7, #28]
 800ff2a:	6979      	ldr	r1, [r7, #20]
 800ff2c:	f007 fce8 	bl	8017900 <tcp_write>
 800ff30:	4603      	mov	r3, r0
 800ff32:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ff34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d12c      	bne.n	800ff96 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	6999      	ldr	r1, [r3, #24]
 800ff42:	8bba      	ldrh	r2, [r7, #28]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6a1b      	ldr	r3, [r3, #32]
 800ff48:	440a      	add	r2, r1
 800ff4a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a1b      	ldr	r3, [r3, #32]
 800ff50:	6919      	ldr	r1, [r3, #16]
 800ff52:	8bba      	ldrh	r2, [r7, #28]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a1b      	ldr	r3, [r3, #32]
 800ff58:	440a      	add	r2, r1
 800ff5a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6a1b      	ldr	r3, [r3, #32]
 800ff60:	691a      	ldr	r2, [r3, #16]
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a1b      	ldr	r3, [r3, #32]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d113      	bne.n	800ff96 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a1b      	ldr	r3, [r3, #32]
 800ff72:	899a      	ldrh	r2, [r3, #12]
 800ff74:	3a01      	subs	r2, #1
 800ff76:	b292      	uxth	r2, r2
 800ff78:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	899b      	ldrh	r3, [r3, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d008      	beq.n	800ff96 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6a1b      	ldr	r3, [r3, #32]
 800ff88:	689a      	ldr	r2, [r3, #8]
 800ff8a:	3208      	adds	r2, #8
 800ff8c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a1b      	ldr	r3, [r3, #32]
 800ff92:	2200      	movs	r2, #0
 800ff94:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ff96:	7e7b      	ldrb	r3, [r7, #25]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d004      	beq.n	800ffa6 <lwip_netconn_do_writemore+0x222>
 800ff9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f43f af50 	beq.w	800fe46 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ffa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d004      	beq.n	800ffb8 <lwip_netconn_do_writemore+0x234>
 800ffae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ffb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb6:	d146      	bne.n	8010046 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ffb8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ffba:	7e3b      	ldrb	r3, [r7, #24]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d02b      	beq.n	8010018 <lwip_netconn_do_writemore+0x294>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6a1b      	ldr	r3, [r3, #32]
 800ffc4:	699a      	ldr	r2, [r3, #24]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6a1b      	ldr	r3, [r3, #32]
 800ffca:	695b      	ldr	r3, [r3, #20]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d223      	bcs.n	8010018 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d005      	beq.n	800ffe4 <lwip_netconn_do_writemore+0x260>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2103      	movs	r1, #3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	7f1b      	ldrb	r3, [r3, #28]
 800ffe8:	f043 0310 	orr.w	r3, r3, #16
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	771a      	strb	r2, [r3, #28]
 800fff2:	e028      	b.n	8010046 <lwip_netconn_do_writemore+0x2c2>
 800fff4:	0801fe68 	.word	0x0801fe68
 800fff8:	0801ffc0 	.word	0x0801ffc0
 800fffc:	0801feac 	.word	0x0801feac
 8010000:	080202c8 	.word	0x080202c8
 8010004:	0801ffd0 	.word	0x0801ffd0
 8010008:	080202e8 	.word	0x080202e8
 801000c:	08020300 	.word	0x08020300
 8010010:	08020340 	.word	0x08020340
 8010014:	08020368 	.word	0x08020368
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010020:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010024:	d305      	bcc.n	8010032 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801002e:	2b04      	cmp	r3, #4
 8010030:	d909      	bls.n	8010046 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010036:	2b00      	cmp	r3, #0
 8010038:	d005      	beq.n	8010046 <lwip_netconn_do_writemore+0x2c2>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801003e:	2200      	movs	r2, #0
 8010040:	2103      	movs	r1, #3
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010046:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d11d      	bne.n	801008a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6a1b      	ldr	r3, [r3, #32]
 8010052:	699a      	ldr	r2, [r3, #24]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6a1b      	ldr	r3, [r3, #32]
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	429a      	cmp	r2, r3
 801005c:	d002      	beq.n	8010064 <lwip_netconn_do_writemore+0x2e0>
 801005e:	7e3b      	ldrb	r3, [r7, #24]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010064:	2301      	movs	r3, #1
 8010066:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	f008 fa31 	bl	80184d4 <tcp_output>
 8010072:	4603      	mov	r3, r0
 8010074:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010076:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801007a:	f113 0f04 	cmn.w	r3, #4
 801007e:	d12c      	bne.n	80100da <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010080:	7b3b      	ldrb	r3, [r7, #12]
 8010082:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010084:	2301      	movs	r3, #1
 8010086:	76fb      	strb	r3, [r7, #27]
 8010088:	e027      	b.n	80100da <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801008a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801008e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010092:	d120      	bne.n	80100d6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	4618      	mov	r0, r3
 801009a:	f008 fa1b 	bl	80184d4 <tcp_output>
 801009e:	4603      	mov	r3, r0
 80100a0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80100a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80100a6:	f113 0f04 	cmn.w	r3, #4
 80100aa:	d104      	bne.n	80100b6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80100ac:	7b7b      	ldrb	r3, [r7, #13]
 80100ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80100b0:	2301      	movs	r3, #1
 80100b2:	76fb      	strb	r3, [r7, #27]
 80100b4:	e011      	b.n	80100da <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80100b6:	7e3b      	ldrb	r3, [r7, #24]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00e      	beq.n	80100da <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a1b      	ldr	r3, [r3, #32]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d102      	bne.n	80100cc <lwip_netconn_do_writemore+0x348>
 80100c6:	f06f 0306 	mvn.w	r3, #6
 80100ca:	e000      	b.n	80100ce <lwip_netconn_do_writemore+0x34a>
 80100cc:	2300      	movs	r3, #0
 80100ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80100d0:	2301      	movs	r3, #1
 80100d2:	76fb      	strb	r3, [r7, #27]
 80100d4:	e001      	b.n	80100da <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80100d6:	2301      	movs	r3, #1
 80100d8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80100da:	7efb      	ldrb	r3, [r7, #27]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d015      	beq.n	801010c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6a1b      	ldr	r3, [r3, #32]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	330c      	adds	r3, #12
 80100e8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6a1b      	ldr	r3, [r3, #32]
 80100ee:	7ffa      	ldrb	r2, [r7, #31]
 80100f0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d006      	beq.n	8010112 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010104:	68b8      	ldr	r0, [r7, #8]
 8010106:	f00c fba5 	bl	801c854 <sys_sem_signal>
 801010a:	e002      	b.n	8010112 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801010c:	f04f 33ff 	mov.w	r3, #4294967295
 8010110:	e000      	b.n	8010114 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3720      	adds	r7, #32
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4618      	mov	r0, r3
 801012e:	f7fe fcd0 	bl	800ead2 <netconn_err>
 8010132:	4603      	mov	r3, r0
 8010134:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d166      	bne.n	801020c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010148:	2b10      	cmp	r3, #16
 801014a:	d15d      	bne.n	8010208 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	785b      	ldrb	r3, [r3, #1]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d002      	beq.n	801015c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010156:	23fb      	movs	r3, #251	@ 0xfb
 8010158:	73fb      	strb	r3, [r7, #15]
 801015a:	e057      	b.n	801020c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d04d      	beq.n	8010202 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2201      	movs	r2, #1
 801016c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	6a1b      	ldr	r3, [r3, #32]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d006      	beq.n	8010186 <lwip_netconn_do_write+0x6a>
 8010178:	4b28      	ldr	r3, [pc, #160]	@ (801021c <lwip_netconn_do_write+0x100>)
 801017a:	f240 7223 	movw	r2, #1827	@ 0x723
 801017e:	4928      	ldr	r1, [pc, #160]	@ (8010220 <lwip_netconn_do_write+0x104>)
 8010180:	4828      	ldr	r0, [pc, #160]	@ (8010224 <lwip_netconn_do_write+0x108>)
 8010182:	f00d f981 	bl	801d488 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <lwip_netconn_do_write+0x80>
 801018e:	4b23      	ldr	r3, [pc, #140]	@ (801021c <lwip_netconn_do_write+0x100>)
 8010190:	f240 7224 	movw	r2, #1828	@ 0x724
 8010194:	4924      	ldr	r1, [pc, #144]	@ (8010228 <lwip_netconn_do_write+0x10c>)
 8010196:	4823      	ldr	r0, [pc, #140]	@ (8010224 <lwip_netconn_do_write+0x108>)
 8010198:	f00d f976 	bl	801d488 <iprintf>
        msg->conn->current_msg = msg;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	68ba      	ldr	r2, [r7, #8]
 80101a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2100      	movs	r1, #0
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff fdea 	bl	800fd84 <lwip_netconn_do_writemore>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d02e      	beq.n	8010214 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	785b      	ldrb	r3, [r3, #1]
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d006      	beq.n	80101ce <lwip_netconn_do_write+0xb2>
 80101c0:	4b16      	ldr	r3, [pc, #88]	@ (801021c <lwip_netconn_do_write+0x100>)
 80101c2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80101c6:	4919      	ldr	r1, [pc, #100]	@ (801022c <lwip_netconn_do_write+0x110>)
 80101c8:	4816      	ldr	r0, [pc, #88]	@ (8010224 <lwip_netconn_do_write+0x108>)
 80101ca:	f00d f95d 	bl	801d488 <iprintf>
          UNLOCK_TCPIP_CORE();
 80101ce:	4818      	ldr	r0, [pc, #96]	@ (8010230 <lwip_netconn_do_write+0x114>)
 80101d0:	f00c fbb1 	bl	801c936 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	330c      	adds	r3, #12
 80101da:	2100      	movs	r1, #0
 80101dc:	4618      	mov	r0, r3
 80101de:	f00c fb08 	bl	801c7f2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80101e2:	4813      	ldr	r0, [pc, #76]	@ (8010230 <lwip_netconn_do_write+0x114>)
 80101e4:	f00c fb98 	bl	801c918 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	785b      	ldrb	r3, [r3, #1]
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d110      	bne.n	8010214 <lwip_netconn_do_write+0xf8>
 80101f2:	4b0a      	ldr	r3, [pc, #40]	@ (801021c <lwip_netconn_do_write+0x100>)
 80101f4:	f240 722c 	movw	r2, #1836	@ 0x72c
 80101f8:	490c      	ldr	r1, [pc, #48]	@ (801022c <lwip_netconn_do_write+0x110>)
 80101fa:	480a      	ldr	r0, [pc, #40]	@ (8010224 <lwip_netconn_do_write+0x108>)
 80101fc:	f00d f944 	bl	801d488 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010200:	e008      	b.n	8010214 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010202:	23f5      	movs	r3, #245	@ 0xf5
 8010204:	73fb      	strb	r3, [r7, #15]
 8010206:	e001      	b.n	801020c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010208:	23fa      	movs	r3, #250	@ 0xfa
 801020a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	7bfa      	ldrb	r2, [r7, #15]
 8010210:	711a      	strb	r2, [r3, #4]
 8010212:	e000      	b.n	8010216 <lwip_netconn_do_write+0xfa>
        return;
 8010214:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	0801fe68 	.word	0x0801fe68
 8010220:	0802020c 	.word	0x0802020c
 8010224:	0801feac 	.word	0x0801feac
 8010228:	08020394 	.word	0x08020394
 801022c:	08020228 	.word	0x08020228
 8010230:	2000b7fc 	.word	0x2000b7fc

08010234 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	785b      	ldrb	r3, [r3, #1]
 8010246:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d069      	beq.n	8010326 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801025c:	2b10      	cmp	r3, #16
 801025e:	d162      	bne.n	8010326 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010264:	2b03      	cmp	r3, #3
 8010266:	d002      	beq.n	801026e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010268:	7afb      	ldrb	r3, [r7, #11]
 801026a:	2b02      	cmp	r3, #2
 801026c:	d05b      	beq.n	8010326 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801026e:	7afb      	ldrb	r3, [r7, #11]
 8010270:	2b03      	cmp	r3, #3
 8010272:	d103      	bne.n	801027c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	22f5      	movs	r2, #245	@ 0xf5
 8010278:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801027a:	e059      	b.n	8010330 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801027c:	7afb      	ldrb	r3, [r7, #11]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d103      	bne.n	801028a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	22fb      	movs	r2, #251	@ 0xfb
 8010286:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010288:	e052      	b.n	8010330 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	7a1b      	ldrb	r3, [r3, #8]
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	2b00      	cmp	r3, #0
 8010294:	d004      	beq.n	80102a0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4618      	mov	r0, r3
 801029c:	f7ff f952 	bl	800f544 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6a1b      	ldr	r3, [r3, #32]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d006      	beq.n	80102b8 <lwip_netconn_do_close+0x84>
 80102aa:	4b23      	ldr	r3, [pc, #140]	@ (8010338 <lwip_netconn_do_close+0x104>)
 80102ac:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80102b0:	4922      	ldr	r1, [pc, #136]	@ (801033c <lwip_netconn_do_close+0x108>)
 80102b2:	4823      	ldr	r0, [pc, #140]	@ (8010340 <lwip_netconn_do_close+0x10c>)
 80102b4:	f00d f8e8 	bl	801d488 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2204      	movs	r2, #4
 80102be:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	68fa      	ldr	r2, [r7, #12]
 80102c6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2100      	movs	r1, #0
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7ff f9b6 	bl	800f640 <lwip_netconn_do_close_internal>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d029      	beq.n	801032e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	785b      	ldrb	r3, [r3, #1]
 80102e0:	2b04      	cmp	r3, #4
 80102e2:	d006      	beq.n	80102f2 <lwip_netconn_do_close+0xbe>
 80102e4:	4b14      	ldr	r3, [pc, #80]	@ (8010338 <lwip_netconn_do_close+0x104>)
 80102e6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80102ea:	4916      	ldr	r1, [pc, #88]	@ (8010344 <lwip_netconn_do_close+0x110>)
 80102ec:	4814      	ldr	r0, [pc, #80]	@ (8010340 <lwip_netconn_do_close+0x10c>)
 80102ee:	f00d f8cb 	bl	801d488 <iprintf>
        UNLOCK_TCPIP_CORE();
 80102f2:	4815      	ldr	r0, [pc, #84]	@ (8010348 <lwip_netconn_do_close+0x114>)
 80102f4:	f00c fb1f 	bl	801c936 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	330c      	adds	r3, #12
 80102fe:	2100      	movs	r1, #0
 8010300:	4618      	mov	r0, r3
 8010302:	f00c fa76 	bl	801c7f2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010306:	4810      	ldr	r0, [pc, #64]	@ (8010348 <lwip_netconn_do_close+0x114>)
 8010308:	f00c fb06 	bl	801c918 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	785b      	ldrb	r3, [r3, #1]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00b      	beq.n	801032e <lwip_netconn_do_close+0xfa>
 8010316:	4b08      	ldr	r3, [pc, #32]	@ (8010338 <lwip_netconn_do_close+0x104>)
 8010318:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 801031c:	4909      	ldr	r1, [pc, #36]	@ (8010344 <lwip_netconn_do_close+0x110>)
 801031e:	4808      	ldr	r0, [pc, #32]	@ (8010340 <lwip_netconn_do_close+0x10c>)
 8010320:	f00d f8b2 	bl	801d488 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010324:	e003      	b.n	801032e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	22f5      	movs	r2, #245	@ 0xf5
 801032a:	711a      	strb	r2, [r3, #4]
 801032c:	e000      	b.n	8010330 <lwip_netconn_do_close+0xfc>
      return;
 801032e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010330:	3710      	adds	r7, #16
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	0801fe68 	.word	0x0801fe68
 801033c:	0802020c 	.word	0x0802020c
 8010340:	0801feac 	.word	0x0801feac
 8010344:	08020228 	.word	0x08020228
 8010348:	2000b7fc 	.word	0x2000b7fc

0801034c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d013      	beq.n	8010382 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00b      	beq.n	801037a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4618      	mov	r0, r3
 8010368:	f002 fcce 	bl	8012d08 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2200      	movs	r2, #0
 8010370:	605a      	str	r2, [r3, #4]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801037a:	6879      	ldr	r1, [r7, #4]
 801037c:	2006      	movs	r0, #6
 801037e:	f001 fe1f 	bl	8011fc0 <memp_free>
  }
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	60f8      	str	r0, [r7, #12]
 8010394:	60b9      	str	r1, [r7, #8]
 8010396:	4613      	mov	r3, r2
 8010398:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d108      	bne.n	80103b2 <netbuf_ref+0x26>
 80103a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010414 <netbuf_ref+0x88>)
 80103a2:	2299      	movs	r2, #153	@ 0x99
 80103a4:	491c      	ldr	r1, [pc, #112]	@ (8010418 <netbuf_ref+0x8c>)
 80103a6:	481d      	ldr	r0, [pc, #116]	@ (801041c <netbuf_ref+0x90>)
 80103a8:	f00d f86e 	bl	801d488 <iprintf>
 80103ac:	f06f 030f 	mvn.w	r3, #15
 80103b0:	e02b      	b.n	801040a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d004      	beq.n	80103c4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4618      	mov	r0, r3
 80103c0:	f002 fca2 	bl	8012d08 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80103c4:	2241      	movs	r2, #65	@ 0x41
 80103c6:	2100      	movs	r1, #0
 80103c8:	2036      	movs	r0, #54	@ 0x36
 80103ca:	f002 f9b9 	bl	8012740 <pbuf_alloc>
 80103ce:	4602      	mov	r2, r0
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d105      	bne.n	80103e8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2200      	movs	r2, #0
 80103e0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80103e2:	f04f 33ff 	mov.w	r3, #4294967295
 80103e6:	e010      	b.n	801040a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	88fa      	ldrh	r2, [r7, #6]
 80103f6:	811a      	strh	r2, [r3, #8]
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	6812      	ldr	r2, [r2, #0]
 80103fc:	891b      	ldrh	r3, [r3, #8]
 80103fe:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	080203c0 	.word	0x080203c0
 8010418:	08020478 	.word	0x08020478
 801041c:	08020410 	.word	0x08020410

08010420 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d108      	bne.n	8010444 <netbuf_data+0x24>
 8010432:	4b1b      	ldr	r3, [pc, #108]	@ (80104a0 <netbuf_data+0x80>)
 8010434:	22c6      	movs	r2, #198	@ 0xc6
 8010436:	491b      	ldr	r1, [pc, #108]	@ (80104a4 <netbuf_data+0x84>)
 8010438:	481b      	ldr	r0, [pc, #108]	@ (80104a8 <netbuf_data+0x88>)
 801043a:	f00d f825 	bl	801d488 <iprintf>
 801043e:	f06f 030f 	mvn.w	r3, #15
 8010442:	e029      	b.n	8010498 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d108      	bne.n	801045c <netbuf_data+0x3c>
 801044a:	4b15      	ldr	r3, [pc, #84]	@ (80104a0 <netbuf_data+0x80>)
 801044c:	22c7      	movs	r2, #199	@ 0xc7
 801044e:	4917      	ldr	r1, [pc, #92]	@ (80104ac <netbuf_data+0x8c>)
 8010450:	4815      	ldr	r0, [pc, #84]	@ (80104a8 <netbuf_data+0x88>)
 8010452:	f00d f819 	bl	801d488 <iprintf>
 8010456:	f06f 030f 	mvn.w	r3, #15
 801045a:	e01d      	b.n	8010498 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d108      	bne.n	8010474 <netbuf_data+0x54>
 8010462:	4b0f      	ldr	r3, [pc, #60]	@ (80104a0 <netbuf_data+0x80>)
 8010464:	22c8      	movs	r2, #200	@ 0xc8
 8010466:	4912      	ldr	r1, [pc, #72]	@ (80104b0 <netbuf_data+0x90>)
 8010468:	480f      	ldr	r0, [pc, #60]	@ (80104a8 <netbuf_data+0x88>)
 801046a:	f00d f80d 	bl	801d488 <iprintf>
 801046e:	f06f 030f 	mvn.w	r3, #15
 8010472:	e011      	b.n	8010498 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d102      	bne.n	8010482 <netbuf_data+0x62>
    return ERR_BUF;
 801047c:	f06f 0301 	mvn.w	r3, #1
 8010480:	e00a      	b.n	8010498 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	895a      	ldrh	r2, [r3, #10]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8010496:	2300      	movs	r3, #0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3710      	adds	r7, #16
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	080203c0 	.word	0x080203c0
 80104a4:	080204c8 	.word	0x080204c8
 80104a8:	08020410 	.word	0x08020410
 80104ac:	080204e4 	.word	0x080204e4
 80104b0:	08020504 	.word	0x08020504

080104b4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d108      	bne.n	80104d4 <netbuf_next+0x20>
 80104c2:	4b11      	ldr	r3, [pc, #68]	@ (8010508 <netbuf_next+0x54>)
 80104c4:	22e0      	movs	r2, #224	@ 0xe0
 80104c6:	4911      	ldr	r1, [pc, #68]	@ (801050c <netbuf_next+0x58>)
 80104c8:	4811      	ldr	r0, [pc, #68]	@ (8010510 <netbuf_next+0x5c>)
 80104ca:	f00c ffdd 	bl	801d488 <iprintf>
 80104ce:	f04f 33ff 	mov.w	r3, #4294967295
 80104d2:	e014      	b.n	80104fe <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d102      	bne.n	80104e4 <netbuf_next+0x30>
    return -1;
 80104de:	f04f 33ff 	mov.w	r3, #4294967295
 80104e2:	e00c      	b.n	80104fe <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	685b      	ldr	r3, [r3, #4]
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <netbuf_next+0x48>
    return 1;
 80104f8:	2301      	movs	r3, #1
 80104fa:	e000      	b.n	80104fe <netbuf_next+0x4a>
  }
  return 0;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	080203c0 	.word	0x080203c0
 801050c:	08020520 	.word	0x08020520
 8010510:	08020410 	.word	0x08020410

08010514 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801051e:	f009 f891 	bl	8019644 <sys_timeouts_sleeptime>
 8010522:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801052a:	d10b      	bne.n	8010544 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801052c:	4813      	ldr	r0, [pc, #76]	@ (801057c <tcpip_timeouts_mbox_fetch+0x68>)
 801052e:	f00c fa02 	bl	801c936 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010532:	2200      	movs	r2, #0
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f00c f8ba 	bl	801c6b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801053c:	480f      	ldr	r0, [pc, #60]	@ (801057c <tcpip_timeouts_mbox_fetch+0x68>)
 801053e:	f00c f9eb 	bl	801c918 <sys_mutex_lock>
    return;
 8010542:	e018      	b.n	8010576 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d102      	bne.n	8010550 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801054a:	f009 f841 	bl	80195d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801054e:	e7e6      	b.n	801051e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010550:	480a      	ldr	r0, [pc, #40]	@ (801057c <tcpip_timeouts_mbox_fetch+0x68>)
 8010552:	f00c f9f0 	bl	801c936 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	6839      	ldr	r1, [r7, #0]
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f00c f8a8 	bl	801c6b0 <sys_arch_mbox_fetch>
 8010560:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010562:	4806      	ldr	r0, [pc, #24]	@ (801057c <tcpip_timeouts_mbox_fetch+0x68>)
 8010564:	f00c f9d8 	bl	801c918 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056e:	d102      	bne.n	8010576 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010570:	f009 f82e 	bl	80195d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010574:	e7d3      	b.n	801051e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010576:	3710      	adds	r7, #16
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	2000b7fc 	.word	0x2000b7fc

08010580 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010588:	4810      	ldr	r0, [pc, #64]	@ (80105cc <tcpip_thread+0x4c>)
 801058a:	f00c f9c5 	bl	801c918 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801058e:	4b10      	ldr	r3, [pc, #64]	@ (80105d0 <tcpip_thread+0x50>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d005      	beq.n	80105a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010596:	4b0e      	ldr	r3, [pc, #56]	@ (80105d0 <tcpip_thread+0x50>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4a0e      	ldr	r2, [pc, #56]	@ (80105d4 <tcpip_thread+0x54>)
 801059c:	6812      	ldr	r2, [r2, #0]
 801059e:	4610      	mov	r0, r2
 80105a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	4619      	mov	r1, r3
 80105a8:	480b      	ldr	r0, [pc, #44]	@ (80105d8 <tcpip_thread+0x58>)
 80105aa:	f7ff ffb3 	bl	8010514 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d106      	bne.n	80105c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80105b4:	4b09      	ldr	r3, [pc, #36]	@ (80105dc <tcpip_thread+0x5c>)
 80105b6:	2291      	movs	r2, #145	@ 0x91
 80105b8:	4909      	ldr	r1, [pc, #36]	@ (80105e0 <tcpip_thread+0x60>)
 80105ba:	480a      	ldr	r0, [pc, #40]	@ (80105e4 <tcpip_thread+0x64>)
 80105bc:	f00c ff64 	bl	801d488 <iprintf>
      continue;
 80105c0:	e003      	b.n	80105ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 f80f 	bl	80105e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80105ca:	e7ea      	b.n	80105a2 <tcpip_thread+0x22>
 80105cc:	2000b7fc 	.word	0x2000b7fc
 80105d0:	2000b7f0 	.word	0x2000b7f0
 80105d4:	2000b7f4 	.word	0x2000b7f4
 80105d8:	2000b7f8 	.word	0x2000b7f8
 80105dc:	08020558 	.word	0x08020558
 80105e0:	08020588 	.word	0x08020588
 80105e4:	080205a8 	.word	0x080205a8

080105e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	d026      	beq.n	8010646 <tcpip_thread_handle_msg+0x5e>
 80105f8:	2b02      	cmp	r3, #2
 80105fa:	dc2b      	bgt.n	8010654 <tcpip_thread_handle_msg+0x6c>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <tcpip_thread_handle_msg+0x1e>
 8010600:	2b01      	cmp	r3, #1
 8010602:	d015      	beq.n	8010630 <tcpip_thread_handle_msg+0x48>
 8010604:	e026      	b.n	8010654 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	68db      	ldr	r3, [r3, #12]
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	6850      	ldr	r0, [r2, #4]
 801060e:	687a      	ldr	r2, [r7, #4]
 8010610:	6892      	ldr	r2, [r2, #8]
 8010612:	4611      	mov	r1, r2
 8010614:	4798      	blx	r3
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d004      	beq.n	8010626 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	4618      	mov	r0, r3
 8010622:	f002 fb71 	bl	8012d08 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010626:	6879      	ldr	r1, [r7, #4]
 8010628:	2009      	movs	r0, #9
 801062a:	f001 fcc9 	bl	8011fc0 <memp_free>
      break;
 801062e:	e018      	b.n	8010662 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	6892      	ldr	r2, [r2, #8]
 8010638:	4610      	mov	r0, r2
 801063a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801063c:	6879      	ldr	r1, [r7, #4]
 801063e:	2008      	movs	r0, #8
 8010640:	f001 fcbe 	bl	8011fc0 <memp_free>
      break;
 8010644:	e00d      	b.n	8010662 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	687a      	ldr	r2, [r7, #4]
 801064c:	6892      	ldr	r2, [r2, #8]
 801064e:	4610      	mov	r0, r2
 8010650:	4798      	blx	r3
      break;
 8010652:	e006      	b.n	8010662 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010654:	4b05      	ldr	r3, [pc, #20]	@ (801066c <tcpip_thread_handle_msg+0x84>)
 8010656:	22cf      	movs	r2, #207	@ 0xcf
 8010658:	4905      	ldr	r1, [pc, #20]	@ (8010670 <tcpip_thread_handle_msg+0x88>)
 801065a:	4806      	ldr	r0, [pc, #24]	@ (8010674 <tcpip_thread_handle_msg+0x8c>)
 801065c:	f00c ff14 	bl	801d488 <iprintf>
      break;
 8010660:	bf00      	nop
  }
}
 8010662:	bf00      	nop
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	08020558 	.word	0x08020558
 8010670:	08020588 	.word	0x08020588
 8010674:	080205a8 	.word	0x080205a8

08010678 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b086      	sub	sp, #24
 801067c:	af00      	add	r7, sp, #0
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010684:	481a      	ldr	r0, [pc, #104]	@ (80106f0 <tcpip_inpkt+0x78>)
 8010686:	f00c f86e 	bl	801c766 <sys_mbox_valid>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d105      	bne.n	801069c <tcpip_inpkt+0x24>
 8010690:	4b18      	ldr	r3, [pc, #96]	@ (80106f4 <tcpip_inpkt+0x7c>)
 8010692:	22fc      	movs	r2, #252	@ 0xfc
 8010694:	4918      	ldr	r1, [pc, #96]	@ (80106f8 <tcpip_inpkt+0x80>)
 8010696:	4819      	ldr	r0, [pc, #100]	@ (80106fc <tcpip_inpkt+0x84>)
 8010698:	f00c fef6 	bl	801d488 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801069c:	2009      	movs	r0, #9
 801069e:	f001 fc19 	bl	8011ed4 <memp_malloc>
 80106a2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d102      	bne.n	80106b0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80106aa:	f04f 33ff 	mov.w	r3, #4294967295
 80106ae:	e01a      	b.n	80106e6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2200      	movs	r2, #0
 80106b4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80106c8:	6979      	ldr	r1, [r7, #20]
 80106ca:	4809      	ldr	r0, [pc, #36]	@ (80106f0 <tcpip_inpkt+0x78>)
 80106cc:	f00b ffd6 	bl	801c67c <sys_mbox_trypost>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d006      	beq.n	80106e4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80106d6:	6979      	ldr	r1, [r7, #20]
 80106d8:	2009      	movs	r0, #9
 80106da:	f001 fc71 	bl	8011fc0 <memp_free>
    return ERR_MEM;
 80106de:	f04f 33ff 	mov.w	r3, #4294967295
 80106e2:	e000      	b.n	80106e6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80106e4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3718      	adds	r7, #24
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	2000b7f8 	.word	0x2000b7f8
 80106f4:	08020558 	.word	0x08020558
 80106f8:	080205d0 	.word	0x080205d0
 80106fc:	080205a8 	.word	0x080205a8

08010700 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010710:	f003 0318 	and.w	r3, r3, #24
 8010714:	2b00      	cmp	r3, #0
 8010716:	d006      	beq.n	8010726 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010718:	4a08      	ldr	r2, [pc, #32]	@ (801073c <tcpip_input+0x3c>)
 801071a:	6839      	ldr	r1, [r7, #0]
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff ffab 	bl	8010678 <tcpip_inpkt>
 8010722:	4603      	mov	r3, r0
 8010724:	e005      	b.n	8010732 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010726:	4a06      	ldr	r2, [pc, #24]	@ (8010740 <tcpip_input+0x40>)
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f7ff ffa4 	bl	8010678 <tcpip_inpkt>
 8010730:	4603      	mov	r3, r0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3708      	adds	r7, #8
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	0801c469 	.word	0x0801c469
 8010740:	0801b371 	.word	0x0801b371

08010744 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b084      	sub	sp, #16
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801074e:	4819      	ldr	r0, [pc, #100]	@ (80107b4 <tcpip_try_callback+0x70>)
 8010750:	f00c f809 	bl	801c766 <sys_mbox_valid>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <tcpip_try_callback+0x24>
 801075a:	4b17      	ldr	r3, [pc, #92]	@ (80107b8 <tcpip_try_callback+0x74>)
 801075c:	f240 125d 	movw	r2, #349	@ 0x15d
 8010760:	4916      	ldr	r1, [pc, #88]	@ (80107bc <tcpip_try_callback+0x78>)
 8010762:	4817      	ldr	r0, [pc, #92]	@ (80107c0 <tcpip_try_callback+0x7c>)
 8010764:	f00c fe90 	bl	801d488 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010768:	2008      	movs	r0, #8
 801076a:	f001 fbb3 	bl	8011ed4 <memp_malloc>
 801076e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d102      	bne.n	801077c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010776:	f04f 33ff 	mov.w	r3, #4294967295
 801077a:	e017      	b.n	80107ac <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	2201      	movs	r2, #1
 8010780:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	687a      	ldr	r2, [r7, #4]
 8010786:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	683a      	ldr	r2, [r7, #0]
 801078c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	4808      	ldr	r0, [pc, #32]	@ (80107b4 <tcpip_try_callback+0x70>)
 8010792:	f00b ff73 	bl	801c67c <sys_mbox_trypost>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d006      	beq.n	80107aa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801079c:	68f9      	ldr	r1, [r7, #12]
 801079e:	2008      	movs	r0, #8
 80107a0:	f001 fc0e 	bl	8011fc0 <memp_free>
    return ERR_MEM;
 80107a4:	f04f 33ff 	mov.w	r3, #4294967295
 80107a8:	e000      	b.n	80107ac <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	2000b7f8 	.word	0x2000b7f8
 80107b8:	08020558 	.word	0x08020558
 80107bc:	080205d0 	.word	0x080205d0
 80107c0:	080205a8 	.word	0x080205a8

080107c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b084      	sub	sp, #16
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80107d0:	4806      	ldr	r0, [pc, #24]	@ (80107ec <tcpip_send_msg_wait_sem+0x28>)
 80107d2:	f00c f8a1 	bl	801c918 <sys_mutex_lock>
  fn(apimsg);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	68b8      	ldr	r0, [r7, #8]
 80107da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80107dc:	4803      	ldr	r0, [pc, #12]	@ (80107ec <tcpip_send_msg_wait_sem+0x28>)
 80107de:	f00c f8aa 	bl	801c936 <sys_mutex_unlock>
  return ERR_OK;
 80107e2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3710      	adds	r7, #16
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	2000b7fc 	.word	0x2000b7fc

080107f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af02      	add	r7, sp, #8
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80107fa:	f000 fec1 	bl	8011580 <lwip_init>

  tcpip_init_done = initfunc;
 80107fe:	4a17      	ldr	r2, [pc, #92]	@ (801085c <tcpip_init+0x6c>)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010804:	4a16      	ldr	r2, [pc, #88]	@ (8010860 <tcpip_init+0x70>)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801080a:	2106      	movs	r1, #6
 801080c:	4815      	ldr	r0, [pc, #84]	@ (8010864 <tcpip_init+0x74>)
 801080e:	f00b ff01 	bl	801c614 <sys_mbox_new>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d006      	beq.n	8010826 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010818:	4b13      	ldr	r3, [pc, #76]	@ (8010868 <tcpip_init+0x78>)
 801081a:	f240 2261 	movw	r2, #609	@ 0x261
 801081e:	4913      	ldr	r1, [pc, #76]	@ (801086c <tcpip_init+0x7c>)
 8010820:	4813      	ldr	r0, [pc, #76]	@ (8010870 <tcpip_init+0x80>)
 8010822:	f00c fe31 	bl	801d488 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010826:	4813      	ldr	r0, [pc, #76]	@ (8010874 <tcpip_init+0x84>)
 8010828:	f00c f85a 	bl	801c8e0 <sys_mutex_new>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d006      	beq.n	8010840 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010832:	4b0d      	ldr	r3, [pc, #52]	@ (8010868 <tcpip_init+0x78>)
 8010834:	f240 2265 	movw	r2, #613	@ 0x265
 8010838:	490f      	ldr	r1, [pc, #60]	@ (8010878 <tcpip_init+0x88>)
 801083a:	480d      	ldr	r0, [pc, #52]	@ (8010870 <tcpip_init+0x80>)
 801083c:	f00c fe24 	bl	801d488 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010840:	2300      	movs	r3, #0
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010848:	2200      	movs	r2, #0
 801084a:	490c      	ldr	r1, [pc, #48]	@ (801087c <tcpip_init+0x8c>)
 801084c:	480c      	ldr	r0, [pc, #48]	@ (8010880 <tcpip_init+0x90>)
 801084e:	f00c f87f 	bl	801c950 <sys_thread_new>
}
 8010852:	bf00      	nop
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	2000b7f0 	.word	0x2000b7f0
 8010860:	2000b7f4 	.word	0x2000b7f4
 8010864:	2000b7f8 	.word	0x2000b7f8
 8010868:	08020558 	.word	0x08020558
 801086c:	080205e0 	.word	0x080205e0
 8010870:	080205a8 	.word	0x080205a8
 8010874:	2000b7fc 	.word	0x2000b7fc
 8010878:	08020604 	.word	0x08020604
 801087c:	08010581 	.word	0x08010581
 8010880:	08020628 	.word	0x08020628

08010884 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <fs_open+0x16>
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d102      	bne.n	80108a0 <fs_open+0x1c>
    return ERR_ARG;
 801089a:	f06f 030f 	mvn.w	r3, #15
 801089e:	e028      	b.n	80108f2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80108a0:	4b16      	ldr	r3, [pc, #88]	@ (80108fc <fs_open+0x78>)
 80108a2:	60fb      	str	r3, [r7, #12]
 80108a4:	e020      	b.n	80108e8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	4619      	mov	r1, r3
 80108ac:	6838      	ldr	r0, [r7, #0]
 80108ae:	f7ef fcaf 	bl	8000210 <strcmp>
 80108b2:	4603      	mov	r3, r0
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d114      	bne.n	80108e2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	689a      	ldr	r2, [r3, #8]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	68da      	ldr	r2, [r3, #12]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	68da      	ldr	r2, [r3, #12]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	7c1a      	ldrb	r2, [r3, #16]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80108de:	2300      	movs	r3, #0
 80108e0:	e007      	b.n	80108f2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	60fb      	str	r3, [r7, #12]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d1db      	bne.n	80108a6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80108ee:	f06f 0305 	mvn.w	r3, #5
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	080248d0 	.word	0x080248d0

08010900 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	1ad3      	subs	r3, r2, r3
}
 8010926:	4618      	mov	r0, r3
 8010928:	370c      	adds	r7, #12
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 801093a:	222c      	movs	r2, #44	@ 0x2c
 801093c:	2100      	movs	r1, #0
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f00c fe41 	bl	801d5c6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8010952:	202c      	movs	r0, #44	@ 0x2c
 8010954:	f001 f91a 	bl	8011b8c <mem_malloc>
 8010958:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <http_state_alloc+0x1a>
    http_state_init(ret);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff ffe6 	bl	8010932 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8010966:	687b      	ldr	r3, [r7, #4]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	695b      	ldr	r3, [r3, #20]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d007      	beq.n	8010990 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	695b      	ldr	r3, [r3, #20]
 8010984:	4618      	mov	r0, r3
 8010986:	f7ff ffbb 	bl	8010900 <fs_close>
    hs->handle = NULL;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6a1b      	ldr	r3, [r3, #32]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d007      	beq.n	80109a8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6a1b      	ldr	r3, [r3, #32]
 801099c:	4618      	mov	r0, r3
 801099e:	f002 f9b3 	bl	8012d08 <pbuf_free>
    hs->req = NULL;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2200      	movs	r2, #0
 80109a6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80109a8:	bf00      	nop
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b082      	sub	sp, #8
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d005      	beq.n	80109ca <http_state_free+0x1a>
    http_state_eof(hs);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff ffd6 	bl	8010970 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 ff47 	bl	8011858 <mem_free>
  }
}
 80109ca:	bf00      	nop
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
	...

080109d4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
 80109e0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d106      	bne.n	80109f6 <http_write+0x22>
 80109e8:	4b2c      	ldr	r3, [pc, #176]	@ (8010a9c <http_write+0xc8>)
 80109ea:	f240 2219 	movw	r2, #537	@ 0x219
 80109ee:	492c      	ldr	r1, [pc, #176]	@ (8010aa0 <http_write+0xcc>)
 80109f0:	482c      	ldr	r0, [pc, #176]	@ (8010aa4 <http_write+0xd0>)
 80109f2:	f00c fd49 	bl	801d488 <iprintf>
  len = *length;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	881b      	ldrh	r3, [r3, #0]
 80109fa:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80109fc:	8afb      	ldrh	r3, [r7, #22]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d101      	bne.n	8010a06 <http_write+0x32>
    return ERR_OK;
 8010a02:	2300      	movs	r3, #0
 8010a04:	e045      	b.n	8010a92 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a0c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8010a0e:	8aba      	ldrh	r2, [r7, #20]
 8010a10:	8afb      	ldrh	r3, [r7, #22]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d201      	bcs.n	8010a1a <http_write+0x46>
    len = max_len;
 8010a16:	8abb      	ldrh	r3, [r7, #20]
 8010a18:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a1e:	005b      	lsls	r3, r3, #1
 8010a20:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8010a22:	8afa      	ldrh	r2, [r7, #22]
 8010a24:	8abb      	ldrh	r3, [r7, #20]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d901      	bls.n	8010a2e <http_write+0x5a>
    len = max_len;
 8010a2a:	8abb      	ldrh	r3, [r7, #20]
 8010a2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8010a2e:	78fb      	ldrb	r3, [r7, #3]
 8010a30:	8afa      	ldrh	r2, [r7, #22]
 8010a32:	68b9      	ldr	r1, [r7, #8]
 8010a34:	68f8      	ldr	r0, [r7, #12]
 8010a36:	f006 ff63 	bl	8017900 <tcp_write>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8010a3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a46:	d10f      	bne.n	8010a68 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d004      	beq.n	8010a5c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8010a58:	2b08      	cmp	r3, #8
 8010a5a:	d902      	bls.n	8010a62 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	82fb      	strh	r3, [r7, #22]
 8010a60:	e002      	b.n	8010a68 <http_write+0x94>
      } else {
        len /= 2;
 8010a62:	8afb      	ldrh	r3, [r7, #22]
 8010a64:	085b      	lsrs	r3, r3, #1
 8010a66:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8010a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a70:	d102      	bne.n	8010a78 <http_write+0xa4>
 8010a72:	8afb      	ldrh	r3, [r7, #22]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d8da      	bhi.n	8010a2e <http_write+0x5a>

  if (err == ERR_OK) {
 8010a78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d103      	bne.n	8010a88 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	8afa      	ldrh	r2, [r7, #22]
 8010a84:	801a      	strh	r2, [r3, #0]
 8010a86:	e002      	b.n	8010a8e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8010a8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3718      	adds	r7, #24
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	08020678 	.word	0x08020678
 8010aa0:	080206b0 	.word	0x080206b0
 8010aa4:	080206c0 	.word	0x080206c0

08010aa8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	f003 ffe5 	bl	8014a88 <tcp_arg>
  altcp_recv(pcb, NULL);
 8010abe:	2100      	movs	r1, #0
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f003 fff3 	bl	8014aac <tcp_recv>
  altcp_err(pcb, NULL);
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f004 f833 	bl	8014b34 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8010ace:	2200      	movs	r2, #0
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f004 f868 	bl	8014ba8 <tcp_poll>
  altcp_sent(pcb, NULL);
 8010ad8:	2100      	movs	r1, #0
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f004 f808 	bl	8014af0 <tcp_sent>
  if (hs != NULL) {
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d002      	beq.n	8010aec <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8010ae6:	68b8      	ldr	r0, [r7, #8]
 8010ae8:	f7ff ff62 	bl	80109b0 <http_state_free>
  }

  if (abort_conn) {
 8010aec:	79fb      	ldrb	r3, [r7, #7]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d004      	beq.n	8010afc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f002 ff08 	bl	8013908 <tcp_abort>
    return ERR_OK;
 8010af8:	2300      	movs	r3, #0
 8010afa:	e00f      	b.n	8010b1c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8010afc:	68f8      	ldr	r0, [r7, #12]
 8010afe:	f002 fdbd 	bl	801367c <tcp_close>
 8010b02:	4603      	mov	r3, r0
 8010b04:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8010b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d004      	beq.n	8010b18 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8010b0e:	2204      	movs	r2, #4
 8010b10:	4904      	ldr	r1, [pc, #16]	@ (8010b24 <http_close_or_abort_conn+0x7c>)
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f004 f848 	bl	8014ba8 <tcp_poll>
  }
  return err;
 8010b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3718      	adds	r7, #24
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	080111eb 	.word	0x080111eb

08010b28 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8010b32:	2200      	movs	r2, #0
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7ff ffb6 	bl	8010aa8 <http_close_or_abort_conn>
 8010b3c:	4603      	mov	r3, r0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}

08010b46 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010b46:	b580      	push	{r7, lr}
 8010b48:	b082      	sub	sp, #8
 8010b4a:	af00      	add	r7, sp, #0
 8010b4c:	6078      	str	r0, [r7, #4]
 8010b4e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8010b50:	6839      	ldr	r1, [r7, #0]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff ffe8 	bl	8010b28 <http_close_conn>
  }
}
 8010b58:	bf00      	nop
 8010b5a:	3708      	adds	r7, #8
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}

08010b60 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	695b      	ldr	r3, [r3, #20]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d105      	bne.n	8010b7e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8010b72:	6839      	ldr	r1, [r7, #0]
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ffe6 	bl	8010b46 <http_eof>
    return 0;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e016      	b.n	8010bac <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7ff fec6 	bl	8010914 <fs_bytes_left>
 8010b88:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	dc05      	bgt.n	8010b9c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010b90:	6839      	ldr	r1, [r7, #0]
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff ffd7 	bl	8010b46 <http_eof>
    return 0;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	e007      	b.n	8010bac <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8010b9c:	4b05      	ldr	r3, [pc, #20]	@ (8010bb4 <http_check_eof+0x54>)
 8010b9e:	f240 429d 	movw	r2, #1181	@ 0x49d
 8010ba2:	4905      	ldr	r1, [pc, #20]	@ (8010bb8 <http_check_eof+0x58>)
 8010ba4:	4805      	ldr	r0, [pc, #20]	@ (8010bbc <http_check_eof+0x5c>)
 8010ba6:	f00c fc6f 	bl	801d488 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8010baa:	2301      	movs	r3, #1
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	08020678 	.word	0x08020678
 8010bb8:	080206e8 	.word	0x080206e8
 8010bbc:	080206c0 	.word	0x080206c0

08010bc0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d803      	bhi.n	8010be2 <http_send_data_nonssi+0x22>
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	e001      	b.n	8010be6 <http_send_data_nonssi+0x26>
 8010be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010be6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	6999      	ldr	r1, [r3, #24]
 8010bec:	f107 020c 	add.w	r2, r7, #12
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f7ff feee 	bl	80109d4 <http_write>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8010bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d10d      	bne.n	8010c20 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8010c04:	2301      	movs	r3, #1
 8010c06:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	699b      	ldr	r3, [r3, #24]
 8010c0c:	89ba      	ldrh	r2, [r7, #12]
 8010c0e:	441a      	add	r2, r3
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c18:	89ba      	ldrh	r2, [r7, #12]
 8010c1a:	1a9a      	subs	r2, r3, r2
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3710      	adds	r7, #16
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b084      	sub	sp, #16
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8010c34:	2300      	movs	r3, #0
 8010c36:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d101      	bne.n	8010c42 <http_send+0x18>
    return 0;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e025      	b.n	8010c8e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d108      	bne.n	8010c5c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8010c4a:	6839      	ldr	r1, [r7, #0]
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f7ff ff87 	bl	8010b60 <http_check_eof>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d101      	bne.n	8010c5c <http_send+0x32>
      return 0;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e018      	b.n	8010c8e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8010c5c:	6839      	ldr	r1, [r7, #0]
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff ffae 	bl	8010bc0 <http_send_data_nonssi>
 8010c64:	4603      	mov	r3, r0
 8010c66:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10d      	bne.n	8010c8c <http_send+0x62>
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	695b      	ldr	r3, [r3, #20]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fe4d 	bl	8010914 <fs_bytes_left>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	dc05      	bgt.n	8010c8c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010c80:	6839      	ldr	r1, [r7, #0]
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff ff5f 	bl	8010b46 <http_eof>
    return 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e000      	b.n	8010c8e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8010c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
	...

08010c98 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8010d18 <http_get_404_file+0x80>)
 8010ca6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8010ca8:	687a      	ldr	r2, [r7, #4]
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	4610      	mov	r0, r2
 8010cb2:	f7ff fde7 	bl	8010884 <fs_open>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d024      	beq.n	8010d0c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	4a15      	ldr	r2, [pc, #84]	@ (8010d1c <http_get_404_file+0x84>)
 8010cc6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8010cc8:	687a      	ldr	r2, [r7, #4]
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4619      	mov	r1, r3
 8010cd0:	4610      	mov	r0, r2
 8010cd2:	f7ff fdd7 	bl	8010884 <fs_open>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d014      	beq.n	8010d0c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8010d20 <http_get_404_file+0x88>)
 8010ce6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	4619      	mov	r1, r3
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	f7ff fdc7 	bl	8010884 <fs_open>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8010cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d004      	beq.n	8010d0c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	2200      	movs	r2, #0
 8010d06:	601a      	str	r2, [r3, #0]
        return NULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e000      	b.n	8010d0e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8010d0c:	687b      	ldr	r3, [r7, #4]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	08020720 	.word	0x08020720
 8010d1c:	0802072c 	.word	0x0802072c
 8010d20:	08020738 	.word	0x08020738

08010d24 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b08e      	sub	sp, #56	@ 0x38
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8010d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d106      	bne.n	8010d48 <http_parse_request+0x24>
 8010d3a:	4b65      	ldr	r3, [pc, #404]	@ (8010ed0 <http_parse_request+0x1ac>)
 8010d3c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8010d40:	4964      	ldr	r1, [pc, #400]	@ (8010ed4 <http_parse_request+0x1b0>)
 8010d42:	4865      	ldr	r0, [pc, #404]	@ (8010ed8 <http_parse_request+0x1b4>)
 8010d44:	f00c fba0 	bl	801d488 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d106      	bne.n	8010d5c <http_parse_request+0x38>
 8010d4e:	4b60      	ldr	r3, [pc, #384]	@ (8010ed0 <http_parse_request+0x1ac>)
 8010d50:	f240 72af 	movw	r2, #1967	@ 0x7af
 8010d54:	4961      	ldr	r1, [pc, #388]	@ (8010edc <http_parse_request+0x1b8>)
 8010d56:	4860      	ldr	r0, [pc, #384]	@ (8010ed8 <http_parse_request+0x1b4>)
 8010d58:	f00c fb96 	bl	801d488 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	695b      	ldr	r3, [r3, #20]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d103      	bne.n	8010d6c <http_parse_request+0x48>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d002      	beq.n	8010d72 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8010d6c:	f06f 0307 	mvn.w	r3, #7
 8010d70:	e0a9      	b.n	8010ec6 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	6a1b      	ldr	r3, [r3, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d103      	bne.n	8010d82 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d7e:	621a      	str	r2, [r3, #32]
 8010d80:	e005      	b.n	8010d8e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f002 f88b 	bl	8012ea4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8010d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d90:	f002 f860 	bl	8012e54 <pbuf_ref>

  if (hs->req->next != NULL) {
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	6a1b      	ldr	r3, [r3, #32]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d012      	beq.n	8010dc4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	6a1b      	ldr	r3, [r3, #32]
 8010da2:	891b      	ldrh	r3, [r3, #8]
 8010da4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010da8:	4293      	cmp	r3, r2
 8010daa:	bf28      	it	cs
 8010dac:	4613      	movcs	r3, r2
 8010dae:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	6a18      	ldr	r0, [r3, #32]
 8010db4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010db6:	2300      	movs	r3, #0
 8010db8:	4949      	ldr	r1, [pc, #292]	@ (8010ee0 <http_parse_request+0x1bc>)
 8010dba:	f002 f9ab 	bl	8013114 <pbuf_copy_partial>
    data = httpd_req_buf;
 8010dbe:	4b48      	ldr	r3, [pc, #288]	@ (8010ee0 <http_parse_request+0x1bc>)
 8010dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010dc2:	e005      	b.n	8010dd0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc6:	685b      	ldr	r3, [r3, #4]
 8010dc8:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8010dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dcc:	895b      	ldrh	r3, [r3, #10]
 8010dce:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8010dd0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010dd2:	2b06      	cmp	r3, #6
 8010dd4:	d962      	bls.n	8010e9c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8010dd6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4942      	ldr	r1, [pc, #264]	@ (8010ee4 <http_parse_request+0x1c0>)
 8010ddc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010dde:	f000 fb99 	bl	8011514 <lwip_strnstr>
 8010de2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d058      	beq.n	8010e9c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8010dee:	2204      	movs	r2, #4
 8010df0:	493d      	ldr	r1, [pc, #244]	@ (8010ee8 <http_parse_request+0x1c4>)
 8010df2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010df4:	f00c fbfc 	bl	801d5f0 <strncmp>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d116      	bne.n	8010e2c <http_parse_request+0x108>
        sp1 = data + 3;
 8010dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e00:	3303      	adds	r3, #3
 8010e02:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	1c5a      	adds	r2, r3, #1
 8010e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	3301      	adds	r3, #1
 8010e18:	8b7a      	ldrh	r2, [r7, #26]
 8010e1a:	4934      	ldr	r1, [pc, #208]	@ (8010eec <http_parse_request+0x1c8>)
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 fb79 	bl	8011514 <lwip_strnstr>
 8010e22:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8010e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d111      	bne.n	8010e4e <http_parse_request+0x12a>
 8010e2a:	e006      	b.n	8010e3a <http_parse_request+0x116>
        data[4] = 0;
 8010e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e2e:	3304      	adds	r3, #4
 8010e30:	2200      	movs	r2, #0
 8010e32:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8010e34:	f06f 030f 	mvn.w	r3, #15
 8010e38:	e045      	b.n	8010ec6 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8010e3a:	69fb      	ldr	r3, [r7, #28]
 8010e3c:	3301      	adds	r3, #1
 8010e3e:	8b7a      	ldrh	r2, [r7, #26]
 8010e40:	4928      	ldr	r1, [pc, #160]	@ (8010ee4 <http_parse_request+0x1c0>)
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 fb66 	bl	8011514 <lwip_strnstr>
 8010e48:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	3301      	adds	r3, #1
 8010e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8010e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d01e      	beq.n	8010e9c <http_parse_request+0x178>
 8010e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d91a      	bls.n	8010e9c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8010e66:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010e68:	461a      	mov	r2, r3
 8010e6a:	4921      	ldr	r1, [pc, #132]	@ (8010ef0 <http_parse_request+0x1cc>)
 8010e6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010e6e:	f000 fb51 	bl	8011514 <lwip_strnstr>
 8010e72:	4603      	mov	r3, r0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d011      	beq.n	8010e9c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8010e78:	69fb      	ldr	r3, [r7, #28]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	2200      	movs	r2, #0
 8010e82:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8010e84:	8b3b      	ldrh	r3, [r7, #24]
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	4413      	add	r3, r2
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8010e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e90:	6979      	ldr	r1, [r7, #20]
 8010e92:	68b8      	ldr	r0, [r7, #8]
 8010e94:	f000 f82e 	bl	8010ef4 <http_find_file>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	e014      	b.n	8010ec6 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	6a1b      	ldr	r3, [r3, #32]
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f001 ffbf 	bl	8012e24 <pbuf_clen>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	6a1b      	ldr	r3, [r3, #32]
 8010eae:	891b      	ldrh	r3, [r3, #8]
 8010eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010eb4:	d205      	bcs.n	8010ec2 <http_parse_request+0x19e>
 8010eb6:	8a7b      	ldrh	r3, [r7, #18]
 8010eb8:	2b05      	cmp	r3, #5
 8010eba:	d802      	bhi.n	8010ec2 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8010ebc:	f06f 0304 	mvn.w	r3, #4
 8010ec0:	e001      	b.n	8010ec6 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8010ec2:	f06f 030f 	mvn.w	r3, #15
  }
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3738      	adds	r7, #56	@ 0x38
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	08020678 	.word	0x08020678
 8010ed4:	08020744 	.word	0x08020744
 8010ed8:	080206c0 	.word	0x080206c0
 8010edc:	08020750 	.word	0x08020750
 8010ee0:	2000b800 	.word	0x2000b800
 8010ee4:	0802075c 	.word	0x0802075c
 8010ee8:	08020760 	.word	0x08020760
 8010eec:	08020768 	.word	0x08020768
 8010ef0:	0802076c 	.word	0x0802076c

08010ef4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b092      	sub	sp, #72	@ 0x48
 8010ef8:	af02      	add	r7, sp, #8
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8010f00:	2300      	movs	r3, #0
 8010f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8010f04:	2300      	movs	r3, #0
 8010f06:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ef f9dd 	bl	80002d0 <strlen>
 8010f16:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d06b      	beq.n	8010ff6 <http_find_file+0x102>
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	3b01      	subs	r3, #1
 8010f24:	4413      	add	r3, r2
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	2b2f      	cmp	r3, #47	@ 0x2f
 8010f2a:	d164      	bne.n	8010ff6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010f2c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8010f2e:	4a53      	ldr	r2, [pc, #332]	@ (801107c <http_find_file+0x188>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d102      	bne.n	8010f3a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8010f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d15d      	bne.n	8010ff6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8010f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3c:	3b01      	subs	r3, #1
 8010f3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010f40:	bf28      	it	cs
 8010f42:	233f      	movcs	r3, #63	@ 0x3f
 8010f44:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8010f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00a      	beq.n	8010f62 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8010f4c:	68bb      	ldr	r3, [r7, #8]
 8010f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f50:	4619      	mov	r1, r3
 8010f52:	484a      	ldr	r0, [pc, #296]	@ (801107c <http_find_file+0x188>)
 8010f54:	f00c fc25 	bl	801d7a2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8010f58:	4a48      	ldr	r2, [pc, #288]	@ (801107c <http_find_file+0x188>)
 8010f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f5c:	4413      	add	r3, r2
 8010f5e:	2200      	movs	r2, #0
 8010f60:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8010f62:	2300      	movs	r3, #0
 8010f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f66:	e043      	b.n	8010ff0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8010f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d028      	beq.n	8010fc0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f70:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8010f74:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8010f76:	6a3b      	ldr	r3, [r7, #32]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d01e      	beq.n	8010fba <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8010f7c:	4a40      	ldr	r2, [pc, #256]	@ (8011080 <http_find_file+0x18c>)
 8010f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7ef f9a3 	bl	80002d0 <strlen>
 8010f8a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8010f8c:	69fa      	ldr	r2, [r7, #28]
 8010f8e:	6a3b      	ldr	r3, [r7, #32]
 8010f90:	4293      	cmp	r3, r2
 8010f92:	bf28      	it	cs
 8010f94:	4613      	movcs	r3, r2
 8010f96:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8010f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f9a:	4a38      	ldr	r2, [pc, #224]	@ (801107c <http_find_file+0x188>)
 8010f9c:	1898      	adds	r0, r3, r2
 8010f9e:	4a38      	ldr	r2, [pc, #224]	@ (8011080 <http_find_file+0x18c>)
 8010fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010fa6:	69ba      	ldr	r2, [r7, #24]
 8010fa8:	4619      	mov	r1, r3
 8010faa:	f00c fbfa 	bl	801d7a2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8010fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	4413      	add	r3, r2
 8010fb4:	4a31      	ldr	r2, [pc, #196]	@ (801107c <http_find_file+0x188>)
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8010fba:	4b30      	ldr	r3, [pc, #192]	@ (801107c <http_find_file+0x188>)
 8010fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8010fbe:	e004      	b.n	8010fca <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8010fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8011080 <http_find_file+0x18c>)
 8010fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010fc8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7ff fc58 	bl	8010884 <fs_open>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8010fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d104      	bne.n	8010fea <http_find_file+0xf6>
        uri = file_name;
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8010fe8:	e005      	b.n	8010ff6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8010fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fec:	3301      	adds	r3, #1
 8010fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ff2:	2b04      	cmp	r3, #4
 8010ff4:	d9b8      	bls.n	8010f68 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8010ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d124      	bne.n	8011046 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	213f      	movs	r1, #63	@ 0x3f
 8011000:	4618      	mov	r0, r3
 8011002:	f00c fae8 	bl	801d5d6 <strchr>
 8011006:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8011008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801100a:	2b00      	cmp	r3, #0
 801100c:	d005      	beq.n	801101a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 801100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011010:	2200      	movs	r2, #0
 8011012:	701a      	strb	r2, [r3, #0]
      params++;
 8011014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011016:	3301      	adds	r3, #1
 8011018:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	4611      	mov	r1, r2
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fc2f 	bl	8010884 <fs_open>
 8011026:	4603      	mov	r3, r0
 8011028:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 801102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d102      	bne.n	8011038 <http_find_file+0x144>
      file = &hs->file_handle;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011036:	e006      	b.n	8011046 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8011038:	f107 0308 	add.w	r3, r7, #8
 801103c:	4619      	mov	r1, r3
 801103e:	68f8      	ldr	r0, [r7, #12]
 8011040:	f7ff fe2a 	bl	8010c98 <http_get_404_file>
 8011044:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8011046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011048:	2b00      	cmp	r3, #0
 801104a:	d106      	bne.n	801105a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 801104c:	f107 0308 	add.w	r3, r7, #8
 8011050:	4619      	mov	r1, r3
 8011052:	68f8      	ldr	r0, [r7, #12]
 8011054:	f7ff fe20 	bl	8010c98 <http_get_404_file>
 8011058:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011064:	9300      	str	r3, [sp, #0]
 8011066:	4613      	mov	r3, r2
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801106c:	68f8      	ldr	r0, [r7, #12]
 801106e:	f000 f809 	bl	8011084 <http_init_file>
 8011072:	4603      	mov	r3, r0
}
 8011074:	4618      	mov	r0, r3
 8011076:	3740      	adds	r7, #64	@ 0x40
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	2000bc00 	.word	0x2000bc00
 8011080:	080248e4 	.word	0x080248e4

08011084 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
 8011090:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d05c      	beq.n	8011152 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <http_init_file+0x2a>
 80110a0:	4b35      	ldr	r3, [pc, #212]	@ (8011178 <http_init_file+0xf4>)
 80110a2:	f640 120b 	movw	r2, #2315	@ 0x90b
 80110a6:	4935      	ldr	r1, [pc, #212]	@ (801117c <http_init_file+0xf8>)
 80110a8:	4835      	ldr	r0, [pc, #212]	@ (8011180 <http_init_file+0xfc>)
 80110aa:	f00c f9ed 	bl	801d488 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	68ba      	ldr	r2, [r7, #8]
 80110b2:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	da06      	bge.n	80110d2 <http_init_file+0x4e>
 80110c4:	4b2c      	ldr	r3, [pc, #176]	@ (8011178 <http_init_file+0xf4>)
 80110c6:	f640 1234 	movw	r2, #2356	@ 0x934
 80110ca:	492e      	ldr	r1, [pc, #184]	@ (8011184 <http_init_file+0x100>)
 80110cc:	482c      	ldr	r0, [pc, #176]	@ (8011180 <http_init_file+0xfc>)
 80110ce:	f00c f9db 	bl	801d488 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	461a      	mov	r2, r3
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2200      	movs	r2, #0
 80110e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	695b      	ldr	r3, [r3, #20]
 80110e8:	7c1b      	ldrb	r3, [r3, #16]
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d106      	bne.n	8011100 <http_init_file+0x7c>
 80110f2:	4b21      	ldr	r3, [pc, #132]	@ (8011178 <http_init_file+0xf4>)
 80110f4:	f640 1243 	movw	r2, #2371	@ 0x943
 80110f8:	4923      	ldr	r1, [pc, #140]	@ (8011188 <http_init_file+0x104>)
 80110fa:	4821      	ldr	r0, [pc, #132]	@ (8011180 <http_init_file+0xfc>)
 80110fc:	f00c f9c4 	bl	801d488 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d032      	beq.n	801116c <http_init_file+0xe8>
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	695b      	ldr	r3, [r3, #20]
 801110a:	7c1b      	ldrb	r3, [r3, #16]
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	d02b      	beq.n	801116c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	6998      	ldr	r0, [r3, #24]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801111c:	461a      	mov	r2, r3
 801111e:	491b      	ldr	r1, [pc, #108]	@ (801118c <http_init_file+0x108>)
 8011120:	f000 f9f8 	bl	8011514 <lwip_strnstr>
 8011124:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d01f      	beq.n	801116c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	1d1a      	adds	r2, r3, #4
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	699b      	ldr	r3, [r3, #24]
 8011134:	1ad3      	subs	r3, r2, r3
 8011136:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	699a      	ldr	r2, [r3, #24]
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	441a      	add	r2, r3
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	1ad2      	subs	r2, r2, r3
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	625a      	str	r2, [r3, #36]	@ 0x24
 8011150:	e00c      	b.n	801116c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2200      	movs	r2, #0
 8011156:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2200      	movs	r2, #0
 801115c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2200      	movs	r2, #0
 8011162:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2200      	movs	r2, #0
 8011168:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	3718      	adds	r7, #24
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	08020678 	.word	0x08020678
 801117c:	08020774 	.word	0x08020774
 8011180:	080206c0 	.word	0x080206c0
 8011184:	08020788 	.word	0x08020788
 8011188:	080207a8 	.word	0x080207a8
 801118c:	0802076c 	.word	0x0802076c

08011190 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
 8011198:	460b      	mov	r3, r1
 801119a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d002      	beq.n	80111ac <http_err+0x1c>
    http_state_free(hs);
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f7ff fc02 	bl	80109b0 <http_state_free>
  }
}
 80111ac:	bf00      	nop
 80111ae:	3710      	adds	r7, #16
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	4613      	mov	r3, r2
 80111c0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d101      	bne.n	80111d0 <http_sent+0x1c>
    return ERR_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	e008      	b.n	80111e2 <http_sent+0x2e>
  }

  hs->retries = 0;
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	2200      	movs	r2, #0
 80111d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 80111d8:	6979      	ldr	r1, [r7, #20]
 80111da:	68b8      	ldr	r0, [r7, #8]
 80111dc:	f7ff fd25 	bl	8010c2a <http_send>

  return ERR_OK;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3718      	adds	r7, #24
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b084      	sub	sp, #16
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d107      	bne.n	801120e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80111fe:	2100      	movs	r1, #0
 8011200:	6838      	ldr	r0, [r7, #0]
 8011202:	f7ff fc91 	bl	8010b28 <http_close_conn>
 8011206:	4603      	mov	r3, r0
 8011208:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801120a:	2300      	movs	r3, #0
 801120c:	e021      	b.n	8011252 <http_poll+0x68>
  } else {
    hs->retries++;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011214:	3301      	adds	r3, #1
 8011216:	b2da      	uxtb	r2, r3
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011224:	2b04      	cmp	r3, #4
 8011226:	d105      	bne.n	8011234 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8011228:	68f9      	ldr	r1, [r7, #12]
 801122a:	6838      	ldr	r0, [r7, #0]
 801122c:	f7ff fc7c 	bl	8010b28 <http_close_conn>
      return ERR_OK;
 8011230:	2300      	movs	r3, #0
 8011232:	e00e      	b.n	8011252 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d009      	beq.n	8011250 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 801123c:	68f9      	ldr	r1, [r7, #12]
 801123e:	6838      	ldr	r0, [r7, #0]
 8011240:	f7ff fcf3 	bl	8010c2a <http_send>
 8011244:	4603      	mov	r3, r0
 8011246:	2b00      	cmp	r3, #0
 8011248:	d002      	beq.n	8011250 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 801124a:	6838      	ldr	r0, [r7, #0]
 801124c:	f007 f942 	bl	80184d4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
	...

0801125c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60f8      	str	r0, [r7, #12]
 8011264:	60b9      	str	r1, [r7, #8]
 8011266:	607a      	str	r2, [r7, #4]
 8011268:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801126e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d105      	bne.n	8011282 <http_recv+0x26>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <http_recv+0x26>
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d111      	bne.n	80112a6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d008      	beq.n	801129a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	891b      	ldrh	r3, [r3, #8]
 801128c:	4619      	mov	r1, r3
 801128e:	68b8      	ldr	r0, [r7, #8]
 8011290:	f002 fd14 	bl	8013cbc <tcp_recved>
      pbuf_free(p);
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f001 fd37 	bl	8012d08 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801129a:	6979      	ldr	r1, [r7, #20]
 801129c:	68b8      	ldr	r0, [r7, #8]
 801129e:	f7ff fc43 	bl	8010b28 <http_close_conn>
    return ERR_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	e055      	b.n	8011352 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	891b      	ldrh	r3, [r3, #8]
 80112aa:	4619      	mov	r1, r3
 80112ac:	68b8      	ldr	r0, [r7, #8]
 80112ae:	f002 fd05 	bl	8013cbc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	695b      	ldr	r3, [r3, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d147      	bne.n	801134a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80112ba:	68ba      	ldr	r2, [r7, #8]
 80112bc:	6979      	ldr	r1, [r7, #20]
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff fd30 	bl	8010d24 <http_parse_request>
 80112c4:	4603      	mov	r3, r0
 80112c6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80112c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d015      	beq.n	80112fc <http_recv+0xa0>
 80112d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112d4:	f113 0f05 	cmn.w	r3, #5
 80112d8:	d010      	beq.n	80112fc <http_recv+0xa0>
 80112da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112de:	f113 0f10 	cmn.w	r3, #16
 80112e2:	d00b      	beq.n	80112fc <http_recv+0xa0>
 80112e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112e8:	f113 0f08 	cmn.w	r3, #8
 80112ec:	d006      	beq.n	80112fc <http_recv+0xa0>
 80112ee:	4b1b      	ldr	r3, [pc, #108]	@ (801135c <http_recv+0x100>)
 80112f0:	f640 2204 	movw	r2, #2564	@ 0xa04
 80112f4:	491a      	ldr	r1, [pc, #104]	@ (8011360 <http_recv+0x104>)
 80112f6:	481b      	ldr	r0, [pc, #108]	@ (8011364 <http_recv+0x108>)
 80112f8:	f00c f8c6 	bl	801d488 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80112fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011300:	f113 0f05 	cmn.w	r3, #5
 8011304:	d00b      	beq.n	801131e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	6a1b      	ldr	r3, [r3, #32]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d007      	beq.n	801131e <http_recv+0xc2>
          pbuf_free(hs->req);
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	6a1b      	ldr	r3, [r3, #32]
 8011312:	4618      	mov	r0, r3
 8011314:	f001 fcf8 	bl	8012d08 <pbuf_free>
          hs->req = NULL;
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	2200      	movs	r2, #0
 801131c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f001 fcf2 	bl	8012d08 <pbuf_free>
      if (parsed == ERR_OK) {
 8011324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d104      	bne.n	8011336 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 801132c:	6979      	ldr	r1, [r7, #20]
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	f7ff fc7b 	bl	8010c2a <http_send>
 8011334:	e00c      	b.n	8011350 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8011336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801133a:	f113 0f10 	cmn.w	r3, #16
 801133e:	d107      	bne.n	8011350 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8011340:	6979      	ldr	r1, [r7, #20]
 8011342:	68b8      	ldr	r0, [r7, #8]
 8011344:	f7ff fbf0 	bl	8010b28 <http_close_conn>
 8011348:	e002      	b.n	8011350 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f001 fcdc 	bl	8012d08 <pbuf_free>
    }
  }
  return ERR_OK;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3718      	adds	r7, #24
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	08020678 	.word	0x08020678
 8011360:	080207d4 	.word	0x080207d4
 8011364:	080206c0 	.word	0x080206c0

08011368 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b086      	sub	sp, #24
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	4613      	mov	r3, r2
 8011374:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8011376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <http_accept+0x1c>
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d102      	bne.n	801138a <http_accept+0x22>
    return ERR_VAL;
 8011384:	f06f 0305 	mvn.w	r3, #5
 8011388:	e025      	b.n	80113d6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801138a:	2101      	movs	r1, #1
 801138c:	68b8      	ldr	r0, [r7, #8]
 801138e:	f003 f97b 	bl	8014688 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8011392:	f7ff fadb 	bl	801094c <http_state_alloc>
 8011396:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d102      	bne.n	80113a4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 801139e:	f04f 33ff 	mov.w	r3, #4294967295
 80113a2:	e018      	b.n	80113d6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80113aa:	6979      	ldr	r1, [r7, #20]
 80113ac:	68b8      	ldr	r0, [r7, #8]
 80113ae:	f003 fb6b 	bl	8014a88 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80113b2:	490b      	ldr	r1, [pc, #44]	@ (80113e0 <http_accept+0x78>)
 80113b4:	68b8      	ldr	r0, [r7, #8]
 80113b6:	f003 fb79 	bl	8014aac <tcp_recv>
  altcp_err(pcb, http_err);
 80113ba:	490a      	ldr	r1, [pc, #40]	@ (80113e4 <http_accept+0x7c>)
 80113bc:	68b8      	ldr	r0, [r7, #8]
 80113be:	f003 fbb9 	bl	8014b34 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80113c2:	2204      	movs	r2, #4
 80113c4:	4908      	ldr	r1, [pc, #32]	@ (80113e8 <http_accept+0x80>)
 80113c6:	68b8      	ldr	r0, [r7, #8]
 80113c8:	f003 fbee 	bl	8014ba8 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80113cc:	4907      	ldr	r1, [pc, #28]	@ (80113ec <http_accept+0x84>)
 80113ce:	68b8      	ldr	r0, [r7, #8]
 80113d0:	f003 fb8e 	bl	8014af0 <tcp_sent>

  return ERR_OK;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3718      	adds	r7, #24
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	0801125d 	.word	0x0801125d
 80113e4:	08011191 	.word	0x08011191
 80113e8:	080111eb 	.word	0x080111eb
 80113ec:	080111b5 	.word	0x080111b5

080113f0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	460b      	mov	r3, r1
 80113fa:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d029      	beq.n	8011456 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8011402:	2101      	movs	r1, #1
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f003 f93f 	bl	8014688 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801140a:	887b      	ldrh	r3, [r7, #2]
 801140c:	461a      	mov	r2, r3
 801140e:	4914      	ldr	r1, [pc, #80]	@ (8011460 <httpd_init_pcb+0x70>)
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f002 fa85 	bl	8013920 <tcp_bind>
 8011416:	4603      	mov	r3, r0
 8011418:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 801141a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <httpd_init_pcb+0x40>
 8011422:	4b10      	ldr	r3, [pc, #64]	@ (8011464 <httpd_init_pcb+0x74>)
 8011424:	f640 2257 	movw	r2, #2647	@ 0xa57
 8011428:	490f      	ldr	r1, [pc, #60]	@ (8011468 <httpd_init_pcb+0x78>)
 801142a:	4810      	ldr	r0, [pc, #64]	@ (801146c <httpd_init_pcb+0x7c>)
 801142c:	f00c f82c 	bl	801d488 <iprintf>
    pcb = altcp_listen(pcb);
 8011430:	21ff      	movs	r1, #255	@ 0xff
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f002 fb2c 	bl	8013a90 <tcp_listen_with_backlog>
 8011438:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d106      	bne.n	801144e <httpd_init_pcb+0x5e>
 8011440:	4b08      	ldr	r3, [pc, #32]	@ (8011464 <httpd_init_pcb+0x74>)
 8011442:	f640 2259 	movw	r2, #2649	@ 0xa59
 8011446:	490a      	ldr	r1, [pc, #40]	@ (8011470 <httpd_init_pcb+0x80>)
 8011448:	4808      	ldr	r0, [pc, #32]	@ (801146c <httpd_init_pcb+0x7c>)
 801144a:	f00c f81d 	bl	801d488 <iprintf>
    altcp_accept(pcb, http_accept);
 801144e:	4909      	ldr	r1, [pc, #36]	@ (8011474 <httpd_init_pcb+0x84>)
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f003 fb91 	bl	8014b78 <tcp_accept>
  }
}
 8011456:	bf00      	nop
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	08024a1c 	.word	0x08024a1c
 8011464:	08020678 	.word	0x08020678
 8011468:	08020800 	.word	0x08020800
 801146c:	080206c0 	.word	0x080206c0
 8011470:	0802081c 	.word	0x0802081c
 8011474:	08011369 	.word	0x08011369

08011478 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b082      	sub	sp, #8
 801147c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801147e:	202e      	movs	r0, #46	@ 0x2e
 8011480:	f003 faf4 	bl	8014a6c <tcp_new_ip_type>
 8011484:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d106      	bne.n	801149a <httpd_init+0x22>
 801148c:	4b07      	ldr	r3, [pc, #28]	@ (80114ac <httpd_init+0x34>)
 801148e:	f640 2272 	movw	r2, #2674	@ 0xa72
 8011492:	4907      	ldr	r1, [pc, #28]	@ (80114b0 <httpd_init+0x38>)
 8011494:	4807      	ldr	r0, [pc, #28]	@ (80114b4 <httpd_init+0x3c>)
 8011496:	f00b fff7 	bl	801d488 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801149a:	2150      	movs	r1, #80	@ 0x50
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f7ff ffa7 	bl	80113f0 <httpd_init_pcb>
}
 80114a2:	bf00      	nop
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	08020678 	.word	0x08020678
 80114b0:	0802083c 	.word	0x0802083c
 80114b4:	080206c0 	.word	0x080206c0

080114b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80114b8:	b480      	push	{r7}
 80114ba:	b083      	sub	sp, #12
 80114bc:	af00      	add	r7, sp, #0
 80114be:	4603      	mov	r3, r0
 80114c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80114c2:	88fb      	ldrh	r3, [r7, #6]
 80114c4:	021b      	lsls	r3, r3, #8
 80114c6:	b21a      	sxth	r2, r3
 80114c8:	88fb      	ldrh	r3, [r7, #6]
 80114ca:	0a1b      	lsrs	r3, r3, #8
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	b21b      	sxth	r3, r3
 80114d0:	4313      	orrs	r3, r2
 80114d2:	b21b      	sxth	r3, r3
 80114d4:	b29b      	uxth	r3, r3
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	370c      	adds	r7, #12
 80114da:	46bd      	mov	sp, r7
 80114dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e0:	4770      	bx	lr

080114e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80114e2:	b480      	push	{r7}
 80114e4:	b083      	sub	sp, #12
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	061a      	lsls	r2, r3, #24
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	021b      	lsls	r3, r3, #8
 80114f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80114f6:	431a      	orrs	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	0a1b      	lsrs	r3, r3, #8
 80114fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011500:	431a      	orrs	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	0e1b      	lsrs	r3, r3, #24
 8011506:	4313      	orrs	r3, r2
}
 8011508:	4618      	mov	r0, r3
 801150a:	370c      	adds	r7, #12
 801150c:	46bd      	mov	sp, r7
 801150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011512:	4770      	bx	lr

08011514 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b086      	sub	sp, #24
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8011520:	68b8      	ldr	r0, [r7, #8]
 8011522:	f7ee fed5 	bl	80002d0 <strlen>
 8011526:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d101      	bne.n	8011532 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	e022      	b.n	8011578 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	617b      	str	r3, [r7, #20]
 8011536:	e012      	b.n	801155e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	781a      	ldrb	r2, [r3, #0]
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	429a      	cmp	r2, r3
 8011542:	d109      	bne.n	8011558 <lwip_strnstr+0x44>
 8011544:	693a      	ldr	r2, [r7, #16]
 8011546:	68b9      	ldr	r1, [r7, #8]
 8011548:	6978      	ldr	r0, [r7, #20]
 801154a:	f00c f851 	bl	801d5f0 <strncmp>
 801154e:	4603      	mov	r3, r0
 8011550:	2b00      	cmp	r3, #0
 8011552:	d101      	bne.n	8011558 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	e00f      	b.n	8011578 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	3301      	adds	r3, #1
 801155c:	617b      	str	r3, [r7, #20]
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d007      	beq.n	8011576 <lwip_strnstr+0x62>
 8011566:	697a      	ldr	r2, [r7, #20]
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	441a      	add	r2, r3
 801156c:	68f9      	ldr	r1, [r7, #12]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	440b      	add	r3, r1
 8011572:	429a      	cmp	r2, r3
 8011574:	d9e0      	bls.n	8011538 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8011576:	2300      	movs	r3, #0
}
 8011578:	4618      	mov	r0, r3
 801157a:	3718      	adds	r7, #24
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011586:	2300      	movs	r3, #0
 8011588:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801158a:	f00b f99b 	bl	801c8c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801158e:	f000 f8d5 	bl	801173c <mem_init>
  memp_init();
 8011592:	f000 fc31 	bl	8011df8 <memp_init>
  pbuf_init();
  netif_init();
 8011596:	f000 fd3d 	bl	8012014 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801159a:	f008 f88b 	bl	80196b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801159e:	f001 fe5d 	bl	801325c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80115a2:	f007 ffcd 	bl	8019540 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80115a6:	bf00      	nop
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
	...

080115b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	4603      	mov	r3, r0
 80115b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80115ba:	4b05      	ldr	r3, [pc, #20]	@ (80115d0 <ptr_to_mem+0x20>)
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	88fb      	ldrh	r3, [r7, #6]
 80115c0:	4413      	add	r3, r2
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	2000c2ac 	.word	0x2000c2ac

080115d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80115dc:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <mem_to_ptr+0x20>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	1ad3      	subs	r3, r2, r3
 80115e4:	b29b      	uxth	r3, r3
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr
 80115f2:	bf00      	nop
 80115f4:	2000c2ac 	.word	0x2000c2ac

080115f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80115f8:	b590      	push	{r4, r7, lr}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011600:	4b45      	ldr	r3, [pc, #276]	@ (8011718 <plug_holes+0x120>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	429a      	cmp	r2, r3
 8011608:	d206      	bcs.n	8011618 <plug_holes+0x20>
 801160a:	4b44      	ldr	r3, [pc, #272]	@ (801171c <plug_holes+0x124>)
 801160c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011610:	4943      	ldr	r1, [pc, #268]	@ (8011720 <plug_holes+0x128>)
 8011612:	4844      	ldr	r0, [pc, #272]	@ (8011724 <plug_holes+0x12c>)
 8011614:	f00b ff38 	bl	801d488 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011618:	4b43      	ldr	r3, [pc, #268]	@ (8011728 <plug_holes+0x130>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	687a      	ldr	r2, [r7, #4]
 801161e:	429a      	cmp	r2, r3
 8011620:	d306      	bcc.n	8011630 <plug_holes+0x38>
 8011622:	4b3e      	ldr	r3, [pc, #248]	@ (801171c <plug_holes+0x124>)
 8011624:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011628:	4940      	ldr	r1, [pc, #256]	@ (801172c <plug_holes+0x134>)
 801162a:	483e      	ldr	r0, [pc, #248]	@ (8011724 <plug_holes+0x12c>)
 801162c:	f00b ff2c 	bl	801d488 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	791b      	ldrb	r3, [r3, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d006      	beq.n	8011646 <plug_holes+0x4e>
 8011638:	4b38      	ldr	r3, [pc, #224]	@ (801171c <plug_holes+0x124>)
 801163a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801163e:	493c      	ldr	r1, [pc, #240]	@ (8011730 <plug_holes+0x138>)
 8011640:	4838      	ldr	r0, [pc, #224]	@ (8011724 <plug_holes+0x12c>)
 8011642:	f00b ff21 	bl	801d488 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801164e:	d906      	bls.n	801165e <plug_holes+0x66>
 8011650:	4b32      	ldr	r3, [pc, #200]	@ (801171c <plug_holes+0x124>)
 8011652:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011656:	4937      	ldr	r1, [pc, #220]	@ (8011734 <plug_holes+0x13c>)
 8011658:	4832      	ldr	r0, [pc, #200]	@ (8011724 <plug_holes+0x12c>)
 801165a:	f00b ff15 	bl	801d488 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	881b      	ldrh	r3, [r3, #0]
 8011662:	4618      	mov	r0, r3
 8011664:	f7ff ffa4 	bl	80115b0 <ptr_to_mem>
 8011668:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	429a      	cmp	r2, r3
 8011670:	d024      	beq.n	80116bc <plug_holes+0xc4>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	791b      	ldrb	r3, [r3, #4]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d120      	bne.n	80116bc <plug_holes+0xc4>
 801167a:	4b2b      	ldr	r3, [pc, #172]	@ (8011728 <plug_holes+0x130>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68fa      	ldr	r2, [r7, #12]
 8011680:	429a      	cmp	r2, r3
 8011682:	d01b      	beq.n	80116bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011684:	4b2c      	ldr	r3, [pc, #176]	@ (8011738 <plug_holes+0x140>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	68fa      	ldr	r2, [r7, #12]
 801168a:	429a      	cmp	r2, r3
 801168c:	d102      	bne.n	8011694 <plug_holes+0x9c>
      lfree = mem;
 801168e:	4a2a      	ldr	r2, [pc, #168]	@ (8011738 <plug_holes+0x140>)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	881a      	ldrh	r2, [r3, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80116a4:	d00a      	beq.n	80116bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	881b      	ldrh	r3, [r3, #0]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7ff ff80 	bl	80115b0 <ptr_to_mem>
 80116b0:	4604      	mov	r4, r0
 80116b2:	6878      	ldr	r0, [r7, #4]
 80116b4:	f7ff ff8e 	bl	80115d4 <mem_to_ptr>
 80116b8:	4603      	mov	r3, r0
 80116ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	885b      	ldrh	r3, [r3, #2]
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7ff ff75 	bl	80115b0 <ptr_to_mem>
 80116c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80116c8:	68ba      	ldr	r2, [r7, #8]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d01f      	beq.n	8011710 <plug_holes+0x118>
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	791b      	ldrb	r3, [r3, #4]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d11b      	bne.n	8011710 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80116d8:	4b17      	ldr	r3, [pc, #92]	@ (8011738 <plug_holes+0x140>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d102      	bne.n	80116e8 <plug_holes+0xf0>
      lfree = pmem;
 80116e2:	4a15      	ldr	r2, [pc, #84]	@ (8011738 <plug_holes+0x140>)
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	881a      	ldrh	r2, [r3, #0]
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	881b      	ldrh	r3, [r3, #0]
 80116f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80116f8:	d00a      	beq.n	8011710 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	881b      	ldrh	r3, [r3, #0]
 80116fe:	4618      	mov	r0, r3
 8011700:	f7ff ff56 	bl	80115b0 <ptr_to_mem>
 8011704:	4604      	mov	r4, r0
 8011706:	68b8      	ldr	r0, [r7, #8]
 8011708:	f7ff ff64 	bl	80115d4 <mem_to_ptr>
 801170c:	4603      	mov	r3, r0
 801170e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011710:	bf00      	nop
 8011712:	3714      	adds	r7, #20
 8011714:	46bd      	mov	sp, r7
 8011716:	bd90      	pop	{r4, r7, pc}
 8011718:	2000c2ac 	.word	0x2000c2ac
 801171c:	08020858 	.word	0x08020858
 8011720:	08020888 	.word	0x08020888
 8011724:	080208a0 	.word	0x080208a0
 8011728:	2000c2b0 	.word	0x2000c2b0
 801172c:	080208c8 	.word	0x080208c8
 8011730:	080208e4 	.word	0x080208e4
 8011734:	08020900 	.word	0x08020900
 8011738:	2000c2b8 	.word	0x2000c2b8

0801173c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011742:	4b1f      	ldr	r3, [pc, #124]	@ (80117c0 <mem_init+0x84>)
 8011744:	3303      	adds	r3, #3
 8011746:	f023 0303 	bic.w	r3, r3, #3
 801174a:	461a      	mov	r2, r3
 801174c:	4b1d      	ldr	r3, [pc, #116]	@ (80117c4 <mem_init+0x88>)
 801174e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011750:	4b1c      	ldr	r3, [pc, #112]	@ (80117c4 <mem_init+0x88>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801175c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2200      	movs	r2, #0
 8011768:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801176a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 801176e:	f7ff ff1f 	bl	80115b0 <ptr_to_mem>
 8011772:	4603      	mov	r3, r0
 8011774:	4a14      	ldr	r2, [pc, #80]	@ (80117c8 <mem_init+0x8c>)
 8011776:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011778:	4b13      	ldr	r3, [pc, #76]	@ (80117c8 <mem_init+0x8c>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2201      	movs	r2, #1
 801177e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011780:	4b11      	ldr	r3, [pc, #68]	@ (80117c8 <mem_init+0x8c>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011788:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801178a:	4b0f      	ldr	r3, [pc, #60]	@ (80117c8 <mem_init+0x8c>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011792:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011794:	4b0b      	ldr	r3, [pc, #44]	@ (80117c4 <mem_init+0x88>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	4a0c      	ldr	r2, [pc, #48]	@ (80117cc <mem_init+0x90>)
 801179a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801179c:	480c      	ldr	r0, [pc, #48]	@ (80117d0 <mem_init+0x94>)
 801179e:	f00b f89f 	bl	801c8e0 <sys_mutex_new>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d006      	beq.n	80117b6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80117a8:	4b0a      	ldr	r3, [pc, #40]	@ (80117d4 <mem_init+0x98>)
 80117aa:	f240 221f 	movw	r2, #543	@ 0x21f
 80117ae:	490a      	ldr	r1, [pc, #40]	@ (80117d8 <mem_init+0x9c>)
 80117b0:	480a      	ldr	r0, [pc, #40]	@ (80117dc <mem_init+0xa0>)
 80117b2:	f00b fe69 	bl	801d488 <iprintf>
  }
}
 80117b6:	bf00      	nop
 80117b8:	3708      	adds	r7, #8
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd80      	pop	{r7, pc}
 80117be:	bf00      	nop
 80117c0:	2000bc58 	.word	0x2000bc58
 80117c4:	2000c2ac 	.word	0x2000c2ac
 80117c8:	2000c2b0 	.word	0x2000c2b0
 80117cc:	2000c2b8 	.word	0x2000c2b8
 80117d0:	2000c2b4 	.word	0x2000c2b4
 80117d4:	08020858 	.word	0x08020858
 80117d8:	0802092c 	.word	0x0802092c
 80117dc:	080208a0 	.word	0x080208a0

080117e0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b086      	sub	sp, #24
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7ff fef3 	bl	80115d4 <mem_to_ptr>
 80117ee:	4603      	mov	r3, r0
 80117f0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	881b      	ldrh	r3, [r3, #0]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff feda 	bl	80115b0 <ptr_to_mem>
 80117fc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	885b      	ldrh	r3, [r3, #2]
 8011802:	4618      	mov	r0, r3
 8011804:	f7ff fed4 	bl	80115b0 <ptr_to_mem>
 8011808:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	881b      	ldrh	r3, [r3, #0]
 801180e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011812:	d818      	bhi.n	8011846 <mem_link_valid+0x66>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	885b      	ldrh	r3, [r3, #2]
 8011818:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801181c:	d813      	bhi.n	8011846 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011822:	8afa      	ldrh	r2, [r7, #22]
 8011824:	429a      	cmp	r2, r3
 8011826:	d004      	beq.n	8011832 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	881b      	ldrh	r3, [r3, #0]
 801182c:	8afa      	ldrh	r2, [r7, #22]
 801182e:	429a      	cmp	r2, r3
 8011830:	d109      	bne.n	8011846 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011832:	4b08      	ldr	r3, [pc, #32]	@ (8011854 <mem_link_valid+0x74>)
 8011834:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011836:	693a      	ldr	r2, [r7, #16]
 8011838:	429a      	cmp	r2, r3
 801183a:	d006      	beq.n	801184a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801183c:	693b      	ldr	r3, [r7, #16]
 801183e:	885b      	ldrh	r3, [r3, #2]
 8011840:	8afa      	ldrh	r2, [r7, #22]
 8011842:	429a      	cmp	r2, r3
 8011844:	d001      	beq.n	801184a <mem_link_valid+0x6a>
    return 0;
 8011846:	2300      	movs	r3, #0
 8011848:	e000      	b.n	801184c <mem_link_valid+0x6c>
  }
  return 1;
 801184a:	2301      	movs	r3, #1
}
 801184c:	4618      	mov	r0, r3
 801184e:	3718      	adds	r7, #24
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	2000c2b0 	.word	0x2000c2b0

08011858 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b088      	sub	sp, #32
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d070      	beq.n	8011948 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f003 0303 	and.w	r3, r3, #3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d00d      	beq.n	801188c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011870:	4b37      	ldr	r3, [pc, #220]	@ (8011950 <mem_free+0xf8>)
 8011872:	f240 2273 	movw	r2, #627	@ 0x273
 8011876:	4937      	ldr	r1, [pc, #220]	@ (8011954 <mem_free+0xfc>)
 8011878:	4837      	ldr	r0, [pc, #220]	@ (8011958 <mem_free+0x100>)
 801187a:	f00b fe05 	bl	801d488 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801187e:	f00b f88d 	bl	801c99c <sys_arch_protect>
 8011882:	60f8      	str	r0, [r7, #12]
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f00b f897 	bl	801c9b8 <sys_arch_unprotect>
    return;
 801188a:	e05e      	b.n	801194a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	3b08      	subs	r3, #8
 8011890:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011892:	4b32      	ldr	r3, [pc, #200]	@ (801195c <mem_free+0x104>)
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	69fa      	ldr	r2, [r7, #28]
 8011898:	429a      	cmp	r2, r3
 801189a:	d306      	bcc.n	80118aa <mem_free+0x52>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f103 020c 	add.w	r2, r3, #12
 80118a2:	4b2f      	ldr	r3, [pc, #188]	@ (8011960 <mem_free+0x108>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d90d      	bls.n	80118c6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80118aa:	4b29      	ldr	r3, [pc, #164]	@ (8011950 <mem_free+0xf8>)
 80118ac:	f240 227f 	movw	r2, #639	@ 0x27f
 80118b0:	492c      	ldr	r1, [pc, #176]	@ (8011964 <mem_free+0x10c>)
 80118b2:	4829      	ldr	r0, [pc, #164]	@ (8011958 <mem_free+0x100>)
 80118b4:	f00b fde8 	bl	801d488 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118b8:	f00b f870 	bl	801c99c <sys_arch_protect>
 80118bc:	6138      	str	r0, [r7, #16]
 80118be:	6938      	ldr	r0, [r7, #16]
 80118c0:	f00b f87a 	bl	801c9b8 <sys_arch_unprotect>
    return;
 80118c4:	e041      	b.n	801194a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80118c6:	4828      	ldr	r0, [pc, #160]	@ (8011968 <mem_free+0x110>)
 80118c8:	f00b f826 	bl	801c918 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	791b      	ldrb	r3, [r3, #4]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d110      	bne.n	80118f6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80118d4:	4b1e      	ldr	r3, [pc, #120]	@ (8011950 <mem_free+0xf8>)
 80118d6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80118da:	4924      	ldr	r1, [pc, #144]	@ (801196c <mem_free+0x114>)
 80118dc:	481e      	ldr	r0, [pc, #120]	@ (8011958 <mem_free+0x100>)
 80118de:	f00b fdd3 	bl	801d488 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80118e2:	4821      	ldr	r0, [pc, #132]	@ (8011968 <mem_free+0x110>)
 80118e4:	f00b f827 	bl	801c936 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80118e8:	f00b f858 	bl	801c99c <sys_arch_protect>
 80118ec:	6178      	str	r0, [r7, #20]
 80118ee:	6978      	ldr	r0, [r7, #20]
 80118f0:	f00b f862 	bl	801c9b8 <sys_arch_unprotect>
    return;
 80118f4:	e029      	b.n	801194a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80118f6:	69f8      	ldr	r0, [r7, #28]
 80118f8:	f7ff ff72 	bl	80117e0 <mem_link_valid>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d110      	bne.n	8011924 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011902:	4b13      	ldr	r3, [pc, #76]	@ (8011950 <mem_free+0xf8>)
 8011904:	f240 2295 	movw	r2, #661	@ 0x295
 8011908:	4919      	ldr	r1, [pc, #100]	@ (8011970 <mem_free+0x118>)
 801190a:	4813      	ldr	r0, [pc, #76]	@ (8011958 <mem_free+0x100>)
 801190c:	f00b fdbc 	bl	801d488 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011910:	4815      	ldr	r0, [pc, #84]	@ (8011968 <mem_free+0x110>)
 8011912:	f00b f810 	bl	801c936 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011916:	f00b f841 	bl	801c99c <sys_arch_protect>
 801191a:	61b8      	str	r0, [r7, #24]
 801191c:	69b8      	ldr	r0, [r7, #24]
 801191e:	f00b f84b 	bl	801c9b8 <sys_arch_unprotect>
    return;
 8011922:	e012      	b.n	801194a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	2200      	movs	r2, #0
 8011928:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801192a:	4b12      	ldr	r3, [pc, #72]	@ (8011974 <mem_free+0x11c>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	69fa      	ldr	r2, [r7, #28]
 8011930:	429a      	cmp	r2, r3
 8011932:	d202      	bcs.n	801193a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011934:	4a0f      	ldr	r2, [pc, #60]	@ (8011974 <mem_free+0x11c>)
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801193a:	69f8      	ldr	r0, [r7, #28]
 801193c:	f7ff fe5c 	bl	80115f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011940:	4809      	ldr	r0, [pc, #36]	@ (8011968 <mem_free+0x110>)
 8011942:	f00a fff8 	bl	801c936 <sys_mutex_unlock>
 8011946:	e000      	b.n	801194a <mem_free+0xf2>
    return;
 8011948:	bf00      	nop
}
 801194a:	3720      	adds	r7, #32
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	08020858 	.word	0x08020858
 8011954:	08020948 	.word	0x08020948
 8011958:	080208a0 	.word	0x080208a0
 801195c:	2000c2ac 	.word	0x2000c2ac
 8011960:	2000c2b0 	.word	0x2000c2b0
 8011964:	0802096c 	.word	0x0802096c
 8011968:	2000c2b4 	.word	0x2000c2b4
 801196c:	08020988 	.word	0x08020988
 8011970:	080209b0 	.word	0x080209b0
 8011974:	2000c2b8 	.word	0x2000c2b8

08011978 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b088      	sub	sp, #32
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011984:	887b      	ldrh	r3, [r7, #2]
 8011986:	3303      	adds	r3, #3
 8011988:	b29b      	uxth	r3, r3
 801198a:	f023 0303 	bic.w	r3, r3, #3
 801198e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011990:	8bfb      	ldrh	r3, [r7, #30]
 8011992:	2b0b      	cmp	r3, #11
 8011994:	d801      	bhi.n	801199a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011996:	230c      	movs	r3, #12
 8011998:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801199a:	8bfb      	ldrh	r3, [r7, #30]
 801199c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80119a0:	d803      	bhi.n	80119aa <mem_trim+0x32>
 80119a2:	8bfa      	ldrh	r2, [r7, #30]
 80119a4:	887b      	ldrh	r3, [r7, #2]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d201      	bcs.n	80119ae <mem_trim+0x36>
    return NULL;
 80119aa:	2300      	movs	r3, #0
 80119ac:	e0d8      	b.n	8011b60 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80119ae:	4b6e      	ldr	r3, [pc, #440]	@ (8011b68 <mem_trim+0x1f0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d304      	bcc.n	80119c2 <mem_trim+0x4a>
 80119b8:	4b6c      	ldr	r3, [pc, #432]	@ (8011b6c <mem_trim+0x1f4>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d306      	bcc.n	80119d0 <mem_trim+0x58>
 80119c2:	4b6b      	ldr	r3, [pc, #428]	@ (8011b70 <mem_trim+0x1f8>)
 80119c4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80119c8:	496a      	ldr	r1, [pc, #424]	@ (8011b74 <mem_trim+0x1fc>)
 80119ca:	486b      	ldr	r0, [pc, #428]	@ (8011b78 <mem_trim+0x200>)
 80119cc:	f00b fd5c 	bl	801d488 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80119d0:	4b65      	ldr	r3, [pc, #404]	@ (8011b68 <mem_trim+0x1f0>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d304      	bcc.n	80119e4 <mem_trim+0x6c>
 80119da:	4b64      	ldr	r3, [pc, #400]	@ (8011b6c <mem_trim+0x1f4>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d307      	bcc.n	80119f4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80119e4:	f00a ffda 	bl	801c99c <sys_arch_protect>
 80119e8:	60b8      	str	r0, [r7, #8]
 80119ea:	68b8      	ldr	r0, [r7, #8]
 80119ec:	f00a ffe4 	bl	801c9b8 <sys_arch_unprotect>
    return rmem;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	e0b5      	b.n	8011b60 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	3b08      	subs	r3, #8
 80119f8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80119fa:	69b8      	ldr	r0, [r7, #24]
 80119fc:	f7ff fdea 	bl	80115d4 <mem_to_ptr>
 8011a00:	4603      	mov	r3, r0
 8011a02:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	881a      	ldrh	r2, [r3, #0]
 8011a08:	8afb      	ldrh	r3, [r7, #22]
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	b29b      	uxth	r3, r3
 8011a0e:	3b08      	subs	r3, #8
 8011a10:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011a12:	8bfa      	ldrh	r2, [r7, #30]
 8011a14:	8abb      	ldrh	r3, [r7, #20]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d906      	bls.n	8011a28 <mem_trim+0xb0>
 8011a1a:	4b55      	ldr	r3, [pc, #340]	@ (8011b70 <mem_trim+0x1f8>)
 8011a1c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011a20:	4956      	ldr	r1, [pc, #344]	@ (8011b7c <mem_trim+0x204>)
 8011a22:	4855      	ldr	r0, [pc, #340]	@ (8011b78 <mem_trim+0x200>)
 8011a24:	f00b fd30 	bl	801d488 <iprintf>
  if (newsize > size) {
 8011a28:	8bfa      	ldrh	r2, [r7, #30]
 8011a2a:	8abb      	ldrh	r3, [r7, #20]
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d901      	bls.n	8011a34 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011a30:	2300      	movs	r3, #0
 8011a32:	e095      	b.n	8011b60 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011a34:	8bfa      	ldrh	r2, [r7, #30]
 8011a36:	8abb      	ldrh	r3, [r7, #20]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d101      	bne.n	8011a40 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	e08f      	b.n	8011b60 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011a40:	484f      	ldr	r0, [pc, #316]	@ (8011b80 <mem_trim+0x208>)
 8011a42:	f00a ff69 	bl	801c918 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011a46:	69bb      	ldr	r3, [r7, #24]
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7ff fdb0 	bl	80115b0 <ptr_to_mem>
 8011a50:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	791b      	ldrb	r3, [r3, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d13f      	bne.n	8011ada <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011a5a:	69bb      	ldr	r3, [r7, #24]
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011a62:	d106      	bne.n	8011a72 <mem_trim+0xfa>
 8011a64:	4b42      	ldr	r3, [pc, #264]	@ (8011b70 <mem_trim+0x1f8>)
 8011a66:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011a6a:	4946      	ldr	r1, [pc, #280]	@ (8011b84 <mem_trim+0x20c>)
 8011a6c:	4842      	ldr	r0, [pc, #264]	@ (8011b78 <mem_trim+0x200>)
 8011a6e:	f00b fd0b 	bl	801d488 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	881b      	ldrh	r3, [r3, #0]
 8011a76:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011a78:	8afa      	ldrh	r2, [r7, #22]
 8011a7a:	8bfb      	ldrh	r3, [r7, #30]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	3308      	adds	r3, #8
 8011a82:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011a84:	4b40      	ldr	r3, [pc, #256]	@ (8011b88 <mem_trim+0x210>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	693a      	ldr	r2, [r7, #16]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d106      	bne.n	8011a9c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011a8e:	89fb      	ldrh	r3, [r7, #14]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7ff fd8d 	bl	80115b0 <ptr_to_mem>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4a3b      	ldr	r2, [pc, #236]	@ (8011b88 <mem_trim+0x210>)
 8011a9a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011a9c:	89fb      	ldrh	r3, [r7, #14]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7ff fd86 	bl	80115b0 <ptr_to_mem>
 8011aa4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	89ba      	ldrh	r2, [r7, #12]
 8011ab0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	8afa      	ldrh	r2, [r7, #22]
 8011ab6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	89fa      	ldrh	r2, [r7, #14]
 8011abc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011ac6:	d047      	beq.n	8011b58 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	881b      	ldrh	r3, [r3, #0]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f7ff fd6f 	bl	80115b0 <ptr_to_mem>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	89fb      	ldrh	r3, [r7, #14]
 8011ad6:	8053      	strh	r3, [r2, #2]
 8011ad8:	e03e      	b.n	8011b58 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011ada:	8bfb      	ldrh	r3, [r7, #30]
 8011adc:	f103 0214 	add.w	r2, r3, #20
 8011ae0:	8abb      	ldrh	r3, [r7, #20]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d838      	bhi.n	8011b58 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011ae6:	8afa      	ldrh	r2, [r7, #22]
 8011ae8:	8bfb      	ldrh	r3, [r7, #30]
 8011aea:	4413      	add	r3, r2
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	3308      	adds	r3, #8
 8011af0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011af2:	69bb      	ldr	r3, [r7, #24]
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011afa:	d106      	bne.n	8011b0a <mem_trim+0x192>
 8011afc:	4b1c      	ldr	r3, [pc, #112]	@ (8011b70 <mem_trim+0x1f8>)
 8011afe:	f240 3216 	movw	r2, #790	@ 0x316
 8011b02:	4920      	ldr	r1, [pc, #128]	@ (8011b84 <mem_trim+0x20c>)
 8011b04:	481c      	ldr	r0, [pc, #112]	@ (8011b78 <mem_trim+0x200>)
 8011b06:	f00b fcbf 	bl	801d488 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011b0a:	89fb      	ldrh	r3, [r7, #14]
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7ff fd4f 	bl	80115b0 <ptr_to_mem>
 8011b12:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011b14:	4b1c      	ldr	r3, [pc, #112]	@ (8011b88 <mem_trim+0x210>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	693a      	ldr	r2, [r7, #16]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d202      	bcs.n	8011b24 <mem_trim+0x1ac>
      lfree = mem2;
 8011b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8011b88 <mem_trim+0x210>)
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	2200      	movs	r2, #0
 8011b28:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	881a      	ldrh	r2, [r3, #0]
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	8afa      	ldrh	r2, [r7, #22]
 8011b36:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	89fa      	ldrh	r2, [r7, #14]
 8011b3c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	881b      	ldrh	r3, [r3, #0]
 8011b42:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b46:	d007      	beq.n	8011b58 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff fd2f 	bl	80115b0 <ptr_to_mem>
 8011b52:	4602      	mov	r2, r0
 8011b54:	89fb      	ldrh	r3, [r7, #14]
 8011b56:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011b58:	4809      	ldr	r0, [pc, #36]	@ (8011b80 <mem_trim+0x208>)
 8011b5a:	f00a feec 	bl	801c936 <sys_mutex_unlock>
  return rmem;
 8011b5e:	687b      	ldr	r3, [r7, #4]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3720      	adds	r7, #32
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}
 8011b68:	2000c2ac 	.word	0x2000c2ac
 8011b6c:	2000c2b0 	.word	0x2000c2b0
 8011b70:	08020858 	.word	0x08020858
 8011b74:	080209e4 	.word	0x080209e4
 8011b78:	080208a0 	.word	0x080208a0
 8011b7c:	080209fc 	.word	0x080209fc
 8011b80:	2000c2b4 	.word	0x2000c2b4
 8011b84:	08020a1c 	.word	0x08020a1c
 8011b88:	2000c2b8 	.word	0x2000c2b8

08011b8c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	4603      	mov	r3, r0
 8011b94:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011b96:	88fb      	ldrh	r3, [r7, #6]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <mem_malloc+0x14>
    return NULL;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	e0e2      	b.n	8011d66 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011ba0:	88fb      	ldrh	r3, [r7, #6]
 8011ba2:	3303      	adds	r3, #3
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	f023 0303 	bic.w	r3, r3, #3
 8011baa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011bac:	8bbb      	ldrh	r3, [r7, #28]
 8011bae:	2b0b      	cmp	r3, #11
 8011bb0:	d801      	bhi.n	8011bb6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011bb2:	230c      	movs	r3, #12
 8011bb4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011bb6:	8bbb      	ldrh	r3, [r7, #28]
 8011bb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011bbc:	d803      	bhi.n	8011bc6 <mem_malloc+0x3a>
 8011bbe:	8bba      	ldrh	r2, [r7, #28]
 8011bc0:	88fb      	ldrh	r3, [r7, #6]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d201      	bcs.n	8011bca <mem_malloc+0x3e>
    return NULL;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e0cd      	b.n	8011d66 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011bca:	4869      	ldr	r0, [pc, #420]	@ (8011d70 <mem_malloc+0x1e4>)
 8011bcc:	f00a fea4 	bl	801c918 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011bd0:	4b68      	ldr	r3, [pc, #416]	@ (8011d74 <mem_malloc+0x1e8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7ff fcfd 	bl	80115d4 <mem_to_ptr>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	83fb      	strh	r3, [r7, #30]
 8011bde:	e0b7      	b.n	8011d50 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011be0:	8bfb      	ldrh	r3, [r7, #30]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff fce4 	bl	80115b0 <ptr_to_mem>
 8011be8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	791b      	ldrb	r3, [r3, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f040 80a7 	bne.w	8011d42 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	881b      	ldrh	r3, [r3, #0]
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	8bfb      	ldrh	r3, [r7, #30]
 8011bfc:	1ad3      	subs	r3, r2, r3
 8011bfe:	f1a3 0208 	sub.w	r2, r3, #8
 8011c02:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011c04:	429a      	cmp	r2, r3
 8011c06:	f0c0 809c 	bcc.w	8011d42 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	461a      	mov	r2, r3
 8011c10:	8bfb      	ldrh	r3, [r7, #30]
 8011c12:	1ad3      	subs	r3, r2, r3
 8011c14:	f1a3 0208 	sub.w	r2, r3, #8
 8011c18:	8bbb      	ldrh	r3, [r7, #28]
 8011c1a:	3314      	adds	r3, #20
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d333      	bcc.n	8011c88 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011c20:	8bfa      	ldrh	r2, [r7, #30]
 8011c22:	8bbb      	ldrh	r3, [r7, #28]
 8011c24:	4413      	add	r3, r2
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	3308      	adds	r3, #8
 8011c2a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011c2c:	8a7b      	ldrh	r3, [r7, #18]
 8011c2e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c32:	d106      	bne.n	8011c42 <mem_malloc+0xb6>
 8011c34:	4b50      	ldr	r3, [pc, #320]	@ (8011d78 <mem_malloc+0x1ec>)
 8011c36:	f240 3287 	movw	r2, #903	@ 0x387
 8011c3a:	4950      	ldr	r1, [pc, #320]	@ (8011d7c <mem_malloc+0x1f0>)
 8011c3c:	4850      	ldr	r0, [pc, #320]	@ (8011d80 <mem_malloc+0x1f4>)
 8011c3e:	f00b fc23 	bl	801d488 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011c42:	8a7b      	ldrh	r3, [r7, #18]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7ff fcb3 	bl	80115b0 <ptr_to_mem>
 8011c4a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	881a      	ldrh	r2, [r3, #0]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	8bfa      	ldrh	r2, [r7, #30]
 8011c5e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	8a7a      	ldrh	r2, [r7, #18]
 8011c64:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c74:	d00b      	beq.n	8011c8e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7ff fc98 	bl	80115b0 <ptr_to_mem>
 8011c80:	4602      	mov	r2, r0
 8011c82:	8a7b      	ldrh	r3, [r7, #18]
 8011c84:	8053      	strh	r3, [r2, #2]
 8011c86:	e002      	b.n	8011c8e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011c8e:	4b39      	ldr	r3, [pc, #228]	@ (8011d74 <mem_malloc+0x1e8>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	697a      	ldr	r2, [r7, #20]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d127      	bne.n	8011ce8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011c98:	4b36      	ldr	r3, [pc, #216]	@ (8011d74 <mem_malloc+0x1e8>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011c9e:	e005      	b.n	8011cac <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	881b      	ldrh	r3, [r3, #0]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff fc83 	bl	80115b0 <ptr_to_mem>
 8011caa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011cac:	69bb      	ldr	r3, [r7, #24]
 8011cae:	791b      	ldrb	r3, [r3, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d004      	beq.n	8011cbe <mem_malloc+0x132>
 8011cb4:	4b33      	ldr	r3, [pc, #204]	@ (8011d84 <mem_malloc+0x1f8>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	69ba      	ldr	r2, [r7, #24]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d1f0      	bne.n	8011ca0 <mem_malloc+0x114>
          }
          lfree = cur;
 8011cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8011d74 <mem_malloc+0x1e8>)
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8011d74 <mem_malloc+0x1e8>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8011d84 <mem_malloc+0x1f8>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d00b      	beq.n	8011ce8 <mem_malloc+0x15c>
 8011cd0:	4b28      	ldr	r3, [pc, #160]	@ (8011d74 <mem_malloc+0x1e8>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	791b      	ldrb	r3, [r3, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d006      	beq.n	8011ce8 <mem_malloc+0x15c>
 8011cda:	4b27      	ldr	r3, [pc, #156]	@ (8011d78 <mem_malloc+0x1ec>)
 8011cdc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011ce0:	4929      	ldr	r1, [pc, #164]	@ (8011d88 <mem_malloc+0x1fc>)
 8011ce2:	4827      	ldr	r0, [pc, #156]	@ (8011d80 <mem_malloc+0x1f4>)
 8011ce4:	f00b fbd0 	bl	801d488 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011ce8:	4821      	ldr	r0, [pc, #132]	@ (8011d70 <mem_malloc+0x1e4>)
 8011cea:	f00a fe24 	bl	801c936 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011cee:	8bba      	ldrh	r2, [r7, #28]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	3308      	adds	r3, #8
 8011cf6:	4a23      	ldr	r2, [pc, #140]	@ (8011d84 <mem_malloc+0x1f8>)
 8011cf8:	6812      	ldr	r2, [r2, #0]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d906      	bls.n	8011d0c <mem_malloc+0x180>
 8011cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8011d78 <mem_malloc+0x1ec>)
 8011d00:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011d04:	4921      	ldr	r1, [pc, #132]	@ (8011d8c <mem_malloc+0x200>)
 8011d06:	481e      	ldr	r0, [pc, #120]	@ (8011d80 <mem_malloc+0x1f4>)
 8011d08:	f00b fbbe 	bl	801d488 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	f003 0303 	and.w	r3, r3, #3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d006      	beq.n	8011d24 <mem_malloc+0x198>
 8011d16:	4b18      	ldr	r3, [pc, #96]	@ (8011d78 <mem_malloc+0x1ec>)
 8011d18:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011d1c:	491c      	ldr	r1, [pc, #112]	@ (8011d90 <mem_malloc+0x204>)
 8011d1e:	4818      	ldr	r0, [pc, #96]	@ (8011d80 <mem_malloc+0x1f4>)
 8011d20:	f00b fbb2 	bl	801d488 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	f003 0303 	and.w	r3, r3, #3
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d006      	beq.n	8011d3c <mem_malloc+0x1b0>
 8011d2e:	4b12      	ldr	r3, [pc, #72]	@ (8011d78 <mem_malloc+0x1ec>)
 8011d30:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011d34:	4917      	ldr	r1, [pc, #92]	@ (8011d94 <mem_malloc+0x208>)
 8011d36:	4812      	ldr	r0, [pc, #72]	@ (8011d80 <mem_malloc+0x1f4>)
 8011d38:	f00b fba6 	bl	801d488 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	3308      	adds	r3, #8
 8011d40:	e011      	b.n	8011d66 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011d42:	8bfb      	ldrh	r3, [r7, #30]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7ff fc33 	bl	80115b0 <ptr_to_mem>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011d50:	8bfa      	ldrh	r2, [r7, #30]
 8011d52:	8bbb      	ldrh	r3, [r7, #28]
 8011d54:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	f4ff af41 	bcc.w	8011be0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011d5e:	4804      	ldr	r0, [pc, #16]	@ (8011d70 <mem_malloc+0x1e4>)
 8011d60:	f00a fde9 	bl	801c936 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011d64:	2300      	movs	r3, #0
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3720      	adds	r7, #32
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	2000c2b4 	.word	0x2000c2b4
 8011d74:	2000c2b8 	.word	0x2000c2b8
 8011d78:	08020858 	.word	0x08020858
 8011d7c:	08020a1c 	.word	0x08020a1c
 8011d80:	080208a0 	.word	0x080208a0
 8011d84:	2000c2b0 	.word	0x2000c2b0
 8011d88:	08020a30 	.word	0x08020a30
 8011d8c:	08020a4c 	.word	0x08020a4c
 8011d90:	08020a7c 	.word	0x08020a7c
 8011d94:	08020aac 	.word	0x08020aac

08011d98 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	689b      	ldr	r3, [r3, #8]
 8011da4:	2200      	movs	r2, #0
 8011da6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	3303      	adds	r3, #3
 8011dae:	f023 0303 	bic.w	r3, r3, #3
 8011db2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011db4:	2300      	movs	r3, #0
 8011db6:	60fb      	str	r3, [r7, #12]
 8011db8:	e011      	b.n	8011dde <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	3301      	adds	r3, #1
 8011ddc:	60fb      	str	r3, [r7, #12]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	885b      	ldrh	r3, [r3, #2]
 8011de2:	461a      	mov	r2, r3
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	4293      	cmp	r3, r2
 8011de8:	dbe7      	blt.n	8011dba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011dea:	bf00      	nop
 8011dec:	bf00      	nop
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr

08011df8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011dfe:	2300      	movs	r3, #0
 8011e00:	80fb      	strh	r3, [r7, #6]
 8011e02:	e009      	b.n	8011e18 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011e04:	88fb      	ldrh	r3, [r7, #6]
 8011e06:	4a08      	ldr	r2, [pc, #32]	@ (8011e28 <memp_init+0x30>)
 8011e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff ffc3 	bl	8011d98 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011e12:	88fb      	ldrh	r3, [r7, #6]
 8011e14:	3301      	adds	r3, #1
 8011e16:	80fb      	strh	r3, [r7, #6]
 8011e18:	88fb      	ldrh	r3, [r7, #6]
 8011e1a:	2b0c      	cmp	r3, #12
 8011e1c:	d9f2      	bls.n	8011e04 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011e1e:	bf00      	nop
 8011e20:	bf00      	nop
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	080249a8 	.word	0x080249a8

08011e2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011e34:	f00a fdb2 	bl	801c99c <sys_arch_protect>
 8011e38:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	689b      	ldr	r3, [r3, #8]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d015      	beq.n	8011e74 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	689b      	ldr	r3, [r3, #8]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	6812      	ldr	r2, [r2, #0]
 8011e50:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	f003 0303 	and.w	r3, r3, #3
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d006      	beq.n	8011e6a <do_memp_malloc_pool+0x3e>
 8011e5c:	4b09      	ldr	r3, [pc, #36]	@ (8011e84 <do_memp_malloc_pool+0x58>)
 8011e5e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011e62:	4909      	ldr	r1, [pc, #36]	@ (8011e88 <do_memp_malloc_pool+0x5c>)
 8011e64:	4809      	ldr	r0, [pc, #36]	@ (8011e8c <do_memp_malloc_pool+0x60>)
 8011e66:	f00b fb0f 	bl	801d488 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f00a fda4 	bl	801c9b8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	e003      	b.n	8011e7c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f00a fd9f 	bl	801c9b8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3710      	adds	r7, #16
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	08020ad0 	.word	0x08020ad0
 8011e88:	08020b00 	.word	0x08020b00
 8011e8c:	08020b24 	.word	0x08020b24

08011e90 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d106      	bne.n	8011eac <memp_malloc_pool+0x1c>
 8011e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8011ec8 <memp_malloc_pool+0x38>)
 8011ea0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8011ea4:	4909      	ldr	r1, [pc, #36]	@ (8011ecc <memp_malloc_pool+0x3c>)
 8011ea6:	480a      	ldr	r0, [pc, #40]	@ (8011ed0 <memp_malloc_pool+0x40>)
 8011ea8:	f00b faee 	bl	801d488 <iprintf>
  if (desc == NULL) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d101      	bne.n	8011eb6 <memp_malloc_pool+0x26>
    return NULL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	e003      	b.n	8011ebe <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011eb6:	6878      	ldr	r0, [r7, #4]
 8011eb8:	f7ff ffb8 	bl	8011e2c <do_memp_malloc_pool>
 8011ebc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3708      	adds	r7, #8
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	08020ad0 	.word	0x08020ad0
 8011ecc:	08020b4c 	.word	0x08020b4c
 8011ed0:	08020b24 	.word	0x08020b24

08011ed4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b084      	sub	sp, #16
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	4603      	mov	r3, r0
 8011edc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011ede:	79fb      	ldrb	r3, [r7, #7]
 8011ee0:	2b0c      	cmp	r3, #12
 8011ee2:	d908      	bls.n	8011ef6 <memp_malloc+0x22>
 8011ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8011f10 <memp_malloc+0x3c>)
 8011ee6:	f240 1257 	movw	r2, #343	@ 0x157
 8011eea:	490a      	ldr	r1, [pc, #40]	@ (8011f14 <memp_malloc+0x40>)
 8011eec:	480a      	ldr	r0, [pc, #40]	@ (8011f18 <memp_malloc+0x44>)
 8011eee:	f00b facb 	bl	801d488 <iprintf>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	e008      	b.n	8011f08 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	4a08      	ldr	r2, [pc, #32]	@ (8011f1c <memp_malloc+0x48>)
 8011efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff ff94 	bl	8011e2c <do_memp_malloc_pool>
 8011f04:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011f06:	68fb      	ldr	r3, [r7, #12]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	08020ad0 	.word	0x08020ad0
 8011f14:	08020b60 	.word	0x08020b60
 8011f18:	08020b24 	.word	0x08020b24
 8011f1c:	080249a8 	.word	0x080249a8

08011f20 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	f003 0303 	and.w	r3, r3, #3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d006      	beq.n	8011f42 <do_memp_free_pool+0x22>
 8011f34:	4b0d      	ldr	r3, [pc, #52]	@ (8011f6c <do_memp_free_pool+0x4c>)
 8011f36:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8011f3a:	490d      	ldr	r1, [pc, #52]	@ (8011f70 <do_memp_free_pool+0x50>)
 8011f3c:	480d      	ldr	r0, [pc, #52]	@ (8011f74 <do_memp_free_pool+0x54>)
 8011f3e:	f00b faa3 	bl	801d488 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8011f46:	f00a fd29 	bl	801c99c <sys_arch_protect>
 8011f4a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	689b      	ldr	r3, [r3, #8]
 8011f5a:	68fa      	ldr	r2, [r7, #12]
 8011f5c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8011f5e:	68b8      	ldr	r0, [r7, #8]
 8011f60:	f00a fd2a 	bl	801c9b8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8011f64:	bf00      	nop
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	08020ad0 	.word	0x08020ad0
 8011f70:	08020b80 	.word	0x08020b80
 8011f74:	08020b24 	.word	0x08020b24

08011f78 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <memp_free_pool+0x1e>
 8011f88:	4b0a      	ldr	r3, [pc, #40]	@ (8011fb4 <memp_free_pool+0x3c>)
 8011f8a:	f240 1295 	movw	r2, #405	@ 0x195
 8011f8e:	490a      	ldr	r1, [pc, #40]	@ (8011fb8 <memp_free_pool+0x40>)
 8011f90:	480a      	ldr	r0, [pc, #40]	@ (8011fbc <memp_free_pool+0x44>)
 8011f92:	f00b fa79 	bl	801d488 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d007      	beq.n	8011fac <memp_free_pool+0x34>
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d004      	beq.n	8011fac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011fa2:	6839      	ldr	r1, [r7, #0]
 8011fa4:	6878      	ldr	r0, [r7, #4]
 8011fa6:	f7ff ffbb 	bl	8011f20 <do_memp_free_pool>
 8011faa:	e000      	b.n	8011fae <memp_free_pool+0x36>
    return;
 8011fac:	bf00      	nop
}
 8011fae:	3708      	adds	r7, #8
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	08020ad0 	.word	0x08020ad0
 8011fb8:	08020b4c 	.word	0x08020b4c
 8011fbc:	08020b24 	.word	0x08020b24

08011fc0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	6039      	str	r1, [r7, #0]
 8011fca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011fcc:	79fb      	ldrb	r3, [r7, #7]
 8011fce:	2b0c      	cmp	r3, #12
 8011fd0:	d907      	bls.n	8011fe2 <memp_free+0x22>
 8011fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8012004 <memp_free+0x44>)
 8011fd4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8011fd8:	490b      	ldr	r1, [pc, #44]	@ (8012008 <memp_free+0x48>)
 8011fda:	480c      	ldr	r0, [pc, #48]	@ (801200c <memp_free+0x4c>)
 8011fdc:	f00b fa54 	bl	801d488 <iprintf>
 8011fe0:	e00c      	b.n	8011ffc <memp_free+0x3c>

  if (mem == NULL) {
 8011fe2:	683b      	ldr	r3, [r7, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d008      	beq.n	8011ffa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011fe8:	79fb      	ldrb	r3, [r7, #7]
 8011fea:	4a09      	ldr	r2, [pc, #36]	@ (8012010 <memp_free+0x50>)
 8011fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ff0:	6839      	ldr	r1, [r7, #0]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7ff ff94 	bl	8011f20 <do_memp_free_pool>
 8011ff8:	e000      	b.n	8011ffc <memp_free+0x3c>
    return;
 8011ffa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011ffc:	3708      	adds	r7, #8
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	08020ad0 	.word	0x08020ad0
 8012008:	08020ba0 	.word	0x08020ba0
 801200c:	08020b24 	.word	0x08020b24
 8012010:	080249a8 	.word	0x080249a8

08012014 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012014:	b480      	push	{r7}
 8012016:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012018:	bf00      	nop
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr
	...

08012024 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b086      	sub	sp, #24
 8012028:	af00      	add	r7, sp, #0
 801202a:	60f8      	str	r0, [r7, #12]
 801202c:	60b9      	str	r1, [r7, #8]
 801202e:	607a      	str	r2, [r7, #4]
 8012030:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d108      	bne.n	801204a <netif_add+0x26>
 8012038:	4b57      	ldr	r3, [pc, #348]	@ (8012198 <netif_add+0x174>)
 801203a:	f240 1227 	movw	r2, #295	@ 0x127
 801203e:	4957      	ldr	r1, [pc, #348]	@ (801219c <netif_add+0x178>)
 8012040:	4857      	ldr	r0, [pc, #348]	@ (80121a0 <netif_add+0x17c>)
 8012042:	f00b fa21 	bl	801d488 <iprintf>
 8012046:	2300      	movs	r3, #0
 8012048:	e0a2      	b.n	8012190 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801204c:	2b00      	cmp	r3, #0
 801204e:	d108      	bne.n	8012062 <netif_add+0x3e>
 8012050:	4b51      	ldr	r3, [pc, #324]	@ (8012198 <netif_add+0x174>)
 8012052:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012056:	4953      	ldr	r1, [pc, #332]	@ (80121a4 <netif_add+0x180>)
 8012058:	4851      	ldr	r0, [pc, #324]	@ (80121a0 <netif_add+0x17c>)
 801205a:	f00b fa15 	bl	801d488 <iprintf>
 801205e:	2300      	movs	r3, #0
 8012060:	e096      	b.n	8012190 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d101      	bne.n	801206c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012068:	4b4f      	ldr	r3, [pc, #316]	@ (80121a8 <netif_add+0x184>)
 801206a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d101      	bne.n	8012076 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012072:	4b4d      	ldr	r3, [pc, #308]	@ (80121a8 <netif_add+0x184>)
 8012074:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d101      	bne.n	8012080 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801207c:	4b4a      	ldr	r3, [pc, #296]	@ (80121a8 <netif_add+0x184>)
 801207e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2200      	movs	r2, #0
 8012084:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2200      	movs	r2, #0
 801208a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2200      	movs	r2, #0
 8012090:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	4a45      	ldr	r2, [pc, #276]	@ (80121ac <netif_add+0x188>)
 8012096:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2200      	movs	r2, #0
 801209c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	2200      	movs	r2, #0
 80120a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	2200      	movs	r2, #0
 80120aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	6a3a      	ldr	r2, [r7, #32]
 80120b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80120b2:	4b3f      	ldr	r3, [pc, #252]	@ (80121b0 <netif_add+0x18c>)
 80120b4:	781a      	ldrb	r2, [r3, #0]
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	68b9      	ldr	r1, [r7, #8]
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f000 f913 	bl	80122f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80120ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	4798      	blx	r3
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d001      	beq.n	80120de <netif_add+0xba>
    return NULL;
 80120da:	2300      	movs	r3, #0
 80120dc:	e058      	b.n	8012190 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120e4:	2bff      	cmp	r3, #255	@ 0xff
 80120e6:	d103      	bne.n	80120f0 <netif_add+0xcc>
        netif->num = 0;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80120f4:	4b2f      	ldr	r3, [pc, #188]	@ (80121b4 <netif_add+0x190>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	617b      	str	r3, [r7, #20]
 80120fa:	e02b      	b.n	8012154 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80120fc:	697a      	ldr	r2, [r7, #20]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	429a      	cmp	r2, r3
 8012102:	d106      	bne.n	8012112 <netif_add+0xee>
 8012104:	4b24      	ldr	r3, [pc, #144]	@ (8012198 <netif_add+0x174>)
 8012106:	f240 128b 	movw	r2, #395	@ 0x18b
 801210a:	492b      	ldr	r1, [pc, #172]	@ (80121b8 <netif_add+0x194>)
 801210c:	4824      	ldr	r0, [pc, #144]	@ (80121a0 <netif_add+0x17c>)
 801210e:	f00b f9bb 	bl	801d488 <iprintf>
        num_netifs++;
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	3301      	adds	r3, #1
 8012116:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	2bff      	cmp	r3, #255	@ 0xff
 801211c:	dd06      	ble.n	801212c <netif_add+0x108>
 801211e:	4b1e      	ldr	r3, [pc, #120]	@ (8012198 <netif_add+0x174>)
 8012120:	f240 128d 	movw	r2, #397	@ 0x18d
 8012124:	4925      	ldr	r1, [pc, #148]	@ (80121bc <netif_add+0x198>)
 8012126:	481e      	ldr	r0, [pc, #120]	@ (80121a0 <netif_add+0x17c>)
 8012128:	f00b f9ae 	bl	801d488 <iprintf>
        if (netif2->num == netif->num) {
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012138:	429a      	cmp	r2, r3
 801213a:	d108      	bne.n	801214e <netif_add+0x12a>
          netif->num++;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012142:	3301      	adds	r3, #1
 8012144:	b2da      	uxtb	r2, r3
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801214c:	e005      	b.n	801215a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	617b      	str	r3, [r7, #20]
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1d0      	bne.n	80120fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1be      	bne.n	80120de <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012166:	2bfe      	cmp	r3, #254	@ 0xfe
 8012168:	d103      	bne.n	8012172 <netif_add+0x14e>
    netif_num = 0;
 801216a:	4b11      	ldr	r3, [pc, #68]	@ (80121b0 <netif_add+0x18c>)
 801216c:	2200      	movs	r2, #0
 801216e:	701a      	strb	r2, [r3, #0]
 8012170:	e006      	b.n	8012180 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012178:	3301      	adds	r3, #1
 801217a:	b2da      	uxtb	r2, r3
 801217c:	4b0c      	ldr	r3, [pc, #48]	@ (80121b0 <netif_add+0x18c>)
 801217e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012180:	4b0c      	ldr	r3, [pc, #48]	@ (80121b4 <netif_add+0x190>)
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012188:	4a0a      	ldr	r2, [pc, #40]	@ (80121b4 <netif_add+0x190>)
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801218e:	68fb      	ldr	r3, [r7, #12]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3718      	adds	r7, #24
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	08020bbc 	.word	0x08020bbc
 801219c:	08020c50 	.word	0x08020c50
 80121a0:	08020c0c 	.word	0x08020c0c
 80121a4:	08020c6c 	.word	0x08020c6c
 80121a8:	08024a1c 	.word	0x08024a1c
 80121ac:	080125cf 	.word	0x080125cf
 80121b0:	2000f390 	.word	0x2000f390
 80121b4:	2000f388 	.word	0x2000f388
 80121b8:	08020c90 	.word	0x08020c90
 80121bc:	08020ca4 	.word	0x08020ca4

080121c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80121ca:	6839      	ldr	r1, [r7, #0]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f002 fe91 	bl	8014ef4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80121d2:	6839      	ldr	r1, [r7, #0]
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f007 ff27 	bl	801a028 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80121da:	bf00      	nop
 80121dc:	3708      	adds	r7, #8
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
	...

080121e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d106      	bne.n	8012204 <netif_do_set_ipaddr+0x20>
 80121f6:	4b1d      	ldr	r3, [pc, #116]	@ (801226c <netif_do_set_ipaddr+0x88>)
 80121f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80121fc:	491c      	ldr	r1, [pc, #112]	@ (8012270 <netif_do_set_ipaddr+0x8c>)
 80121fe:	481d      	ldr	r0, [pc, #116]	@ (8012274 <netif_do_set_ipaddr+0x90>)
 8012200:	f00b f942 	bl	801d488 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d106      	bne.n	8012218 <netif_do_set_ipaddr+0x34>
 801220a:	4b18      	ldr	r3, [pc, #96]	@ (801226c <netif_do_set_ipaddr+0x88>)
 801220c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012210:	4917      	ldr	r1, [pc, #92]	@ (8012270 <netif_do_set_ipaddr+0x8c>)
 8012212:	4818      	ldr	r0, [pc, #96]	@ (8012274 <netif_do_set_ipaddr+0x90>)
 8012214:	f00b f938 	bl	801d488 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	3304      	adds	r3, #4
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	429a      	cmp	r2, r3
 8012224:	d01c      	beq.n	8012260 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	3304      	adds	r3, #4
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012236:	f107 0314 	add.w	r3, r7, #20
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff ffbf 	bl	80121c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d002      	beq.n	801224e <netif_do_set_ipaddr+0x6a>
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	e000      	b.n	8012250 <netif_do_set_ipaddr+0x6c>
 801224e:	2300      	movs	r3, #0
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012254:	2101      	movs	r1, #1
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f000 f8d2 	bl	8012400 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801225c:	2301      	movs	r3, #1
 801225e:	e000      	b.n	8012262 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3718      	adds	r7, #24
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	08020bbc 	.word	0x08020bbc
 8012270:	08020cd4 	.word	0x08020cd4
 8012274:	08020c0c 	.word	0x08020c0c

08012278 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012278:	b480      	push	{r7}
 801227a:	b085      	sub	sp, #20
 801227c:	af00      	add	r7, sp, #0
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012284:	68bb      	ldr	r3, [r7, #8]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	3308      	adds	r3, #8
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d00a      	beq.n	80122a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d002      	beq.n	801229e <netif_do_set_netmask+0x26>
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	e000      	b.n	80122a0 <netif_do_set_netmask+0x28>
 801229e:	2300      	movs	r3, #0
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80122a4:	2301      	movs	r3, #1
 80122a6:	e000      	b.n	80122aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3714      	adds	r7, #20
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80122b6:	b480      	push	{r7}
 80122b8:	b085      	sub	sp, #20
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	60f8      	str	r0, [r7, #12]
 80122be:	60b9      	str	r1, [r7, #8]
 80122c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	330c      	adds	r3, #12
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d00a      	beq.n	80122e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <netif_do_set_gw+0x26>
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	e000      	b.n	80122de <netif_do_set_gw+0x28>
 80122dc:	2300      	movs	r3, #0
 80122de:	68fa      	ldr	r2, [r7, #12]
 80122e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80122e2:	2301      	movs	r3, #1
 80122e4:	e000      	b.n	80122e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80122e6:	2300      	movs	r3, #0
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3714      	adds	r7, #20
 80122ec:	46bd      	mov	sp, r7
 80122ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f2:	4770      	bx	lr

080122f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b088      	sub	sp, #32
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
 8012300:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012302:	2300      	movs	r3, #0
 8012304:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012306:	2300      	movs	r3, #0
 8012308:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d101      	bne.n	8012314 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012310:	4b1c      	ldr	r3, [pc, #112]	@ (8012384 <netif_set_addr+0x90>)
 8012312:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d101      	bne.n	801231e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801231a:	4b1a      	ldr	r3, [pc, #104]	@ (8012384 <netif_set_addr+0x90>)
 801231c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d101      	bne.n	8012328 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012324:	4b17      	ldr	r3, [pc, #92]	@ (8012384 <netif_set_addr+0x90>)
 8012326:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d003      	beq.n	8012336 <netif_set_addr+0x42>
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d101      	bne.n	801233a <netif_set_addr+0x46>
 8012336:	2301      	movs	r3, #1
 8012338:	e000      	b.n	801233c <netif_set_addr+0x48>
 801233a:	2300      	movs	r3, #0
 801233c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d006      	beq.n	8012352 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012344:	f107 0310 	add.w	r3, r7, #16
 8012348:	461a      	mov	r2, r3
 801234a:	68b9      	ldr	r1, [r7, #8]
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7ff ff49 	bl	80121e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012352:	69fa      	ldr	r2, [r7, #28]
 8012354:	6879      	ldr	r1, [r7, #4]
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f7ff ff8e 	bl	8012278 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801235c:	69ba      	ldr	r2, [r7, #24]
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f7ff ffa8 	bl	80122b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d106      	bne.n	801237a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801236c:	f107 0310 	add.w	r3, r7, #16
 8012370:	461a      	mov	r2, r3
 8012372:	68b9      	ldr	r1, [r7, #8]
 8012374:	68f8      	ldr	r0, [r7, #12]
 8012376:	f7ff ff35 	bl	80121e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801237a:	bf00      	nop
 801237c:	3720      	adds	r7, #32
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	08024a1c 	.word	0x08024a1c

08012388 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012388:	b480      	push	{r7}
 801238a:	b083      	sub	sp, #12
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012390:	4a04      	ldr	r2, [pc, #16]	@ (80123a4 <netif_set_default+0x1c>)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012396:	bf00      	nop
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	2000f38c 	.word	0x2000f38c

080123a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d107      	bne.n	80123c6 <netif_set_up+0x1e>
 80123b6:	4b0f      	ldr	r3, [pc, #60]	@ (80123f4 <netif_set_up+0x4c>)
 80123b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80123bc:	490e      	ldr	r1, [pc, #56]	@ (80123f8 <netif_set_up+0x50>)
 80123be:	480f      	ldr	r0, [pc, #60]	@ (80123fc <netif_set_up+0x54>)
 80123c0:	f00b f862 	bl	801d488 <iprintf>
 80123c4:	e013      	b.n	80123ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123cc:	f003 0301 	and.w	r3, r3, #1
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d10c      	bne.n	80123ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80123da:	f043 0301 	orr.w	r3, r3, #1
 80123de:	b2da      	uxtb	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80123e6:	2103      	movs	r1, #3
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 f809 	bl	8012400 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80123ee:	3708      	adds	r7, #8
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	08020bbc 	.word	0x08020bbc
 80123f8:	08020d44 	.word	0x08020d44
 80123fc:	08020c0c 	.word	0x08020c0c

08012400 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d106      	bne.n	8012420 <netif_issue_reports+0x20>
 8012412:	4b18      	ldr	r3, [pc, #96]	@ (8012474 <netif_issue_reports+0x74>)
 8012414:	f240 326d 	movw	r2, #877	@ 0x36d
 8012418:	4917      	ldr	r1, [pc, #92]	@ (8012478 <netif_issue_reports+0x78>)
 801241a:	4818      	ldr	r0, [pc, #96]	@ (801247c <netif_issue_reports+0x7c>)
 801241c:	f00b f834 	bl	801d488 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012426:	f003 0304 	and.w	r3, r3, #4
 801242a:	2b00      	cmp	r3, #0
 801242c:	d01e      	beq.n	801246c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012434:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012438:	2b00      	cmp	r3, #0
 801243a:	d017      	beq.n	801246c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801243c:	78fb      	ldrb	r3, [r7, #3]
 801243e:	f003 0301 	and.w	r3, r3, #1
 8012442:	2b00      	cmp	r3, #0
 8012444:	d013      	beq.n	801246e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	3304      	adds	r3, #4
 801244a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801244c:	2b00      	cmp	r3, #0
 801244e:	d00e      	beq.n	801246e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012456:	f003 0308 	and.w	r3, r3, #8
 801245a:	2b00      	cmp	r3, #0
 801245c:	d007      	beq.n	801246e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	3304      	adds	r3, #4
 8012462:	4619      	mov	r1, r3
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f008 fd49 	bl	801aefc <etharp_request>
 801246a:	e000      	b.n	801246e <netif_issue_reports+0x6e>
    return;
 801246c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}
 8012474:	08020bbc 	.word	0x08020bbc
 8012478:	08020d60 	.word	0x08020d60
 801247c:	08020c0c 	.word	0x08020c0c

08012480 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d107      	bne.n	801249e <netif_set_down+0x1e>
 801248e:	4b12      	ldr	r3, [pc, #72]	@ (80124d8 <netif_set_down+0x58>)
 8012490:	f240 329b 	movw	r2, #923	@ 0x39b
 8012494:	4911      	ldr	r1, [pc, #68]	@ (80124dc <netif_set_down+0x5c>)
 8012496:	4812      	ldr	r0, [pc, #72]	@ (80124e0 <netif_set_down+0x60>)
 8012498:	f00a fff6 	bl	801d488 <iprintf>
 801249c:	e019      	b.n	80124d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124a4:	f003 0301 	and.w	r3, r3, #1
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d012      	beq.n	80124d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124b2:	f023 0301 	bic.w	r3, r3, #1
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80124c4:	f003 0308 	and.w	r3, r3, #8
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d002      	beq.n	80124d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f008 f8d3 	bl	801a678 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	08020bbc 	.word	0x08020bbc
 80124dc:	08020d84 	.word	0x08020d84
 80124e0:	08020c0c 	.word	0x08020c0c

080124e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b082      	sub	sp, #8
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d107      	bne.n	8012502 <netif_set_link_up+0x1e>
 80124f2:	4b13      	ldr	r3, [pc, #76]	@ (8012540 <netif_set_link_up+0x5c>)
 80124f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80124f8:	4912      	ldr	r1, [pc, #72]	@ (8012544 <netif_set_link_up+0x60>)
 80124fa:	4813      	ldr	r0, [pc, #76]	@ (8012548 <netif_set_link_up+0x64>)
 80124fc:	f00a ffc4 	bl	801d488 <iprintf>
 8012500:	e01b      	b.n	801253a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012508:	f003 0304 	and.w	r3, r3, #4
 801250c:	2b00      	cmp	r3, #0
 801250e:	d114      	bne.n	801253a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012516:	f043 0304 	orr.w	r3, r3, #4
 801251a:	b2da      	uxtb	r2, r3
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012522:	2103      	movs	r1, #3
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff ff6b 	bl	8012400 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	69db      	ldr	r3, [r3, #28]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d003      	beq.n	801253a <netif_set_link_up+0x56>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	69db      	ldr	r3, [r3, #28]
 8012536:	6878      	ldr	r0, [r7, #4]
 8012538:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801253a:	3708      	adds	r7, #8
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	08020bbc 	.word	0x08020bbc
 8012544:	08020da4 	.word	0x08020da4
 8012548:	08020c0c 	.word	0x08020c0c

0801254c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b082      	sub	sp, #8
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d107      	bne.n	801256a <netif_set_link_down+0x1e>
 801255a:	4b11      	ldr	r3, [pc, #68]	@ (80125a0 <netif_set_link_down+0x54>)
 801255c:	f240 4206 	movw	r2, #1030	@ 0x406
 8012560:	4910      	ldr	r1, [pc, #64]	@ (80125a4 <netif_set_link_down+0x58>)
 8012562:	4811      	ldr	r0, [pc, #68]	@ (80125a8 <netif_set_link_down+0x5c>)
 8012564:	f00a ff90 	bl	801d488 <iprintf>
 8012568:	e017      	b.n	801259a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012570:	f003 0304 	and.w	r3, r3, #4
 8012574:	2b00      	cmp	r3, #0
 8012576:	d010      	beq.n	801259a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801257e:	f023 0304 	bic.w	r3, r3, #4
 8012582:	b2da      	uxtb	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	69db      	ldr	r3, [r3, #28]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d003      	beq.n	801259a <netif_set_link_down+0x4e>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	69db      	ldr	r3, [r3, #28]
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801259a:	3708      	adds	r7, #8
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	08020bbc 	.word	0x08020bbc
 80125a4:	08020dc8 	.word	0x08020dc8
 80125a8:	08020c0c 	.word	0x08020c0c

080125ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d002      	beq.n	80125c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	683a      	ldr	r2, [r7, #0]
 80125c0:	61da      	str	r2, [r3, #28]
  }
}
 80125c2:	bf00      	nop
 80125c4:	370c      	adds	r7, #12
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr

080125ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80125ce:	b480      	push	{r7}
 80125d0:	b085      	sub	sp, #20
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80125da:	f06f 030b 	mvn.w	r3, #11
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3714      	adds	r7, #20
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr
	...

080125ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	4603      	mov	r3, r0
 80125f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80125f6:	79fb      	ldrb	r3, [r7, #7]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d013      	beq.n	8012624 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80125fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012634 <netif_get_by_index+0x48>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	60fb      	str	r3, [r7, #12]
 8012602:	e00c      	b.n	801261e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801260a:	3301      	adds	r3, #1
 801260c:	b2db      	uxtb	r3, r3
 801260e:	79fa      	ldrb	r2, [r7, #7]
 8012610:	429a      	cmp	r2, r3
 8012612:	d101      	bne.n	8012618 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	e006      	b.n	8012626 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	60fb      	str	r3, [r7, #12]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d1ef      	bne.n	8012604 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3714      	adds	r7, #20
 801262a:	46bd      	mov	sp, r7
 801262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop
 8012634:	2000f388 	.word	0x2000f388

08012638 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801263e:	f00a f9ad 	bl	801c99c <sys_arch_protect>
 8012642:	6038      	str	r0, [r7, #0]
 8012644:	4b0d      	ldr	r3, [pc, #52]	@ (801267c <pbuf_free_ooseq+0x44>)
 8012646:	2200      	movs	r2, #0
 8012648:	701a      	strb	r2, [r3, #0]
 801264a:	6838      	ldr	r0, [r7, #0]
 801264c:	f00a f9b4 	bl	801c9b8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012650:	4b0b      	ldr	r3, [pc, #44]	@ (8012680 <pbuf_free_ooseq+0x48>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	607b      	str	r3, [r7, #4]
 8012656:	e00a      	b.n	801266e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801265c:	2b00      	cmp	r3, #0
 801265e:	d003      	beq.n	8012668 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f002 fc85 	bl	8014f70 <tcp_free_ooseq>
      return;
 8012666:	e005      	b.n	8012674 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	607b      	str	r3, [r7, #4]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1f1      	bne.n	8012658 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012674:	3708      	adds	r7, #8
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	2000f391 	.word	0x2000f391
 8012680:	2000f3a0 	.word	0x2000f3a0

08012684 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801268c:	f7ff ffd4 	bl	8012638 <pbuf_free_ooseq>
}
 8012690:	bf00      	nop
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}

08012698 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801269e:	f00a f97d 	bl	801c99c <sys_arch_protect>
 80126a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80126a4:	4b0f      	ldr	r3, [pc, #60]	@ (80126e4 <pbuf_pool_is_empty+0x4c>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80126aa:	4b0e      	ldr	r3, [pc, #56]	@ (80126e4 <pbuf_pool_is_empty+0x4c>)
 80126ac:	2201      	movs	r2, #1
 80126ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f00a f981 	bl	801c9b8 <sys_arch_unprotect>

  if (!queued) {
 80126b6:	78fb      	ldrb	r3, [r7, #3]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d10f      	bne.n	80126dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80126bc:	2100      	movs	r1, #0
 80126be:	480a      	ldr	r0, [pc, #40]	@ (80126e8 <pbuf_pool_is_empty+0x50>)
 80126c0:	f7fe f840 	bl	8010744 <tcpip_try_callback>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d008      	beq.n	80126dc <pbuf_pool_is_empty+0x44>
 80126ca:	f00a f967 	bl	801c99c <sys_arch_protect>
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	4b04      	ldr	r3, [pc, #16]	@ (80126e4 <pbuf_pool_is_empty+0x4c>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	701a      	strb	r2, [r3, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f00a f96e 	bl	801c9b8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80126dc:	bf00      	nop
 80126de:	3708      	adds	r7, #8
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	2000f391 	.word	0x2000f391
 80126e8:	08012685 	.word	0x08012685

080126ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80126ec:	b480      	push	{r7}
 80126ee:	b085      	sub	sp, #20
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	60f8      	str	r0, [r7, #12]
 80126f4:	60b9      	str	r1, [r7, #8]
 80126f6:	4611      	mov	r1, r2
 80126f8:	461a      	mov	r2, r3
 80126fa:	460b      	mov	r3, r1
 80126fc:	80fb      	strh	r3, [r7, #6]
 80126fe:	4613      	mov	r3, r2
 8012700:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2200      	movs	r2, #0
 8012706:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	68ba      	ldr	r2, [r7, #8]
 801270c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	88fa      	ldrh	r2, [r7, #6]
 8012712:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	88ba      	ldrh	r2, [r7, #4]
 8012718:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801271a:	8b3b      	ldrh	r3, [r7, #24]
 801271c:	b2da      	uxtb	r2, r3
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	7f3a      	ldrb	r2, [r7, #28]
 8012726:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2201      	movs	r2, #1
 801272c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2200      	movs	r2, #0
 8012732:	73da      	strb	r2, [r3, #15]
}
 8012734:	bf00      	nop
 8012736:	3714      	adds	r7, #20
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr

08012740 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b08c      	sub	sp, #48	@ 0x30
 8012744:	af02      	add	r7, sp, #8
 8012746:	4603      	mov	r3, r0
 8012748:	71fb      	strb	r3, [r7, #7]
 801274a:	460b      	mov	r3, r1
 801274c:	80bb      	strh	r3, [r7, #4]
 801274e:	4613      	mov	r3, r2
 8012750:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012752:	79fb      	ldrb	r3, [r7, #7]
 8012754:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012756:	887b      	ldrh	r3, [r7, #2]
 8012758:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801275c:	d07f      	beq.n	801285e <pbuf_alloc+0x11e>
 801275e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012762:	f300 80c8 	bgt.w	80128f6 <pbuf_alloc+0x1b6>
 8012766:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801276a:	d010      	beq.n	801278e <pbuf_alloc+0x4e>
 801276c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012770:	f300 80c1 	bgt.w	80128f6 <pbuf_alloc+0x1b6>
 8012774:	2b01      	cmp	r3, #1
 8012776:	d002      	beq.n	801277e <pbuf_alloc+0x3e>
 8012778:	2b41      	cmp	r3, #65	@ 0x41
 801277a:	f040 80bc 	bne.w	80128f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801277e:	887a      	ldrh	r2, [r7, #2]
 8012780:	88bb      	ldrh	r3, [r7, #4]
 8012782:	4619      	mov	r1, r3
 8012784:	2000      	movs	r0, #0
 8012786:	f000 f8d1 	bl	801292c <pbuf_alloc_reference>
 801278a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801278c:	e0bd      	b.n	801290a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801278e:	2300      	movs	r3, #0
 8012790:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012792:	2300      	movs	r3, #0
 8012794:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012796:	88bb      	ldrh	r3, [r7, #4]
 8012798:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801279a:	200c      	movs	r0, #12
 801279c:	f7ff fb9a 	bl	8011ed4 <memp_malloc>
 80127a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d109      	bne.n	80127bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80127a8:	f7ff ff76 	bl	8012698 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80127ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d002      	beq.n	80127b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80127b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127b4:	f000 faa8 	bl	8012d08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80127b8:	2300      	movs	r3, #0
 80127ba:	e0a7      	b.n	801290c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80127bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127be:	3303      	adds	r3, #3
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	f023 0303 	bic.w	r3, r3, #3
 80127c6:	b29b      	uxth	r3, r3
 80127c8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	8b7a      	ldrh	r2, [r7, #26]
 80127d0:	4293      	cmp	r3, r2
 80127d2:	bf28      	it	cs
 80127d4:	4613      	movcs	r3, r2
 80127d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80127d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127da:	3310      	adds	r3, #16
 80127dc:	693a      	ldr	r2, [r7, #16]
 80127de:	4413      	add	r3, r2
 80127e0:	3303      	adds	r3, #3
 80127e2:	f023 0303 	bic.w	r3, r3, #3
 80127e6:	4618      	mov	r0, r3
 80127e8:	89f9      	ldrh	r1, [r7, #14]
 80127ea:	8b7a      	ldrh	r2, [r7, #26]
 80127ec:	2300      	movs	r3, #0
 80127ee:	9301      	str	r3, [sp, #4]
 80127f0:	887b      	ldrh	r3, [r7, #2]
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	460b      	mov	r3, r1
 80127f6:	4601      	mov	r1, r0
 80127f8:	6938      	ldr	r0, [r7, #16]
 80127fa:	f7ff ff77 	bl	80126ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	f003 0303 	and.w	r3, r3, #3
 8012806:	2b00      	cmp	r3, #0
 8012808:	d006      	beq.n	8012818 <pbuf_alloc+0xd8>
 801280a:	4b42      	ldr	r3, [pc, #264]	@ (8012914 <pbuf_alloc+0x1d4>)
 801280c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012810:	4941      	ldr	r1, [pc, #260]	@ (8012918 <pbuf_alloc+0x1d8>)
 8012812:	4842      	ldr	r0, [pc, #264]	@ (801291c <pbuf_alloc+0x1dc>)
 8012814:	f00a fe38 	bl	801d488 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012818:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801281a:	3303      	adds	r3, #3
 801281c:	f023 0303 	bic.w	r3, r3, #3
 8012820:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012824:	d106      	bne.n	8012834 <pbuf_alloc+0xf4>
 8012826:	4b3b      	ldr	r3, [pc, #236]	@ (8012914 <pbuf_alloc+0x1d4>)
 8012828:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801282c:	493c      	ldr	r1, [pc, #240]	@ (8012920 <pbuf_alloc+0x1e0>)
 801282e:	483b      	ldr	r0, [pc, #236]	@ (801291c <pbuf_alloc+0x1dc>)
 8012830:	f00a fe2a 	bl	801d488 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012836:	2b00      	cmp	r3, #0
 8012838:	d102      	bne.n	8012840 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	627b      	str	r3, [r7, #36]	@ 0x24
 801283e:	e002      	b.n	8012846 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	693a      	ldr	r2, [r7, #16]
 8012844:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012846:	693b      	ldr	r3, [r7, #16]
 8012848:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801284a:	8b7a      	ldrh	r2, [r7, #26]
 801284c:	89fb      	ldrh	r3, [r7, #14]
 801284e:	1ad3      	subs	r3, r2, r3
 8012850:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012856:	8b7b      	ldrh	r3, [r7, #26]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d19e      	bne.n	801279a <pbuf_alloc+0x5a>
      break;
 801285c:	e055      	b.n	801290a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801285e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012860:	3303      	adds	r3, #3
 8012862:	b29b      	uxth	r3, r3
 8012864:	f023 0303 	bic.w	r3, r3, #3
 8012868:	b29a      	uxth	r2, r3
 801286a:	88bb      	ldrh	r3, [r7, #4]
 801286c:	3303      	adds	r3, #3
 801286e:	b29b      	uxth	r3, r3
 8012870:	f023 0303 	bic.w	r3, r3, #3
 8012874:	b29b      	uxth	r3, r3
 8012876:	4413      	add	r3, r2
 8012878:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801287a:	8b3b      	ldrh	r3, [r7, #24]
 801287c:	3310      	adds	r3, #16
 801287e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012880:	8b3a      	ldrh	r2, [r7, #24]
 8012882:	88bb      	ldrh	r3, [r7, #4]
 8012884:	3303      	adds	r3, #3
 8012886:	f023 0303 	bic.w	r3, r3, #3
 801288a:	429a      	cmp	r2, r3
 801288c:	d306      	bcc.n	801289c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801288e:	8afa      	ldrh	r2, [r7, #22]
 8012890:	88bb      	ldrh	r3, [r7, #4]
 8012892:	3303      	adds	r3, #3
 8012894:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012898:	429a      	cmp	r2, r3
 801289a:	d201      	bcs.n	80128a0 <pbuf_alloc+0x160>
        return NULL;
 801289c:	2300      	movs	r3, #0
 801289e:	e035      	b.n	801290c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80128a0:	8afb      	ldrh	r3, [r7, #22]
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7ff f972 	bl	8011b8c <mem_malloc>
 80128a8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80128aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d101      	bne.n	80128b4 <pbuf_alloc+0x174>
        return NULL;
 80128b0:	2300      	movs	r3, #0
 80128b2:	e02b      	b.n	801290c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80128b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80128b6:	3310      	adds	r3, #16
 80128b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128ba:	4413      	add	r3, r2
 80128bc:	3303      	adds	r3, #3
 80128be:	f023 0303 	bic.w	r3, r3, #3
 80128c2:	4618      	mov	r0, r3
 80128c4:	88b9      	ldrh	r1, [r7, #4]
 80128c6:	88ba      	ldrh	r2, [r7, #4]
 80128c8:	2300      	movs	r3, #0
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	887b      	ldrh	r3, [r7, #2]
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	460b      	mov	r3, r1
 80128d2:	4601      	mov	r1, r0
 80128d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128d6:	f7ff ff09 	bl	80126ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80128da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	f003 0303 	and.w	r3, r3, #3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d010      	beq.n	8012908 <pbuf_alloc+0x1c8>
 80128e6:	4b0b      	ldr	r3, [pc, #44]	@ (8012914 <pbuf_alloc+0x1d4>)
 80128e8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80128ec:	490d      	ldr	r1, [pc, #52]	@ (8012924 <pbuf_alloc+0x1e4>)
 80128ee:	480b      	ldr	r0, [pc, #44]	@ (801291c <pbuf_alloc+0x1dc>)
 80128f0:	f00a fdca 	bl	801d488 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80128f4:	e008      	b.n	8012908 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80128f6:	4b07      	ldr	r3, [pc, #28]	@ (8012914 <pbuf_alloc+0x1d4>)
 80128f8:	f240 1227 	movw	r2, #295	@ 0x127
 80128fc:	490a      	ldr	r1, [pc, #40]	@ (8012928 <pbuf_alloc+0x1e8>)
 80128fe:	4807      	ldr	r0, [pc, #28]	@ (801291c <pbuf_alloc+0x1dc>)
 8012900:	f00a fdc2 	bl	801d488 <iprintf>
      return NULL;
 8012904:	2300      	movs	r3, #0
 8012906:	e001      	b.n	801290c <pbuf_alloc+0x1cc>
      break;
 8012908:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801290c:	4618      	mov	r0, r3
 801290e:	3728      	adds	r7, #40	@ 0x28
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	08020dec 	.word	0x08020dec
 8012918:	08020e1c 	.word	0x08020e1c
 801291c:	08020e4c 	.word	0x08020e4c
 8012920:	08020e74 	.word	0x08020e74
 8012924:	08020ea8 	.word	0x08020ea8
 8012928:	08020ed4 	.word	0x08020ed4

0801292c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af02      	add	r7, sp, #8
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	460b      	mov	r3, r1
 8012936:	807b      	strh	r3, [r7, #2]
 8012938:	4613      	mov	r3, r2
 801293a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801293c:	883b      	ldrh	r3, [r7, #0]
 801293e:	2b41      	cmp	r3, #65	@ 0x41
 8012940:	d009      	beq.n	8012956 <pbuf_alloc_reference+0x2a>
 8012942:	883b      	ldrh	r3, [r7, #0]
 8012944:	2b01      	cmp	r3, #1
 8012946:	d006      	beq.n	8012956 <pbuf_alloc_reference+0x2a>
 8012948:	4b0f      	ldr	r3, [pc, #60]	@ (8012988 <pbuf_alloc_reference+0x5c>)
 801294a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801294e:	490f      	ldr	r1, [pc, #60]	@ (801298c <pbuf_alloc_reference+0x60>)
 8012950:	480f      	ldr	r0, [pc, #60]	@ (8012990 <pbuf_alloc_reference+0x64>)
 8012952:	f00a fd99 	bl	801d488 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012956:	200b      	movs	r0, #11
 8012958:	f7ff fabc 	bl	8011ed4 <memp_malloc>
 801295c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d101      	bne.n	8012968 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	e00b      	b.n	8012980 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012968:	8879      	ldrh	r1, [r7, #2]
 801296a:	887a      	ldrh	r2, [r7, #2]
 801296c:	2300      	movs	r3, #0
 801296e:	9301      	str	r3, [sp, #4]
 8012970:	883b      	ldrh	r3, [r7, #0]
 8012972:	9300      	str	r3, [sp, #0]
 8012974:	460b      	mov	r3, r1
 8012976:	6879      	ldr	r1, [r7, #4]
 8012978:	68f8      	ldr	r0, [r7, #12]
 801297a:	f7ff feb7 	bl	80126ec <pbuf_init_alloced_pbuf>
  return p;
 801297e:	68fb      	ldr	r3, [r7, #12]
}
 8012980:	4618      	mov	r0, r3
 8012982:	3710      	adds	r7, #16
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	08020dec 	.word	0x08020dec
 801298c:	08020ef0 	.word	0x08020ef0
 8012990:	08020e4c 	.word	0x08020e4c

08012994 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b088      	sub	sp, #32
 8012998:	af02      	add	r7, sp, #8
 801299a:	607b      	str	r3, [r7, #4]
 801299c:	4603      	mov	r3, r0
 801299e:	73fb      	strb	r3, [r7, #15]
 80129a0:	460b      	mov	r3, r1
 80129a2:	81bb      	strh	r3, [r7, #12]
 80129a4:	4613      	mov	r3, r2
 80129a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80129a8:	7bfb      	ldrb	r3, [r7, #15]
 80129aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80129ac:	8a7b      	ldrh	r3, [r7, #18]
 80129ae:	3303      	adds	r3, #3
 80129b0:	f023 0203 	bic.w	r2, r3, #3
 80129b4:	89bb      	ldrh	r3, [r7, #12]
 80129b6:	441a      	add	r2, r3
 80129b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d901      	bls.n	80129c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80129be:	2300      	movs	r3, #0
 80129c0:	e018      	b.n	80129f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80129c2:	6a3b      	ldr	r3, [r7, #32]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d007      	beq.n	80129d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80129c8:	8a7b      	ldrh	r3, [r7, #18]
 80129ca:	3303      	adds	r3, #3
 80129cc:	f023 0303 	bic.w	r3, r3, #3
 80129d0:	6a3a      	ldr	r2, [r7, #32]
 80129d2:	4413      	add	r3, r2
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	e001      	b.n	80129dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80129d8:	2300      	movs	r3, #0
 80129da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	89b9      	ldrh	r1, [r7, #12]
 80129e0:	89ba      	ldrh	r2, [r7, #12]
 80129e2:	2302      	movs	r3, #2
 80129e4:	9301      	str	r3, [sp, #4]
 80129e6:	897b      	ldrh	r3, [r7, #10]
 80129e8:	9300      	str	r3, [sp, #0]
 80129ea:	460b      	mov	r3, r1
 80129ec:	6979      	ldr	r1, [r7, #20]
 80129ee:	f7ff fe7d 	bl	80126ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80129f2:	687b      	ldr	r3, [r7, #4]
}
 80129f4:	4618      	mov	r0, r3
 80129f6:	3718      	adds	r7, #24
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <pbuf_realloc+0x20>
 8012a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8012af8 <pbuf_realloc+0xfc>)
 8012a10:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012a14:	4939      	ldr	r1, [pc, #228]	@ (8012afc <pbuf_realloc+0x100>)
 8012a16:	483a      	ldr	r0, [pc, #232]	@ (8012b00 <pbuf_realloc+0x104>)
 8012a18:	f00a fd36 	bl	801d488 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	891b      	ldrh	r3, [r3, #8]
 8012a20:	887a      	ldrh	r2, [r7, #2]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d263      	bcs.n	8012aee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	891a      	ldrh	r2, [r3, #8]
 8012a2a:	887b      	ldrh	r3, [r7, #2]
 8012a2c:	1ad3      	subs	r3, r2, r3
 8012a2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012a30:	887b      	ldrh	r3, [r7, #2]
 8012a32:	817b      	strh	r3, [r7, #10]
  q = p;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012a38:	e018      	b.n	8012a6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	895b      	ldrh	r3, [r3, #10]
 8012a3e:	897a      	ldrh	r2, [r7, #10]
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	891a      	ldrh	r2, [r3, #8]
 8012a48:	893b      	ldrh	r3, [r7, #8]
 8012a4a:	1ad3      	subs	r3, r2, r3
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <pbuf_realloc+0x70>
 8012a5e:	4b26      	ldr	r3, [pc, #152]	@ (8012af8 <pbuf_realloc+0xfc>)
 8012a60:	f240 12af 	movw	r2, #431	@ 0x1af
 8012a64:	4927      	ldr	r1, [pc, #156]	@ (8012b04 <pbuf_realloc+0x108>)
 8012a66:	4826      	ldr	r0, [pc, #152]	@ (8012b00 <pbuf_realloc+0x104>)
 8012a68:	f00a fd0e 	bl	801d488 <iprintf>
  while (rem_len > q->len) {
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	895b      	ldrh	r3, [r3, #10]
 8012a70:	897a      	ldrh	r2, [r7, #10]
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d8e1      	bhi.n	8012a3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	7b1b      	ldrb	r3, [r3, #12]
 8012a7a:	f003 030f 	and.w	r3, r3, #15
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d121      	bne.n	8012ac6 <pbuf_realloc+0xca>
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	895b      	ldrh	r3, [r3, #10]
 8012a86:	897a      	ldrh	r2, [r7, #10]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d01c      	beq.n	8012ac6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	7b5b      	ldrb	r3, [r3, #13]
 8012a90:	f003 0302 	and.w	r3, r3, #2
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d116      	bne.n	8012ac6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	685a      	ldr	r2, [r3, #4]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	897b      	ldrh	r3, [r7, #10]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f7fe ff64 	bl	8011978 <mem_trim>
 8012ab0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d106      	bne.n	8012ac6 <pbuf_realloc+0xca>
 8012ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8012af8 <pbuf_realloc+0xfc>)
 8012aba:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012abe:	4912      	ldr	r1, [pc, #72]	@ (8012b08 <pbuf_realloc+0x10c>)
 8012ac0:	480f      	ldr	r0, [pc, #60]	@ (8012b00 <pbuf_realloc+0x104>)
 8012ac2:	f00a fce1 	bl	801d488 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	897a      	ldrh	r2, [r7, #10]
 8012aca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	895a      	ldrh	r2, [r3, #10]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d004      	beq.n	8012ae6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f000 f911 	bl	8012d08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	e000      	b.n	8012af0 <pbuf_realloc+0xf4>
    return;
 8012aee:	bf00      	nop

}
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
 8012af6:	bf00      	nop
 8012af8:	08020dec 	.word	0x08020dec
 8012afc:	08020f04 	.word	0x08020f04
 8012b00:	08020e4c 	.word	0x08020e4c
 8012b04:	08020f1c 	.word	0x08020f1c
 8012b08:	08020f34 	.word	0x08020f34

08012b0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	4613      	mov	r3, r2
 8012b18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d106      	bne.n	8012b2e <pbuf_add_header_impl+0x22>
 8012b20:	4b2b      	ldr	r3, [pc, #172]	@ (8012bd0 <pbuf_add_header_impl+0xc4>)
 8012b22:	f240 12df 	movw	r2, #479	@ 0x1df
 8012b26:	492b      	ldr	r1, [pc, #172]	@ (8012bd4 <pbuf_add_header_impl+0xc8>)
 8012b28:	482b      	ldr	r0, [pc, #172]	@ (8012bd8 <pbuf_add_header_impl+0xcc>)
 8012b2a:	f00a fcad 	bl	801d488 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d003      	beq.n	8012b3c <pbuf_add_header_impl+0x30>
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b3a:	d301      	bcc.n	8012b40 <pbuf_add_header_impl+0x34>
    return 1;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	e043      	b.n	8012bc8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d101      	bne.n	8012b4a <pbuf_add_header_impl+0x3e>
    return 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	e03e      	b.n	8012bc8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	891a      	ldrh	r2, [r3, #8]
 8012b52:	8a7b      	ldrh	r3, [r7, #18]
 8012b54:	4413      	add	r3, r2
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	8a7a      	ldrh	r2, [r7, #18]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d901      	bls.n	8012b62 <pbuf_add_header_impl+0x56>
    return 1;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e032      	b.n	8012bc8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	7b1b      	ldrb	r3, [r3, #12]
 8012b66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012b68:	8a3b      	ldrh	r3, [r7, #16]
 8012b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00c      	beq.n	8012b8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	685a      	ldr	r2, [r3, #4]
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	425b      	negs	r3, r3
 8012b7a:	4413      	add	r3, r2
 8012b7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	3310      	adds	r3, #16
 8012b82:	697a      	ldr	r2, [r7, #20]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d20d      	bcs.n	8012ba4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	e01d      	b.n	8012bc8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012b8c:	79fb      	ldrb	r3, [r7, #7]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d006      	beq.n	8012ba0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	685a      	ldr	r2, [r3, #4]
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	425b      	negs	r3, r3
 8012b9a:	4413      	add	r3, r2
 8012b9c:	617b      	str	r3, [r7, #20]
 8012b9e:	e001      	b.n	8012ba4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	e011      	b.n	8012bc8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	697a      	ldr	r2, [r7, #20]
 8012ba8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	895a      	ldrh	r2, [r3, #10]
 8012bae:	8a7b      	ldrh	r3, [r7, #18]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	891a      	ldrh	r2, [r3, #8]
 8012bbc:	8a7b      	ldrh	r3, [r7, #18]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	811a      	strh	r2, [r3, #8]


  return 0;
 8012bc6:	2300      	movs	r3, #0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3718      	adds	r7, #24
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	08020dec 	.word	0x08020dec
 8012bd4:	08020f50 	.word	0x08020f50
 8012bd8:	08020e4c 	.word	0x08020e4c

08012bdc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012be6:	2200      	movs	r2, #0
 8012be8:	6839      	ldr	r1, [r7, #0]
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7ff ff8e 	bl	8012b0c <pbuf_add_header_impl>
 8012bf0:	4603      	mov	r3, r0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3708      	adds	r7, #8
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
	...

08012bfc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012bfc:	b580      	push	{r7, lr}
 8012bfe:	b084      	sub	sp, #16
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d106      	bne.n	8012c1a <pbuf_remove_header+0x1e>
 8012c0c:	4b20      	ldr	r3, [pc, #128]	@ (8012c90 <pbuf_remove_header+0x94>)
 8012c0e:	f240 224b 	movw	r2, #587	@ 0x24b
 8012c12:	4920      	ldr	r1, [pc, #128]	@ (8012c94 <pbuf_remove_header+0x98>)
 8012c14:	4820      	ldr	r0, [pc, #128]	@ (8012c98 <pbuf_remove_header+0x9c>)
 8012c16:	f00a fc37 	bl	801d488 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d003      	beq.n	8012c28 <pbuf_remove_header+0x2c>
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012c26:	d301      	bcc.n	8012c2c <pbuf_remove_header+0x30>
    return 1;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	e02c      	b.n	8012c86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d101      	bne.n	8012c36 <pbuf_remove_header+0x3a>
    return 0;
 8012c32:	2300      	movs	r3, #0
 8012c34:	e027      	b.n	8012c86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	895b      	ldrh	r3, [r3, #10]
 8012c3e:	89fa      	ldrh	r2, [r7, #14]
 8012c40:	429a      	cmp	r2, r3
 8012c42:	d908      	bls.n	8012c56 <pbuf_remove_header+0x5a>
 8012c44:	4b12      	ldr	r3, [pc, #72]	@ (8012c90 <pbuf_remove_header+0x94>)
 8012c46:	f240 2255 	movw	r2, #597	@ 0x255
 8012c4a:	4914      	ldr	r1, [pc, #80]	@ (8012c9c <pbuf_remove_header+0xa0>)
 8012c4c:	4812      	ldr	r0, [pc, #72]	@ (8012c98 <pbuf_remove_header+0x9c>)
 8012c4e:	f00a fc1b 	bl	801d488 <iprintf>
 8012c52:	2301      	movs	r3, #1
 8012c54:	e017      	b.n	8012c86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	685a      	ldr	r2, [r3, #4]
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	441a      	add	r2, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	895a      	ldrh	r2, [r3, #10]
 8012c6c:	89fb      	ldrh	r3, [r7, #14]
 8012c6e:	1ad3      	subs	r3, r2, r3
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	891a      	ldrh	r2, [r3, #8]
 8012c7a:	89fb      	ldrh	r3, [r7, #14]
 8012c7c:	1ad3      	subs	r3, r2, r3
 8012c7e:	b29a      	uxth	r2, r3
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	08020dec 	.word	0x08020dec
 8012c94:	08020f50 	.word	0x08020f50
 8012c98:	08020e4c 	.word	0x08020e4c
 8012c9c:	08020f5c 	.word	0x08020f5c

08012ca0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	460b      	mov	r3, r1
 8012caa:	807b      	strh	r3, [r7, #2]
 8012cac:	4613      	mov	r3, r2
 8012cae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012cb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	da08      	bge.n	8012cca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012cb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cbc:	425b      	negs	r3, r3
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7ff ff9b 	bl	8012bfc <pbuf_remove_header>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	e007      	b.n	8012cda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cce:	787a      	ldrb	r2, [r7, #1]
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7ff ff1a 	bl	8012b0c <pbuf_add_header_impl>
 8012cd8:	4603      	mov	r3, r0
  }
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3708      	adds	r7, #8
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}

08012ce2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012ce2:	b580      	push	{r7, lr}
 8012ce4:	b082      	sub	sp, #8
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
 8012cea:	460b      	mov	r3, r1
 8012cec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012cee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	4619      	mov	r1, r3
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f7ff ffd2 	bl	8012ca0 <pbuf_header_impl>
 8012cfc:	4603      	mov	r3, r0
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b088      	sub	sp, #32
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10b      	bne.n	8012d2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d106      	bne.n	8012d2a <pbuf_free+0x22>
 8012d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8012e0c <pbuf_free+0x104>)
 8012d1e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012d22:	493b      	ldr	r1, [pc, #236]	@ (8012e10 <pbuf_free+0x108>)
 8012d24:	483b      	ldr	r0, [pc, #236]	@ (8012e14 <pbuf_free+0x10c>)
 8012d26:	f00a fbaf 	bl	801d488 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	e069      	b.n	8012e02 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012d32:	e062      	b.n	8012dfa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012d34:	f009 fe32 	bl	801c99c <sys_arch_protect>
 8012d38:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	7b9b      	ldrb	r3, [r3, #14]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <pbuf_free+0x48>
 8012d42:	4b32      	ldr	r3, [pc, #200]	@ (8012e0c <pbuf_free+0x104>)
 8012d44:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012d48:	4933      	ldr	r1, [pc, #204]	@ (8012e18 <pbuf_free+0x110>)
 8012d4a:	4832      	ldr	r0, [pc, #200]	@ (8012e14 <pbuf_free+0x10c>)
 8012d4c:	f00a fb9c 	bl	801d488 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	7b9b      	ldrb	r3, [r3, #14]
 8012d54:	3b01      	subs	r3, #1
 8012d56:	b2da      	uxtb	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	739a      	strb	r2, [r3, #14]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	7b9b      	ldrb	r3, [r3, #14]
 8012d60:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012d62:	69b8      	ldr	r0, [r7, #24]
 8012d64:	f009 fe28 	bl	801c9b8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012d68:	7dfb      	ldrb	r3, [r7, #23]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d143      	bne.n	8012df6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	7b1b      	ldrb	r3, [r3, #12]
 8012d78:	f003 030f 	and.w	r3, r3, #15
 8012d7c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	7b5b      	ldrb	r3, [r3, #13]
 8012d82:	f003 0302 	and.w	r3, r3, #2
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d011      	beq.n	8012dae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	691b      	ldr	r3, [r3, #16]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d106      	bne.n	8012da4 <pbuf_free+0x9c>
 8012d96:	4b1d      	ldr	r3, [pc, #116]	@ (8012e0c <pbuf_free+0x104>)
 8012d98:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012d9c:	491f      	ldr	r1, [pc, #124]	@ (8012e1c <pbuf_free+0x114>)
 8012d9e:	481d      	ldr	r0, [pc, #116]	@ (8012e14 <pbuf_free+0x10c>)
 8012da0:	f00a fb72 	bl	801d488 <iprintf>
        pc->custom_free_function(p);
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	691b      	ldr	r3, [r3, #16]
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	4798      	blx	r3
 8012dac:	e01d      	b.n	8012dea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012dae:	7bfb      	ldrb	r3, [r7, #15]
 8012db0:	2b02      	cmp	r3, #2
 8012db2:	d104      	bne.n	8012dbe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012db4:	6879      	ldr	r1, [r7, #4]
 8012db6:	200c      	movs	r0, #12
 8012db8:	f7ff f902 	bl	8011fc0 <memp_free>
 8012dbc:	e015      	b.n	8012dea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012dbe:	7bfb      	ldrb	r3, [r7, #15]
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d104      	bne.n	8012dce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	200b      	movs	r0, #11
 8012dc8:	f7ff f8fa 	bl	8011fc0 <memp_free>
 8012dcc:	e00d      	b.n	8012dea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d103      	bne.n	8012ddc <pbuf_free+0xd4>
          mem_free(p);
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7fe fd3f 	bl	8011858 <mem_free>
 8012dda:	e006      	b.n	8012dea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8012e0c <pbuf_free+0x104>)
 8012dde:	f240 320f 	movw	r2, #783	@ 0x30f
 8012de2:	490f      	ldr	r1, [pc, #60]	@ (8012e20 <pbuf_free+0x118>)
 8012de4:	480b      	ldr	r0, [pc, #44]	@ (8012e14 <pbuf_free+0x10c>)
 8012de6:	f00a fb4f 	bl	801d488 <iprintf>
        }
      }
      count++;
 8012dea:	7ffb      	ldrb	r3, [r7, #31]
 8012dec:	3301      	adds	r3, #1
 8012dee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	e001      	b.n	8012dfa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012df6:	2300      	movs	r3, #0
 8012df8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d199      	bne.n	8012d34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3720      	adds	r7, #32
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	08020dec 	.word	0x08020dec
 8012e10:	08020f50 	.word	0x08020f50
 8012e14:	08020e4c 	.word	0x08020e4c
 8012e18:	08020f7c 	.word	0x08020f7c
 8012e1c:	08020f94 	.word	0x08020f94
 8012e20:	08020fb8 	.word	0x08020fb8

08012e24 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012e30:	e005      	b.n	8012e3e <pbuf_clen+0x1a>
    ++len;
 8012e32:	89fb      	ldrh	r3, [r7, #14]
 8012e34:	3301      	adds	r3, #1
 8012e36:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d1f6      	bne.n	8012e32 <pbuf_clen+0xe>
  }
  return len;
 8012e44:	89fb      	ldrh	r3, [r7, #14]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3714      	adds	r7, #20
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
	...

08012e54 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b084      	sub	sp, #16
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d016      	beq.n	8012e90 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8012e62:	f009 fd9b 	bl	801c99c <sys_arch_protect>
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	7b9b      	ldrb	r3, [r3, #14]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	739a      	strb	r2, [r3, #14]
 8012e74:	68f8      	ldr	r0, [r7, #12]
 8012e76:	f009 fd9f 	bl	801c9b8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	7b9b      	ldrb	r3, [r3, #14]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <pbuf_ref+0x3c>
 8012e82:	4b05      	ldr	r3, [pc, #20]	@ (8012e98 <pbuf_ref+0x44>)
 8012e84:	f240 3242 	movw	r2, #834	@ 0x342
 8012e88:	4904      	ldr	r1, [pc, #16]	@ (8012e9c <pbuf_ref+0x48>)
 8012e8a:	4805      	ldr	r0, [pc, #20]	@ (8012ea0 <pbuf_ref+0x4c>)
 8012e8c:	f00a fafc 	bl	801d488 <iprintf>
  }
}
 8012e90:	bf00      	nop
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	08020dec 	.word	0x08020dec
 8012e9c:	08020fcc 	.word	0x08020fcc
 8012ea0:	08020e4c 	.word	0x08020e4c

08012ea4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <pbuf_cat+0x16>
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d107      	bne.n	8012eca <pbuf_cat+0x26>
 8012eba:	4b20      	ldr	r3, [pc, #128]	@ (8012f3c <pbuf_cat+0x98>)
 8012ebc:	f240 3259 	movw	r2, #857	@ 0x359
 8012ec0:	491f      	ldr	r1, [pc, #124]	@ (8012f40 <pbuf_cat+0x9c>)
 8012ec2:	4820      	ldr	r0, [pc, #128]	@ (8012f44 <pbuf_cat+0xa0>)
 8012ec4:	f00a fae0 	bl	801d488 <iprintf>
 8012ec8:	e034      	b.n	8012f34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	60fb      	str	r3, [r7, #12]
 8012ece:	e00a      	b.n	8012ee6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	891a      	ldrh	r2, [r3, #8]
 8012ed4:	683b      	ldr	r3, [r7, #0]
 8012ed6:	891b      	ldrh	r3, [r3, #8]
 8012ed8:	4413      	add	r3, r2
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	60fb      	str	r3, [r7, #12]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1f0      	bne.n	8012ed0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	891a      	ldrh	r2, [r3, #8]
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	895b      	ldrh	r3, [r3, #10]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d006      	beq.n	8012f08 <pbuf_cat+0x64>
 8012efa:	4b10      	ldr	r3, [pc, #64]	@ (8012f3c <pbuf_cat+0x98>)
 8012efc:	f240 3262 	movw	r2, #866	@ 0x362
 8012f00:	4911      	ldr	r1, [pc, #68]	@ (8012f48 <pbuf_cat+0xa4>)
 8012f02:	4810      	ldr	r0, [pc, #64]	@ (8012f44 <pbuf_cat+0xa0>)
 8012f04:	f00a fac0 	bl	801d488 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d006      	beq.n	8012f1e <pbuf_cat+0x7a>
 8012f10:	4b0a      	ldr	r3, [pc, #40]	@ (8012f3c <pbuf_cat+0x98>)
 8012f12:	f240 3263 	movw	r2, #867	@ 0x363
 8012f16:	490d      	ldr	r1, [pc, #52]	@ (8012f4c <pbuf_cat+0xa8>)
 8012f18:	480a      	ldr	r0, [pc, #40]	@ (8012f44 <pbuf_cat+0xa0>)
 8012f1a:	f00a fab5 	bl	801d488 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	891a      	ldrh	r2, [r3, #8]
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	891b      	ldrh	r3, [r3, #8]
 8012f26:	4413      	add	r3, r2
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	683a      	ldr	r2, [r7, #0]
 8012f32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	08020dec 	.word	0x08020dec
 8012f40:	08020fe0 	.word	0x08020fe0
 8012f44:	08020e4c 	.word	0x08020e4c
 8012f48:	08021018 	.word	0x08021018
 8012f4c:	08021048 	.word	0x08021048

08012f50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff ffa1 	bl	8012ea4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8012f62:	6838      	ldr	r0, [r7, #0]
 8012f64:	f7ff ff76 	bl	8012e54 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b086      	sub	sp, #24
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
 8012f78:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	617b      	str	r3, [r7, #20]
 8012f7e:	2300      	movs	r3, #0
 8012f80:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d008      	beq.n	8012f9a <pbuf_copy+0x2a>
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d005      	beq.n	8012f9a <pbuf_copy+0x2a>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	891a      	ldrh	r2, [r3, #8]
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	891b      	ldrh	r3, [r3, #8]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d209      	bcs.n	8012fae <pbuf_copy+0x3e>
 8012f9a:	4b57      	ldr	r3, [pc, #348]	@ (80130f8 <pbuf_copy+0x188>)
 8012f9c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012fa0:	4956      	ldr	r1, [pc, #344]	@ (80130fc <pbuf_copy+0x18c>)
 8012fa2:	4857      	ldr	r0, [pc, #348]	@ (8013100 <pbuf_copy+0x190>)
 8012fa4:	f00a fa70 	bl	801d488 <iprintf>
 8012fa8:	f06f 030f 	mvn.w	r3, #15
 8012fac:	e09f      	b.n	80130ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	895b      	ldrh	r3, [r3, #10]
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	1ad2      	subs	r2, r2, r3
 8012fb8:	683b      	ldr	r3, [r7, #0]
 8012fba:	895b      	ldrh	r3, [r3, #10]
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	1acb      	subs	r3, r1, r3
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d306      	bcc.n	8012fd4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	895b      	ldrh	r3, [r3, #10]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	e005      	b.n	8012fe0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	895b      	ldrh	r3, [r3, #10]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	1ad3      	subs	r3, r2, r3
 8012fde:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	685a      	ldr	r2, [r3, #4]
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	18d0      	adds	r0, r2, r3
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	685a      	ldr	r2, [r3, #4]
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	4413      	add	r3, r2
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	f00a fbd5 	bl	801d7a2 <memcpy>
    offset_to += len;
 8012ff8:	697a      	ldr	r2, [r7, #20]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	4413      	add	r3, r2
 8012ffe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013000:	693a      	ldr	r2, [r7, #16]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	4413      	add	r3, r2
 8013006:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	895b      	ldrh	r3, [r3, #10]
 801300c:	461a      	mov	r2, r3
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	4293      	cmp	r3, r2
 8013012:	d906      	bls.n	8013022 <pbuf_copy+0xb2>
 8013014:	4b38      	ldr	r3, [pc, #224]	@ (80130f8 <pbuf_copy+0x188>)
 8013016:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801301a:	493a      	ldr	r1, [pc, #232]	@ (8013104 <pbuf_copy+0x194>)
 801301c:	4838      	ldr	r0, [pc, #224]	@ (8013100 <pbuf_copy+0x190>)
 801301e:	f00a fa33 	bl	801d488 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	895b      	ldrh	r3, [r3, #10]
 8013026:	461a      	mov	r2, r3
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	4293      	cmp	r3, r2
 801302c:	d906      	bls.n	801303c <pbuf_copy+0xcc>
 801302e:	4b32      	ldr	r3, [pc, #200]	@ (80130f8 <pbuf_copy+0x188>)
 8013030:	f240 32da 	movw	r2, #986	@ 0x3da
 8013034:	4934      	ldr	r1, [pc, #208]	@ (8013108 <pbuf_copy+0x198>)
 8013036:	4832      	ldr	r0, [pc, #200]	@ (8013100 <pbuf_copy+0x190>)
 8013038:	f00a fa26 	bl	801d488 <iprintf>
    if (offset_from >= p_from->len) {
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	895b      	ldrh	r3, [r3, #10]
 8013040:	461a      	mov	r2, r3
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	4293      	cmp	r3, r2
 8013046:	d304      	bcc.n	8013052 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013048:	2300      	movs	r3, #0
 801304a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	895b      	ldrh	r3, [r3, #10]
 8013056:	461a      	mov	r2, r3
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	4293      	cmp	r3, r2
 801305c:	d114      	bne.n	8013088 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801305e:	2300      	movs	r3, #0
 8013060:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d10c      	bne.n	8013088 <pbuf_copy+0x118>
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d009      	beq.n	8013088 <pbuf_copy+0x118>
 8013074:	4b20      	ldr	r3, [pc, #128]	@ (80130f8 <pbuf_copy+0x188>)
 8013076:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801307a:	4924      	ldr	r1, [pc, #144]	@ (801310c <pbuf_copy+0x19c>)
 801307c:	4820      	ldr	r0, [pc, #128]	@ (8013100 <pbuf_copy+0x190>)
 801307e:	f00a fa03 	bl	801d488 <iprintf>
 8013082:	f06f 030f 	mvn.w	r3, #15
 8013086:	e032      	b.n	80130ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d013      	beq.n	80130b6 <pbuf_copy+0x146>
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	895a      	ldrh	r2, [r3, #10]
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	891b      	ldrh	r3, [r3, #8]
 8013096:	429a      	cmp	r2, r3
 8013098:	d10d      	bne.n	80130b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d009      	beq.n	80130b6 <pbuf_copy+0x146>
 80130a2:	4b15      	ldr	r3, [pc, #84]	@ (80130f8 <pbuf_copy+0x188>)
 80130a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80130a8:	4919      	ldr	r1, [pc, #100]	@ (8013110 <pbuf_copy+0x1a0>)
 80130aa:	4815      	ldr	r0, [pc, #84]	@ (8013100 <pbuf_copy+0x190>)
 80130ac:	f00a f9ec 	bl	801d488 <iprintf>
 80130b0:	f06f 0305 	mvn.w	r3, #5
 80130b4:	e01b      	b.n	80130ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d013      	beq.n	80130e4 <pbuf_copy+0x174>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	895a      	ldrh	r2, [r3, #10]
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	891b      	ldrh	r3, [r3, #8]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d10d      	bne.n	80130e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d009      	beq.n	80130e4 <pbuf_copy+0x174>
 80130d0:	4b09      	ldr	r3, [pc, #36]	@ (80130f8 <pbuf_copy+0x188>)
 80130d2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80130d6:	490e      	ldr	r1, [pc, #56]	@ (8013110 <pbuf_copy+0x1a0>)
 80130d8:	4809      	ldr	r0, [pc, #36]	@ (8013100 <pbuf_copy+0x190>)
 80130da:	f00a f9d5 	bl	801d488 <iprintf>
 80130de:	f06f 0305 	mvn.w	r3, #5
 80130e2:	e004      	b.n	80130ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f47f af61 	bne.w	8012fae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3718      	adds	r7, #24
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	08020dec 	.word	0x08020dec
 80130fc:	08021094 	.word	0x08021094
 8013100:	08020e4c 	.word	0x08020e4c
 8013104:	080210c4 	.word	0x080210c4
 8013108:	080210dc 	.word	0x080210dc
 801310c:	080210f8 	.word	0x080210f8
 8013110:	08021108 	.word	0x08021108

08013114 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b088      	sub	sp, #32
 8013118:	af00      	add	r7, sp, #0
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	4611      	mov	r1, r2
 8013120:	461a      	mov	r2, r3
 8013122:	460b      	mov	r3, r1
 8013124:	80fb      	strh	r3, [r7, #6]
 8013126:	4613      	mov	r3, r2
 8013128:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801312a:	2300      	movs	r3, #0
 801312c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801312e:	2300      	movs	r3, #0
 8013130:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d108      	bne.n	801314a <pbuf_copy_partial+0x36>
 8013138:	4b2b      	ldr	r3, [pc, #172]	@ (80131e8 <pbuf_copy_partial+0xd4>)
 801313a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801313e:	492b      	ldr	r1, [pc, #172]	@ (80131ec <pbuf_copy_partial+0xd8>)
 8013140:	482b      	ldr	r0, [pc, #172]	@ (80131f0 <pbuf_copy_partial+0xdc>)
 8013142:	f00a f9a1 	bl	801d488 <iprintf>
 8013146:	2300      	movs	r3, #0
 8013148:	e04a      	b.n	80131e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801314a:	68bb      	ldr	r3, [r7, #8]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d108      	bne.n	8013162 <pbuf_copy_partial+0x4e>
 8013150:	4b25      	ldr	r3, [pc, #148]	@ (80131e8 <pbuf_copy_partial+0xd4>)
 8013152:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013156:	4927      	ldr	r1, [pc, #156]	@ (80131f4 <pbuf_copy_partial+0xe0>)
 8013158:	4825      	ldr	r0, [pc, #148]	@ (80131f0 <pbuf_copy_partial+0xdc>)
 801315a:	f00a f995 	bl	801d488 <iprintf>
 801315e:	2300      	movs	r3, #0
 8013160:	e03e      	b.n	80131e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	61fb      	str	r3, [r7, #28]
 8013166:	e034      	b.n	80131d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013168:	88bb      	ldrh	r3, [r7, #4]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00a      	beq.n	8013184 <pbuf_copy_partial+0x70>
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	895b      	ldrh	r3, [r3, #10]
 8013172:	88ba      	ldrh	r2, [r7, #4]
 8013174:	429a      	cmp	r2, r3
 8013176:	d305      	bcc.n	8013184 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	895b      	ldrh	r3, [r3, #10]
 801317c:	88ba      	ldrh	r2, [r7, #4]
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	80bb      	strh	r3, [r7, #4]
 8013182:	e023      	b.n	80131cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013184:	69fb      	ldr	r3, [r7, #28]
 8013186:	895a      	ldrh	r2, [r3, #10]
 8013188:	88bb      	ldrh	r3, [r7, #4]
 801318a:	1ad3      	subs	r3, r2, r3
 801318c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801318e:	8b3a      	ldrh	r2, [r7, #24]
 8013190:	88fb      	ldrh	r3, [r7, #6]
 8013192:	429a      	cmp	r2, r3
 8013194:	d901      	bls.n	801319a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013196:	88fb      	ldrh	r3, [r7, #6]
 8013198:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801319a:	8b7b      	ldrh	r3, [r7, #26]
 801319c:	68ba      	ldr	r2, [r7, #8]
 801319e:	18d0      	adds	r0, r2, r3
 80131a0:	69fb      	ldr	r3, [r7, #28]
 80131a2:	685a      	ldr	r2, [r3, #4]
 80131a4:	88bb      	ldrh	r3, [r7, #4]
 80131a6:	4413      	add	r3, r2
 80131a8:	8b3a      	ldrh	r2, [r7, #24]
 80131aa:	4619      	mov	r1, r3
 80131ac:	f00a faf9 	bl	801d7a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80131b0:	8afa      	ldrh	r2, [r7, #22]
 80131b2:	8b3b      	ldrh	r3, [r7, #24]
 80131b4:	4413      	add	r3, r2
 80131b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80131b8:	8b7a      	ldrh	r2, [r7, #26]
 80131ba:	8b3b      	ldrh	r3, [r7, #24]
 80131bc:	4413      	add	r3, r2
 80131be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80131c0:	88fa      	ldrh	r2, [r7, #6]
 80131c2:	8b3b      	ldrh	r3, [r7, #24]
 80131c4:	1ad3      	subs	r3, r2, r3
 80131c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80131c8:	2300      	movs	r3, #0
 80131ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80131cc:	69fb      	ldr	r3, [r7, #28]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	61fb      	str	r3, [r7, #28]
 80131d2:	88fb      	ldrh	r3, [r7, #6]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d002      	beq.n	80131de <pbuf_copy_partial+0xca>
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d1c4      	bne.n	8013168 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80131de:	8afb      	ldrh	r3, [r7, #22]
}
 80131e0:	4618      	mov	r0, r3
 80131e2:	3720      	adds	r7, #32
 80131e4:	46bd      	mov	sp, r7
 80131e6:	bd80      	pop	{r7, pc}
 80131e8:	08020dec 	.word	0x08020dec
 80131ec:	08021134 	.word	0x08021134
 80131f0:	08020e4c 	.word	0x08020e4c
 80131f4:	08021154 	.word	0x08021154

080131f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b084      	sub	sp, #16
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	4603      	mov	r3, r0
 8013200:	603a      	str	r2, [r7, #0]
 8013202:	71fb      	strb	r3, [r7, #7]
 8013204:	460b      	mov	r3, r1
 8013206:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	8919      	ldrh	r1, [r3, #8]
 801320c:	88ba      	ldrh	r2, [r7, #4]
 801320e:	79fb      	ldrb	r3, [r7, #7]
 8013210:	4618      	mov	r0, r3
 8013212:	f7ff fa95 	bl	8012740 <pbuf_alloc>
 8013216:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d101      	bne.n	8013222 <pbuf_clone+0x2a>
    return NULL;
 801321e:	2300      	movs	r3, #0
 8013220:	e011      	b.n	8013246 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013222:	6839      	ldr	r1, [r7, #0]
 8013224:	68f8      	ldr	r0, [r7, #12]
 8013226:	f7ff fea3 	bl	8012f70 <pbuf_copy>
 801322a:	4603      	mov	r3, r0
 801322c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801322e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d006      	beq.n	8013244 <pbuf_clone+0x4c>
 8013236:	4b06      	ldr	r3, [pc, #24]	@ (8013250 <pbuf_clone+0x58>)
 8013238:	f240 5224 	movw	r2, #1316	@ 0x524
 801323c:	4905      	ldr	r1, [pc, #20]	@ (8013254 <pbuf_clone+0x5c>)
 801323e:	4806      	ldr	r0, [pc, #24]	@ (8013258 <pbuf_clone+0x60>)
 8013240:	f00a f922 	bl	801d488 <iprintf>
  return q;
 8013244:	68fb      	ldr	r3, [r7, #12]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3710      	adds	r7, #16
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	08020dec 	.word	0x08020dec
 8013254:	08021260 	.word	0x08021260
 8013258:	08020e4c 	.word	0x08020e4c

0801325c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013260:	f009 fbba 	bl	801c9d8 <rand>
 8013264:	4603      	mov	r3, r0
 8013266:	b29b      	uxth	r3, r3
 8013268:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801326c:	b29b      	uxth	r3, r3
 801326e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013272:	b29a      	uxth	r2, r3
 8013274:	4b01      	ldr	r3, [pc, #4]	@ (801327c <tcp_init+0x20>)
 8013276:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013278:	bf00      	nop
 801327a:	bd80      	pop	{r7, pc}
 801327c:	2000007c 	.word	0x2000007c

08013280 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	7d1b      	ldrb	r3, [r3, #20]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d105      	bne.n	801329c <tcp_free+0x1c>
 8013290:	4b06      	ldr	r3, [pc, #24]	@ (80132ac <tcp_free+0x2c>)
 8013292:	22d4      	movs	r2, #212	@ 0xd4
 8013294:	4906      	ldr	r1, [pc, #24]	@ (80132b0 <tcp_free+0x30>)
 8013296:	4807      	ldr	r0, [pc, #28]	@ (80132b4 <tcp_free+0x34>)
 8013298:	f00a f8f6 	bl	801d488 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801329c:	6879      	ldr	r1, [r7, #4]
 801329e:	2001      	movs	r0, #1
 80132a0:	f7fe fe8e 	bl	8011fc0 <memp_free>
}
 80132a4:	bf00      	nop
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	080212ec 	.word	0x080212ec
 80132b0:	0802131c 	.word	0x0802131c
 80132b4:	08021330 	.word	0x08021330

080132b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	7d1b      	ldrb	r3, [r3, #20]
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d105      	bne.n	80132d4 <tcp_free_listen+0x1c>
 80132c8:	4b06      	ldr	r3, [pc, #24]	@ (80132e4 <tcp_free_listen+0x2c>)
 80132ca:	22df      	movs	r2, #223	@ 0xdf
 80132cc:	4906      	ldr	r1, [pc, #24]	@ (80132e8 <tcp_free_listen+0x30>)
 80132ce:	4807      	ldr	r0, [pc, #28]	@ (80132ec <tcp_free_listen+0x34>)
 80132d0:	f00a f8da 	bl	801d488 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80132d4:	6879      	ldr	r1, [r7, #4]
 80132d6:	2002      	movs	r0, #2
 80132d8:	f7fe fe72 	bl	8011fc0 <memp_free>
}
 80132dc:	bf00      	nop
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	080212ec 	.word	0x080212ec
 80132e8:	08021358 	.word	0x08021358
 80132ec:	08021330 	.word	0x08021330

080132f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80132f4:	f001 f8ba 	bl	801446c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80132f8:	4b07      	ldr	r3, [pc, #28]	@ (8013318 <tcp_tmr+0x28>)
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	3301      	adds	r3, #1
 80132fe:	b2da      	uxtb	r2, r3
 8013300:	4b05      	ldr	r3, [pc, #20]	@ (8013318 <tcp_tmr+0x28>)
 8013302:	701a      	strb	r2, [r3, #0]
 8013304:	4b04      	ldr	r3, [pc, #16]	@ (8013318 <tcp_tmr+0x28>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f003 0301 	and.w	r3, r3, #1
 801330c:	2b00      	cmp	r3, #0
 801330e:	d001      	beq.n	8013314 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013310:	f000 fd6a 	bl	8013de8 <tcp_slowtmr>
  }
}
 8013314:	bf00      	nop
 8013316:	bd80      	pop	{r7, pc}
 8013318:	2000f3a9 	.word	0x2000f3a9

0801331c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d105      	bne.n	8013338 <tcp_remove_listener+0x1c>
 801332c:	4b0d      	ldr	r3, [pc, #52]	@ (8013364 <tcp_remove_listener+0x48>)
 801332e:	22ff      	movs	r2, #255	@ 0xff
 8013330:	490d      	ldr	r1, [pc, #52]	@ (8013368 <tcp_remove_listener+0x4c>)
 8013332:	480e      	ldr	r0, [pc, #56]	@ (801336c <tcp_remove_listener+0x50>)
 8013334:	f00a f8a8 	bl	801d488 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	60fb      	str	r3, [r7, #12]
 801333c:	e00a      	b.n	8013354 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013342:	683a      	ldr	r2, [r7, #0]
 8013344:	429a      	cmp	r2, r3
 8013346:	d102      	bne.n	801334e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	2200      	movs	r2, #0
 801334c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d1f1      	bne.n	801333e <tcp_remove_listener+0x22>
    }
  }
}
 801335a:	bf00      	nop
 801335c:	bf00      	nop
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	080212ec 	.word	0x080212ec
 8013368:	08021374 	.word	0x08021374
 801336c:	08021330 	.word	0x08021330

08013370 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d106      	bne.n	801338c <tcp_listen_closed+0x1c>
 801337e:	4b14      	ldr	r3, [pc, #80]	@ (80133d0 <tcp_listen_closed+0x60>)
 8013380:	f240 1211 	movw	r2, #273	@ 0x111
 8013384:	4913      	ldr	r1, [pc, #76]	@ (80133d4 <tcp_listen_closed+0x64>)
 8013386:	4814      	ldr	r0, [pc, #80]	@ (80133d8 <tcp_listen_closed+0x68>)
 8013388:	f00a f87e 	bl	801d488 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7d1b      	ldrb	r3, [r3, #20]
 8013390:	2b01      	cmp	r3, #1
 8013392:	d006      	beq.n	80133a2 <tcp_listen_closed+0x32>
 8013394:	4b0e      	ldr	r3, [pc, #56]	@ (80133d0 <tcp_listen_closed+0x60>)
 8013396:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801339a:	4910      	ldr	r1, [pc, #64]	@ (80133dc <tcp_listen_closed+0x6c>)
 801339c:	480e      	ldr	r0, [pc, #56]	@ (80133d8 <tcp_listen_closed+0x68>)
 801339e:	f00a f873 	bl	801d488 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80133a2:	2301      	movs	r3, #1
 80133a4:	60fb      	str	r3, [r7, #12]
 80133a6:	e00b      	b.n	80133c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80133a8:	4a0d      	ldr	r2, [pc, #52]	@ (80133e0 <tcp_listen_closed+0x70>)
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	6879      	ldr	r1, [r7, #4]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff ffb1 	bl	801331c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	3301      	adds	r3, #1
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2b03      	cmp	r3, #3
 80133c4:	d9f0      	bls.n	80133a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80133c6:	bf00      	nop
 80133c8:	bf00      	nop
 80133ca:	3710      	adds	r7, #16
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	080212ec 	.word	0x080212ec
 80133d4:	0802139c 	.word	0x0802139c
 80133d8:	08021330 	.word	0x08021330
 80133dc:	080213a8 	.word	0x080213a8
 80133e0:	080249f4 	.word	0x080249f4

080133e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80133e4:	b5b0      	push	{r4, r5, r7, lr}
 80133e6:	b088      	sub	sp, #32
 80133e8:	af04      	add	r7, sp, #16
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	460b      	mov	r3, r1
 80133ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d106      	bne.n	8013404 <tcp_close_shutdown+0x20>
 80133f6:	4b63      	ldr	r3, [pc, #396]	@ (8013584 <tcp_close_shutdown+0x1a0>)
 80133f8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80133fc:	4962      	ldr	r1, [pc, #392]	@ (8013588 <tcp_close_shutdown+0x1a4>)
 80133fe:	4863      	ldr	r0, [pc, #396]	@ (801358c <tcp_close_shutdown+0x1a8>)
 8013400:	f00a f842 	bl	801d488 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013404:	78fb      	ldrb	r3, [r7, #3]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d066      	beq.n	80134d8 <tcp_close_shutdown+0xf4>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	7d1b      	ldrb	r3, [r3, #20]
 801340e:	2b04      	cmp	r3, #4
 8013410:	d003      	beq.n	801341a <tcp_close_shutdown+0x36>
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	7d1b      	ldrb	r3, [r3, #20]
 8013416:	2b07      	cmp	r3, #7
 8013418:	d15e      	bne.n	80134d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801341e:	2b00      	cmp	r3, #0
 8013420:	d104      	bne.n	801342c <tcp_close_shutdown+0x48>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013426:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801342a:	d055      	beq.n	80134d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	8b5b      	ldrh	r3, [r3, #26]
 8013430:	f003 0310 	and.w	r3, r3, #16
 8013434:	2b00      	cmp	r3, #0
 8013436:	d106      	bne.n	8013446 <tcp_close_shutdown+0x62>
 8013438:	4b52      	ldr	r3, [pc, #328]	@ (8013584 <tcp_close_shutdown+0x1a0>)
 801343a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801343e:	4954      	ldr	r1, [pc, #336]	@ (8013590 <tcp_close_shutdown+0x1ac>)
 8013440:	4852      	ldr	r0, [pc, #328]	@ (801358c <tcp_close_shutdown+0x1a8>)
 8013442:	f00a f821 	bl	801d488 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801344e:	687d      	ldr	r5, [r7, #4]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	3304      	adds	r3, #4
 8013454:	687a      	ldr	r2, [r7, #4]
 8013456:	8ad2      	ldrh	r2, [r2, #22]
 8013458:	6879      	ldr	r1, [r7, #4]
 801345a:	8b09      	ldrh	r1, [r1, #24]
 801345c:	9102      	str	r1, [sp, #8]
 801345e:	9201      	str	r2, [sp, #4]
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	462b      	mov	r3, r5
 8013464:	4622      	mov	r2, r4
 8013466:	4601      	mov	r1, r0
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f005 fde7 	bl	801903c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f001 fbca 	bl	8014c08 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013474:	4b47      	ldr	r3, [pc, #284]	@ (8013594 <tcp_close_shutdown+0x1b0>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	429a      	cmp	r2, r3
 801347c:	d105      	bne.n	801348a <tcp_close_shutdown+0xa6>
 801347e:	4b45      	ldr	r3, [pc, #276]	@ (8013594 <tcp_close_shutdown+0x1b0>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	4a43      	ldr	r2, [pc, #268]	@ (8013594 <tcp_close_shutdown+0x1b0>)
 8013486:	6013      	str	r3, [r2, #0]
 8013488:	e013      	b.n	80134b2 <tcp_close_shutdown+0xce>
 801348a:	4b42      	ldr	r3, [pc, #264]	@ (8013594 <tcp_close_shutdown+0x1b0>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	e00c      	b.n	80134ac <tcp_close_shutdown+0xc8>
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	687a      	ldr	r2, [r7, #4]
 8013498:	429a      	cmp	r2, r3
 801349a:	d104      	bne.n	80134a6 <tcp_close_shutdown+0xc2>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68da      	ldr	r2, [r3, #12]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	60da      	str	r2, [r3, #12]
 80134a4:	e005      	b.n	80134b2 <tcp_close_shutdown+0xce>
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	60fb      	str	r3, [r7, #12]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1ef      	bne.n	8013492 <tcp_close_shutdown+0xae>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2200      	movs	r2, #0
 80134b6:	60da      	str	r2, [r3, #12]
 80134b8:	4b37      	ldr	r3, [pc, #220]	@ (8013598 <tcp_close_shutdown+0x1b4>)
 80134ba:	2201      	movs	r2, #1
 80134bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80134be:	4b37      	ldr	r3, [pc, #220]	@ (801359c <tcp_close_shutdown+0x1b8>)
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d102      	bne.n	80134ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80134c8:	f004 f85e 	bl	8017588 <tcp_trigger_input_pcb_close>
 80134cc:	e002      	b.n	80134d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f7ff fed6 	bl	8013280 <tcp_free>
      }
      return ERR_OK;
 80134d4:	2300      	movs	r3, #0
 80134d6:	e050      	b.n	801357a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	7d1b      	ldrb	r3, [r3, #20]
 80134dc:	2b02      	cmp	r3, #2
 80134de:	d03b      	beq.n	8013558 <tcp_close_shutdown+0x174>
 80134e0:	2b02      	cmp	r3, #2
 80134e2:	dc44      	bgt.n	801356e <tcp_close_shutdown+0x18a>
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <tcp_close_shutdown+0x10a>
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d02a      	beq.n	8013542 <tcp_close_shutdown+0x15e>
 80134ec:	e03f      	b.n	801356e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	8adb      	ldrh	r3, [r3, #22]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d021      	beq.n	801353a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80134f6:	4b2a      	ldr	r3, [pc, #168]	@ (80135a0 <tcp_close_shutdown+0x1bc>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d105      	bne.n	801350c <tcp_close_shutdown+0x128>
 8013500:	4b27      	ldr	r3, [pc, #156]	@ (80135a0 <tcp_close_shutdown+0x1bc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	4a26      	ldr	r2, [pc, #152]	@ (80135a0 <tcp_close_shutdown+0x1bc>)
 8013508:	6013      	str	r3, [r2, #0]
 801350a:	e013      	b.n	8013534 <tcp_close_shutdown+0x150>
 801350c:	4b24      	ldr	r3, [pc, #144]	@ (80135a0 <tcp_close_shutdown+0x1bc>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	60bb      	str	r3, [r7, #8]
 8013512:	e00c      	b.n	801352e <tcp_close_shutdown+0x14a>
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	429a      	cmp	r2, r3
 801351c:	d104      	bne.n	8013528 <tcp_close_shutdown+0x144>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	68da      	ldr	r2, [r3, #12]
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	60da      	str	r2, [r3, #12]
 8013526:	e005      	b.n	8013534 <tcp_close_shutdown+0x150>
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	68db      	ldr	r3, [r3, #12]
 801352c:	60bb      	str	r3, [r7, #8]
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d1ef      	bne.n	8013514 <tcp_close_shutdown+0x130>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7ff fea0 	bl	8013280 <tcp_free>
      break;
 8013540:	e01a      	b.n	8013578 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013542:	6878      	ldr	r0, [r7, #4]
 8013544:	f7ff ff14 	bl	8013370 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013548:	6879      	ldr	r1, [r7, #4]
 801354a:	4816      	ldr	r0, [pc, #88]	@ (80135a4 <tcp_close_shutdown+0x1c0>)
 801354c:	f001 fbac 	bl	8014ca8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7ff feb1 	bl	80132b8 <tcp_free_listen>
      break;
 8013556:	e00f      	b.n	8013578 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013558:	6879      	ldr	r1, [r7, #4]
 801355a:	480e      	ldr	r0, [pc, #56]	@ (8013594 <tcp_close_shutdown+0x1b0>)
 801355c:	f001 fba4 	bl	8014ca8 <tcp_pcb_remove>
 8013560:	4b0d      	ldr	r3, [pc, #52]	@ (8013598 <tcp_close_shutdown+0x1b4>)
 8013562:	2201      	movs	r2, #1
 8013564:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f7ff fe8a 	bl	8013280 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801356c:	e004      	b.n	8013578 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f000 f81a 	bl	80135a8 <tcp_close_shutdown_fin>
 8013574:	4603      	mov	r3, r0
 8013576:	e000      	b.n	801357a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013578:	2300      	movs	r3, #0
}
 801357a:	4618      	mov	r0, r3
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bdb0      	pop	{r4, r5, r7, pc}
 8013582:	bf00      	nop
 8013584:	080212ec 	.word	0x080212ec
 8013588:	080213c0 	.word	0x080213c0
 801358c:	08021330 	.word	0x08021330
 8013590:	080213e0 	.word	0x080213e0
 8013594:	2000f3a0 	.word	0x2000f3a0
 8013598:	2000f3a8 	.word	0x2000f3a8
 801359c:	2000f3e0 	.word	0x2000f3e0
 80135a0:	2000f398 	.word	0x2000f398
 80135a4:	2000f39c 	.word	0x2000f39c

080135a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <tcp_close_shutdown_fin+0x1c>
 80135b6:	4b2e      	ldr	r3, [pc, #184]	@ (8013670 <tcp_close_shutdown_fin+0xc8>)
 80135b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80135bc:	492d      	ldr	r1, [pc, #180]	@ (8013674 <tcp_close_shutdown_fin+0xcc>)
 80135be:	482e      	ldr	r0, [pc, #184]	@ (8013678 <tcp_close_shutdown_fin+0xd0>)
 80135c0:	f009 ff62 	bl	801d488 <iprintf>

  switch (pcb->state) {
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	7d1b      	ldrb	r3, [r3, #20]
 80135c8:	2b07      	cmp	r3, #7
 80135ca:	d020      	beq.n	801360e <tcp_close_shutdown_fin+0x66>
 80135cc:	2b07      	cmp	r3, #7
 80135ce:	dc2b      	bgt.n	8013628 <tcp_close_shutdown_fin+0x80>
 80135d0:	2b03      	cmp	r3, #3
 80135d2:	d002      	beq.n	80135da <tcp_close_shutdown_fin+0x32>
 80135d4:	2b04      	cmp	r3, #4
 80135d6:	d00d      	beq.n	80135f4 <tcp_close_shutdown_fin+0x4c>
 80135d8:	e026      	b.n	8013628 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f004 fe3c 	bl	8018258 <tcp_send_fin>
 80135e0:	4603      	mov	r3, r0
 80135e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80135e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d11f      	bne.n	801362c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2205      	movs	r2, #5
 80135f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80135f2:	e01b      	b.n	801362c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f004 fe2f 	bl	8018258 <tcp_send_fin>
 80135fa:	4603      	mov	r3, r0
 80135fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80135fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d114      	bne.n	8013630 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2205      	movs	r2, #5
 801360a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801360c:	e010      	b.n	8013630 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f004 fe22 	bl	8018258 <tcp_send_fin>
 8013614:	4603      	mov	r3, r0
 8013616:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d109      	bne.n	8013634 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2209      	movs	r2, #9
 8013624:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013626:	e005      	b.n	8013634 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013628:	2300      	movs	r3, #0
 801362a:	e01c      	b.n	8013666 <tcp_close_shutdown_fin+0xbe>
      break;
 801362c:	bf00      	nop
 801362e:	e002      	b.n	8013636 <tcp_close_shutdown_fin+0x8e>
      break;
 8013630:	bf00      	nop
 8013632:	e000      	b.n	8013636 <tcp_close_shutdown_fin+0x8e>
      break;
 8013634:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d103      	bne.n	8013646 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f004 ff48 	bl	80184d4 <tcp_output>
 8013644:	e00d      	b.n	8013662 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801364e:	d108      	bne.n	8013662 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	8b5b      	ldrh	r3, [r3, #26]
 8013654:	f043 0308 	orr.w	r3, r3, #8
 8013658:	b29a      	uxth	r2, r3
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801365e:	2300      	movs	r3, #0
 8013660:	e001      	b.n	8013666 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013666:	4618      	mov	r0, r3
 8013668:	3710      	adds	r7, #16
 801366a:	46bd      	mov	sp, r7
 801366c:	bd80      	pop	{r7, pc}
 801366e:	bf00      	nop
 8013670:	080212ec 	.word	0x080212ec
 8013674:	0802139c 	.word	0x0802139c
 8013678:	08021330 	.word	0x08021330

0801367c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d109      	bne.n	801369e <tcp_close+0x22>
 801368a:	4b0f      	ldr	r3, [pc, #60]	@ (80136c8 <tcp_close+0x4c>)
 801368c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013690:	490e      	ldr	r1, [pc, #56]	@ (80136cc <tcp_close+0x50>)
 8013692:	480f      	ldr	r0, [pc, #60]	@ (80136d0 <tcp_close+0x54>)
 8013694:	f009 fef8 	bl	801d488 <iprintf>
 8013698:	f06f 030f 	mvn.w	r3, #15
 801369c:	e00f      	b.n	80136be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	7d1b      	ldrb	r3, [r3, #20]
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d006      	beq.n	80136b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	8b5b      	ldrh	r3, [r3, #26]
 80136aa:	f043 0310 	orr.w	r3, r3, #16
 80136ae:	b29a      	uxth	r2, r3
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80136b4:	2101      	movs	r1, #1
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7ff fe94 	bl	80133e4 <tcp_close_shutdown>
 80136bc:	4603      	mov	r3, r0
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	080212ec 	.word	0x080212ec
 80136cc:	080213fc 	.word	0x080213fc
 80136d0:	08021330 	.word	0x08021330

080136d4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d109      	bne.n	80136fa <tcp_shutdown+0x26>
 80136e6:	4b26      	ldr	r3, [pc, #152]	@ (8013780 <tcp_shutdown+0xac>)
 80136e8:	f240 2207 	movw	r2, #519	@ 0x207
 80136ec:	4925      	ldr	r1, [pc, #148]	@ (8013784 <tcp_shutdown+0xb0>)
 80136ee:	4826      	ldr	r0, [pc, #152]	@ (8013788 <tcp_shutdown+0xb4>)
 80136f0:	f009 feca 	bl	801d488 <iprintf>
 80136f4:	f06f 030f 	mvn.w	r3, #15
 80136f8:	e03d      	b.n	8013776 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	7d1b      	ldrb	r3, [r3, #20]
 80136fe:	2b01      	cmp	r3, #1
 8013700:	d102      	bne.n	8013708 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013702:	f06f 030a 	mvn.w	r3, #10
 8013706:	e036      	b.n	8013776 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d01b      	beq.n	8013746 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	8b5b      	ldrh	r3, [r3, #26]
 8013712:	f043 0310 	orr.w	r3, r3, #16
 8013716:	b29a      	uxth	r2, r3
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d005      	beq.n	801372e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013722:	2101      	movs	r1, #1
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f7ff fe5d 	bl	80133e4 <tcp_close_shutdown>
 801372a:	4603      	mov	r3, r0
 801372c:	e023      	b.n	8013776 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013732:	2b00      	cmp	r3, #0
 8013734:	d007      	beq.n	8013746 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff fae4 	bl	8012d08 <pbuf_free>
      pcb->refused_data = NULL;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d013      	beq.n	8013774 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	7d1b      	ldrb	r3, [r3, #20]
 8013750:	2b04      	cmp	r3, #4
 8013752:	dc02      	bgt.n	801375a <tcp_shutdown+0x86>
 8013754:	2b03      	cmp	r3, #3
 8013756:	da02      	bge.n	801375e <tcp_shutdown+0x8a>
 8013758:	e009      	b.n	801376e <tcp_shutdown+0x9a>
 801375a:	2b07      	cmp	r3, #7
 801375c:	d107      	bne.n	801376e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	b2db      	uxtb	r3, r3
 8013762:	4619      	mov	r1, r3
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f7ff fe3d 	bl	80133e4 <tcp_close_shutdown>
 801376a:	4603      	mov	r3, r0
 801376c:	e003      	b.n	8013776 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801376e:	f06f 030a 	mvn.w	r3, #10
 8013772:	e000      	b.n	8013776 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013774:	2300      	movs	r3, #0
}
 8013776:	4618      	mov	r0, r3
 8013778:	3710      	adds	r7, #16
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	080212ec 	.word	0x080212ec
 8013784:	08021414 	.word	0x08021414
 8013788:	08021330 	.word	0x08021330

0801378c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08e      	sub	sp, #56	@ 0x38
 8013790:	af04      	add	r7, sp, #16
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d107      	bne.n	80137ac <tcp_abandon+0x20>
 801379c:	4b52      	ldr	r3, [pc, #328]	@ (80138e8 <tcp_abandon+0x15c>)
 801379e:	f240 223d 	movw	r2, #573	@ 0x23d
 80137a2:	4952      	ldr	r1, [pc, #328]	@ (80138ec <tcp_abandon+0x160>)
 80137a4:	4852      	ldr	r0, [pc, #328]	@ (80138f0 <tcp_abandon+0x164>)
 80137a6:	f009 fe6f 	bl	801d488 <iprintf>
 80137aa:	e099      	b.n	80138e0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	7d1b      	ldrb	r3, [r3, #20]
 80137b0:	2b01      	cmp	r3, #1
 80137b2:	d106      	bne.n	80137c2 <tcp_abandon+0x36>
 80137b4:	4b4c      	ldr	r3, [pc, #304]	@ (80138e8 <tcp_abandon+0x15c>)
 80137b6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80137ba:	494e      	ldr	r1, [pc, #312]	@ (80138f4 <tcp_abandon+0x168>)
 80137bc:	484c      	ldr	r0, [pc, #304]	@ (80138f0 <tcp_abandon+0x164>)
 80137be:	f009 fe63 	bl	801d488 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	7d1b      	ldrb	r3, [r3, #20]
 80137c6:	2b0a      	cmp	r3, #10
 80137c8:	d107      	bne.n	80137da <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80137ca:	6879      	ldr	r1, [r7, #4]
 80137cc:	484a      	ldr	r0, [pc, #296]	@ (80138f8 <tcp_abandon+0x16c>)
 80137ce:	f001 fa6b 	bl	8014ca8 <tcp_pcb_remove>
    tcp_free(pcb);
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff fd54 	bl	8013280 <tcp_free>
 80137d8:	e082      	b.n	80138e0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80137da:	2300      	movs	r3, #0
 80137dc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80137de:	2300      	movs	r3, #0
 80137e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137e6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137ec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80137f4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	691b      	ldr	r3, [r3, #16]
 80137fa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	7d1b      	ldrb	r3, [r3, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d126      	bne.n	8013852 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	8adb      	ldrh	r3, [r3, #22]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d02e      	beq.n	801386a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801380c:	4b3b      	ldr	r3, [pc, #236]	@ (80138fc <tcp_abandon+0x170>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	429a      	cmp	r2, r3
 8013814:	d105      	bne.n	8013822 <tcp_abandon+0x96>
 8013816:	4b39      	ldr	r3, [pc, #228]	@ (80138fc <tcp_abandon+0x170>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	68db      	ldr	r3, [r3, #12]
 801381c:	4a37      	ldr	r2, [pc, #220]	@ (80138fc <tcp_abandon+0x170>)
 801381e:	6013      	str	r3, [r2, #0]
 8013820:	e013      	b.n	801384a <tcp_abandon+0xbe>
 8013822:	4b36      	ldr	r3, [pc, #216]	@ (80138fc <tcp_abandon+0x170>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	61fb      	str	r3, [r7, #28]
 8013828:	e00c      	b.n	8013844 <tcp_abandon+0xb8>
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	68db      	ldr	r3, [r3, #12]
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	429a      	cmp	r2, r3
 8013832:	d104      	bne.n	801383e <tcp_abandon+0xb2>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	68da      	ldr	r2, [r3, #12]
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	60da      	str	r2, [r3, #12]
 801383c:	e005      	b.n	801384a <tcp_abandon+0xbe>
 801383e:	69fb      	ldr	r3, [r7, #28]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	61fb      	str	r3, [r7, #28]
 8013844:	69fb      	ldr	r3, [r7, #28]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d1ef      	bne.n	801382a <tcp_abandon+0x9e>
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2200      	movs	r2, #0
 801384e:	60da      	str	r2, [r3, #12]
 8013850:	e00b      	b.n	801386a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	8adb      	ldrh	r3, [r3, #22]
 801385a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801385c:	6879      	ldr	r1, [r7, #4]
 801385e:	4828      	ldr	r0, [pc, #160]	@ (8013900 <tcp_abandon+0x174>)
 8013860:	f001 fa22 	bl	8014ca8 <tcp_pcb_remove>
 8013864:	4b27      	ldr	r3, [pc, #156]	@ (8013904 <tcp_abandon+0x178>)
 8013866:	2201      	movs	r2, #1
 8013868:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801386e:	2b00      	cmp	r3, #0
 8013870:	d004      	beq.n	801387c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013876:	4618      	mov	r0, r3
 8013878:	f000 fed8 	bl	801462c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013880:	2b00      	cmp	r3, #0
 8013882:	d004      	beq.n	801388e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013888:	4618      	mov	r0, r3
 801388a:	f000 fecf 	bl	801462c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013892:	2b00      	cmp	r3, #0
 8013894:	d004      	beq.n	80138a0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801389a:	4618      	mov	r0, r3
 801389c:	f000 fec6 	bl	801462c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80138a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d00e      	beq.n	80138c4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80138a6:	6879      	ldr	r1, [r7, #4]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	3304      	adds	r3, #4
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	8b12      	ldrh	r2, [r2, #24]
 80138b0:	9202      	str	r2, [sp, #8]
 80138b2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80138b4:	9201      	str	r2, [sp, #4]
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	460b      	mov	r3, r1
 80138ba:	697a      	ldr	r2, [r7, #20]
 80138bc:	69b9      	ldr	r1, [r7, #24]
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f005 fbbc 	bl	801903c <tcp_rst>
    }
    last_state = pcb->state;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	7d1b      	ldrb	r3, [r3, #20]
 80138c8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff fcd8 	bl	8013280 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d004      	beq.n	80138e0 <tcp_abandon+0x154>
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	f06f 010c 	mvn.w	r1, #12
 80138dc:	68f8      	ldr	r0, [r7, #12]
 80138de:	4798      	blx	r3
  }
}
 80138e0:	3728      	adds	r7, #40	@ 0x28
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	080212ec 	.word	0x080212ec
 80138ec:	08021430 	.word	0x08021430
 80138f0:	08021330 	.word	0x08021330
 80138f4:	0802144c 	.word	0x0802144c
 80138f8:	2000f3a4 	.word	0x2000f3a4
 80138fc:	2000f398 	.word	0x2000f398
 8013900:	2000f3a0 	.word	0x2000f3a0
 8013904:	2000f3a8 	.word	0x2000f3a8

08013908 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013910:	2101      	movs	r1, #1
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f7ff ff3a 	bl	801378c <tcp_abandon>
}
 8013918:	bf00      	nop
 801391a:	3708      	adds	r7, #8
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b088      	sub	sp, #32
 8013924:	af00      	add	r7, sp, #0
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	4613      	mov	r3, r2
 801392c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801392e:	2304      	movs	r3, #4
 8013930:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d101      	bne.n	801393c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013938:	4b3e      	ldr	r3, [pc, #248]	@ (8013a34 <tcp_bind+0x114>)
 801393a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d109      	bne.n	8013956 <tcp_bind+0x36>
 8013942:	4b3d      	ldr	r3, [pc, #244]	@ (8013a38 <tcp_bind+0x118>)
 8013944:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8013948:	493c      	ldr	r1, [pc, #240]	@ (8013a3c <tcp_bind+0x11c>)
 801394a:	483d      	ldr	r0, [pc, #244]	@ (8013a40 <tcp_bind+0x120>)
 801394c:	f009 fd9c 	bl	801d488 <iprintf>
 8013950:	f06f 030f 	mvn.w	r3, #15
 8013954:	e06a      	b.n	8013a2c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	7d1b      	ldrb	r3, [r3, #20]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d009      	beq.n	8013972 <tcp_bind+0x52>
 801395e:	4b36      	ldr	r3, [pc, #216]	@ (8013a38 <tcp_bind+0x118>)
 8013960:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013964:	4937      	ldr	r1, [pc, #220]	@ (8013a44 <tcp_bind+0x124>)
 8013966:	4836      	ldr	r0, [pc, #216]	@ (8013a40 <tcp_bind+0x120>)
 8013968:	f009 fd8e 	bl	801d488 <iprintf>
 801396c:	f06f 0305 	mvn.w	r3, #5
 8013970:	e05c      	b.n	8013a2c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013972:	88fb      	ldrh	r3, [r7, #6]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d109      	bne.n	801398c <tcp_bind+0x6c>
    port = tcp_new_port();
 8013978:	f000 f9f0 	bl	8013d5c <tcp_new_port>
 801397c:	4603      	mov	r3, r0
 801397e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013980:	88fb      	ldrh	r3, [r7, #6]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d135      	bne.n	80139f2 <tcp_bind+0xd2>
      return ERR_BUF;
 8013986:	f06f 0301 	mvn.w	r3, #1
 801398a:	e04f      	b.n	8013a2c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801398c:	2300      	movs	r3, #0
 801398e:	61fb      	str	r3, [r7, #28]
 8013990:	e02b      	b.n	80139ea <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013992:	4a2d      	ldr	r2, [pc, #180]	@ (8013a48 <tcp_bind+0x128>)
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	61bb      	str	r3, [r7, #24]
 801399e:	e01e      	b.n	80139de <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80139a0:	69bb      	ldr	r3, [r7, #24]
 80139a2:	8adb      	ldrh	r3, [r3, #22]
 80139a4:	88fa      	ldrh	r2, [r7, #6]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d116      	bne.n	80139d8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80139aa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d010      	beq.n	80139d2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80139b0:	69bb      	ldr	r3, [r7, #24]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d00c      	beq.n	80139d2 <tcp_bind+0xb2>
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d009      	beq.n	80139d2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d005      	beq.n	80139d2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80139c6:	69bb      	ldr	r3, [r7, #24]
 80139c8:	681a      	ldr	r2, [r3, #0]
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d102      	bne.n	80139d8 <tcp_bind+0xb8>
              return ERR_USE;
 80139d2:	f06f 0307 	mvn.w	r3, #7
 80139d6:	e029      	b.n	8013a2c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	61bb      	str	r3, [r7, #24]
 80139de:	69bb      	ldr	r3, [r7, #24]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d1dd      	bne.n	80139a0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	3301      	adds	r3, #1
 80139e8:	61fb      	str	r3, [r7, #28]
 80139ea:	69fa      	ldr	r2, [r7, #28]
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	dbcf      	blt.n	8013992 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00c      	beq.n	8013a12 <tcp_bind+0xf2>
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d008      	beq.n	8013a12 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <tcp_bind+0xec>
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	e000      	b.n	8013a0e <tcp_bind+0xee>
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	68fa      	ldr	r2, [r7, #12]
 8013a10:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	88fa      	ldrh	r2, [r7, #6]
 8013a16:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013a18:	4b0c      	ldr	r3, [pc, #48]	@ (8013a4c <tcp_bind+0x12c>)
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	60da      	str	r2, [r3, #12]
 8013a20:	4a0a      	ldr	r2, [pc, #40]	@ (8013a4c <tcp_bind+0x12c>)
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	6013      	str	r3, [r2, #0]
 8013a26:	f005 fccb 	bl	80193c0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013a2a:	2300      	movs	r3, #0
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3720      	adds	r7, #32
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	08024a1c 	.word	0x08024a1c
 8013a38:	080212ec 	.word	0x080212ec
 8013a3c:	08021480 	.word	0x08021480
 8013a40:	08021330 	.word	0x08021330
 8013a44:	08021498 	.word	0x08021498
 8013a48:	080249f4 	.word	0x080249f4
 8013a4c:	2000f398 	.word	0x2000f398

08013a50 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	4613      	mov	r3, r2
 8013a5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d106      	bne.n	8013a72 <tcp_accept_null+0x22>
 8013a64:	4b07      	ldr	r3, [pc, #28]	@ (8013a84 <tcp_accept_null+0x34>)
 8013a66:	f240 320f 	movw	r2, #783	@ 0x30f
 8013a6a:	4907      	ldr	r1, [pc, #28]	@ (8013a88 <tcp_accept_null+0x38>)
 8013a6c:	4807      	ldr	r0, [pc, #28]	@ (8013a8c <tcp_accept_null+0x3c>)
 8013a6e:	f009 fd0b 	bl	801d488 <iprintf>

  tcp_abort(pcb);
 8013a72:	68b8      	ldr	r0, [r7, #8]
 8013a74:	f7ff ff48 	bl	8013908 <tcp_abort>

  return ERR_ABRT;
 8013a78:	f06f 030c 	mvn.w	r3, #12
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3710      	adds	r7, #16
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	080212ec 	.word	0x080212ec
 8013a88:	080214c0 	.word	0x080214c0
 8013a8c:	08021330 	.word	0x08021330

08013a90 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	460b      	mov	r3, r1
 8013a9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8013a9c:	78fb      	ldrb	r3, [r7, #3]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f000 f806 	bl	8013ab4 <tcp_listen_with_backlog_and_err>
 8013aa8:	4603      	mov	r3, r0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
	...

08013ab4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b088      	sub	sp, #32
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	60f8      	str	r0, [r7, #12]
 8013abc:	460b      	mov	r3, r1
 8013abe:	607a      	str	r2, [r7, #4]
 8013ac0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d109      	bne.n	8013ae0 <tcp_listen_with_backlog_and_err+0x2c>
 8013acc:	4b47      	ldr	r3, [pc, #284]	@ (8013bec <tcp_listen_with_backlog_and_err+0x138>)
 8013ace:	f240 3259 	movw	r2, #857	@ 0x359
 8013ad2:	4947      	ldr	r1, [pc, #284]	@ (8013bf0 <tcp_listen_with_backlog_and_err+0x13c>)
 8013ad4:	4847      	ldr	r0, [pc, #284]	@ (8013bf4 <tcp_listen_with_backlog_and_err+0x140>)
 8013ad6:	f009 fcd7 	bl	801d488 <iprintf>
 8013ada:	23f0      	movs	r3, #240	@ 0xf0
 8013adc:	76fb      	strb	r3, [r7, #27]
 8013ade:	e079      	b.n	8013bd4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	7d1b      	ldrb	r3, [r3, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d009      	beq.n	8013afc <tcp_listen_with_backlog_and_err+0x48>
 8013ae8:	4b40      	ldr	r3, [pc, #256]	@ (8013bec <tcp_listen_with_backlog_and_err+0x138>)
 8013aea:	f240 325a 	movw	r2, #858	@ 0x35a
 8013aee:	4942      	ldr	r1, [pc, #264]	@ (8013bf8 <tcp_listen_with_backlog_and_err+0x144>)
 8013af0:	4840      	ldr	r0, [pc, #256]	@ (8013bf4 <tcp_listen_with_backlog_and_err+0x140>)
 8013af2:	f009 fcc9 	bl	801d488 <iprintf>
 8013af6:	23f1      	movs	r3, #241	@ 0xf1
 8013af8:	76fb      	strb	r3, [r7, #27]
 8013afa:	e06b      	b.n	8013bd4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	7d1b      	ldrb	r3, [r3, #20]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d104      	bne.n	8013b0e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013b08:	23f7      	movs	r3, #247	@ 0xf7
 8013b0a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013b0c:	e062      	b.n	8013bd4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013b0e:	2002      	movs	r0, #2
 8013b10:	f7fe f9e0 	bl	8011ed4 <memp_malloc>
 8013b14:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d102      	bne.n	8013b22 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013b1c:	23ff      	movs	r3, #255	@ 0xff
 8013b1e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013b20:	e058      	b.n	8013bd4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	691a      	ldr	r2, [r3, #16]
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	8ada      	ldrh	r2, [r3, #22]
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	2201      	movs	r2, #1
 8013b36:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	7d5a      	ldrb	r2, [r3, #21]
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	7a5a      	ldrb	r2, [r3, #9]
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	7ada      	ldrb	r2, [r3, #11]
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	7a9a      	ldrb	r2, [r3, #10]
 8013b5a:	69fb      	ldr	r3, [r7, #28]
 8013b5c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	8adb      	ldrh	r3, [r3, #22]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d021      	beq.n	8013bb2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013b6e:	4b23      	ldr	r3, [pc, #140]	@ (8013bfc <tcp_listen_with_backlog_and_err+0x148>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	68fa      	ldr	r2, [r7, #12]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d105      	bne.n	8013b84 <tcp_listen_with_backlog_and_err+0xd0>
 8013b78:	4b20      	ldr	r3, [pc, #128]	@ (8013bfc <tcp_listen_with_backlog_and_err+0x148>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	68db      	ldr	r3, [r3, #12]
 8013b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8013bfc <tcp_listen_with_backlog_and_err+0x148>)
 8013b80:	6013      	str	r3, [r2, #0]
 8013b82:	e013      	b.n	8013bac <tcp_listen_with_backlog_and_err+0xf8>
 8013b84:	4b1d      	ldr	r3, [pc, #116]	@ (8013bfc <tcp_listen_with_backlog_and_err+0x148>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	617b      	str	r3, [r7, #20]
 8013b8a:	e00c      	b.n	8013ba6 <tcp_listen_with_backlog_and_err+0xf2>
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	68fa      	ldr	r2, [r7, #12]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d104      	bne.n	8013ba0 <tcp_listen_with_backlog_and_err+0xec>
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	68da      	ldr	r2, [r3, #12]
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	60da      	str	r2, [r3, #12]
 8013b9e:	e005      	b.n	8013bac <tcp_listen_with_backlog_and_err+0xf8>
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d1ef      	bne.n	8013b8c <tcp_listen_with_backlog_and_err+0xd8>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	f7ff fb64 	bl	8013280 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013bb8:	69fb      	ldr	r3, [r7, #28]
 8013bba:	4a11      	ldr	r2, [pc, #68]	@ (8013c00 <tcp_listen_with_backlog_and_err+0x14c>)
 8013bbc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013bbe:	4b11      	ldr	r3, [pc, #68]	@ (8013c04 <tcp_listen_with_backlog_and_err+0x150>)
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	69fb      	ldr	r3, [r7, #28]
 8013bc4:	60da      	str	r2, [r3, #12]
 8013bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8013c04 <tcp_listen_with_backlog_and_err+0x150>)
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	6013      	str	r3, [r2, #0]
 8013bcc:	f005 fbf8 	bl	80193c0 <tcp_timer_needed>
  res = ERR_OK;
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	7efa      	ldrb	r2, [r7, #27]
 8013bde:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013be0:	69fb      	ldr	r3, [r7, #28]
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3720      	adds	r7, #32
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	080212ec 	.word	0x080212ec
 8013bf0:	080214e0 	.word	0x080214e0
 8013bf4:	08021330 	.word	0x08021330
 8013bf8:	08021510 	.word	0x08021510
 8013bfc:	2000f398 	.word	0x2000f398
 8013c00:	08013a51 	.word	0x08013a51
 8013c04:	2000f39c 	.word	0x2000f39c

08013c08 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <tcp_update_rcv_ann_wnd+0x1c>
 8013c16:	4b25      	ldr	r3, [pc, #148]	@ (8013cac <tcp_update_rcv_ann_wnd+0xa4>)
 8013c18:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013c1c:	4924      	ldr	r1, [pc, #144]	@ (8013cb0 <tcp_update_rcv_ann_wnd+0xa8>)
 8013c1e:	4825      	ldr	r0, [pc, #148]	@ (8013cb4 <tcp_update_rcv_ann_wnd+0xac>)
 8013c20:	f009 fc32 	bl	801d488 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013c2c:	4413      	add	r3, r2
 8013c2e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c34:	687a      	ldr	r2, [r7, #4]
 8013c36:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013c38:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013c3c:	bf28      	it	cs
 8013c3e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013c42:	b292      	uxth	r2, r2
 8013c44:	4413      	add	r3, r2
 8013c46:	68fa      	ldr	r2, [r7, #12]
 8013c48:	1ad3      	subs	r3, r2, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	db08      	blt.n	8013c60 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	e020      	b.n	8013ca2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c68:	1ad3      	subs	r3, r2, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	dd03      	ble.n	8013c76 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2200      	movs	r2, #0
 8013c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013c74:	e014      	b.n	8013ca0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c7e:	1ad3      	subs	r3, r2, r3
 8013c80:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013c88:	d306      	bcc.n	8013c98 <tcp_update_rcv_ann_wnd+0x90>
 8013c8a:	4b08      	ldr	r3, [pc, #32]	@ (8013cac <tcp_update_rcv_ann_wnd+0xa4>)
 8013c8c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013c90:	4909      	ldr	r1, [pc, #36]	@ (8013cb8 <tcp_update_rcv_ann_wnd+0xb0>)
 8013c92:	4808      	ldr	r0, [pc, #32]	@ (8013cb4 <tcp_update_rcv_ann_wnd+0xac>)
 8013c94:	f009 fbf8 	bl	801d488 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013ca0:	2300      	movs	r3, #0
  }
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3710      	adds	r7, #16
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	080212ec 	.word	0x080212ec
 8013cb0:	08021548 	.word	0x08021548
 8013cb4:	08021330 	.word	0x08021330
 8013cb8:	0802156c 	.word	0x0802156c

08013cbc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b084      	sub	sp, #16
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	460b      	mov	r3, r1
 8013cc6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d107      	bne.n	8013cde <tcp_recved+0x22>
 8013cce:	4b1f      	ldr	r3, [pc, #124]	@ (8013d4c <tcp_recved+0x90>)
 8013cd0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013cd4:	491e      	ldr	r1, [pc, #120]	@ (8013d50 <tcp_recved+0x94>)
 8013cd6:	481f      	ldr	r0, [pc, #124]	@ (8013d54 <tcp_recved+0x98>)
 8013cd8:	f009 fbd6 	bl	801d488 <iprintf>
 8013cdc:	e032      	b.n	8013d44 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	7d1b      	ldrb	r3, [r3, #20]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	d106      	bne.n	8013cf4 <tcp_recved+0x38>
 8013ce6:	4b19      	ldr	r3, [pc, #100]	@ (8013d4c <tcp_recved+0x90>)
 8013ce8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013cec:	491a      	ldr	r1, [pc, #104]	@ (8013d58 <tcp_recved+0x9c>)
 8013cee:	4819      	ldr	r0, [pc, #100]	@ (8013d54 <tcp_recved+0x98>)
 8013cf0:	f009 fbca 	bl	801d488 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013cf8:	887b      	ldrh	r3, [r7, #2]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013cfe:	89fb      	ldrh	r3, [r7, #14]
 8013d00:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013d04:	d804      	bhi.n	8013d10 <tcp_recved+0x54>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013d0a:	89fa      	ldrh	r2, [r7, #14]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d204      	bcs.n	8013d1a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013d16:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013d18:	e002      	b.n	8013d20 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	89fa      	ldrh	r2, [r7, #14]
 8013d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7ff ff71 	bl	8013c08 <tcp_update_rcv_ann_wnd>
 8013d26:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013d2e:	d309      	bcc.n	8013d44 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	8b5b      	ldrh	r3, [r3, #26]
 8013d34:	f043 0302 	orr.w	r3, r3, #2
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f004 fbc8 	bl	80184d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013d44:	3710      	adds	r7, #16
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	080212ec 	.word	0x080212ec
 8013d50:	08021588 	.word	0x08021588
 8013d54:	08021330 	.word	0x08021330
 8013d58:	080215a0 	.word	0x080215a0

08013d5c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013d66:	4b1e      	ldr	r3, [pc, #120]	@ (8013de0 <tcp_new_port+0x84>)
 8013d68:	881b      	ldrh	r3, [r3, #0]
 8013d6a:	3301      	adds	r3, #1
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8013de0 <tcp_new_port+0x84>)
 8013d70:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013d72:	4b1b      	ldr	r3, [pc, #108]	@ (8013de0 <tcp_new_port+0x84>)
 8013d74:	881b      	ldrh	r3, [r3, #0]
 8013d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d7a:	4293      	cmp	r3, r2
 8013d7c:	d103      	bne.n	8013d86 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013d7e:	4b18      	ldr	r3, [pc, #96]	@ (8013de0 <tcp_new_port+0x84>)
 8013d80:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013d84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013d86:	2300      	movs	r3, #0
 8013d88:	71fb      	strb	r3, [r7, #7]
 8013d8a:	e01e      	b.n	8013dca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013d8c:	79fb      	ldrb	r3, [r7, #7]
 8013d8e:	4a15      	ldr	r2, [pc, #84]	@ (8013de4 <tcp_new_port+0x88>)
 8013d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	603b      	str	r3, [r7, #0]
 8013d98:	e011      	b.n	8013dbe <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	8ada      	ldrh	r2, [r3, #22]
 8013d9e:	4b10      	ldr	r3, [pc, #64]	@ (8013de0 <tcp_new_port+0x84>)
 8013da0:	881b      	ldrh	r3, [r3, #0]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d108      	bne.n	8013db8 <tcp_new_port+0x5c>
        n++;
 8013da6:	88bb      	ldrh	r3, [r7, #4]
 8013da8:	3301      	adds	r3, #1
 8013daa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013dac:	88bb      	ldrh	r3, [r7, #4]
 8013dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013db2:	d3d8      	bcc.n	8013d66 <tcp_new_port+0xa>
          return 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	e00d      	b.n	8013dd4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013db8:	683b      	ldr	r3, [r7, #0]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	603b      	str	r3, [r7, #0]
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d1ea      	bne.n	8013d9a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013dc4:	79fb      	ldrb	r3, [r7, #7]
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	71fb      	strb	r3, [r7, #7]
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	2b03      	cmp	r3, #3
 8013dce:	d9dd      	bls.n	8013d8c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013dd0:	4b03      	ldr	r3, [pc, #12]	@ (8013de0 <tcp_new_port+0x84>)
 8013dd2:	881b      	ldrh	r3, [r3, #0]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr
 8013de0:	2000007c 	.word	0x2000007c
 8013de4:	080249f4 	.word	0x080249f4

08013de8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013de8:	b5b0      	push	{r4, r5, r7, lr}
 8013dea:	b090      	sub	sp, #64	@ 0x40
 8013dec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013dee:	2300      	movs	r3, #0
 8013df0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013df4:	4b95      	ldr	r3, [pc, #596]	@ (801404c <tcp_slowtmr+0x264>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	4a94      	ldr	r2, [pc, #592]	@ (801404c <tcp_slowtmr+0x264>)
 8013dfc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013dfe:	4b94      	ldr	r3, [pc, #592]	@ (8014050 <tcp_slowtmr+0x268>)
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	3301      	adds	r3, #1
 8013e04:	b2da      	uxtb	r2, r3
 8013e06:	4b92      	ldr	r3, [pc, #584]	@ (8014050 <tcp_slowtmr+0x268>)
 8013e08:	701a      	strb	r2, [r3, #0]
 8013e0a:	e000      	b.n	8013e0e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013e0c:	bf00      	nop
  prev = NULL;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013e12:	4b90      	ldr	r3, [pc, #576]	@ (8014054 <tcp_slowtmr+0x26c>)
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013e18:	e29d      	b.n	8014356 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e1c:	7d1b      	ldrb	r3, [r3, #20]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d106      	bne.n	8013e30 <tcp_slowtmr+0x48>
 8013e22:	4b8d      	ldr	r3, [pc, #564]	@ (8014058 <tcp_slowtmr+0x270>)
 8013e24:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013e28:	498c      	ldr	r1, [pc, #560]	@ (801405c <tcp_slowtmr+0x274>)
 8013e2a:	488d      	ldr	r0, [pc, #564]	@ (8014060 <tcp_slowtmr+0x278>)
 8013e2c:	f009 fb2c 	bl	801d488 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e32:	7d1b      	ldrb	r3, [r3, #20]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d106      	bne.n	8013e46 <tcp_slowtmr+0x5e>
 8013e38:	4b87      	ldr	r3, [pc, #540]	@ (8014058 <tcp_slowtmr+0x270>)
 8013e3a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013e3e:	4989      	ldr	r1, [pc, #548]	@ (8014064 <tcp_slowtmr+0x27c>)
 8013e40:	4887      	ldr	r0, [pc, #540]	@ (8014060 <tcp_slowtmr+0x278>)
 8013e42:	f009 fb21 	bl	801d488 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8013e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e48:	7d1b      	ldrb	r3, [r3, #20]
 8013e4a:	2b0a      	cmp	r3, #10
 8013e4c:	d106      	bne.n	8013e5c <tcp_slowtmr+0x74>
 8013e4e:	4b82      	ldr	r3, [pc, #520]	@ (8014058 <tcp_slowtmr+0x270>)
 8013e50:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013e54:	4984      	ldr	r1, [pc, #528]	@ (8014068 <tcp_slowtmr+0x280>)
 8013e56:	4882      	ldr	r0, [pc, #520]	@ (8014060 <tcp_slowtmr+0x278>)
 8013e58:	f009 fb16 	bl	801d488 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e5e:	7f9a      	ldrb	r2, [r3, #30]
 8013e60:	4b7b      	ldr	r3, [pc, #492]	@ (8014050 <tcp_slowtmr+0x268>)
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d105      	bne.n	8013e74 <tcp_slowtmr+0x8c>
      prev = pcb;
 8013e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013e72:	e270      	b.n	8014356 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8013e74:	4b76      	ldr	r3, [pc, #472]	@ (8014050 <tcp_slowtmr+0x268>)
 8013e76:	781a      	ldrb	r2, [r3, #0]
 8013e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e7a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013e82:	2300      	movs	r3, #0
 8013e84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e8a:	7d1b      	ldrb	r3, [r3, #20]
 8013e8c:	2b02      	cmp	r3, #2
 8013e8e:	d10a      	bne.n	8013ea6 <tcp_slowtmr+0xbe>
 8013e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013e96:	2b05      	cmp	r3, #5
 8013e98:	d905      	bls.n	8013ea6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013ea4:	e11e      	b.n	80140e4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8013ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013eac:	2b0b      	cmp	r3, #11
 8013eae:	d905      	bls.n	8013ebc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8013eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013eba:	e113      	b.n	80140e4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8013ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d075      	beq.n	8013fb2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8013ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d006      	beq.n	8013edc <tcp_slowtmr+0xf4>
 8013ece:	4b62      	ldr	r3, [pc, #392]	@ (8014058 <tcp_slowtmr+0x270>)
 8013ed0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8013ed4:	4965      	ldr	r1, [pc, #404]	@ (801406c <tcp_slowtmr+0x284>)
 8013ed6:	4862      	ldr	r0, [pc, #392]	@ (8014060 <tcp_slowtmr+0x278>)
 8013ed8:	f009 fad6 	bl	801d488 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8013edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d106      	bne.n	8013ef2 <tcp_slowtmr+0x10a>
 8013ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8014058 <tcp_slowtmr+0x270>)
 8013ee6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8013eea:	4961      	ldr	r1, [pc, #388]	@ (8014070 <tcp_slowtmr+0x288>)
 8013eec:	485c      	ldr	r0, [pc, #368]	@ (8014060 <tcp_slowtmr+0x278>)
 8013eee:	f009 facb 	bl	801d488 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8013ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ef4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013ef8:	2b0b      	cmp	r3, #11
 8013efa:	d905      	bls.n	8013f08 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8013efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f00:	3301      	adds	r3, #1
 8013f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013f06:	e0ed      	b.n	80140e4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f0a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f0e:	3b01      	subs	r3, #1
 8013f10:	4a58      	ldr	r2, [pc, #352]	@ (8014074 <tcp_slowtmr+0x28c>)
 8013f12:	5cd3      	ldrb	r3, [r2, r3]
 8013f14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8013f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f1c:	7c7a      	ldrb	r2, [r7, #17]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d907      	bls.n	8013f32 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f28:	3301      	adds	r3, #1
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f2e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013f38:	7c7a      	ldrb	r2, [r7, #17]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	f200 80d2 	bhi.w	80140e4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013f40:	2301      	movs	r3, #1
 8013f42:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d108      	bne.n	8013f60 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f50:	f005 f968 	bl	8019224 <tcp_zero_window_probe>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d014      	beq.n	8013f84 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	623b      	str	r3, [r7, #32]
 8013f5e:	e011      	b.n	8013f84 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013f66:	4619      	mov	r1, r3
 8013f68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f6a:	f004 f82d 	bl	8017fc8 <tcp_split_unsent_seg>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d107      	bne.n	8013f84 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013f74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f76:	f004 faad 	bl	80184d4 <tcp_output>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013f80:	2300      	movs	r3, #0
 8013f82:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013f84:	6a3b      	ldr	r3, [r7, #32]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	f000 80ac 	beq.w	80140e4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f9a:	2b06      	cmp	r3, #6
 8013f9c:	f200 80a2 	bhi.w	80140e4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fa2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013fa6:	3301      	adds	r3, #1
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8013fb0:	e098      	b.n	80140e4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fb4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	db0f      	blt.n	8013fdc <tcp_slowtmr+0x1f4>
 8013fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fbe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013fc2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d008      	beq.n	8013fdc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8013fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	3301      	adds	r3, #1
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	b21a      	sxth	r2, r3
 8013fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fda:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8013fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fde:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8013fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fe4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	db7b      	blt.n	80140e4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8013fec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fee:	f004 fd65 	bl	8018abc <tcp_rexmit_rto_prepare>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d007      	beq.n	8014008 <tcp_slowtmr+0x220>
 8013ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d171      	bne.n	80140e4 <tcp_slowtmr+0x2fc>
 8014000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014004:	2b00      	cmp	r3, #0
 8014006:	d06d      	beq.n	80140e4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8014008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400a:	7d1b      	ldrb	r3, [r3, #20]
 801400c:	2b02      	cmp	r3, #2
 801400e:	d03a      	beq.n	8014086 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014012:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014016:	2b0c      	cmp	r3, #12
 8014018:	bf28      	it	cs
 801401a:	230c      	movcs	r3, #12
 801401c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801401e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014020:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014024:	10db      	asrs	r3, r3, #3
 8014026:	b21b      	sxth	r3, r3
 8014028:	461a      	mov	r2, r3
 801402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014030:	4413      	add	r3, r2
 8014032:	7efa      	ldrb	r2, [r7, #27]
 8014034:	4910      	ldr	r1, [pc, #64]	@ (8014078 <tcp_slowtmr+0x290>)
 8014036:	5c8a      	ldrb	r2, [r1, r2]
 8014038:	4093      	lsls	r3, r2
 801403a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014042:	4293      	cmp	r3, r2
 8014044:	dc1a      	bgt.n	801407c <tcp_slowtmr+0x294>
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	b21a      	sxth	r2, r3
 801404a:	e019      	b.n	8014080 <tcp_slowtmr+0x298>
 801404c:	2000f394 	.word	0x2000f394
 8014050:	2000f3aa 	.word	0x2000f3aa
 8014054:	2000f3a0 	.word	0x2000f3a0
 8014058:	080212ec 	.word	0x080212ec
 801405c:	08021630 	.word	0x08021630
 8014060:	08021330 	.word	0x08021330
 8014064:	0802165c 	.word	0x0802165c
 8014068:	08021688 	.word	0x08021688
 801406c:	080216b8 	.word	0x080216b8
 8014070:	080216ec 	.word	0x080216ec
 8014074:	080249ec 	.word	0x080249ec
 8014078:	080249dc 	.word	0x080249dc
 801407c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014082:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014088:	2200      	movs	r2, #0
 801408a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801408c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801408e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014094:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014098:	4293      	cmp	r3, r2
 801409a:	bf28      	it	cs
 801409c:	4613      	movcs	r3, r2
 801409e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80140a0:	8a7b      	ldrh	r3, [r7, #18]
 80140a2:	085b      	lsrs	r3, r3, #1
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80140ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80140b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80140b6:	005b      	lsls	r3, r3, #1
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	429a      	cmp	r2, r3
 80140bc:	d206      	bcs.n	80140cc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80140be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80140c2:	005b      	lsls	r3, r3, #1
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80140cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ce:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80140d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80140d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d8:	2200      	movs	r2, #0
 80140da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80140de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140e0:	f004 fd5c 	bl	8018b9c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80140e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e6:	7d1b      	ldrb	r3, [r3, #20]
 80140e8:	2b06      	cmp	r3, #6
 80140ea:	d111      	bne.n	8014110 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80140ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ee:	8b5b      	ldrh	r3, [r3, #26]
 80140f0:	f003 0310 	and.w	r3, r3, #16
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d00b      	beq.n	8014110 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80140f8:	4b9c      	ldr	r3, [pc, #624]	@ (801436c <tcp_slowtmr+0x584>)
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140fe:	6a1b      	ldr	r3, [r3, #32]
 8014100:	1ad3      	subs	r3, r2, r3
 8014102:	2b28      	cmp	r3, #40	@ 0x28
 8014104:	d904      	bls.n	8014110 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8014106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801410a:	3301      	adds	r3, #1
 801410c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014112:	7a5b      	ldrb	r3, [r3, #9]
 8014114:	f003 0308 	and.w	r3, r3, #8
 8014118:	2b00      	cmp	r3, #0
 801411a:	d04a      	beq.n	80141b2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801411e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014120:	2b04      	cmp	r3, #4
 8014122:	d003      	beq.n	801412c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014126:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014128:	2b07      	cmp	r3, #7
 801412a:	d142      	bne.n	80141b2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801412c:	4b8f      	ldr	r3, [pc, #572]	@ (801436c <tcp_slowtmr+0x584>)
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014132:	6a1b      	ldr	r3, [r3, #32]
 8014134:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014138:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801413c:	4b8c      	ldr	r3, [pc, #560]	@ (8014370 <tcp_slowtmr+0x588>)
 801413e:	440b      	add	r3, r1
 8014140:	498c      	ldr	r1, [pc, #560]	@ (8014374 <tcp_slowtmr+0x58c>)
 8014142:	fba1 1303 	umull	r1, r3, r1, r3
 8014146:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014148:	429a      	cmp	r2, r3
 801414a:	d90a      	bls.n	8014162 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801414c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014150:	3301      	adds	r3, #1
 8014152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014156:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801415a:	3301      	adds	r3, #1
 801415c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014160:	e027      	b.n	80141b2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014162:	4b82      	ldr	r3, [pc, #520]	@ (801436c <tcp_slowtmr+0x584>)
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014168:	6a1b      	ldr	r3, [r3, #32]
 801416a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014174:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014178:	4618      	mov	r0, r3
 801417a:	4b7f      	ldr	r3, [pc, #508]	@ (8014378 <tcp_slowtmr+0x590>)
 801417c:	fb00 f303 	mul.w	r3, r0, r3
 8014180:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014182:	497c      	ldr	r1, [pc, #496]	@ (8014374 <tcp_slowtmr+0x58c>)
 8014184:	fba1 1303 	umull	r1, r3, r1, r3
 8014188:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801418a:	429a      	cmp	r2, r3
 801418c:	d911      	bls.n	80141b2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801418e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014190:	f005 f808 	bl	80191a4 <tcp_keepalive>
 8014194:	4603      	mov	r3, r0
 8014196:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801419a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d107      	bne.n	80141b2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80141a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80141a8:	3301      	adds	r3, #1
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80141b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d011      	beq.n	80141de <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80141ba:	4b6c      	ldr	r3, [pc, #432]	@ (801436c <tcp_slowtmr+0x584>)
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c0:	6a1b      	ldr	r3, [r3, #32]
 80141c2:	1ad2      	subs	r2, r2, r3
 80141c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80141ca:	4619      	mov	r1, r3
 80141cc:	460b      	mov	r3, r1
 80141ce:	005b      	lsls	r3, r3, #1
 80141d0:	440b      	add	r3, r1
 80141d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d302      	bcc.n	80141de <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80141d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80141da:	f000 fec9 	bl	8014f70 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80141de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e0:	7d1b      	ldrb	r3, [r3, #20]
 80141e2:	2b03      	cmp	r3, #3
 80141e4:	d10b      	bne.n	80141fe <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80141e6:	4b61      	ldr	r3, [pc, #388]	@ (801436c <tcp_slowtmr+0x584>)
 80141e8:	681a      	ldr	r2, [r3, #0]
 80141ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ec:	6a1b      	ldr	r3, [r3, #32]
 80141ee:	1ad3      	subs	r3, r2, r3
 80141f0:	2b28      	cmp	r3, #40	@ 0x28
 80141f2:	d904      	bls.n	80141fe <tcp_slowtmr+0x416>
        ++pcb_remove;
 80141f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141f8:	3301      	adds	r3, #1
 80141fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80141fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014200:	7d1b      	ldrb	r3, [r3, #20]
 8014202:	2b09      	cmp	r3, #9
 8014204:	d10b      	bne.n	801421e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014206:	4b59      	ldr	r3, [pc, #356]	@ (801436c <tcp_slowtmr+0x584>)
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801420c:	6a1b      	ldr	r3, [r3, #32]
 801420e:	1ad3      	subs	r3, r2, r3
 8014210:	2bf0      	cmp	r3, #240	@ 0xf0
 8014212:	d904      	bls.n	801421e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8014214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014218:	3301      	adds	r3, #1
 801421a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801421e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014222:	2b00      	cmp	r3, #0
 8014224:	d060      	beq.n	80142e8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8014226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801422c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801422e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014230:	f000 fcea 	bl	8014c08 <tcp_pcb_purge>
      if (prev != NULL) {
 8014234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014236:	2b00      	cmp	r3, #0
 8014238:	d010      	beq.n	801425c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801423a:	4b50      	ldr	r3, [pc, #320]	@ (801437c <tcp_slowtmr+0x594>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014240:	429a      	cmp	r2, r3
 8014242:	d106      	bne.n	8014252 <tcp_slowtmr+0x46a>
 8014244:	4b4e      	ldr	r3, [pc, #312]	@ (8014380 <tcp_slowtmr+0x598>)
 8014246:	f240 526d 	movw	r2, #1389	@ 0x56d
 801424a:	494e      	ldr	r1, [pc, #312]	@ (8014384 <tcp_slowtmr+0x59c>)
 801424c:	484e      	ldr	r0, [pc, #312]	@ (8014388 <tcp_slowtmr+0x5a0>)
 801424e:	f009 f91b 	bl	801d488 <iprintf>
        prev->next = pcb->next;
 8014252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014254:	68da      	ldr	r2, [r3, #12]
 8014256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014258:	60da      	str	r2, [r3, #12]
 801425a:	e00f      	b.n	801427c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801425c:	4b47      	ldr	r3, [pc, #284]	@ (801437c <tcp_slowtmr+0x594>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014262:	429a      	cmp	r2, r3
 8014264:	d006      	beq.n	8014274 <tcp_slowtmr+0x48c>
 8014266:	4b46      	ldr	r3, [pc, #280]	@ (8014380 <tcp_slowtmr+0x598>)
 8014268:	f240 5271 	movw	r2, #1393	@ 0x571
 801426c:	4947      	ldr	r1, [pc, #284]	@ (801438c <tcp_slowtmr+0x5a4>)
 801426e:	4846      	ldr	r0, [pc, #280]	@ (8014388 <tcp_slowtmr+0x5a0>)
 8014270:	f009 f90a 	bl	801d488 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	4a40      	ldr	r2, [pc, #256]	@ (801437c <tcp_slowtmr+0x594>)
 801427a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801427c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014280:	2b00      	cmp	r3, #0
 8014282:	d013      	beq.n	80142ac <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014286:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801428c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801428e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014290:	3304      	adds	r3, #4
 8014292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014294:	8ad2      	ldrh	r2, [r2, #22]
 8014296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014298:	8b09      	ldrh	r1, [r1, #24]
 801429a:	9102      	str	r1, [sp, #8]
 801429c:	9201      	str	r2, [sp, #4]
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	462b      	mov	r3, r5
 80142a2:	4622      	mov	r2, r4
 80142a4:	4601      	mov	r1, r0
 80142a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142a8:	f004 fec8 	bl	801903c <tcp_rst>
      err_arg = pcb->callback_arg;
 80142ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ae:	691b      	ldr	r3, [r3, #16]
 80142b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80142b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b4:	7d1b      	ldrb	r3, [r3, #20]
 80142b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80142b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80142bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142be:	68db      	ldr	r3, [r3, #12]
 80142c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80142c2:	6838      	ldr	r0, [r7, #0]
 80142c4:	f7fe ffdc 	bl	8013280 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80142c8:	4b31      	ldr	r3, [pc, #196]	@ (8014390 <tcp_slowtmr+0x5a8>)
 80142ca:	2200      	movs	r2, #0
 80142cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d004      	beq.n	80142de <tcp_slowtmr+0x4f6>
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f06f 010c 	mvn.w	r1, #12
 80142da:	68b8      	ldr	r0, [r7, #8]
 80142dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80142de:	4b2c      	ldr	r3, [pc, #176]	@ (8014390 <tcp_slowtmr+0x5a8>)
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d037      	beq.n	8014356 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80142e6:	e592      	b.n	8013e0e <tcp_slowtmr+0x26>
      prev = pcb;
 80142e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80142ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ee:	68db      	ldr	r3, [r3, #12]
 80142f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80142f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f4:	7f1b      	ldrb	r3, [r3, #28]
 80142f6:	3301      	adds	r3, #1
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80142fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014300:	7f1a      	ldrb	r2, [r3, #28]
 8014302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014304:	7f5b      	ldrb	r3, [r3, #29]
 8014306:	429a      	cmp	r2, r3
 8014308:	d325      	bcc.n	8014356 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430c:	2200      	movs	r2, #0
 801430e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8014310:	4b1f      	ldr	r3, [pc, #124]	@ (8014390 <tcp_slowtmr+0x5a8>)
 8014312:	2200      	movs	r2, #0
 8014314:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801431c:	2b00      	cmp	r3, #0
 801431e:	d00b      	beq.n	8014338 <tcp_slowtmr+0x550>
 8014320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014328:	6912      	ldr	r2, [r2, #16]
 801432a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801432c:	4610      	mov	r0, r2
 801432e:	4798      	blx	r3
 8014330:	4603      	mov	r3, r0
 8014332:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014336:	e002      	b.n	801433e <tcp_slowtmr+0x556>
 8014338:	2300      	movs	r3, #0
 801433a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801433e:	4b14      	ldr	r3, [pc, #80]	@ (8014390 <tcp_slowtmr+0x5a8>)
 8014340:	781b      	ldrb	r3, [r3, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	f47f ad62 	bne.w	8013e0c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014348:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801434c:	2b00      	cmp	r3, #0
 801434e:	d102      	bne.n	8014356 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014352:	f004 f8bf 	bl	80184d4 <tcp_output>
  while (pcb != NULL) {
 8014356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014358:	2b00      	cmp	r3, #0
 801435a:	f47f ad5e 	bne.w	8013e1a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801435e:	2300      	movs	r3, #0
 8014360:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8014362:	4b0c      	ldr	r3, [pc, #48]	@ (8014394 <tcp_slowtmr+0x5ac>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014368:	e069      	b.n	801443e <tcp_slowtmr+0x656>
 801436a:	bf00      	nop
 801436c:	2000f394 	.word	0x2000f394
 8014370:	000a4cb8 	.word	0x000a4cb8
 8014374:	10624dd3 	.word	0x10624dd3
 8014378:	000124f8 	.word	0x000124f8
 801437c:	2000f3a0 	.word	0x2000f3a0
 8014380:	080212ec 	.word	0x080212ec
 8014384:	08021724 	.word	0x08021724
 8014388:	08021330 	.word	0x08021330
 801438c:	08021750 	.word	0x08021750
 8014390:	2000f3a8 	.word	0x2000f3a8
 8014394:	2000f3a4 	.word	0x2000f3a4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439a:	7d1b      	ldrb	r3, [r3, #20]
 801439c:	2b0a      	cmp	r3, #10
 801439e:	d006      	beq.n	80143ae <tcp_slowtmr+0x5c6>
 80143a0:	4b2b      	ldr	r3, [pc, #172]	@ (8014450 <tcp_slowtmr+0x668>)
 80143a2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80143a6:	492b      	ldr	r1, [pc, #172]	@ (8014454 <tcp_slowtmr+0x66c>)
 80143a8:	482b      	ldr	r0, [pc, #172]	@ (8014458 <tcp_slowtmr+0x670>)
 80143aa:	f009 f86d 	bl	801d488 <iprintf>
    pcb_remove = 0;
 80143ae:	2300      	movs	r3, #0
 80143b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80143b4:	4b29      	ldr	r3, [pc, #164]	@ (801445c <tcp_slowtmr+0x674>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ba:	6a1b      	ldr	r3, [r3, #32]
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	2bf0      	cmp	r3, #240	@ 0xf0
 80143c0:	d904      	bls.n	80143cc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80143c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143c6:	3301      	adds	r3, #1
 80143c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80143cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d02f      	beq.n	8014434 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80143d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143d6:	f000 fc17 	bl	8014c08 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d010      	beq.n	8014402 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80143e0:	4b1f      	ldr	r3, [pc, #124]	@ (8014460 <tcp_slowtmr+0x678>)
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d106      	bne.n	80143f8 <tcp_slowtmr+0x610>
 80143ea:	4b19      	ldr	r3, [pc, #100]	@ (8014450 <tcp_slowtmr+0x668>)
 80143ec:	f240 52af 	movw	r2, #1455	@ 0x5af
 80143f0:	491c      	ldr	r1, [pc, #112]	@ (8014464 <tcp_slowtmr+0x67c>)
 80143f2:	4819      	ldr	r0, [pc, #100]	@ (8014458 <tcp_slowtmr+0x670>)
 80143f4:	f009 f848 	bl	801d488 <iprintf>
        prev->next = pcb->next;
 80143f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fa:	68da      	ldr	r2, [r3, #12]
 80143fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143fe:	60da      	str	r2, [r3, #12]
 8014400:	e00f      	b.n	8014422 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014402:	4b17      	ldr	r3, [pc, #92]	@ (8014460 <tcp_slowtmr+0x678>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014408:	429a      	cmp	r2, r3
 801440a:	d006      	beq.n	801441a <tcp_slowtmr+0x632>
 801440c:	4b10      	ldr	r3, [pc, #64]	@ (8014450 <tcp_slowtmr+0x668>)
 801440e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8014412:	4915      	ldr	r1, [pc, #84]	@ (8014468 <tcp_slowtmr+0x680>)
 8014414:	4810      	ldr	r0, [pc, #64]	@ (8014458 <tcp_slowtmr+0x670>)
 8014416:	f009 f837 	bl	801d488 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	4a10      	ldr	r2, [pc, #64]	@ (8014460 <tcp_slowtmr+0x678>)
 8014420:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014424:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801442c:	69f8      	ldr	r0, [r7, #28]
 801442e:	f7fe ff27 	bl	8013280 <tcp_free>
 8014432:	e004      	b.n	801443e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8014434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014436:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014440:	2b00      	cmp	r3, #0
 8014442:	d1a9      	bne.n	8014398 <tcp_slowtmr+0x5b0>
    }
  }
}
 8014444:	bf00      	nop
 8014446:	bf00      	nop
 8014448:	3730      	adds	r7, #48	@ 0x30
 801444a:	46bd      	mov	sp, r7
 801444c:	bdb0      	pop	{r4, r5, r7, pc}
 801444e:	bf00      	nop
 8014450:	080212ec 	.word	0x080212ec
 8014454:	0802177c 	.word	0x0802177c
 8014458:	08021330 	.word	0x08021330
 801445c:	2000f394 	.word	0x2000f394
 8014460:	2000f3a4 	.word	0x2000f3a4
 8014464:	080217ac 	.word	0x080217ac
 8014468:	080217d4 	.word	0x080217d4

0801446c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014472:	4b2d      	ldr	r3, [pc, #180]	@ (8014528 <tcp_fasttmr+0xbc>)
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	3301      	adds	r3, #1
 8014478:	b2da      	uxtb	r2, r3
 801447a:	4b2b      	ldr	r3, [pc, #172]	@ (8014528 <tcp_fasttmr+0xbc>)
 801447c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801447e:	4b2b      	ldr	r3, [pc, #172]	@ (801452c <tcp_fasttmr+0xc0>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014484:	e048      	b.n	8014518 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	7f9a      	ldrb	r2, [r3, #30]
 801448a:	4b27      	ldr	r3, [pc, #156]	@ (8014528 <tcp_fasttmr+0xbc>)
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d03f      	beq.n	8014512 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014492:	4b25      	ldr	r3, [pc, #148]	@ (8014528 <tcp_fasttmr+0xbc>)
 8014494:	781a      	ldrb	r2, [r3, #0]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	8b5b      	ldrh	r3, [r3, #26]
 801449e:	f003 0301 	and.w	r3, r3, #1
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d010      	beq.n	80144c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	8b5b      	ldrh	r3, [r3, #26]
 80144aa:	f043 0302 	orr.w	r3, r3, #2
 80144ae:	b29a      	uxth	r2, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f004 f80d 	bl	80184d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	8b5b      	ldrh	r3, [r3, #26]
 80144be:	f023 0303 	bic.w	r3, r3, #3
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	8b5b      	ldrh	r3, [r3, #26]
 80144cc:	f003 0308 	and.w	r3, r3, #8
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d009      	beq.n	80144e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	8b5b      	ldrh	r3, [r3, #26]
 80144d8:	f023 0308 	bic.w	r3, r3, #8
 80144dc:	b29a      	uxth	r2, r3
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80144e2:	6878      	ldr	r0, [r7, #4]
 80144e4:	f7ff f860 	bl	80135a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d00a      	beq.n	801450c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80144f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014530 <tcp_fasttmr+0xc4>)
 80144f8:	2200      	movs	r2, #0
 80144fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f000 f819 	bl	8014534 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014502:	4b0b      	ldr	r3, [pc, #44]	@ (8014530 <tcp_fasttmr+0xc4>)
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d000      	beq.n	801450c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801450a:	e7b8      	b.n	801447e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	607b      	str	r3, [r7, #4]
 8014510:	e002      	b.n	8014518 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d1b3      	bne.n	8014486 <tcp_fasttmr+0x1a>
    }
  }
}
 801451e:	bf00      	nop
 8014520:	bf00      	nop
 8014522:	3708      	adds	r7, #8
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	2000f3aa 	.word	0x2000f3aa
 801452c:	2000f3a0 	.word	0x2000f3a0
 8014530:	2000f3a8 	.word	0x2000f3a8

08014534 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014534:	b590      	push	{r4, r7, lr}
 8014536:	b085      	sub	sp, #20
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d109      	bne.n	8014556 <tcp_process_refused_data+0x22>
 8014542:	4b37      	ldr	r3, [pc, #220]	@ (8014620 <tcp_process_refused_data+0xec>)
 8014544:	f240 6209 	movw	r2, #1545	@ 0x609
 8014548:	4936      	ldr	r1, [pc, #216]	@ (8014624 <tcp_process_refused_data+0xf0>)
 801454a:	4837      	ldr	r0, [pc, #220]	@ (8014628 <tcp_process_refused_data+0xf4>)
 801454c:	f008 ff9c 	bl	801d488 <iprintf>
 8014550:	f06f 030f 	mvn.w	r3, #15
 8014554:	e060      	b.n	8014618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801455a:	7b5b      	ldrb	r3, [r3, #13]
 801455c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014562:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2200      	movs	r2, #0
 8014568:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014570:	2b00      	cmp	r3, #0
 8014572:	d00b      	beq.n	801458c <tcp_process_refused_data+0x58>
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6918      	ldr	r0, [r3, #16]
 801457e:	2300      	movs	r3, #0
 8014580:	68ba      	ldr	r2, [r7, #8]
 8014582:	6879      	ldr	r1, [r7, #4]
 8014584:	47a0      	blx	r4
 8014586:	4603      	mov	r3, r0
 8014588:	73fb      	strb	r3, [r7, #15]
 801458a:	e007      	b.n	801459c <tcp_process_refused_data+0x68>
 801458c:	2300      	movs	r3, #0
 801458e:	68ba      	ldr	r2, [r7, #8]
 8014590:	6879      	ldr	r1, [r7, #4]
 8014592:	2000      	movs	r0, #0
 8014594:	f000 f8c2 	bl	801471c <tcp_recv_null>
 8014598:	4603      	mov	r3, r0
 801459a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801459c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d12a      	bne.n	80145fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80145a4:	7bbb      	ldrb	r3, [r7, #14]
 80145a6:	f003 0320 	and.w	r3, r3, #32
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d033      	beq.n	8014616 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145b2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80145b6:	d005      	beq.n	80145c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145bc:	3301      	adds	r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00b      	beq.n	80145e6 <tcp_process_refused_data+0xb2>
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6918      	ldr	r0, [r3, #16]
 80145d8:	2300      	movs	r3, #0
 80145da:	2200      	movs	r2, #0
 80145dc:	6879      	ldr	r1, [r7, #4]
 80145de:	47a0      	blx	r4
 80145e0:	4603      	mov	r3, r0
 80145e2:	73fb      	strb	r3, [r7, #15]
 80145e4:	e001      	b.n	80145ea <tcp_process_refused_data+0xb6>
 80145e6:	2300      	movs	r3, #0
 80145e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80145ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145ee:	f113 0f0d 	cmn.w	r3, #13
 80145f2:	d110      	bne.n	8014616 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80145f4:	f06f 030c 	mvn.w	r3, #12
 80145f8:	e00e      	b.n	8014618 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80145fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145fe:	f113 0f0d 	cmn.w	r3, #13
 8014602:	d102      	bne.n	801460a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014604:	f06f 030c 	mvn.w	r3, #12
 8014608:	e006      	b.n	8014618 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	68ba      	ldr	r2, [r7, #8]
 801460e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8014610:	f06f 0304 	mvn.w	r3, #4
 8014614:	e000      	b.n	8014618 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014616:	2300      	movs	r3, #0
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	bd90      	pop	{r4, r7, pc}
 8014620:	080212ec 	.word	0x080212ec
 8014624:	080217fc 	.word	0x080217fc
 8014628:	08021330 	.word	0x08021330

0801462c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014634:	e007      	b.n	8014646 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 f80a 	bl	8014656 <tcp_seg_free>
    seg = next;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1f4      	bne.n	8014636 <tcp_segs_free+0xa>
  }
}
 801464c:	bf00      	nop
 801464e:	bf00      	nop
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014656:	b580      	push	{r7, lr}
 8014658:	b082      	sub	sp, #8
 801465a:	af00      	add	r7, sp, #0
 801465c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00c      	beq.n	801467e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d004      	beq.n	8014676 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	4618      	mov	r0, r3
 8014672:	f7fe fb49 	bl	8012d08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014676:	6879      	ldr	r1, [r7, #4]
 8014678:	2003      	movs	r0, #3
 801467a:	f7fd fca1 	bl	8011fc0 <memp_free>
  }
}
 801467e:	bf00      	nop
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
	...

08014688 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	460b      	mov	r3, r1
 8014692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d107      	bne.n	80146aa <tcp_setprio+0x22>
 801469a:	4b07      	ldr	r3, [pc, #28]	@ (80146b8 <tcp_setprio+0x30>)
 801469c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 80146a0:	4906      	ldr	r1, [pc, #24]	@ (80146bc <tcp_setprio+0x34>)
 80146a2:	4807      	ldr	r0, [pc, #28]	@ (80146c0 <tcp_setprio+0x38>)
 80146a4:	f008 fef0 	bl	801d488 <iprintf>
 80146a8:	e002      	b.n	80146b0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	78fa      	ldrb	r2, [r7, #3]
 80146ae:	755a      	strb	r2, [r3, #21]
}
 80146b0:	3708      	adds	r7, #8
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
 80146b6:	bf00      	nop
 80146b8:	080212ec 	.word	0x080212ec
 80146bc:	08021824 	.word	0x08021824
 80146c0:	08021330 	.word	0x08021330

080146c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b084      	sub	sp, #16
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d106      	bne.n	80146e0 <tcp_seg_copy+0x1c>
 80146d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014710 <tcp_seg_copy+0x4c>)
 80146d4:	f240 6282 	movw	r2, #1666	@ 0x682
 80146d8:	490e      	ldr	r1, [pc, #56]	@ (8014714 <tcp_seg_copy+0x50>)
 80146da:	480f      	ldr	r0, [pc, #60]	@ (8014718 <tcp_seg_copy+0x54>)
 80146dc:	f008 fed4 	bl	801d488 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80146e0:	2003      	movs	r0, #3
 80146e2:	f7fd fbf7 	bl	8011ed4 <memp_malloc>
 80146e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d101      	bne.n	80146f2 <tcp_seg_copy+0x2e>
    return NULL;
 80146ee:	2300      	movs	r3, #0
 80146f0:	e00a      	b.n	8014708 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80146f2:	2210      	movs	r2, #16
 80146f4:	6879      	ldr	r1, [r7, #4]
 80146f6:	68f8      	ldr	r0, [r7, #12]
 80146f8:	f009 f853 	bl	801d7a2 <memcpy>
  pbuf_ref(cseg->p);
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	f7fe fba7 	bl	8012e54 <pbuf_ref>
  return cseg;
 8014706:	68fb      	ldr	r3, [r7, #12]
}
 8014708:	4618      	mov	r0, r3
 801470a:	3710      	adds	r7, #16
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	080212ec 	.word	0x080212ec
 8014714:	08021840 	.word	0x08021840
 8014718:	08021330 	.word	0x08021330

0801471c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	607a      	str	r2, [r7, #4]
 8014728:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d109      	bne.n	8014744 <tcp_recv_null+0x28>
 8014730:	4b12      	ldr	r3, [pc, #72]	@ (801477c <tcp_recv_null+0x60>)
 8014732:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014736:	4912      	ldr	r1, [pc, #72]	@ (8014780 <tcp_recv_null+0x64>)
 8014738:	4812      	ldr	r0, [pc, #72]	@ (8014784 <tcp_recv_null+0x68>)
 801473a:	f008 fea5 	bl	801d488 <iprintf>
 801473e:	f06f 030f 	mvn.w	r3, #15
 8014742:	e016      	b.n	8014772 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d009      	beq.n	801475e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	891b      	ldrh	r3, [r3, #8]
 801474e:	4619      	mov	r1, r3
 8014750:	68b8      	ldr	r0, [r7, #8]
 8014752:	f7ff fab3 	bl	8013cbc <tcp_recved>
    pbuf_free(p);
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7fe fad6 	bl	8012d08 <pbuf_free>
 801475c:	e008      	b.n	8014770 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801475e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d104      	bne.n	8014770 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014766:	68b8      	ldr	r0, [r7, #8]
 8014768:	f7fe ff88 	bl	801367c <tcp_close>
 801476c:	4603      	mov	r3, r0
 801476e:	e000      	b.n	8014772 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014770:	2300      	movs	r3, #0
}
 8014772:	4618      	mov	r0, r3
 8014774:	3710      	adds	r7, #16
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	080212ec 	.word	0x080212ec
 8014780:	0802185c 	.word	0x0802185c
 8014784:	08021330 	.word	0x08021330

08014788 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	4603      	mov	r3, r0
 8014790:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014796:	2b00      	cmp	r3, #0
 8014798:	db01      	blt.n	801479e <tcp_kill_prio+0x16>
 801479a:	79fb      	ldrb	r3, [r7, #7]
 801479c:	e000      	b.n	80147a0 <tcp_kill_prio+0x18>
 801479e:	237f      	movs	r3, #127	@ 0x7f
 80147a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80147a2:	7afb      	ldrb	r3, [r7, #11]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d034      	beq.n	8014812 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80147a8:	7afb      	ldrb	r3, [r7, #11]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80147ae:	2300      	movs	r3, #0
 80147b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80147b2:	2300      	movs	r3, #0
 80147b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147b6:	4b19      	ldr	r3, [pc, #100]	@ (801481c <tcp_kill_prio+0x94>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	617b      	str	r3, [r7, #20]
 80147bc:	e01f      	b.n	80147fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	7d5b      	ldrb	r3, [r3, #21]
 80147c2:	7afa      	ldrb	r2, [r7, #11]
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d80c      	bhi.n	80147e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80147cc:	7afa      	ldrb	r2, [r7, #11]
 80147ce:	429a      	cmp	r2, r3
 80147d0:	d112      	bne.n	80147f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80147d2:	4b13      	ldr	r3, [pc, #76]	@ (8014820 <tcp_kill_prio+0x98>)
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	6a1b      	ldr	r3, [r3, #32]
 80147da:	1ad3      	subs	r3, r2, r3
 80147dc:	68fa      	ldr	r2, [r7, #12]
 80147de:	429a      	cmp	r2, r3
 80147e0:	d80a      	bhi.n	80147f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80147e2:	4b0f      	ldr	r3, [pc, #60]	@ (8014820 <tcp_kill_prio+0x98>)
 80147e4:	681a      	ldr	r2, [r3, #0]
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	6a1b      	ldr	r3, [r3, #32]
 80147ea:	1ad3      	subs	r3, r2, r3
 80147ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	7d5b      	ldrb	r3, [r3, #21]
 80147f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147f8:	697b      	ldr	r3, [r7, #20]
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	617b      	str	r3, [r7, #20]
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d1dc      	bne.n	80147be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d004      	beq.n	8014814 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801480a:	6938      	ldr	r0, [r7, #16]
 801480c:	f7ff f87c 	bl	8013908 <tcp_abort>
 8014810:	e000      	b.n	8014814 <tcp_kill_prio+0x8c>
    return;
 8014812:	bf00      	nop
  }
}
 8014814:	3718      	adds	r7, #24
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	2000f3a0 	.word	0x2000f3a0
 8014820:	2000f394 	.word	0x2000f394

08014824 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b086      	sub	sp, #24
 8014828:	af00      	add	r7, sp, #0
 801482a:	4603      	mov	r3, r0
 801482c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801482e:	79fb      	ldrb	r3, [r7, #7]
 8014830:	2b08      	cmp	r3, #8
 8014832:	d009      	beq.n	8014848 <tcp_kill_state+0x24>
 8014834:	79fb      	ldrb	r3, [r7, #7]
 8014836:	2b09      	cmp	r3, #9
 8014838:	d006      	beq.n	8014848 <tcp_kill_state+0x24>
 801483a:	4b1a      	ldr	r3, [pc, #104]	@ (80148a4 <tcp_kill_state+0x80>)
 801483c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014840:	4919      	ldr	r1, [pc, #100]	@ (80148a8 <tcp_kill_state+0x84>)
 8014842:	481a      	ldr	r0, [pc, #104]	@ (80148ac <tcp_kill_state+0x88>)
 8014844:	f008 fe20 	bl	801d488 <iprintf>

  inactivity = 0;
 8014848:	2300      	movs	r3, #0
 801484a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801484c:	2300      	movs	r3, #0
 801484e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014850:	4b17      	ldr	r3, [pc, #92]	@ (80148b0 <tcp_kill_state+0x8c>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	617b      	str	r3, [r7, #20]
 8014856:	e017      	b.n	8014888 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	7d1b      	ldrb	r3, [r3, #20]
 801485c:	79fa      	ldrb	r2, [r7, #7]
 801485e:	429a      	cmp	r2, r3
 8014860:	d10f      	bne.n	8014882 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014862:	4b14      	ldr	r3, [pc, #80]	@ (80148b4 <tcp_kill_state+0x90>)
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	6a1b      	ldr	r3, [r3, #32]
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	68fa      	ldr	r2, [r7, #12]
 801486e:	429a      	cmp	r2, r3
 8014870:	d807      	bhi.n	8014882 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014872:	4b10      	ldr	r3, [pc, #64]	@ (80148b4 <tcp_kill_state+0x90>)
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	6a1b      	ldr	r3, [r3, #32]
 801487a:	1ad3      	subs	r3, r2, r3
 801487c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	68db      	ldr	r3, [r3, #12]
 8014886:	617b      	str	r3, [r7, #20]
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d1e4      	bne.n	8014858 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801488e:	693b      	ldr	r3, [r7, #16]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d003      	beq.n	801489c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014894:	2100      	movs	r1, #0
 8014896:	6938      	ldr	r0, [r7, #16]
 8014898:	f7fe ff78 	bl	801378c <tcp_abandon>
  }
}
 801489c:	bf00      	nop
 801489e:	3718      	adds	r7, #24
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	080212ec 	.word	0x080212ec
 80148a8:	08021878 	.word	0x08021878
 80148ac:	08021330 	.word	0x08021330
 80148b0:	2000f3a0 	.word	0x2000f3a0
 80148b4:	2000f394 	.word	0x2000f394

080148b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b084      	sub	sp, #16
 80148bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80148c6:	4b12      	ldr	r3, [pc, #72]	@ (8014910 <tcp_kill_timewait+0x58>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
 80148cc:	e012      	b.n	80148f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80148ce:	4b11      	ldr	r3, [pc, #68]	@ (8014914 <tcp_kill_timewait+0x5c>)
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	6a1b      	ldr	r3, [r3, #32]
 80148d6:	1ad3      	subs	r3, r2, r3
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d807      	bhi.n	80148ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80148de:	4b0d      	ldr	r3, [pc, #52]	@ (8014914 <tcp_kill_timewait+0x5c>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6a1b      	ldr	r3, [r3, #32]
 80148e6:	1ad3      	subs	r3, r2, r3
 80148e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	60fb      	str	r3, [r7, #12]
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d1e9      	bne.n	80148ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d002      	beq.n	8014906 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014900:	68b8      	ldr	r0, [r7, #8]
 8014902:	f7ff f801 	bl	8013908 <tcp_abort>
  }
}
 8014906:	bf00      	nop
 8014908:	3710      	adds	r7, #16
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	2000f3a4 	.word	0x2000f3a4
 8014914:	2000f394 	.word	0x2000f394

08014918 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801491e:	4b10      	ldr	r3, [pc, #64]	@ (8014960 <tcp_handle_closepend+0x48>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014924:	e014      	b.n	8014950 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	8b5b      	ldrh	r3, [r3, #26]
 8014930:	f003 0308 	and.w	r3, r3, #8
 8014934:	2b00      	cmp	r3, #0
 8014936:	d009      	beq.n	801494c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	8b5b      	ldrh	r3, [r3, #26]
 801493c:	f023 0308 	bic.w	r3, r3, #8
 8014940:	b29a      	uxth	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f7fe fe2e 	bl	80135a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d1e7      	bne.n	8014926 <tcp_handle_closepend+0xe>
  }
}
 8014956:	bf00      	nop
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	2000f3a0 	.word	0x2000f3a0

08014964 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b084      	sub	sp, #16
 8014968:	af00      	add	r7, sp, #0
 801496a:	4603      	mov	r3, r0
 801496c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801496e:	2001      	movs	r0, #1
 8014970:	f7fd fab0 	bl	8011ed4 <memp_malloc>
 8014974:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d126      	bne.n	80149ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801497c:	f7ff ffcc 	bl	8014918 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014980:	f7ff ff9a 	bl	80148b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014984:	2001      	movs	r0, #1
 8014986:	f7fd faa5 	bl	8011ed4 <memp_malloc>
 801498a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d11b      	bne.n	80149ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014992:	2009      	movs	r0, #9
 8014994:	f7ff ff46 	bl	8014824 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014998:	2001      	movs	r0, #1
 801499a:	f7fd fa9b 	bl	8011ed4 <memp_malloc>
 801499e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d111      	bne.n	80149ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80149a6:	2008      	movs	r0, #8
 80149a8:	f7ff ff3c 	bl	8014824 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149ac:	2001      	movs	r0, #1
 80149ae:	f7fd fa91 	bl	8011ed4 <memp_malloc>
 80149b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d107      	bne.n	80149ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80149ba:	79fb      	ldrb	r3, [r7, #7]
 80149bc:	4618      	mov	r0, r3
 80149be:	f7ff fee3 	bl	8014788 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80149c2:	2001      	movs	r0, #1
 80149c4:	f7fd fa86 	bl	8011ed4 <memp_malloc>
 80149c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d03f      	beq.n	8014a50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80149d0:	229c      	movs	r2, #156	@ 0x9c
 80149d2:	2100      	movs	r1, #0
 80149d4:	68f8      	ldr	r0, [r7, #12]
 80149d6:	f008 fdf6 	bl	801d5c6 <memset>
    pcb->prio = prio;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	79fa      	ldrb	r2, [r7, #7]
 80149de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80149e6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80149f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	22ff      	movs	r2, #255	@ 0xff
 80149fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014a06:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2206      	movs	r2, #6
 8014a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2206      	movs	r2, #6
 8014a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a1c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	2201      	movs	r2, #1
 8014a22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014a26:	4b0d      	ldr	r3, [pc, #52]	@ (8014a5c <tcp_alloc+0xf8>)
 8014a28:	681a      	ldr	r2, [r3, #0]
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8014a60 <tcp_alloc+0xfc>)
 8014a30:	781a      	ldrb	r2, [r3, #0]
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014a3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4a08      	ldr	r2, [pc, #32]	@ (8014a64 <tcp_alloc+0x100>)
 8014a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	4a07      	ldr	r2, [pc, #28]	@ (8014a68 <tcp_alloc+0x104>)
 8014a4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014a50:	68fb      	ldr	r3, [r7, #12]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	2000f394 	.word	0x2000f394
 8014a60:	2000f3aa 	.word	0x2000f3aa
 8014a64:	0801471d 	.word	0x0801471d
 8014a68:	006ddd00 	.word	0x006ddd00

08014a6c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	4603      	mov	r3, r0
 8014a74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014a76:	2040      	movs	r0, #64	@ 0x40
 8014a78:	f7ff ff74 	bl	8014964 <tcp_alloc>
 8014a7c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3710      	adds	r7, #16
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014a88:	b480      	push	{r7}
 8014a8a:	b083      	sub	sp, #12
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d002      	beq.n	8014a9e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	611a      	str	r2, [r3, #16]
  }
}
 8014a9e:	bf00      	nop
 8014aa0:	370c      	adds	r7, #12
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr
	...

08014aac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
 8014ab4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d00e      	beq.n	8014ada <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	7d1b      	ldrb	r3, [r3, #20]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d106      	bne.n	8014ad2 <tcp_recv+0x26>
 8014ac4:	4b07      	ldr	r3, [pc, #28]	@ (8014ae4 <tcp_recv+0x38>)
 8014ac6:	f240 72df 	movw	r2, #2015	@ 0x7df
 8014aca:	4907      	ldr	r1, [pc, #28]	@ (8014ae8 <tcp_recv+0x3c>)
 8014acc:	4807      	ldr	r0, [pc, #28]	@ (8014aec <tcp_recv+0x40>)
 8014ace:	f008 fcdb 	bl	801d488 <iprintf>
    pcb->recv = recv;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	683a      	ldr	r2, [r7, #0]
 8014ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8014ada:	bf00      	nop
 8014adc:	3708      	adds	r7, #8
 8014ade:	46bd      	mov	sp, r7
 8014ae0:	bd80      	pop	{r7, pc}
 8014ae2:	bf00      	nop
 8014ae4:	080212ec 	.word	0x080212ec
 8014ae8:	08021888 	.word	0x08021888
 8014aec:	08021330 	.word	0x08021330

08014af0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00e      	beq.n	8014b1e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	7d1b      	ldrb	r3, [r3, #20]
 8014b04:	2b01      	cmp	r3, #1
 8014b06:	d106      	bne.n	8014b16 <tcp_sent+0x26>
 8014b08:	4b07      	ldr	r3, [pc, #28]	@ (8014b28 <tcp_sent+0x38>)
 8014b0a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8014b0e:	4907      	ldr	r1, [pc, #28]	@ (8014b2c <tcp_sent+0x3c>)
 8014b10:	4807      	ldr	r0, [pc, #28]	@ (8014b30 <tcp_sent+0x40>)
 8014b12:	f008 fcb9 	bl	801d488 <iprintf>
    pcb->sent = sent;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	683a      	ldr	r2, [r7, #0]
 8014b1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8014b1e:	bf00      	nop
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	080212ec 	.word	0x080212ec
 8014b2c:	080218b0 	.word	0x080218b0
 8014b30:	08021330 	.word	0x08021330

08014b34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b082      	sub	sp, #8
 8014b38:	af00      	add	r7, sp, #0
 8014b3a:	6078      	str	r0, [r7, #4]
 8014b3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d00e      	beq.n	8014b62 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	7d1b      	ldrb	r3, [r3, #20]
 8014b48:	2b01      	cmp	r3, #1
 8014b4a:	d106      	bne.n	8014b5a <tcp_err+0x26>
 8014b4c:	4b07      	ldr	r3, [pc, #28]	@ (8014b6c <tcp_err+0x38>)
 8014b4e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014b52:	4907      	ldr	r1, [pc, #28]	@ (8014b70 <tcp_err+0x3c>)
 8014b54:	4807      	ldr	r0, [pc, #28]	@ (8014b74 <tcp_err+0x40>)
 8014b56:	f008 fc97 	bl	801d488 <iprintf>
    pcb->errf = err;
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	683a      	ldr	r2, [r7, #0]
 8014b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8014b62:	bf00      	nop
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	080212ec 	.word	0x080212ec
 8014b70:	080218d8 	.word	0x080218d8
 8014b74:	08021330 	.word	0x08021330

08014b78 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d008      	beq.n	8014b9a <tcp_accept+0x22>
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	7d1b      	ldrb	r3, [r3, #20]
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d104      	bne.n	8014b9a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	619a      	str	r2, [r3, #24]
  }
}
 8014b9a:	bf00      	nop
 8014b9c:	3714      	adds	r7, #20
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba4:	4770      	bx	lr
	...

08014ba8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d107      	bne.n	8014bcc <tcp_poll+0x24>
 8014bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8014bf8 <tcp_poll+0x50>)
 8014bbe:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014bc2:	490e      	ldr	r1, [pc, #56]	@ (8014bfc <tcp_poll+0x54>)
 8014bc4:	480e      	ldr	r0, [pc, #56]	@ (8014c00 <tcp_poll+0x58>)
 8014bc6:	f008 fc5f 	bl	801d488 <iprintf>
 8014bca:	e011      	b.n	8014bf0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	7d1b      	ldrb	r3, [r3, #20]
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	d106      	bne.n	8014be2 <tcp_poll+0x3a>
 8014bd4:	4b08      	ldr	r3, [pc, #32]	@ (8014bf8 <tcp_poll+0x50>)
 8014bd6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014bda:	490a      	ldr	r1, [pc, #40]	@ (8014c04 <tcp_poll+0x5c>)
 8014bdc:	4808      	ldr	r0, [pc, #32]	@ (8014c00 <tcp_poll+0x58>)
 8014bde:	f008 fc53 	bl	801d488 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	68ba      	ldr	r2, [r7, #8]
 8014be6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	79fa      	ldrb	r2, [r7, #7]
 8014bee:	775a      	strb	r2, [r3, #29]
}
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	080212ec 	.word	0x080212ec
 8014bfc:	08021900 	.word	0x08021900
 8014c00:	08021330 	.word	0x08021330
 8014c04:	08021918 	.word	0x08021918

08014c08 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b082      	sub	sp, #8
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d107      	bne.n	8014c26 <tcp_pcb_purge+0x1e>
 8014c16:	4b21      	ldr	r3, [pc, #132]	@ (8014c9c <tcp_pcb_purge+0x94>)
 8014c18:	f640 0251 	movw	r2, #2129	@ 0x851
 8014c1c:	4920      	ldr	r1, [pc, #128]	@ (8014ca0 <tcp_pcb_purge+0x98>)
 8014c1e:	4821      	ldr	r0, [pc, #132]	@ (8014ca4 <tcp_pcb_purge+0x9c>)
 8014c20:	f008 fc32 	bl	801d488 <iprintf>
 8014c24:	e037      	b.n	8014c96 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	7d1b      	ldrb	r3, [r3, #20]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d033      	beq.n	8014c96 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014c32:	2b0a      	cmp	r3, #10
 8014c34:	d02f      	beq.n	8014c96 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d02b      	beq.n	8014c96 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d007      	beq.n	8014c56 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7fe f85c 	bl	8012d08 <pbuf_free>
      pcb->refused_data = NULL;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2200      	movs	r2, #0
 8014c54:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d002      	beq.n	8014c64 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 f986 	bl	8014f70 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014c6a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7ff fcdb 	bl	801462c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff fcd6 	bl	801462c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2200      	movs	r2, #0
 8014c92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014c96:	3708      	adds	r7, #8
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	080212ec 	.word	0x080212ec
 8014ca0:	08021938 	.word	0x08021938
 8014ca4:	08021330 	.word	0x08021330

08014ca8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b084      	sub	sp, #16
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d106      	bne.n	8014cc6 <tcp_pcb_remove+0x1e>
 8014cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8014db4 <tcp_pcb_remove+0x10c>)
 8014cba:	f640 0283 	movw	r2, #2179	@ 0x883
 8014cbe:	493e      	ldr	r1, [pc, #248]	@ (8014db8 <tcp_pcb_remove+0x110>)
 8014cc0:	483e      	ldr	r0, [pc, #248]	@ (8014dbc <tcp_pcb_remove+0x114>)
 8014cc2:	f008 fbe1 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d106      	bne.n	8014cda <tcp_pcb_remove+0x32>
 8014ccc:	4b39      	ldr	r3, [pc, #228]	@ (8014db4 <tcp_pcb_remove+0x10c>)
 8014cce:	f640 0284 	movw	r2, #2180	@ 0x884
 8014cd2:	493b      	ldr	r1, [pc, #236]	@ (8014dc0 <tcp_pcb_remove+0x118>)
 8014cd4:	4839      	ldr	r0, [pc, #228]	@ (8014dbc <tcp_pcb_remove+0x114>)
 8014cd6:	f008 fbd7 	bl	801d488 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d105      	bne.n	8014cf0 <tcp_pcb_remove+0x48>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	68da      	ldr	r2, [r3, #12]
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	601a      	str	r2, [r3, #0]
 8014cee:	e013      	b.n	8014d18 <tcp_pcb_remove+0x70>
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	60fb      	str	r3, [r7, #12]
 8014cf6:	e00c      	b.n	8014d12 <tcp_pcb_remove+0x6a>
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	68db      	ldr	r3, [r3, #12]
 8014cfc:	683a      	ldr	r2, [r7, #0]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d104      	bne.n	8014d0c <tcp_pcb_remove+0x64>
 8014d02:	683b      	ldr	r3, [r7, #0]
 8014d04:	68da      	ldr	r2, [r3, #12]
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	60da      	str	r2, [r3, #12]
 8014d0a:	e005      	b.n	8014d18 <tcp_pcb_remove+0x70>
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	60fb      	str	r3, [r7, #12]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1ef      	bne.n	8014cf8 <tcp_pcb_remove+0x50>
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014d1e:	6838      	ldr	r0, [r7, #0]
 8014d20:	f7ff ff72 	bl	8014c08 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014d24:	683b      	ldr	r3, [r7, #0]
 8014d26:	7d1b      	ldrb	r3, [r3, #20]
 8014d28:	2b0a      	cmp	r3, #10
 8014d2a:	d013      	beq.n	8014d54 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014d2c:	683b      	ldr	r3, [r7, #0]
 8014d2e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014d30:	2b01      	cmp	r3, #1
 8014d32:	d00f      	beq.n	8014d54 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	8b5b      	ldrh	r3, [r3, #26]
 8014d38:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d009      	beq.n	8014d54 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	8b5b      	ldrh	r3, [r3, #26]
 8014d44:	f043 0302 	orr.w	r3, r3, #2
 8014d48:	b29a      	uxth	r2, r3
 8014d4a:	683b      	ldr	r3, [r7, #0]
 8014d4c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014d4e:	6838      	ldr	r0, [r7, #0]
 8014d50:	f003 fbc0 	bl	80184d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	7d1b      	ldrb	r3, [r3, #20]
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d020      	beq.n	8014d9e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014d5c:	683b      	ldr	r3, [r7, #0]
 8014d5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d006      	beq.n	8014d72 <tcp_pcb_remove+0xca>
 8014d64:	4b13      	ldr	r3, [pc, #76]	@ (8014db4 <tcp_pcb_remove+0x10c>)
 8014d66:	f640 0293 	movw	r2, #2195	@ 0x893
 8014d6a:	4916      	ldr	r1, [pc, #88]	@ (8014dc4 <tcp_pcb_remove+0x11c>)
 8014d6c:	4813      	ldr	r0, [pc, #76]	@ (8014dbc <tcp_pcb_remove+0x114>)
 8014d6e:	f008 fb8b 	bl	801d488 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d006      	beq.n	8014d88 <tcp_pcb_remove+0xe0>
 8014d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8014db4 <tcp_pcb_remove+0x10c>)
 8014d7c:	f640 0294 	movw	r2, #2196	@ 0x894
 8014d80:	4911      	ldr	r1, [pc, #68]	@ (8014dc8 <tcp_pcb_remove+0x120>)
 8014d82:	480e      	ldr	r0, [pc, #56]	@ (8014dbc <tcp_pcb_remove+0x114>)
 8014d84:	f008 fb80 	bl	801d488 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d006      	beq.n	8014d9e <tcp_pcb_remove+0xf6>
 8014d90:	4b08      	ldr	r3, [pc, #32]	@ (8014db4 <tcp_pcb_remove+0x10c>)
 8014d92:	f640 0296 	movw	r2, #2198	@ 0x896
 8014d96:	490d      	ldr	r1, [pc, #52]	@ (8014dcc <tcp_pcb_remove+0x124>)
 8014d98:	4808      	ldr	r0, [pc, #32]	@ (8014dbc <tcp_pcb_remove+0x114>)
 8014d9a:	f008 fb75 	bl	801d488 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	2200      	movs	r2, #0
 8014da2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	2200      	movs	r2, #0
 8014da8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014daa:	bf00      	nop
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	080212ec 	.word	0x080212ec
 8014db8:	08021954 	.word	0x08021954
 8014dbc:	08021330 	.word	0x08021330
 8014dc0:	08021970 	.word	0x08021970
 8014dc4:	08021990 	.word	0x08021990
 8014dc8:	080219a8 	.word	0x080219a8
 8014dcc:	080219c4 	.word	0x080219c4

08014dd0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d106      	bne.n	8014dec <tcp_next_iss+0x1c>
 8014dde:	4b0a      	ldr	r3, [pc, #40]	@ (8014e08 <tcp_next_iss+0x38>)
 8014de0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014de4:	4909      	ldr	r1, [pc, #36]	@ (8014e0c <tcp_next_iss+0x3c>)
 8014de6:	480a      	ldr	r0, [pc, #40]	@ (8014e10 <tcp_next_iss+0x40>)
 8014de8:	f008 fb4e 	bl	801d488 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014dec:	4b09      	ldr	r3, [pc, #36]	@ (8014e14 <tcp_next_iss+0x44>)
 8014dee:	681a      	ldr	r2, [r3, #0]
 8014df0:	4b09      	ldr	r3, [pc, #36]	@ (8014e18 <tcp_next_iss+0x48>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4413      	add	r3, r2
 8014df6:	4a07      	ldr	r2, [pc, #28]	@ (8014e14 <tcp_next_iss+0x44>)
 8014df8:	6013      	str	r3, [r2, #0]
  return iss;
 8014dfa:	4b06      	ldr	r3, [pc, #24]	@ (8014e14 <tcp_next_iss+0x44>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014dfe:	4618      	mov	r0, r3
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}
 8014e06:	bf00      	nop
 8014e08:	080212ec 	.word	0x080212ec
 8014e0c:	080219dc 	.word	0x080219dc
 8014e10:	08021330 	.word	0x08021330
 8014e14:	20000080 	.word	0x20000080
 8014e18:	2000f394 	.word	0x2000f394

08014e1c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b086      	sub	sp, #24
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	4603      	mov	r3, r0
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
 8014e28:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d106      	bne.n	8014e3e <tcp_eff_send_mss_netif+0x22>
 8014e30:	4b14      	ldr	r3, [pc, #80]	@ (8014e84 <tcp_eff_send_mss_netif+0x68>)
 8014e32:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014e36:	4914      	ldr	r1, [pc, #80]	@ (8014e88 <tcp_eff_send_mss_netif+0x6c>)
 8014e38:	4814      	ldr	r0, [pc, #80]	@ (8014e8c <tcp_eff_send_mss_netif+0x70>)
 8014e3a:	f008 fb25 	bl	801d488 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014e3e:	68bb      	ldr	r3, [r7, #8]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d101      	bne.n	8014e48 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014e44:	89fb      	ldrh	r3, [r7, #14]
 8014e46:	e019      	b.n	8014e7c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014e4c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014e4e:	8afb      	ldrh	r3, [r7, #22]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d012      	beq.n	8014e7a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014e54:	2328      	movs	r3, #40	@ 0x28
 8014e56:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014e58:	8afa      	ldrh	r2, [r7, #22]
 8014e5a:	8abb      	ldrh	r3, [r7, #20]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	d904      	bls.n	8014e6a <tcp_eff_send_mss_netif+0x4e>
 8014e60:	8afa      	ldrh	r2, [r7, #22]
 8014e62:	8abb      	ldrh	r3, [r7, #20]
 8014e64:	1ad3      	subs	r3, r2, r3
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	e000      	b.n	8014e6c <tcp_eff_send_mss_netif+0x50>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014e6e:	8a7a      	ldrh	r2, [r7, #18]
 8014e70:	89fb      	ldrh	r3, [r7, #14]
 8014e72:	4293      	cmp	r3, r2
 8014e74:	bf28      	it	cs
 8014e76:	4613      	movcs	r3, r2
 8014e78:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014e7a:	89fb      	ldrh	r3, [r7, #14]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3718      	adds	r7, #24
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	080212ec 	.word	0x080212ec
 8014e88:	080219f8 	.word	0x080219f8
 8014e8c:	08021330 	.word	0x08021330

08014e90 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d119      	bne.n	8014ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8014ea4:	4b10      	ldr	r3, [pc, #64]	@ (8014ee8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8014ea6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8014eaa:	4910      	ldr	r1, [pc, #64]	@ (8014eec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014eac:	4810      	ldr	r0, [pc, #64]	@ (8014ef0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014eae:	f008 faeb 	bl	801d488 <iprintf>

  while (pcb != NULL) {
 8014eb2:	e011      	b.n	8014ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	681a      	ldr	r2, [r3, #0]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d108      	bne.n	8014ed2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	f7fe fd1e 	bl	8013908 <tcp_abort>
      pcb = next;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	60fb      	str	r3, [r7, #12]
 8014ed0:	e002      	b.n	8014ed8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	68db      	ldr	r3, [r3, #12]
 8014ed6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d1ea      	bne.n	8014eb4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8014ede:	bf00      	nop
 8014ee0:	bf00      	nop
 8014ee2:	3710      	adds	r7, #16
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	080212ec 	.word	0x080212ec
 8014eec:	08021a20 	.word	0x08021a20
 8014ef0:	08021330 	.word	0x08021330

08014ef4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d02a      	beq.n	8014f5a <tcp_netif_ip_addr_changed+0x66>
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d026      	beq.n	8014f5a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014f0c:	4b15      	ldr	r3, [pc, #84]	@ (8014f64 <tcp_netif_ip_addr_changed+0x70>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	4619      	mov	r1, r3
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff ffbc 	bl	8014e90 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014f18:	4b13      	ldr	r3, [pc, #76]	@ (8014f68 <tcp_netif_ip_addr_changed+0x74>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff ffb6 	bl	8014e90 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d017      	beq.n	8014f5a <tcp_netif_ip_addr_changed+0x66>
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d013      	beq.n	8014f5a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f32:	4b0e      	ldr	r3, [pc, #56]	@ (8014f6c <tcp_netif_ip_addr_changed+0x78>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	60fb      	str	r3, [r7, #12]
 8014f38:	e00c      	b.n	8014f54 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d103      	bne.n	8014f4e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	68db      	ldr	r3, [r3, #12]
 8014f52:	60fb      	str	r3, [r7, #12]
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d1ef      	bne.n	8014f3a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014f5a:	bf00      	nop
 8014f5c:	3710      	adds	r7, #16
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	2000f3a0 	.word	0x2000f3a0
 8014f68:	2000f398 	.word	0x2000f398
 8014f6c:	2000f39c 	.word	0x2000f39c

08014f70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b082      	sub	sp, #8
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d007      	beq.n	8014f90 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7ff fb51 	bl	801462c <tcp_segs_free>
    pcb->ooseq = NULL;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014f90:	bf00      	nop
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}

08014f98 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014f98:	b590      	push	{r4, r7, lr}
 8014f9a:	b08d      	sub	sp, #52	@ 0x34
 8014f9c:	af04      	add	r7, sp, #16
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d105      	bne.n	8014fb4 <tcp_input+0x1c>
 8014fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8015218 <tcp_input+0x280>)
 8014faa:	2283      	movs	r2, #131	@ 0x83
 8014fac:	499b      	ldr	r1, [pc, #620]	@ (801521c <tcp_input+0x284>)
 8014fae:	489c      	ldr	r0, [pc, #624]	@ (8015220 <tcp_input+0x288>)
 8014fb0:	f008 fa6a 	bl	801d488 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	685b      	ldr	r3, [r3, #4]
 8014fb8:	4a9a      	ldr	r2, [pc, #616]	@ (8015224 <tcp_input+0x28c>)
 8014fba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	895b      	ldrh	r3, [r3, #10]
 8014fc0:	2b13      	cmp	r3, #19
 8014fc2:	f240 83d1 	bls.w	8015768 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014fc6:	4b98      	ldr	r3, [pc, #608]	@ (8015228 <tcp_input+0x290>)
 8014fc8:	695b      	ldr	r3, [r3, #20]
 8014fca:	4a97      	ldr	r2, [pc, #604]	@ (8015228 <tcp_input+0x290>)
 8014fcc:	6812      	ldr	r2, [r2, #0]
 8014fce:	4611      	mov	r1, r2
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f006 fbc9 	bl	801b768 <ip4_addr_isbroadcast_u32>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f040 83c7 	bne.w	801576c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014fde:	4b92      	ldr	r3, [pc, #584]	@ (8015228 <tcp_input+0x290>)
 8014fe0:	695b      	ldr	r3, [r3, #20]
 8014fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014fe6:	2be0      	cmp	r3, #224	@ 0xe0
 8014fe8:	f000 83c0 	beq.w	801576c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014fec:	4b8d      	ldr	r3, [pc, #564]	@ (8015224 <tcp_input+0x28c>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	899b      	ldrh	r3, [r3, #12]
 8014ff2:	b29b      	uxth	r3, r3
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fc fa5f 	bl	80114b8 <lwip_htons>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	0b1b      	lsrs	r3, r3, #12
 8014ffe:	b29b      	uxth	r3, r3
 8015000:	b2db      	uxtb	r3, r3
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015006:	7cbb      	ldrb	r3, [r7, #18]
 8015008:	2b13      	cmp	r3, #19
 801500a:	f240 83b1 	bls.w	8015770 <tcp_input+0x7d8>
 801500e:	7cbb      	ldrb	r3, [r7, #18]
 8015010:	b29a      	uxth	r2, r3
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	891b      	ldrh	r3, [r3, #8]
 8015016:	429a      	cmp	r2, r3
 8015018:	f200 83aa 	bhi.w	8015770 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801501c:	7cbb      	ldrb	r3, [r7, #18]
 801501e:	b29b      	uxth	r3, r3
 8015020:	3b14      	subs	r3, #20
 8015022:	b29a      	uxth	r2, r3
 8015024:	4b81      	ldr	r3, [pc, #516]	@ (801522c <tcp_input+0x294>)
 8015026:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015028:	4b81      	ldr	r3, [pc, #516]	@ (8015230 <tcp_input+0x298>)
 801502a:	2200      	movs	r2, #0
 801502c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	895a      	ldrh	r2, [r3, #10]
 8015032:	7cbb      	ldrb	r3, [r7, #18]
 8015034:	b29b      	uxth	r3, r3
 8015036:	429a      	cmp	r2, r3
 8015038:	d309      	bcc.n	801504e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801503a:	4b7c      	ldr	r3, [pc, #496]	@ (801522c <tcp_input+0x294>)
 801503c:	881a      	ldrh	r2, [r3, #0]
 801503e:	4b7d      	ldr	r3, [pc, #500]	@ (8015234 <tcp_input+0x29c>)
 8015040:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015042:	7cbb      	ldrb	r3, [r7, #18]
 8015044:	4619      	mov	r1, r3
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f7fd fdd8 	bl	8012bfc <pbuf_remove_header>
 801504c:	e04e      	b.n	80150ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d105      	bne.n	8015062 <tcp_input+0xca>
 8015056:	4b70      	ldr	r3, [pc, #448]	@ (8015218 <tcp_input+0x280>)
 8015058:	22c2      	movs	r2, #194	@ 0xc2
 801505a:	4977      	ldr	r1, [pc, #476]	@ (8015238 <tcp_input+0x2a0>)
 801505c:	4870      	ldr	r0, [pc, #448]	@ (8015220 <tcp_input+0x288>)
 801505e:	f008 fa13 	bl	801d488 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015062:	2114      	movs	r1, #20
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f7fd fdc9 	bl	8012bfc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	895a      	ldrh	r2, [r3, #10]
 801506e:	4b71      	ldr	r3, [pc, #452]	@ (8015234 <tcp_input+0x29c>)
 8015070:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015072:	4b6e      	ldr	r3, [pc, #440]	@ (801522c <tcp_input+0x294>)
 8015074:	881a      	ldrh	r2, [r3, #0]
 8015076:	4b6f      	ldr	r3, [pc, #444]	@ (8015234 <tcp_input+0x29c>)
 8015078:	881b      	ldrh	r3, [r3, #0]
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801507e:	4b6d      	ldr	r3, [pc, #436]	@ (8015234 <tcp_input+0x29c>)
 8015080:	881b      	ldrh	r3, [r3, #0]
 8015082:	4619      	mov	r1, r3
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7fd fdb9 	bl	8012bfc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	895b      	ldrh	r3, [r3, #10]
 8015090:	8a3a      	ldrh	r2, [r7, #16]
 8015092:	429a      	cmp	r2, r3
 8015094:	f200 836e 	bhi.w	8015774 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	4a64      	ldr	r2, [pc, #400]	@ (8015230 <tcp_input+0x298>)
 80150a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	8a3a      	ldrh	r2, [r7, #16]
 80150a8:	4611      	mov	r1, r2
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7fd fda6 	bl	8012bfc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	891a      	ldrh	r2, [r3, #8]
 80150b4:	8a3b      	ldrh	r3, [r7, #16]
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	895b      	ldrh	r3, [r3, #10]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d005      	beq.n	80150d2 <tcp_input+0x13a>
 80150c6:	4b54      	ldr	r3, [pc, #336]	@ (8015218 <tcp_input+0x280>)
 80150c8:	22df      	movs	r2, #223	@ 0xdf
 80150ca:	495c      	ldr	r1, [pc, #368]	@ (801523c <tcp_input+0x2a4>)
 80150cc:	4854      	ldr	r0, [pc, #336]	@ (8015220 <tcp_input+0x288>)
 80150ce:	f008 f9db 	bl	801d488 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	891a      	ldrh	r2, [r3, #8]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	891b      	ldrh	r3, [r3, #8]
 80150dc:	429a      	cmp	r2, r3
 80150de:	d005      	beq.n	80150ec <tcp_input+0x154>
 80150e0:	4b4d      	ldr	r3, [pc, #308]	@ (8015218 <tcp_input+0x280>)
 80150e2:	22e0      	movs	r2, #224	@ 0xe0
 80150e4:	4956      	ldr	r1, [pc, #344]	@ (8015240 <tcp_input+0x2a8>)
 80150e6:	484e      	ldr	r0, [pc, #312]	@ (8015220 <tcp_input+0x288>)
 80150e8:	f008 f9ce 	bl	801d488 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80150ec:	4b4d      	ldr	r3, [pc, #308]	@ (8015224 <tcp_input+0x28c>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	4a4b      	ldr	r2, [pc, #300]	@ (8015224 <tcp_input+0x28c>)
 80150f6:	6814      	ldr	r4, [r2, #0]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fc f9dd 	bl	80114b8 <lwip_htons>
 80150fe:	4603      	mov	r3, r0
 8015100:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015102:	4b48      	ldr	r3, [pc, #288]	@ (8015224 <tcp_input+0x28c>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	885b      	ldrh	r3, [r3, #2]
 8015108:	b29b      	uxth	r3, r3
 801510a:	4a46      	ldr	r2, [pc, #280]	@ (8015224 <tcp_input+0x28c>)
 801510c:	6814      	ldr	r4, [r2, #0]
 801510e:	4618      	mov	r0, r3
 8015110:	f7fc f9d2 	bl	80114b8 <lwip_htons>
 8015114:	4603      	mov	r3, r0
 8015116:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015118:	4b42      	ldr	r3, [pc, #264]	@ (8015224 <tcp_input+0x28c>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	4a41      	ldr	r2, [pc, #260]	@ (8015224 <tcp_input+0x28c>)
 8015120:	6814      	ldr	r4, [r2, #0]
 8015122:	4618      	mov	r0, r3
 8015124:	f7fc f9dd 	bl	80114e2 <lwip_htonl>
 8015128:	4603      	mov	r3, r0
 801512a:	6063      	str	r3, [r4, #4]
 801512c:	6863      	ldr	r3, [r4, #4]
 801512e:	4a45      	ldr	r2, [pc, #276]	@ (8015244 <tcp_input+0x2ac>)
 8015130:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015132:	4b3c      	ldr	r3, [pc, #240]	@ (8015224 <tcp_input+0x28c>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	689b      	ldr	r3, [r3, #8]
 8015138:	4a3a      	ldr	r2, [pc, #232]	@ (8015224 <tcp_input+0x28c>)
 801513a:	6814      	ldr	r4, [r2, #0]
 801513c:	4618      	mov	r0, r3
 801513e:	f7fc f9d0 	bl	80114e2 <lwip_htonl>
 8015142:	4603      	mov	r3, r0
 8015144:	60a3      	str	r3, [r4, #8]
 8015146:	68a3      	ldr	r3, [r4, #8]
 8015148:	4a3f      	ldr	r2, [pc, #252]	@ (8015248 <tcp_input+0x2b0>)
 801514a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801514c:	4b35      	ldr	r3, [pc, #212]	@ (8015224 <tcp_input+0x28c>)
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	89db      	ldrh	r3, [r3, #14]
 8015152:	b29b      	uxth	r3, r3
 8015154:	4a33      	ldr	r2, [pc, #204]	@ (8015224 <tcp_input+0x28c>)
 8015156:	6814      	ldr	r4, [r2, #0]
 8015158:	4618      	mov	r0, r3
 801515a:	f7fc f9ad 	bl	80114b8 <lwip_htons>
 801515e:	4603      	mov	r3, r0
 8015160:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015162:	4b30      	ldr	r3, [pc, #192]	@ (8015224 <tcp_input+0x28c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	899b      	ldrh	r3, [r3, #12]
 8015168:	b29b      	uxth	r3, r3
 801516a:	4618      	mov	r0, r3
 801516c:	f7fc f9a4 	bl	80114b8 <lwip_htons>
 8015170:	4603      	mov	r3, r0
 8015172:	b2db      	uxtb	r3, r3
 8015174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015178:	b2da      	uxtb	r2, r3
 801517a:	4b34      	ldr	r3, [pc, #208]	@ (801524c <tcp_input+0x2b4>)
 801517c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	891a      	ldrh	r2, [r3, #8]
 8015182:	4b33      	ldr	r3, [pc, #204]	@ (8015250 <tcp_input+0x2b8>)
 8015184:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015186:	4b31      	ldr	r3, [pc, #196]	@ (801524c <tcp_input+0x2b4>)
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	f003 0303 	and.w	r3, r3, #3
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00c      	beq.n	80151ac <tcp_input+0x214>
    tcplen++;
 8015192:	4b2f      	ldr	r3, [pc, #188]	@ (8015250 <tcp_input+0x2b8>)
 8015194:	881b      	ldrh	r3, [r3, #0]
 8015196:	3301      	adds	r3, #1
 8015198:	b29a      	uxth	r2, r3
 801519a:	4b2d      	ldr	r3, [pc, #180]	@ (8015250 <tcp_input+0x2b8>)
 801519c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	891a      	ldrh	r2, [r3, #8]
 80151a2:	4b2b      	ldr	r3, [pc, #172]	@ (8015250 <tcp_input+0x2b8>)
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	f200 82e6 	bhi.w	8015778 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80151ac:	2300      	movs	r3, #0
 80151ae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80151b0:	4b28      	ldr	r3, [pc, #160]	@ (8015254 <tcp_input+0x2bc>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	61fb      	str	r3, [r7, #28]
 80151b6:	e09d      	b.n	80152f4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	7d1b      	ldrb	r3, [r3, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d105      	bne.n	80151cc <tcp_input+0x234>
 80151c0:	4b15      	ldr	r3, [pc, #84]	@ (8015218 <tcp_input+0x280>)
 80151c2:	22fb      	movs	r2, #251	@ 0xfb
 80151c4:	4924      	ldr	r1, [pc, #144]	@ (8015258 <tcp_input+0x2c0>)
 80151c6:	4816      	ldr	r0, [pc, #88]	@ (8015220 <tcp_input+0x288>)
 80151c8:	f008 f95e 	bl	801d488 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	7d1b      	ldrb	r3, [r3, #20]
 80151d0:	2b0a      	cmp	r3, #10
 80151d2:	d105      	bne.n	80151e0 <tcp_input+0x248>
 80151d4:	4b10      	ldr	r3, [pc, #64]	@ (8015218 <tcp_input+0x280>)
 80151d6:	22fc      	movs	r2, #252	@ 0xfc
 80151d8:	4920      	ldr	r1, [pc, #128]	@ (801525c <tcp_input+0x2c4>)
 80151da:	4811      	ldr	r0, [pc, #68]	@ (8015220 <tcp_input+0x288>)
 80151dc:	f008 f954 	bl	801d488 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80151e0:	69fb      	ldr	r3, [r7, #28]
 80151e2:	7d1b      	ldrb	r3, [r3, #20]
 80151e4:	2b01      	cmp	r3, #1
 80151e6:	d105      	bne.n	80151f4 <tcp_input+0x25c>
 80151e8:	4b0b      	ldr	r3, [pc, #44]	@ (8015218 <tcp_input+0x280>)
 80151ea:	22fd      	movs	r2, #253	@ 0xfd
 80151ec:	491c      	ldr	r1, [pc, #112]	@ (8015260 <tcp_input+0x2c8>)
 80151ee:	480c      	ldr	r0, [pc, #48]	@ (8015220 <tcp_input+0x288>)
 80151f0:	f008 f94a 	bl	801d488 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80151f4:	69fb      	ldr	r3, [r7, #28]
 80151f6:	7a1b      	ldrb	r3, [r3, #8]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d033      	beq.n	8015264 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80151fc:	69fb      	ldr	r3, [r7, #28]
 80151fe:	7a1a      	ldrb	r2, [r3, #8]
 8015200:	4b09      	ldr	r3, [pc, #36]	@ (8015228 <tcp_input+0x290>)
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015208:	3301      	adds	r3, #1
 801520a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801520c:	429a      	cmp	r2, r3
 801520e:	d029      	beq.n	8015264 <tcp_input+0x2cc>
      prev = pcb;
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	61bb      	str	r3, [r7, #24]
      continue;
 8015214:	e06b      	b.n	80152ee <tcp_input+0x356>
 8015216:	bf00      	nop
 8015218:	08021a54 	.word	0x08021a54
 801521c:	08021a88 	.word	0x08021a88
 8015220:	08021aa0 	.word	0x08021aa0
 8015224:	2000f3bc 	.word	0x2000f3bc
 8015228:	2000bc40 	.word	0x2000bc40
 801522c:	2000f3c0 	.word	0x2000f3c0
 8015230:	2000f3c4 	.word	0x2000f3c4
 8015234:	2000f3c2 	.word	0x2000f3c2
 8015238:	08021ac8 	.word	0x08021ac8
 801523c:	08021ad8 	.word	0x08021ad8
 8015240:	08021ae4 	.word	0x08021ae4
 8015244:	2000f3cc 	.word	0x2000f3cc
 8015248:	2000f3d0 	.word	0x2000f3d0
 801524c:	2000f3d8 	.word	0x2000f3d8
 8015250:	2000f3d6 	.word	0x2000f3d6
 8015254:	2000f3a0 	.word	0x2000f3a0
 8015258:	08021b04 	.word	0x08021b04
 801525c:	08021b2c 	.word	0x08021b2c
 8015260:	08021b58 	.word	0x08021b58
    }

    if (pcb->remote_port == tcphdr->src &&
 8015264:	69fb      	ldr	r3, [r7, #28]
 8015266:	8b1a      	ldrh	r2, [r3, #24]
 8015268:	4b72      	ldr	r3, [pc, #456]	@ (8015434 <tcp_input+0x49c>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	b29b      	uxth	r3, r3
 8015270:	429a      	cmp	r2, r3
 8015272:	d13a      	bne.n	80152ea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	8ada      	ldrh	r2, [r3, #22]
 8015278:	4b6e      	ldr	r3, [pc, #440]	@ (8015434 <tcp_input+0x49c>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	885b      	ldrh	r3, [r3, #2]
 801527e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015280:	429a      	cmp	r2, r3
 8015282:	d132      	bne.n	80152ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	685a      	ldr	r2, [r3, #4]
 8015288:	4b6b      	ldr	r3, [pc, #428]	@ (8015438 <tcp_input+0x4a0>)
 801528a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801528c:	429a      	cmp	r2, r3
 801528e:	d12c      	bne.n	80152ea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	4b68      	ldr	r3, [pc, #416]	@ (8015438 <tcp_input+0x4a0>)
 8015296:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015298:	429a      	cmp	r2, r3
 801529a:	d126      	bne.n	80152ea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	69fa      	ldr	r2, [r7, #28]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d106      	bne.n	80152b4 <tcp_input+0x31c>
 80152a6:	4b65      	ldr	r3, [pc, #404]	@ (801543c <tcp_input+0x4a4>)
 80152a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80152ac:	4964      	ldr	r1, [pc, #400]	@ (8015440 <tcp_input+0x4a8>)
 80152ae:	4865      	ldr	r0, [pc, #404]	@ (8015444 <tcp_input+0x4ac>)
 80152b0:	f008 f8ea 	bl	801d488 <iprintf>
      if (prev != NULL) {
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d00a      	beq.n	80152d0 <tcp_input+0x338>
        prev->next = pcb->next;
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	68da      	ldr	r2, [r3, #12]
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80152c2:	4b61      	ldr	r3, [pc, #388]	@ (8015448 <tcp_input+0x4b0>)
 80152c4:	681a      	ldr	r2, [r3, #0]
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80152ca:	4a5f      	ldr	r2, [pc, #380]	@ (8015448 <tcp_input+0x4b0>)
 80152cc:	69fb      	ldr	r3, [r7, #28]
 80152ce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80152d0:	69fb      	ldr	r3, [r7, #28]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	69fa      	ldr	r2, [r7, #28]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d111      	bne.n	80152fe <tcp_input+0x366>
 80152da:	4b58      	ldr	r3, [pc, #352]	@ (801543c <tcp_input+0x4a4>)
 80152dc:	f240 1215 	movw	r2, #277	@ 0x115
 80152e0:	495a      	ldr	r1, [pc, #360]	@ (801544c <tcp_input+0x4b4>)
 80152e2:	4858      	ldr	r0, [pc, #352]	@ (8015444 <tcp_input+0x4ac>)
 80152e4:	f008 f8d0 	bl	801d488 <iprintf>
      break;
 80152e8:	e009      	b.n	80152fe <tcp_input+0x366>
    }
    prev = pcb;
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	68db      	ldr	r3, [r3, #12]
 80152f2:	61fb      	str	r3, [r7, #28]
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	f47f af5e 	bne.w	80151b8 <tcp_input+0x220>
 80152fc:	e000      	b.n	8015300 <tcp_input+0x368>
      break;
 80152fe:	bf00      	nop
  }

  if (pcb == NULL) {
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	2b00      	cmp	r3, #0
 8015304:	f040 80aa 	bne.w	801545c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015308:	4b51      	ldr	r3, [pc, #324]	@ (8015450 <tcp_input+0x4b8>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	61fb      	str	r3, [r7, #28]
 801530e:	e03f      	b.n	8015390 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015310:	69fb      	ldr	r3, [r7, #28]
 8015312:	7d1b      	ldrb	r3, [r3, #20]
 8015314:	2b0a      	cmp	r3, #10
 8015316:	d006      	beq.n	8015326 <tcp_input+0x38e>
 8015318:	4b48      	ldr	r3, [pc, #288]	@ (801543c <tcp_input+0x4a4>)
 801531a:	f240 121f 	movw	r2, #287	@ 0x11f
 801531e:	494d      	ldr	r1, [pc, #308]	@ (8015454 <tcp_input+0x4bc>)
 8015320:	4848      	ldr	r0, [pc, #288]	@ (8015444 <tcp_input+0x4ac>)
 8015322:	f008 f8b1 	bl	801d488 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	7a1b      	ldrb	r3, [r3, #8]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d009      	beq.n	8015342 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	7a1a      	ldrb	r2, [r3, #8]
 8015332:	4b41      	ldr	r3, [pc, #260]	@ (8015438 <tcp_input+0x4a0>)
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801533a:	3301      	adds	r3, #1
 801533c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801533e:	429a      	cmp	r2, r3
 8015340:	d122      	bne.n	8015388 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015342:	69fb      	ldr	r3, [r7, #28]
 8015344:	8b1a      	ldrh	r2, [r3, #24]
 8015346:	4b3b      	ldr	r3, [pc, #236]	@ (8015434 <tcp_input+0x49c>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	b29b      	uxth	r3, r3
 801534e:	429a      	cmp	r2, r3
 8015350:	d11b      	bne.n	801538a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	8ada      	ldrh	r2, [r3, #22]
 8015356:	4b37      	ldr	r3, [pc, #220]	@ (8015434 <tcp_input+0x49c>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	885b      	ldrh	r3, [r3, #2]
 801535c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801535e:	429a      	cmp	r2, r3
 8015360:	d113      	bne.n	801538a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	4b34      	ldr	r3, [pc, #208]	@ (8015438 <tcp_input+0x4a0>)
 8015368:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801536a:	429a      	cmp	r2, r3
 801536c:	d10d      	bne.n	801538a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	681a      	ldr	r2, [r3, #0]
 8015372:	4b31      	ldr	r3, [pc, #196]	@ (8015438 <tcp_input+0x4a0>)
 8015374:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015376:	429a      	cmp	r2, r3
 8015378:	d107      	bne.n	801538a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801537a:	69f8      	ldr	r0, [r7, #28]
 801537c:	f000 fb56 	bl	8015a2c <tcp_timewait_input>
        }
        pbuf_free(p);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f7fd fcc1 	bl	8012d08 <pbuf_free>
        return;
 8015386:	e1fd      	b.n	8015784 <tcp_input+0x7ec>
        continue;
 8015388:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	68db      	ldr	r3, [r3, #12]
 801538e:	61fb      	str	r3, [r7, #28]
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d1bc      	bne.n	8015310 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015396:	2300      	movs	r3, #0
 8015398:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801539a:	4b2f      	ldr	r3, [pc, #188]	@ (8015458 <tcp_input+0x4c0>)
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	617b      	str	r3, [r7, #20]
 80153a0:	e02a      	b.n	80153f8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	7a1b      	ldrb	r3, [r3, #8]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d00c      	beq.n	80153c4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	7a1a      	ldrb	r2, [r3, #8]
 80153ae:	4b22      	ldr	r3, [pc, #136]	@ (8015438 <tcp_input+0x4a0>)
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80153b6:	3301      	adds	r3, #1
 80153b8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d002      	beq.n	80153c4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	61bb      	str	r3, [r7, #24]
        continue;
 80153c2:	e016      	b.n	80153f2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	8ada      	ldrh	r2, [r3, #22]
 80153c8:	4b1a      	ldr	r3, [pc, #104]	@ (8015434 <tcp_input+0x49c>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	885b      	ldrh	r3, [r3, #2]
 80153ce:	b29b      	uxth	r3, r3
 80153d0:	429a      	cmp	r2, r3
 80153d2:	d10c      	bne.n	80153ee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	681a      	ldr	r2, [r3, #0]
 80153d8:	4b17      	ldr	r3, [pc, #92]	@ (8015438 <tcp_input+0x4a0>)
 80153da:	695b      	ldr	r3, [r3, #20]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d00f      	beq.n	8015400 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d00d      	beq.n	8015402 <tcp_input+0x46a>
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d009      	beq.n	8015402 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	68db      	ldr	r3, [r3, #12]
 80153f6:	617b      	str	r3, [r7, #20]
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d1d1      	bne.n	80153a2 <tcp_input+0x40a>
 80153fe:	e000      	b.n	8015402 <tcp_input+0x46a>
            break;
 8015400:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d029      	beq.n	801545c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d00a      	beq.n	8015424 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	68da      	ldr	r2, [r3, #12]
 8015412:	69bb      	ldr	r3, [r7, #24]
 8015414:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015416:	4b10      	ldr	r3, [pc, #64]	@ (8015458 <tcp_input+0x4c0>)
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801541e:	4a0e      	ldr	r2, [pc, #56]	@ (8015458 <tcp_input+0x4c0>)
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015424:	6978      	ldr	r0, [r7, #20]
 8015426:	f000 fa03 	bl	8015830 <tcp_listen_input>
      }
      pbuf_free(p);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f7fd fc6c 	bl	8012d08 <pbuf_free>
      return;
 8015430:	e1a8      	b.n	8015784 <tcp_input+0x7ec>
 8015432:	bf00      	nop
 8015434:	2000f3bc 	.word	0x2000f3bc
 8015438:	2000bc40 	.word	0x2000bc40
 801543c:	08021a54 	.word	0x08021a54
 8015440:	08021b80 	.word	0x08021b80
 8015444:	08021aa0 	.word	0x08021aa0
 8015448:	2000f3a0 	.word	0x2000f3a0
 801544c:	08021bac 	.word	0x08021bac
 8015450:	2000f3a4 	.word	0x2000f3a4
 8015454:	08021bd8 	.word	0x08021bd8
 8015458:	2000f39c 	.word	0x2000f39c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	2b00      	cmp	r3, #0
 8015460:	f000 8158 	beq.w	8015714 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015464:	4b95      	ldr	r3, [pc, #596]	@ (80156bc <tcp_input+0x724>)
 8015466:	2200      	movs	r2, #0
 8015468:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	891a      	ldrh	r2, [r3, #8]
 801546e:	4b93      	ldr	r3, [pc, #588]	@ (80156bc <tcp_input+0x724>)
 8015470:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015472:	4a92      	ldr	r2, [pc, #584]	@ (80156bc <tcp_input+0x724>)
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015478:	4b91      	ldr	r3, [pc, #580]	@ (80156c0 <tcp_input+0x728>)
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	4a8f      	ldr	r2, [pc, #572]	@ (80156bc <tcp_input+0x724>)
 801547e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015480:	4b90      	ldr	r3, [pc, #576]	@ (80156c4 <tcp_input+0x72c>)
 8015482:	2200      	movs	r2, #0
 8015484:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015486:	4b90      	ldr	r3, [pc, #576]	@ (80156c8 <tcp_input+0x730>)
 8015488:	2200      	movs	r2, #0
 801548a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801548c:	4b8f      	ldr	r3, [pc, #572]	@ (80156cc <tcp_input+0x734>)
 801548e:	2200      	movs	r2, #0
 8015490:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015492:	4b8f      	ldr	r3, [pc, #572]	@ (80156d0 <tcp_input+0x738>)
 8015494:	781b      	ldrb	r3, [r3, #0]
 8015496:	f003 0308 	and.w	r3, r3, #8
 801549a:	2b00      	cmp	r3, #0
 801549c:	d006      	beq.n	80154ac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	7b5b      	ldrb	r3, [r3, #13]
 80154a2:	f043 0301 	orr.w	r3, r3, #1
 80154a6:	b2da      	uxtb	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d017      	beq.n	80154e4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80154b4:	69f8      	ldr	r0, [r7, #28]
 80154b6:	f7ff f83d 	bl	8014534 <tcp_process_refused_data>
 80154ba:	4603      	mov	r3, r0
 80154bc:	f113 0f0d 	cmn.w	r3, #13
 80154c0:	d007      	beq.n	80154d2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d00c      	beq.n	80154e4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80154ca:	4b82      	ldr	r3, [pc, #520]	@ (80156d4 <tcp_input+0x73c>)
 80154cc:	881b      	ldrh	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d008      	beq.n	80154e4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	f040 80e3 	bne.w	80156a2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80154dc:	69f8      	ldr	r0, [r7, #28]
 80154de:	f003 fdff 	bl	80190e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80154e2:	e0de      	b.n	80156a2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80154e4:	4a7c      	ldr	r2, [pc, #496]	@ (80156d8 <tcp_input+0x740>)
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80154ea:	69f8      	ldr	r0, [r7, #28]
 80154ec:	f000 fb18 	bl	8015b20 <tcp_process>
 80154f0:	4603      	mov	r3, r0
 80154f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80154f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80154f8:	f113 0f0d 	cmn.w	r3, #13
 80154fc:	f000 80d3 	beq.w	80156a6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015500:	4b71      	ldr	r3, [pc, #452]	@ (80156c8 <tcp_input+0x730>)
 8015502:	781b      	ldrb	r3, [r3, #0]
 8015504:	f003 0308 	and.w	r3, r3, #8
 8015508:	2b00      	cmp	r3, #0
 801550a:	d015      	beq.n	8015538 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015512:	2b00      	cmp	r3, #0
 8015514:	d008      	beq.n	8015528 <tcp_input+0x590>
 8015516:	69fb      	ldr	r3, [r7, #28]
 8015518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801551c:	69fa      	ldr	r2, [r7, #28]
 801551e:	6912      	ldr	r2, [r2, #16]
 8015520:	f06f 010d 	mvn.w	r1, #13
 8015524:	4610      	mov	r0, r2
 8015526:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015528:	69f9      	ldr	r1, [r7, #28]
 801552a:	486c      	ldr	r0, [pc, #432]	@ (80156dc <tcp_input+0x744>)
 801552c:	f7ff fbbc 	bl	8014ca8 <tcp_pcb_remove>
        tcp_free(pcb);
 8015530:	69f8      	ldr	r0, [r7, #28]
 8015532:	f7fd fea5 	bl	8013280 <tcp_free>
 8015536:	e0da      	b.n	80156ee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015538:	2300      	movs	r3, #0
 801553a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801553c:	4b63      	ldr	r3, [pc, #396]	@ (80156cc <tcp_input+0x734>)
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d01d      	beq.n	8015580 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015544:	4b61      	ldr	r3, [pc, #388]	@ (80156cc <tcp_input+0x734>)
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015550:	2b00      	cmp	r3, #0
 8015552:	d00a      	beq.n	801556a <tcp_input+0x5d2>
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801555a:	69fa      	ldr	r2, [r7, #28]
 801555c:	6910      	ldr	r0, [r2, #16]
 801555e:	89fa      	ldrh	r2, [r7, #14]
 8015560:	69f9      	ldr	r1, [r7, #28]
 8015562:	4798      	blx	r3
 8015564:	4603      	mov	r3, r0
 8015566:	74fb      	strb	r3, [r7, #19]
 8015568:	e001      	b.n	801556e <tcp_input+0x5d6>
 801556a:	2300      	movs	r3, #0
 801556c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801556e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015572:	f113 0f0d 	cmn.w	r3, #13
 8015576:	f000 8098 	beq.w	80156aa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801557a:	4b54      	ldr	r3, [pc, #336]	@ (80156cc <tcp_input+0x734>)
 801557c:	2200      	movs	r2, #0
 801557e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015580:	69f8      	ldr	r0, [r7, #28]
 8015582:	f000 f915 	bl	80157b0 <tcp_input_delayed_close>
 8015586:	4603      	mov	r3, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	f040 8090 	bne.w	80156ae <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801558e:	4b4d      	ldr	r3, [pc, #308]	@ (80156c4 <tcp_input+0x72c>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d041      	beq.n	801561a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015596:	69fb      	ldr	r3, [r7, #28]
 8015598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801559a:	2b00      	cmp	r3, #0
 801559c:	d006      	beq.n	80155ac <tcp_input+0x614>
 801559e:	4b50      	ldr	r3, [pc, #320]	@ (80156e0 <tcp_input+0x748>)
 80155a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80155a4:	494f      	ldr	r1, [pc, #316]	@ (80156e4 <tcp_input+0x74c>)
 80155a6:	4850      	ldr	r0, [pc, #320]	@ (80156e8 <tcp_input+0x750>)
 80155a8:	f007 ff6e 	bl	801d488 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	8b5b      	ldrh	r3, [r3, #26]
 80155b0:	f003 0310 	and.w	r3, r3, #16
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d008      	beq.n	80155ca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80155b8:	4b42      	ldr	r3, [pc, #264]	@ (80156c4 <tcp_input+0x72c>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	4618      	mov	r0, r3
 80155be:	f7fd fba3 	bl	8012d08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80155c2:	69f8      	ldr	r0, [r7, #28]
 80155c4:	f7fe f9a0 	bl	8013908 <tcp_abort>
            goto aborted;
 80155c8:	e091      	b.n	80156ee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80155ca:	69fb      	ldr	r3, [r7, #28]
 80155cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00c      	beq.n	80155ee <tcp_input+0x656>
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80155da:	69fb      	ldr	r3, [r7, #28]
 80155dc:	6918      	ldr	r0, [r3, #16]
 80155de:	4b39      	ldr	r3, [pc, #228]	@ (80156c4 <tcp_input+0x72c>)
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	2300      	movs	r3, #0
 80155e4:	69f9      	ldr	r1, [r7, #28]
 80155e6:	47a0      	blx	r4
 80155e8:	4603      	mov	r3, r0
 80155ea:	74fb      	strb	r3, [r7, #19]
 80155ec:	e008      	b.n	8015600 <tcp_input+0x668>
 80155ee:	4b35      	ldr	r3, [pc, #212]	@ (80156c4 <tcp_input+0x72c>)
 80155f0:	681a      	ldr	r2, [r3, #0]
 80155f2:	2300      	movs	r3, #0
 80155f4:	69f9      	ldr	r1, [r7, #28]
 80155f6:	2000      	movs	r0, #0
 80155f8:	f7ff f890 	bl	801471c <tcp_recv_null>
 80155fc:	4603      	mov	r3, r0
 80155fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015604:	f113 0f0d 	cmn.w	r3, #13
 8015608:	d053      	beq.n	80156b2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801560a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d003      	beq.n	801561a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015612:	4b2c      	ldr	r3, [pc, #176]	@ (80156c4 <tcp_input+0x72c>)
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801561a:	4b2b      	ldr	r3, [pc, #172]	@ (80156c8 <tcp_input+0x730>)
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	f003 0320 	and.w	r3, r3, #32
 8015622:	2b00      	cmp	r3, #0
 8015624:	d030      	beq.n	8015688 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801562a:	2b00      	cmp	r3, #0
 801562c:	d009      	beq.n	8015642 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015632:	7b5a      	ldrb	r2, [r3, #13]
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015638:	f042 0220 	orr.w	r2, r2, #32
 801563c:	b2d2      	uxtb	r2, r2
 801563e:	735a      	strb	r2, [r3, #13]
 8015640:	e022      	b.n	8015688 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015646:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801564a:	d005      	beq.n	8015658 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015650:	3301      	adds	r3, #1
 8015652:	b29a      	uxth	r2, r3
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801565e:	2b00      	cmp	r3, #0
 8015660:	d00b      	beq.n	801567a <tcp_input+0x6e2>
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015668:	69fb      	ldr	r3, [r7, #28]
 801566a:	6918      	ldr	r0, [r3, #16]
 801566c:	2300      	movs	r3, #0
 801566e:	2200      	movs	r2, #0
 8015670:	69f9      	ldr	r1, [r7, #28]
 8015672:	47a0      	blx	r4
 8015674:	4603      	mov	r3, r0
 8015676:	74fb      	strb	r3, [r7, #19]
 8015678:	e001      	b.n	801567e <tcp_input+0x6e6>
 801567a:	2300      	movs	r3, #0
 801567c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801567e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015682:	f113 0f0d 	cmn.w	r3, #13
 8015686:	d016      	beq.n	80156b6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015688:	4b13      	ldr	r3, [pc, #76]	@ (80156d8 <tcp_input+0x740>)
 801568a:	2200      	movs	r2, #0
 801568c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801568e:	69f8      	ldr	r0, [r7, #28]
 8015690:	f000 f88e 	bl	80157b0 <tcp_input_delayed_close>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d128      	bne.n	80156ec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801569a:	69f8      	ldr	r0, [r7, #28]
 801569c:	f002 ff1a 	bl	80184d4 <tcp_output>
 80156a0:	e025      	b.n	80156ee <tcp_input+0x756>
        goto aborted;
 80156a2:	bf00      	nop
 80156a4:	e023      	b.n	80156ee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80156a6:	bf00      	nop
 80156a8:	e021      	b.n	80156ee <tcp_input+0x756>
              goto aborted;
 80156aa:	bf00      	nop
 80156ac:	e01f      	b.n	80156ee <tcp_input+0x756>
          goto aborted;
 80156ae:	bf00      	nop
 80156b0:	e01d      	b.n	80156ee <tcp_input+0x756>
            goto aborted;
 80156b2:	bf00      	nop
 80156b4:	e01b      	b.n	80156ee <tcp_input+0x756>
              goto aborted;
 80156b6:	bf00      	nop
 80156b8:	e019      	b.n	80156ee <tcp_input+0x756>
 80156ba:	bf00      	nop
 80156bc:	2000f3ac 	.word	0x2000f3ac
 80156c0:	2000f3bc 	.word	0x2000f3bc
 80156c4:	2000f3dc 	.word	0x2000f3dc
 80156c8:	2000f3d9 	.word	0x2000f3d9
 80156cc:	2000f3d4 	.word	0x2000f3d4
 80156d0:	2000f3d8 	.word	0x2000f3d8
 80156d4:	2000f3d6 	.word	0x2000f3d6
 80156d8:	2000f3e0 	.word	0x2000f3e0
 80156dc:	2000f3a0 	.word	0x2000f3a0
 80156e0:	08021a54 	.word	0x08021a54
 80156e4:	08021c08 	.word	0x08021c08
 80156e8:	08021aa0 	.word	0x08021aa0
          goto aborted;
 80156ec:	bf00      	nop
    tcp_input_pcb = NULL;
 80156ee:	4b27      	ldr	r3, [pc, #156]	@ (801578c <tcp_input+0x7f4>)
 80156f0:	2200      	movs	r2, #0
 80156f2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80156f4:	4b26      	ldr	r3, [pc, #152]	@ (8015790 <tcp_input+0x7f8>)
 80156f6:	2200      	movs	r2, #0
 80156f8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80156fa:	4b26      	ldr	r3, [pc, #152]	@ (8015794 <tcp_input+0x7fc>)
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d03f      	beq.n	8015782 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015702:	4b24      	ldr	r3, [pc, #144]	@ (8015794 <tcp_input+0x7fc>)
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	f7fd fafe 	bl	8012d08 <pbuf_free>
      inseg.p = NULL;
 801570c:	4b21      	ldr	r3, [pc, #132]	@ (8015794 <tcp_input+0x7fc>)
 801570e:	2200      	movs	r2, #0
 8015710:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015712:	e036      	b.n	8015782 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015714:	4b20      	ldr	r3, [pc, #128]	@ (8015798 <tcp_input+0x800>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	899b      	ldrh	r3, [r3, #12]
 801571a:	b29b      	uxth	r3, r3
 801571c:	4618      	mov	r0, r3
 801571e:	f7fb fecb 	bl	80114b8 <lwip_htons>
 8015722:	4603      	mov	r3, r0
 8015724:	b2db      	uxtb	r3, r3
 8015726:	f003 0304 	and.w	r3, r3, #4
 801572a:	2b00      	cmp	r3, #0
 801572c:	d118      	bne.n	8015760 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801572e:	4b1b      	ldr	r3, [pc, #108]	@ (801579c <tcp_input+0x804>)
 8015730:	6819      	ldr	r1, [r3, #0]
 8015732:	4b1b      	ldr	r3, [pc, #108]	@ (80157a0 <tcp_input+0x808>)
 8015734:	881b      	ldrh	r3, [r3, #0]
 8015736:	461a      	mov	r2, r3
 8015738:	4b1a      	ldr	r3, [pc, #104]	@ (80157a4 <tcp_input+0x80c>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801573e:	4b16      	ldr	r3, [pc, #88]	@ (8015798 <tcp_input+0x800>)
 8015740:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015742:	885b      	ldrh	r3, [r3, #2]
 8015744:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015746:	4a14      	ldr	r2, [pc, #80]	@ (8015798 <tcp_input+0x800>)
 8015748:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801574a:	8812      	ldrh	r2, [r2, #0]
 801574c:	b292      	uxth	r2, r2
 801574e:	9202      	str	r2, [sp, #8]
 8015750:	9301      	str	r3, [sp, #4]
 8015752:	4b15      	ldr	r3, [pc, #84]	@ (80157a8 <tcp_input+0x810>)
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	4b15      	ldr	r3, [pc, #84]	@ (80157ac <tcp_input+0x814>)
 8015758:	4602      	mov	r2, r0
 801575a:	2000      	movs	r0, #0
 801575c:	f003 fc6e 	bl	801903c <tcp_rst>
    pbuf_free(p);
 8015760:	6878      	ldr	r0, [r7, #4]
 8015762:	f7fd fad1 	bl	8012d08 <pbuf_free>
  return;
 8015766:	e00c      	b.n	8015782 <tcp_input+0x7ea>
    goto dropped;
 8015768:	bf00      	nop
 801576a:	e006      	b.n	801577a <tcp_input+0x7e2>
    goto dropped;
 801576c:	bf00      	nop
 801576e:	e004      	b.n	801577a <tcp_input+0x7e2>
    goto dropped;
 8015770:	bf00      	nop
 8015772:	e002      	b.n	801577a <tcp_input+0x7e2>
      goto dropped;
 8015774:	bf00      	nop
 8015776:	e000      	b.n	801577a <tcp_input+0x7e2>
      goto dropped;
 8015778:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7fd fac4 	bl	8012d08 <pbuf_free>
 8015780:	e000      	b.n	8015784 <tcp_input+0x7ec>
  return;
 8015782:	bf00      	nop
}
 8015784:	3724      	adds	r7, #36	@ 0x24
 8015786:	46bd      	mov	sp, r7
 8015788:	bd90      	pop	{r4, r7, pc}
 801578a:	bf00      	nop
 801578c:	2000f3e0 	.word	0x2000f3e0
 8015790:	2000f3dc 	.word	0x2000f3dc
 8015794:	2000f3ac 	.word	0x2000f3ac
 8015798:	2000f3bc 	.word	0x2000f3bc
 801579c:	2000f3d0 	.word	0x2000f3d0
 80157a0:	2000f3d6 	.word	0x2000f3d6
 80157a4:	2000f3cc 	.word	0x2000f3cc
 80157a8:	2000bc50 	.word	0x2000bc50
 80157ac:	2000bc54 	.word	0x2000bc54

080157b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b082      	sub	sp, #8
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d106      	bne.n	80157cc <tcp_input_delayed_close+0x1c>
 80157be:	4b17      	ldr	r3, [pc, #92]	@ (801581c <tcp_input_delayed_close+0x6c>)
 80157c0:	f240 225a 	movw	r2, #602	@ 0x25a
 80157c4:	4916      	ldr	r1, [pc, #88]	@ (8015820 <tcp_input_delayed_close+0x70>)
 80157c6:	4817      	ldr	r0, [pc, #92]	@ (8015824 <tcp_input_delayed_close+0x74>)
 80157c8:	f007 fe5e 	bl	801d488 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80157cc:	4b16      	ldr	r3, [pc, #88]	@ (8015828 <tcp_input_delayed_close+0x78>)
 80157ce:	781b      	ldrb	r3, [r3, #0]
 80157d0:	f003 0310 	and.w	r3, r3, #16
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d01c      	beq.n	8015812 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	8b5b      	ldrh	r3, [r3, #26]
 80157dc:	f003 0310 	and.w	r3, r3, #16
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d10d      	bne.n	8015800 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d008      	beq.n	8015800 <tcp_input_delayed_close+0x50>
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	6912      	ldr	r2, [r2, #16]
 80157f8:	f06f 010e 	mvn.w	r1, #14
 80157fc:	4610      	mov	r0, r2
 80157fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015800:	6879      	ldr	r1, [r7, #4]
 8015802:	480a      	ldr	r0, [pc, #40]	@ (801582c <tcp_input_delayed_close+0x7c>)
 8015804:	f7ff fa50 	bl	8014ca8 <tcp_pcb_remove>
    tcp_free(pcb);
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f7fd fd39 	bl	8013280 <tcp_free>
    return 1;
 801580e:	2301      	movs	r3, #1
 8015810:	e000      	b.n	8015814 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015812:	2300      	movs	r3, #0
}
 8015814:	4618      	mov	r0, r3
 8015816:	3708      	adds	r7, #8
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	08021a54 	.word	0x08021a54
 8015820:	08021c24 	.word	0x08021c24
 8015824:	08021aa0 	.word	0x08021aa0
 8015828:	2000f3d9 	.word	0x2000f3d9
 801582c:	2000f3a0 	.word	0x2000f3a0

08015830 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015830:	b590      	push	{r4, r7, lr}
 8015832:	b08b      	sub	sp, #44	@ 0x2c
 8015834:	af04      	add	r7, sp, #16
 8015836:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015838:	4b6f      	ldr	r3, [pc, #444]	@ (80159f8 <tcp_listen_input+0x1c8>)
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	f003 0304 	and.w	r3, r3, #4
 8015840:	2b00      	cmp	r3, #0
 8015842:	f040 80d2 	bne.w	80159ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d106      	bne.n	801585a <tcp_listen_input+0x2a>
 801584c:	4b6b      	ldr	r3, [pc, #428]	@ (80159fc <tcp_listen_input+0x1cc>)
 801584e:	f240 2281 	movw	r2, #641	@ 0x281
 8015852:	496b      	ldr	r1, [pc, #428]	@ (8015a00 <tcp_listen_input+0x1d0>)
 8015854:	486b      	ldr	r0, [pc, #428]	@ (8015a04 <tcp_listen_input+0x1d4>)
 8015856:	f007 fe17 	bl	801d488 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801585a:	4b67      	ldr	r3, [pc, #412]	@ (80159f8 <tcp_listen_input+0x1c8>)
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	f003 0310 	and.w	r3, r3, #16
 8015862:	2b00      	cmp	r3, #0
 8015864:	d019      	beq.n	801589a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015866:	4b68      	ldr	r3, [pc, #416]	@ (8015a08 <tcp_listen_input+0x1d8>)
 8015868:	6819      	ldr	r1, [r3, #0]
 801586a:	4b68      	ldr	r3, [pc, #416]	@ (8015a0c <tcp_listen_input+0x1dc>)
 801586c:	881b      	ldrh	r3, [r3, #0]
 801586e:	461a      	mov	r2, r3
 8015870:	4b67      	ldr	r3, [pc, #412]	@ (8015a10 <tcp_listen_input+0x1e0>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015876:	4b67      	ldr	r3, [pc, #412]	@ (8015a14 <tcp_listen_input+0x1e4>)
 8015878:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801587a:	885b      	ldrh	r3, [r3, #2]
 801587c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801587e:	4a65      	ldr	r2, [pc, #404]	@ (8015a14 <tcp_listen_input+0x1e4>)
 8015880:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015882:	8812      	ldrh	r2, [r2, #0]
 8015884:	b292      	uxth	r2, r2
 8015886:	9202      	str	r2, [sp, #8]
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	4b63      	ldr	r3, [pc, #396]	@ (8015a18 <tcp_listen_input+0x1e8>)
 801588c:	9300      	str	r3, [sp, #0]
 801588e:	4b63      	ldr	r3, [pc, #396]	@ (8015a1c <tcp_listen_input+0x1ec>)
 8015890:	4602      	mov	r2, r0
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f003 fbd2 	bl	801903c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015898:	e0a9      	b.n	80159ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801589a:	4b57      	ldr	r3, [pc, #348]	@ (80159f8 <tcp_listen_input+0x1c8>)
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 0302 	and.w	r3, r3, #2
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	f000 80a3 	beq.w	80159ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	7d5b      	ldrb	r3, [r3, #21]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f7ff f859 	bl	8014964 <tcp_alloc>
 80158b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d111      	bne.n	80158de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	699b      	ldr	r3, [r3, #24]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d00a      	beq.n	80158d8 <tcp_listen_input+0xa8>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	699b      	ldr	r3, [r3, #24]
 80158c6:	687a      	ldr	r2, [r7, #4]
 80158c8:	6910      	ldr	r0, [r2, #16]
 80158ca:	f04f 32ff 	mov.w	r2, #4294967295
 80158ce:	2100      	movs	r1, #0
 80158d0:	4798      	blx	r3
 80158d2:	4603      	mov	r3, r0
 80158d4:	73bb      	strb	r3, [r7, #14]
      return;
 80158d6:	e08b      	b.n	80159f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80158d8:	23f0      	movs	r3, #240	@ 0xf0
 80158da:	73bb      	strb	r3, [r7, #14]
      return;
 80158dc:	e088      	b.n	80159f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80158de:	4b50      	ldr	r3, [pc, #320]	@ (8015a20 <tcp_listen_input+0x1f0>)
 80158e0:	695a      	ldr	r2, [r3, #20]
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80158e6:	4b4e      	ldr	r3, [pc, #312]	@ (8015a20 <tcp_listen_input+0x1f0>)
 80158e8:	691a      	ldr	r2, [r3, #16]
 80158ea:	697b      	ldr	r3, [r7, #20]
 80158ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	8ada      	ldrh	r2, [r3, #22]
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80158f6:	4b47      	ldr	r3, [pc, #284]	@ (8015a14 <tcp_listen_input+0x1e4>)
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	697b      	ldr	r3, [r7, #20]
 8015900:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015902:	697b      	ldr	r3, [r7, #20]
 8015904:	2203      	movs	r2, #3
 8015906:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015908:	4b41      	ldr	r3, [pc, #260]	@ (8015a10 <tcp_listen_input+0x1e0>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	1c5a      	adds	r2, r3, #1
 801590e:	697b      	ldr	r3, [r7, #20]
 8015910:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801591a:	6978      	ldr	r0, [r7, #20]
 801591c:	f7ff fa58 	bl	8014dd0 <tcp_next_iss>
 8015920:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	693a      	ldr	r2, [r7, #16]
 8015926:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	693a      	ldr	r2, [r7, #16]
 801592c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	693a      	ldr	r2, [r7, #16]
 8015932:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	693a      	ldr	r2, [r7, #16]
 8015938:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801593a:	4b35      	ldr	r3, [pc, #212]	@ (8015a10 <tcp_listen_input+0x1e0>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	1e5a      	subs	r2, r3, #1
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	691a      	ldr	r2, [r3, #16]
 8015948:	697b      	ldr	r3, [r7, #20]
 801594a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	687a      	ldr	r2, [r7, #4]
 8015950:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	7a5b      	ldrb	r3, [r3, #9]
 8015956:	f003 030c 	and.w	r3, r3, #12
 801595a:	b2da      	uxtb	r2, r3
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	7a1a      	ldrb	r2, [r3, #8]
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015968:	4b2e      	ldr	r3, [pc, #184]	@ (8015a24 <tcp_listen_input+0x1f4>)
 801596a:	681a      	ldr	r2, [r3, #0]
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	60da      	str	r2, [r3, #12]
 8015970:	4a2c      	ldr	r2, [pc, #176]	@ (8015a24 <tcp_listen_input+0x1f4>)
 8015972:	697b      	ldr	r3, [r7, #20]
 8015974:	6013      	str	r3, [r2, #0]
 8015976:	f003 fd23 	bl	80193c0 <tcp_timer_needed>
 801597a:	4b2b      	ldr	r3, [pc, #172]	@ (8015a28 <tcp_listen_input+0x1f8>)
 801597c:	2201      	movs	r2, #1
 801597e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015980:	6978      	ldr	r0, [r7, #20]
 8015982:	f001 fd8b 	bl	801749c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015986:	4b23      	ldr	r3, [pc, #140]	@ (8015a14 <tcp_listen_input+0x1e4>)
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	89db      	ldrh	r3, [r3, #14]
 801598c:	b29a      	uxth	r2, r3
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801599a:	697b      	ldr	r3, [r7, #20]
 801599c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	3304      	adds	r3, #4
 80159a8:	4618      	mov	r0, r3
 80159aa:	f005 fc47 	bl	801b23c <ip4_route>
 80159ae:	4601      	mov	r1, r0
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	3304      	adds	r3, #4
 80159b4:	461a      	mov	r2, r3
 80159b6:	4620      	mov	r0, r4
 80159b8:	f7ff fa30 	bl	8014e1c <tcp_eff_send_mss_netif>
 80159bc:	4603      	mov	r3, r0
 80159be:	461a      	mov	r2, r3
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80159c4:	2112      	movs	r1, #18
 80159c6:	6978      	ldr	r0, [r7, #20]
 80159c8:	f002 fc96 	bl	80182f8 <tcp_enqueue_flags>
 80159cc:	4603      	mov	r3, r0
 80159ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80159d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d004      	beq.n	80159e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80159d8:	2100      	movs	r1, #0
 80159da:	6978      	ldr	r0, [r7, #20]
 80159dc:	f7fd fed6 	bl	801378c <tcp_abandon>
      return;
 80159e0:	e006      	b.n	80159f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80159e2:	6978      	ldr	r0, [r7, #20]
 80159e4:	f002 fd76 	bl	80184d4 <tcp_output>
  return;
 80159e8:	e001      	b.n	80159ee <tcp_listen_input+0x1be>
    return;
 80159ea:	bf00      	nop
 80159ec:	e000      	b.n	80159f0 <tcp_listen_input+0x1c0>
  return;
 80159ee:	bf00      	nop
}
 80159f0:	371c      	adds	r7, #28
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd90      	pop	{r4, r7, pc}
 80159f6:	bf00      	nop
 80159f8:	2000f3d8 	.word	0x2000f3d8
 80159fc:	08021a54 	.word	0x08021a54
 8015a00:	08021c4c 	.word	0x08021c4c
 8015a04:	08021aa0 	.word	0x08021aa0
 8015a08:	2000f3d0 	.word	0x2000f3d0
 8015a0c:	2000f3d6 	.word	0x2000f3d6
 8015a10:	2000f3cc 	.word	0x2000f3cc
 8015a14:	2000f3bc 	.word	0x2000f3bc
 8015a18:	2000bc50 	.word	0x2000bc50
 8015a1c:	2000bc54 	.word	0x2000bc54
 8015a20:	2000bc40 	.word	0x2000bc40
 8015a24:	2000f3a0 	.word	0x2000f3a0
 8015a28:	2000f3a8 	.word	0x2000f3a8

08015a2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af04      	add	r7, sp, #16
 8015a32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015a34:	4b2f      	ldr	r3, [pc, #188]	@ (8015af4 <tcp_timewait_input+0xc8>)
 8015a36:	781b      	ldrb	r3, [r3, #0]
 8015a38:	f003 0304 	and.w	r3, r3, #4
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d153      	bne.n	8015ae8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d106      	bne.n	8015a54 <tcp_timewait_input+0x28>
 8015a46:	4b2c      	ldr	r3, [pc, #176]	@ (8015af8 <tcp_timewait_input+0xcc>)
 8015a48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015a4c:	492b      	ldr	r1, [pc, #172]	@ (8015afc <tcp_timewait_input+0xd0>)
 8015a4e:	482c      	ldr	r0, [pc, #176]	@ (8015b00 <tcp_timewait_input+0xd4>)
 8015a50:	f007 fd1a 	bl	801d488 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015a54:	4b27      	ldr	r3, [pc, #156]	@ (8015af4 <tcp_timewait_input+0xc8>)
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	f003 0302 	and.w	r3, r3, #2
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d02a      	beq.n	8015ab6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015a60:	4b28      	ldr	r3, [pc, #160]	@ (8015b04 <tcp_timewait_input+0xd8>)
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	db2d      	blt.n	8015aca <tcp_timewait_input+0x9e>
 8015a6e:	4b25      	ldr	r3, [pc, #148]	@ (8015b04 <tcp_timewait_input+0xd8>)
 8015a70:	681a      	ldr	r2, [r3, #0]
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a76:	6879      	ldr	r1, [r7, #4]
 8015a78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a7a:	440b      	add	r3, r1
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	dc23      	bgt.n	8015aca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a82:	4b21      	ldr	r3, [pc, #132]	@ (8015b08 <tcp_timewait_input+0xdc>)
 8015a84:	6819      	ldr	r1, [r3, #0]
 8015a86:	4b21      	ldr	r3, [pc, #132]	@ (8015b0c <tcp_timewait_input+0xe0>)
 8015a88:	881b      	ldrh	r3, [r3, #0]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8015b04 <tcp_timewait_input+0xd8>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a92:	4b1f      	ldr	r3, [pc, #124]	@ (8015b10 <tcp_timewait_input+0xe4>)
 8015a94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a96:	885b      	ldrh	r3, [r3, #2]
 8015a98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8015b10 <tcp_timewait_input+0xe4>)
 8015a9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a9e:	8812      	ldrh	r2, [r2, #0]
 8015aa0:	b292      	uxth	r2, r2
 8015aa2:	9202      	str	r2, [sp, #8]
 8015aa4:	9301      	str	r3, [sp, #4]
 8015aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8015b14 <tcp_timewait_input+0xe8>)
 8015aa8:	9300      	str	r3, [sp, #0]
 8015aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8015b18 <tcp_timewait_input+0xec>)
 8015aac:	4602      	mov	r2, r0
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f003 fac4 	bl	801903c <tcp_rst>
      return;
 8015ab4:	e01b      	b.n	8015aee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8015af4 <tcp_timewait_input+0xc8>)
 8015ab8:	781b      	ldrb	r3, [r3, #0]
 8015aba:	f003 0301 	and.w	r3, r3, #1
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d003      	beq.n	8015aca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015ac2:	4b16      	ldr	r3, [pc, #88]	@ (8015b1c <tcp_timewait_input+0xf0>)
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015aca:	4b10      	ldr	r3, [pc, #64]	@ (8015b0c <tcp_timewait_input+0xe0>)
 8015acc:	881b      	ldrh	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d00c      	beq.n	8015aec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8b5b      	ldrh	r3, [r3, #26]
 8015ad6:	f043 0302 	orr.w	r3, r3, #2
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f002 fcf7 	bl	80184d4 <tcp_output>
  }
  return;
 8015ae6:	e001      	b.n	8015aec <tcp_timewait_input+0xc0>
    return;
 8015ae8:	bf00      	nop
 8015aea:	e000      	b.n	8015aee <tcp_timewait_input+0xc2>
  return;
 8015aec:	bf00      	nop
}
 8015aee:	3708      	adds	r7, #8
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	2000f3d8 	.word	0x2000f3d8
 8015af8:	08021a54 	.word	0x08021a54
 8015afc:	08021c6c 	.word	0x08021c6c
 8015b00:	08021aa0 	.word	0x08021aa0
 8015b04:	2000f3cc 	.word	0x2000f3cc
 8015b08:	2000f3d0 	.word	0x2000f3d0
 8015b0c:	2000f3d6 	.word	0x2000f3d6
 8015b10:	2000f3bc 	.word	0x2000f3bc
 8015b14:	2000bc50 	.word	0x2000bc50
 8015b18:	2000bc54 	.word	0x2000bc54
 8015b1c:	2000f394 	.word	0x2000f394

08015b20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015b20:	b590      	push	{r4, r7, lr}
 8015b22:	b08d      	sub	sp, #52	@ 0x34
 8015b24:	af04      	add	r7, sp, #16
 8015b26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d106      	bne.n	8015b44 <tcp_process+0x24>
 8015b36:	4b9d      	ldr	r3, [pc, #628]	@ (8015dac <tcp_process+0x28c>)
 8015b38:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015b3c:	499c      	ldr	r1, [pc, #624]	@ (8015db0 <tcp_process+0x290>)
 8015b3e:	489d      	ldr	r0, [pc, #628]	@ (8015db4 <tcp_process+0x294>)
 8015b40:	f007 fca2 	bl	801d488 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015b44:	4b9c      	ldr	r3, [pc, #624]	@ (8015db8 <tcp_process+0x298>)
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	f003 0304 	and.w	r3, r3, #4
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d04e      	beq.n	8015bee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	7d1b      	ldrb	r3, [r3, #20]
 8015b54:	2b02      	cmp	r3, #2
 8015b56:	d108      	bne.n	8015b6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b5c:	4b97      	ldr	r3, [pc, #604]	@ (8015dbc <tcp_process+0x29c>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d123      	bne.n	8015bac <tcp_process+0x8c>
        acceptable = 1;
 8015b64:	2301      	movs	r3, #1
 8015b66:	76fb      	strb	r3, [r7, #27]
 8015b68:	e020      	b.n	8015bac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b6e:	4b94      	ldr	r3, [pc, #592]	@ (8015dc0 <tcp_process+0x2a0>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	429a      	cmp	r2, r3
 8015b74:	d102      	bne.n	8015b7c <tcp_process+0x5c>
        acceptable = 1;
 8015b76:	2301      	movs	r3, #1
 8015b78:	76fb      	strb	r3, [r7, #27]
 8015b7a:	e017      	b.n	8015bac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b7c:	4b90      	ldr	r3, [pc, #576]	@ (8015dc0 <tcp_process+0x2a0>)
 8015b7e:	681a      	ldr	r2, [r3, #0]
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	db10      	blt.n	8015bac <tcp_process+0x8c>
 8015b8a:	4b8d      	ldr	r3, [pc, #564]	@ (8015dc0 <tcp_process+0x2a0>)
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b92:	6879      	ldr	r1, [r7, #4]
 8015b94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015b96:	440b      	add	r3, r1
 8015b98:	1ad3      	subs	r3, r2, r3
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	dc06      	bgt.n	8015bac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	8b5b      	ldrh	r3, [r3, #26]
 8015ba2:	f043 0302 	orr.w	r3, r3, #2
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015bac:	7efb      	ldrb	r3, [r7, #27]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d01b      	beq.n	8015bea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	7d1b      	ldrb	r3, [r3, #20]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d106      	bne.n	8015bc8 <tcp_process+0xa8>
 8015bba:	4b7c      	ldr	r3, [pc, #496]	@ (8015dac <tcp_process+0x28c>)
 8015bbc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015bc0:	4980      	ldr	r1, [pc, #512]	@ (8015dc4 <tcp_process+0x2a4>)
 8015bc2:	487c      	ldr	r0, [pc, #496]	@ (8015db4 <tcp_process+0x294>)
 8015bc4:	f007 fc60 	bl	801d488 <iprintf>
      recv_flags |= TF_RESET;
 8015bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8015dc8 <tcp_process+0x2a8>)
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	f043 0308 	orr.w	r3, r3, #8
 8015bd0:	b2da      	uxtb	r2, r3
 8015bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8015dc8 <tcp_process+0x2a8>)
 8015bd4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	8b5b      	ldrh	r3, [r3, #26]
 8015bda:	f023 0301 	bic.w	r3, r3, #1
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015be4:	f06f 030d 	mvn.w	r3, #13
 8015be8:	e37a      	b.n	80162e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015bea:	2300      	movs	r3, #0
 8015bec:	e378      	b.n	80162e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015bee:	4b72      	ldr	r3, [pc, #456]	@ (8015db8 <tcp_process+0x298>)
 8015bf0:	781b      	ldrb	r3, [r3, #0]
 8015bf2:	f003 0302 	and.w	r3, r3, #2
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d010      	beq.n	8015c1c <tcp_process+0xfc>
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	7d1b      	ldrb	r3, [r3, #20]
 8015bfe:	2b02      	cmp	r3, #2
 8015c00:	d00c      	beq.n	8015c1c <tcp_process+0xfc>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	7d1b      	ldrb	r3, [r3, #20]
 8015c06:	2b03      	cmp	r3, #3
 8015c08:	d008      	beq.n	8015c1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	8b5b      	ldrh	r3, [r3, #26]
 8015c0e:	f043 0302 	orr.w	r3, r3, #2
 8015c12:	b29a      	uxth	r2, r3
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e361      	b.n	80162e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	8b5b      	ldrh	r3, [r3, #26]
 8015c20:	f003 0310 	and.w	r3, r3, #16
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d103      	bne.n	8015c30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015c28:	4b68      	ldr	r3, [pc, #416]	@ (8015dcc <tcp_process+0x2ac>)
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2200      	movs	r2, #0
 8015c34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f001 fc2b 	bl	801749c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	7d1b      	ldrb	r3, [r3, #20]
 8015c4a:	3b02      	subs	r3, #2
 8015c4c:	2b07      	cmp	r3, #7
 8015c4e:	f200 8337 	bhi.w	80162c0 <tcp_process+0x7a0>
 8015c52:	a201      	add	r2, pc, #4	@ (adr r2, 8015c58 <tcp_process+0x138>)
 8015c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c58:	08015c79 	.word	0x08015c79
 8015c5c:	08015ea9 	.word	0x08015ea9
 8015c60:	08016021 	.word	0x08016021
 8015c64:	0801604b 	.word	0x0801604b
 8015c68:	0801616f 	.word	0x0801616f
 8015c6c:	08016021 	.word	0x08016021
 8015c70:	080161fb 	.word	0x080161fb
 8015c74:	0801628b 	.word	0x0801628b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015c78:	4b4f      	ldr	r3, [pc, #316]	@ (8015db8 <tcp_process+0x298>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f003 0310 	and.w	r3, r3, #16
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	f000 80e4 	beq.w	8015e4e <tcp_process+0x32e>
 8015c86:	4b4c      	ldr	r3, [pc, #304]	@ (8015db8 <tcp_process+0x298>)
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	f003 0302 	and.w	r3, r3, #2
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f000 80dd 	beq.w	8015e4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c98:	1c5a      	adds	r2, r3, #1
 8015c9a:	4b48      	ldr	r3, [pc, #288]	@ (8015dbc <tcp_process+0x29c>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	f040 80d5 	bne.w	8015e4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015ca4:	4b46      	ldr	r3, [pc, #280]	@ (8015dc0 <tcp_process+0x2a0>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	1c5a      	adds	r2, r3, #1
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015cb6:	4b41      	ldr	r3, [pc, #260]	@ (8015dbc <tcp_process+0x29c>)
 8015cb8:	681a      	ldr	r2, [r3, #0]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015cbe:	4b44      	ldr	r3, [pc, #272]	@ (8015dd0 <tcp_process+0x2b0>)
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	89db      	ldrh	r3, [r3, #14]
 8015cc4:	b29a      	uxth	r2, r3
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015cd8:	4b39      	ldr	r3, [pc, #228]	@ (8015dc0 <tcp_process+0x2a0>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	1e5a      	subs	r2, r3, #1
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	2204      	movs	r2, #4
 8015ce6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	3304      	adds	r3, #4
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f005 faa3 	bl	801b23c <ip4_route>
 8015cf6:	4601      	mov	r1, r0
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	461a      	mov	r2, r3
 8015cfe:	4620      	mov	r0, r4
 8015d00:	f7ff f88c 	bl	8014e1c <tcp_eff_send_mss_netif>
 8015d04:	4603      	mov	r3, r0
 8015d06:	461a      	mov	r2, r3
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d10:	009a      	lsls	r2, r3, #2
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d16:	005b      	lsls	r3, r3, #1
 8015d18:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015d1c:	428b      	cmp	r3, r1
 8015d1e:	bf38      	it	cc
 8015d20:	460b      	movcc	r3, r1
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d204      	bcs.n	8015d30 <tcp_process+0x210>
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	e00d      	b.n	8015d4c <tcp_process+0x22c>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d34:	005b      	lsls	r3, r3, #1
 8015d36:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015d3a:	4293      	cmp	r3, r2
 8015d3c:	d904      	bls.n	8015d48 <tcp_process+0x228>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015d42:	005b      	lsls	r3, r3, #1
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	e001      	b.n	8015d4c <tcp_process+0x22c>
 8015d48:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015d4c:	687a      	ldr	r2, [r7, #4]
 8015d4e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d106      	bne.n	8015d6a <tcp_process+0x24a>
 8015d5c:	4b13      	ldr	r3, [pc, #76]	@ (8015dac <tcp_process+0x28c>)
 8015d5e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015d62:	491c      	ldr	r1, [pc, #112]	@ (8015dd4 <tcp_process+0x2b4>)
 8015d64:	4813      	ldr	r0, [pc, #76]	@ (8015db4 <tcp_process+0x294>)
 8015d66:	f007 fb8f 	bl	801d488 <iprintf>
        --pcb->snd_queuelen;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015d70:	3b01      	subs	r3, #1
 8015d72:	b29a      	uxth	r2, r3
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d12a      	bne.n	8015ddc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d106      	bne.n	8015da0 <tcp_process+0x280>
 8015d92:	4b06      	ldr	r3, [pc, #24]	@ (8015dac <tcp_process+0x28c>)
 8015d94:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015d98:	490f      	ldr	r1, [pc, #60]	@ (8015dd8 <tcp_process+0x2b8>)
 8015d9a:	4806      	ldr	r0, [pc, #24]	@ (8015db4 <tcp_process+0x294>)
 8015d9c:	f007 fb74 	bl	801d488 <iprintf>
          pcb->unsent = rseg->next;
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	681a      	ldr	r2, [r3, #0]
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015da8:	e01c      	b.n	8015de4 <tcp_process+0x2c4>
 8015daa:	bf00      	nop
 8015dac:	08021a54 	.word	0x08021a54
 8015db0:	08021c8c 	.word	0x08021c8c
 8015db4:	08021aa0 	.word	0x08021aa0
 8015db8:	2000f3d8 	.word	0x2000f3d8
 8015dbc:	2000f3d0 	.word	0x2000f3d0
 8015dc0:	2000f3cc 	.word	0x2000f3cc
 8015dc4:	08021ca8 	.word	0x08021ca8
 8015dc8:	2000f3d9 	.word	0x2000f3d9
 8015dcc:	2000f394 	.word	0x2000f394
 8015dd0:	2000f3bc 	.word	0x2000f3bc
 8015dd4:	08021cc8 	.word	0x08021cc8
 8015dd8:	08021ce0 	.word	0x08021ce0
        } else {
          pcb->unacked = rseg->next;
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015de4:	69f8      	ldr	r0, [r7, #28]
 8015de6:	f7fe fc36 	bl	8014656 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d104      	bne.n	8015dfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015df8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015dfa:	e006      	b.n	8015e0a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d00a      	beq.n	8015e2a <tcp_process+0x30a>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015e1a:	687a      	ldr	r2, [r7, #4]
 8015e1c:	6910      	ldr	r0, [r2, #16]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	6879      	ldr	r1, [r7, #4]
 8015e22:	4798      	blx	r3
 8015e24:	4603      	mov	r3, r0
 8015e26:	76bb      	strb	r3, [r7, #26]
 8015e28:	e001      	b.n	8015e2e <tcp_process+0x30e>
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015e2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015e32:	f113 0f0d 	cmn.w	r3, #13
 8015e36:	d102      	bne.n	8015e3e <tcp_process+0x31e>
          return ERR_ABRT;
 8015e38:	f06f 030c 	mvn.w	r3, #12
 8015e3c:	e250      	b.n	80162e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	8b5b      	ldrh	r3, [r3, #26]
 8015e42:	f043 0302 	orr.w	r3, r3, #2
 8015e46:	b29a      	uxth	r2, r3
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015e4c:	e23a      	b.n	80162c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015e4e:	4b98      	ldr	r3, [pc, #608]	@ (80160b0 <tcp_process+0x590>)
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	f003 0310 	and.w	r3, r3, #16
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	f000 8234 	beq.w	80162c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e5c:	4b95      	ldr	r3, [pc, #596]	@ (80160b4 <tcp_process+0x594>)
 8015e5e:	6819      	ldr	r1, [r3, #0]
 8015e60:	4b95      	ldr	r3, [pc, #596]	@ (80160b8 <tcp_process+0x598>)
 8015e62:	881b      	ldrh	r3, [r3, #0]
 8015e64:	461a      	mov	r2, r3
 8015e66:	4b95      	ldr	r3, [pc, #596]	@ (80160bc <tcp_process+0x59c>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e6c:	4b94      	ldr	r3, [pc, #592]	@ (80160c0 <tcp_process+0x5a0>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e70:	885b      	ldrh	r3, [r3, #2]
 8015e72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e74:	4a92      	ldr	r2, [pc, #584]	@ (80160c0 <tcp_process+0x5a0>)
 8015e76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e78:	8812      	ldrh	r2, [r2, #0]
 8015e7a:	b292      	uxth	r2, r2
 8015e7c:	9202      	str	r2, [sp, #8]
 8015e7e:	9301      	str	r3, [sp, #4]
 8015e80:	4b90      	ldr	r3, [pc, #576]	@ (80160c4 <tcp_process+0x5a4>)
 8015e82:	9300      	str	r3, [sp, #0]
 8015e84:	4b90      	ldr	r3, [pc, #576]	@ (80160c8 <tcp_process+0x5a8>)
 8015e86:	4602      	mov	r2, r0
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f003 f8d7 	bl	801903c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015e94:	2b05      	cmp	r3, #5
 8015e96:	f200 8215 	bhi.w	80162c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f002 fea3 	bl	8018bec <tcp_rexmit_rto>
      break;
 8015ea6:	e20d      	b.n	80162c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015ea8:	4b81      	ldr	r3, [pc, #516]	@ (80160b0 <tcp_process+0x590>)
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	f003 0310 	and.w	r3, r3, #16
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f000 80a1 	beq.w	8015ff8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80160b4 <tcp_process+0x594>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ebe:	1ad3      	subs	r3, r2, r3
 8015ec0:	3b01      	subs	r3, #1
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	db7e      	blt.n	8015fc4 <tcp_process+0x4a4>
 8015ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80160b4 <tcp_process+0x594>)
 8015ec8:	681a      	ldr	r2, [r3, #0]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015ece:	1ad3      	subs	r3, r2, r3
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	dc77      	bgt.n	8015fc4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2204      	movs	r2, #4
 8015ed8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d102      	bne.n	8015ee8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015ee2:	23fa      	movs	r3, #250	@ 0xfa
 8015ee4:	76bb      	strb	r3, [r7, #26]
 8015ee6:	e01d      	b.n	8015f24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015eec:	699b      	ldr	r3, [r3, #24]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d106      	bne.n	8015f00 <tcp_process+0x3e0>
 8015ef2:	4b76      	ldr	r3, [pc, #472]	@ (80160cc <tcp_process+0x5ac>)
 8015ef4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015ef8:	4975      	ldr	r1, [pc, #468]	@ (80160d0 <tcp_process+0x5b0>)
 8015efa:	4876      	ldr	r0, [pc, #472]	@ (80160d4 <tcp_process+0x5b4>)
 8015efc:	f007 fac4 	bl	801d488 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f04:	699b      	ldr	r3, [r3, #24]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d00a      	beq.n	8015f20 <tcp_process+0x400>
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f0e:	699b      	ldr	r3, [r3, #24]
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	6910      	ldr	r0, [r2, #16]
 8015f14:	2200      	movs	r2, #0
 8015f16:	6879      	ldr	r1, [r7, #4]
 8015f18:	4798      	blx	r3
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	76bb      	strb	r3, [r7, #26]
 8015f1e:	e001      	b.n	8015f24 <tcp_process+0x404>
 8015f20:	23f0      	movs	r3, #240	@ 0xf0
 8015f22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015f24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d00a      	beq.n	8015f42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015f2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015f30:	f113 0f0d 	cmn.w	r3, #13
 8015f34:	d002      	beq.n	8015f3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7fd fce6 	bl	8013908 <tcp_abort>
            }
            return ERR_ABRT;
 8015f3c:	f06f 030c 	mvn.w	r3, #12
 8015f40:	e1ce      	b.n	80162e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 fae0 	bl	8016508 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015f48:	4b63      	ldr	r3, [pc, #396]	@ (80160d8 <tcp_process+0x5b8>)
 8015f4a:	881b      	ldrh	r3, [r3, #0]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d005      	beq.n	8015f5c <tcp_process+0x43c>
            recv_acked--;
 8015f50:	4b61      	ldr	r3, [pc, #388]	@ (80160d8 <tcp_process+0x5b8>)
 8015f52:	881b      	ldrh	r3, [r3, #0]
 8015f54:	3b01      	subs	r3, #1
 8015f56:	b29a      	uxth	r2, r3
 8015f58:	4b5f      	ldr	r3, [pc, #380]	@ (80160d8 <tcp_process+0x5b8>)
 8015f5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f60:	009a      	lsls	r2, r3, #2
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f66:	005b      	lsls	r3, r3, #1
 8015f68:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015f6c:	428b      	cmp	r3, r1
 8015f6e:	bf38      	it	cc
 8015f70:	460b      	movcc	r3, r1
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d204      	bcs.n	8015f80 <tcp_process+0x460>
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	e00d      	b.n	8015f9c <tcp_process+0x47c>
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d904      	bls.n	8015f98 <tcp_process+0x478>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	e001      	b.n	8015f9c <tcp_process+0x47c>
 8015f98:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80160dc <tcp_process+0x5bc>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	f003 0320 	and.w	r3, r3, #32
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d037      	beq.n	801601e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	8b5b      	ldrh	r3, [r3, #26]
 8015fb2:	f043 0302 	orr.w	r3, r3, #2
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2207      	movs	r2, #7
 8015fc0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015fc2:	e02c      	b.n	801601e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80160b4 <tcp_process+0x594>)
 8015fc6:	6819      	ldr	r1, [r3, #0]
 8015fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80160b8 <tcp_process+0x598>)
 8015fca:	881b      	ldrh	r3, [r3, #0]
 8015fcc:	461a      	mov	r2, r3
 8015fce:	4b3b      	ldr	r3, [pc, #236]	@ (80160bc <tcp_process+0x59c>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80160c0 <tcp_process+0x5a0>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fd8:	885b      	ldrh	r3, [r3, #2]
 8015fda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fdc:	4a38      	ldr	r2, [pc, #224]	@ (80160c0 <tcp_process+0x5a0>)
 8015fde:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fe0:	8812      	ldrh	r2, [r2, #0]
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	9202      	str	r2, [sp, #8]
 8015fe6:	9301      	str	r3, [sp, #4]
 8015fe8:	4b36      	ldr	r3, [pc, #216]	@ (80160c4 <tcp_process+0x5a4>)
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	4b36      	ldr	r3, [pc, #216]	@ (80160c8 <tcp_process+0x5a8>)
 8015fee:	4602      	mov	r2, r0
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f003 f823 	bl	801903c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015ff6:	e167      	b.n	80162c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80160b0 <tcp_process+0x590>)
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	f003 0302 	and.w	r3, r3, #2
 8016000:	2b00      	cmp	r3, #0
 8016002:	f000 8161 	beq.w	80162c8 <tcp_process+0x7a8>
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801600a:	1e5a      	subs	r2, r3, #1
 801600c:	4b2b      	ldr	r3, [pc, #172]	@ (80160bc <tcp_process+0x59c>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	429a      	cmp	r2, r3
 8016012:	f040 8159 	bne.w	80162c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f002 fe0a 	bl	8018c30 <tcp_rexmit>
      break;
 801601c:	e154      	b.n	80162c8 <tcp_process+0x7a8>
 801601e:	e153      	b.n	80162c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fa71 	bl	8016508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016026:	4b2d      	ldr	r3, [pc, #180]	@ (80160dc <tcp_process+0x5bc>)
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	f003 0320 	and.w	r3, r3, #32
 801602e:	2b00      	cmp	r3, #0
 8016030:	f000 814c 	beq.w	80162cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	8b5b      	ldrh	r3, [r3, #26]
 8016038:	f043 0302 	orr.w	r3, r3, #2
 801603c:	b29a      	uxth	r2, r3
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2207      	movs	r2, #7
 8016046:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016048:	e140      	b.n	80162cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f000 fa5c 	bl	8016508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016050:	4b22      	ldr	r3, [pc, #136]	@ (80160dc <tcp_process+0x5bc>)
 8016052:	781b      	ldrb	r3, [r3, #0]
 8016054:	f003 0320 	and.w	r3, r3, #32
 8016058:	2b00      	cmp	r3, #0
 801605a:	d071      	beq.n	8016140 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801605c:	4b14      	ldr	r3, [pc, #80]	@ (80160b0 <tcp_process+0x590>)
 801605e:	781b      	ldrb	r3, [r3, #0]
 8016060:	f003 0310 	and.w	r3, r3, #16
 8016064:	2b00      	cmp	r3, #0
 8016066:	d060      	beq.n	801612a <tcp_process+0x60a>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801606c:	4b11      	ldr	r3, [pc, #68]	@ (80160b4 <tcp_process+0x594>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	429a      	cmp	r2, r3
 8016072:	d15a      	bne.n	801612a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016078:	2b00      	cmp	r3, #0
 801607a:	d156      	bne.n	801612a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	8b5b      	ldrh	r3, [r3, #26]
 8016080:	f043 0302 	orr.w	r3, r3, #2
 8016084:	b29a      	uxth	r2, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7fe fdbc 	bl	8014c08 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016090:	4b13      	ldr	r3, [pc, #76]	@ (80160e0 <tcp_process+0x5c0>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	429a      	cmp	r2, r3
 8016098:	d105      	bne.n	80160a6 <tcp_process+0x586>
 801609a:	4b11      	ldr	r3, [pc, #68]	@ (80160e0 <tcp_process+0x5c0>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	4a0f      	ldr	r2, [pc, #60]	@ (80160e0 <tcp_process+0x5c0>)
 80160a2:	6013      	str	r3, [r2, #0]
 80160a4:	e02e      	b.n	8016104 <tcp_process+0x5e4>
 80160a6:	4b0e      	ldr	r3, [pc, #56]	@ (80160e0 <tcp_process+0x5c0>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	617b      	str	r3, [r7, #20]
 80160ac:	e027      	b.n	80160fe <tcp_process+0x5de>
 80160ae:	bf00      	nop
 80160b0:	2000f3d8 	.word	0x2000f3d8
 80160b4:	2000f3d0 	.word	0x2000f3d0
 80160b8:	2000f3d6 	.word	0x2000f3d6
 80160bc:	2000f3cc 	.word	0x2000f3cc
 80160c0:	2000f3bc 	.word	0x2000f3bc
 80160c4:	2000bc50 	.word	0x2000bc50
 80160c8:	2000bc54 	.word	0x2000bc54
 80160cc:	08021a54 	.word	0x08021a54
 80160d0:	08021cf4 	.word	0x08021cf4
 80160d4:	08021aa0 	.word	0x08021aa0
 80160d8:	2000f3d4 	.word	0x2000f3d4
 80160dc:	2000f3d9 	.word	0x2000f3d9
 80160e0:	2000f3a0 	.word	0x2000f3a0
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	68db      	ldr	r3, [r3, #12]
 80160e8:	687a      	ldr	r2, [r7, #4]
 80160ea:	429a      	cmp	r2, r3
 80160ec:	d104      	bne.n	80160f8 <tcp_process+0x5d8>
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	68da      	ldr	r2, [r3, #12]
 80160f2:	697b      	ldr	r3, [r7, #20]
 80160f4:	60da      	str	r2, [r3, #12]
 80160f6:	e005      	b.n	8016104 <tcp_process+0x5e4>
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	68db      	ldr	r3, [r3, #12]
 80160fc:	617b      	str	r3, [r7, #20]
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d1ef      	bne.n	80160e4 <tcp_process+0x5c4>
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2200      	movs	r2, #0
 8016108:	60da      	str	r2, [r3, #12]
 801610a:	4b77      	ldr	r3, [pc, #476]	@ (80162e8 <tcp_process+0x7c8>)
 801610c:	2201      	movs	r2, #1
 801610e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	220a      	movs	r2, #10
 8016114:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016116:	4b75      	ldr	r3, [pc, #468]	@ (80162ec <tcp_process+0x7cc>)
 8016118:	681a      	ldr	r2, [r3, #0]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	60da      	str	r2, [r3, #12]
 801611e:	4a73      	ldr	r2, [pc, #460]	@ (80162ec <tcp_process+0x7cc>)
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	6013      	str	r3, [r2, #0]
 8016124:	f003 f94c 	bl	80193c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016128:	e0d2      	b.n	80162d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	8b5b      	ldrh	r3, [r3, #26]
 801612e:	f043 0302 	orr.w	r3, r3, #2
 8016132:	b29a      	uxth	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2208      	movs	r2, #8
 801613c:	751a      	strb	r2, [r3, #20]
      break;
 801613e:	e0c7      	b.n	80162d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016140:	4b6b      	ldr	r3, [pc, #428]	@ (80162f0 <tcp_process+0x7d0>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	f003 0310 	and.w	r3, r3, #16
 8016148:	2b00      	cmp	r3, #0
 801614a:	f000 80c1 	beq.w	80162d0 <tcp_process+0x7b0>
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016152:	4b68      	ldr	r3, [pc, #416]	@ (80162f4 <tcp_process+0x7d4>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	429a      	cmp	r2, r3
 8016158:	f040 80ba 	bne.w	80162d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016160:	2b00      	cmp	r3, #0
 8016162:	f040 80b5 	bne.w	80162d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2206      	movs	r2, #6
 801616a:	751a      	strb	r2, [r3, #20]
      break;
 801616c:	e0b0      	b.n	80162d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f000 f9ca 	bl	8016508 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016174:	4b60      	ldr	r3, [pc, #384]	@ (80162f8 <tcp_process+0x7d8>)
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	f003 0320 	and.w	r3, r3, #32
 801617c:	2b00      	cmp	r3, #0
 801617e:	f000 80a9 	beq.w	80162d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	8b5b      	ldrh	r3, [r3, #26]
 8016186:	f043 0302 	orr.w	r3, r3, #2
 801618a:	b29a      	uxth	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f7fe fd39 	bl	8014c08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016196:	4b59      	ldr	r3, [pc, #356]	@ (80162fc <tcp_process+0x7dc>)
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	687a      	ldr	r2, [r7, #4]
 801619c:	429a      	cmp	r2, r3
 801619e:	d105      	bne.n	80161ac <tcp_process+0x68c>
 80161a0:	4b56      	ldr	r3, [pc, #344]	@ (80162fc <tcp_process+0x7dc>)
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	68db      	ldr	r3, [r3, #12]
 80161a6:	4a55      	ldr	r2, [pc, #340]	@ (80162fc <tcp_process+0x7dc>)
 80161a8:	6013      	str	r3, [r2, #0]
 80161aa:	e013      	b.n	80161d4 <tcp_process+0x6b4>
 80161ac:	4b53      	ldr	r3, [pc, #332]	@ (80162fc <tcp_process+0x7dc>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	613b      	str	r3, [r7, #16]
 80161b2:	e00c      	b.n	80161ce <tcp_process+0x6ae>
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	68db      	ldr	r3, [r3, #12]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	429a      	cmp	r2, r3
 80161bc:	d104      	bne.n	80161c8 <tcp_process+0x6a8>
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	68da      	ldr	r2, [r3, #12]
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	60da      	str	r2, [r3, #12]
 80161c6:	e005      	b.n	80161d4 <tcp_process+0x6b4>
 80161c8:	693b      	ldr	r3, [r7, #16]
 80161ca:	68db      	ldr	r3, [r3, #12]
 80161cc:	613b      	str	r3, [r7, #16]
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d1ef      	bne.n	80161b4 <tcp_process+0x694>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2200      	movs	r2, #0
 80161d8:	60da      	str	r2, [r3, #12]
 80161da:	4b43      	ldr	r3, [pc, #268]	@ (80162e8 <tcp_process+0x7c8>)
 80161dc:	2201      	movs	r2, #1
 80161de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	220a      	movs	r2, #10
 80161e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80161e6:	4b41      	ldr	r3, [pc, #260]	@ (80162ec <tcp_process+0x7cc>)
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	60da      	str	r2, [r3, #12]
 80161ee:	4a3f      	ldr	r2, [pc, #252]	@ (80162ec <tcp_process+0x7cc>)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6013      	str	r3, [r2, #0]
 80161f4:	f003 f8e4 	bl	80193c0 <tcp_timer_needed>
      }
      break;
 80161f8:	e06c      	b.n	80162d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 f984 	bl	8016508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016200:	4b3b      	ldr	r3, [pc, #236]	@ (80162f0 <tcp_process+0x7d0>)
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 0310 	and.w	r3, r3, #16
 8016208:	2b00      	cmp	r3, #0
 801620a:	d065      	beq.n	80162d8 <tcp_process+0x7b8>
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016210:	4b38      	ldr	r3, [pc, #224]	@ (80162f4 <tcp_process+0x7d4>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	429a      	cmp	r2, r3
 8016216:	d15f      	bne.n	80162d8 <tcp_process+0x7b8>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801621c:	2b00      	cmp	r3, #0
 801621e:	d15b      	bne.n	80162d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7fe fcf1 	bl	8014c08 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016226:	4b35      	ldr	r3, [pc, #212]	@ (80162fc <tcp_process+0x7dc>)
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	429a      	cmp	r2, r3
 801622e:	d105      	bne.n	801623c <tcp_process+0x71c>
 8016230:	4b32      	ldr	r3, [pc, #200]	@ (80162fc <tcp_process+0x7dc>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	4a31      	ldr	r2, [pc, #196]	@ (80162fc <tcp_process+0x7dc>)
 8016238:	6013      	str	r3, [r2, #0]
 801623a:	e013      	b.n	8016264 <tcp_process+0x744>
 801623c:	4b2f      	ldr	r3, [pc, #188]	@ (80162fc <tcp_process+0x7dc>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	60fb      	str	r3, [r7, #12]
 8016242:	e00c      	b.n	801625e <tcp_process+0x73e>
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	429a      	cmp	r2, r3
 801624c:	d104      	bne.n	8016258 <tcp_process+0x738>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	68da      	ldr	r2, [r3, #12]
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	60da      	str	r2, [r3, #12]
 8016256:	e005      	b.n	8016264 <tcp_process+0x744>
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	68db      	ldr	r3, [r3, #12]
 801625c:	60fb      	str	r3, [r7, #12]
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1ef      	bne.n	8016244 <tcp_process+0x724>
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	60da      	str	r2, [r3, #12]
 801626a:	4b1f      	ldr	r3, [pc, #124]	@ (80162e8 <tcp_process+0x7c8>)
 801626c:	2201      	movs	r2, #1
 801626e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	220a      	movs	r2, #10
 8016274:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016276:	4b1d      	ldr	r3, [pc, #116]	@ (80162ec <tcp_process+0x7cc>)
 8016278:	681a      	ldr	r2, [r3, #0]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	60da      	str	r2, [r3, #12]
 801627e:	4a1b      	ldr	r2, [pc, #108]	@ (80162ec <tcp_process+0x7cc>)
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6013      	str	r3, [r2, #0]
 8016284:	f003 f89c 	bl	80193c0 <tcp_timer_needed>
      }
      break;
 8016288:	e026      	b.n	80162d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f000 f93c 	bl	8016508 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016290:	4b17      	ldr	r3, [pc, #92]	@ (80162f0 <tcp_process+0x7d0>)
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	f003 0310 	and.w	r3, r3, #16
 8016298:	2b00      	cmp	r3, #0
 801629a:	d01f      	beq.n	80162dc <tcp_process+0x7bc>
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80162a0:	4b14      	ldr	r3, [pc, #80]	@ (80162f4 <tcp_process+0x7d4>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d119      	bne.n	80162dc <tcp_process+0x7bc>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d115      	bne.n	80162dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80162b0:	4b11      	ldr	r3, [pc, #68]	@ (80162f8 <tcp_process+0x7d8>)
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	f043 0310 	orr.w	r3, r3, #16
 80162b8:	b2da      	uxtb	r2, r3
 80162ba:	4b0f      	ldr	r3, [pc, #60]	@ (80162f8 <tcp_process+0x7d8>)
 80162bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80162be:	e00d      	b.n	80162dc <tcp_process+0x7bc>
    default:
      break;
 80162c0:	bf00      	nop
 80162c2:	e00c      	b.n	80162de <tcp_process+0x7be>
      break;
 80162c4:	bf00      	nop
 80162c6:	e00a      	b.n	80162de <tcp_process+0x7be>
      break;
 80162c8:	bf00      	nop
 80162ca:	e008      	b.n	80162de <tcp_process+0x7be>
      break;
 80162cc:	bf00      	nop
 80162ce:	e006      	b.n	80162de <tcp_process+0x7be>
      break;
 80162d0:	bf00      	nop
 80162d2:	e004      	b.n	80162de <tcp_process+0x7be>
      break;
 80162d4:	bf00      	nop
 80162d6:	e002      	b.n	80162de <tcp_process+0x7be>
      break;
 80162d8:	bf00      	nop
 80162da:	e000      	b.n	80162de <tcp_process+0x7be>
      break;
 80162dc:	bf00      	nop
  }
  return ERR_OK;
 80162de:	2300      	movs	r3, #0
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3724      	adds	r7, #36	@ 0x24
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd90      	pop	{r4, r7, pc}
 80162e8:	2000f3a8 	.word	0x2000f3a8
 80162ec:	2000f3a4 	.word	0x2000f3a4
 80162f0:	2000f3d8 	.word	0x2000f3d8
 80162f4:	2000f3d0 	.word	0x2000f3d0
 80162f8:	2000f3d9 	.word	0x2000f3d9
 80162fc:	2000f3a0 	.word	0x2000f3a0

08016300 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016300:	b590      	push	{r4, r7, lr}
 8016302:	b085      	sub	sp, #20
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d106      	bne.n	801631e <tcp_oos_insert_segment+0x1e>
 8016310:	4b3b      	ldr	r3, [pc, #236]	@ (8016400 <tcp_oos_insert_segment+0x100>)
 8016312:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016316:	493b      	ldr	r1, [pc, #236]	@ (8016404 <tcp_oos_insert_segment+0x104>)
 8016318:	483b      	ldr	r0, [pc, #236]	@ (8016408 <tcp_oos_insert_segment+0x108>)
 801631a:	f007 f8b5 	bl	801d488 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	899b      	ldrh	r3, [r3, #12]
 8016324:	b29b      	uxth	r3, r3
 8016326:	4618      	mov	r0, r3
 8016328:	f7fb f8c6 	bl	80114b8 <lwip_htons>
 801632c:	4603      	mov	r3, r0
 801632e:	b2db      	uxtb	r3, r3
 8016330:	f003 0301 	and.w	r3, r3, #1
 8016334:	2b00      	cmp	r3, #0
 8016336:	d028      	beq.n	801638a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016338:	6838      	ldr	r0, [r7, #0]
 801633a:	f7fe f977 	bl	801462c <tcp_segs_free>
    next = NULL;
 801633e:	2300      	movs	r3, #0
 8016340:	603b      	str	r3, [r7, #0]
 8016342:	e056      	b.n	80163f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	899b      	ldrh	r3, [r3, #12]
 801634a:	b29b      	uxth	r3, r3
 801634c:	4618      	mov	r0, r3
 801634e:	f7fb f8b3 	bl	80114b8 <lwip_htons>
 8016352:	4603      	mov	r3, r0
 8016354:	b2db      	uxtb	r3, r3
 8016356:	f003 0301 	and.w	r3, r3, #1
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00d      	beq.n	801637a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	899b      	ldrh	r3, [r3, #12]
 8016364:	b29c      	uxth	r4, r3
 8016366:	2001      	movs	r0, #1
 8016368:	f7fb f8a6 	bl	80114b8 <lwip_htons>
 801636c:	4603      	mov	r3, r0
 801636e:	461a      	mov	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	68db      	ldr	r3, [r3, #12]
 8016374:	4322      	orrs	r2, r4
 8016376:	b292      	uxth	r2, r2
 8016378:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801637a:	683b      	ldr	r3, [r7, #0]
 801637c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801637e:	683b      	ldr	r3, [r7, #0]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016384:	68f8      	ldr	r0, [r7, #12]
 8016386:	f7fe f966 	bl	8014656 <tcp_seg_free>
    while (next &&
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d00e      	beq.n	80163ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	891b      	ldrh	r3, [r3, #8]
 8016394:	461a      	mov	r2, r3
 8016396:	4b1d      	ldr	r3, [pc, #116]	@ (801640c <tcp_oos_insert_segment+0x10c>)
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	441a      	add	r2, r3
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	685b      	ldr	r3, [r3, #4]
 80163a2:	6839      	ldr	r1, [r7, #0]
 80163a4:	8909      	ldrh	r1, [r1, #8]
 80163a6:	440b      	add	r3, r1
 80163a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	daca      	bge.n	8016344 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d01e      	beq.n	80163f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	891b      	ldrh	r3, [r3, #8]
 80163b8:	461a      	mov	r2, r3
 80163ba:	4b14      	ldr	r3, [pc, #80]	@ (801640c <tcp_oos_insert_segment+0x10c>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	441a      	add	r2, r3
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	68db      	ldr	r3, [r3, #12]
 80163c4:	685b      	ldr	r3, [r3, #4]
 80163c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	dd12      	ble.n	80163f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	68db      	ldr	r3, [r3, #12]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	4b0d      	ldr	r3, [pc, #52]	@ (801640c <tcp_oos_insert_segment+0x10c>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	1ad3      	subs	r3, r2, r3
 80163dc:	b29a      	uxth	r2, r3
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	685a      	ldr	r2, [r3, #4]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	891b      	ldrh	r3, [r3, #8]
 80163ea:	4619      	mov	r1, r3
 80163ec:	4610      	mov	r0, r2
 80163ee:	f7fc fb05 	bl	80129fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	683a      	ldr	r2, [r7, #0]
 80163f6:	601a      	str	r2, [r3, #0]
}
 80163f8:	bf00      	nop
 80163fa:	3714      	adds	r7, #20
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd90      	pop	{r4, r7, pc}
 8016400:	08021a54 	.word	0x08021a54
 8016404:	08021d14 	.word	0x08021d14
 8016408:	08021aa0 	.word	0x08021aa0
 801640c:	2000f3cc 	.word	0x2000f3cc

08016410 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016410:	b5b0      	push	{r4, r5, r7, lr}
 8016412:	b086      	sub	sp, #24
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
 801641c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801641e:	e03e      	b.n	801649e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	4618      	mov	r0, r3
 8016430:	f7fc fcf8 	bl	8012e24 <pbuf_clen>
 8016434:	4603      	mov	r3, r0
 8016436:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801643e:	8a7a      	ldrh	r2, [r7, #18]
 8016440:	429a      	cmp	r2, r3
 8016442:	d906      	bls.n	8016452 <tcp_free_acked_segments+0x42>
 8016444:	4b2a      	ldr	r3, [pc, #168]	@ (80164f0 <tcp_free_acked_segments+0xe0>)
 8016446:	f240 4257 	movw	r2, #1111	@ 0x457
 801644a:	492a      	ldr	r1, [pc, #168]	@ (80164f4 <tcp_free_acked_segments+0xe4>)
 801644c:	482a      	ldr	r0, [pc, #168]	@ (80164f8 <tcp_free_acked_segments+0xe8>)
 801644e:	f007 f81b 	bl	801d488 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016458:	8a7b      	ldrh	r3, [r7, #18]
 801645a:	1ad3      	subs	r3, r2, r3
 801645c:	b29a      	uxth	r2, r3
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	891a      	ldrh	r2, [r3, #8]
 8016468:	4b24      	ldr	r3, [pc, #144]	@ (80164fc <tcp_free_acked_segments+0xec>)
 801646a:	881b      	ldrh	r3, [r3, #0]
 801646c:	4413      	add	r3, r2
 801646e:	b29a      	uxth	r2, r3
 8016470:	4b22      	ldr	r3, [pc, #136]	@ (80164fc <tcp_free_acked_segments+0xec>)
 8016472:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016474:	6978      	ldr	r0, [r7, #20]
 8016476:	f7fe f8ee 	bl	8014656 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016480:	2b00      	cmp	r3, #0
 8016482:	d00c      	beq.n	801649e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d109      	bne.n	801649e <tcp_free_acked_segments+0x8e>
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d106      	bne.n	801649e <tcp_free_acked_segments+0x8e>
 8016490:	4b17      	ldr	r3, [pc, #92]	@ (80164f0 <tcp_free_acked_segments+0xe0>)
 8016492:	f240 4261 	movw	r2, #1121	@ 0x461
 8016496:	491a      	ldr	r1, [pc, #104]	@ (8016500 <tcp_free_acked_segments+0xf0>)
 8016498:	4817      	ldr	r0, [pc, #92]	@ (80164f8 <tcp_free_acked_segments+0xe8>)
 801649a:	f006 fff5 	bl	801d488 <iprintf>
  while (seg_list != NULL &&
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d020      	beq.n	80164e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7fb f819 	bl	80114e2 <lwip_htonl>
 80164b0:	4604      	mov	r4, r0
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	891b      	ldrh	r3, [r3, #8]
 80164b6:	461d      	mov	r5, r3
 80164b8:	68bb      	ldr	r3, [r7, #8]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	899b      	ldrh	r3, [r3, #12]
 80164be:	b29b      	uxth	r3, r3
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7fa fff9 	bl	80114b8 <lwip_htons>
 80164c6:	4603      	mov	r3, r0
 80164c8:	b2db      	uxtb	r3, r3
 80164ca:	f003 0303 	and.w	r3, r3, #3
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d001      	beq.n	80164d6 <tcp_free_acked_segments+0xc6>
 80164d2:	2301      	movs	r3, #1
 80164d4:	e000      	b.n	80164d8 <tcp_free_acked_segments+0xc8>
 80164d6:	2300      	movs	r3, #0
 80164d8:	442b      	add	r3, r5
 80164da:	18e2      	adds	r2, r4, r3
 80164dc:	4b09      	ldr	r3, [pc, #36]	@ (8016504 <tcp_free_acked_segments+0xf4>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	dd9c      	ble.n	8016420 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80164e6:	68bb      	ldr	r3, [r7, #8]
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	3718      	adds	r7, #24
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bdb0      	pop	{r4, r5, r7, pc}
 80164f0:	08021a54 	.word	0x08021a54
 80164f4:	08021d3c 	.word	0x08021d3c
 80164f8:	08021aa0 	.word	0x08021aa0
 80164fc:	2000f3d4 	.word	0x2000f3d4
 8016500:	08021d64 	.word	0x08021d64
 8016504:	2000f3d0 	.word	0x2000f3d0

08016508 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016508:	b5b0      	push	{r4, r5, r7, lr}
 801650a:	b094      	sub	sp, #80	@ 0x50
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016510:	2300      	movs	r3, #0
 8016512:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d106      	bne.n	8016528 <tcp_receive+0x20>
 801651a:	4b91      	ldr	r3, [pc, #580]	@ (8016760 <tcp_receive+0x258>)
 801651c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016520:	4990      	ldr	r1, [pc, #576]	@ (8016764 <tcp_receive+0x25c>)
 8016522:	4891      	ldr	r0, [pc, #580]	@ (8016768 <tcp_receive+0x260>)
 8016524:	f006 ffb0 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	7d1b      	ldrb	r3, [r3, #20]
 801652c:	2b03      	cmp	r3, #3
 801652e:	d806      	bhi.n	801653e <tcp_receive+0x36>
 8016530:	4b8b      	ldr	r3, [pc, #556]	@ (8016760 <tcp_receive+0x258>)
 8016532:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016536:	498d      	ldr	r1, [pc, #564]	@ (801676c <tcp_receive+0x264>)
 8016538:	488b      	ldr	r0, [pc, #556]	@ (8016768 <tcp_receive+0x260>)
 801653a:	f006 ffa5 	bl	801d488 <iprintf>

  if (flags & TCP_ACK) {
 801653e:	4b8c      	ldr	r3, [pc, #560]	@ (8016770 <tcp_receive+0x268>)
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	f003 0310 	and.w	r3, r3, #16
 8016546:	2b00      	cmp	r3, #0
 8016548:	f000 8264 	beq.w	8016a14 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016552:	461a      	mov	r2, r3
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016558:	4413      	add	r3, r2
 801655a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016560:	4b84      	ldr	r3, [pc, #528]	@ (8016774 <tcp_receive+0x26c>)
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	1ad3      	subs	r3, r2, r3
 8016566:	2b00      	cmp	r3, #0
 8016568:	db1b      	blt.n	80165a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801656e:	4b81      	ldr	r3, [pc, #516]	@ (8016774 <tcp_receive+0x26c>)
 8016570:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016572:	429a      	cmp	r2, r3
 8016574:	d106      	bne.n	8016584 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801657a:	4b7f      	ldr	r3, [pc, #508]	@ (8016778 <tcp_receive+0x270>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	1ad3      	subs	r3, r2, r3
 8016580:	2b00      	cmp	r3, #0
 8016582:	db0e      	blt.n	80165a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016588:	4b7b      	ldr	r3, [pc, #492]	@ (8016778 <tcp_receive+0x270>)
 801658a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801658c:	429a      	cmp	r2, r3
 801658e:	d125      	bne.n	80165dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016590:	4b7a      	ldr	r3, [pc, #488]	@ (801677c <tcp_receive+0x274>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	89db      	ldrh	r3, [r3, #14]
 8016596:	b29a      	uxth	r2, r3
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801659e:	429a      	cmp	r2, r3
 80165a0:	d91c      	bls.n	80165dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80165a2:	4b76      	ldr	r3, [pc, #472]	@ (801677c <tcp_receive+0x274>)
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	89db      	ldrh	r3, [r3, #14]
 80165a8:	b29a      	uxth	r2, r3
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80165bc:	429a      	cmp	r2, r3
 80165be:	d205      	bcs.n	80165cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80165cc:	4b69      	ldr	r3, [pc, #420]	@ (8016774 <tcp_receive+0x26c>)
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80165d4:	4b68      	ldr	r3, [pc, #416]	@ (8016778 <tcp_receive+0x270>)
 80165d6:	681a      	ldr	r2, [r3, #0]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80165dc:	4b66      	ldr	r3, [pc, #408]	@ (8016778 <tcp_receive+0x270>)
 80165de:	681a      	ldr	r2, [r3, #0]
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165e4:	1ad3      	subs	r3, r2, r3
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	dc58      	bgt.n	801669c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80165ea:	4b65      	ldr	r3, [pc, #404]	@ (8016780 <tcp_receive+0x278>)
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d14b      	bne.n	801668a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80165fc:	4413      	add	r3, r2
 80165fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016600:	429a      	cmp	r2, r3
 8016602:	d142      	bne.n	801668a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801660a:	2b00      	cmp	r3, #0
 801660c:	db3d      	blt.n	801668a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016612:	4b59      	ldr	r3, [pc, #356]	@ (8016778 <tcp_receive+0x270>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	429a      	cmp	r2, r3
 8016618:	d137      	bne.n	801668a <tcp_receive+0x182>
              found_dupack = 1;
 801661a:	2301      	movs	r3, #1
 801661c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016624:	2bff      	cmp	r3, #255	@ 0xff
 8016626:	d007      	beq.n	8016638 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801662e:	3301      	adds	r3, #1
 8016630:	b2da      	uxtb	r2, r3
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801663e:	2b03      	cmp	r3, #3
 8016640:	d91b      	bls.n	801667a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801664c:	4413      	add	r3, r2
 801664e:	b29a      	uxth	r2, r3
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016656:	429a      	cmp	r2, r3
 8016658:	d30a      	bcc.n	8016670 <tcp_receive+0x168>
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016664:	4413      	add	r3, r2
 8016666:	b29a      	uxth	r2, r3
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801666e:	e004      	b.n	801667a <tcp_receive+0x172>
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016676:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016680:	2b02      	cmp	r3, #2
 8016682:	d902      	bls.n	801668a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f002 fb3f 	bl	8018d08 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801668a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801668c:	2b00      	cmp	r3, #0
 801668e:	f040 8161 	bne.w	8016954 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2200      	movs	r2, #0
 8016696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801669a:	e15b      	b.n	8016954 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801669c:	4b36      	ldr	r3, [pc, #216]	@ (8016778 <tcp_receive+0x270>)
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80166a4:	1ad3      	subs	r3, r2, r3
 80166a6:	3b01      	subs	r3, #1
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f2c0 814e 	blt.w	801694a <tcp_receive+0x442>
 80166ae:	4b32      	ldr	r3, [pc, #200]	@ (8016778 <tcp_receive+0x270>)
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	f300 8146 	bgt.w	801694a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8b5b      	ldrh	r3, [r3, #26]
 80166c2:	f003 0304 	and.w	r3, r3, #4
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d010      	beq.n	80166ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	8b5b      	ldrh	r3, [r3, #26]
 80166ce:	f023 0304 	bic.w	r3, r3, #4
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2200      	movs	r2, #0
 80166e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80166fa:	10db      	asrs	r3, r3, #3
 80166fc:	b21b      	sxth	r3, r3
 80166fe:	b29a      	uxth	r2, r3
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016706:	b29b      	uxth	r3, r3
 8016708:	4413      	add	r3, r2
 801670a:	b29b      	uxth	r3, r3
 801670c:	b21a      	sxth	r2, r3
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016714:	4b18      	ldr	r3, [pc, #96]	@ (8016778 <tcp_receive+0x270>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	b29a      	uxth	r2, r3
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801671e:	b29b      	uxth	r3, r3
 8016720:	1ad3      	subs	r3, r2, r3
 8016722:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801672c:	4b12      	ldr	r3, [pc, #72]	@ (8016778 <tcp_receive+0x270>)
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	7d1b      	ldrb	r3, [r3, #20]
 8016738:	2b03      	cmp	r3, #3
 801673a:	f240 8097 	bls.w	801686c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801674a:	429a      	cmp	r2, r3
 801674c:	d245      	bcs.n	80167da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	8b5b      	ldrh	r3, [r3, #26]
 8016752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016756:	2b00      	cmp	r3, #0
 8016758:	d014      	beq.n	8016784 <tcp_receive+0x27c>
 801675a:	2301      	movs	r3, #1
 801675c:	e013      	b.n	8016786 <tcp_receive+0x27e>
 801675e:	bf00      	nop
 8016760:	08021a54 	.word	0x08021a54
 8016764:	08021d84 	.word	0x08021d84
 8016768:	08021aa0 	.word	0x08021aa0
 801676c:	08021da0 	.word	0x08021da0
 8016770:	2000f3d8 	.word	0x2000f3d8
 8016774:	2000f3cc 	.word	0x2000f3cc
 8016778:	2000f3d0 	.word	0x2000f3d0
 801677c:	2000f3bc 	.word	0x2000f3bc
 8016780:	2000f3d6 	.word	0x2000f3d6
 8016784:	2302      	movs	r3, #2
 8016786:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801678a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801678e:	b29a      	uxth	r2, r3
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016794:	fb12 f303 	smulbb	r3, r2, r3
 8016798:	b29b      	uxth	r3, r3
 801679a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801679c:	4293      	cmp	r3, r2
 801679e:	bf28      	it	cs
 80167a0:	4613      	movcs	r3, r2
 80167a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80167aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80167ac:	4413      	add	r3, r2
 80167ae:	b29a      	uxth	r2, r3
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d309      	bcc.n	80167ce <tcp_receive+0x2c6>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80167c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80167c2:	4413      	add	r3, r2
 80167c4:	b29a      	uxth	r2, r3
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80167cc:	e04e      	b.n	801686c <tcp_receive+0x364>
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80167d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80167d8:	e048      	b.n	801686c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80167e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80167e2:	4413      	add	r3, r2
 80167e4:	b29a      	uxth	r2, r3
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d309      	bcc.n	8016804 <tcp_receive+0x2fc>
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80167f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80167f8:	4413      	add	r3, r2
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016802:	e004      	b.n	801680e <tcp_receive+0x306>
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801680a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801681a:	429a      	cmp	r2, r3
 801681c:	d326      	bcc.n	801686c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801682a:	1ad3      	subs	r3, r2, r3
 801682c:	b29a      	uxth	r2, r3
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801683e:	4413      	add	r3, r2
 8016840:	b29a      	uxth	r2, r3
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016848:	429a      	cmp	r2, r3
 801684a:	d30a      	bcc.n	8016862 <tcp_receive+0x35a>
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016856:	4413      	add	r3, r2
 8016858:	b29a      	uxth	r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016860:	e004      	b.n	801686c <tcp_receive+0x364>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016868:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016874:	4a98      	ldr	r2, [pc, #608]	@ (8016ad8 <tcp_receive+0x5d0>)
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7ff fdca 	bl	8016410 <tcp_free_acked_segments>
 801687c:	4602      	mov	r2, r0
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801688a:	4a94      	ldr	r2, [pc, #592]	@ (8016adc <tcp_receive+0x5d4>)
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7ff fdbf 	bl	8016410 <tcp_free_acked_segments>
 8016892:	4602      	mov	r2, r0
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801689c:	2b00      	cmp	r3, #0
 801689e:	d104      	bne.n	80168aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168a6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80168a8:	e002      	b.n	80168b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2200      	movs	r2, #0
 80168ae:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	2200      	movs	r2, #0
 80168b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d103      	bne.n	80168c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2200      	movs	r2, #0
 80168c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80168cc:	4b84      	ldr	r3, [pc, #528]	@ (8016ae0 <tcp_receive+0x5d8>)
 80168ce:	881b      	ldrh	r3, [r3, #0]
 80168d0:	4413      	add	r3, r2
 80168d2:	b29a      	uxth	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	8b5b      	ldrh	r3, [r3, #26]
 80168de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d035      	beq.n	8016952 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d118      	bne.n	8016920 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d00c      	beq.n	8016910 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168fe:	68db      	ldr	r3, [r3, #12]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	4618      	mov	r0, r3
 8016904:	f7fa fded 	bl	80114e2 <lwip_htonl>
 8016908:	4603      	mov	r3, r0
 801690a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801690c:	2b00      	cmp	r3, #0
 801690e:	dc20      	bgt.n	8016952 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	8b5b      	ldrh	r3, [r3, #26]
 8016914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016918:	b29a      	uxth	r2, r3
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801691e:	e018      	b.n	8016952 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016928:	68db      	ldr	r3, [r3, #12]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	4618      	mov	r0, r3
 801692e:	f7fa fdd8 	bl	80114e2 <lwip_htonl>
 8016932:	4603      	mov	r3, r0
 8016934:	1ae3      	subs	r3, r4, r3
 8016936:	2b00      	cmp	r3, #0
 8016938:	dc0b      	bgt.n	8016952 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	8b5b      	ldrh	r3, [r3, #26]
 801693e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016942:	b29a      	uxth	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016948:	e003      	b.n	8016952 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f002 fbc8 	bl	80190e0 <tcp_send_empty_ack>
 8016950:	e000      	b.n	8016954 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016952:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016958:	2b00      	cmp	r3, #0
 801695a:	d05b      	beq.n	8016a14 <tcp_receive+0x50c>
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016960:	4b60      	ldr	r3, [pc, #384]	@ (8016ae4 <tcp_receive+0x5dc>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	1ad3      	subs	r3, r2, r3
 8016966:	2b00      	cmp	r3, #0
 8016968:	da54      	bge.n	8016a14 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801696a:	4b5f      	ldr	r3, [pc, #380]	@ (8016ae8 <tcp_receive+0x5e0>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	b29a      	uxth	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016974:	b29b      	uxth	r3, r3
 8016976:	1ad3      	subs	r3, r2, r3
 8016978:	b29b      	uxth	r3, r3
 801697a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801697e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016988:	10db      	asrs	r3, r3, #3
 801698a:	b21b      	sxth	r3, r3
 801698c:	b29b      	uxth	r3, r3
 801698e:	1ad3      	subs	r3, r2, r3
 8016990:	b29b      	uxth	r3, r3
 8016992:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801699c:	b29a      	uxth	r2, r3
 801699e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80169a2:	4413      	add	r3, r2
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	b21a      	sxth	r2, r3
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80169ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	da05      	bge.n	80169c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80169b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80169b8:	425b      	negs	r3, r3
 80169ba:	b29b      	uxth	r3, r3
 80169bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80169c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80169ca:	109b      	asrs	r3, r3, #2
 80169cc:	b21b      	sxth	r3, r3
 80169ce:	b29b      	uxth	r3, r3
 80169d0:	1ad3      	subs	r3, r2, r3
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80169de:	b29a      	uxth	r2, r3
 80169e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80169e4:	4413      	add	r3, r2
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	b21a      	sxth	r2, r3
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80169f4:	10db      	asrs	r3, r3, #3
 80169f6:	b21b      	sxth	r3, r3
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016a00:	b29b      	uxth	r3, r3
 8016a02:	4413      	add	r3, r2
 8016a04:	b29b      	uxth	r3, r3
 8016a06:	b21a      	sxth	r2, r3
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2200      	movs	r2, #0
 8016a12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016a14:	4b35      	ldr	r3, [pc, #212]	@ (8016aec <tcp_receive+0x5e4>)
 8016a16:	881b      	ldrh	r3, [r3, #0]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	f000 84df 	beq.w	80173dc <tcp_receive+0xed4>
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	7d1b      	ldrb	r3, [r3, #20]
 8016a22:	2b06      	cmp	r3, #6
 8016a24:	f200 84da 	bhi.w	80173dc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a2c:	4b30      	ldr	r3, [pc, #192]	@ (8016af0 <tcp_receive+0x5e8>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	1ad3      	subs	r3, r2, r3
 8016a32:	3b01      	subs	r3, #1
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	f2c0 808f 	blt.w	8016b58 <tcp_receive+0x650>
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8016aec <tcp_receive+0x5e4>)
 8016a40:	881b      	ldrh	r3, [r3, #0]
 8016a42:	4619      	mov	r1, r3
 8016a44:	4b2a      	ldr	r3, [pc, #168]	@ (8016af0 <tcp_receive+0x5e8>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	440b      	add	r3, r1
 8016a4a:	1ad3      	subs	r3, r2, r3
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f300 8082 	bgt.w	8016b58 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016a54:	4b27      	ldr	r3, [pc, #156]	@ (8016af4 <tcp_receive+0x5ec>)
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016a5e:	4b24      	ldr	r3, [pc, #144]	@ (8016af0 <tcp_receive+0x5e8>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	1ad3      	subs	r3, r2, r3
 8016a64:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016a66:	4b23      	ldr	r3, [pc, #140]	@ (8016af4 <tcp_receive+0x5ec>)
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d106      	bne.n	8016a7c <tcp_receive+0x574>
 8016a6e:	4b22      	ldr	r3, [pc, #136]	@ (8016af8 <tcp_receive+0x5f0>)
 8016a70:	f240 5294 	movw	r2, #1428	@ 0x594
 8016a74:	4921      	ldr	r1, [pc, #132]	@ (8016afc <tcp_receive+0x5f4>)
 8016a76:	4822      	ldr	r0, [pc, #136]	@ (8016b00 <tcp_receive+0x5f8>)
 8016a78:	f006 fd06 	bl	801d488 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016a82:	4293      	cmp	r3, r2
 8016a84:	d906      	bls.n	8016a94 <tcp_receive+0x58c>
 8016a86:	4b1c      	ldr	r3, [pc, #112]	@ (8016af8 <tcp_receive+0x5f0>)
 8016a88:	f240 5295 	movw	r2, #1429	@ 0x595
 8016a8c:	491d      	ldr	r1, [pc, #116]	@ (8016b04 <tcp_receive+0x5fc>)
 8016a8e:	481c      	ldr	r0, [pc, #112]	@ (8016b00 <tcp_receive+0x5f8>)
 8016a90:	f006 fcfa 	bl	801d488 <iprintf>
      off = (u16_t)off32;
 8016a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016a9a:	4b16      	ldr	r3, [pc, #88]	@ (8016af4 <tcp_receive+0x5ec>)
 8016a9c:	685b      	ldr	r3, [r3, #4]
 8016a9e:	891b      	ldrh	r3, [r3, #8]
 8016aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d906      	bls.n	8016ab6 <tcp_receive+0x5ae>
 8016aa8:	4b13      	ldr	r3, [pc, #76]	@ (8016af8 <tcp_receive+0x5f0>)
 8016aaa:	f240 5297 	movw	r2, #1431	@ 0x597
 8016aae:	4916      	ldr	r1, [pc, #88]	@ (8016b08 <tcp_receive+0x600>)
 8016ab0:	4813      	ldr	r0, [pc, #76]	@ (8016b00 <tcp_receive+0x5f8>)
 8016ab2:	f006 fce9 	bl	801d488 <iprintf>
      inseg.len -= off;
 8016ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8016af4 <tcp_receive+0x5ec>)
 8016ab8:	891a      	ldrh	r2, [r3, #8]
 8016aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016abe:	1ad3      	subs	r3, r2, r3
 8016ac0:	b29a      	uxth	r2, r3
 8016ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8016af4 <tcp_receive+0x5ec>)
 8016ac4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8016af4 <tcp_receive+0x5ec>)
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	891a      	ldrh	r2, [r3, #8]
 8016acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016ad0:	1ad3      	subs	r3, r2, r3
 8016ad2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016ad4:	e02a      	b.n	8016b2c <tcp_receive+0x624>
 8016ad6:	bf00      	nop
 8016ad8:	08021dbc 	.word	0x08021dbc
 8016adc:	08021dc4 	.word	0x08021dc4
 8016ae0:	2000f3d4 	.word	0x2000f3d4
 8016ae4:	2000f3d0 	.word	0x2000f3d0
 8016ae8:	2000f394 	.word	0x2000f394
 8016aec:	2000f3d6 	.word	0x2000f3d6
 8016af0:	2000f3cc 	.word	0x2000f3cc
 8016af4:	2000f3ac 	.word	0x2000f3ac
 8016af8:	08021a54 	.word	0x08021a54
 8016afc:	08021dcc 	.word	0x08021dcc
 8016b00:	08021aa0 	.word	0x08021aa0
 8016b04:	08021ddc 	.word	0x08021ddc
 8016b08:	08021dec 	.word	0x08021dec
        off -= p->len;
 8016b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b0e:	895b      	ldrh	r3, [r3, #10]
 8016b10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b14:	1ad3      	subs	r3, r2, r3
 8016b16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016b1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b22:	2200      	movs	r2, #0
 8016b24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016b26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016b2e:	895b      	ldrh	r3, [r3, #10]
 8016b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d8e9      	bhi.n	8016b0c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016b38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016b40:	f7fc f85c 	bl	8012bfc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b48:	4a90      	ldr	r2, [pc, #576]	@ (8016d8c <tcp_receive+0x884>)
 8016b4a:	6013      	str	r3, [r2, #0]
 8016b4c:	4b90      	ldr	r3, [pc, #576]	@ (8016d90 <tcp_receive+0x888>)
 8016b4e:	68db      	ldr	r3, [r3, #12]
 8016b50:	4a8e      	ldr	r2, [pc, #568]	@ (8016d8c <tcp_receive+0x884>)
 8016b52:	6812      	ldr	r2, [r2, #0]
 8016b54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016b56:	e00d      	b.n	8016b74 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016b58:	4b8c      	ldr	r3, [pc, #560]	@ (8016d8c <tcp_receive+0x884>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b60:	1ad3      	subs	r3, r2, r3
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	da06      	bge.n	8016b74 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	8b5b      	ldrh	r3, [r3, #26]
 8016b6a:	f043 0302 	orr.w	r3, r3, #2
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016b74:	4b85      	ldr	r3, [pc, #532]	@ (8016d8c <tcp_receive+0x884>)
 8016b76:	681a      	ldr	r2, [r3, #0]
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b7c:	1ad3      	subs	r3, r2, r3
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	f2c0 8427 	blt.w	80173d2 <tcp_receive+0xeca>
 8016b84:	4b81      	ldr	r3, [pc, #516]	@ (8016d8c <tcp_receive+0x884>)
 8016b86:	681a      	ldr	r2, [r3, #0]
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016b90:	440b      	add	r3, r1
 8016b92:	1ad3      	subs	r3, r2, r3
 8016b94:	3301      	adds	r3, #1
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	f300 841b 	bgt.w	80173d2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ba0:	4b7a      	ldr	r3, [pc, #488]	@ (8016d8c <tcp_receive+0x884>)
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	f040 8298 	bne.w	80170da <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016baa:	4b79      	ldr	r3, [pc, #484]	@ (8016d90 <tcp_receive+0x888>)
 8016bac:	891c      	ldrh	r4, [r3, #8]
 8016bae:	4b78      	ldr	r3, [pc, #480]	@ (8016d90 <tcp_receive+0x888>)
 8016bb0:	68db      	ldr	r3, [r3, #12]
 8016bb2:	899b      	ldrh	r3, [r3, #12]
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7fa fc7e 	bl	80114b8 <lwip_htons>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	b2db      	uxtb	r3, r3
 8016bc0:	f003 0303 	and.w	r3, r3, #3
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d001      	beq.n	8016bcc <tcp_receive+0x6c4>
 8016bc8:	2301      	movs	r3, #1
 8016bca:	e000      	b.n	8016bce <tcp_receive+0x6c6>
 8016bcc:	2300      	movs	r3, #0
 8016bce:	4423      	add	r3, r4
 8016bd0:	b29a      	uxth	r2, r3
 8016bd2:	4b70      	ldr	r3, [pc, #448]	@ (8016d94 <tcp_receive+0x88c>)
 8016bd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016bda:	4b6e      	ldr	r3, [pc, #440]	@ (8016d94 <tcp_receive+0x88c>)
 8016bdc:	881b      	ldrh	r3, [r3, #0]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d274      	bcs.n	8016ccc <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016be2:	4b6b      	ldr	r3, [pc, #428]	@ (8016d90 <tcp_receive+0x888>)
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	899b      	ldrh	r3, [r3, #12]
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7fa fc64 	bl	80114b8 <lwip_htons>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	f003 0301 	and.w	r3, r3, #1
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d01e      	beq.n	8016c3a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016bfc:	4b64      	ldr	r3, [pc, #400]	@ (8016d90 <tcp_receive+0x888>)
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	899b      	ldrh	r3, [r3, #12]
 8016c02:	b29b      	uxth	r3, r3
 8016c04:	b21b      	sxth	r3, r3
 8016c06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016c0a:	b21c      	sxth	r4, r3
 8016c0c:	4b60      	ldr	r3, [pc, #384]	@ (8016d90 <tcp_receive+0x888>)
 8016c0e:	68db      	ldr	r3, [r3, #12]
 8016c10:	899b      	ldrh	r3, [r3, #12]
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	4618      	mov	r0, r3
 8016c16:	f7fa fc4f 	bl	80114b8 <lwip_htons>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fa fc47 	bl	80114b8 <lwip_htons>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	b21b      	sxth	r3, r3
 8016c2e:	4323      	orrs	r3, r4
 8016c30:	b21a      	sxth	r2, r3
 8016c32:	4b57      	ldr	r3, [pc, #348]	@ (8016d90 <tcp_receive+0x888>)
 8016c34:	68db      	ldr	r3, [r3, #12]
 8016c36:	b292      	uxth	r2, r2
 8016c38:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016c3e:	4b54      	ldr	r3, [pc, #336]	@ (8016d90 <tcp_receive+0x888>)
 8016c40:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016c42:	4b53      	ldr	r3, [pc, #332]	@ (8016d90 <tcp_receive+0x888>)
 8016c44:	68db      	ldr	r3, [r3, #12]
 8016c46:	899b      	ldrh	r3, [r3, #12]
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fa fc34 	bl	80114b8 <lwip_htons>
 8016c50:	4603      	mov	r3, r0
 8016c52:	b2db      	uxtb	r3, r3
 8016c54:	f003 0302 	and.w	r3, r3, #2
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d005      	beq.n	8016c68 <tcp_receive+0x760>
            inseg.len -= 1;
 8016c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8016d90 <tcp_receive+0x888>)
 8016c5e:	891b      	ldrh	r3, [r3, #8]
 8016c60:	3b01      	subs	r3, #1
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	4b4a      	ldr	r3, [pc, #296]	@ (8016d90 <tcp_receive+0x888>)
 8016c66:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016c68:	4b49      	ldr	r3, [pc, #292]	@ (8016d90 <tcp_receive+0x888>)
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	4a48      	ldr	r2, [pc, #288]	@ (8016d90 <tcp_receive+0x888>)
 8016c6e:	8912      	ldrh	r2, [r2, #8]
 8016c70:	4611      	mov	r1, r2
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7fb fec2 	bl	80129fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016c78:	4b45      	ldr	r3, [pc, #276]	@ (8016d90 <tcp_receive+0x888>)
 8016c7a:	891c      	ldrh	r4, [r3, #8]
 8016c7c:	4b44      	ldr	r3, [pc, #272]	@ (8016d90 <tcp_receive+0x888>)
 8016c7e:	68db      	ldr	r3, [r3, #12]
 8016c80:	899b      	ldrh	r3, [r3, #12]
 8016c82:	b29b      	uxth	r3, r3
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7fa fc17 	bl	80114b8 <lwip_htons>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	b2db      	uxtb	r3, r3
 8016c8e:	f003 0303 	and.w	r3, r3, #3
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d001      	beq.n	8016c9a <tcp_receive+0x792>
 8016c96:	2301      	movs	r3, #1
 8016c98:	e000      	b.n	8016c9c <tcp_receive+0x794>
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	4423      	add	r3, r4
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8016d94 <tcp_receive+0x88c>)
 8016ca2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8016d94 <tcp_receive+0x88c>)
 8016ca6:	881b      	ldrh	r3, [r3, #0]
 8016ca8:	461a      	mov	r2, r3
 8016caa:	4b38      	ldr	r3, [pc, #224]	@ (8016d8c <tcp_receive+0x884>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	441a      	add	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cb4:	6879      	ldr	r1, [r7, #4]
 8016cb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016cb8:	440b      	add	r3, r1
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d006      	beq.n	8016ccc <tcp_receive+0x7c4>
 8016cbe:	4b36      	ldr	r3, [pc, #216]	@ (8016d98 <tcp_receive+0x890>)
 8016cc0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016cc4:	4935      	ldr	r1, [pc, #212]	@ (8016d9c <tcp_receive+0x894>)
 8016cc6:	4836      	ldr	r0, [pc, #216]	@ (8016da0 <tcp_receive+0x898>)
 8016cc8:	f006 fbde 	bl	801d488 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	f000 80e6 	beq.w	8016ea2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8016d90 <tcp_receive+0x888>)
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	899b      	ldrh	r3, [r3, #12]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f7fa fbea 	bl	80114b8 <lwip_htons>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	b2db      	uxtb	r3, r3
 8016ce8:	f003 0301 	and.w	r3, r3, #1
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d010      	beq.n	8016d12 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016cf0:	e00a      	b.n	8016d08 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016cf6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016cfc:	681a      	ldr	r2, [r3, #0]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016d02:	68f8      	ldr	r0, [r7, #12]
 8016d04:	f7fd fca7 	bl	8014656 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d1f0      	bne.n	8016cf2 <tcp_receive+0x7ea>
 8016d10:	e0c7      	b.n	8016ea2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016d18:	e051      	b.n	8016dbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016d1c:	68db      	ldr	r3, [r3, #12]
 8016d1e:	899b      	ldrh	r3, [r3, #12]
 8016d20:	b29b      	uxth	r3, r3
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7fa fbc8 	bl	80114b8 <lwip_htons>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	f003 0301 	and.w	r3, r3, #1
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d03c      	beq.n	8016dae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016d34:	4b16      	ldr	r3, [pc, #88]	@ (8016d90 <tcp_receive+0x888>)
 8016d36:	68db      	ldr	r3, [r3, #12]
 8016d38:	899b      	ldrh	r3, [r3, #12]
 8016d3a:	b29b      	uxth	r3, r3
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fa fbbb 	bl	80114b8 <lwip_htons>
 8016d42:	4603      	mov	r3, r0
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d12f      	bne.n	8016dae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016d4e:	4b10      	ldr	r3, [pc, #64]	@ (8016d90 <tcp_receive+0x888>)
 8016d50:	68db      	ldr	r3, [r3, #12]
 8016d52:	899b      	ldrh	r3, [r3, #12]
 8016d54:	b29c      	uxth	r4, r3
 8016d56:	2001      	movs	r0, #1
 8016d58:	f7fa fbae 	bl	80114b8 <lwip_htons>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	461a      	mov	r2, r3
 8016d60:	4b0b      	ldr	r3, [pc, #44]	@ (8016d90 <tcp_receive+0x888>)
 8016d62:	68db      	ldr	r3, [r3, #12]
 8016d64:	4322      	orrs	r2, r4
 8016d66:	b292      	uxth	r2, r2
 8016d68:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016d6a:	4b09      	ldr	r3, [pc, #36]	@ (8016d90 <tcp_receive+0x888>)
 8016d6c:	891c      	ldrh	r4, [r3, #8]
 8016d6e:	4b08      	ldr	r3, [pc, #32]	@ (8016d90 <tcp_receive+0x888>)
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	899b      	ldrh	r3, [r3, #12]
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fa fb9e 	bl	80114b8 <lwip_htons>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	f003 0303 	and.w	r3, r3, #3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d00d      	beq.n	8016da4 <tcp_receive+0x89c>
 8016d88:	2301      	movs	r3, #1
 8016d8a:	e00c      	b.n	8016da6 <tcp_receive+0x89e>
 8016d8c:	2000f3cc 	.word	0x2000f3cc
 8016d90:	2000f3ac 	.word	0x2000f3ac
 8016d94:	2000f3d6 	.word	0x2000f3d6
 8016d98:	08021a54 	.word	0x08021a54
 8016d9c:	08021dfc 	.word	0x08021dfc
 8016da0:	08021aa0 	.word	0x08021aa0
 8016da4:	2300      	movs	r3, #0
 8016da6:	4423      	add	r3, r4
 8016da8:	b29a      	uxth	r2, r3
 8016daa:	4b98      	ldr	r3, [pc, #608]	@ (801700c <tcp_receive+0xb04>)
 8016dac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016db0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016db8:	6938      	ldr	r0, [r7, #16]
 8016dba:	f7fd fc4c 	bl	8014656 <tcp_seg_free>
            while (next &&
 8016dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d00e      	beq.n	8016de2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016dc4:	4b91      	ldr	r3, [pc, #580]	@ (801700c <tcp_receive+0xb04>)
 8016dc6:	881b      	ldrh	r3, [r3, #0]
 8016dc8:	461a      	mov	r2, r3
 8016dca:	4b91      	ldr	r3, [pc, #580]	@ (8017010 <tcp_receive+0xb08>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	441a      	add	r2, r3
 8016dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016dd2:	68db      	ldr	r3, [r3, #12]
 8016dd4:	685b      	ldr	r3, [r3, #4]
 8016dd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016dd8:	8909      	ldrh	r1, [r1, #8]
 8016dda:	440b      	add	r3, r1
 8016ddc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	da9b      	bge.n	8016d1a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d059      	beq.n	8016e9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016de8:	4b88      	ldr	r3, [pc, #544]	@ (801700c <tcp_receive+0xb04>)
 8016dea:	881b      	ldrh	r3, [r3, #0]
 8016dec:	461a      	mov	r2, r3
 8016dee:	4b88      	ldr	r3, [pc, #544]	@ (8017010 <tcp_receive+0xb08>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	441a      	add	r2, r3
 8016df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016df6:	68db      	ldr	r3, [r3, #12]
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	dd4d      	ble.n	8016e9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e02:	68db      	ldr	r3, [r3, #12]
 8016e04:	685b      	ldr	r3, [r3, #4]
 8016e06:	b29a      	uxth	r2, r3
 8016e08:	4b81      	ldr	r3, [pc, #516]	@ (8017010 <tcp_receive+0xb08>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	1ad3      	subs	r3, r2, r3
 8016e10:	b29a      	uxth	r2, r3
 8016e12:	4b80      	ldr	r3, [pc, #512]	@ (8017014 <tcp_receive+0xb0c>)
 8016e14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e16:	4b7f      	ldr	r3, [pc, #508]	@ (8017014 <tcp_receive+0xb0c>)
 8016e18:	68db      	ldr	r3, [r3, #12]
 8016e1a:	899b      	ldrh	r3, [r3, #12]
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7fa fb4a 	bl	80114b8 <lwip_htons>
 8016e24:	4603      	mov	r3, r0
 8016e26:	b2db      	uxtb	r3, r3
 8016e28:	f003 0302 	and.w	r3, r3, #2
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d005      	beq.n	8016e3c <tcp_receive+0x934>
                inseg.len -= 1;
 8016e30:	4b78      	ldr	r3, [pc, #480]	@ (8017014 <tcp_receive+0xb0c>)
 8016e32:	891b      	ldrh	r3, [r3, #8]
 8016e34:	3b01      	subs	r3, #1
 8016e36:	b29a      	uxth	r2, r3
 8016e38:	4b76      	ldr	r3, [pc, #472]	@ (8017014 <tcp_receive+0xb0c>)
 8016e3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016e3c:	4b75      	ldr	r3, [pc, #468]	@ (8017014 <tcp_receive+0xb0c>)
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	4a74      	ldr	r2, [pc, #464]	@ (8017014 <tcp_receive+0xb0c>)
 8016e42:	8912      	ldrh	r2, [r2, #8]
 8016e44:	4611      	mov	r1, r2
 8016e46:	4618      	mov	r0, r3
 8016e48:	f7fb fdd8 	bl	80129fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016e4c:	4b71      	ldr	r3, [pc, #452]	@ (8017014 <tcp_receive+0xb0c>)
 8016e4e:	891c      	ldrh	r4, [r3, #8]
 8016e50:	4b70      	ldr	r3, [pc, #448]	@ (8017014 <tcp_receive+0xb0c>)
 8016e52:	68db      	ldr	r3, [r3, #12]
 8016e54:	899b      	ldrh	r3, [r3, #12]
 8016e56:	b29b      	uxth	r3, r3
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7fa fb2d 	bl	80114b8 <lwip_htons>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	b2db      	uxtb	r3, r3
 8016e62:	f003 0303 	and.w	r3, r3, #3
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d001      	beq.n	8016e6e <tcp_receive+0x966>
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	e000      	b.n	8016e70 <tcp_receive+0x968>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	4423      	add	r3, r4
 8016e72:	b29a      	uxth	r2, r3
 8016e74:	4b65      	ldr	r3, [pc, #404]	@ (801700c <tcp_receive+0xb04>)
 8016e76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016e78:	4b64      	ldr	r3, [pc, #400]	@ (801700c <tcp_receive+0xb04>)
 8016e7a:	881b      	ldrh	r3, [r3, #0]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	4b64      	ldr	r3, [pc, #400]	@ (8017010 <tcp_receive+0xb08>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	441a      	add	r2, r3
 8016e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	685b      	ldr	r3, [r3, #4]
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d006      	beq.n	8016e9c <tcp_receive+0x994>
 8016e8e:	4b62      	ldr	r3, [pc, #392]	@ (8017018 <tcp_receive+0xb10>)
 8016e90:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8016e94:	4961      	ldr	r1, [pc, #388]	@ (801701c <tcp_receive+0xb14>)
 8016e96:	4862      	ldr	r0, [pc, #392]	@ (8017020 <tcp_receive+0xb18>)
 8016e98:	f006 faf6 	bl	801d488 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8016ea0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8016ea2:	4b5a      	ldr	r3, [pc, #360]	@ (801700c <tcp_receive+0xb04>)
 8016ea4:	881b      	ldrh	r3, [r3, #0]
 8016ea6:	461a      	mov	r2, r3
 8016ea8:	4b59      	ldr	r3, [pc, #356]	@ (8017010 <tcp_receive+0xb08>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	441a      	add	r2, r3
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016eb6:	4b55      	ldr	r3, [pc, #340]	@ (801700c <tcp_receive+0xb04>)
 8016eb8:	881b      	ldrh	r3, [r3, #0]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d206      	bcs.n	8016ecc <tcp_receive+0x9c4>
 8016ebe:	4b56      	ldr	r3, [pc, #344]	@ (8017018 <tcp_receive+0xb10>)
 8016ec0:	f240 6207 	movw	r2, #1543	@ 0x607
 8016ec4:	4957      	ldr	r1, [pc, #348]	@ (8017024 <tcp_receive+0xb1c>)
 8016ec6:	4856      	ldr	r0, [pc, #344]	@ (8017020 <tcp_receive+0xb18>)
 8016ec8:	f006 fade 	bl	801d488 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016ed0:	4b4e      	ldr	r3, [pc, #312]	@ (801700c <tcp_receive+0xb04>)
 8016ed2:	881b      	ldrh	r3, [r3, #0]
 8016ed4:	1ad3      	subs	r3, r2, r3
 8016ed6:	b29a      	uxth	r2, r3
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f7fc fe93 	bl	8013c08 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8017014 <tcp_receive+0xb0c>)
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	891b      	ldrh	r3, [r3, #8]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d006      	beq.n	8016efa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016eec:	4b49      	ldr	r3, [pc, #292]	@ (8017014 <tcp_receive+0xb0c>)
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	4a4d      	ldr	r2, [pc, #308]	@ (8017028 <tcp_receive+0xb20>)
 8016ef2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016ef4:	4b47      	ldr	r3, [pc, #284]	@ (8017014 <tcp_receive+0xb0c>)
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016efa:	4b46      	ldr	r3, [pc, #280]	@ (8017014 <tcp_receive+0xb0c>)
 8016efc:	68db      	ldr	r3, [r3, #12]
 8016efe:	899b      	ldrh	r3, [r3, #12]
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7fa fad8 	bl	80114b8 <lwip_htons>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	b2db      	uxtb	r3, r3
 8016f0c:	f003 0301 	and.w	r3, r3, #1
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f000 80b8 	beq.w	8017086 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016f16:	4b45      	ldr	r3, [pc, #276]	@ (801702c <tcp_receive+0xb24>)
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	f043 0320 	orr.w	r3, r3, #32
 8016f1e:	b2da      	uxtb	r2, r3
 8016f20:	4b42      	ldr	r3, [pc, #264]	@ (801702c <tcp_receive+0xb24>)
 8016f22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016f24:	e0af      	b.n	8017086 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016f30:	68db      	ldr	r3, [r3, #12]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	4a36      	ldr	r2, [pc, #216]	@ (8017010 <tcp_receive+0xb08>)
 8016f36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	891b      	ldrh	r3, [r3, #8]
 8016f3c:	461c      	mov	r4, r3
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	899b      	ldrh	r3, [r3, #12]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	4618      	mov	r0, r3
 8016f48:	f7fa fab6 	bl	80114b8 <lwip_htons>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	b2db      	uxtb	r3, r3
 8016f50:	f003 0303 	and.w	r3, r3, #3
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d001      	beq.n	8016f5c <tcp_receive+0xa54>
 8016f58:	2301      	movs	r3, #1
 8016f5a:	e000      	b.n	8016f5e <tcp_receive+0xa56>
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	191a      	adds	r2, r3, r4
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f64:	441a      	add	r2, r3
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016f6e:	461c      	mov	r4, r3
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	891b      	ldrh	r3, [r3, #8]
 8016f74:	461d      	mov	r5, r3
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	68db      	ldr	r3, [r3, #12]
 8016f7a:	899b      	ldrh	r3, [r3, #12]
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fa fa9a 	bl	80114b8 <lwip_htons>
 8016f84:	4603      	mov	r3, r0
 8016f86:	b2db      	uxtb	r3, r3
 8016f88:	f003 0303 	and.w	r3, r3, #3
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d001      	beq.n	8016f94 <tcp_receive+0xa8c>
 8016f90:	2301      	movs	r3, #1
 8016f92:	e000      	b.n	8016f96 <tcp_receive+0xa8e>
 8016f94:	2300      	movs	r3, #0
 8016f96:	442b      	add	r3, r5
 8016f98:	429c      	cmp	r4, r3
 8016f9a:	d206      	bcs.n	8016faa <tcp_receive+0xaa2>
 8016f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8017018 <tcp_receive+0xb10>)
 8016f9e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8016fa2:	4923      	ldr	r1, [pc, #140]	@ (8017030 <tcp_receive+0xb28>)
 8016fa4:	481e      	ldr	r0, [pc, #120]	@ (8017020 <tcp_receive+0xb18>)
 8016fa6:	f006 fa6f 	bl	801d488 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	891b      	ldrh	r3, [r3, #8]
 8016fae:	461c      	mov	r4, r3
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	899b      	ldrh	r3, [r3, #12]
 8016fb6:	b29b      	uxth	r3, r3
 8016fb8:	4618      	mov	r0, r3
 8016fba:	f7fa fa7d 	bl	80114b8 <lwip_htons>
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	b2db      	uxtb	r3, r3
 8016fc2:	f003 0303 	and.w	r3, r3, #3
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d001      	beq.n	8016fce <tcp_receive+0xac6>
 8016fca:	2301      	movs	r3, #1
 8016fcc:	e000      	b.n	8016fd0 <tcp_receive+0xac8>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	1919      	adds	r1, r3, r4
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016fd6:	b28b      	uxth	r3, r1
 8016fd8:	1ad3      	subs	r3, r2, r3
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016fe0:	6878      	ldr	r0, [r7, #4]
 8016fe2:	f7fc fe11 	bl	8013c08 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016fe6:	68bb      	ldr	r3, [r7, #8]
 8016fe8:	685b      	ldr	r3, [r3, #4]
 8016fea:	891b      	ldrh	r3, [r3, #8]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d028      	beq.n	8017042 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8017028 <tcp_receive+0xb20>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d01d      	beq.n	8017034 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8017028 <tcp_receive+0xb20>)
 8016ffa:	681a      	ldr	r2, [r3, #0]
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	4619      	mov	r1, r3
 8017002:	4610      	mov	r0, r2
 8017004:	f7fb ff4e 	bl	8012ea4 <pbuf_cat>
 8017008:	e018      	b.n	801703c <tcp_receive+0xb34>
 801700a:	bf00      	nop
 801700c:	2000f3d6 	.word	0x2000f3d6
 8017010:	2000f3cc 	.word	0x2000f3cc
 8017014:	2000f3ac 	.word	0x2000f3ac
 8017018:	08021a54 	.word	0x08021a54
 801701c:	08021e34 	.word	0x08021e34
 8017020:	08021aa0 	.word	0x08021aa0
 8017024:	08021e70 	.word	0x08021e70
 8017028:	2000f3dc 	.word	0x2000f3dc
 801702c:	2000f3d9 	.word	0x2000f3d9
 8017030:	08021e90 	.word	0x08021e90
            } else {
              recv_data = cseg->p;
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	4a70      	ldr	r2, [pc, #448]	@ (80171fc <tcp_receive+0xcf4>)
 801703a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	2200      	movs	r2, #0
 8017040:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	68db      	ldr	r3, [r3, #12]
 8017046:	899b      	ldrh	r3, [r3, #12]
 8017048:	b29b      	uxth	r3, r3
 801704a:	4618      	mov	r0, r3
 801704c:	f7fa fa34 	bl	80114b8 <lwip_htons>
 8017050:	4603      	mov	r3, r0
 8017052:	b2db      	uxtb	r3, r3
 8017054:	f003 0301 	and.w	r3, r3, #1
 8017058:	2b00      	cmp	r3, #0
 801705a:	d00d      	beq.n	8017078 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801705c:	4b68      	ldr	r3, [pc, #416]	@ (8017200 <tcp_receive+0xcf8>)
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	f043 0320 	orr.w	r3, r3, #32
 8017064:	b2da      	uxtb	r2, r3
 8017066:	4b66      	ldr	r3, [pc, #408]	@ (8017200 <tcp_receive+0xcf8>)
 8017068:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	7d1b      	ldrb	r3, [r3, #20]
 801706e:	2b04      	cmp	r3, #4
 8017070:	d102      	bne.n	8017078 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	2207      	movs	r2, #7
 8017076:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	681a      	ldr	r2, [r3, #0]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017080:	68b8      	ldr	r0, [r7, #8]
 8017082:	f7fd fae8 	bl	8014656 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801708a:	2b00      	cmp	r3, #0
 801708c:	d008      	beq.n	80170a0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	685a      	ldr	r2, [r3, #4]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801709a:	429a      	cmp	r2, r3
 801709c:	f43f af43 	beq.w	8016f26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	8b5b      	ldrh	r3, [r3, #26]
 80170a4:	f003 0301 	and.w	r3, r3, #1
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d00e      	beq.n	80170ca <tcp_receive+0xbc2>
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	8b5b      	ldrh	r3, [r3, #26]
 80170b0:	f023 0301 	bic.w	r3, r3, #1
 80170b4:	b29a      	uxth	r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	835a      	strh	r2, [r3, #26]
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	8b5b      	ldrh	r3, [r3, #26]
 80170be:	f043 0302 	orr.w	r3, r3, #2
 80170c2:	b29a      	uxth	r2, r3
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80170c8:	e187      	b.n	80173da <tcp_receive+0xed2>
        tcp_ack(pcb);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	8b5b      	ldrh	r3, [r3, #26]
 80170ce:	f043 0301 	orr.w	r3, r3, #1
 80170d2:	b29a      	uxth	r2, r3
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80170d8:	e17f      	b.n	80173da <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d106      	bne.n	80170f0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80170e2:	4848      	ldr	r0, [pc, #288]	@ (8017204 <tcp_receive+0xcfc>)
 80170e4:	f7fd faee 	bl	80146c4 <tcp_seg_copy>
 80170e8:	4602      	mov	r2, r0
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80170ee:	e16c      	b.n	80173ca <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80170f0:	2300      	movs	r3, #0
 80170f2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80170fa:	e156      	b.n	80173aa <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80170fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170fe:	68db      	ldr	r3, [r3, #12]
 8017100:	685a      	ldr	r2, [r3, #4]
 8017102:	4b41      	ldr	r3, [pc, #260]	@ (8017208 <tcp_receive+0xd00>)
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	429a      	cmp	r2, r3
 8017108:	d11d      	bne.n	8017146 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801710a:	4b3e      	ldr	r3, [pc, #248]	@ (8017204 <tcp_receive+0xcfc>)
 801710c:	891a      	ldrh	r2, [r3, #8]
 801710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017110:	891b      	ldrh	r3, [r3, #8]
 8017112:	429a      	cmp	r2, r3
 8017114:	f240 814e 	bls.w	80173b4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017118:	483a      	ldr	r0, [pc, #232]	@ (8017204 <tcp_receive+0xcfc>)
 801711a:	f7fd fad3 	bl	80146c4 <tcp_seg_copy>
 801711e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	2b00      	cmp	r3, #0
 8017124:	f000 8148 	beq.w	80173b8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801712a:	2b00      	cmp	r3, #0
 801712c:	d003      	beq.n	8017136 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801712e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017130:	697a      	ldr	r2, [r7, #20]
 8017132:	601a      	str	r2, [r3, #0]
 8017134:	e002      	b.n	801713c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	697a      	ldr	r2, [r7, #20]
 801713a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801713c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801713e:	6978      	ldr	r0, [r7, #20]
 8017140:	f7ff f8de 	bl	8016300 <tcp_oos_insert_segment>
                }
                break;
 8017144:	e138      	b.n	80173b8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017148:	2b00      	cmp	r3, #0
 801714a:	d117      	bne.n	801717c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801714c:	4b2e      	ldr	r3, [pc, #184]	@ (8017208 <tcp_receive+0xd00>)
 801714e:	681a      	ldr	r2, [r3, #0]
 8017150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	685b      	ldr	r3, [r3, #4]
 8017156:	1ad3      	subs	r3, r2, r3
 8017158:	2b00      	cmp	r3, #0
 801715a:	da57      	bge.n	801720c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801715c:	4829      	ldr	r0, [pc, #164]	@ (8017204 <tcp_receive+0xcfc>)
 801715e:	f7fd fab1 	bl	80146c4 <tcp_seg_copy>
 8017162:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017164:	69bb      	ldr	r3, [r7, #24]
 8017166:	2b00      	cmp	r3, #0
 8017168:	f000 8128 	beq.w	80173bc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	69ba      	ldr	r2, [r7, #24]
 8017170:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017172:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017174:	69b8      	ldr	r0, [r7, #24]
 8017176:	f7ff f8c3 	bl	8016300 <tcp_oos_insert_segment>
                  }
                  break;
 801717a:	e11f      	b.n	80173bc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801717c:	4b22      	ldr	r3, [pc, #136]	@ (8017208 <tcp_receive+0xd00>)
 801717e:	681a      	ldr	r2, [r3, #0]
 8017180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017182:	68db      	ldr	r3, [r3, #12]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	1ad3      	subs	r3, r2, r3
 8017188:	3b01      	subs	r3, #1
 801718a:	2b00      	cmp	r3, #0
 801718c:	db3e      	blt.n	801720c <tcp_receive+0xd04>
 801718e:	4b1e      	ldr	r3, [pc, #120]	@ (8017208 <tcp_receive+0xd00>)
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017194:	68db      	ldr	r3, [r3, #12]
 8017196:	685b      	ldr	r3, [r3, #4]
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	3301      	adds	r3, #1
 801719c:	2b00      	cmp	r3, #0
 801719e:	dc35      	bgt.n	801720c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80171a0:	4818      	ldr	r0, [pc, #96]	@ (8017204 <tcp_receive+0xcfc>)
 80171a2:	f7fd fa8f 	bl	80146c4 <tcp_seg_copy>
 80171a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80171a8:	69fb      	ldr	r3, [r7, #28]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	f000 8108 	beq.w	80173c0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80171b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80171b8:	8912      	ldrh	r2, [r2, #8]
 80171ba:	441a      	add	r2, r3
 80171bc:	4b12      	ldr	r3, [pc, #72]	@ (8017208 <tcp_receive+0xd00>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	1ad3      	subs	r3, r2, r3
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	dd12      	ble.n	80171ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80171c6:	4b10      	ldr	r3, [pc, #64]	@ (8017208 <tcp_receive+0xd00>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	b29a      	uxth	r2, r3
 80171cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171ce:	68db      	ldr	r3, [r3, #12]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	1ad3      	subs	r3, r2, r3
 80171d6:	b29a      	uxth	r2, r3
 80171d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80171dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171de:	685a      	ldr	r2, [r3, #4]
 80171e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171e2:	891b      	ldrh	r3, [r3, #8]
 80171e4:	4619      	mov	r1, r3
 80171e6:	4610      	mov	r0, r2
 80171e8:	f7fb fc08 	bl	80129fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80171ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80171ee:	69fa      	ldr	r2, [r7, #28]
 80171f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80171f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80171f4:	69f8      	ldr	r0, [r7, #28]
 80171f6:	f7ff f883 	bl	8016300 <tcp_oos_insert_segment>
                  }
                  break;
 80171fa:	e0e1      	b.n	80173c0 <tcp_receive+0xeb8>
 80171fc:	2000f3dc 	.word	0x2000f3dc
 8017200:	2000f3d9 	.word	0x2000f3d9
 8017204:	2000f3ac 	.word	0x2000f3ac
 8017208:	2000f3cc 	.word	0x2000f3cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801720e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2b00      	cmp	r3, #0
 8017216:	f040 80c5 	bne.w	80173a4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801721a:	4b7f      	ldr	r3, [pc, #508]	@ (8017418 <tcp_receive+0xf10>)
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	685b      	ldr	r3, [r3, #4]
 8017224:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017226:	2b00      	cmp	r3, #0
 8017228:	f340 80bc 	ble.w	80173a4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801722c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801722e:	68db      	ldr	r3, [r3, #12]
 8017230:	899b      	ldrh	r3, [r3, #12]
 8017232:	b29b      	uxth	r3, r3
 8017234:	4618      	mov	r0, r3
 8017236:	f7fa f93f 	bl	80114b8 <lwip_htons>
 801723a:	4603      	mov	r3, r0
 801723c:	b2db      	uxtb	r3, r3
 801723e:	f003 0301 	and.w	r3, r3, #1
 8017242:	2b00      	cmp	r3, #0
 8017244:	f040 80be 	bne.w	80173c4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017248:	4874      	ldr	r0, [pc, #464]	@ (801741c <tcp_receive+0xf14>)
 801724a:	f7fd fa3b 	bl	80146c4 <tcp_seg_copy>
 801724e:	4602      	mov	r2, r0
 8017250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017252:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	2b00      	cmp	r3, #0
 801725a:	f000 80b5 	beq.w	80173c8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	685b      	ldr	r3, [r3, #4]
 8017264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017266:	8912      	ldrh	r2, [r2, #8]
 8017268:	441a      	add	r2, r3
 801726a:	4b6b      	ldr	r3, [pc, #428]	@ (8017418 <tcp_receive+0xf10>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	1ad3      	subs	r3, r2, r3
 8017270:	2b00      	cmp	r3, #0
 8017272:	dd12      	ble.n	801729a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017274:	4b68      	ldr	r3, [pc, #416]	@ (8017418 <tcp_receive+0xf10>)
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	b29a      	uxth	r2, r3
 801727a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801727c:	68db      	ldr	r3, [r3, #12]
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	b29b      	uxth	r3, r3
 8017282:	1ad3      	subs	r3, r2, r3
 8017284:	b29a      	uxth	r2, r3
 8017286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017288:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801728c:	685a      	ldr	r2, [r3, #4]
 801728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017290:	891b      	ldrh	r3, [r3, #8]
 8017292:	4619      	mov	r1, r3
 8017294:	4610      	mov	r0, r2
 8017296:	f7fb fbb1 	bl	80129fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801729a:	4b61      	ldr	r3, [pc, #388]	@ (8017420 <tcp_receive+0xf18>)
 801729c:	881b      	ldrh	r3, [r3, #0]
 801729e:	461a      	mov	r2, r3
 80172a0:	4b5d      	ldr	r3, [pc, #372]	@ (8017418 <tcp_receive+0xf10>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	441a      	add	r2, r3
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172aa:	6879      	ldr	r1, [r7, #4]
 80172ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80172ae:	440b      	add	r3, r1
 80172b0:	1ad3      	subs	r3, r2, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	f340 8088 	ble.w	80173c8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80172b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	68db      	ldr	r3, [r3, #12]
 80172be:	899b      	ldrh	r3, [r3, #12]
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	4618      	mov	r0, r3
 80172c4:	f7fa f8f8 	bl	80114b8 <lwip_htons>
 80172c8:	4603      	mov	r3, r0
 80172ca:	b2db      	uxtb	r3, r3
 80172cc:	f003 0301 	and.w	r3, r3, #1
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d021      	beq.n	8017318 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80172d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	68db      	ldr	r3, [r3, #12]
 80172da:	899b      	ldrh	r3, [r3, #12]
 80172dc:	b29b      	uxth	r3, r3
 80172de:	b21b      	sxth	r3, r3
 80172e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80172e4:	b21c      	sxth	r4, r3
 80172e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	68db      	ldr	r3, [r3, #12]
 80172ec:	899b      	ldrh	r3, [r3, #12]
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7fa f8e1 	bl	80114b8 <lwip_htons>
 80172f6:	4603      	mov	r3, r0
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80172fe:	b29b      	uxth	r3, r3
 8017300:	4618      	mov	r0, r3
 8017302:	f7fa f8d9 	bl	80114b8 <lwip_htons>
 8017306:	4603      	mov	r3, r0
 8017308:	b21b      	sxth	r3, r3
 801730a:	4323      	orrs	r3, r4
 801730c:	b21a      	sxth	r2, r3
 801730e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	68db      	ldr	r3, [r3, #12]
 8017314:	b292      	uxth	r2, r2
 8017316:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801731c:	b29a      	uxth	r2, r3
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017322:	4413      	add	r3, r2
 8017324:	b299      	uxth	r1, r3
 8017326:	4b3c      	ldr	r3, [pc, #240]	@ (8017418 <tcp_receive+0xf10>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	b29a      	uxth	r2, r3
 801732c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	1a8a      	subs	r2, r1, r2
 8017332:	b292      	uxth	r2, r2
 8017334:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	685a      	ldr	r2, [r3, #4]
 801733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	891b      	ldrh	r3, [r3, #8]
 8017342:	4619      	mov	r1, r3
 8017344:	4610      	mov	r0, r2
 8017346:	f7fb fb59 	bl	80129fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801734a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	891c      	ldrh	r4, [r3, #8]
 8017350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	899b      	ldrh	r3, [r3, #12]
 8017358:	b29b      	uxth	r3, r3
 801735a:	4618      	mov	r0, r3
 801735c:	f7fa f8ac 	bl	80114b8 <lwip_htons>
 8017360:	4603      	mov	r3, r0
 8017362:	b2db      	uxtb	r3, r3
 8017364:	f003 0303 	and.w	r3, r3, #3
 8017368:	2b00      	cmp	r3, #0
 801736a:	d001      	beq.n	8017370 <tcp_receive+0xe68>
 801736c:	2301      	movs	r3, #1
 801736e:	e000      	b.n	8017372 <tcp_receive+0xe6a>
 8017370:	2300      	movs	r3, #0
 8017372:	4423      	add	r3, r4
 8017374:	b29a      	uxth	r2, r3
 8017376:	4b2a      	ldr	r3, [pc, #168]	@ (8017420 <tcp_receive+0xf18>)
 8017378:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801737a:	4b29      	ldr	r3, [pc, #164]	@ (8017420 <tcp_receive+0xf18>)
 801737c:	881b      	ldrh	r3, [r3, #0]
 801737e:	461a      	mov	r2, r3
 8017380:	4b25      	ldr	r3, [pc, #148]	@ (8017418 <tcp_receive+0xf10>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	441a      	add	r2, r3
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801738a:	6879      	ldr	r1, [r7, #4]
 801738c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801738e:	440b      	add	r3, r1
 8017390:	429a      	cmp	r2, r3
 8017392:	d019      	beq.n	80173c8 <tcp_receive+0xec0>
 8017394:	4b23      	ldr	r3, [pc, #140]	@ (8017424 <tcp_receive+0xf1c>)
 8017396:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801739a:	4923      	ldr	r1, [pc, #140]	@ (8017428 <tcp_receive+0xf20>)
 801739c:	4823      	ldr	r0, [pc, #140]	@ (801742c <tcp_receive+0xf24>)
 801739e:	f006 f873 	bl	801d488 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80173a2:	e011      	b.n	80173c8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80173a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80173aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	f47f aea5 	bne.w	80170fc <tcp_receive+0xbf4>
 80173b2:	e00a      	b.n	80173ca <tcp_receive+0xec2>
                break;
 80173b4:	bf00      	nop
 80173b6:	e008      	b.n	80173ca <tcp_receive+0xec2>
                break;
 80173b8:	bf00      	nop
 80173ba:	e006      	b.n	80173ca <tcp_receive+0xec2>
                  break;
 80173bc:	bf00      	nop
 80173be:	e004      	b.n	80173ca <tcp_receive+0xec2>
                  break;
 80173c0:	bf00      	nop
 80173c2:	e002      	b.n	80173ca <tcp_receive+0xec2>
                  break;
 80173c4:	bf00      	nop
 80173c6:	e000      	b.n	80173ca <tcp_receive+0xec2>
                break;
 80173c8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f001 fe88 	bl	80190e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80173d0:	e003      	b.n	80173da <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80173d2:	6878      	ldr	r0, [r7, #4]
 80173d4:	f001 fe84 	bl	80190e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80173d8:	e01a      	b.n	8017410 <tcp_receive+0xf08>
 80173da:	e019      	b.n	8017410 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80173dc:	4b0e      	ldr	r3, [pc, #56]	@ (8017418 <tcp_receive+0xf10>)
 80173de:	681a      	ldr	r2, [r3, #0]
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	db0a      	blt.n	8017400 <tcp_receive+0xef8>
 80173ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017418 <tcp_receive+0xf10>)
 80173ec:	681a      	ldr	r2, [r3, #0]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173f2:	6879      	ldr	r1, [r7, #4]
 80173f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80173f6:	440b      	add	r3, r1
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	3301      	adds	r3, #1
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	dd07      	ble.n	8017410 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	8b5b      	ldrh	r3, [r3, #26]
 8017404:	f043 0302 	orr.w	r3, r3, #2
 8017408:	b29a      	uxth	r2, r3
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801740e:	e7ff      	b.n	8017410 <tcp_receive+0xf08>
 8017410:	bf00      	nop
 8017412:	3750      	adds	r7, #80	@ 0x50
 8017414:	46bd      	mov	sp, r7
 8017416:	bdb0      	pop	{r4, r5, r7, pc}
 8017418:	2000f3cc 	.word	0x2000f3cc
 801741c:	2000f3ac 	.word	0x2000f3ac
 8017420:	2000f3d6 	.word	0x2000f3d6
 8017424:	08021a54 	.word	0x08021a54
 8017428:	08021dfc 	.word	0x08021dfc
 801742c:	08021aa0 	.word	0x08021aa0

08017430 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017436:	4b15      	ldr	r3, [pc, #84]	@ (801748c <tcp_get_next_optbyte+0x5c>)
 8017438:	881b      	ldrh	r3, [r3, #0]
 801743a:	1c5a      	adds	r2, r3, #1
 801743c:	b291      	uxth	r1, r2
 801743e:	4a13      	ldr	r2, [pc, #76]	@ (801748c <tcp_get_next_optbyte+0x5c>)
 8017440:	8011      	strh	r1, [r2, #0]
 8017442:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017444:	4b12      	ldr	r3, [pc, #72]	@ (8017490 <tcp_get_next_optbyte+0x60>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d004      	beq.n	8017456 <tcp_get_next_optbyte+0x26>
 801744c:	4b11      	ldr	r3, [pc, #68]	@ (8017494 <tcp_get_next_optbyte+0x64>)
 801744e:	881b      	ldrh	r3, [r3, #0]
 8017450:	88fa      	ldrh	r2, [r7, #6]
 8017452:	429a      	cmp	r2, r3
 8017454:	d208      	bcs.n	8017468 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017456:	4b10      	ldr	r3, [pc, #64]	@ (8017498 <tcp_get_next_optbyte+0x68>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	3314      	adds	r3, #20
 801745c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801745e:	88fb      	ldrh	r3, [r7, #6]
 8017460:	683a      	ldr	r2, [r7, #0]
 8017462:	4413      	add	r3, r2
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	e00b      	b.n	8017480 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017468:	88fb      	ldrh	r3, [r7, #6]
 801746a:	b2da      	uxtb	r2, r3
 801746c:	4b09      	ldr	r3, [pc, #36]	@ (8017494 <tcp_get_next_optbyte+0x64>)
 801746e:	881b      	ldrh	r3, [r3, #0]
 8017470:	b2db      	uxtb	r3, r3
 8017472:	1ad3      	subs	r3, r2, r3
 8017474:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017476:	4b06      	ldr	r3, [pc, #24]	@ (8017490 <tcp_get_next_optbyte+0x60>)
 8017478:	681a      	ldr	r2, [r3, #0]
 801747a:	797b      	ldrb	r3, [r7, #5]
 801747c:	4413      	add	r3, r2
 801747e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017480:	4618      	mov	r0, r3
 8017482:	370c      	adds	r7, #12
 8017484:	46bd      	mov	sp, r7
 8017486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748a:	4770      	bx	lr
 801748c:	2000f3c8 	.word	0x2000f3c8
 8017490:	2000f3c4 	.word	0x2000f3c4
 8017494:	2000f3c2 	.word	0x2000f3c2
 8017498:	2000f3bc 	.word	0x2000f3bc

0801749c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d106      	bne.n	80174b8 <tcp_parseopt+0x1c>
 80174aa:	4b32      	ldr	r3, [pc, #200]	@ (8017574 <tcp_parseopt+0xd8>)
 80174ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80174b0:	4931      	ldr	r1, [pc, #196]	@ (8017578 <tcp_parseopt+0xdc>)
 80174b2:	4832      	ldr	r0, [pc, #200]	@ (801757c <tcp_parseopt+0xe0>)
 80174b4:	f005 ffe8 	bl	801d488 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80174b8:	4b31      	ldr	r3, [pc, #196]	@ (8017580 <tcp_parseopt+0xe4>)
 80174ba:	881b      	ldrh	r3, [r3, #0]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d056      	beq.n	801756e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80174c0:	4b30      	ldr	r3, [pc, #192]	@ (8017584 <tcp_parseopt+0xe8>)
 80174c2:	2200      	movs	r2, #0
 80174c4:	801a      	strh	r2, [r3, #0]
 80174c6:	e046      	b.n	8017556 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80174c8:	f7ff ffb2 	bl	8017430 <tcp_get_next_optbyte>
 80174cc:	4603      	mov	r3, r0
 80174ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80174d0:	7bfb      	ldrb	r3, [r7, #15]
 80174d2:	2b02      	cmp	r3, #2
 80174d4:	d006      	beq.n	80174e4 <tcp_parseopt+0x48>
 80174d6:	2b02      	cmp	r3, #2
 80174d8:	dc2a      	bgt.n	8017530 <tcp_parseopt+0x94>
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d042      	beq.n	8017564 <tcp_parseopt+0xc8>
 80174de:	2b01      	cmp	r3, #1
 80174e0:	d038      	beq.n	8017554 <tcp_parseopt+0xb8>
 80174e2:	e025      	b.n	8017530 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80174e4:	f7ff ffa4 	bl	8017430 <tcp_get_next_optbyte>
 80174e8:	4603      	mov	r3, r0
 80174ea:	2b04      	cmp	r3, #4
 80174ec:	d13c      	bne.n	8017568 <tcp_parseopt+0xcc>
 80174ee:	4b25      	ldr	r3, [pc, #148]	@ (8017584 <tcp_parseopt+0xe8>)
 80174f0:	881b      	ldrh	r3, [r3, #0]
 80174f2:	3301      	adds	r3, #1
 80174f4:	4a22      	ldr	r2, [pc, #136]	@ (8017580 <tcp_parseopt+0xe4>)
 80174f6:	8812      	ldrh	r2, [r2, #0]
 80174f8:	4293      	cmp	r3, r2
 80174fa:	da35      	bge.n	8017568 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80174fc:	f7ff ff98 	bl	8017430 <tcp_get_next_optbyte>
 8017500:	4603      	mov	r3, r0
 8017502:	021b      	lsls	r3, r3, #8
 8017504:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017506:	f7ff ff93 	bl	8017430 <tcp_get_next_optbyte>
 801750a:	4603      	mov	r3, r0
 801750c:	461a      	mov	r2, r3
 801750e:	89bb      	ldrh	r3, [r7, #12]
 8017510:	4313      	orrs	r3, r2
 8017512:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017514:	89bb      	ldrh	r3, [r7, #12]
 8017516:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801751a:	d804      	bhi.n	8017526 <tcp_parseopt+0x8a>
 801751c:	89bb      	ldrh	r3, [r7, #12]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d001      	beq.n	8017526 <tcp_parseopt+0x8a>
 8017522:	89ba      	ldrh	r2, [r7, #12]
 8017524:	e001      	b.n	801752a <tcp_parseopt+0x8e>
 8017526:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801752e:	e012      	b.n	8017556 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017530:	f7ff ff7e 	bl	8017430 <tcp_get_next_optbyte>
 8017534:	4603      	mov	r3, r0
 8017536:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017538:	7afb      	ldrb	r3, [r7, #11]
 801753a:	2b01      	cmp	r3, #1
 801753c:	d916      	bls.n	801756c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801753e:	7afb      	ldrb	r3, [r7, #11]
 8017540:	b29a      	uxth	r2, r3
 8017542:	4b10      	ldr	r3, [pc, #64]	@ (8017584 <tcp_parseopt+0xe8>)
 8017544:	881b      	ldrh	r3, [r3, #0]
 8017546:	4413      	add	r3, r2
 8017548:	b29b      	uxth	r3, r3
 801754a:	3b02      	subs	r3, #2
 801754c:	b29a      	uxth	r2, r3
 801754e:	4b0d      	ldr	r3, [pc, #52]	@ (8017584 <tcp_parseopt+0xe8>)
 8017550:	801a      	strh	r2, [r3, #0]
 8017552:	e000      	b.n	8017556 <tcp_parseopt+0xba>
          break;
 8017554:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017556:	4b0b      	ldr	r3, [pc, #44]	@ (8017584 <tcp_parseopt+0xe8>)
 8017558:	881a      	ldrh	r2, [r3, #0]
 801755a:	4b09      	ldr	r3, [pc, #36]	@ (8017580 <tcp_parseopt+0xe4>)
 801755c:	881b      	ldrh	r3, [r3, #0]
 801755e:	429a      	cmp	r2, r3
 8017560:	d3b2      	bcc.n	80174c8 <tcp_parseopt+0x2c>
 8017562:	e004      	b.n	801756e <tcp_parseopt+0xd2>
          return;
 8017564:	bf00      	nop
 8017566:	e002      	b.n	801756e <tcp_parseopt+0xd2>
            return;
 8017568:	bf00      	nop
 801756a:	e000      	b.n	801756e <tcp_parseopt+0xd2>
            return;
 801756c:	bf00      	nop
      }
    }
  }
}
 801756e:	3710      	adds	r7, #16
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}
 8017574:	08021a54 	.word	0x08021a54
 8017578:	08021eb8 	.word	0x08021eb8
 801757c:	08021aa0 	.word	0x08021aa0
 8017580:	2000f3c0 	.word	0x2000f3c0
 8017584:	2000f3c8 	.word	0x2000f3c8

08017588 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017588:	b480      	push	{r7}
 801758a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801758c:	4b05      	ldr	r3, [pc, #20]	@ (80175a4 <tcp_trigger_input_pcb_close+0x1c>)
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	f043 0310 	orr.w	r3, r3, #16
 8017594:	b2da      	uxtb	r2, r3
 8017596:	4b03      	ldr	r3, [pc, #12]	@ (80175a4 <tcp_trigger_input_pcb_close+0x1c>)
 8017598:	701a      	strb	r2, [r3, #0]
}
 801759a:	bf00      	nop
 801759c:	46bd      	mov	sp, r7
 801759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a2:	4770      	bx	lr
 80175a4:	2000f3d9 	.word	0x2000f3d9

080175a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	60f8      	str	r0, [r7, #12]
 80175b0:	60b9      	str	r1, [r7, #8]
 80175b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d00a      	beq.n	80175d0 <tcp_route+0x28>
 80175ba:	68fb      	ldr	r3, [r7, #12]
 80175bc:	7a1b      	ldrb	r3, [r3, #8]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d006      	beq.n	80175d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	7a1b      	ldrb	r3, [r3, #8]
 80175c6:	4618      	mov	r0, r3
 80175c8:	f7fb f810 	bl	80125ec <netif_get_by_index>
 80175cc:	4603      	mov	r3, r0
 80175ce:	e003      	b.n	80175d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80175d0:	6878      	ldr	r0, [r7, #4]
 80175d2:	f003 fe33 	bl	801b23c <ip4_route>
 80175d6:	4603      	mov	r3, r0
  }
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3710      	adds	r7, #16
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80175e0:	b590      	push	{r4, r7, lr}
 80175e2:	b087      	sub	sp, #28
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	60b9      	str	r1, [r7, #8]
 80175ea:	603b      	str	r3, [r7, #0]
 80175ec:	4613      	mov	r3, r2
 80175ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d105      	bne.n	8017602 <tcp_create_segment+0x22>
 80175f6:	4b43      	ldr	r3, [pc, #268]	@ (8017704 <tcp_create_segment+0x124>)
 80175f8:	22a3      	movs	r2, #163	@ 0xa3
 80175fa:	4943      	ldr	r1, [pc, #268]	@ (8017708 <tcp_create_segment+0x128>)
 80175fc:	4843      	ldr	r0, [pc, #268]	@ (801770c <tcp_create_segment+0x12c>)
 80175fe:	f005 ff43 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017602:	68bb      	ldr	r3, [r7, #8]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d105      	bne.n	8017614 <tcp_create_segment+0x34>
 8017608:	4b3e      	ldr	r3, [pc, #248]	@ (8017704 <tcp_create_segment+0x124>)
 801760a:	22a4      	movs	r2, #164	@ 0xa4
 801760c:	4940      	ldr	r1, [pc, #256]	@ (8017710 <tcp_create_segment+0x130>)
 801760e:	483f      	ldr	r0, [pc, #252]	@ (801770c <tcp_create_segment+0x12c>)
 8017610:	f005 ff3a 	bl	801d488 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017614:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017618:	009b      	lsls	r3, r3, #2
 801761a:	b2db      	uxtb	r3, r3
 801761c:	f003 0304 	and.w	r3, r3, #4
 8017620:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017622:	2003      	movs	r0, #3
 8017624:	f7fa fc56 	bl	8011ed4 <memp_malloc>
 8017628:	6138      	str	r0, [r7, #16]
 801762a:	693b      	ldr	r3, [r7, #16]
 801762c:	2b00      	cmp	r3, #0
 801762e:	d104      	bne.n	801763a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017630:	68b8      	ldr	r0, [r7, #8]
 8017632:	f7fb fb69 	bl	8012d08 <pbuf_free>
    return NULL;
 8017636:	2300      	movs	r3, #0
 8017638:	e060      	b.n	80176fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017640:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017642:	693b      	ldr	r3, [r7, #16]
 8017644:	2200      	movs	r2, #0
 8017646:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	68ba      	ldr	r2, [r7, #8]
 801764c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	891a      	ldrh	r2, [r3, #8]
 8017652:	7dfb      	ldrb	r3, [r7, #23]
 8017654:	b29b      	uxth	r3, r3
 8017656:	429a      	cmp	r2, r3
 8017658:	d205      	bcs.n	8017666 <tcp_create_segment+0x86>
 801765a:	4b2a      	ldr	r3, [pc, #168]	@ (8017704 <tcp_create_segment+0x124>)
 801765c:	22b0      	movs	r2, #176	@ 0xb0
 801765e:	492d      	ldr	r1, [pc, #180]	@ (8017714 <tcp_create_segment+0x134>)
 8017660:	482a      	ldr	r0, [pc, #168]	@ (801770c <tcp_create_segment+0x12c>)
 8017662:	f005 ff11 	bl	801d488 <iprintf>
  seg->len = p->tot_len - optlen;
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	891a      	ldrh	r2, [r3, #8]
 801766a:	7dfb      	ldrb	r3, [r7, #23]
 801766c:	b29b      	uxth	r3, r3
 801766e:	1ad3      	subs	r3, r2, r3
 8017670:	b29a      	uxth	r2, r3
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017676:	2114      	movs	r1, #20
 8017678:	68b8      	ldr	r0, [r7, #8]
 801767a:	f7fb faaf 	bl	8012bdc <pbuf_add_header>
 801767e:	4603      	mov	r3, r0
 8017680:	2b00      	cmp	r3, #0
 8017682:	d004      	beq.n	801768e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017684:	6938      	ldr	r0, [r7, #16]
 8017686:	f7fc ffe6 	bl	8014656 <tcp_seg_free>
    return NULL;
 801768a:	2300      	movs	r3, #0
 801768c:	e036      	b.n	80176fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	685b      	ldr	r3, [r3, #4]
 8017692:	685a      	ldr	r2, [r3, #4]
 8017694:	693b      	ldr	r3, [r7, #16]
 8017696:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	8ada      	ldrh	r2, [r3, #22]
 801769c:	693b      	ldr	r3, [r7, #16]
 801769e:	68dc      	ldr	r4, [r3, #12]
 80176a0:	4610      	mov	r0, r2
 80176a2:	f7f9 ff09 	bl	80114b8 <lwip_htons>
 80176a6:	4603      	mov	r3, r0
 80176a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	8b1a      	ldrh	r2, [r3, #24]
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	68dc      	ldr	r4, [r3, #12]
 80176b2:	4610      	mov	r0, r2
 80176b4:	f7f9 ff00 	bl	80114b8 <lwip_htons>
 80176b8:	4603      	mov	r3, r0
 80176ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	68dc      	ldr	r4, [r3, #12]
 80176c0:	6838      	ldr	r0, [r7, #0]
 80176c2:	f7f9 ff0e 	bl	80114e2 <lwip_htonl>
 80176c6:	4603      	mov	r3, r0
 80176c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80176ca:	7dfb      	ldrb	r3, [r7, #23]
 80176cc:	089b      	lsrs	r3, r3, #2
 80176ce:	b2db      	uxtb	r3, r3
 80176d0:	3305      	adds	r3, #5
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	031b      	lsls	r3, r3, #12
 80176d6:	b29a      	uxth	r2, r3
 80176d8:	79fb      	ldrb	r3, [r7, #7]
 80176da:	b29b      	uxth	r3, r3
 80176dc:	4313      	orrs	r3, r2
 80176de:	b29a      	uxth	r2, r3
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	68dc      	ldr	r4, [r3, #12]
 80176e4:	4610      	mov	r0, r2
 80176e6:	f7f9 fee7 	bl	80114b8 <lwip_htons>
 80176ea:	4603      	mov	r3, r0
 80176ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	68db      	ldr	r3, [r3, #12]
 80176f2:	2200      	movs	r2, #0
 80176f4:	749a      	strb	r2, [r3, #18]
 80176f6:	2200      	movs	r2, #0
 80176f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80176fa:	693b      	ldr	r3, [r7, #16]
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	371c      	adds	r7, #28
 8017700:	46bd      	mov	sp, r7
 8017702:	bd90      	pop	{r4, r7, pc}
 8017704:	08021ed4 	.word	0x08021ed4
 8017708:	08021f08 	.word	0x08021f08
 801770c:	08021f28 	.word	0x08021f28
 8017710:	08021f50 	.word	0x08021f50
 8017714:	08021f74 	.word	0x08021f74

08017718 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b086      	sub	sp, #24
 801771c:	af00      	add	r7, sp, #0
 801771e:	607b      	str	r3, [r7, #4]
 8017720:	4603      	mov	r3, r0
 8017722:	73fb      	strb	r3, [r7, #15]
 8017724:	460b      	mov	r3, r1
 8017726:	81bb      	strh	r3, [r7, #12]
 8017728:	4613      	mov	r3, r2
 801772a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801772c:	89bb      	ldrh	r3, [r7, #12]
 801772e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d105      	bne.n	8017742 <tcp_pbuf_prealloc+0x2a>
 8017736:	4b30      	ldr	r3, [pc, #192]	@ (80177f8 <tcp_pbuf_prealloc+0xe0>)
 8017738:	22e8      	movs	r2, #232	@ 0xe8
 801773a:	4930      	ldr	r1, [pc, #192]	@ (80177fc <tcp_pbuf_prealloc+0xe4>)
 801773c:	4830      	ldr	r0, [pc, #192]	@ (8017800 <tcp_pbuf_prealloc+0xe8>)
 801773e:	f005 fea3 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017742:	6a3b      	ldr	r3, [r7, #32]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d105      	bne.n	8017754 <tcp_pbuf_prealloc+0x3c>
 8017748:	4b2b      	ldr	r3, [pc, #172]	@ (80177f8 <tcp_pbuf_prealloc+0xe0>)
 801774a:	22e9      	movs	r2, #233	@ 0xe9
 801774c:	492d      	ldr	r1, [pc, #180]	@ (8017804 <tcp_pbuf_prealloc+0xec>)
 801774e:	482c      	ldr	r0, [pc, #176]	@ (8017800 <tcp_pbuf_prealloc+0xe8>)
 8017750:	f005 fe9a 	bl	801d488 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017754:	89ba      	ldrh	r2, [r7, #12]
 8017756:	897b      	ldrh	r3, [r7, #10]
 8017758:	429a      	cmp	r2, r3
 801775a:	d221      	bcs.n	80177a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801775c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017760:	f003 0302 	and.w	r3, r3, #2
 8017764:	2b00      	cmp	r3, #0
 8017766:	d111      	bne.n	801778c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017768:	6a3b      	ldr	r3, [r7, #32]
 801776a:	8b5b      	ldrh	r3, [r3, #26]
 801776c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017770:	2b00      	cmp	r3, #0
 8017772:	d115      	bne.n	80177a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017774:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017778:	2b00      	cmp	r3, #0
 801777a:	d007      	beq.n	801778c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801777c:	6a3b      	ldr	r3, [r7, #32]
 801777e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8017780:	2b00      	cmp	r3, #0
 8017782:	d103      	bne.n	801778c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017784:	6a3b      	ldr	r3, [r7, #32]
 8017786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8017788:	2b00      	cmp	r3, #0
 801778a:	d009      	beq.n	80177a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801778c:	89bb      	ldrh	r3, [r7, #12]
 801778e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017792:	f023 0203 	bic.w	r2, r3, #3
 8017796:	897b      	ldrh	r3, [r7, #10]
 8017798:	4293      	cmp	r3, r2
 801779a:	bf28      	it	cs
 801779c:	4613      	movcs	r3, r2
 801779e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80177a0:	8af9      	ldrh	r1, [r7, #22]
 80177a2:	7bfb      	ldrb	r3, [r7, #15]
 80177a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7fa ffc9 	bl	8012740 <pbuf_alloc>
 80177ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d101      	bne.n	80177ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80177b6:	2300      	movs	r3, #0
 80177b8:	e019      	b.n	80177ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d006      	beq.n	80177d0 <tcp_pbuf_prealloc+0xb8>
 80177c2:	4b0d      	ldr	r3, [pc, #52]	@ (80177f8 <tcp_pbuf_prealloc+0xe0>)
 80177c4:	f240 120b 	movw	r2, #267	@ 0x10b
 80177c8:	490f      	ldr	r1, [pc, #60]	@ (8017808 <tcp_pbuf_prealloc+0xf0>)
 80177ca:	480d      	ldr	r0, [pc, #52]	@ (8017800 <tcp_pbuf_prealloc+0xe8>)
 80177cc:	f005 fe5c 	bl	801d488 <iprintf>
  *oversize = p->len - length;
 80177d0:	693b      	ldr	r3, [r7, #16]
 80177d2:	895a      	ldrh	r2, [r3, #10]
 80177d4:	89bb      	ldrh	r3, [r7, #12]
 80177d6:	1ad3      	subs	r3, r2, r3
 80177d8:	b29a      	uxth	r2, r3
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	89ba      	ldrh	r2, [r7, #12]
 80177e2:	811a      	strh	r2, [r3, #8]
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	891a      	ldrh	r2, [r3, #8]
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	815a      	strh	r2, [r3, #10]
  return p;
 80177ec:	693b      	ldr	r3, [r7, #16]
}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3718      	adds	r7, #24
 80177f2:	46bd      	mov	sp, r7
 80177f4:	bd80      	pop	{r7, pc}
 80177f6:	bf00      	nop
 80177f8:	08021ed4 	.word	0x08021ed4
 80177fc:	08021f8c 	.word	0x08021f8c
 8017800:	08021f28 	.word	0x08021f28
 8017804:	08021fb0 	.word	0x08021fb0
 8017808:	08021fd0 	.word	0x08021fd0

0801780c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b082      	sub	sp, #8
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	460b      	mov	r3, r1
 8017816:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d106      	bne.n	801782c <tcp_write_checks+0x20>
 801781e:	4b33      	ldr	r3, [pc, #204]	@ (80178ec <tcp_write_checks+0xe0>)
 8017820:	f240 1233 	movw	r2, #307	@ 0x133
 8017824:	4932      	ldr	r1, [pc, #200]	@ (80178f0 <tcp_write_checks+0xe4>)
 8017826:	4833      	ldr	r0, [pc, #204]	@ (80178f4 <tcp_write_checks+0xe8>)
 8017828:	f005 fe2e 	bl	801d488 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	7d1b      	ldrb	r3, [r3, #20]
 8017830:	2b04      	cmp	r3, #4
 8017832:	d00e      	beq.n	8017852 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017838:	2b07      	cmp	r3, #7
 801783a:	d00a      	beq.n	8017852 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017840:	2b02      	cmp	r3, #2
 8017842:	d006      	beq.n	8017852 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017848:	2b03      	cmp	r3, #3
 801784a:	d002      	beq.n	8017852 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801784c:	f06f 030a 	mvn.w	r3, #10
 8017850:	e048      	b.n	80178e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017852:	887b      	ldrh	r3, [r7, #2]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d101      	bne.n	801785c <tcp_write_checks+0x50>
    return ERR_OK;
 8017858:	2300      	movs	r3, #0
 801785a:	e043      	b.n	80178e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017862:	887a      	ldrh	r2, [r7, #2]
 8017864:	429a      	cmp	r2, r3
 8017866:	d909      	bls.n	801787c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	8b5b      	ldrh	r3, [r3, #26]
 801786c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017870:	b29a      	uxth	r2, r3
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017876:	f04f 33ff 	mov.w	r3, #4294967295
 801787a:	e033      	b.n	80178e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017882:	2b08      	cmp	r3, #8
 8017884:	d909      	bls.n	801789a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	8b5b      	ldrh	r3, [r3, #26]
 801788a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801788e:	b29a      	uxth	r2, r3
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017894:	f04f 33ff 	mov.w	r3, #4294967295
 8017898:	e024      	b.n	80178e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d00f      	beq.n	80178c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d11a      	bne.n	80178e2 <tcp_write_checks+0xd6>
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d116      	bne.n	80178e2 <tcp_write_checks+0xd6>
 80178b4:	4b0d      	ldr	r3, [pc, #52]	@ (80178ec <tcp_write_checks+0xe0>)
 80178b6:	f240 1255 	movw	r2, #341	@ 0x155
 80178ba:	490f      	ldr	r1, [pc, #60]	@ (80178f8 <tcp_write_checks+0xec>)
 80178bc:	480d      	ldr	r0, [pc, #52]	@ (80178f4 <tcp_write_checks+0xe8>)
 80178be:	f005 fde3 	bl	801d488 <iprintf>
 80178c2:	e00e      	b.n	80178e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d103      	bne.n	80178d4 <tcp_write_checks+0xc8>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d006      	beq.n	80178e2 <tcp_write_checks+0xd6>
 80178d4:	4b05      	ldr	r3, [pc, #20]	@ (80178ec <tcp_write_checks+0xe0>)
 80178d6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80178da:	4908      	ldr	r1, [pc, #32]	@ (80178fc <tcp_write_checks+0xf0>)
 80178dc:	4805      	ldr	r0, [pc, #20]	@ (80178f4 <tcp_write_checks+0xe8>)
 80178de:	f005 fdd3 	bl	801d488 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80178e2:	2300      	movs	r3, #0
}
 80178e4:	4618      	mov	r0, r3
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	08021ed4 	.word	0x08021ed4
 80178f0:	08021fe4 	.word	0x08021fe4
 80178f4:	08021f28 	.word	0x08021f28
 80178f8:	08022004 	.word	0x08022004
 80178fc:	08022040 	.word	0x08022040

08017900 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017900:	b590      	push	{r4, r7, lr}
 8017902:	b09b      	sub	sp, #108	@ 0x6c
 8017904:	af04      	add	r7, sp, #16
 8017906:	60f8      	str	r0, [r7, #12]
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	4611      	mov	r1, r2
 801790c:	461a      	mov	r2, r3
 801790e:	460b      	mov	r3, r1
 8017910:	80fb      	strh	r3, [r7, #6]
 8017912:	4613      	mov	r3, r2
 8017914:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017916:	2300      	movs	r3, #0
 8017918:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801791a:	2300      	movs	r3, #0
 801791c:	653b      	str	r3, [r7, #80]	@ 0x50
 801791e:	2300      	movs	r3, #0
 8017920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017922:	2300      	movs	r3, #0
 8017924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017926:	2300      	movs	r3, #0
 8017928:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801792a:	2300      	movs	r3, #0
 801792c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017930:	2300      	movs	r3, #0
 8017932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017936:	2300      	movs	r3, #0
 8017938:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801793a:	2300      	movs	r3, #0
 801793c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801793e:	2300      	movs	r3, #0
 8017940:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017942:	68fb      	ldr	r3, [r7, #12]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d109      	bne.n	801795c <tcp_write+0x5c>
 8017948:	4ba4      	ldr	r3, [pc, #656]	@ (8017bdc <tcp_write+0x2dc>)
 801794a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801794e:	49a4      	ldr	r1, [pc, #656]	@ (8017be0 <tcp_write+0x2e0>)
 8017950:	48a4      	ldr	r0, [pc, #656]	@ (8017be4 <tcp_write+0x2e4>)
 8017952:	f005 fd99 	bl	801d488 <iprintf>
 8017956:	f06f 030f 	mvn.w	r3, #15
 801795a:	e32a      	b.n	8017fb2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017962:	085b      	lsrs	r3, r3, #1
 8017964:	b29a      	uxth	r2, r3
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801796a:	4293      	cmp	r3, r2
 801796c:	bf28      	it	cs
 801796e:	4613      	movcs	r3, r2
 8017970:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017974:	2b00      	cmp	r3, #0
 8017976:	d102      	bne.n	801797e <tcp_write+0x7e>
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801797c:	e000      	b.n	8017980 <tcp_write+0x80>
 801797e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017980:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d109      	bne.n	801799c <tcp_write+0x9c>
 8017988:	4b94      	ldr	r3, [pc, #592]	@ (8017bdc <tcp_write+0x2dc>)
 801798a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801798e:	4996      	ldr	r1, [pc, #600]	@ (8017be8 <tcp_write+0x2e8>)
 8017990:	4894      	ldr	r0, [pc, #592]	@ (8017be4 <tcp_write+0x2e4>)
 8017992:	f005 fd79 	bl	801d488 <iprintf>
 8017996:	f06f 030f 	mvn.w	r3, #15
 801799a:	e30a      	b.n	8017fb2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801799c:	88fb      	ldrh	r3, [r7, #6]
 801799e:	4619      	mov	r1, r3
 80179a0:	68f8      	ldr	r0, [r7, #12]
 80179a2:	f7ff ff33 	bl	801780c <tcp_write_checks>
 80179a6:	4603      	mov	r3, r0
 80179a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80179ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d002      	beq.n	80179ba <tcp_write+0xba>
    return err;
 80179b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80179b8:	e2fb      	b.n	8017fb2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80179c0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80179c4:	2300      	movs	r3, #0
 80179c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	f000 80f6 	beq.w	8017bc0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80179da:	e002      	b.n	80179e2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80179dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80179e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d1f8      	bne.n	80179dc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80179ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179ec:	7a9b      	ldrb	r3, [r3, #10]
 80179ee:	009b      	lsls	r3, r3, #2
 80179f0:	b29b      	uxth	r3, r3
 80179f2:	f003 0304 	and.w	r3, r3, #4
 80179f6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80179f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80179fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80179fc:	891b      	ldrh	r3, [r3, #8]
 80179fe:	4619      	mov	r1, r3
 8017a00:	8c3b      	ldrh	r3, [r7, #32]
 8017a02:	440b      	add	r3, r1
 8017a04:	429a      	cmp	r2, r3
 8017a06:	da06      	bge.n	8017a16 <tcp_write+0x116>
 8017a08:	4b74      	ldr	r3, [pc, #464]	@ (8017bdc <tcp_write+0x2dc>)
 8017a0a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017a0e:	4977      	ldr	r1, [pc, #476]	@ (8017bec <tcp_write+0x2ec>)
 8017a10:	4874      	ldr	r0, [pc, #464]	@ (8017be4 <tcp_write+0x2e4>)
 8017a12:	f005 fd39 	bl	801d488 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a18:	891a      	ldrh	r2, [r3, #8]
 8017a1a:	8c3b      	ldrh	r3, [r7, #32]
 8017a1c:	4413      	add	r3, r2
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017a22:	1ad3      	subs	r3, r2, r3
 8017a24:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017a2c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017a2e:	8a7b      	ldrh	r3, [r7, #18]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d026      	beq.n	8017a82 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017a34:	8a7b      	ldrh	r3, [r7, #18]
 8017a36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d206      	bcs.n	8017a4a <tcp_write+0x14a>
 8017a3c:	4b67      	ldr	r3, [pc, #412]	@ (8017bdc <tcp_write+0x2dc>)
 8017a3e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017a42:	496b      	ldr	r1, [pc, #428]	@ (8017bf0 <tcp_write+0x2f0>)
 8017a44:	4867      	ldr	r0, [pc, #412]	@ (8017be4 <tcp_write+0x2e4>)
 8017a46:	f005 fd1f 	bl	801d488 <iprintf>
      seg = last_unsent;
 8017a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017a4e:	8a7b      	ldrh	r3, [r7, #18]
 8017a50:	88fa      	ldrh	r2, [r7, #6]
 8017a52:	4293      	cmp	r3, r2
 8017a54:	bf28      	it	cs
 8017a56:	4613      	movcs	r3, r2
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a5c:	4293      	cmp	r3, r2
 8017a5e:	bf28      	it	cs
 8017a60:	4613      	movcs	r3, r2
 8017a62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017a64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017a68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017a6a:	4413      	add	r3, r2
 8017a6c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017a70:	8a7a      	ldrh	r2, [r7, #18]
 8017a72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017a74:	1ad3      	subs	r3, r2, r3
 8017a76:	b29b      	uxth	r3, r3
 8017a78:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017a7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017a7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017a7e:	1ad3      	subs	r3, r2, r3
 8017a80:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017a82:	8a7b      	ldrh	r3, [r7, #18]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d00b      	beq.n	8017aa0 <tcp_write+0x1a0>
 8017a88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017a8c:	88fb      	ldrh	r3, [r7, #6]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d006      	beq.n	8017aa0 <tcp_write+0x1a0>
 8017a92:	4b52      	ldr	r3, [pc, #328]	@ (8017bdc <tcp_write+0x2dc>)
 8017a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a98:	4956      	ldr	r1, [pc, #344]	@ (8017bf4 <tcp_write+0x2f4>)
 8017a9a:	4852      	ldr	r0, [pc, #328]	@ (8017be4 <tcp_write+0x2e4>)
 8017a9c:	f005 fcf4 	bl	801d488 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017aa4:	88fb      	ldrh	r3, [r7, #6]
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	f080 8167 	bcs.w	8017d7a <tcp_write+0x47a>
 8017aac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 8163 	beq.w	8017d7a <tcp_write+0x47a>
 8017ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ab6:	891b      	ldrh	r3, [r3, #8]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f000 815e 	beq.w	8017d7a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017abe:	88fa      	ldrh	r2, [r7, #6]
 8017ac0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ac4:	1ad2      	subs	r2, r2, r3
 8017ac6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017ac8:	4293      	cmp	r3, r2
 8017aca:	bfa8      	it	ge
 8017acc:	4613      	movge	r3, r2
 8017ace:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017ad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017ad4:	797b      	ldrb	r3, [r7, #5]
 8017ad6:	f003 0301 	and.w	r3, r3, #1
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d027      	beq.n	8017b2e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017ade:	f107 0012 	add.w	r0, r7, #18
 8017ae2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017ae4:	8bf9      	ldrh	r1, [r7, #30]
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	9302      	str	r3, [sp, #8]
 8017aea:	797b      	ldrb	r3, [r7, #5]
 8017aec:	9301      	str	r3, [sp, #4]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	9300      	str	r3, [sp, #0]
 8017af2:	4603      	mov	r3, r0
 8017af4:	2000      	movs	r0, #0
 8017af6:	f7ff fe0f 	bl	8017718 <tcp_pbuf_prealloc>
 8017afa:	6578      	str	r0, [r7, #84]	@ 0x54
 8017afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	f000 8225 	beq.w	8017f4e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b06:	6858      	ldr	r0, [r3, #4]
 8017b08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b0c:	68ba      	ldr	r2, [r7, #8]
 8017b0e:	4413      	add	r3, r2
 8017b10:	8bfa      	ldrh	r2, [r7, #30]
 8017b12:	4619      	mov	r1, r3
 8017b14:	f005 fe45 	bl	801d7a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017b18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017b1a:	f7fb f983 	bl	8012e24 <pbuf_clen>
 8017b1e:	4603      	mov	r3, r0
 8017b20:	461a      	mov	r2, r3
 8017b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017b26:	4413      	add	r3, r2
 8017b28:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017b2c:	e041      	b.n	8017bb2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b30:	685b      	ldr	r3, [r3, #4]
 8017b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b34:	e002      	b.n	8017b3c <tcp_write+0x23c>
 8017b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d1f8      	bne.n	8017b36 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b46:	7b1b      	ldrb	r3, [r3, #12]
 8017b48:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d115      	bne.n	8017b7c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b52:	685b      	ldr	r3, [r3, #4]
 8017b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017b56:	8952      	ldrh	r2, [r2, #10]
 8017b58:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017b5a:	68ba      	ldr	r2, [r7, #8]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d10d      	bne.n	8017b7c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017b60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d006      	beq.n	8017b76 <tcp_write+0x276>
 8017b68:	4b1c      	ldr	r3, [pc, #112]	@ (8017bdc <tcp_write+0x2dc>)
 8017b6a:	f240 2231 	movw	r2, #561	@ 0x231
 8017b6e:	4922      	ldr	r1, [pc, #136]	@ (8017bf8 <tcp_write+0x2f8>)
 8017b70:	481c      	ldr	r0, [pc, #112]	@ (8017be4 <tcp_write+0x2e4>)
 8017b72:	f005 fc89 	bl	801d488 <iprintf>
          extendlen = seglen;
 8017b76:	8bfb      	ldrh	r3, [r7, #30]
 8017b78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017b7a:	e01a      	b.n	8017bb2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017b7c:	8bfb      	ldrh	r3, [r7, #30]
 8017b7e:	2201      	movs	r2, #1
 8017b80:	4619      	mov	r1, r3
 8017b82:	2000      	movs	r0, #0
 8017b84:	f7fa fddc 	bl	8012740 <pbuf_alloc>
 8017b88:	6578      	str	r0, [r7, #84]	@ 0x54
 8017b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	f000 81e0 	beq.w	8017f52 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b96:	68ba      	ldr	r2, [r7, #8]
 8017b98:	441a      	add	r2, r3
 8017b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017b9c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017b9e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017ba0:	f7fb f940 	bl	8012e24 <pbuf_clen>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017bac:	4413      	add	r3, r2
 8017bae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017bb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017bb6:	8bfb      	ldrh	r3, [r7, #30]
 8017bb8:	4413      	add	r3, r2
 8017bba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017bbe:	e0dc      	b.n	8017d7a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	f000 80d7 	beq.w	8017d7a <tcp_write+0x47a>
 8017bcc:	4b03      	ldr	r3, [pc, #12]	@ (8017bdc <tcp_write+0x2dc>)
 8017bce:	f240 224a 	movw	r2, #586	@ 0x24a
 8017bd2:	490a      	ldr	r1, [pc, #40]	@ (8017bfc <tcp_write+0x2fc>)
 8017bd4:	4803      	ldr	r0, [pc, #12]	@ (8017be4 <tcp_write+0x2e4>)
 8017bd6:	f005 fc57 	bl	801d488 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017bda:	e0ce      	b.n	8017d7a <tcp_write+0x47a>
 8017bdc:	08021ed4 	.word	0x08021ed4
 8017be0:	08022074 	.word	0x08022074
 8017be4:	08021f28 	.word	0x08021f28
 8017be8:	0802208c 	.word	0x0802208c
 8017bec:	080220c0 	.word	0x080220c0
 8017bf0:	080220d8 	.word	0x080220d8
 8017bf4:	080220f8 	.word	0x080220f8
 8017bf8:	08022118 	.word	0x08022118
 8017bfc:	08022144 	.word	0x08022144
    struct pbuf *p;
    u16_t left = len - pos;
 8017c00:	88fa      	ldrh	r2, [r7, #6]
 8017c02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c06:	1ad3      	subs	r3, r2, r3
 8017c08:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017c0a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017c16:	8b7a      	ldrh	r2, [r7, #26]
 8017c18:	8bbb      	ldrh	r3, [r7, #28]
 8017c1a:	4293      	cmp	r3, r2
 8017c1c:	bf28      	it	cs
 8017c1e:	4613      	movcs	r3, r2
 8017c20:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017c22:	797b      	ldrb	r3, [r7, #5]
 8017c24:	f003 0301 	and.w	r3, r3, #1
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d036      	beq.n	8017c9a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017c2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c30:	b29a      	uxth	r2, r3
 8017c32:	8b3b      	ldrh	r3, [r7, #24]
 8017c34:	4413      	add	r3, r2
 8017c36:	b299      	uxth	r1, r3
 8017c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	bf0c      	ite	eq
 8017c3e:	2301      	moveq	r3, #1
 8017c40:	2300      	movne	r3, #0
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	f107 0012 	add.w	r0, r7, #18
 8017c48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017c4a:	9302      	str	r3, [sp, #8]
 8017c4c:	797b      	ldrb	r3, [r7, #5]
 8017c4e:	9301      	str	r3, [sp, #4]
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	4603      	mov	r3, r0
 8017c56:	2036      	movs	r0, #54	@ 0x36
 8017c58:	f7ff fd5e 	bl	8017718 <tcp_pbuf_prealloc>
 8017c5c:	6338      	str	r0, [r7, #48]	@ 0x30
 8017c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	f000 8178 	beq.w	8017f56 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c68:	895b      	ldrh	r3, [r3, #10]
 8017c6a:	8b3a      	ldrh	r2, [r7, #24]
 8017c6c:	429a      	cmp	r2, r3
 8017c6e:	d906      	bls.n	8017c7e <tcp_write+0x37e>
 8017c70:	4b8c      	ldr	r3, [pc, #560]	@ (8017ea4 <tcp_write+0x5a4>)
 8017c72:	f240 2266 	movw	r2, #614	@ 0x266
 8017c76:	498c      	ldr	r1, [pc, #560]	@ (8017ea8 <tcp_write+0x5a8>)
 8017c78:	488c      	ldr	r0, [pc, #560]	@ (8017eac <tcp_write+0x5ac>)
 8017c7a:	f005 fc05 	bl	801d488 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c80:	685a      	ldr	r2, [r3, #4]
 8017c82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017c86:	18d0      	adds	r0, r2, r3
 8017c88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c8c:	68ba      	ldr	r2, [r7, #8]
 8017c8e:	4413      	add	r3, r2
 8017c90:	8b3a      	ldrh	r2, [r7, #24]
 8017c92:	4619      	mov	r1, r3
 8017c94:	f005 fd85 	bl	801d7a2 <memcpy>
 8017c98:	e02f      	b.n	8017cfa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017c9a:	8a7b      	ldrh	r3, [r7, #18]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d006      	beq.n	8017cae <tcp_write+0x3ae>
 8017ca0:	4b80      	ldr	r3, [pc, #512]	@ (8017ea4 <tcp_write+0x5a4>)
 8017ca2:	f240 2271 	movw	r2, #625	@ 0x271
 8017ca6:	4982      	ldr	r1, [pc, #520]	@ (8017eb0 <tcp_write+0x5b0>)
 8017ca8:	4880      	ldr	r0, [pc, #512]	@ (8017eac <tcp_write+0x5ac>)
 8017caa:	f005 fbed 	bl	801d488 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017cae:	8b3b      	ldrh	r3, [r7, #24]
 8017cb0:	2201      	movs	r2, #1
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	2036      	movs	r0, #54	@ 0x36
 8017cb6:	f7fa fd43 	bl	8012740 <pbuf_alloc>
 8017cba:	6178      	str	r0, [r7, #20]
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	f000 814b 	beq.w	8017f5a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017cc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017cc8:	68ba      	ldr	r2, [r7, #8]
 8017cca:	441a      	add	r2, r3
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017cd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017cd4:	b29b      	uxth	r3, r3
 8017cd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017cda:	4619      	mov	r1, r3
 8017cdc:	2036      	movs	r0, #54	@ 0x36
 8017cde:	f7fa fd2f 	bl	8012740 <pbuf_alloc>
 8017ce2:	6338      	str	r0, [r7, #48]	@ 0x30
 8017ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d103      	bne.n	8017cf2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017cea:	6978      	ldr	r0, [r7, #20]
 8017cec:	f7fb f80c 	bl	8012d08 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017cf0:	e136      	b.n	8017f60 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017cf2:	6979      	ldr	r1, [r7, #20]
 8017cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017cf6:	f7fb f8d5 	bl	8012ea4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017cfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017cfc:	f7fb f892 	bl	8012e24 <pbuf_clen>
 8017d00:	4603      	mov	r3, r0
 8017d02:	461a      	mov	r2, r3
 8017d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d08:	4413      	add	r3, r2
 8017d0a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017d0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d12:	2b09      	cmp	r3, #9
 8017d14:	d903      	bls.n	8017d1e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017d18:	f7fa fff6 	bl	8012d08 <pbuf_free>
      goto memerr;
 8017d1c:	e120      	b.n	8017f60 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017d22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d26:	441a      	add	r2, r3
 8017d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d2c:	9300      	str	r3, [sp, #0]
 8017d2e:	4613      	mov	r3, r2
 8017d30:	2200      	movs	r2, #0
 8017d32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017d34:	68f8      	ldr	r0, [r7, #12]
 8017d36:	f7ff fc53 	bl	80175e0 <tcp_create_segment>
 8017d3a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	f000 810d 	beq.w	8017f5e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d102      	bne.n	8017d50 <tcp_write+0x450>
      queue = seg;
 8017d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8017d4e:	e00c      	b.n	8017d6a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d106      	bne.n	8017d64 <tcp_write+0x464>
 8017d56:	4b53      	ldr	r3, [pc, #332]	@ (8017ea4 <tcp_write+0x5a4>)
 8017d58:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017d5c:	4955      	ldr	r1, [pc, #340]	@ (8017eb4 <tcp_write+0x5b4>)
 8017d5e:	4853      	ldr	r0, [pc, #332]	@ (8017eac <tcp_write+0x5ac>)
 8017d60:	f005 fb92 	bl	801d488 <iprintf>
      prev_seg->next = seg;
 8017d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d68:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d6c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017d6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d72:	8b3b      	ldrh	r3, [r7, #24]
 8017d74:	4413      	add	r3, r2
 8017d76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017d7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d7e:	88fb      	ldrh	r3, [r7, #6]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	f4ff af3d 	bcc.w	8017c00 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017d86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d02c      	beq.n	8017de6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017d92:	e01e      	b.n	8017dd2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d96:	891a      	ldrh	r2, [r3, #8]
 8017d98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d9a:	4413      	add	r3, r2
 8017d9c:	b29a      	uxth	r2, r3
 8017d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017da0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d110      	bne.n	8017dcc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017db0:	8952      	ldrh	r2, [r2, #10]
 8017db2:	4413      	add	r3, r2
 8017db4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017db6:	68b9      	ldr	r1, [r7, #8]
 8017db8:	4618      	mov	r0, r3
 8017dba:	f005 fcf2 	bl	801d7a2 <memcpy>
        p->len += oversize_used;
 8017dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dc0:	895a      	ldrh	r2, [r3, #10]
 8017dc2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017dc4:	4413      	add	r3, r2
 8017dc6:	b29a      	uxth	r2, r3
 8017dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dca:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d1dd      	bne.n	8017d94 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017dda:	891a      	ldrh	r2, [r3, #8]
 8017ddc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017dde:	4413      	add	r3, r2
 8017de0:	b29a      	uxth	r2, r3
 8017de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017de4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017de6:	8a7a      	ldrh	r2, [r7, #18]
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d018      	beq.n	8017e26 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d106      	bne.n	8017e08 <tcp_write+0x508>
 8017dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8017ea4 <tcp_write+0x5a4>)
 8017dfc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8017e00:	492d      	ldr	r1, [pc, #180]	@ (8017eb8 <tcp_write+0x5b8>)
 8017e02:	482a      	ldr	r0, [pc, #168]	@ (8017eac <tcp_write+0x5ac>)
 8017e04:	f005 fb40 	bl	801d488 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017e08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f7fb f848 	bl	8012ea4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017e14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e16:	891a      	ldrh	r2, [r3, #8]
 8017e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e1a:	891b      	ldrh	r3, [r3, #8]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	b29a      	uxth	r2, r3
 8017e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e22:	811a      	strh	r2, [r3, #8]
 8017e24:	e037      	b.n	8017e96 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017e26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d034      	beq.n	8017e96 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017e2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d003      	beq.n	8017e3a <tcp_write+0x53a>
 8017e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d106      	bne.n	8017e48 <tcp_write+0x548>
 8017e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8017ea4 <tcp_write+0x5a4>)
 8017e3c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8017e40:	491e      	ldr	r1, [pc, #120]	@ (8017ebc <tcp_write+0x5bc>)
 8017e42:	481a      	ldr	r0, [pc, #104]	@ (8017eac <tcp_write+0x5ac>)
 8017e44:	f005 fb20 	bl	801d488 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e4e:	e009      	b.n	8017e64 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e52:	891a      	ldrh	r2, [r3, #8]
 8017e54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e56:	4413      	add	r3, r2
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e5c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d1f1      	bne.n	8017e50 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e6e:	891a      	ldrh	r2, [r3, #8]
 8017e70:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e72:	4413      	add	r3, r2
 8017e74:	b29a      	uxth	r2, r3
 8017e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e78:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e7c:	895a      	ldrh	r2, [r3, #10]
 8017e7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e80:	4413      	add	r3, r2
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e86:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e8a:	891a      	ldrh	r2, [r3, #8]
 8017e8c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017e8e:	4413      	add	r3, r2
 8017e90:	b29a      	uxth	r2, r3
 8017e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e94:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8017e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d111      	bne.n	8017ec0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017ea0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017ea2:	e010      	b.n	8017ec6 <tcp_write+0x5c6>
 8017ea4:	08021ed4 	.word	0x08021ed4
 8017ea8:	08022174 	.word	0x08022174
 8017eac:	08021f28 	.word	0x08021f28
 8017eb0:	080221b4 	.word	0x080221b4
 8017eb4:	080221c4 	.word	0x080221c4
 8017eb8:	080221d8 	.word	0x080221d8
 8017ebc:	08022210 	.word	0x08022210
  } else {
    last_unsent->next = queue;
 8017ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017ec4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017eca:	88fb      	ldrh	r3, [r7, #6]
 8017ecc:	441a      	add	r2, r3
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017ed8:	88fb      	ldrh	r3, [r7, #6]
 8017eda:	1ad3      	subs	r3, r2, r3
 8017edc:	b29a      	uxth	r2, r3
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017eea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d00e      	beq.n	8017f16 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d10a      	bne.n	8017f16 <tcp_write+0x616>
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d106      	bne.n	8017f16 <tcp_write+0x616>
 8017f08:	4b2c      	ldr	r3, [pc, #176]	@ (8017fbc <tcp_write+0x6bc>)
 8017f0a:	f240 3212 	movw	r2, #786	@ 0x312
 8017f0e:	492c      	ldr	r1, [pc, #176]	@ (8017fc0 <tcp_write+0x6c0>)
 8017f10:	482c      	ldr	r0, [pc, #176]	@ (8017fc4 <tcp_write+0x6c4>)
 8017f12:	f005 fab9 	bl	801d488 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8017f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d016      	beq.n	8017f4a <tcp_write+0x64a>
 8017f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f1e:	68db      	ldr	r3, [r3, #12]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d012      	beq.n	8017f4a <tcp_write+0x64a>
 8017f24:	797b      	ldrb	r3, [r7, #5]
 8017f26:	f003 0302 	and.w	r3, r3, #2
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d10d      	bne.n	8017f4a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f30:	68db      	ldr	r3, [r3, #12]
 8017f32:	899b      	ldrh	r3, [r3, #12]
 8017f34:	b29c      	uxth	r4, r3
 8017f36:	2008      	movs	r0, #8
 8017f38:	f7f9 fabe 	bl	80114b8 <lwip_htons>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	461a      	mov	r2, r3
 8017f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f42:	68db      	ldr	r3, [r3, #12]
 8017f44:	4322      	orrs	r2, r4
 8017f46:	b292      	uxth	r2, r2
 8017f48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	e031      	b.n	8017fb2 <tcp_write+0x6b2>
          goto memerr;
 8017f4e:	bf00      	nop
 8017f50:	e006      	b.n	8017f60 <tcp_write+0x660>
            goto memerr;
 8017f52:	bf00      	nop
 8017f54:	e004      	b.n	8017f60 <tcp_write+0x660>
        goto memerr;
 8017f56:	bf00      	nop
 8017f58:	e002      	b.n	8017f60 <tcp_write+0x660>
        goto memerr;
 8017f5a:	bf00      	nop
 8017f5c:	e000      	b.n	8017f60 <tcp_write+0x660>
      goto memerr;
 8017f5e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	8b5b      	ldrh	r3, [r3, #26]
 8017f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f68:	b29a      	uxth	r2, r3
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d002      	beq.n	8017f7a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017f74:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017f76:	f7fa fec7 	bl	8012d08 <pbuf_free>
  }
  if (queue != NULL) {
 8017f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d002      	beq.n	8017f86 <tcp_write+0x686>
    tcp_segs_free(queue);
 8017f80:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017f82:	f7fc fb53 	bl	801462c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d00e      	beq.n	8017fae <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d10a      	bne.n	8017fae <tcp_write+0x6ae>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d106      	bne.n	8017fae <tcp_write+0x6ae>
 8017fa0:	4b06      	ldr	r3, [pc, #24]	@ (8017fbc <tcp_write+0x6bc>)
 8017fa2:	f240 3227 	movw	r2, #807	@ 0x327
 8017fa6:	4906      	ldr	r1, [pc, #24]	@ (8017fc0 <tcp_write+0x6c0>)
 8017fa8:	4806      	ldr	r0, [pc, #24]	@ (8017fc4 <tcp_write+0x6c4>)
 8017faa:	f005 fa6d 	bl	801d488 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	375c      	adds	r7, #92	@ 0x5c
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd90      	pop	{r4, r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	08021ed4 	.word	0x08021ed4
 8017fc0:	08022248 	.word	0x08022248
 8017fc4:	08021f28 	.word	0x08021f28

08017fc8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017fc8:	b590      	push	{r4, r7, lr}
 8017fca:	b08b      	sub	sp, #44	@ 0x2c
 8017fcc:	af02      	add	r7, sp, #8
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	460b      	mov	r3, r1
 8017fd2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8017fd4:	2300      	movs	r3, #0
 8017fd6:	61fb      	str	r3, [r7, #28]
 8017fd8:	2300      	movs	r3, #0
 8017fda:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d106      	bne.n	8017ff4 <tcp_split_unsent_seg+0x2c>
 8017fe6:	4b95      	ldr	r3, [pc, #596]	@ (801823c <tcp_split_unsent_seg+0x274>)
 8017fe8:	f240 324b 	movw	r2, #843	@ 0x34b
 8017fec:	4994      	ldr	r1, [pc, #592]	@ (8018240 <tcp_split_unsent_seg+0x278>)
 8017fee:	4895      	ldr	r0, [pc, #596]	@ (8018244 <tcp_split_unsent_seg+0x27c>)
 8017ff0:	f005 fa4a 	bl	801d488 <iprintf>

  useg = pcb->unsent;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ff8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d102      	bne.n	8018006 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018000:	f04f 33ff 	mov.w	r3, #4294967295
 8018004:	e116      	b.n	8018234 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018006:	887b      	ldrh	r3, [r7, #2]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d109      	bne.n	8018020 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801800c:	4b8b      	ldr	r3, [pc, #556]	@ (801823c <tcp_split_unsent_seg+0x274>)
 801800e:	f240 3253 	movw	r2, #851	@ 0x353
 8018012:	498d      	ldr	r1, [pc, #564]	@ (8018248 <tcp_split_unsent_seg+0x280>)
 8018014:	488b      	ldr	r0, [pc, #556]	@ (8018244 <tcp_split_unsent_seg+0x27c>)
 8018016:	f005 fa37 	bl	801d488 <iprintf>
    return ERR_VAL;
 801801a:	f06f 0305 	mvn.w	r3, #5
 801801e:	e109      	b.n	8018234 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018020:	697b      	ldr	r3, [r7, #20]
 8018022:	891b      	ldrh	r3, [r3, #8]
 8018024:	887a      	ldrh	r2, [r7, #2]
 8018026:	429a      	cmp	r2, r3
 8018028:	d301      	bcc.n	801802e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801802a:	2300      	movs	r3, #0
 801802c:	e102      	b.n	8018234 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018032:	887a      	ldrh	r2, [r7, #2]
 8018034:	429a      	cmp	r2, r3
 8018036:	d906      	bls.n	8018046 <tcp_split_unsent_seg+0x7e>
 8018038:	4b80      	ldr	r3, [pc, #512]	@ (801823c <tcp_split_unsent_seg+0x274>)
 801803a:	f240 325b 	movw	r2, #859	@ 0x35b
 801803e:	4983      	ldr	r1, [pc, #524]	@ (801824c <tcp_split_unsent_seg+0x284>)
 8018040:	4880      	ldr	r0, [pc, #512]	@ (8018244 <tcp_split_unsent_seg+0x27c>)
 8018042:	f005 fa21 	bl	801d488 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	891b      	ldrh	r3, [r3, #8]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d106      	bne.n	801805c <tcp_split_unsent_seg+0x94>
 801804e:	4b7b      	ldr	r3, [pc, #492]	@ (801823c <tcp_split_unsent_seg+0x274>)
 8018050:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018054:	497e      	ldr	r1, [pc, #504]	@ (8018250 <tcp_split_unsent_seg+0x288>)
 8018056:	487b      	ldr	r0, [pc, #492]	@ (8018244 <tcp_split_unsent_seg+0x27c>)
 8018058:	f005 fa16 	bl	801d488 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	7a9b      	ldrb	r3, [r3, #10]
 8018060:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018062:	7bfb      	ldrb	r3, [r7, #15]
 8018064:	009b      	lsls	r3, r3, #2
 8018066:	b2db      	uxtb	r3, r3
 8018068:	f003 0304 	and.w	r3, r3, #4
 801806c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	891a      	ldrh	r2, [r3, #8]
 8018072:	887b      	ldrh	r3, [r7, #2]
 8018074:	1ad3      	subs	r3, r2, r3
 8018076:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018078:	7bbb      	ldrb	r3, [r7, #14]
 801807a:	b29a      	uxth	r2, r3
 801807c:	89bb      	ldrh	r3, [r7, #12]
 801807e:	4413      	add	r3, r2
 8018080:	b29b      	uxth	r3, r3
 8018082:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018086:	4619      	mov	r1, r3
 8018088:	2036      	movs	r0, #54	@ 0x36
 801808a:	f7fa fb59 	bl	8012740 <pbuf_alloc>
 801808e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	2b00      	cmp	r3, #0
 8018094:	f000 80b7 	beq.w	8018206 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018098:	697b      	ldr	r3, [r7, #20]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	891a      	ldrh	r2, [r3, #8]
 801809e:	697b      	ldr	r3, [r7, #20]
 80180a0:	891b      	ldrh	r3, [r3, #8]
 80180a2:	1ad3      	subs	r3, r2, r3
 80180a4:	b29a      	uxth	r2, r3
 80180a6:	887b      	ldrh	r3, [r7, #2]
 80180a8:	4413      	add	r3, r2
 80180aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80180ac:	697b      	ldr	r3, [r7, #20]
 80180ae:	6858      	ldr	r0, [r3, #4]
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	685a      	ldr	r2, [r3, #4]
 80180b4:	7bbb      	ldrb	r3, [r7, #14]
 80180b6:	18d1      	adds	r1, r2, r3
 80180b8:	897b      	ldrh	r3, [r7, #10]
 80180ba:	89ba      	ldrh	r2, [r7, #12]
 80180bc:	f7fb f82a 	bl	8013114 <pbuf_copy_partial>
 80180c0:	4603      	mov	r3, r0
 80180c2:	461a      	mov	r2, r3
 80180c4:	89bb      	ldrh	r3, [r7, #12]
 80180c6:	4293      	cmp	r3, r2
 80180c8:	f040 809f 	bne.w	801820a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	68db      	ldr	r3, [r3, #12]
 80180d0:	899b      	ldrh	r3, [r3, #12]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7f9 f9ef 	bl	80114b8 <lwip_htons>
 80180da:	4603      	mov	r3, r0
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80180e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80180e4:	2300      	movs	r3, #0
 80180e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80180e8:	7efb      	ldrb	r3, [r7, #27]
 80180ea:	f003 0308 	and.w	r3, r3, #8
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d007      	beq.n	8018102 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80180f2:	7efb      	ldrb	r3, [r7, #27]
 80180f4:	f023 0308 	bic.w	r3, r3, #8
 80180f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80180fa:	7ebb      	ldrb	r3, [r7, #26]
 80180fc:	f043 0308 	orr.w	r3, r3, #8
 8018100:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018102:	7efb      	ldrb	r3, [r7, #27]
 8018104:	f003 0301 	and.w	r3, r3, #1
 8018108:	2b00      	cmp	r3, #0
 801810a:	d007      	beq.n	801811c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801810c:	7efb      	ldrb	r3, [r7, #27]
 801810e:	f023 0301 	bic.w	r3, r3, #1
 8018112:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018114:	7ebb      	ldrb	r3, [r7, #26]
 8018116:	f043 0301 	orr.w	r3, r3, #1
 801811a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801811c:	697b      	ldr	r3, [r7, #20]
 801811e:	68db      	ldr	r3, [r3, #12]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	4618      	mov	r0, r3
 8018124:	f7f9 f9dd 	bl	80114e2 <lwip_htonl>
 8018128:	4602      	mov	r2, r0
 801812a:	887b      	ldrh	r3, [r7, #2]
 801812c:	18d1      	adds	r1, r2, r3
 801812e:	7eba      	ldrb	r2, [r7, #26]
 8018130:	7bfb      	ldrb	r3, [r7, #15]
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	460b      	mov	r3, r1
 8018136:	6939      	ldr	r1, [r7, #16]
 8018138:	6878      	ldr	r0, [r7, #4]
 801813a:	f7ff fa51 	bl	80175e0 <tcp_create_segment>
 801813e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018140:	69fb      	ldr	r3, [r7, #28]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d063      	beq.n	801820e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018146:	697b      	ldr	r3, [r7, #20]
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	4618      	mov	r0, r3
 801814c:	f7fa fe6a 	bl	8012e24 <pbuf_clen>
 8018150:	4603      	mov	r3, r0
 8018152:	461a      	mov	r2, r3
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801815a:	1a9b      	subs	r3, r3, r2
 801815c:	b29a      	uxth	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	6858      	ldr	r0, [r3, #4]
 8018168:	697b      	ldr	r3, [r7, #20]
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	891a      	ldrh	r2, [r3, #8]
 801816e:	89bb      	ldrh	r3, [r7, #12]
 8018170:	1ad3      	subs	r3, r2, r3
 8018172:	b29b      	uxth	r3, r3
 8018174:	4619      	mov	r1, r3
 8018176:	f7fa fc41 	bl	80129fc <pbuf_realloc>
  useg->len -= remainder;
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	891a      	ldrh	r2, [r3, #8]
 801817e:	89bb      	ldrh	r3, [r7, #12]
 8018180:	1ad3      	subs	r3, r2, r3
 8018182:	b29a      	uxth	r2, r3
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	68db      	ldr	r3, [r3, #12]
 801818c:	899b      	ldrh	r3, [r3, #12]
 801818e:	b29c      	uxth	r4, r3
 8018190:	7efb      	ldrb	r3, [r7, #27]
 8018192:	b29b      	uxth	r3, r3
 8018194:	4618      	mov	r0, r3
 8018196:	f7f9 f98f 	bl	80114b8 <lwip_htons>
 801819a:	4603      	mov	r3, r0
 801819c:	461a      	mov	r2, r3
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	68db      	ldr	r3, [r3, #12]
 80181a2:	4322      	orrs	r2, r4
 80181a4:	b292      	uxth	r2, r2
 80181a6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	685b      	ldr	r3, [r3, #4]
 80181ac:	4618      	mov	r0, r3
 80181ae:	f7fa fe39 	bl	8012e24 <pbuf_clen>
 80181b2:	4603      	mov	r3, r0
 80181b4:	461a      	mov	r2, r3
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181bc:	4413      	add	r3, r2
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80181c6:	69fb      	ldr	r3, [r7, #28]
 80181c8:	685b      	ldr	r3, [r3, #4]
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7fa fe2a 	bl	8012e24 <pbuf_clen>
 80181d0:	4603      	mov	r3, r0
 80181d2:	461a      	mov	r2, r3
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181da:	4413      	add	r3, r2
 80181dc:	b29a      	uxth	r2, r3
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	681a      	ldr	r2, [r3, #0]
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	69fa      	ldr	r2, [r7, #28]
 80181f0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80181f2:	69fb      	ldr	r3, [r7, #28]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d103      	bne.n	8018202 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	2200      	movs	r2, #0
 80181fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018202:	2300      	movs	r3, #0
 8018204:	e016      	b.n	8018234 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018206:	bf00      	nop
 8018208:	e002      	b.n	8018210 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801820a:	bf00      	nop
 801820c:	e000      	b.n	8018210 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801820e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018210:	69fb      	ldr	r3, [r7, #28]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d006      	beq.n	8018224 <tcp_split_unsent_seg+0x25c>
 8018216:	4b09      	ldr	r3, [pc, #36]	@ (801823c <tcp_split_unsent_seg+0x274>)
 8018218:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801821c:	490d      	ldr	r1, [pc, #52]	@ (8018254 <tcp_split_unsent_seg+0x28c>)
 801821e:	4809      	ldr	r0, [pc, #36]	@ (8018244 <tcp_split_unsent_seg+0x27c>)
 8018220:	f005 f932 	bl	801d488 <iprintf>
  if (p != NULL) {
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d002      	beq.n	8018230 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801822a:	6938      	ldr	r0, [r7, #16]
 801822c:	f7fa fd6c 	bl	8012d08 <pbuf_free>
  }

  return ERR_MEM;
 8018230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018234:	4618      	mov	r0, r3
 8018236:	3724      	adds	r7, #36	@ 0x24
 8018238:	46bd      	mov	sp, r7
 801823a:	bd90      	pop	{r4, r7, pc}
 801823c:	08021ed4 	.word	0x08021ed4
 8018240:	08022268 	.word	0x08022268
 8018244:	08021f28 	.word	0x08021f28
 8018248:	0802228c 	.word	0x0802228c
 801824c:	080222b0 	.word	0x080222b0
 8018250:	080222c0 	.word	0x080222c0
 8018254:	080222d0 	.word	0x080222d0

08018258 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018258:	b590      	push	{r4, r7, lr}
 801825a:	b085      	sub	sp, #20
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d106      	bne.n	8018274 <tcp_send_fin+0x1c>
 8018266:	4b21      	ldr	r3, [pc, #132]	@ (80182ec <tcp_send_fin+0x94>)
 8018268:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801826c:	4920      	ldr	r1, [pc, #128]	@ (80182f0 <tcp_send_fin+0x98>)
 801826e:	4821      	ldr	r0, [pc, #132]	@ (80182f4 <tcp_send_fin+0x9c>)
 8018270:	f005 f90a 	bl	801d488 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018278:	2b00      	cmp	r3, #0
 801827a:	d02e      	beq.n	80182da <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018280:	60fb      	str	r3, [r7, #12]
 8018282:	e002      	b.n	801828a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d1f8      	bne.n	8018284 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	68db      	ldr	r3, [r3, #12]
 8018296:	899b      	ldrh	r3, [r3, #12]
 8018298:	b29b      	uxth	r3, r3
 801829a:	4618      	mov	r0, r3
 801829c:	f7f9 f90c 	bl	80114b8 <lwip_htons>
 80182a0:	4603      	mov	r3, r0
 80182a2:	b2db      	uxtb	r3, r3
 80182a4:	f003 0307 	and.w	r3, r3, #7
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d116      	bne.n	80182da <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	899b      	ldrh	r3, [r3, #12]
 80182b2:	b29c      	uxth	r4, r3
 80182b4:	2001      	movs	r0, #1
 80182b6:	f7f9 f8ff 	bl	80114b8 <lwip_htons>
 80182ba:	4603      	mov	r3, r0
 80182bc:	461a      	mov	r2, r3
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	68db      	ldr	r3, [r3, #12]
 80182c2:	4322      	orrs	r2, r4
 80182c4:	b292      	uxth	r2, r2
 80182c6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	8b5b      	ldrh	r3, [r3, #26]
 80182cc:	f043 0320 	orr.w	r3, r3, #32
 80182d0:	b29a      	uxth	r2, r3
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80182d6:	2300      	movs	r3, #0
 80182d8:	e004      	b.n	80182e4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80182da:	2101      	movs	r1, #1
 80182dc:	6878      	ldr	r0, [r7, #4]
 80182de:	f000 f80b 	bl	80182f8 <tcp_enqueue_flags>
 80182e2:	4603      	mov	r3, r0
}
 80182e4:	4618      	mov	r0, r3
 80182e6:	3714      	adds	r7, #20
 80182e8:	46bd      	mov	sp, r7
 80182ea:	bd90      	pop	{r4, r7, pc}
 80182ec:	08021ed4 	.word	0x08021ed4
 80182f0:	080222dc 	.word	0x080222dc
 80182f4:	08021f28 	.word	0x08021f28

080182f8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b08a      	sub	sp, #40	@ 0x28
 80182fc:	af02      	add	r7, sp, #8
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	460b      	mov	r3, r1
 8018302:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018304:	2300      	movs	r3, #0
 8018306:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018308:	2300      	movs	r3, #0
 801830a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801830c:	78fb      	ldrb	r3, [r7, #3]
 801830e:	f003 0303 	and.w	r3, r3, #3
 8018312:	2b00      	cmp	r3, #0
 8018314:	d106      	bne.n	8018324 <tcp_enqueue_flags+0x2c>
 8018316:	4b67      	ldr	r3, [pc, #412]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 8018318:	f240 4211 	movw	r2, #1041	@ 0x411
 801831c:	4966      	ldr	r1, [pc, #408]	@ (80184b8 <tcp_enqueue_flags+0x1c0>)
 801831e:	4867      	ldr	r0, [pc, #412]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 8018320:	f005 f8b2 	bl	801d488 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d106      	bne.n	8018338 <tcp_enqueue_flags+0x40>
 801832a:	4b62      	ldr	r3, [pc, #392]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 801832c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018330:	4963      	ldr	r1, [pc, #396]	@ (80184c0 <tcp_enqueue_flags+0x1c8>)
 8018332:	4862      	ldr	r0, [pc, #392]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 8018334:	f005 f8a8 	bl	801d488 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018338:	78fb      	ldrb	r3, [r7, #3]
 801833a:	f003 0302 	and.w	r3, r3, #2
 801833e:	2b00      	cmp	r3, #0
 8018340:	d001      	beq.n	8018346 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018342:	2301      	movs	r3, #1
 8018344:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018346:	7ffb      	ldrb	r3, [r7, #31]
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	b2db      	uxtb	r3, r3
 801834c:	f003 0304 	and.w	r3, r3, #4
 8018350:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018352:	7dfb      	ldrb	r3, [r7, #23]
 8018354:	b29b      	uxth	r3, r3
 8018356:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801835a:	4619      	mov	r1, r3
 801835c:	2036      	movs	r0, #54	@ 0x36
 801835e:	f7fa f9ef 	bl	8012740 <pbuf_alloc>
 8018362:	6138      	str	r0, [r7, #16]
 8018364:	693b      	ldr	r3, [r7, #16]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d109      	bne.n	801837e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	8b5b      	ldrh	r3, [r3, #26]
 801836e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018372:	b29a      	uxth	r2, r3
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018378:	f04f 33ff 	mov.w	r3, #4294967295
 801837c:	e095      	b.n	80184aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801837e:	693b      	ldr	r3, [r7, #16]
 8018380:	895a      	ldrh	r2, [r3, #10]
 8018382:	7dfb      	ldrb	r3, [r7, #23]
 8018384:	b29b      	uxth	r3, r3
 8018386:	429a      	cmp	r2, r3
 8018388:	d206      	bcs.n	8018398 <tcp_enqueue_flags+0xa0>
 801838a:	4b4a      	ldr	r3, [pc, #296]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 801838c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018390:	494c      	ldr	r1, [pc, #304]	@ (80184c4 <tcp_enqueue_flags+0x1cc>)
 8018392:	484a      	ldr	r0, [pc, #296]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 8018394:	f005 f878 	bl	801d488 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801839c:	78fa      	ldrb	r2, [r7, #3]
 801839e:	7ffb      	ldrb	r3, [r7, #31]
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	460b      	mov	r3, r1
 80183a4:	6939      	ldr	r1, [r7, #16]
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7ff f91a 	bl	80175e0 <tcp_create_segment>
 80183ac:	60f8      	str	r0, [r7, #12]
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d109      	bne.n	80183c8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	8b5b      	ldrh	r3, [r3, #26]
 80183b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80183bc:	b29a      	uxth	r2, r3
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80183c2:	f04f 33ff 	mov.w	r3, #4294967295
 80183c6:	e070      	b.n	80184aa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	68db      	ldr	r3, [r3, #12]
 80183cc:	f003 0303 	and.w	r3, r3, #3
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d006      	beq.n	80183e2 <tcp_enqueue_flags+0xea>
 80183d4:	4b37      	ldr	r3, [pc, #220]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 80183d6:	f240 4242 	movw	r2, #1090	@ 0x442
 80183da:	493b      	ldr	r1, [pc, #236]	@ (80184c8 <tcp_enqueue_flags+0x1d0>)
 80183dc:	4837      	ldr	r0, [pc, #220]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 80183de:	f005 f853 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	891b      	ldrh	r3, [r3, #8]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d006      	beq.n	80183f8 <tcp_enqueue_flags+0x100>
 80183ea:	4b32      	ldr	r3, [pc, #200]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 80183ec:	f240 4243 	movw	r2, #1091	@ 0x443
 80183f0:	4936      	ldr	r1, [pc, #216]	@ (80184cc <tcp_enqueue_flags+0x1d4>)
 80183f2:	4832      	ldr	r0, [pc, #200]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 80183f4:	f005 f848 	bl	801d488 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d103      	bne.n	8018408 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	68fa      	ldr	r2, [r7, #12]
 8018404:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018406:	e00d      	b.n	8018424 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801840c:	61bb      	str	r3, [r7, #24]
 801840e:	e002      	b.n	8018416 <tcp_enqueue_flags+0x11e>
 8018410:	69bb      	ldr	r3, [r7, #24]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	61bb      	str	r3, [r7, #24]
 8018416:	69bb      	ldr	r3, [r7, #24]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1f8      	bne.n	8018410 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801841e:	69bb      	ldr	r3, [r7, #24]
 8018420:	68fa      	ldr	r2, [r7, #12]
 8018422:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2200      	movs	r2, #0
 8018428:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801842c:	78fb      	ldrb	r3, [r7, #3]
 801842e:	f003 0302 	and.w	r3, r3, #2
 8018432:	2b00      	cmp	r3, #0
 8018434:	d104      	bne.n	8018440 <tcp_enqueue_flags+0x148>
 8018436:	78fb      	ldrb	r3, [r7, #3]
 8018438:	f003 0301 	and.w	r3, r3, #1
 801843c:	2b00      	cmp	r3, #0
 801843e:	d004      	beq.n	801844a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018444:	1c5a      	adds	r2, r3, #1
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801844a:	78fb      	ldrb	r3, [r7, #3]
 801844c:	f003 0301 	and.w	r3, r3, #1
 8018450:	2b00      	cmp	r3, #0
 8018452:	d006      	beq.n	8018462 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	8b5b      	ldrh	r3, [r3, #26]
 8018458:	f043 0320 	orr.w	r3, r3, #32
 801845c:	b29a      	uxth	r2, r3
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	685b      	ldr	r3, [r3, #4]
 8018466:	4618      	mov	r0, r3
 8018468:	f7fa fcdc 	bl	8012e24 <pbuf_clen>
 801846c:	4603      	mov	r3, r0
 801846e:	461a      	mov	r2, r3
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018476:	4413      	add	r3, r2
 8018478:	b29a      	uxth	r2, r3
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018486:	2b00      	cmp	r3, #0
 8018488:	d00e      	beq.n	80184a8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801848e:	2b00      	cmp	r3, #0
 8018490:	d10a      	bne.n	80184a8 <tcp_enqueue_flags+0x1b0>
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018496:	2b00      	cmp	r3, #0
 8018498:	d106      	bne.n	80184a8 <tcp_enqueue_flags+0x1b0>
 801849a:	4b06      	ldr	r3, [pc, #24]	@ (80184b4 <tcp_enqueue_flags+0x1bc>)
 801849c:	f240 4265 	movw	r2, #1125	@ 0x465
 80184a0:	490b      	ldr	r1, [pc, #44]	@ (80184d0 <tcp_enqueue_flags+0x1d8>)
 80184a2:	4806      	ldr	r0, [pc, #24]	@ (80184bc <tcp_enqueue_flags+0x1c4>)
 80184a4:	f004 fff0 	bl	801d488 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80184a8:	2300      	movs	r3, #0
}
 80184aa:	4618      	mov	r0, r3
 80184ac:	3720      	adds	r7, #32
 80184ae:	46bd      	mov	sp, r7
 80184b0:	bd80      	pop	{r7, pc}
 80184b2:	bf00      	nop
 80184b4:	08021ed4 	.word	0x08021ed4
 80184b8:	080222f8 	.word	0x080222f8
 80184bc:	08021f28 	.word	0x08021f28
 80184c0:	08022350 	.word	0x08022350
 80184c4:	08022370 	.word	0x08022370
 80184c8:	080223ac 	.word	0x080223ac
 80184cc:	080223c4 	.word	0x080223c4
 80184d0:	080223f0 	.word	0x080223f0

080184d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80184d4:	b5b0      	push	{r4, r5, r7, lr}
 80184d6:	b08a      	sub	sp, #40	@ 0x28
 80184d8:	af00      	add	r7, sp, #0
 80184da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d106      	bne.n	80184f0 <tcp_output+0x1c>
 80184e2:	4b8a      	ldr	r3, [pc, #552]	@ (801870c <tcp_output+0x238>)
 80184e4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80184e8:	4989      	ldr	r1, [pc, #548]	@ (8018710 <tcp_output+0x23c>)
 80184ea:	488a      	ldr	r0, [pc, #552]	@ (8018714 <tcp_output+0x240>)
 80184ec:	f004 ffcc 	bl	801d488 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	7d1b      	ldrb	r3, [r3, #20]
 80184f4:	2b01      	cmp	r3, #1
 80184f6:	d106      	bne.n	8018506 <tcp_output+0x32>
 80184f8:	4b84      	ldr	r3, [pc, #528]	@ (801870c <tcp_output+0x238>)
 80184fa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80184fe:	4986      	ldr	r1, [pc, #536]	@ (8018718 <tcp_output+0x244>)
 8018500:	4884      	ldr	r0, [pc, #528]	@ (8018714 <tcp_output+0x240>)
 8018502:	f004 ffc1 	bl	801d488 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018506:	4b85      	ldr	r3, [pc, #532]	@ (801871c <tcp_output+0x248>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	687a      	ldr	r2, [r7, #4]
 801850c:	429a      	cmp	r2, r3
 801850e:	d101      	bne.n	8018514 <tcp_output+0x40>
    return ERR_OK;
 8018510:	2300      	movs	r3, #0
 8018512:	e1ce      	b.n	80188b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018520:	4293      	cmp	r3, r2
 8018522:	bf28      	it	cs
 8018524:	4613      	movcs	r3, r2
 8018526:	b29b      	uxth	r3, r3
 8018528:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801852e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018532:	2b00      	cmp	r3, #0
 8018534:	d10b      	bne.n	801854e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	8b5b      	ldrh	r3, [r3, #26]
 801853a:	f003 0302 	and.w	r3, r3, #2
 801853e:	2b00      	cmp	r3, #0
 8018540:	f000 81aa 	beq.w	8018898 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f000 fdcb 	bl	80190e0 <tcp_send_empty_ack>
 801854a:	4603      	mov	r3, r0
 801854c:	e1b1      	b.n	80188b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801854e:	6879      	ldr	r1, [r7, #4]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	3304      	adds	r3, #4
 8018554:	461a      	mov	r2, r3
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f7ff f826 	bl	80175a8 <tcp_route>
 801855c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	2b00      	cmp	r3, #0
 8018562:	d102      	bne.n	801856a <tcp_output+0x96>
    return ERR_RTE;
 8018564:	f06f 0303 	mvn.w	r3, #3
 8018568:	e1a3      	b.n	80188b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d003      	beq.n	8018578 <tcp_output+0xa4>
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d111      	bne.n	801859c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d002      	beq.n	8018584 <tcp_output+0xb0>
 801857e:	697b      	ldr	r3, [r7, #20]
 8018580:	3304      	adds	r3, #4
 8018582:	e000      	b.n	8018586 <tcp_output+0xb2>
 8018584:	2300      	movs	r3, #0
 8018586:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018588:	693b      	ldr	r3, [r7, #16]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d102      	bne.n	8018594 <tcp_output+0xc0>
      return ERR_RTE;
 801858e:	f06f 0303 	mvn.w	r3, #3
 8018592:	e18e      	b.n	80188b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018594:	693b      	ldr	r3, [r7, #16]
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801859e:	68db      	ldr	r3, [r3, #12]
 80185a0:	685b      	ldr	r3, [r3, #4]
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7f8 ff9d 	bl	80114e2 <lwip_htonl>
 80185a8:	4602      	mov	r2, r0
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80185ae:	1ad3      	subs	r3, r2, r3
 80185b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80185b2:	8912      	ldrh	r2, [r2, #8]
 80185b4:	4413      	add	r3, r2
 80185b6:	69ba      	ldr	r2, [r7, #24]
 80185b8:	429a      	cmp	r2, r3
 80185ba:	d227      	bcs.n	801860c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80185c2:	461a      	mov	r2, r3
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d114      	bne.n	80185f4 <tcp_output+0x120>
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d110      	bne.n	80185f4 <tcp_output+0x120>
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d10b      	bne.n	80185f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2200      	movs	r2, #0
 80185e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2201      	movs	r2, #1
 80185e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	2200      	movs	r2, #0
 80185f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	8b5b      	ldrh	r3, [r3, #26]
 80185f8:	f003 0302 	and.w	r3, r3, #2
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	f000 814d 	beq.w	801889c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018602:	6878      	ldr	r0, [r7, #4]
 8018604:	f000 fd6c 	bl	80190e0 <tcp_send_empty_ack>
 8018608:	4603      	mov	r3, r0
 801860a:	e152      	b.n	80188b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	2200      	movs	r2, #0
 8018610:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018618:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801861a:	6a3b      	ldr	r3, [r7, #32]
 801861c:	2b00      	cmp	r3, #0
 801861e:	f000 811c 	beq.w	801885a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018622:	e002      	b.n	801862a <tcp_output+0x156>
 8018624:	6a3b      	ldr	r3, [r7, #32]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	623b      	str	r3, [r7, #32]
 801862a:	6a3b      	ldr	r3, [r7, #32]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d1f8      	bne.n	8018624 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018632:	e112      	b.n	801885a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018636:	68db      	ldr	r3, [r3, #12]
 8018638:	899b      	ldrh	r3, [r3, #12]
 801863a:	b29b      	uxth	r3, r3
 801863c:	4618      	mov	r0, r3
 801863e:	f7f8 ff3b 	bl	80114b8 <lwip_htons>
 8018642:	4603      	mov	r3, r0
 8018644:	b2db      	uxtb	r3, r3
 8018646:	f003 0304 	and.w	r3, r3, #4
 801864a:	2b00      	cmp	r3, #0
 801864c:	d006      	beq.n	801865c <tcp_output+0x188>
 801864e:	4b2f      	ldr	r3, [pc, #188]	@ (801870c <tcp_output+0x238>)
 8018650:	f240 5236 	movw	r2, #1334	@ 0x536
 8018654:	4932      	ldr	r1, [pc, #200]	@ (8018720 <tcp_output+0x24c>)
 8018656:	482f      	ldr	r0, [pc, #188]	@ (8018714 <tcp_output+0x240>)
 8018658:	f004 ff16 	bl	801d488 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018660:	2b00      	cmp	r3, #0
 8018662:	d01f      	beq.n	80186a4 <tcp_output+0x1d0>
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	8b5b      	ldrh	r3, [r3, #26]
 8018668:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801866c:	2b00      	cmp	r3, #0
 801866e:	d119      	bne.n	80186a4 <tcp_output+0x1d0>
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018674:	2b00      	cmp	r3, #0
 8018676:	d00b      	beq.n	8018690 <tcp_output+0x1bc>
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d110      	bne.n	80186a4 <tcp_output+0x1d0>
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018686:	891a      	ldrh	r2, [r3, #8]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801868c:	429a      	cmp	r2, r3
 801868e:	d209      	bcs.n	80186a4 <tcp_output+0x1d0>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018696:	2b00      	cmp	r3, #0
 8018698:	d004      	beq.n	80186a4 <tcp_output+0x1d0>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80186a0:	2b08      	cmp	r3, #8
 80186a2:	d901      	bls.n	80186a8 <tcp_output+0x1d4>
 80186a4:	2301      	movs	r3, #1
 80186a6:	e000      	b.n	80186aa <tcp_output+0x1d6>
 80186a8:	2300      	movs	r3, #0
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d106      	bne.n	80186bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	8b5b      	ldrh	r3, [r3, #26]
 80186b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	f000 80e4 	beq.w	8018884 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	7d1b      	ldrb	r3, [r3, #20]
 80186c0:	2b02      	cmp	r3, #2
 80186c2:	d00d      	beq.n	80186e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80186c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c6:	68db      	ldr	r3, [r3, #12]
 80186c8:	899b      	ldrh	r3, [r3, #12]
 80186ca:	b29c      	uxth	r4, r3
 80186cc:	2010      	movs	r0, #16
 80186ce:	f7f8 fef3 	bl	80114b8 <lwip_htons>
 80186d2:	4603      	mov	r3, r0
 80186d4:	461a      	mov	r2, r3
 80186d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186d8:	68db      	ldr	r3, [r3, #12]
 80186da:	4322      	orrs	r2, r4
 80186dc:	b292      	uxth	r2, r2
 80186de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80186e0:	697a      	ldr	r2, [r7, #20]
 80186e2:	6879      	ldr	r1, [r7, #4]
 80186e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80186e6:	f000 f909 	bl	80188fc <tcp_output_segment>
 80186ea:	4603      	mov	r3, r0
 80186ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80186ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d016      	beq.n	8018724 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	8b5b      	ldrh	r3, [r3, #26]
 80186fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186fe:	b29a      	uxth	r2, r3
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	835a      	strh	r2, [r3, #26]
      return err;
 8018704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018708:	e0d3      	b.n	80188b2 <tcp_output+0x3de>
 801870a:	bf00      	nop
 801870c:	08021ed4 	.word	0x08021ed4
 8018710:	08022418 	.word	0x08022418
 8018714:	08021f28 	.word	0x08021f28
 8018718:	08022430 	.word	0x08022430
 801871c:	2000f3e0 	.word	0x2000f3e0
 8018720:	08022458 	.word	0x08022458
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018726:	681a      	ldr	r2, [r3, #0]
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	7d1b      	ldrb	r3, [r3, #20]
 8018730:	2b02      	cmp	r3, #2
 8018732:	d006      	beq.n	8018742 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	8b5b      	ldrh	r3, [r3, #26]
 8018738:	f023 0303 	bic.w	r3, r3, #3
 801873c:	b29a      	uxth	r2, r3
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	685b      	ldr	r3, [r3, #4]
 8018748:	4618      	mov	r0, r3
 801874a:	f7f8 feca 	bl	80114e2 <lwip_htonl>
 801874e:	4604      	mov	r4, r0
 8018750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018752:	891b      	ldrh	r3, [r3, #8]
 8018754:	461d      	mov	r5, r3
 8018756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018758:	68db      	ldr	r3, [r3, #12]
 801875a:	899b      	ldrh	r3, [r3, #12]
 801875c:	b29b      	uxth	r3, r3
 801875e:	4618      	mov	r0, r3
 8018760:	f7f8 feaa 	bl	80114b8 <lwip_htons>
 8018764:	4603      	mov	r3, r0
 8018766:	b2db      	uxtb	r3, r3
 8018768:	f003 0303 	and.w	r3, r3, #3
 801876c:	2b00      	cmp	r3, #0
 801876e:	d001      	beq.n	8018774 <tcp_output+0x2a0>
 8018770:	2301      	movs	r3, #1
 8018772:	e000      	b.n	8018776 <tcp_output+0x2a2>
 8018774:	2300      	movs	r3, #0
 8018776:	442b      	add	r3, r5
 8018778:	4423      	add	r3, r4
 801877a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	1ad3      	subs	r3, r2, r3
 8018784:	2b00      	cmp	r3, #0
 8018786:	da02      	bge.n	801878e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	68ba      	ldr	r2, [r7, #8]
 801878c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018790:	891b      	ldrh	r3, [r3, #8]
 8018792:	461c      	mov	r4, r3
 8018794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018796:	68db      	ldr	r3, [r3, #12]
 8018798:	899b      	ldrh	r3, [r3, #12]
 801879a:	b29b      	uxth	r3, r3
 801879c:	4618      	mov	r0, r3
 801879e:	f7f8 fe8b 	bl	80114b8 <lwip_htons>
 80187a2:	4603      	mov	r3, r0
 80187a4:	b2db      	uxtb	r3, r3
 80187a6:	f003 0303 	and.w	r3, r3, #3
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d001      	beq.n	80187b2 <tcp_output+0x2de>
 80187ae:	2301      	movs	r3, #1
 80187b0:	e000      	b.n	80187b4 <tcp_output+0x2e0>
 80187b2:	2300      	movs	r3, #0
 80187b4:	4423      	add	r3, r4
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d049      	beq.n	801884e <tcp_output+0x37a>
      seg->next = NULL;
 80187ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187bc:	2200      	movs	r2, #0
 80187be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d105      	bne.n	80187d4 <tcp_output+0x300>
        pcb->unacked = seg;
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80187ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187d0:	623b      	str	r3, [r7, #32]
 80187d2:	e03f      	b.n	8018854 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80187d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	685b      	ldr	r3, [r3, #4]
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f8 fe81 	bl	80114e2 <lwip_htonl>
 80187e0:	4604      	mov	r4, r0
 80187e2:	6a3b      	ldr	r3, [r7, #32]
 80187e4:	68db      	ldr	r3, [r3, #12]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7f8 fe7a 	bl	80114e2 <lwip_htonl>
 80187ee:	4603      	mov	r3, r0
 80187f0:	1ae3      	subs	r3, r4, r3
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	da24      	bge.n	8018840 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	3370      	adds	r3, #112	@ 0x70
 80187fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80187fc:	e002      	b.n	8018804 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80187fe:	69fb      	ldr	r3, [r7, #28]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018804:	69fb      	ldr	r3, [r7, #28]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d011      	beq.n	8018830 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	68db      	ldr	r3, [r3, #12]
 8018812:	685b      	ldr	r3, [r3, #4]
 8018814:	4618      	mov	r0, r3
 8018816:	f7f8 fe64 	bl	80114e2 <lwip_htonl>
 801881a:	4604      	mov	r4, r0
 801881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801881e:	68db      	ldr	r3, [r3, #12]
 8018820:	685b      	ldr	r3, [r3, #4]
 8018822:	4618      	mov	r0, r3
 8018824:	f7f8 fe5d 	bl	80114e2 <lwip_htonl>
 8018828:	4603      	mov	r3, r0
 801882a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801882c:	2b00      	cmp	r3, #0
 801882e:	dbe6      	blt.n	80187fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018830:	69fb      	ldr	r3, [r7, #28]
 8018832:	681a      	ldr	r2, [r3, #0]
 8018834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018836:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801883c:	601a      	str	r2, [r3, #0]
 801883e:	e009      	b.n	8018854 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018840:	6a3b      	ldr	r3, [r7, #32]
 8018842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018844:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018846:	6a3b      	ldr	r3, [r7, #32]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	623b      	str	r3, [r7, #32]
 801884c:	e002      	b.n	8018854 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801884e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018850:	f7fb ff01 	bl	8014656 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018858:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801885c:	2b00      	cmp	r3, #0
 801885e:	d012      	beq.n	8018886 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018862:	68db      	ldr	r3, [r3, #12]
 8018864:	685b      	ldr	r3, [r3, #4]
 8018866:	4618      	mov	r0, r3
 8018868:	f7f8 fe3b 	bl	80114e2 <lwip_htonl>
 801886c:	4602      	mov	r2, r0
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018872:	1ad3      	subs	r3, r2, r3
 8018874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018876:	8912      	ldrh	r2, [r2, #8]
 8018878:	4413      	add	r3, r2
  while (seg != NULL &&
 801887a:	69ba      	ldr	r2, [r7, #24]
 801887c:	429a      	cmp	r2, r3
 801887e:	f4bf aed9 	bcs.w	8018634 <tcp_output+0x160>
 8018882:	e000      	b.n	8018886 <tcp_output+0x3b2>
      break;
 8018884:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801888a:	2b00      	cmp	r3, #0
 801888c:	d108      	bne.n	80188a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2200      	movs	r2, #0
 8018892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018896:	e004      	b.n	80188a2 <tcp_output+0x3ce>
    goto output_done;
 8018898:	bf00      	nop
 801889a:	e002      	b.n	80188a2 <tcp_output+0x3ce>
    goto output_done;
 801889c:	bf00      	nop
 801889e:	e000      	b.n	80188a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80188a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	8b5b      	ldrh	r3, [r3, #26]
 80188a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80188aa:	b29a      	uxth	r2, r3
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80188b0:	2300      	movs	r3, #0
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3728      	adds	r7, #40	@ 0x28
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bdb0      	pop	{r4, r5, r7, pc}
 80188ba:	bf00      	nop

080188bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d106      	bne.n	80188d8 <tcp_output_segment_busy+0x1c>
 80188ca:	4b09      	ldr	r3, [pc, #36]	@ (80188f0 <tcp_output_segment_busy+0x34>)
 80188cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80188d0:	4908      	ldr	r1, [pc, #32]	@ (80188f4 <tcp_output_segment_busy+0x38>)
 80188d2:	4809      	ldr	r0, [pc, #36]	@ (80188f8 <tcp_output_segment_busy+0x3c>)
 80188d4:	f004 fdd8 	bl	801d488 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	7b9b      	ldrb	r3, [r3, #14]
 80188de:	2b01      	cmp	r3, #1
 80188e0:	d001      	beq.n	80188e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80188e2:	2301      	movs	r3, #1
 80188e4:	e000      	b.n	80188e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80188e6:	2300      	movs	r3, #0
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	3708      	adds	r7, #8
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	08021ed4 	.word	0x08021ed4
 80188f4:	08022470 	.word	0x08022470
 80188f8:	08021f28 	.word	0x08021f28

080188fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80188fc:	b5b0      	push	{r4, r5, r7, lr}
 80188fe:	b08c      	sub	sp, #48	@ 0x30
 8018900:	af04      	add	r7, sp, #16
 8018902:	60f8      	str	r0, [r7, #12]
 8018904:	60b9      	str	r1, [r7, #8]
 8018906:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d106      	bne.n	801891c <tcp_output_segment+0x20>
 801890e:	4b64      	ldr	r3, [pc, #400]	@ (8018aa0 <tcp_output_segment+0x1a4>)
 8018910:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018914:	4963      	ldr	r1, [pc, #396]	@ (8018aa4 <tcp_output_segment+0x1a8>)
 8018916:	4864      	ldr	r0, [pc, #400]	@ (8018aa8 <tcp_output_segment+0x1ac>)
 8018918:	f004 fdb6 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d106      	bne.n	8018930 <tcp_output_segment+0x34>
 8018922:	4b5f      	ldr	r3, [pc, #380]	@ (8018aa0 <tcp_output_segment+0x1a4>)
 8018924:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018928:	4960      	ldr	r1, [pc, #384]	@ (8018aac <tcp_output_segment+0x1b0>)
 801892a:	485f      	ldr	r0, [pc, #380]	@ (8018aa8 <tcp_output_segment+0x1ac>)
 801892c:	f004 fdac 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d106      	bne.n	8018944 <tcp_output_segment+0x48>
 8018936:	4b5a      	ldr	r3, [pc, #360]	@ (8018aa0 <tcp_output_segment+0x1a4>)
 8018938:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801893c:	495c      	ldr	r1, [pc, #368]	@ (8018ab0 <tcp_output_segment+0x1b4>)
 801893e:	485a      	ldr	r0, [pc, #360]	@ (8018aa8 <tcp_output_segment+0x1ac>)
 8018940:	f004 fda2 	bl	801d488 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018944:	68f8      	ldr	r0, [r7, #12]
 8018946:	f7ff ffb9 	bl	80188bc <tcp_output_segment_busy>
 801894a:	4603      	mov	r3, r0
 801894c:	2b00      	cmp	r3, #0
 801894e:	d001      	beq.n	8018954 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018950:	2300      	movs	r3, #0
 8018952:	e0a1      	b.n	8018a98 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018954:	68bb      	ldr	r3, [r7, #8]
 8018956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	68dc      	ldr	r4, [r3, #12]
 801895c:	4610      	mov	r0, r2
 801895e:	f7f8 fdc0 	bl	80114e2 <lwip_htonl>
 8018962:	4603      	mov	r3, r0
 8018964:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	68dc      	ldr	r4, [r3, #12]
 801896e:	4610      	mov	r0, r2
 8018970:	f7f8 fda2 	bl	80114b8 <lwip_htons>
 8018974:	4603      	mov	r3, r0
 8018976:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018978:	68bb      	ldr	r3, [r7, #8]
 801897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801897c:	68ba      	ldr	r2, [r7, #8]
 801897e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018980:	441a      	add	r2, r3
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	68db      	ldr	r3, [r3, #12]
 801898a:	3314      	adds	r3, #20
 801898c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	7a9b      	ldrb	r3, [r3, #10]
 8018992:	f003 0301 	and.w	r3, r3, #1
 8018996:	2b00      	cmp	r3, #0
 8018998:	d015      	beq.n	80189c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801899a:	68bb      	ldr	r3, [r7, #8]
 801899c:	3304      	adds	r3, #4
 801899e:	461a      	mov	r2, r3
 80189a0:	6879      	ldr	r1, [r7, #4]
 80189a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80189a6:	f7fc fa39 	bl	8014e1c <tcp_eff_send_mss_netif>
 80189aa:	4603      	mov	r3, r0
 80189ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80189ae:	8b7b      	ldrh	r3, [r7, #26]
 80189b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7f8 fd94 	bl	80114e2 <lwip_htonl>
 80189ba:	4602      	mov	r2, r0
 80189bc:	69fb      	ldr	r3, [r7, #28]
 80189be:	601a      	str	r2, [r3, #0]
    opts += 1;
 80189c0:	69fb      	ldr	r3, [r7, #28]
 80189c2:	3304      	adds	r3, #4
 80189c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80189c6:	68bb      	ldr	r3, [r7, #8]
 80189c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	da02      	bge.n	80189d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	2200      	movs	r2, #0
 80189d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80189d6:	68bb      	ldr	r3, [r7, #8]
 80189d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d10c      	bne.n	80189f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80189de:	4b35      	ldr	r3, [pc, #212]	@ (8018ab4 <tcp_output_segment+0x1b8>)
 80189e0:	681a      	ldr	r2, [r3, #0]
 80189e2:	68bb      	ldr	r3, [r7, #8]
 80189e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	68db      	ldr	r3, [r3, #12]
 80189ea:	685b      	ldr	r3, [r3, #4]
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7f8 fd78 	bl	80114e2 <lwip_htonl>
 80189f2:	4602      	mov	r2, r0
 80189f4:	68bb      	ldr	r3, [r7, #8]
 80189f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	68da      	ldr	r2, [r3, #12]
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	1ad3      	subs	r3, r2, r3
 8018a04:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	8959      	ldrh	r1, [r3, #10]
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	685b      	ldr	r3, [r3, #4]
 8018a10:	8b3a      	ldrh	r2, [r7, #24]
 8018a12:	1a8a      	subs	r2, r1, r2
 8018a14:	b292      	uxth	r2, r2
 8018a16:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	685b      	ldr	r3, [r3, #4]
 8018a1c:	8919      	ldrh	r1, [r3, #8]
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	685b      	ldr	r3, [r3, #4]
 8018a22:	8b3a      	ldrh	r2, [r7, #24]
 8018a24:	1a8a      	subs	r2, r1, r2
 8018a26:	b292      	uxth	r2, r2
 8018a28:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	685b      	ldr	r3, [r3, #4]
 8018a2e:	68fa      	ldr	r2, [r7, #12]
 8018a30:	68d2      	ldr	r2, [r2, #12]
 8018a32:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	68db      	ldr	r3, [r3, #12]
 8018a38:	2200      	movs	r2, #0
 8018a3a:	741a      	strb	r2, [r3, #16]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	68da      	ldr	r2, [r3, #12]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	7a9b      	ldrb	r3, [r3, #10]
 8018a48:	f003 0301 	and.w	r3, r3, #1
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d001      	beq.n	8018a54 <tcp_output_segment+0x158>
 8018a50:	2318      	movs	r3, #24
 8018a52:	e000      	b.n	8018a56 <tcp_output_segment+0x15a>
 8018a54:	2314      	movs	r3, #20
 8018a56:	4413      	add	r3, r2
 8018a58:	69fa      	ldr	r2, [r7, #28]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d006      	beq.n	8018a6c <tcp_output_segment+0x170>
 8018a5e:	4b10      	ldr	r3, [pc, #64]	@ (8018aa0 <tcp_output_segment+0x1a4>)
 8018a60:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018a64:	4914      	ldr	r1, [pc, #80]	@ (8018ab8 <tcp_output_segment+0x1bc>)
 8018a66:	4810      	ldr	r0, [pc, #64]	@ (8018aa8 <tcp_output_segment+0x1ac>)
 8018a68:	f004 fd0e 	bl	801d488 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	6858      	ldr	r0, [r3, #4]
 8018a70:	68b9      	ldr	r1, [r7, #8]
 8018a72:	68bb      	ldr	r3, [r7, #8]
 8018a74:	1d1c      	adds	r4, r3, #4
 8018a76:	68bb      	ldr	r3, [r7, #8]
 8018a78:	7add      	ldrb	r5, [r3, #11]
 8018a7a:	68bb      	ldr	r3, [r7, #8]
 8018a7c:	7a9b      	ldrb	r3, [r3, #10]
 8018a7e:	687a      	ldr	r2, [r7, #4]
 8018a80:	9202      	str	r2, [sp, #8]
 8018a82:	2206      	movs	r2, #6
 8018a84:	9201      	str	r2, [sp, #4]
 8018a86:	9300      	str	r3, [sp, #0]
 8018a88:	462b      	mov	r3, r5
 8018a8a:	4622      	mov	r2, r4
 8018a8c:	f002 fd94 	bl	801b5b8 <ip4_output_if>
 8018a90:	4603      	mov	r3, r0
 8018a92:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	3720      	adds	r7, #32
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8018aa0:	08021ed4 	.word	0x08021ed4
 8018aa4:	08022498 	.word	0x08022498
 8018aa8:	08021f28 	.word	0x08021f28
 8018aac:	080224b8 	.word	0x080224b8
 8018ab0:	080224d8 	.word	0x080224d8
 8018ab4:	2000f394 	.word	0x2000f394
 8018ab8:	080224fc 	.word	0x080224fc

08018abc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018abc:	b5b0      	push	{r4, r5, r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <tcp_rexmit_rto_prepare+0x1c>
 8018aca:	4b31      	ldr	r3, [pc, #196]	@ (8018b90 <tcp_rexmit_rto_prepare+0xd4>)
 8018acc:	f240 6263 	movw	r2, #1635	@ 0x663
 8018ad0:	4930      	ldr	r1, [pc, #192]	@ (8018b94 <tcp_rexmit_rto_prepare+0xd8>)
 8018ad2:	4831      	ldr	r0, [pc, #196]	@ (8018b98 <tcp_rexmit_rto_prepare+0xdc>)
 8018ad4:	f004 fcd8 	bl	801d488 <iprintf>

  if (pcb->unacked == NULL) {
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d102      	bne.n	8018ae6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018ae0:	f06f 0305 	mvn.w	r3, #5
 8018ae4:	e050      	b.n	8018b88 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018aea:	60fb      	str	r3, [r7, #12]
 8018aec:	e00b      	b.n	8018b06 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018aee:	68f8      	ldr	r0, [r7, #12]
 8018af0:	f7ff fee4 	bl	80188bc <tcp_output_segment_busy>
 8018af4:	4603      	mov	r3, r0
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d002      	beq.n	8018b00 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018afa:	f06f 0305 	mvn.w	r3, #5
 8018afe:	e043      	b.n	8018b88 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	60fb      	str	r3, [r7, #12]
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d1ef      	bne.n	8018aee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018b0e:	68f8      	ldr	r0, [r7, #12]
 8018b10:	f7ff fed4 	bl	80188bc <tcp_output_segment_busy>
 8018b14:	4603      	mov	r3, r0
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d002      	beq.n	8018b20 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018b1a:	f06f 0305 	mvn.w	r3, #5
 8018b1e:	e033      	b.n	8018b88 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2200      	movs	r2, #0
 8018b34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	8b5b      	ldrh	r3, [r3, #26]
 8018b3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018b3e:	b29a      	uxth	r2, r3
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	68db      	ldr	r3, [r3, #12]
 8018b48:	685b      	ldr	r3, [r3, #4]
 8018b4a:	4618      	mov	r0, r3
 8018b4c:	f7f8 fcc9 	bl	80114e2 <lwip_htonl>
 8018b50:	4604      	mov	r4, r0
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	891b      	ldrh	r3, [r3, #8]
 8018b56:	461d      	mov	r5, r3
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	899b      	ldrh	r3, [r3, #12]
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7f8 fca9 	bl	80114b8 <lwip_htons>
 8018b66:	4603      	mov	r3, r0
 8018b68:	b2db      	uxtb	r3, r3
 8018b6a:	f003 0303 	and.w	r3, r3, #3
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d001      	beq.n	8018b76 <tcp_rexmit_rto_prepare+0xba>
 8018b72:	2301      	movs	r3, #1
 8018b74:	e000      	b.n	8018b78 <tcp_rexmit_rto_prepare+0xbc>
 8018b76:	2300      	movs	r3, #0
 8018b78:	442b      	add	r3, r5
 8018b7a:	18e2      	adds	r2, r4, r3
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2200      	movs	r2, #0
 8018b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018b86:	2300      	movs	r3, #0
}
 8018b88:	4618      	mov	r0, r3
 8018b8a:	3710      	adds	r7, #16
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018b90:	08021ed4 	.word	0x08021ed4
 8018b94:	08022510 	.word	0x08022510
 8018b98:	08021f28 	.word	0x08021f28

08018b9c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d106      	bne.n	8018bb8 <tcp_rexmit_rto_commit+0x1c>
 8018baa:	4b0d      	ldr	r3, [pc, #52]	@ (8018be0 <tcp_rexmit_rto_commit+0x44>)
 8018bac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018bb0:	490c      	ldr	r1, [pc, #48]	@ (8018be4 <tcp_rexmit_rto_commit+0x48>)
 8018bb2:	480d      	ldr	r0, [pc, #52]	@ (8018be8 <tcp_rexmit_rto_commit+0x4c>)
 8018bb4:	f004 fc68 	bl	801d488 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018bbe:	2bff      	cmp	r3, #255	@ 0xff
 8018bc0:	d007      	beq.n	8018bd2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018bc8:	3301      	adds	r3, #1
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018bd2:	6878      	ldr	r0, [r7, #4]
 8018bd4:	f7ff fc7e 	bl	80184d4 <tcp_output>
}
 8018bd8:	bf00      	nop
 8018bda:	3708      	adds	r7, #8
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}
 8018be0:	08021ed4 	.word	0x08021ed4
 8018be4:	08022534 	.word	0x08022534
 8018be8:	08021f28 	.word	0x08021f28

08018bec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b082      	sub	sp, #8
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d106      	bne.n	8018c08 <tcp_rexmit_rto+0x1c>
 8018bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8018c24 <tcp_rexmit_rto+0x38>)
 8018bfc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018c00:	4909      	ldr	r1, [pc, #36]	@ (8018c28 <tcp_rexmit_rto+0x3c>)
 8018c02:	480a      	ldr	r0, [pc, #40]	@ (8018c2c <tcp_rexmit_rto+0x40>)
 8018c04:	f004 fc40 	bl	801d488 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018c08:	6878      	ldr	r0, [r7, #4]
 8018c0a:	f7ff ff57 	bl	8018abc <tcp_rexmit_rto_prepare>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d102      	bne.n	8018c1a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f7ff ffc1 	bl	8018b9c <tcp_rexmit_rto_commit>
  }
}
 8018c1a:	bf00      	nop
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	08021ed4 	.word	0x08021ed4
 8018c28:	08022558 	.word	0x08022558
 8018c2c:	08021f28 	.word	0x08021f28

08018c30 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018c30:	b590      	push	{r4, r7, lr}
 8018c32:	b085      	sub	sp, #20
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d106      	bne.n	8018c4c <tcp_rexmit+0x1c>
 8018c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8018cfc <tcp_rexmit+0xcc>)
 8018c40:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018c44:	492e      	ldr	r1, [pc, #184]	@ (8018d00 <tcp_rexmit+0xd0>)
 8018c46:	482f      	ldr	r0, [pc, #188]	@ (8018d04 <tcp_rexmit+0xd4>)
 8018c48:	f004 fc1e 	bl	801d488 <iprintf>

  if (pcb->unacked == NULL) {
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d102      	bne.n	8018c5a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018c54:	f06f 0305 	mvn.w	r3, #5
 8018c58:	e04c      	b.n	8018cf4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c5e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018c60:	68b8      	ldr	r0, [r7, #8]
 8018c62:	f7ff fe2b 	bl	80188bc <tcp_output_segment_busy>
 8018c66:	4603      	mov	r3, r0
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d002      	beq.n	8018c72 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018c6c:	f06f 0305 	mvn.w	r3, #5
 8018c70:	e040      	b.n	8018cf4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018c72:	68bb      	ldr	r3, [r7, #8]
 8018c74:	681a      	ldr	r2, [r3, #0]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	336c      	adds	r3, #108	@ 0x6c
 8018c7e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018c80:	e002      	b.n	8018c88 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d011      	beq.n	8018cb4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	68db      	ldr	r3, [r3, #12]
 8018c96:	685b      	ldr	r3, [r3, #4]
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7f8 fc22 	bl	80114e2 <lwip_htonl>
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	68db      	ldr	r3, [r3, #12]
 8018ca4:	685b      	ldr	r3, [r3, #4]
 8018ca6:	4618      	mov	r0, r3
 8018ca8:	f7f8 fc1b 	bl	80114e2 <lwip_htonl>
 8018cac:	4603      	mov	r3, r0
 8018cae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	dbe6      	blt.n	8018c82 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	68bb      	ldr	r3, [r7, #8]
 8018cba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	68ba      	ldr	r2, [r7, #8]
 8018cc0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018cc2:	68bb      	ldr	r3, [r7, #8]
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d103      	bne.n	8018cd2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	2200      	movs	r2, #0
 8018cce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018cd8:	2bff      	cmp	r3, #255	@ 0xff
 8018cda:	d007      	beq.n	8018cec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	2200      	movs	r2, #0
 8018cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018cf2:	2300      	movs	r3, #0
}
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	3714      	adds	r7, #20
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd90      	pop	{r4, r7, pc}
 8018cfc:	08021ed4 	.word	0x08021ed4
 8018d00:	08022574 	.word	0x08022574
 8018d04:	08021f28 	.word	0x08021f28

08018d08 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d106      	bne.n	8018d24 <tcp_rexmit_fast+0x1c>
 8018d16:	4b2a      	ldr	r3, [pc, #168]	@ (8018dc0 <tcp_rexmit_fast+0xb8>)
 8018d18:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8018d1c:	4929      	ldr	r1, [pc, #164]	@ (8018dc4 <tcp_rexmit_fast+0xbc>)
 8018d1e:	482a      	ldr	r0, [pc, #168]	@ (8018dc8 <tcp_rexmit_fast+0xc0>)
 8018d20:	f004 fbb2 	bl	801d488 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d045      	beq.n	8018db8 <tcp_rexmit_fast+0xb0>
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	8b5b      	ldrh	r3, [r3, #26]
 8018d30:	f003 0304 	and.w	r3, r3, #4
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d13f      	bne.n	8018db8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7ff ff79 	bl	8018c30 <tcp_rexmit>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d139      	bne.n	8018db8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018d50:	4293      	cmp	r3, r2
 8018d52:	bf28      	it	cs
 8018d54:	4613      	movcs	r3, r2
 8018d56:	b29b      	uxth	r3, r3
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	da00      	bge.n	8018d5e <tcp_rexmit_fast+0x56>
 8018d5c:	3301      	adds	r3, #1
 8018d5e:	105b      	asrs	r3, r3, #1
 8018d60:	b29a      	uxth	r2, r3
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018d6e:	461a      	mov	r2, r3
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018d74:	005b      	lsls	r3, r3, #1
 8018d76:	429a      	cmp	r2, r3
 8018d78:	d206      	bcs.n	8018d88 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018d7e:	005b      	lsls	r3, r3, #1
 8018d80:	b29a      	uxth	r2, r3
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018d92:	4619      	mov	r1, r3
 8018d94:	0049      	lsls	r1, r1, #1
 8018d96:	440b      	add	r3, r1
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	4413      	add	r3, r2
 8018d9c:	b29a      	uxth	r2, r3
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	8b5b      	ldrh	r3, [r3, #26]
 8018da8:	f043 0304 	orr.w	r3, r3, #4
 8018dac:	b29a      	uxth	r2, r3
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	2200      	movs	r2, #0
 8018db6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018db8:	bf00      	nop
 8018dba:	3708      	adds	r7, #8
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd80      	pop	{r7, pc}
 8018dc0:	08021ed4 	.word	0x08021ed4
 8018dc4:	0802258c 	.word	0x0802258c
 8018dc8:	08021f28 	.word	0x08021f28

08018dcc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b086      	sub	sp, #24
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	60f8      	str	r0, [r7, #12]
 8018dd4:	607b      	str	r3, [r7, #4]
 8018dd6:	460b      	mov	r3, r1
 8018dd8:	817b      	strh	r3, [r7, #10]
 8018dda:	4613      	mov	r3, r2
 8018ddc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018dde:	897a      	ldrh	r2, [r7, #10]
 8018de0:	893b      	ldrh	r3, [r7, #8]
 8018de2:	4413      	add	r3, r2
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	3314      	adds	r3, #20
 8018de8:	b29b      	uxth	r3, r3
 8018dea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018dee:	4619      	mov	r1, r3
 8018df0:	2022      	movs	r0, #34	@ 0x22
 8018df2:	f7f9 fca5 	bl	8012740 <pbuf_alloc>
 8018df6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018df8:	697b      	ldr	r3, [r7, #20]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d04d      	beq.n	8018e9a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018dfe:	897b      	ldrh	r3, [r7, #10]
 8018e00:	3313      	adds	r3, #19
 8018e02:	697a      	ldr	r2, [r7, #20]
 8018e04:	8952      	ldrh	r2, [r2, #10]
 8018e06:	4293      	cmp	r3, r2
 8018e08:	db06      	blt.n	8018e18 <tcp_output_alloc_header_common+0x4c>
 8018e0a:	4b26      	ldr	r3, [pc, #152]	@ (8018ea4 <tcp_output_alloc_header_common+0xd8>)
 8018e0c:	f240 7223 	movw	r2, #1827	@ 0x723
 8018e10:	4925      	ldr	r1, [pc, #148]	@ (8018ea8 <tcp_output_alloc_header_common+0xdc>)
 8018e12:	4826      	ldr	r0, [pc, #152]	@ (8018eac <tcp_output_alloc_header_common+0xe0>)
 8018e14:	f004 fb38 	bl	801d488 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018e18:	697b      	ldr	r3, [r7, #20]
 8018e1a:	685b      	ldr	r3, [r3, #4]
 8018e1c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018e1e:	8c3b      	ldrh	r3, [r7, #32]
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7f8 fb49 	bl	80114b8 <lwip_htons>
 8018e26:	4603      	mov	r3, r0
 8018e28:	461a      	mov	r2, r3
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018e30:	4618      	mov	r0, r3
 8018e32:	f7f8 fb41 	bl	80114b8 <lwip_htons>
 8018e36:	4603      	mov	r3, r0
 8018e38:	461a      	mov	r2, r3
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018e3e:	693b      	ldr	r3, [r7, #16]
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018e44:	68f8      	ldr	r0, [r7, #12]
 8018e46:	f7f8 fb4c 	bl	80114e2 <lwip_htonl>
 8018e4a:	4602      	mov	r2, r0
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018e50:	897b      	ldrh	r3, [r7, #10]
 8018e52:	089b      	lsrs	r3, r3, #2
 8018e54:	b29b      	uxth	r3, r3
 8018e56:	3305      	adds	r3, #5
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	031b      	lsls	r3, r3, #12
 8018e5c:	b29a      	uxth	r2, r3
 8018e5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	4313      	orrs	r3, r2
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7f8 fb25 	bl	80114b8 <lwip_htons>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	461a      	mov	r2, r3
 8018e72:	693b      	ldr	r3, [r7, #16]
 8018e74:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018e76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8018e78:	4618      	mov	r0, r3
 8018e7a:	f7f8 fb1d 	bl	80114b8 <lwip_htons>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	461a      	mov	r2, r3
 8018e82:	693b      	ldr	r3, [r7, #16]
 8018e84:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	2200      	movs	r2, #0
 8018e8a:	741a      	strb	r2, [r3, #16]
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018e90:	693b      	ldr	r3, [r7, #16]
 8018e92:	2200      	movs	r2, #0
 8018e94:	749a      	strb	r2, [r3, #18]
 8018e96:	2200      	movs	r2, #0
 8018e98:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018e9a:	697b      	ldr	r3, [r7, #20]
}
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	3718      	adds	r7, #24
 8018ea0:	46bd      	mov	sp, r7
 8018ea2:	bd80      	pop	{r7, pc}
 8018ea4:	08021ed4 	.word	0x08021ed4
 8018ea8:	080225ac 	.word	0x080225ac
 8018eac:	08021f28 	.word	0x08021f28

08018eb0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018eb0:	b5b0      	push	{r4, r5, r7, lr}
 8018eb2:	b08a      	sub	sp, #40	@ 0x28
 8018eb4:	af04      	add	r7, sp, #16
 8018eb6:	60f8      	str	r0, [r7, #12]
 8018eb8:	607b      	str	r3, [r7, #4]
 8018eba:	460b      	mov	r3, r1
 8018ebc:	817b      	strh	r3, [r7, #10]
 8018ebe:	4613      	mov	r3, r2
 8018ec0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d106      	bne.n	8018ed6 <tcp_output_alloc_header+0x26>
 8018ec8:	4b15      	ldr	r3, [pc, #84]	@ (8018f20 <tcp_output_alloc_header+0x70>)
 8018eca:	f240 7242 	movw	r2, #1858	@ 0x742
 8018ece:	4915      	ldr	r1, [pc, #84]	@ (8018f24 <tcp_output_alloc_header+0x74>)
 8018ed0:	4815      	ldr	r0, [pc, #84]	@ (8018f28 <tcp_output_alloc_header+0x78>)
 8018ed2:	f004 fad9 	bl	801d488 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	8adb      	ldrh	r3, [r3, #22]
 8018ede:	68fa      	ldr	r2, [r7, #12]
 8018ee0:	8b12      	ldrh	r2, [r2, #24]
 8018ee2:	68f9      	ldr	r1, [r7, #12]
 8018ee4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8018ee6:	893d      	ldrh	r5, [r7, #8]
 8018ee8:	897c      	ldrh	r4, [r7, #10]
 8018eea:	9103      	str	r1, [sp, #12]
 8018eec:	2110      	movs	r1, #16
 8018eee:	9102      	str	r1, [sp, #8]
 8018ef0:	9201      	str	r2, [sp, #4]
 8018ef2:	9300      	str	r3, [sp, #0]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	462a      	mov	r2, r5
 8018ef8:	4621      	mov	r1, r4
 8018efa:	f7ff ff67 	bl	8018dcc <tcp_output_alloc_header_common>
 8018efe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d006      	beq.n	8018f14 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f0a:	68fa      	ldr	r2, [r7, #12]
 8018f0c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018f0e:	441a      	add	r2, r3
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8018f14:	697b      	ldr	r3, [r7, #20]
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3718      	adds	r7, #24
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8018f1e:	bf00      	nop
 8018f20:	08021ed4 	.word	0x08021ed4
 8018f24:	080225dc 	.word	0x080225dc
 8018f28:	08021f28 	.word	0x08021f28

08018f2c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b088      	sub	sp, #32
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	60b9      	str	r1, [r7, #8]
 8018f36:	4611      	mov	r1, r2
 8018f38:	461a      	mov	r2, r3
 8018f3a:	460b      	mov	r3, r1
 8018f3c:	71fb      	strb	r3, [r7, #7]
 8018f3e:	4613      	mov	r3, r2
 8018f40:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018f42:	2300      	movs	r3, #0
 8018f44:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d106      	bne.n	8018f5a <tcp_output_fill_options+0x2e>
 8018f4c:	4b12      	ldr	r3, [pc, #72]	@ (8018f98 <tcp_output_fill_options+0x6c>)
 8018f4e:	f240 7256 	movw	r2, #1878	@ 0x756
 8018f52:	4912      	ldr	r1, [pc, #72]	@ (8018f9c <tcp_output_fill_options+0x70>)
 8018f54:	4812      	ldr	r0, [pc, #72]	@ (8018fa0 <tcp_output_fill_options+0x74>)
 8018f56:	f004 fa97 	bl	801d488 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	685b      	ldr	r3, [r3, #4]
 8018f5e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	3314      	adds	r3, #20
 8018f64:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8018f66:	8bfb      	ldrh	r3, [r7, #30]
 8018f68:	009b      	lsls	r3, r3, #2
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	79fb      	ldrb	r3, [r7, #7]
 8018f6e:	009b      	lsls	r3, r3, #2
 8018f70:	f003 0304 	and.w	r3, r3, #4
 8018f74:	4413      	add	r3, r2
 8018f76:	3314      	adds	r3, #20
 8018f78:	69ba      	ldr	r2, [r7, #24]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	697a      	ldr	r2, [r7, #20]
 8018f7e:	429a      	cmp	r2, r3
 8018f80:	d006      	beq.n	8018f90 <tcp_output_fill_options+0x64>
 8018f82:	4b05      	ldr	r3, [pc, #20]	@ (8018f98 <tcp_output_fill_options+0x6c>)
 8018f84:	f240 7275 	movw	r2, #1909	@ 0x775
 8018f88:	4906      	ldr	r1, [pc, #24]	@ (8018fa4 <tcp_output_fill_options+0x78>)
 8018f8a:	4805      	ldr	r0, [pc, #20]	@ (8018fa0 <tcp_output_fill_options+0x74>)
 8018f8c:	f004 fa7c 	bl	801d488 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018f90:	bf00      	nop
 8018f92:	3720      	adds	r7, #32
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	08021ed4 	.word	0x08021ed4
 8018f9c:	08022604 	.word	0x08022604
 8018fa0:	08021f28 	.word	0x08021f28
 8018fa4:	080224fc 	.word	0x080224fc

08018fa8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b08a      	sub	sp, #40	@ 0x28
 8018fac:	af04      	add	r7, sp, #16
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	607a      	str	r2, [r7, #4]
 8018fb4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d106      	bne.n	8018fca <tcp_output_control_segment+0x22>
 8018fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8019030 <tcp_output_control_segment+0x88>)
 8018fbe:	f240 7287 	movw	r2, #1927	@ 0x787
 8018fc2:	491c      	ldr	r1, [pc, #112]	@ (8019034 <tcp_output_control_segment+0x8c>)
 8018fc4:	481c      	ldr	r0, [pc, #112]	@ (8019038 <tcp_output_control_segment+0x90>)
 8018fc6:	f004 fa5f 	bl	801d488 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018fca:	683a      	ldr	r2, [r7, #0]
 8018fcc:	6879      	ldr	r1, [r7, #4]
 8018fce:	68f8      	ldr	r0, [r7, #12]
 8018fd0:	f7fe faea 	bl	80175a8 <tcp_route>
 8018fd4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8018fd6:	693b      	ldr	r3, [r7, #16]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d102      	bne.n	8018fe2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018fdc:	23fc      	movs	r3, #252	@ 0xfc
 8018fde:	75fb      	strb	r3, [r7, #23]
 8018fe0:	e01c      	b.n	801901c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d006      	beq.n	8018ff6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	7adb      	ldrb	r3, [r3, #11]
 8018fec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	7a9b      	ldrb	r3, [r3, #10]
 8018ff2:	757b      	strb	r3, [r7, #21]
 8018ff4:	e003      	b.n	8018ffe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8018ff6:	23ff      	movs	r3, #255	@ 0xff
 8018ff8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018ffe:	7dba      	ldrb	r2, [r7, #22]
 8019000:	693b      	ldr	r3, [r7, #16]
 8019002:	9302      	str	r3, [sp, #8]
 8019004:	2306      	movs	r3, #6
 8019006:	9301      	str	r3, [sp, #4]
 8019008:	7d7b      	ldrb	r3, [r7, #21]
 801900a:	9300      	str	r3, [sp, #0]
 801900c:	4613      	mov	r3, r2
 801900e:	683a      	ldr	r2, [r7, #0]
 8019010:	6879      	ldr	r1, [r7, #4]
 8019012:	68b8      	ldr	r0, [r7, #8]
 8019014:	f002 fad0 	bl	801b5b8 <ip4_output_if>
 8019018:	4603      	mov	r3, r0
 801901a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801901c:	68b8      	ldr	r0, [r7, #8]
 801901e:	f7f9 fe73 	bl	8012d08 <pbuf_free>
  return err;
 8019022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019026:	4618      	mov	r0, r3
 8019028:	3718      	adds	r7, #24
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}
 801902e:	bf00      	nop
 8019030:	08021ed4 	.word	0x08021ed4
 8019034:	0802262c 	.word	0x0802262c
 8019038:	08021f28 	.word	0x08021f28

0801903c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801903c:	b590      	push	{r4, r7, lr}
 801903e:	b08b      	sub	sp, #44	@ 0x2c
 8019040:	af04      	add	r7, sp, #16
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
 8019048:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d106      	bne.n	801905e <tcp_rst+0x22>
 8019050:	4b1f      	ldr	r3, [pc, #124]	@ (80190d0 <tcp_rst+0x94>)
 8019052:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019056:	491f      	ldr	r1, [pc, #124]	@ (80190d4 <tcp_rst+0x98>)
 8019058:	481f      	ldr	r0, [pc, #124]	@ (80190d8 <tcp_rst+0x9c>)
 801905a:	f004 fa15 	bl	801d488 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801905e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019060:	2b00      	cmp	r3, #0
 8019062:	d106      	bne.n	8019072 <tcp_rst+0x36>
 8019064:	4b1a      	ldr	r3, [pc, #104]	@ (80190d0 <tcp_rst+0x94>)
 8019066:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801906a:	491c      	ldr	r1, [pc, #112]	@ (80190dc <tcp_rst+0xa0>)
 801906c:	481a      	ldr	r0, [pc, #104]	@ (80190d8 <tcp_rst+0x9c>)
 801906e:	f004 fa0b 	bl	801d488 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019072:	2300      	movs	r3, #0
 8019074:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019076:	f246 0308 	movw	r3, #24584	@ 0x6008
 801907a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801907c:	7dfb      	ldrb	r3, [r7, #23]
 801907e:	b29c      	uxth	r4, r3
 8019080:	68b8      	ldr	r0, [r7, #8]
 8019082:	f7f8 fa2e 	bl	80114e2 <lwip_htonl>
 8019086:	4602      	mov	r2, r0
 8019088:	8abb      	ldrh	r3, [r7, #20]
 801908a:	9303      	str	r3, [sp, #12]
 801908c:	2314      	movs	r3, #20
 801908e:	9302      	str	r3, [sp, #8]
 8019090:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019092:	9301      	str	r3, [sp, #4]
 8019094:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019096:	9300      	str	r3, [sp, #0]
 8019098:	4613      	mov	r3, r2
 801909a:	2200      	movs	r2, #0
 801909c:	4621      	mov	r1, r4
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	f7ff fe94 	bl	8018dcc <tcp_output_alloc_header_common>
 80190a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d00c      	beq.n	80190c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80190ac:	7dfb      	ldrb	r3, [r7, #23]
 80190ae:	2200      	movs	r2, #0
 80190b0:	6939      	ldr	r1, [r7, #16]
 80190b2:	68f8      	ldr	r0, [r7, #12]
 80190b4:	f7ff ff3a 	bl	8018f2c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80190b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190ba:	683a      	ldr	r2, [r7, #0]
 80190bc:	6939      	ldr	r1, [r7, #16]
 80190be:	68f8      	ldr	r0, [r7, #12]
 80190c0:	f7ff ff72 	bl	8018fa8 <tcp_output_control_segment>
 80190c4:	e000      	b.n	80190c8 <tcp_rst+0x8c>
    return;
 80190c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80190c8:	371c      	adds	r7, #28
 80190ca:	46bd      	mov	sp, r7
 80190cc:	bd90      	pop	{r4, r7, pc}
 80190ce:	bf00      	nop
 80190d0:	08021ed4 	.word	0x08021ed4
 80190d4:	08022658 	.word	0x08022658
 80190d8:	08021f28 	.word	0x08021f28
 80190dc:	08022674 	.word	0x08022674

080190e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80190e0:	b590      	push	{r4, r7, lr}
 80190e2:	b087      	sub	sp, #28
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80190e8:	2300      	movs	r3, #0
 80190ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80190ec:	2300      	movs	r3, #0
 80190ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d106      	bne.n	8019104 <tcp_send_empty_ack+0x24>
 80190f6:	4b28      	ldr	r3, [pc, #160]	@ (8019198 <tcp_send_empty_ack+0xb8>)
 80190f8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80190fc:	4927      	ldr	r1, [pc, #156]	@ (801919c <tcp_send_empty_ack+0xbc>)
 80190fe:	4828      	ldr	r0, [pc, #160]	@ (80191a0 <tcp_send_empty_ack+0xc0>)
 8019100:	f004 f9c2 	bl	801d488 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019104:	7dfb      	ldrb	r3, [r7, #23]
 8019106:	009b      	lsls	r3, r3, #2
 8019108:	b2db      	uxtb	r3, r3
 801910a:	f003 0304 	and.w	r3, r3, #4
 801910e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019110:	7d7b      	ldrb	r3, [r7, #21]
 8019112:	b29c      	uxth	r4, r3
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019118:	4618      	mov	r0, r3
 801911a:	f7f8 f9e2 	bl	80114e2 <lwip_htonl>
 801911e:	4603      	mov	r3, r0
 8019120:	2200      	movs	r2, #0
 8019122:	4621      	mov	r1, r4
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f7ff fec3 	bl	8018eb0 <tcp_output_alloc_header>
 801912a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801912c:	693b      	ldr	r3, [r7, #16]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d109      	bne.n	8019146 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	8b5b      	ldrh	r3, [r3, #26]
 8019136:	f043 0303 	orr.w	r3, r3, #3
 801913a:	b29a      	uxth	r2, r3
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019140:	f06f 0301 	mvn.w	r3, #1
 8019144:	e023      	b.n	801918e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019146:	7dbb      	ldrb	r3, [r7, #22]
 8019148:	7dfa      	ldrb	r2, [r7, #23]
 801914a:	6939      	ldr	r1, [r7, #16]
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7ff feed 	bl	8018f2c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019152:	687a      	ldr	r2, [r7, #4]
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	3304      	adds	r3, #4
 8019158:	6939      	ldr	r1, [r7, #16]
 801915a:	6878      	ldr	r0, [r7, #4]
 801915c:	f7ff ff24 	bl	8018fa8 <tcp_output_control_segment>
 8019160:	4603      	mov	r3, r0
 8019162:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019168:	2b00      	cmp	r3, #0
 801916a:	d007      	beq.n	801917c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	8b5b      	ldrh	r3, [r3, #26]
 8019170:	f043 0303 	orr.w	r3, r3, #3
 8019174:	b29a      	uxth	r2, r3
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	835a      	strh	r2, [r3, #26]
 801917a:	e006      	b.n	801918a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	8b5b      	ldrh	r3, [r3, #26]
 8019180:	f023 0303 	bic.w	r3, r3, #3
 8019184:	b29a      	uxth	r2, r3
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801918a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801918e:	4618      	mov	r0, r3
 8019190:	371c      	adds	r7, #28
 8019192:	46bd      	mov	sp, r7
 8019194:	bd90      	pop	{r4, r7, pc}
 8019196:	bf00      	nop
 8019198:	08021ed4 	.word	0x08021ed4
 801919c:	08022690 	.word	0x08022690
 80191a0:	08021f28 	.word	0x08021f28

080191a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80191a4:	b590      	push	{r4, r7, lr}
 80191a6:	b087      	sub	sp, #28
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80191ac:	2300      	movs	r3, #0
 80191ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d106      	bne.n	80191c4 <tcp_keepalive+0x20>
 80191b6:	4b18      	ldr	r3, [pc, #96]	@ (8019218 <tcp_keepalive+0x74>)
 80191b8:	f640 0224 	movw	r2, #2084	@ 0x824
 80191bc:	4917      	ldr	r1, [pc, #92]	@ (801921c <tcp_keepalive+0x78>)
 80191be:	4818      	ldr	r0, [pc, #96]	@ (8019220 <tcp_keepalive+0x7c>)
 80191c0:	f004 f962 	bl	801d488 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80191c4:	7dfb      	ldrb	r3, [r7, #23]
 80191c6:	b29c      	uxth	r4, r3
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80191cc:	3b01      	subs	r3, #1
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7f8 f987 	bl	80114e2 <lwip_htonl>
 80191d4:	4603      	mov	r3, r0
 80191d6:	2200      	movs	r2, #0
 80191d8:	4621      	mov	r1, r4
 80191da:	6878      	ldr	r0, [r7, #4]
 80191dc:	f7ff fe68 	bl	8018eb0 <tcp_output_alloc_header>
 80191e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80191e2:	693b      	ldr	r3, [r7, #16]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d102      	bne.n	80191ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80191e8:	f04f 33ff 	mov.w	r3, #4294967295
 80191ec:	e010      	b.n	8019210 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80191ee:	7dfb      	ldrb	r3, [r7, #23]
 80191f0:	2200      	movs	r2, #0
 80191f2:	6939      	ldr	r1, [r7, #16]
 80191f4:	6878      	ldr	r0, [r7, #4]
 80191f6:	f7ff fe99 	bl	8018f2c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80191fa:	687a      	ldr	r2, [r7, #4]
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	3304      	adds	r3, #4
 8019200:	6939      	ldr	r1, [r7, #16]
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f7ff fed0 	bl	8018fa8 <tcp_output_control_segment>
 8019208:	4603      	mov	r3, r0
 801920a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801920c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019210:	4618      	mov	r0, r3
 8019212:	371c      	adds	r7, #28
 8019214:	46bd      	mov	sp, r7
 8019216:	bd90      	pop	{r4, r7, pc}
 8019218:	08021ed4 	.word	0x08021ed4
 801921c:	080226b0 	.word	0x080226b0
 8019220:	08021f28 	.word	0x08021f28

08019224 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019224:	b590      	push	{r4, r7, lr}
 8019226:	b08b      	sub	sp, #44	@ 0x2c
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801922c:	2300      	movs	r3, #0
 801922e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d106      	bne.n	8019246 <tcp_zero_window_probe+0x22>
 8019238:	4b4c      	ldr	r3, [pc, #304]	@ (801936c <tcp_zero_window_probe+0x148>)
 801923a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801923e:	494c      	ldr	r1, [pc, #304]	@ (8019370 <tcp_zero_window_probe+0x14c>)
 8019240:	484c      	ldr	r0, [pc, #304]	@ (8019374 <tcp_zero_window_probe+0x150>)
 8019242:	f004 f921 	bl	801d488 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801924a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801924c:	6a3b      	ldr	r3, [r7, #32]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d101      	bne.n	8019256 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019252:	2300      	movs	r3, #0
 8019254:	e086      	b.n	8019364 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801925c:	2bff      	cmp	r3, #255	@ 0xff
 801925e:	d007      	beq.n	8019270 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019266:	3301      	adds	r3, #1
 8019268:	b2da      	uxtb	r2, r3
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019270:	6a3b      	ldr	r3, [r7, #32]
 8019272:	68db      	ldr	r3, [r3, #12]
 8019274:	899b      	ldrh	r3, [r3, #12]
 8019276:	b29b      	uxth	r3, r3
 8019278:	4618      	mov	r0, r3
 801927a:	f7f8 f91d 	bl	80114b8 <lwip_htons>
 801927e:	4603      	mov	r3, r0
 8019280:	b2db      	uxtb	r3, r3
 8019282:	f003 0301 	and.w	r3, r3, #1
 8019286:	2b00      	cmp	r3, #0
 8019288:	d005      	beq.n	8019296 <tcp_zero_window_probe+0x72>
 801928a:	6a3b      	ldr	r3, [r7, #32]
 801928c:	891b      	ldrh	r3, [r3, #8]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d101      	bne.n	8019296 <tcp_zero_window_probe+0x72>
 8019292:	2301      	movs	r3, #1
 8019294:	e000      	b.n	8019298 <tcp_zero_window_probe+0x74>
 8019296:	2300      	movs	r3, #0
 8019298:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801929a:	7ffb      	ldrb	r3, [r7, #31]
 801929c:	2b00      	cmp	r3, #0
 801929e:	bf0c      	ite	eq
 80192a0:	2301      	moveq	r3, #1
 80192a2:	2300      	movne	r3, #0
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80192a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192ac:	b299      	uxth	r1, r3
 80192ae:	6a3b      	ldr	r3, [r7, #32]
 80192b0:	68db      	ldr	r3, [r3, #12]
 80192b2:	685b      	ldr	r3, [r3, #4]
 80192b4:	8bba      	ldrh	r2, [r7, #28]
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7ff fdfa 	bl	8018eb0 <tcp_output_alloc_header>
 80192bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80192be:	69bb      	ldr	r3, [r7, #24]
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d102      	bne.n	80192ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80192c4:	f04f 33ff 	mov.w	r3, #4294967295
 80192c8:	e04c      	b.n	8019364 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80192ca:	69bb      	ldr	r3, [r7, #24]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80192d0:	7ffb      	ldrb	r3, [r7, #31]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d011      	beq.n	80192fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80192d6:	697b      	ldr	r3, [r7, #20]
 80192d8:	899b      	ldrh	r3, [r3, #12]
 80192da:	b29b      	uxth	r3, r3
 80192dc:	b21b      	sxth	r3, r3
 80192de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80192e2:	b21c      	sxth	r4, r3
 80192e4:	2011      	movs	r0, #17
 80192e6:	f7f8 f8e7 	bl	80114b8 <lwip_htons>
 80192ea:	4603      	mov	r3, r0
 80192ec:	b21b      	sxth	r3, r3
 80192ee:	4323      	orrs	r3, r4
 80192f0:	b21b      	sxth	r3, r3
 80192f2:	b29a      	uxth	r2, r3
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	819a      	strh	r2, [r3, #12]
 80192f8:	e010      	b.n	801931c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80192fa:	69bb      	ldr	r3, [r7, #24]
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	3314      	adds	r3, #20
 8019300:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019302:	6a3b      	ldr	r3, [r7, #32]
 8019304:	6858      	ldr	r0, [r3, #4]
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	685b      	ldr	r3, [r3, #4]
 801930a:	891a      	ldrh	r2, [r3, #8]
 801930c:	6a3b      	ldr	r3, [r7, #32]
 801930e:	891b      	ldrh	r3, [r3, #8]
 8019310:	1ad3      	subs	r3, r2, r3
 8019312:	b29b      	uxth	r3, r3
 8019314:	2201      	movs	r2, #1
 8019316:	6939      	ldr	r1, [r7, #16]
 8019318:	f7f9 fefc 	bl	8013114 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801931c:	6a3b      	ldr	r3, [r7, #32]
 801931e:	68db      	ldr	r3, [r3, #12]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	4618      	mov	r0, r3
 8019324:	f7f8 f8dd 	bl	80114e2 <lwip_htonl>
 8019328:	4603      	mov	r3, r0
 801932a:	3301      	adds	r3, #1
 801932c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	1ad3      	subs	r3, r2, r3
 8019336:	2b00      	cmp	r3, #0
 8019338:	da02      	bge.n	8019340 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	68fa      	ldr	r2, [r7, #12]
 801933e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019344:	2200      	movs	r2, #0
 8019346:	69b9      	ldr	r1, [r7, #24]
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f7ff fdef 	bl	8018f2c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801934e:	687a      	ldr	r2, [r7, #4]
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	3304      	adds	r3, #4
 8019354:	69b9      	ldr	r1, [r7, #24]
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f7ff fe26 	bl	8018fa8 <tcp_output_control_segment>
 801935c:	4603      	mov	r3, r0
 801935e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019360:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019364:	4618      	mov	r0, r3
 8019366:	372c      	adds	r7, #44	@ 0x2c
 8019368:	46bd      	mov	sp, r7
 801936a:	bd90      	pop	{r4, r7, pc}
 801936c:	08021ed4 	.word	0x08021ed4
 8019370:	080226cc 	.word	0x080226cc
 8019374:	08021f28 	.word	0x08021f28

08019378 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b082      	sub	sp, #8
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019380:	f7f9 ffb6 	bl	80132f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019384:	4b0a      	ldr	r3, [pc, #40]	@ (80193b0 <tcpip_tcp_timer+0x38>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d103      	bne.n	8019394 <tcpip_tcp_timer+0x1c>
 801938c:	4b09      	ldr	r3, [pc, #36]	@ (80193b4 <tcpip_tcp_timer+0x3c>)
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d005      	beq.n	80193a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019394:	2200      	movs	r2, #0
 8019396:	4908      	ldr	r1, [pc, #32]	@ (80193b8 <tcpip_tcp_timer+0x40>)
 8019398:	20fa      	movs	r0, #250	@ 0xfa
 801939a:	f000 f8f3 	bl	8019584 <sys_timeout>
 801939e:	e003      	b.n	80193a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80193a0:	4b06      	ldr	r3, [pc, #24]	@ (80193bc <tcpip_tcp_timer+0x44>)
 80193a2:	2200      	movs	r2, #0
 80193a4:	601a      	str	r2, [r3, #0]
  }
}
 80193a6:	bf00      	nop
 80193a8:	bf00      	nop
 80193aa:	3708      	adds	r7, #8
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}
 80193b0:	2000f3a0 	.word	0x2000f3a0
 80193b4:	2000f3a4 	.word	0x2000f3a4
 80193b8:	08019379 	.word	0x08019379
 80193bc:	2000f3ec 	.word	0x2000f3ec

080193c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80193c4:	4b0a      	ldr	r3, [pc, #40]	@ (80193f0 <tcp_timer_needed+0x30>)
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d10f      	bne.n	80193ec <tcp_timer_needed+0x2c>
 80193cc:	4b09      	ldr	r3, [pc, #36]	@ (80193f4 <tcp_timer_needed+0x34>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d103      	bne.n	80193dc <tcp_timer_needed+0x1c>
 80193d4:	4b08      	ldr	r3, [pc, #32]	@ (80193f8 <tcp_timer_needed+0x38>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d007      	beq.n	80193ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80193dc:	4b04      	ldr	r3, [pc, #16]	@ (80193f0 <tcp_timer_needed+0x30>)
 80193de:	2201      	movs	r2, #1
 80193e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80193e2:	2200      	movs	r2, #0
 80193e4:	4905      	ldr	r1, [pc, #20]	@ (80193fc <tcp_timer_needed+0x3c>)
 80193e6:	20fa      	movs	r0, #250	@ 0xfa
 80193e8:	f000 f8cc 	bl	8019584 <sys_timeout>
  }
}
 80193ec:	bf00      	nop
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	2000f3ec 	.word	0x2000f3ec
 80193f4:	2000f3a0 	.word	0x2000f3a0
 80193f8:	2000f3a4 	.word	0x2000f3a4
 80193fc:	08019379 	.word	0x08019379

08019400 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b086      	sub	sp, #24
 8019404:	af00      	add	r7, sp, #0
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801940c:	200a      	movs	r0, #10
 801940e:	f7f8 fd61 	bl	8011ed4 <memp_malloc>
 8019412:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019414:	693b      	ldr	r3, [r7, #16]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d109      	bne.n	801942e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d151      	bne.n	80194c4 <sys_timeout_abs+0xc4>
 8019420:	4b2a      	ldr	r3, [pc, #168]	@ (80194cc <sys_timeout_abs+0xcc>)
 8019422:	22be      	movs	r2, #190	@ 0xbe
 8019424:	492a      	ldr	r1, [pc, #168]	@ (80194d0 <sys_timeout_abs+0xd0>)
 8019426:	482b      	ldr	r0, [pc, #172]	@ (80194d4 <sys_timeout_abs+0xd4>)
 8019428:	f004 f82e 	bl	801d488 <iprintf>
    return;
 801942c:	e04a      	b.n	80194c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	2200      	movs	r2, #0
 8019432:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	68ba      	ldr	r2, [r7, #8]
 8019438:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801943a:	693b      	ldr	r3, [r7, #16]
 801943c:	687a      	ldr	r2, [r7, #4]
 801943e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019440:	693b      	ldr	r3, [r7, #16]
 8019442:	68fa      	ldr	r2, [r7, #12]
 8019444:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019446:	4b24      	ldr	r3, [pc, #144]	@ (80194d8 <sys_timeout_abs+0xd8>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	2b00      	cmp	r3, #0
 801944c:	d103      	bne.n	8019456 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801944e:	4a22      	ldr	r2, [pc, #136]	@ (80194d8 <sys_timeout_abs+0xd8>)
 8019450:	693b      	ldr	r3, [r7, #16]
 8019452:	6013      	str	r3, [r2, #0]
    return;
 8019454:	e037      	b.n	80194c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	685a      	ldr	r2, [r3, #4]
 801945a:	4b1f      	ldr	r3, [pc, #124]	@ (80194d8 <sys_timeout_abs+0xd8>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	685b      	ldr	r3, [r3, #4]
 8019460:	1ad3      	subs	r3, r2, r3
 8019462:	0fdb      	lsrs	r3, r3, #31
 8019464:	f003 0301 	and.w	r3, r3, #1
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2b00      	cmp	r3, #0
 801946c:	d007      	beq.n	801947e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801946e:	4b1a      	ldr	r3, [pc, #104]	@ (80194d8 <sys_timeout_abs+0xd8>)
 8019470:	681a      	ldr	r2, [r3, #0]
 8019472:	693b      	ldr	r3, [r7, #16]
 8019474:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019476:	4a18      	ldr	r2, [pc, #96]	@ (80194d8 <sys_timeout_abs+0xd8>)
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	6013      	str	r3, [r2, #0]
 801947c:	e023      	b.n	80194c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801947e:	4b16      	ldr	r3, [pc, #88]	@ (80194d8 <sys_timeout_abs+0xd8>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	617b      	str	r3, [r7, #20]
 8019484:	e01a      	b.n	80194bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019486:	697b      	ldr	r3, [r7, #20]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d00b      	beq.n	80194a6 <sys_timeout_abs+0xa6>
 801948e:	693b      	ldr	r3, [r7, #16]
 8019490:	685a      	ldr	r2, [r3, #4]
 8019492:	697b      	ldr	r3, [r7, #20]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	685b      	ldr	r3, [r3, #4]
 8019498:	1ad3      	subs	r3, r2, r3
 801949a:	0fdb      	lsrs	r3, r3, #31
 801949c:	f003 0301 	and.w	r3, r3, #1
 80194a0:	b2db      	uxtb	r3, r3
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d007      	beq.n	80194b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80194a6:	697b      	ldr	r3, [r7, #20]
 80194a8:	681a      	ldr	r2, [r3, #0]
 80194aa:	693b      	ldr	r3, [r7, #16]
 80194ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80194ae:	697b      	ldr	r3, [r7, #20]
 80194b0:	693a      	ldr	r2, [r7, #16]
 80194b2:	601a      	str	r2, [r3, #0]
        break;
 80194b4:	e007      	b.n	80194c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80194b6:	697b      	ldr	r3, [r7, #20]
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	617b      	str	r3, [r7, #20]
 80194bc:	697b      	ldr	r3, [r7, #20]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d1e1      	bne.n	8019486 <sys_timeout_abs+0x86>
 80194c2:	e000      	b.n	80194c6 <sys_timeout_abs+0xc6>
    return;
 80194c4:	bf00      	nop
      }
    }
  }
}
 80194c6:	3718      	adds	r7, #24
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd80      	pop	{r7, pc}
 80194cc:	080226f0 	.word	0x080226f0
 80194d0:	08022724 	.word	0x08022724
 80194d4:	08022764 	.word	0x08022764
 80194d8:	2000f3e4 	.word	0x2000f3e4

080194dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b086      	sub	sp, #24
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80194e8:	697b      	ldr	r3, [r7, #20]
 80194ea:	685b      	ldr	r3, [r3, #4]
 80194ec:	4798      	blx	r3

  now = sys_now();
 80194ee:	f7f1 fb39 	bl	800ab64 <sys_now>
 80194f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	4b0f      	ldr	r3, [pc, #60]	@ (8019538 <lwip_cyclic_timer+0x5c>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4413      	add	r3, r2
 80194fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019500:	68fa      	ldr	r2, [r7, #12]
 8019502:	693b      	ldr	r3, [r7, #16]
 8019504:	1ad3      	subs	r3, r2, r3
 8019506:	0fdb      	lsrs	r3, r3, #31
 8019508:	f003 0301 	and.w	r3, r3, #1
 801950c:	b2db      	uxtb	r3, r3
 801950e:	2b00      	cmp	r3, #0
 8019510:	d009      	beq.n	8019526 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	681a      	ldr	r2, [r3, #0]
 8019516:	693b      	ldr	r3, [r7, #16]
 8019518:	4413      	add	r3, r2
 801951a:	687a      	ldr	r2, [r7, #4]
 801951c:	4907      	ldr	r1, [pc, #28]	@ (801953c <lwip_cyclic_timer+0x60>)
 801951e:	4618      	mov	r0, r3
 8019520:	f7ff ff6e 	bl	8019400 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019524:	e004      	b.n	8019530 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019526:	687a      	ldr	r2, [r7, #4]
 8019528:	4904      	ldr	r1, [pc, #16]	@ (801953c <lwip_cyclic_timer+0x60>)
 801952a:	68f8      	ldr	r0, [r7, #12]
 801952c:	f7ff ff68 	bl	8019400 <sys_timeout_abs>
}
 8019530:	bf00      	nop
 8019532:	3718      	adds	r7, #24
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}
 8019538:	2000f3e8 	.word	0x2000f3e8
 801953c:	080194dd 	.word	0x080194dd

08019540 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019546:	2301      	movs	r3, #1
 8019548:	607b      	str	r3, [r7, #4]
 801954a:	e00e      	b.n	801956a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801954c:	4a0b      	ldr	r2, [pc, #44]	@ (801957c <sys_timeouts_init+0x3c>)
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	00db      	lsls	r3, r3, #3
 8019558:	4a08      	ldr	r2, [pc, #32]	@ (801957c <sys_timeouts_init+0x3c>)
 801955a:	4413      	add	r3, r2
 801955c:	461a      	mov	r2, r3
 801955e:	4908      	ldr	r1, [pc, #32]	@ (8019580 <sys_timeouts_init+0x40>)
 8019560:	f000 f810 	bl	8019584 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	3301      	adds	r3, #1
 8019568:	607b      	str	r3, [r7, #4]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b02      	cmp	r3, #2
 801956e:	d9ed      	bls.n	801954c <sys_timeouts_init+0xc>
  }
}
 8019570:	bf00      	nop
 8019572:	bf00      	nop
 8019574:	3708      	adds	r7, #8
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	08024a04 	.word	0x08024a04
 8019580:	080194dd 	.word	0x080194dd

08019584 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b086      	sub	sp, #24
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019596:	d306      	bcc.n	80195a6 <sys_timeout+0x22>
 8019598:	4b0a      	ldr	r3, [pc, #40]	@ (80195c4 <sys_timeout+0x40>)
 801959a:	f240 1229 	movw	r2, #297	@ 0x129
 801959e:	490a      	ldr	r1, [pc, #40]	@ (80195c8 <sys_timeout+0x44>)
 80195a0:	480a      	ldr	r0, [pc, #40]	@ (80195cc <sys_timeout+0x48>)
 80195a2:	f003 ff71 	bl	801d488 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80195a6:	f7f1 fadd 	bl	800ab64 <sys_now>
 80195aa:	4602      	mov	r2, r0
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	4413      	add	r3, r2
 80195b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80195b2:	687a      	ldr	r2, [r7, #4]
 80195b4:	68b9      	ldr	r1, [r7, #8]
 80195b6:	6978      	ldr	r0, [r7, #20]
 80195b8:	f7ff ff22 	bl	8019400 <sys_timeout_abs>
#endif
}
 80195bc:	bf00      	nop
 80195be:	3718      	adds	r7, #24
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}
 80195c4:	080226f0 	.word	0x080226f0
 80195c8:	0802278c 	.word	0x0802278c
 80195cc:	08022764 	.word	0x08022764

080195d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80195d6:	f7f1 fac5 	bl	800ab64 <sys_now>
 80195da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80195dc:	4b17      	ldr	r3, [pc, #92]	@ (801963c <sys_check_timeouts+0x6c>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d022      	beq.n	801962e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	685b      	ldr	r3, [r3, #4]
 80195ec:	68fa      	ldr	r2, [r7, #12]
 80195ee:	1ad3      	subs	r3, r2, r3
 80195f0:	0fdb      	lsrs	r3, r3, #31
 80195f2:	f003 0301 	and.w	r3, r3, #1
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d11a      	bne.n	8019632 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80195fc:	68bb      	ldr	r3, [r7, #8]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	4a0e      	ldr	r2, [pc, #56]	@ (801963c <sys_check_timeouts+0x6c>)
 8019602:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	689b      	ldr	r3, [r3, #8]
 8019608:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801960a:	68bb      	ldr	r3, [r7, #8]
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	4a0a      	ldr	r2, [pc, #40]	@ (8019640 <sys_check_timeouts+0x70>)
 8019616:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019618:	68b9      	ldr	r1, [r7, #8]
 801961a:	200a      	movs	r0, #10
 801961c:	f7f8 fcd0 	bl	8011fc0 <memp_free>
    if (handler != NULL) {
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d0da      	beq.n	80195dc <sys_check_timeouts+0xc>
      handler(arg);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6838      	ldr	r0, [r7, #0]
 801962a:	4798      	blx	r3
  do {
 801962c:	e7d6      	b.n	80195dc <sys_check_timeouts+0xc>
      return;
 801962e:	bf00      	nop
 8019630:	e000      	b.n	8019634 <sys_check_timeouts+0x64>
      return;
 8019632:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019634:	3710      	adds	r7, #16
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop
 801963c:	2000f3e4 	.word	0x2000f3e4
 8019640:	2000f3e8 	.word	0x2000f3e8

08019644 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801964a:	4b16      	ldr	r3, [pc, #88]	@ (80196a4 <sys_timeouts_sleeptime+0x60>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d102      	bne.n	8019658 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019652:	f04f 33ff 	mov.w	r3, #4294967295
 8019656:	e020      	b.n	801969a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019658:	f7f1 fa84 	bl	800ab64 <sys_now>
 801965c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801965e:	4b11      	ldr	r3, [pc, #68]	@ (80196a4 <sys_timeouts_sleeptime+0x60>)
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	685a      	ldr	r2, [r3, #4]
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	1ad3      	subs	r3, r2, r3
 8019668:	0fdb      	lsrs	r3, r3, #31
 801966a:	f003 0301 	and.w	r3, r3, #1
 801966e:	b2db      	uxtb	r3, r3
 8019670:	2b00      	cmp	r3, #0
 8019672:	d001      	beq.n	8019678 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019674:	2300      	movs	r3, #0
 8019676:	e010      	b.n	801969a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019678:	4b0a      	ldr	r3, [pc, #40]	@ (80196a4 <sys_timeouts_sleeptime+0x60>)
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	685a      	ldr	r2, [r3, #4]
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	1ad3      	subs	r3, r2, r3
 8019682:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019684:	683b      	ldr	r3, [r7, #0]
 8019686:	2b00      	cmp	r3, #0
 8019688:	da06      	bge.n	8019698 <sys_timeouts_sleeptime+0x54>
 801968a:	4b07      	ldr	r3, [pc, #28]	@ (80196a8 <sys_timeouts_sleeptime+0x64>)
 801968c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019690:	4906      	ldr	r1, [pc, #24]	@ (80196ac <sys_timeouts_sleeptime+0x68>)
 8019692:	4807      	ldr	r0, [pc, #28]	@ (80196b0 <sys_timeouts_sleeptime+0x6c>)
 8019694:	f003 fef8 	bl	801d488 <iprintf>
    return ret;
 8019698:	683b      	ldr	r3, [r7, #0]
  }
}
 801969a:	4618      	mov	r0, r3
 801969c:	3708      	adds	r7, #8
 801969e:	46bd      	mov	sp, r7
 80196a0:	bd80      	pop	{r7, pc}
 80196a2:	bf00      	nop
 80196a4:	2000f3e4 	.word	0x2000f3e4
 80196a8:	080226f0 	.word	0x080226f0
 80196ac:	080227c4 	.word	0x080227c4
 80196b0:	08022764 	.word	0x08022764

080196b4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80196b4:	b580      	push	{r7, lr}
 80196b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80196b8:	f003 f98e 	bl	801c9d8 <rand>
 80196bc:	4603      	mov	r3, r0
 80196be:	b29b      	uxth	r3, r3
 80196c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80196c4:	b29b      	uxth	r3, r3
 80196c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80196ca:	b29a      	uxth	r2, r3
 80196cc:	4b01      	ldr	r3, [pc, #4]	@ (80196d4 <udp_init+0x20>)
 80196ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80196d0:	bf00      	nop
 80196d2:	bd80      	pop	{r7, pc}
 80196d4:	20000084 	.word	0x20000084

080196d8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80196d8:	b480      	push	{r7}
 80196da:	b083      	sub	sp, #12
 80196dc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80196de:	2300      	movs	r3, #0
 80196e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80196e2:	4b17      	ldr	r3, [pc, #92]	@ (8019740 <udp_new_port+0x68>)
 80196e4:	881b      	ldrh	r3, [r3, #0]
 80196e6:	1c5a      	adds	r2, r3, #1
 80196e8:	b291      	uxth	r1, r2
 80196ea:	4a15      	ldr	r2, [pc, #84]	@ (8019740 <udp_new_port+0x68>)
 80196ec:	8011      	strh	r1, [r2, #0]
 80196ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80196f2:	4293      	cmp	r3, r2
 80196f4:	d103      	bne.n	80196fe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80196f6:	4b12      	ldr	r3, [pc, #72]	@ (8019740 <udp_new_port+0x68>)
 80196f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80196fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80196fe:	4b11      	ldr	r3, [pc, #68]	@ (8019744 <udp_new_port+0x6c>)
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	603b      	str	r3, [r7, #0]
 8019704:	e011      	b.n	801972a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019706:	683b      	ldr	r3, [r7, #0]
 8019708:	8a5a      	ldrh	r2, [r3, #18]
 801970a:	4b0d      	ldr	r3, [pc, #52]	@ (8019740 <udp_new_port+0x68>)
 801970c:	881b      	ldrh	r3, [r3, #0]
 801970e:	429a      	cmp	r2, r3
 8019710:	d108      	bne.n	8019724 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019712:	88fb      	ldrh	r3, [r7, #6]
 8019714:	3301      	adds	r3, #1
 8019716:	80fb      	strh	r3, [r7, #6]
 8019718:	88fb      	ldrh	r3, [r7, #6]
 801971a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801971e:	d3e0      	bcc.n	80196e2 <udp_new_port+0xa>
        return 0;
 8019720:	2300      	movs	r3, #0
 8019722:	e007      	b.n	8019734 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019724:	683b      	ldr	r3, [r7, #0]
 8019726:	68db      	ldr	r3, [r3, #12]
 8019728:	603b      	str	r3, [r7, #0]
 801972a:	683b      	ldr	r3, [r7, #0]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d1ea      	bne.n	8019706 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019730:	4b03      	ldr	r3, [pc, #12]	@ (8019740 <udp_new_port+0x68>)
 8019732:	881b      	ldrh	r3, [r3, #0]
}
 8019734:	4618      	mov	r0, r3
 8019736:	370c      	adds	r7, #12
 8019738:	46bd      	mov	sp, r7
 801973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973e:	4770      	bx	lr
 8019740:	20000084 	.word	0x20000084
 8019744:	2000f3f0 	.word	0x2000f3f0

08019748 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019748:	b580      	push	{r7, lr}
 801974a:	b084      	sub	sp, #16
 801974c:	af00      	add	r7, sp, #0
 801974e:	60f8      	str	r0, [r7, #12]
 8019750:	60b9      	str	r1, [r7, #8]
 8019752:	4613      	mov	r3, r2
 8019754:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019756:	68fb      	ldr	r3, [r7, #12]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d105      	bne.n	8019768 <udp_input_local_match+0x20>
 801975c:	4b27      	ldr	r3, [pc, #156]	@ (80197fc <udp_input_local_match+0xb4>)
 801975e:	2287      	movs	r2, #135	@ 0x87
 8019760:	4927      	ldr	r1, [pc, #156]	@ (8019800 <udp_input_local_match+0xb8>)
 8019762:	4828      	ldr	r0, [pc, #160]	@ (8019804 <udp_input_local_match+0xbc>)
 8019764:	f003 fe90 	bl	801d488 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	2b00      	cmp	r3, #0
 801976c:	d105      	bne.n	801977a <udp_input_local_match+0x32>
 801976e:	4b23      	ldr	r3, [pc, #140]	@ (80197fc <udp_input_local_match+0xb4>)
 8019770:	2288      	movs	r2, #136	@ 0x88
 8019772:	4925      	ldr	r1, [pc, #148]	@ (8019808 <udp_input_local_match+0xc0>)
 8019774:	4823      	ldr	r0, [pc, #140]	@ (8019804 <udp_input_local_match+0xbc>)
 8019776:	f003 fe87 	bl	801d488 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	7a1b      	ldrb	r3, [r3, #8]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d00b      	beq.n	801979a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	7a1a      	ldrb	r2, [r3, #8]
 8019786:	4b21      	ldr	r3, [pc, #132]	@ (801980c <udp_input_local_match+0xc4>)
 8019788:	685b      	ldr	r3, [r3, #4]
 801978a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801978e:	3301      	adds	r3, #1
 8019790:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019792:	429a      	cmp	r2, r3
 8019794:	d001      	beq.n	801979a <udp_input_local_match+0x52>
    return 0;
 8019796:	2300      	movs	r3, #0
 8019798:	e02b      	b.n	80197f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801979a:	79fb      	ldrb	r3, [r7, #7]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d018      	beq.n	80197d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d013      	beq.n	80197ce <udp_input_local_match+0x86>
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d00f      	beq.n	80197ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80197ae:	4b17      	ldr	r3, [pc, #92]	@ (801980c <udp_input_local_match+0xc4>)
 80197b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80197b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80197b6:	d00a      	beq.n	80197ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	681a      	ldr	r2, [r3, #0]
 80197bc:	4b13      	ldr	r3, [pc, #76]	@ (801980c <udp_input_local_match+0xc4>)
 80197be:	695b      	ldr	r3, [r3, #20]
 80197c0:	405a      	eors	r2, r3
 80197c2:	68bb      	ldr	r3, [r7, #8]
 80197c4:	3308      	adds	r3, #8
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d110      	bne.n	80197f0 <udp_input_local_match+0xa8>
          return 1;
 80197ce:	2301      	movs	r3, #1
 80197d0:	e00f      	b.n	80197f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d009      	beq.n	80197ec <udp_input_local_match+0xa4>
 80197d8:	68fb      	ldr	r3, [r7, #12]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d005      	beq.n	80197ec <udp_input_local_match+0xa4>
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	681a      	ldr	r2, [r3, #0]
 80197e4:	4b09      	ldr	r3, [pc, #36]	@ (801980c <udp_input_local_match+0xc4>)
 80197e6:	695b      	ldr	r3, [r3, #20]
 80197e8:	429a      	cmp	r2, r3
 80197ea:	d101      	bne.n	80197f0 <udp_input_local_match+0xa8>
        return 1;
 80197ec:	2301      	movs	r3, #1
 80197ee:	e000      	b.n	80197f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80197f0:	2300      	movs	r3, #0
}
 80197f2:	4618      	mov	r0, r3
 80197f4:	3710      	adds	r7, #16
 80197f6:	46bd      	mov	sp, r7
 80197f8:	bd80      	pop	{r7, pc}
 80197fa:	bf00      	nop
 80197fc:	080227d8 	.word	0x080227d8
 8019800:	08022808 	.word	0x08022808
 8019804:	0802282c 	.word	0x0802282c
 8019808:	08022854 	.word	0x08022854
 801980c:	2000bc40 	.word	0x2000bc40

08019810 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019810:	b590      	push	{r4, r7, lr}
 8019812:	b08d      	sub	sp, #52	@ 0x34
 8019814:	af02      	add	r7, sp, #8
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801981a:	2300      	movs	r3, #0
 801981c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d105      	bne.n	8019830 <udp_input+0x20>
 8019824:	4b7c      	ldr	r3, [pc, #496]	@ (8019a18 <udp_input+0x208>)
 8019826:	22cf      	movs	r2, #207	@ 0xcf
 8019828:	497c      	ldr	r1, [pc, #496]	@ (8019a1c <udp_input+0x20c>)
 801982a:	487d      	ldr	r0, [pc, #500]	@ (8019a20 <udp_input+0x210>)
 801982c:	f003 fe2c 	bl	801d488 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d105      	bne.n	8019842 <udp_input+0x32>
 8019836:	4b78      	ldr	r3, [pc, #480]	@ (8019a18 <udp_input+0x208>)
 8019838:	22d0      	movs	r2, #208	@ 0xd0
 801983a:	497a      	ldr	r1, [pc, #488]	@ (8019a24 <udp_input+0x214>)
 801983c:	4878      	ldr	r0, [pc, #480]	@ (8019a20 <udp_input+0x210>)
 801983e:	f003 fe23 	bl	801d488 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	895b      	ldrh	r3, [r3, #10]
 8019846:	2b07      	cmp	r3, #7
 8019848:	d803      	bhi.n	8019852 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f7f9 fa5c 	bl	8012d08 <pbuf_free>
    goto end;
 8019850:	e0de      	b.n	8019a10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019858:	4b73      	ldr	r3, [pc, #460]	@ (8019a28 <udp_input+0x218>)
 801985a:	695b      	ldr	r3, [r3, #20]
 801985c:	4a72      	ldr	r2, [pc, #456]	@ (8019a28 <udp_input+0x218>)
 801985e:	6812      	ldr	r2, [r2, #0]
 8019860:	4611      	mov	r1, r2
 8019862:	4618      	mov	r0, r3
 8019864:	f001 ff80 	bl	801b768 <ip4_addr_isbroadcast_u32>
 8019868:	4603      	mov	r3, r0
 801986a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801986c:	697b      	ldr	r3, [r7, #20]
 801986e:	881b      	ldrh	r3, [r3, #0]
 8019870:	b29b      	uxth	r3, r3
 8019872:	4618      	mov	r0, r3
 8019874:	f7f7 fe20 	bl	80114b8 <lwip_htons>
 8019878:	4603      	mov	r3, r0
 801987a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	885b      	ldrh	r3, [r3, #2]
 8019880:	b29b      	uxth	r3, r3
 8019882:	4618      	mov	r0, r3
 8019884:	f7f7 fe18 	bl	80114b8 <lwip_htons>
 8019888:	4603      	mov	r3, r0
 801988a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801988c:	2300      	movs	r3, #0
 801988e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019890:	2300      	movs	r3, #0
 8019892:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019894:	2300      	movs	r3, #0
 8019896:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019898:	4b64      	ldr	r3, [pc, #400]	@ (8019a2c <udp_input+0x21c>)
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	627b      	str	r3, [r7, #36]	@ 0x24
 801989e:	e054      	b.n	801994a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80198a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198a2:	8a5b      	ldrh	r3, [r3, #18]
 80198a4:	89fa      	ldrh	r2, [r7, #14]
 80198a6:	429a      	cmp	r2, r3
 80198a8:	d14a      	bne.n	8019940 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80198aa:	7cfb      	ldrb	r3, [r7, #19]
 80198ac:	461a      	mov	r2, r3
 80198ae:	6839      	ldr	r1, [r7, #0]
 80198b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80198b2:	f7ff ff49 	bl	8019748 <udp_input_local_match>
 80198b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d041      	beq.n	8019940 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80198bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198be:	7c1b      	ldrb	r3, [r3, #16]
 80198c0:	f003 0304 	and.w	r3, r3, #4
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d11d      	bne.n	8019904 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80198c8:	69fb      	ldr	r3, [r7, #28]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d102      	bne.n	80198d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80198ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198d0:	61fb      	str	r3, [r7, #28]
 80198d2:	e017      	b.n	8019904 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80198d4:	7cfb      	ldrb	r3, [r7, #19]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d014      	beq.n	8019904 <udp_input+0xf4>
 80198da:	4b53      	ldr	r3, [pc, #332]	@ (8019a28 <udp_input+0x218>)
 80198dc:	695b      	ldr	r3, [r3, #20]
 80198de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198e2:	d10f      	bne.n	8019904 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80198e4:	69fb      	ldr	r3, [r7, #28]
 80198e6:	681a      	ldr	r2, [r3, #0]
 80198e8:	683b      	ldr	r3, [r7, #0]
 80198ea:	3304      	adds	r3, #4
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	429a      	cmp	r2, r3
 80198f0:	d008      	beq.n	8019904 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80198f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80198f4:	681a      	ldr	r2, [r3, #0]
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	3304      	adds	r3, #4
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	429a      	cmp	r2, r3
 80198fe:	d101      	bne.n	8019904 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019902:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019906:	8a9b      	ldrh	r3, [r3, #20]
 8019908:	8a3a      	ldrh	r2, [r7, #16]
 801990a:	429a      	cmp	r2, r3
 801990c:	d118      	bne.n	8019940 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801990e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019910:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019912:	2b00      	cmp	r3, #0
 8019914:	d005      	beq.n	8019922 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019918:	685a      	ldr	r2, [r3, #4]
 801991a:	4b43      	ldr	r3, [pc, #268]	@ (8019a28 <udp_input+0x218>)
 801991c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801991e:	429a      	cmp	r2, r3
 8019920:	d10e      	bne.n	8019940 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019922:	6a3b      	ldr	r3, [r7, #32]
 8019924:	2b00      	cmp	r3, #0
 8019926:	d014      	beq.n	8019952 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801992a:	68da      	ldr	r2, [r3, #12]
 801992c:	6a3b      	ldr	r3, [r7, #32]
 801992e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019930:	4b3e      	ldr	r3, [pc, #248]	@ (8019a2c <udp_input+0x21c>)
 8019932:	681a      	ldr	r2, [r3, #0]
 8019934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019936:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019938:	4a3c      	ldr	r2, [pc, #240]	@ (8019a2c <udp_input+0x21c>)
 801993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801993c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801993e:	e008      	b.n	8019952 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019942:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019946:	68db      	ldr	r3, [r3, #12]
 8019948:	627b      	str	r3, [r7, #36]	@ 0x24
 801994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801994c:	2b00      	cmp	r3, #0
 801994e:	d1a7      	bne.n	80198a0 <udp_input+0x90>
 8019950:	e000      	b.n	8019954 <udp_input+0x144>
        break;
 8019952:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019956:	2b00      	cmp	r3, #0
 8019958:	d101      	bne.n	801995e <udp_input+0x14e>
    pcb = uncon_pcb;
 801995a:	69fb      	ldr	r3, [r7, #28]
 801995c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019960:	2b00      	cmp	r3, #0
 8019962:	d002      	beq.n	801996a <udp_input+0x15a>
    for_us = 1;
 8019964:	2301      	movs	r3, #1
 8019966:	76fb      	strb	r3, [r7, #27]
 8019968:	e00a      	b.n	8019980 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	3304      	adds	r3, #4
 801996e:	681a      	ldr	r2, [r3, #0]
 8019970:	4b2d      	ldr	r3, [pc, #180]	@ (8019a28 <udp_input+0x218>)
 8019972:	695b      	ldr	r3, [r3, #20]
 8019974:	429a      	cmp	r2, r3
 8019976:	bf0c      	ite	eq
 8019978:	2301      	moveq	r3, #1
 801997a:	2300      	movne	r3, #0
 801997c:	b2db      	uxtb	r3, r3
 801997e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019980:	7efb      	ldrb	r3, [r7, #27]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d041      	beq.n	8019a0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019986:	2108      	movs	r1, #8
 8019988:	6878      	ldr	r0, [r7, #4]
 801998a:	f7f9 f937 	bl	8012bfc <pbuf_remove_header>
 801998e:	4603      	mov	r3, r0
 8019990:	2b00      	cmp	r3, #0
 8019992:	d00a      	beq.n	80199aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019994:	4b20      	ldr	r3, [pc, #128]	@ (8019a18 <udp_input+0x208>)
 8019996:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801999a:	4925      	ldr	r1, [pc, #148]	@ (8019a30 <udp_input+0x220>)
 801999c:	4820      	ldr	r0, [pc, #128]	@ (8019a20 <udp_input+0x210>)
 801999e:	f003 fd73 	bl	801d488 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80199a2:	6878      	ldr	r0, [r7, #4]
 80199a4:	f7f9 f9b0 	bl	8012d08 <pbuf_free>
      goto end;
 80199a8:	e032      	b.n	8019a10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80199aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d012      	beq.n	80199d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80199b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199b2:	699b      	ldr	r3, [r3, #24]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d00a      	beq.n	80199ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80199b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199ba:	699c      	ldr	r4, [r3, #24]
 80199bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199be:	69d8      	ldr	r0, [r3, #28]
 80199c0:	8a3b      	ldrh	r3, [r7, #16]
 80199c2:	9300      	str	r3, [sp, #0]
 80199c4:	4b1b      	ldr	r3, [pc, #108]	@ (8019a34 <udp_input+0x224>)
 80199c6:	687a      	ldr	r2, [r7, #4]
 80199c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80199ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80199cc:	e021      	b.n	8019a12 <udp_input+0x202>
        pbuf_free(p);
 80199ce:	6878      	ldr	r0, [r7, #4]
 80199d0:	f7f9 f99a 	bl	8012d08 <pbuf_free>
        goto end;
 80199d4:	e01c      	b.n	8019a10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80199d6:	7cfb      	ldrb	r3, [r7, #19]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d112      	bne.n	8019a02 <udp_input+0x1f2>
 80199dc:	4b12      	ldr	r3, [pc, #72]	@ (8019a28 <udp_input+0x218>)
 80199de:	695b      	ldr	r3, [r3, #20]
 80199e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80199e4:	2be0      	cmp	r3, #224	@ 0xe0
 80199e6:	d00c      	beq.n	8019a02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80199e8:	4b0f      	ldr	r3, [pc, #60]	@ (8019a28 <udp_input+0x218>)
 80199ea:	899b      	ldrh	r3, [r3, #12]
 80199ec:	3308      	adds	r3, #8
 80199ee:	b29b      	uxth	r3, r3
 80199f0:	b21b      	sxth	r3, r3
 80199f2:	4619      	mov	r1, r3
 80199f4:	6878      	ldr	r0, [r7, #4]
 80199f6:	f7f9 f974 	bl	8012ce2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80199fa:	2103      	movs	r1, #3
 80199fc:	6878      	ldr	r0, [r7, #4]
 80199fe:	f001 fb93 	bl	801b128 <icmp_dest_unreach>
      pbuf_free(p);
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f7f9 f980 	bl	8012d08 <pbuf_free>
  return;
 8019a08:	e003      	b.n	8019a12 <udp_input+0x202>
    pbuf_free(p);
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f7f9 f97c 	bl	8012d08 <pbuf_free>
  return;
 8019a10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019a12:	372c      	adds	r7, #44	@ 0x2c
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd90      	pop	{r4, r7, pc}
 8019a18:	080227d8 	.word	0x080227d8
 8019a1c:	0802287c 	.word	0x0802287c
 8019a20:	0802282c 	.word	0x0802282c
 8019a24:	08022894 	.word	0x08022894
 8019a28:	2000bc40 	.word	0x2000bc40
 8019a2c:	2000f3f0 	.word	0x2000f3f0
 8019a30:	080228b0 	.word	0x080228b0
 8019a34:	2000bc50 	.word	0x2000bc50

08019a38 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b082      	sub	sp, #8
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d109      	bne.n	8019a5c <udp_send+0x24>
 8019a48:	4b11      	ldr	r3, [pc, #68]	@ (8019a90 <udp_send+0x58>)
 8019a4a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8019a4e:	4911      	ldr	r1, [pc, #68]	@ (8019a94 <udp_send+0x5c>)
 8019a50:	4811      	ldr	r0, [pc, #68]	@ (8019a98 <udp_send+0x60>)
 8019a52:	f003 fd19 	bl	801d488 <iprintf>
 8019a56:	f06f 030f 	mvn.w	r3, #15
 8019a5a:	e015      	b.n	8019a88 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019a5c:	683b      	ldr	r3, [r7, #0]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d109      	bne.n	8019a76 <udp_send+0x3e>
 8019a62:	4b0b      	ldr	r3, [pc, #44]	@ (8019a90 <udp_send+0x58>)
 8019a64:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8019a68:	490c      	ldr	r1, [pc, #48]	@ (8019a9c <udp_send+0x64>)
 8019a6a:	480b      	ldr	r0, [pc, #44]	@ (8019a98 <udp_send+0x60>)
 8019a6c:	f003 fd0c 	bl	801d488 <iprintf>
 8019a70:	f06f 030f 	mvn.w	r3, #15
 8019a74:	e008      	b.n	8019a88 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	1d1a      	adds	r2, r3, #4
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	8a9b      	ldrh	r3, [r3, #20]
 8019a7e:	6839      	ldr	r1, [r7, #0]
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	f000 f80d 	bl	8019aa0 <udp_sendto>
 8019a86:	4603      	mov	r3, r0
}
 8019a88:	4618      	mov	r0, r3
 8019a8a:	3708      	adds	r7, #8
 8019a8c:	46bd      	mov	sp, r7
 8019a8e:	bd80      	pop	{r7, pc}
 8019a90:	080227d8 	.word	0x080227d8
 8019a94:	080228cc 	.word	0x080228cc
 8019a98:	0802282c 	.word	0x0802282c
 8019a9c:	080228e4 	.word	0x080228e4

08019aa0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b088      	sub	sp, #32
 8019aa4:	af02      	add	r7, sp, #8
 8019aa6:	60f8      	str	r0, [r7, #12]
 8019aa8:	60b9      	str	r1, [r7, #8]
 8019aaa:	607a      	str	r2, [r7, #4]
 8019aac:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d109      	bne.n	8019ac8 <udp_sendto+0x28>
 8019ab4:	4b23      	ldr	r3, [pc, #140]	@ (8019b44 <udp_sendto+0xa4>)
 8019ab6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019aba:	4923      	ldr	r1, [pc, #140]	@ (8019b48 <udp_sendto+0xa8>)
 8019abc:	4823      	ldr	r0, [pc, #140]	@ (8019b4c <udp_sendto+0xac>)
 8019abe:	f003 fce3 	bl	801d488 <iprintf>
 8019ac2:	f06f 030f 	mvn.w	r3, #15
 8019ac6:	e038      	b.n	8019b3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d109      	bne.n	8019ae2 <udp_sendto+0x42>
 8019ace:	4b1d      	ldr	r3, [pc, #116]	@ (8019b44 <udp_sendto+0xa4>)
 8019ad0:	f240 2219 	movw	r2, #537	@ 0x219
 8019ad4:	491e      	ldr	r1, [pc, #120]	@ (8019b50 <udp_sendto+0xb0>)
 8019ad6:	481d      	ldr	r0, [pc, #116]	@ (8019b4c <udp_sendto+0xac>)
 8019ad8:	f003 fcd6 	bl	801d488 <iprintf>
 8019adc:	f06f 030f 	mvn.w	r3, #15
 8019ae0:	e02b      	b.n	8019b3a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d109      	bne.n	8019afc <udp_sendto+0x5c>
 8019ae8:	4b16      	ldr	r3, [pc, #88]	@ (8019b44 <udp_sendto+0xa4>)
 8019aea:	f240 221a 	movw	r2, #538	@ 0x21a
 8019aee:	4919      	ldr	r1, [pc, #100]	@ (8019b54 <udp_sendto+0xb4>)
 8019af0:	4816      	ldr	r0, [pc, #88]	@ (8019b4c <udp_sendto+0xac>)
 8019af2:	f003 fcc9 	bl	801d488 <iprintf>
 8019af6:	f06f 030f 	mvn.w	r3, #15
 8019afa:	e01e      	b.n	8019b3a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	7a1b      	ldrb	r3, [r3, #8]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d006      	beq.n	8019b12 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	7a1b      	ldrb	r3, [r3, #8]
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f7f8 fd6f 	bl	80125ec <netif_get_by_index>
 8019b0e:	6178      	str	r0, [r7, #20]
 8019b10:	e003      	b.n	8019b1a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019b12:	6878      	ldr	r0, [r7, #4]
 8019b14:	f001 fb92 	bl	801b23c <ip4_route>
 8019b18:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019b1a:	697b      	ldr	r3, [r7, #20]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d102      	bne.n	8019b26 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019b20:	f06f 0303 	mvn.w	r3, #3
 8019b24:	e009      	b.n	8019b3a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019b26:	887a      	ldrh	r2, [r7, #2]
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	9300      	str	r3, [sp, #0]
 8019b2c:	4613      	mov	r3, r2
 8019b2e:	687a      	ldr	r2, [r7, #4]
 8019b30:	68b9      	ldr	r1, [r7, #8]
 8019b32:	68f8      	ldr	r0, [r7, #12]
 8019b34:	f000 f810 	bl	8019b58 <udp_sendto_if>
 8019b38:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3718      	adds	r7, #24
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	080227d8 	.word	0x080227d8
 8019b48:	080228fc 	.word	0x080228fc
 8019b4c:	0802282c 	.word	0x0802282c
 8019b50:	08022914 	.word	0x08022914
 8019b54:	08022930 	.word	0x08022930

08019b58 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019b58:	b580      	push	{r7, lr}
 8019b5a:	b088      	sub	sp, #32
 8019b5c:	af02      	add	r7, sp, #8
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	60b9      	str	r1, [r7, #8]
 8019b62:	607a      	str	r2, [r7, #4]
 8019b64:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d109      	bne.n	8019b80 <udp_sendto_if+0x28>
 8019b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8019c28 <udp_sendto_if+0xd0>)
 8019b6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019b72:	492e      	ldr	r1, [pc, #184]	@ (8019c2c <udp_sendto_if+0xd4>)
 8019b74:	482e      	ldr	r0, [pc, #184]	@ (8019c30 <udp_sendto_if+0xd8>)
 8019b76:	f003 fc87 	bl	801d488 <iprintf>
 8019b7a:	f06f 030f 	mvn.w	r3, #15
 8019b7e:	e04f      	b.n	8019c20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019b80:	68bb      	ldr	r3, [r7, #8]
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d109      	bne.n	8019b9a <udp_sendto_if+0x42>
 8019b86:	4b28      	ldr	r3, [pc, #160]	@ (8019c28 <udp_sendto_if+0xd0>)
 8019b88:	f240 2281 	movw	r2, #641	@ 0x281
 8019b8c:	4929      	ldr	r1, [pc, #164]	@ (8019c34 <udp_sendto_if+0xdc>)
 8019b8e:	4828      	ldr	r0, [pc, #160]	@ (8019c30 <udp_sendto_if+0xd8>)
 8019b90:	f003 fc7a 	bl	801d488 <iprintf>
 8019b94:	f06f 030f 	mvn.w	r3, #15
 8019b98:	e042      	b.n	8019c20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d109      	bne.n	8019bb4 <udp_sendto_if+0x5c>
 8019ba0:	4b21      	ldr	r3, [pc, #132]	@ (8019c28 <udp_sendto_if+0xd0>)
 8019ba2:	f240 2282 	movw	r2, #642	@ 0x282
 8019ba6:	4924      	ldr	r1, [pc, #144]	@ (8019c38 <udp_sendto_if+0xe0>)
 8019ba8:	4821      	ldr	r0, [pc, #132]	@ (8019c30 <udp_sendto_if+0xd8>)
 8019baa:	f003 fc6d 	bl	801d488 <iprintf>
 8019bae:	f06f 030f 	mvn.w	r3, #15
 8019bb2:	e035      	b.n	8019c20 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019bb4:	6a3b      	ldr	r3, [r7, #32]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d109      	bne.n	8019bce <udp_sendto_if+0x76>
 8019bba:	4b1b      	ldr	r3, [pc, #108]	@ (8019c28 <udp_sendto_if+0xd0>)
 8019bbc:	f240 2283 	movw	r2, #643	@ 0x283
 8019bc0:	491e      	ldr	r1, [pc, #120]	@ (8019c3c <udp_sendto_if+0xe4>)
 8019bc2:	481b      	ldr	r0, [pc, #108]	@ (8019c30 <udp_sendto_if+0xd8>)
 8019bc4:	f003 fc60 	bl	801d488 <iprintf>
 8019bc8:	f06f 030f 	mvn.w	r3, #15
 8019bcc:	e028      	b.n	8019c20 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d009      	beq.n	8019be8 <udp_sendto_if+0x90>
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	681b      	ldr	r3, [r3, #0]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d005      	beq.n	8019be8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019bdc:	68fb      	ldr	r3, [r7, #12]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019be4:	2be0      	cmp	r3, #224	@ 0xe0
 8019be6:	d103      	bne.n	8019bf0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019be8:	6a3b      	ldr	r3, [r7, #32]
 8019bea:	3304      	adds	r3, #4
 8019bec:	617b      	str	r3, [r7, #20]
 8019bee:	e00b      	b.n	8019c08 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	6a3b      	ldr	r3, [r7, #32]
 8019bf6:	3304      	adds	r3, #4
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	d002      	beq.n	8019c04 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019bfe:	f06f 0303 	mvn.w	r3, #3
 8019c02:	e00d      	b.n	8019c20 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019c08:	887a      	ldrh	r2, [r7, #2]
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	9301      	str	r3, [sp, #4]
 8019c0e:	6a3b      	ldr	r3, [r7, #32]
 8019c10:	9300      	str	r3, [sp, #0]
 8019c12:	4613      	mov	r3, r2
 8019c14:	687a      	ldr	r2, [r7, #4]
 8019c16:	68b9      	ldr	r1, [r7, #8]
 8019c18:	68f8      	ldr	r0, [r7, #12]
 8019c1a:	f000 f811 	bl	8019c40 <udp_sendto_if_src>
 8019c1e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019c20:	4618      	mov	r0, r3
 8019c22:	3718      	adds	r7, #24
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bd80      	pop	{r7, pc}
 8019c28:	080227d8 	.word	0x080227d8
 8019c2c:	0802294c 	.word	0x0802294c
 8019c30:	0802282c 	.word	0x0802282c
 8019c34:	08022968 	.word	0x08022968
 8019c38:	08022984 	.word	0x08022984
 8019c3c:	080229a4 	.word	0x080229a4

08019c40 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b08c      	sub	sp, #48	@ 0x30
 8019c44:	af04      	add	r7, sp, #16
 8019c46:	60f8      	str	r0, [r7, #12]
 8019c48:	60b9      	str	r1, [r7, #8]
 8019c4a:	607a      	str	r2, [r7, #4]
 8019c4c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d109      	bne.n	8019c68 <udp_sendto_if_src+0x28>
 8019c54:	4b65      	ldr	r3, [pc, #404]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019c56:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019c5a:	4965      	ldr	r1, [pc, #404]	@ (8019df0 <udp_sendto_if_src+0x1b0>)
 8019c5c:	4865      	ldr	r0, [pc, #404]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019c5e:	f003 fc13 	bl	801d488 <iprintf>
 8019c62:	f06f 030f 	mvn.w	r3, #15
 8019c66:	e0bc      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019c68:	68bb      	ldr	r3, [r7, #8]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d109      	bne.n	8019c82 <udp_sendto_if_src+0x42>
 8019c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019c70:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019c74:	4960      	ldr	r1, [pc, #384]	@ (8019df8 <udp_sendto_if_src+0x1b8>)
 8019c76:	485f      	ldr	r0, [pc, #380]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019c78:	f003 fc06 	bl	801d488 <iprintf>
 8019c7c:	f06f 030f 	mvn.w	r3, #15
 8019c80:	e0af      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d109      	bne.n	8019c9c <udp_sendto_if_src+0x5c>
 8019c88:	4b58      	ldr	r3, [pc, #352]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019c8a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019c8e:	495b      	ldr	r1, [pc, #364]	@ (8019dfc <udp_sendto_if_src+0x1bc>)
 8019c90:	4858      	ldr	r0, [pc, #352]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019c92:	f003 fbf9 	bl	801d488 <iprintf>
 8019c96:	f06f 030f 	mvn.w	r3, #15
 8019c9a:	e0a2      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d109      	bne.n	8019cb6 <udp_sendto_if_src+0x76>
 8019ca2:	4b52      	ldr	r3, [pc, #328]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019ca4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019ca8:	4955      	ldr	r1, [pc, #340]	@ (8019e00 <udp_sendto_if_src+0x1c0>)
 8019caa:	4852      	ldr	r0, [pc, #328]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019cac:	f003 fbec 	bl	801d488 <iprintf>
 8019cb0:	f06f 030f 	mvn.w	r3, #15
 8019cb4:	e095      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d109      	bne.n	8019cd0 <udp_sendto_if_src+0x90>
 8019cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019cbe:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019cc2:	4950      	ldr	r1, [pc, #320]	@ (8019e04 <udp_sendto_if_src+0x1c4>)
 8019cc4:	484b      	ldr	r0, [pc, #300]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019cc6:	f003 fbdf 	bl	801d488 <iprintf>
 8019cca:	f06f 030f 	mvn.w	r3, #15
 8019cce:	e088      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	8a5b      	ldrh	r3, [r3, #18]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d10f      	bne.n	8019cf8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019cd8:	68f9      	ldr	r1, [r7, #12]
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	8a5b      	ldrh	r3, [r3, #18]
 8019cde:	461a      	mov	r2, r3
 8019ce0:	68f8      	ldr	r0, [r7, #12]
 8019ce2:	f000 f893 	bl	8019e0c <udp_bind>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019cea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d002      	beq.n	8019cf8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019cf2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019cf6:	e074      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	891b      	ldrh	r3, [r3, #8]
 8019cfc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019d00:	4293      	cmp	r3, r2
 8019d02:	d902      	bls.n	8019d0a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019d04:	f04f 33ff 	mov.w	r3, #4294967295
 8019d08:	e06b      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019d0a:	2108      	movs	r1, #8
 8019d0c:	68b8      	ldr	r0, [r7, #8]
 8019d0e:	f7f8 ff65 	bl	8012bdc <pbuf_add_header>
 8019d12:	4603      	mov	r3, r0
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d015      	beq.n	8019d44 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019d18:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d1c:	2108      	movs	r1, #8
 8019d1e:	2022      	movs	r0, #34	@ 0x22
 8019d20:	f7f8 fd0e 	bl	8012740 <pbuf_alloc>
 8019d24:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019d26:	69fb      	ldr	r3, [r7, #28]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d102      	bne.n	8019d32 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d30:	e057      	b.n	8019de2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019d32:	68bb      	ldr	r3, [r7, #8]
 8019d34:	891b      	ldrh	r3, [r3, #8]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d006      	beq.n	8019d48 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019d3a:	68b9      	ldr	r1, [r7, #8]
 8019d3c:	69f8      	ldr	r0, [r7, #28]
 8019d3e:	f7f9 f907 	bl	8012f50 <pbuf_chain>
 8019d42:	e001      	b.n	8019d48 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019d48:	69fb      	ldr	r3, [r7, #28]
 8019d4a:	895b      	ldrh	r3, [r3, #10]
 8019d4c:	2b07      	cmp	r3, #7
 8019d4e:	d806      	bhi.n	8019d5e <udp_sendto_if_src+0x11e>
 8019d50:	4b26      	ldr	r3, [pc, #152]	@ (8019dec <udp_sendto_if_src+0x1ac>)
 8019d52:	f240 320d 	movw	r2, #781	@ 0x30d
 8019d56:	492c      	ldr	r1, [pc, #176]	@ (8019e08 <udp_sendto_if_src+0x1c8>)
 8019d58:	4826      	ldr	r0, [pc, #152]	@ (8019df4 <udp_sendto_if_src+0x1b4>)
 8019d5a:	f003 fb95 	bl	801d488 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019d5e:	69fb      	ldr	r3, [r7, #28]
 8019d60:	685b      	ldr	r3, [r3, #4]
 8019d62:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	8a5b      	ldrh	r3, [r3, #18]
 8019d68:	4618      	mov	r0, r3
 8019d6a:	f7f7 fba5 	bl	80114b8 <lwip_htons>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	461a      	mov	r2, r3
 8019d72:	697b      	ldr	r3, [r7, #20]
 8019d74:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019d76:	887b      	ldrh	r3, [r7, #2]
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7f7 fb9d 	bl	80114b8 <lwip_htons>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	461a      	mov	r2, r3
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	719a      	strb	r2, [r3, #6]
 8019d8c:	2200      	movs	r2, #0
 8019d8e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019d90:	69fb      	ldr	r3, [r7, #28]
 8019d92:	891b      	ldrh	r3, [r3, #8]
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7f7 fb8f 	bl	80114b8 <lwip_htons>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	461a      	mov	r2, r3
 8019d9e:	697b      	ldr	r3, [r7, #20]
 8019da0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019da2:	2311      	movs	r3, #17
 8019da4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	7adb      	ldrb	r3, [r3, #11]
 8019daa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	7a9b      	ldrb	r3, [r3, #10]
 8019db0:	7cb9      	ldrb	r1, [r7, #18]
 8019db2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019db4:	9202      	str	r2, [sp, #8]
 8019db6:	7cfa      	ldrb	r2, [r7, #19]
 8019db8:	9201      	str	r2, [sp, #4]
 8019dba:	9300      	str	r3, [sp, #0]
 8019dbc:	460b      	mov	r3, r1
 8019dbe:	687a      	ldr	r2, [r7, #4]
 8019dc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019dc2:	69f8      	ldr	r0, [r7, #28]
 8019dc4:	f001 fc22 	bl	801b60c <ip4_output_if_src>
 8019dc8:	4603      	mov	r3, r0
 8019dca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019dcc:	69fa      	ldr	r2, [r7, #28]
 8019dce:	68bb      	ldr	r3, [r7, #8]
 8019dd0:	429a      	cmp	r2, r3
 8019dd2:	d004      	beq.n	8019dde <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019dd4:	69f8      	ldr	r0, [r7, #28]
 8019dd6:	f7f8 ff97 	bl	8012d08 <pbuf_free>
    q = NULL;
 8019dda:	2300      	movs	r3, #0
 8019ddc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019dde:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	3720      	adds	r7, #32
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	080227d8 	.word	0x080227d8
 8019df0:	080229c4 	.word	0x080229c4
 8019df4:	0802282c 	.word	0x0802282c
 8019df8:	080229e4 	.word	0x080229e4
 8019dfc:	08022a04 	.word	0x08022a04
 8019e00:	08022a28 	.word	0x08022a28
 8019e04:	08022a4c 	.word	0x08022a4c
 8019e08:	08022a70 	.word	0x08022a70

08019e0c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b086      	sub	sp, #24
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	60f8      	str	r0, [r7, #12]
 8019e14:	60b9      	str	r1, [r7, #8]
 8019e16:	4613      	mov	r3, r2
 8019e18:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e1a:	68bb      	ldr	r3, [r7, #8]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d101      	bne.n	8019e24 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019e20:	4b39      	ldr	r3, [pc, #228]	@ (8019f08 <udp_bind+0xfc>)
 8019e22:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d109      	bne.n	8019e3e <udp_bind+0x32>
 8019e2a:	4b38      	ldr	r3, [pc, #224]	@ (8019f0c <udp_bind+0x100>)
 8019e2c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8019e30:	4937      	ldr	r1, [pc, #220]	@ (8019f10 <udp_bind+0x104>)
 8019e32:	4838      	ldr	r0, [pc, #224]	@ (8019f14 <udp_bind+0x108>)
 8019e34:	f003 fb28 	bl	801d488 <iprintf>
 8019e38:	f06f 030f 	mvn.w	r3, #15
 8019e3c:	e060      	b.n	8019f00 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019e3e:	2300      	movs	r3, #0
 8019e40:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019e42:	4b35      	ldr	r3, [pc, #212]	@ (8019f18 <udp_bind+0x10c>)
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	617b      	str	r3, [r7, #20]
 8019e48:	e009      	b.n	8019e5e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019e4a:	68fa      	ldr	r2, [r7, #12]
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	429a      	cmp	r2, r3
 8019e50:	d102      	bne.n	8019e58 <udp_bind+0x4c>
      rebind = 1;
 8019e52:	2301      	movs	r3, #1
 8019e54:	74fb      	strb	r3, [r7, #19]
      break;
 8019e56:	e005      	b.n	8019e64 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019e58:	697b      	ldr	r3, [r7, #20]
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	617b      	str	r3, [r7, #20]
 8019e5e:	697b      	ldr	r3, [r7, #20]
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d1f2      	bne.n	8019e4a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019e64:	88fb      	ldrh	r3, [r7, #6]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d109      	bne.n	8019e7e <udp_bind+0x72>
    port = udp_new_port();
 8019e6a:	f7ff fc35 	bl	80196d8 <udp_new_port>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019e72:	88fb      	ldrh	r3, [r7, #6]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d12c      	bne.n	8019ed2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019e78:	f06f 0307 	mvn.w	r3, #7
 8019e7c:	e040      	b.n	8019f00 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019e7e:	4b26      	ldr	r3, [pc, #152]	@ (8019f18 <udp_bind+0x10c>)
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	617b      	str	r3, [r7, #20]
 8019e84:	e022      	b.n	8019ecc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019e86:	68fa      	ldr	r2, [r7, #12]
 8019e88:	697b      	ldr	r3, [r7, #20]
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	d01b      	beq.n	8019ec6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	8a5b      	ldrh	r3, [r3, #18]
 8019e92:	88fa      	ldrh	r2, [r7, #6]
 8019e94:	429a      	cmp	r2, r3
 8019e96:	d116      	bne.n	8019ec6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019e98:	697b      	ldr	r3, [r7, #20]
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	68bb      	ldr	r3, [r7, #8]
 8019e9e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	d00d      	beq.n	8019ec0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d00a      	beq.n	8019ec0 <udp_bind+0xb4>
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d006      	beq.n	8019ec0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019eb2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d003      	beq.n	8019ec0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019eb8:	697b      	ldr	r3, [r7, #20]
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d102      	bne.n	8019ec6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019ec0:	f06f 0307 	mvn.w	r3, #7
 8019ec4:	e01c      	b.n	8019f00 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ec6:	697b      	ldr	r3, [r7, #20]
 8019ec8:	68db      	ldr	r3, [r3, #12]
 8019eca:	617b      	str	r3, [r7, #20]
 8019ecc:	697b      	ldr	r3, [r7, #20]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d1d9      	bne.n	8019e86 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d002      	beq.n	8019ede <udp_bind+0xd2>
 8019ed8:	68bb      	ldr	r3, [r7, #8]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	e000      	b.n	8019ee0 <udp_bind+0xd4>
 8019ede:	2300      	movs	r3, #0
 8019ee0:	68fa      	ldr	r2, [r7, #12]
 8019ee2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	88fa      	ldrh	r2, [r7, #6]
 8019ee8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019eea:	7cfb      	ldrb	r3, [r7, #19]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d106      	bne.n	8019efe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019ef0:	4b09      	ldr	r3, [pc, #36]	@ (8019f18 <udp_bind+0x10c>)
 8019ef2:	681a      	ldr	r2, [r3, #0]
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019ef8:	4a07      	ldr	r2, [pc, #28]	@ (8019f18 <udp_bind+0x10c>)
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019efe:	2300      	movs	r3, #0
}
 8019f00:	4618      	mov	r0, r3
 8019f02:	3718      	adds	r7, #24
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bd80      	pop	{r7, pc}
 8019f08:	08024a1c 	.word	0x08024a1c
 8019f0c:	080227d8 	.word	0x080227d8
 8019f10:	08022aa0 	.word	0x08022aa0
 8019f14:	0802282c 	.word	0x0802282c
 8019f18:	2000f3f0 	.word	0x2000f3f0

08019f1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	60f8      	str	r0, [r7, #12]
 8019f24:	60b9      	str	r1, [r7, #8]
 8019f26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d107      	bne.n	8019f3e <udp_recv+0x22>
 8019f2e:	4b08      	ldr	r3, [pc, #32]	@ (8019f50 <udp_recv+0x34>)
 8019f30:	f240 428a 	movw	r2, #1162	@ 0x48a
 8019f34:	4907      	ldr	r1, [pc, #28]	@ (8019f54 <udp_recv+0x38>)
 8019f36:	4808      	ldr	r0, [pc, #32]	@ (8019f58 <udp_recv+0x3c>)
 8019f38:	f003 faa6 	bl	801d488 <iprintf>
 8019f3c:	e005      	b.n	8019f4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	68ba      	ldr	r2, [r7, #8]
 8019f42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	61da      	str	r2, [r3, #28]
}
 8019f4a:	3710      	adds	r7, #16
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}
 8019f50:	080227d8 	.word	0x080227d8
 8019f54:	08022b0c 	.word	0x08022b0c
 8019f58:	0802282c 	.word	0x0802282c

08019f5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019f5c:	b580      	push	{r7, lr}
 8019f5e:	b084      	sub	sp, #16
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d107      	bne.n	8019f7a <udp_remove+0x1e>
 8019f6a:	4b19      	ldr	r3, [pc, #100]	@ (8019fd0 <udp_remove+0x74>)
 8019f6c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8019f70:	4918      	ldr	r1, [pc, #96]	@ (8019fd4 <udp_remove+0x78>)
 8019f72:	4819      	ldr	r0, [pc, #100]	@ (8019fd8 <udp_remove+0x7c>)
 8019f74:	f003 fa88 	bl	801d488 <iprintf>
 8019f78:	e026      	b.n	8019fc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019f7a:	4b18      	ldr	r3, [pc, #96]	@ (8019fdc <udp_remove+0x80>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	687a      	ldr	r2, [r7, #4]
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d105      	bne.n	8019f90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019f84:	4b15      	ldr	r3, [pc, #84]	@ (8019fdc <udp_remove+0x80>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	68db      	ldr	r3, [r3, #12]
 8019f8a:	4a14      	ldr	r2, [pc, #80]	@ (8019fdc <udp_remove+0x80>)
 8019f8c:	6013      	str	r3, [r2, #0]
 8019f8e:	e017      	b.n	8019fc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019f90:	4b12      	ldr	r3, [pc, #72]	@ (8019fdc <udp_remove+0x80>)
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	60fb      	str	r3, [r7, #12]
 8019f96:	e010      	b.n	8019fba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d009      	beq.n	8019fb4 <udp_remove+0x58>
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	68db      	ldr	r3, [r3, #12]
 8019fa4:	687a      	ldr	r2, [r7, #4]
 8019fa6:	429a      	cmp	r2, r3
 8019fa8:	d104      	bne.n	8019fb4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	68da      	ldr	r2, [r3, #12]
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	60da      	str	r2, [r3, #12]
        break;
 8019fb2:	e005      	b.n	8019fc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	68db      	ldr	r3, [r3, #12]
 8019fb8:	60fb      	str	r3, [r7, #12]
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d1eb      	bne.n	8019f98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019fc0:	6879      	ldr	r1, [r7, #4]
 8019fc2:	2000      	movs	r0, #0
 8019fc4:	f7f7 fffc 	bl	8011fc0 <memp_free>
}
 8019fc8:	3710      	adds	r7, #16
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	080227d8 	.word	0x080227d8
 8019fd4:	08022b24 	.word	0x08022b24
 8019fd8:	0802282c 	.word	0x0802282c
 8019fdc:	2000f3f0 	.word	0x2000f3f0

08019fe0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b082      	sub	sp, #8
 8019fe4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019fe6:	2000      	movs	r0, #0
 8019fe8:	f7f7 ff74 	bl	8011ed4 <memp_malloc>
 8019fec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d007      	beq.n	801a004 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8019ff4:	2220      	movs	r2, #32
 8019ff6:	2100      	movs	r1, #0
 8019ff8:	6878      	ldr	r0, [r7, #4]
 8019ffa:	f003 fae4 	bl	801d5c6 <memset>
    pcb->ttl = UDP_TTL;
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	22ff      	movs	r2, #255	@ 0xff
 801a002:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a004:	687b      	ldr	r3, [r7, #4]
}
 801a006:	4618      	mov	r0, r3
 801a008:	3708      	adds	r7, #8
 801a00a:	46bd      	mov	sp, r7
 801a00c:	bd80      	pop	{r7, pc}

0801a00e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a00e:	b580      	push	{r7, lr}
 801a010:	b084      	sub	sp, #16
 801a012:	af00      	add	r7, sp, #0
 801a014:	4603      	mov	r3, r0
 801a016:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a018:	f7ff ffe2 	bl	8019fe0 <udp_new>
 801a01c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a01e:	68fb      	ldr	r3, [r7, #12]
}
 801a020:	4618      	mov	r0, r3
 801a022:	3710      	adds	r7, #16
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}

0801a028 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a028:	b480      	push	{r7}
 801a02a:	b085      	sub	sp, #20
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d01e      	beq.n	801a076 <udp_netif_ip_addr_changed+0x4e>
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d01a      	beq.n	801a076 <udp_netif_ip_addr_changed+0x4e>
 801a040:	683b      	ldr	r3, [r7, #0]
 801a042:	2b00      	cmp	r3, #0
 801a044:	d017      	beq.n	801a076 <udp_netif_ip_addr_changed+0x4e>
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d013      	beq.n	801a076 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a04e:	4b0d      	ldr	r3, [pc, #52]	@ (801a084 <udp_netif_ip_addr_changed+0x5c>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	60fb      	str	r3, [r7, #12]
 801a054:	e00c      	b.n	801a070 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	681a      	ldr	r2, [r3, #0]
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d103      	bne.n	801a06a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a062:	683b      	ldr	r3, [r7, #0]
 801a064:	681a      	ldr	r2, [r3, #0]
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	68db      	ldr	r3, [r3, #12]
 801a06e:	60fb      	str	r3, [r7, #12]
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d1ef      	bne.n	801a056 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a076:	bf00      	nop
 801a078:	3714      	adds	r7, #20
 801a07a:	46bd      	mov	sp, r7
 801a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a080:	4770      	bx	lr
 801a082:	bf00      	nop
 801a084:	2000f3f0 	.word	0x2000f3f0

0801a088 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a090:	4915      	ldr	r1, [pc, #84]	@ (801a0e8 <etharp_free_entry+0x60>)
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	4613      	mov	r3, r2
 801a096:	005b      	lsls	r3, r3, #1
 801a098:	4413      	add	r3, r2
 801a09a:	00db      	lsls	r3, r3, #3
 801a09c:	440b      	add	r3, r1
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d013      	beq.n	801a0cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a0a4:	4910      	ldr	r1, [pc, #64]	@ (801a0e8 <etharp_free_entry+0x60>)
 801a0a6:	687a      	ldr	r2, [r7, #4]
 801a0a8:	4613      	mov	r3, r2
 801a0aa:	005b      	lsls	r3, r3, #1
 801a0ac:	4413      	add	r3, r2
 801a0ae:	00db      	lsls	r3, r3, #3
 801a0b0:	440b      	add	r3, r1
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7f8 fe27 	bl	8012d08 <pbuf_free>
    arp_table[i].q = NULL;
 801a0ba:	490b      	ldr	r1, [pc, #44]	@ (801a0e8 <etharp_free_entry+0x60>)
 801a0bc:	687a      	ldr	r2, [r7, #4]
 801a0be:	4613      	mov	r3, r2
 801a0c0:	005b      	lsls	r3, r3, #1
 801a0c2:	4413      	add	r3, r2
 801a0c4:	00db      	lsls	r3, r3, #3
 801a0c6:	440b      	add	r3, r1
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a0cc:	4906      	ldr	r1, [pc, #24]	@ (801a0e8 <etharp_free_entry+0x60>)
 801a0ce:	687a      	ldr	r2, [r7, #4]
 801a0d0:	4613      	mov	r3, r2
 801a0d2:	005b      	lsls	r3, r3, #1
 801a0d4:	4413      	add	r3, r2
 801a0d6:	00db      	lsls	r3, r3, #3
 801a0d8:	440b      	add	r3, r1
 801a0da:	3314      	adds	r3, #20
 801a0dc:	2200      	movs	r2, #0
 801a0de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a0e0:	bf00      	nop
 801a0e2:	3708      	adds	r7, #8
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}
 801a0e8:	2000f3f4 	.word	0x2000f3f4

0801a0ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a0ec:	b580      	push	{r7, lr}
 801a0ee:	b082      	sub	sp, #8
 801a0f0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	607b      	str	r3, [r7, #4]
 801a0f6:	e096      	b.n	801a226 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a0f8:	494f      	ldr	r1, [pc, #316]	@ (801a238 <etharp_tmr+0x14c>)
 801a0fa:	687a      	ldr	r2, [r7, #4]
 801a0fc:	4613      	mov	r3, r2
 801a0fe:	005b      	lsls	r3, r3, #1
 801a100:	4413      	add	r3, r2
 801a102:	00db      	lsls	r3, r3, #3
 801a104:	440b      	add	r3, r1
 801a106:	3314      	adds	r3, #20
 801a108:	781b      	ldrb	r3, [r3, #0]
 801a10a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a10c:	78fb      	ldrb	r3, [r7, #3]
 801a10e:	2b00      	cmp	r3, #0
 801a110:	f000 8086 	beq.w	801a220 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a114:	4948      	ldr	r1, [pc, #288]	@ (801a238 <etharp_tmr+0x14c>)
 801a116:	687a      	ldr	r2, [r7, #4]
 801a118:	4613      	mov	r3, r2
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	4413      	add	r3, r2
 801a11e:	00db      	lsls	r3, r3, #3
 801a120:	440b      	add	r3, r1
 801a122:	3312      	adds	r3, #18
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	3301      	adds	r3, #1
 801a128:	b298      	uxth	r0, r3
 801a12a:	4943      	ldr	r1, [pc, #268]	@ (801a238 <etharp_tmr+0x14c>)
 801a12c:	687a      	ldr	r2, [r7, #4]
 801a12e:	4613      	mov	r3, r2
 801a130:	005b      	lsls	r3, r3, #1
 801a132:	4413      	add	r3, r2
 801a134:	00db      	lsls	r3, r3, #3
 801a136:	440b      	add	r3, r1
 801a138:	3312      	adds	r3, #18
 801a13a:	4602      	mov	r2, r0
 801a13c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a13e:	493e      	ldr	r1, [pc, #248]	@ (801a238 <etharp_tmr+0x14c>)
 801a140:	687a      	ldr	r2, [r7, #4]
 801a142:	4613      	mov	r3, r2
 801a144:	005b      	lsls	r3, r3, #1
 801a146:	4413      	add	r3, r2
 801a148:	00db      	lsls	r3, r3, #3
 801a14a:	440b      	add	r3, r1
 801a14c:	3312      	adds	r3, #18
 801a14e:	881b      	ldrh	r3, [r3, #0]
 801a150:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a154:	d215      	bcs.n	801a182 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a156:	4938      	ldr	r1, [pc, #224]	@ (801a238 <etharp_tmr+0x14c>)
 801a158:	687a      	ldr	r2, [r7, #4]
 801a15a:	4613      	mov	r3, r2
 801a15c:	005b      	lsls	r3, r3, #1
 801a15e:	4413      	add	r3, r2
 801a160:	00db      	lsls	r3, r3, #3
 801a162:	440b      	add	r3, r1
 801a164:	3314      	adds	r3, #20
 801a166:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a168:	2b01      	cmp	r3, #1
 801a16a:	d10e      	bne.n	801a18a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a16c:	4932      	ldr	r1, [pc, #200]	@ (801a238 <etharp_tmr+0x14c>)
 801a16e:	687a      	ldr	r2, [r7, #4]
 801a170:	4613      	mov	r3, r2
 801a172:	005b      	lsls	r3, r3, #1
 801a174:	4413      	add	r3, r2
 801a176:	00db      	lsls	r3, r3, #3
 801a178:	440b      	add	r3, r1
 801a17a:	3312      	adds	r3, #18
 801a17c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a17e:	2b04      	cmp	r3, #4
 801a180:	d903      	bls.n	801a18a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a182:	6878      	ldr	r0, [r7, #4]
 801a184:	f7ff ff80 	bl	801a088 <etharp_free_entry>
 801a188:	e04a      	b.n	801a220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a18a:	492b      	ldr	r1, [pc, #172]	@ (801a238 <etharp_tmr+0x14c>)
 801a18c:	687a      	ldr	r2, [r7, #4]
 801a18e:	4613      	mov	r3, r2
 801a190:	005b      	lsls	r3, r3, #1
 801a192:	4413      	add	r3, r2
 801a194:	00db      	lsls	r3, r3, #3
 801a196:	440b      	add	r3, r1
 801a198:	3314      	adds	r3, #20
 801a19a:	781b      	ldrb	r3, [r3, #0]
 801a19c:	2b03      	cmp	r3, #3
 801a19e:	d10a      	bne.n	801a1b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a1a0:	4925      	ldr	r1, [pc, #148]	@ (801a238 <etharp_tmr+0x14c>)
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	005b      	lsls	r3, r3, #1
 801a1a8:	4413      	add	r3, r2
 801a1aa:	00db      	lsls	r3, r3, #3
 801a1ac:	440b      	add	r3, r1
 801a1ae:	3314      	adds	r3, #20
 801a1b0:	2204      	movs	r2, #4
 801a1b2:	701a      	strb	r2, [r3, #0]
 801a1b4:	e034      	b.n	801a220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a1b6:	4920      	ldr	r1, [pc, #128]	@ (801a238 <etharp_tmr+0x14c>)
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	4613      	mov	r3, r2
 801a1bc:	005b      	lsls	r3, r3, #1
 801a1be:	4413      	add	r3, r2
 801a1c0:	00db      	lsls	r3, r3, #3
 801a1c2:	440b      	add	r3, r1
 801a1c4:	3314      	adds	r3, #20
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	2b04      	cmp	r3, #4
 801a1ca:	d10a      	bne.n	801a1e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a1cc:	491a      	ldr	r1, [pc, #104]	@ (801a238 <etharp_tmr+0x14c>)
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	4613      	mov	r3, r2
 801a1d2:	005b      	lsls	r3, r3, #1
 801a1d4:	4413      	add	r3, r2
 801a1d6:	00db      	lsls	r3, r3, #3
 801a1d8:	440b      	add	r3, r1
 801a1da:	3314      	adds	r3, #20
 801a1dc:	2202      	movs	r2, #2
 801a1de:	701a      	strb	r2, [r3, #0]
 801a1e0:	e01e      	b.n	801a220 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a1e2:	4915      	ldr	r1, [pc, #84]	@ (801a238 <etharp_tmr+0x14c>)
 801a1e4:	687a      	ldr	r2, [r7, #4]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	005b      	lsls	r3, r3, #1
 801a1ea:	4413      	add	r3, r2
 801a1ec:	00db      	lsls	r3, r3, #3
 801a1ee:	440b      	add	r3, r1
 801a1f0:	3314      	adds	r3, #20
 801a1f2:	781b      	ldrb	r3, [r3, #0]
 801a1f4:	2b01      	cmp	r3, #1
 801a1f6:	d113      	bne.n	801a220 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a1f8:	490f      	ldr	r1, [pc, #60]	@ (801a238 <etharp_tmr+0x14c>)
 801a1fa:	687a      	ldr	r2, [r7, #4]
 801a1fc:	4613      	mov	r3, r2
 801a1fe:	005b      	lsls	r3, r3, #1
 801a200:	4413      	add	r3, r2
 801a202:	00db      	lsls	r3, r3, #3
 801a204:	440b      	add	r3, r1
 801a206:	3308      	adds	r3, #8
 801a208:	6818      	ldr	r0, [r3, #0]
 801a20a:	687a      	ldr	r2, [r7, #4]
 801a20c:	4613      	mov	r3, r2
 801a20e:	005b      	lsls	r3, r3, #1
 801a210:	4413      	add	r3, r2
 801a212:	00db      	lsls	r3, r3, #3
 801a214:	4a08      	ldr	r2, [pc, #32]	@ (801a238 <etharp_tmr+0x14c>)
 801a216:	4413      	add	r3, r2
 801a218:	3304      	adds	r3, #4
 801a21a:	4619      	mov	r1, r3
 801a21c:	f000 fe6e 	bl	801aefc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	3301      	adds	r3, #1
 801a224:	607b      	str	r3, [r7, #4]
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2b09      	cmp	r3, #9
 801a22a:	f77f af65 	ble.w	801a0f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801a22e:	bf00      	nop
 801a230:	bf00      	nop
 801a232:	3708      	adds	r7, #8
 801a234:	46bd      	mov	sp, r7
 801a236:	bd80      	pop	{r7, pc}
 801a238:	2000f3f4 	.word	0x2000f3f4

0801a23c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b08a      	sub	sp, #40	@ 0x28
 801a240:	af00      	add	r7, sp, #0
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	460b      	mov	r3, r1
 801a246:	607a      	str	r2, [r7, #4]
 801a248:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a24a:	230a      	movs	r3, #10
 801a24c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a24e:	230a      	movs	r3, #10
 801a250:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a252:	230a      	movs	r3, #10
 801a254:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a256:	2300      	movs	r3, #0
 801a258:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a25a:	230a      	movs	r3, #10
 801a25c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a25e:	2300      	movs	r3, #0
 801a260:	83bb      	strh	r3, [r7, #28]
 801a262:	2300      	movs	r3, #0
 801a264:	837b      	strh	r3, [r7, #26]
 801a266:	2300      	movs	r3, #0
 801a268:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a26a:	2300      	movs	r3, #0
 801a26c:	843b      	strh	r3, [r7, #32]
 801a26e:	e0ae      	b.n	801a3ce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a274:	49a6      	ldr	r1, [pc, #664]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a276:	4613      	mov	r3, r2
 801a278:	005b      	lsls	r3, r3, #1
 801a27a:	4413      	add	r3, r2
 801a27c:	00db      	lsls	r3, r3, #3
 801a27e:	440b      	add	r3, r1
 801a280:	3314      	adds	r3, #20
 801a282:	781b      	ldrb	r3, [r3, #0]
 801a284:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a286:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a28a:	2b0a      	cmp	r3, #10
 801a28c:	d105      	bne.n	801a29a <etharp_find_entry+0x5e>
 801a28e:	7dfb      	ldrb	r3, [r7, #23]
 801a290:	2b00      	cmp	r3, #0
 801a292:	d102      	bne.n	801a29a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a294:	8c3b      	ldrh	r3, [r7, #32]
 801a296:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a298:	e095      	b.n	801a3c6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a29a:	7dfb      	ldrb	r3, [r7, #23]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	f000 8092 	beq.w	801a3c6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a2a2:	7dfb      	ldrb	r3, [r7, #23]
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d009      	beq.n	801a2bc <etharp_find_entry+0x80>
 801a2a8:	7dfb      	ldrb	r3, [r7, #23]
 801a2aa:	2b01      	cmp	r3, #1
 801a2ac:	d806      	bhi.n	801a2bc <etharp_find_entry+0x80>
 801a2ae:	4b99      	ldr	r3, [pc, #612]	@ (801a514 <etharp_find_entry+0x2d8>)
 801a2b0:	f240 1223 	movw	r2, #291	@ 0x123
 801a2b4:	4998      	ldr	r1, [pc, #608]	@ (801a518 <etharp_find_entry+0x2dc>)
 801a2b6:	4899      	ldr	r0, [pc, #612]	@ (801a51c <etharp_find_entry+0x2e0>)
 801a2b8:	f003 f8e6 	bl	801d488 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d020      	beq.n	801a304 <etharp_find_entry+0xc8>
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	6819      	ldr	r1, [r3, #0]
 801a2c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2ca:	4891      	ldr	r0, [pc, #580]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	005b      	lsls	r3, r3, #1
 801a2d0:	4413      	add	r3, r2
 801a2d2:	00db      	lsls	r3, r3, #3
 801a2d4:	4403      	add	r3, r0
 801a2d6:	3304      	adds	r3, #4
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	4299      	cmp	r1, r3
 801a2dc:	d112      	bne.n	801a304 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d00c      	beq.n	801a2fe <etharp_find_entry+0xc2>
 801a2e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a2e8:	4989      	ldr	r1, [pc, #548]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a2ea:	4613      	mov	r3, r2
 801a2ec:	005b      	lsls	r3, r3, #1
 801a2ee:	4413      	add	r3, r2
 801a2f0:	00db      	lsls	r3, r3, #3
 801a2f2:	440b      	add	r3, r1
 801a2f4:	3308      	adds	r3, #8
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	687a      	ldr	r2, [r7, #4]
 801a2fa:	429a      	cmp	r2, r3
 801a2fc:	d102      	bne.n	801a304 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a2fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a302:	e100      	b.n	801a506 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a304:	7dfb      	ldrb	r3, [r7, #23]
 801a306:	2b01      	cmp	r3, #1
 801a308:	d140      	bne.n	801a38c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a30a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a30e:	4980      	ldr	r1, [pc, #512]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a310:	4613      	mov	r3, r2
 801a312:	005b      	lsls	r3, r3, #1
 801a314:	4413      	add	r3, r2
 801a316:	00db      	lsls	r3, r3, #3
 801a318:	440b      	add	r3, r1
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d01a      	beq.n	801a356 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a320:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a324:	497a      	ldr	r1, [pc, #488]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a326:	4613      	mov	r3, r2
 801a328:	005b      	lsls	r3, r3, #1
 801a32a:	4413      	add	r3, r2
 801a32c:	00db      	lsls	r3, r3, #3
 801a32e:	440b      	add	r3, r1
 801a330:	3312      	adds	r3, #18
 801a332:	881b      	ldrh	r3, [r3, #0]
 801a334:	8bba      	ldrh	r2, [r7, #28]
 801a336:	429a      	cmp	r2, r3
 801a338:	d845      	bhi.n	801a3c6 <etharp_find_entry+0x18a>
            old_queue = i;
 801a33a:	8c3b      	ldrh	r3, [r7, #32]
 801a33c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a33e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a342:	4973      	ldr	r1, [pc, #460]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a344:	4613      	mov	r3, r2
 801a346:	005b      	lsls	r3, r3, #1
 801a348:	4413      	add	r3, r2
 801a34a:	00db      	lsls	r3, r3, #3
 801a34c:	440b      	add	r3, r1
 801a34e:	3312      	adds	r3, #18
 801a350:	881b      	ldrh	r3, [r3, #0]
 801a352:	83bb      	strh	r3, [r7, #28]
 801a354:	e037      	b.n	801a3c6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a356:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a35a:	496d      	ldr	r1, [pc, #436]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a35c:	4613      	mov	r3, r2
 801a35e:	005b      	lsls	r3, r3, #1
 801a360:	4413      	add	r3, r2
 801a362:	00db      	lsls	r3, r3, #3
 801a364:	440b      	add	r3, r1
 801a366:	3312      	adds	r3, #18
 801a368:	881b      	ldrh	r3, [r3, #0]
 801a36a:	8b7a      	ldrh	r2, [r7, #26]
 801a36c:	429a      	cmp	r2, r3
 801a36e:	d82a      	bhi.n	801a3c6 <etharp_find_entry+0x18a>
            old_pending = i;
 801a370:	8c3b      	ldrh	r3, [r7, #32]
 801a372:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a374:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a378:	4965      	ldr	r1, [pc, #404]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a37a:	4613      	mov	r3, r2
 801a37c:	005b      	lsls	r3, r3, #1
 801a37e:	4413      	add	r3, r2
 801a380:	00db      	lsls	r3, r3, #3
 801a382:	440b      	add	r3, r1
 801a384:	3312      	adds	r3, #18
 801a386:	881b      	ldrh	r3, [r3, #0]
 801a388:	837b      	strh	r3, [r7, #26]
 801a38a:	e01c      	b.n	801a3c6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a38c:	7dfb      	ldrb	r3, [r7, #23]
 801a38e:	2b01      	cmp	r3, #1
 801a390:	d919      	bls.n	801a3c6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a396:	495e      	ldr	r1, [pc, #376]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a398:	4613      	mov	r3, r2
 801a39a:	005b      	lsls	r3, r3, #1
 801a39c:	4413      	add	r3, r2
 801a39e:	00db      	lsls	r3, r3, #3
 801a3a0:	440b      	add	r3, r1
 801a3a2:	3312      	adds	r3, #18
 801a3a4:	881b      	ldrh	r3, [r3, #0]
 801a3a6:	8b3a      	ldrh	r2, [r7, #24]
 801a3a8:	429a      	cmp	r2, r3
 801a3aa:	d80c      	bhi.n	801a3c6 <etharp_find_entry+0x18a>
            old_stable = i;
 801a3ac:	8c3b      	ldrh	r3, [r7, #32]
 801a3ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a3b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3b4:	4956      	ldr	r1, [pc, #344]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a3b6:	4613      	mov	r3, r2
 801a3b8:	005b      	lsls	r3, r3, #1
 801a3ba:	4413      	add	r3, r2
 801a3bc:	00db      	lsls	r3, r3, #3
 801a3be:	440b      	add	r3, r1
 801a3c0:	3312      	adds	r3, #18
 801a3c2:	881b      	ldrh	r3, [r3, #0]
 801a3c4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a3c6:	8c3b      	ldrh	r3, [r7, #32]
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	b29b      	uxth	r3, r3
 801a3cc:	843b      	strh	r3, [r7, #32]
 801a3ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a3d2:	2b09      	cmp	r3, #9
 801a3d4:	f77f af4c 	ble.w	801a270 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a3d8:	7afb      	ldrb	r3, [r7, #11]
 801a3da:	f003 0302 	and.w	r3, r3, #2
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d108      	bne.n	801a3f4 <etharp_find_entry+0x1b8>
 801a3e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a3e6:	2b0a      	cmp	r3, #10
 801a3e8:	d107      	bne.n	801a3fa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a3ea:	7afb      	ldrb	r3, [r7, #11]
 801a3ec:	f003 0301 	and.w	r3, r3, #1
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d102      	bne.n	801a3fa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a3f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f8:	e085      	b.n	801a506 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a3fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a3fe:	2b09      	cmp	r3, #9
 801a400:	dc02      	bgt.n	801a408 <etharp_find_entry+0x1cc>
    i = empty;
 801a402:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a404:	843b      	strh	r3, [r7, #32]
 801a406:	e039      	b.n	801a47c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a408:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a40c:	2b09      	cmp	r3, #9
 801a40e:	dc14      	bgt.n	801a43a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a412:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a418:	493d      	ldr	r1, [pc, #244]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a41a:	4613      	mov	r3, r2
 801a41c:	005b      	lsls	r3, r3, #1
 801a41e:	4413      	add	r3, r2
 801a420:	00db      	lsls	r3, r3, #3
 801a422:	440b      	add	r3, r1
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d018      	beq.n	801a45c <etharp_find_entry+0x220>
 801a42a:	4b3a      	ldr	r3, [pc, #232]	@ (801a514 <etharp_find_entry+0x2d8>)
 801a42c:	f240 126d 	movw	r2, #365	@ 0x16d
 801a430:	493b      	ldr	r1, [pc, #236]	@ (801a520 <etharp_find_entry+0x2e4>)
 801a432:	483a      	ldr	r0, [pc, #232]	@ (801a51c <etharp_find_entry+0x2e0>)
 801a434:	f003 f828 	bl	801d488 <iprintf>
 801a438:	e010      	b.n	801a45c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a43a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a43e:	2b09      	cmp	r3, #9
 801a440:	dc02      	bgt.n	801a448 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a442:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a444:	843b      	strh	r3, [r7, #32]
 801a446:	e009      	b.n	801a45c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a448:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a44c:	2b09      	cmp	r3, #9
 801a44e:	dc02      	bgt.n	801a456 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a450:	8bfb      	ldrh	r3, [r7, #30]
 801a452:	843b      	strh	r3, [r7, #32]
 801a454:	e002      	b.n	801a45c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a456:	f04f 33ff 	mov.w	r3, #4294967295
 801a45a:	e054      	b.n	801a506 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a45c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a460:	2b09      	cmp	r3, #9
 801a462:	dd06      	ble.n	801a472 <etharp_find_entry+0x236>
 801a464:	4b2b      	ldr	r3, [pc, #172]	@ (801a514 <etharp_find_entry+0x2d8>)
 801a466:	f240 127f 	movw	r2, #383	@ 0x17f
 801a46a:	492e      	ldr	r1, [pc, #184]	@ (801a524 <etharp_find_entry+0x2e8>)
 801a46c:	482b      	ldr	r0, [pc, #172]	@ (801a51c <etharp_find_entry+0x2e0>)
 801a46e:	f003 f80b 	bl	801d488 <iprintf>
    etharp_free_entry(i);
 801a472:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a476:	4618      	mov	r0, r3
 801a478:	f7ff fe06 	bl	801a088 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a47c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a480:	2b09      	cmp	r3, #9
 801a482:	dd06      	ble.n	801a492 <etharp_find_entry+0x256>
 801a484:	4b23      	ldr	r3, [pc, #140]	@ (801a514 <etharp_find_entry+0x2d8>)
 801a486:	f240 1283 	movw	r2, #387	@ 0x183
 801a48a:	4926      	ldr	r1, [pc, #152]	@ (801a524 <etharp_find_entry+0x2e8>)
 801a48c:	4823      	ldr	r0, [pc, #140]	@ (801a51c <etharp_find_entry+0x2e0>)
 801a48e:	f002 fffb 	bl	801d488 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a496:	491e      	ldr	r1, [pc, #120]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a498:	4613      	mov	r3, r2
 801a49a:	005b      	lsls	r3, r3, #1
 801a49c:	4413      	add	r3, r2
 801a49e:	00db      	lsls	r3, r3, #3
 801a4a0:	440b      	add	r3, r1
 801a4a2:	3314      	adds	r3, #20
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d006      	beq.n	801a4b8 <etharp_find_entry+0x27c>
 801a4aa:	4b1a      	ldr	r3, [pc, #104]	@ (801a514 <etharp_find_entry+0x2d8>)
 801a4ac:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a4b0:	491d      	ldr	r1, [pc, #116]	@ (801a528 <etharp_find_entry+0x2ec>)
 801a4b2:	481a      	ldr	r0, [pc, #104]	@ (801a51c <etharp_find_entry+0x2e0>)
 801a4b4:	f002 ffe8 	bl	801d488 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d00b      	beq.n	801a4d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a4be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	6819      	ldr	r1, [r3, #0]
 801a4c6:	4812      	ldr	r0, [pc, #72]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a4c8:	4613      	mov	r3, r2
 801a4ca:	005b      	lsls	r3, r3, #1
 801a4cc:	4413      	add	r3, r2
 801a4ce:	00db      	lsls	r3, r3, #3
 801a4d0:	4403      	add	r3, r0
 801a4d2:	3304      	adds	r3, #4
 801a4d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a4d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4da:	490d      	ldr	r1, [pc, #52]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a4dc:	4613      	mov	r3, r2
 801a4de:	005b      	lsls	r3, r3, #1
 801a4e0:	4413      	add	r3, r2
 801a4e2:	00db      	lsls	r3, r3, #3
 801a4e4:	440b      	add	r3, r1
 801a4e6:	3312      	adds	r3, #18
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a4ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4f0:	4907      	ldr	r1, [pc, #28]	@ (801a510 <etharp_find_entry+0x2d4>)
 801a4f2:	4613      	mov	r3, r2
 801a4f4:	005b      	lsls	r3, r3, #1
 801a4f6:	4413      	add	r3, r2
 801a4f8:	00db      	lsls	r3, r3, #3
 801a4fa:	440b      	add	r3, r1
 801a4fc:	3308      	adds	r3, #8
 801a4fe:	687a      	ldr	r2, [r7, #4]
 801a500:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a506:	4618      	mov	r0, r3
 801a508:	3728      	adds	r7, #40	@ 0x28
 801a50a:	46bd      	mov	sp, r7
 801a50c:	bd80      	pop	{r7, pc}
 801a50e:	bf00      	nop
 801a510:	2000f3f4 	.word	0x2000f3f4
 801a514:	08022b3c 	.word	0x08022b3c
 801a518:	08022b74 	.word	0x08022b74
 801a51c:	08022bb4 	.word	0x08022bb4
 801a520:	08022bdc 	.word	0x08022bdc
 801a524:	08022bf4 	.word	0x08022bf4
 801a528:	08022c08 	.word	0x08022c08

0801a52c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b088      	sub	sp, #32
 801a530:	af02      	add	r7, sp, #8
 801a532:	60f8      	str	r0, [r7, #12]
 801a534:	60b9      	str	r1, [r7, #8]
 801a536:	607a      	str	r2, [r7, #4]
 801a538:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a540:	2b06      	cmp	r3, #6
 801a542:	d006      	beq.n	801a552 <etharp_update_arp_entry+0x26>
 801a544:	4b48      	ldr	r3, [pc, #288]	@ (801a668 <etharp_update_arp_entry+0x13c>)
 801a546:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a54a:	4948      	ldr	r1, [pc, #288]	@ (801a66c <etharp_update_arp_entry+0x140>)
 801a54c:	4848      	ldr	r0, [pc, #288]	@ (801a670 <etharp_update_arp_entry+0x144>)
 801a54e:	f002 ff9b 	bl	801d488 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a552:	68bb      	ldr	r3, [r7, #8]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d012      	beq.n	801a57e <etharp_update_arp_entry+0x52>
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d00e      	beq.n	801a57e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	681b      	ldr	r3, [r3, #0]
 801a564:	68f9      	ldr	r1, [r7, #12]
 801a566:	4618      	mov	r0, r3
 801a568:	f001 f8fe 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801a56c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d105      	bne.n	801a57e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a57a:	2be0      	cmp	r3, #224	@ 0xe0
 801a57c:	d102      	bne.n	801a584 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a57e:	f06f 030f 	mvn.w	r3, #15
 801a582:	e06c      	b.n	801a65e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a584:	78fb      	ldrb	r3, [r7, #3]
 801a586:	68fa      	ldr	r2, [r7, #12]
 801a588:	4619      	mov	r1, r3
 801a58a:	68b8      	ldr	r0, [r7, #8]
 801a58c:	f7ff fe56 	bl	801a23c <etharp_find_entry>
 801a590:	4603      	mov	r3, r0
 801a592:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a594:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	da02      	bge.n	801a5a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a59c:	8afb      	ldrh	r3, [r7, #22]
 801a59e:	b25b      	sxtb	r3, r3
 801a5a0:	e05d      	b.n	801a65e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a5a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a5a6:	4933      	ldr	r1, [pc, #204]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a5a8:	4613      	mov	r3, r2
 801a5aa:	005b      	lsls	r3, r3, #1
 801a5ac:	4413      	add	r3, r2
 801a5ae:	00db      	lsls	r3, r3, #3
 801a5b0:	440b      	add	r3, r1
 801a5b2:	3314      	adds	r3, #20
 801a5b4:	2202      	movs	r2, #2
 801a5b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a5b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a5bc:	492d      	ldr	r1, [pc, #180]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a5be:	4613      	mov	r3, r2
 801a5c0:	005b      	lsls	r3, r3, #1
 801a5c2:	4413      	add	r3, r2
 801a5c4:	00db      	lsls	r3, r3, #3
 801a5c6:	440b      	add	r3, r1
 801a5c8:	3308      	adds	r3, #8
 801a5ca:	68fa      	ldr	r2, [r7, #12]
 801a5cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a5ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	005b      	lsls	r3, r3, #1
 801a5d6:	4413      	add	r3, r2
 801a5d8:	00db      	lsls	r3, r3, #3
 801a5da:	3308      	adds	r3, #8
 801a5dc:	4a25      	ldr	r2, [pc, #148]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a5de:	4413      	add	r3, r2
 801a5e0:	3304      	adds	r3, #4
 801a5e2:	2206      	movs	r2, #6
 801a5e4:	6879      	ldr	r1, [r7, #4]
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	f003 f8db 	bl	801d7a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a5ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a5f0:	4920      	ldr	r1, [pc, #128]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a5f2:	4613      	mov	r3, r2
 801a5f4:	005b      	lsls	r3, r3, #1
 801a5f6:	4413      	add	r3, r2
 801a5f8:	00db      	lsls	r3, r3, #3
 801a5fa:	440b      	add	r3, r1
 801a5fc:	3312      	adds	r3, #18
 801a5fe:	2200      	movs	r2, #0
 801a600:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a602:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a606:	491b      	ldr	r1, [pc, #108]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a608:	4613      	mov	r3, r2
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	4413      	add	r3, r2
 801a60e:	00db      	lsls	r3, r3, #3
 801a610:	440b      	add	r3, r1
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d021      	beq.n	801a65c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a61c:	4915      	ldr	r1, [pc, #84]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a61e:	4613      	mov	r3, r2
 801a620:	005b      	lsls	r3, r3, #1
 801a622:	4413      	add	r3, r2
 801a624:	00db      	lsls	r3, r3, #3
 801a626:	440b      	add	r3, r1
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a62c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a630:	4910      	ldr	r1, [pc, #64]	@ (801a674 <etharp_update_arp_entry+0x148>)
 801a632:	4613      	mov	r3, r2
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	4413      	add	r3, r2
 801a638:	00db      	lsls	r3, r3, #3
 801a63a:	440b      	add	r3, r1
 801a63c:	2200      	movs	r2, #0
 801a63e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a646:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a64a:	9300      	str	r3, [sp, #0]
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	6939      	ldr	r1, [r7, #16]
 801a650:	68f8      	ldr	r0, [r7, #12]
 801a652:	f001 ff97 	bl	801c584 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a656:	6938      	ldr	r0, [r7, #16]
 801a658:	f7f8 fb56 	bl	8012d08 <pbuf_free>
  }
  return ERR_OK;
 801a65c:	2300      	movs	r3, #0
}
 801a65e:	4618      	mov	r0, r3
 801a660:	3718      	adds	r7, #24
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
 801a666:	bf00      	nop
 801a668:	08022b3c 	.word	0x08022b3c
 801a66c:	08022c34 	.word	0x08022c34
 801a670:	08022bb4 	.word	0x08022bb4
 801a674:	2000f3f4 	.word	0x2000f3f4

0801a678 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b084      	sub	sp, #16
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a680:	2300      	movs	r3, #0
 801a682:	60fb      	str	r3, [r7, #12]
 801a684:	e01e      	b.n	801a6c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a686:	4913      	ldr	r1, [pc, #76]	@ (801a6d4 <etharp_cleanup_netif+0x5c>)
 801a688:	68fa      	ldr	r2, [r7, #12]
 801a68a:	4613      	mov	r3, r2
 801a68c:	005b      	lsls	r3, r3, #1
 801a68e:	4413      	add	r3, r2
 801a690:	00db      	lsls	r3, r3, #3
 801a692:	440b      	add	r3, r1
 801a694:	3314      	adds	r3, #20
 801a696:	781b      	ldrb	r3, [r3, #0]
 801a698:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a69a:	7afb      	ldrb	r3, [r7, #11]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d00e      	beq.n	801a6be <etharp_cleanup_netif+0x46>
 801a6a0:	490c      	ldr	r1, [pc, #48]	@ (801a6d4 <etharp_cleanup_netif+0x5c>)
 801a6a2:	68fa      	ldr	r2, [r7, #12]
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	005b      	lsls	r3, r3, #1
 801a6a8:	4413      	add	r3, r2
 801a6aa:	00db      	lsls	r3, r3, #3
 801a6ac:	440b      	add	r3, r1
 801a6ae:	3308      	adds	r3, #8
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	687a      	ldr	r2, [r7, #4]
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d102      	bne.n	801a6be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a6b8:	68f8      	ldr	r0, [r7, #12]
 801a6ba:	f7ff fce5 	bl	801a088 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	3301      	adds	r3, #1
 801a6c2:	60fb      	str	r3, [r7, #12]
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	2b09      	cmp	r3, #9
 801a6c8:	dddd      	ble.n	801a686 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a6ca:	bf00      	nop
 801a6cc:	bf00      	nop
 801a6ce:	3710      	adds	r7, #16
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	bd80      	pop	{r7, pc}
 801a6d4:	2000f3f4 	.word	0x2000f3f4

0801a6d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a6d8:	b5b0      	push	{r4, r5, r7, lr}
 801a6da:	b08a      	sub	sp, #40	@ 0x28
 801a6dc:	af04      	add	r7, sp, #16
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a6e2:	683b      	ldr	r3, [r7, #0]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d107      	bne.n	801a6f8 <etharp_input+0x20>
 801a6e8:	4b3d      	ldr	r3, [pc, #244]	@ (801a7e0 <etharp_input+0x108>)
 801a6ea:	f240 228a 	movw	r2, #650	@ 0x28a
 801a6ee:	493d      	ldr	r1, [pc, #244]	@ (801a7e4 <etharp_input+0x10c>)
 801a6f0:	483d      	ldr	r0, [pc, #244]	@ (801a7e8 <etharp_input+0x110>)
 801a6f2:	f002 fec9 	bl	801d488 <iprintf>
 801a6f6:	e06f      	b.n	801a7d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a6fe:	693b      	ldr	r3, [r7, #16]
 801a700:	881b      	ldrh	r3, [r3, #0]
 801a702:	b29b      	uxth	r3, r3
 801a704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a708:	d10c      	bne.n	801a724 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a70e:	2b06      	cmp	r3, #6
 801a710:	d108      	bne.n	801a724 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a712:	693b      	ldr	r3, [r7, #16]
 801a714:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a716:	2b04      	cmp	r3, #4
 801a718:	d104      	bne.n	801a724 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	885b      	ldrh	r3, [r3, #2]
 801a71e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a720:	2b08      	cmp	r3, #8
 801a722:	d003      	beq.n	801a72c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a724:	6878      	ldr	r0, [r7, #4]
 801a726:	f7f8 faef 	bl	8012d08 <pbuf_free>
    return;
 801a72a:	e055      	b.n	801a7d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a72c:	693b      	ldr	r3, [r7, #16]
 801a72e:	330e      	adds	r3, #14
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a734:	693b      	ldr	r3, [r7, #16]
 801a736:	3318      	adds	r3, #24
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a73c:	683b      	ldr	r3, [r7, #0]
 801a73e:	3304      	adds	r3, #4
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d102      	bne.n	801a74c <etharp_input+0x74>
    for_us = 0;
 801a746:	2300      	movs	r3, #0
 801a748:	75fb      	strb	r3, [r7, #23]
 801a74a:	e009      	b.n	801a760 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a74c:	68ba      	ldr	r2, [r7, #8]
 801a74e:	683b      	ldr	r3, [r7, #0]
 801a750:	3304      	adds	r3, #4
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	429a      	cmp	r2, r3
 801a756:	bf0c      	ite	eq
 801a758:	2301      	moveq	r3, #1
 801a75a:	2300      	movne	r3, #0
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a760:	693b      	ldr	r3, [r7, #16]
 801a762:	f103 0208 	add.w	r2, r3, #8
 801a766:	7dfb      	ldrb	r3, [r7, #23]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d001      	beq.n	801a770 <etharp_input+0x98>
 801a76c:	2301      	movs	r3, #1
 801a76e:	e000      	b.n	801a772 <etharp_input+0x9a>
 801a770:	2302      	movs	r3, #2
 801a772:	f107 010c 	add.w	r1, r7, #12
 801a776:	6838      	ldr	r0, [r7, #0]
 801a778:	f7ff fed8 	bl	801a52c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a77c:	693b      	ldr	r3, [r7, #16]
 801a77e:	88db      	ldrh	r3, [r3, #6]
 801a780:	b29b      	uxth	r3, r3
 801a782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a786:	d003      	beq.n	801a790 <etharp_input+0xb8>
 801a788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a78c:	d01e      	beq.n	801a7cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a78e:	e020      	b.n	801a7d2 <etharp_input+0xfa>
      if (for_us) {
 801a790:	7dfb      	ldrb	r3, [r7, #23]
 801a792:	2b00      	cmp	r3, #0
 801a794:	d01c      	beq.n	801a7d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a796:	683b      	ldr	r3, [r7, #0]
 801a798:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a79c:	693b      	ldr	r3, [r7, #16]
 801a79e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a7a2:	683b      	ldr	r3, [r7, #0]
 801a7a4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a7a8:	683b      	ldr	r3, [r7, #0]
 801a7aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a7ac:	693a      	ldr	r2, [r7, #16]
 801a7ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a7b0:	2102      	movs	r1, #2
 801a7b2:	9103      	str	r1, [sp, #12]
 801a7b4:	f107 010c 	add.w	r1, r7, #12
 801a7b8:	9102      	str	r1, [sp, #8]
 801a7ba:	9201      	str	r2, [sp, #4]
 801a7bc:	9300      	str	r3, [sp, #0]
 801a7be:	462b      	mov	r3, r5
 801a7c0:	4622      	mov	r2, r4
 801a7c2:	4601      	mov	r1, r0
 801a7c4:	6838      	ldr	r0, [r7, #0]
 801a7c6:	f000 faeb 	bl	801ada0 <etharp_raw>
      break;
 801a7ca:	e001      	b.n	801a7d0 <etharp_input+0xf8>
      break;
 801a7cc:	bf00      	nop
 801a7ce:	e000      	b.n	801a7d2 <etharp_input+0xfa>
      break;
 801a7d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a7d2:	6878      	ldr	r0, [r7, #4]
 801a7d4:	f7f8 fa98 	bl	8012d08 <pbuf_free>
}
 801a7d8:	3718      	adds	r7, #24
 801a7da:	46bd      	mov	sp, r7
 801a7dc:	bdb0      	pop	{r4, r5, r7, pc}
 801a7de:	bf00      	nop
 801a7e0:	08022b3c 	.word	0x08022b3c
 801a7e4:	08022c8c 	.word	0x08022c8c
 801a7e8:	08022bb4 	.word	0x08022bb4

0801a7ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b086      	sub	sp, #24
 801a7f0:	af02      	add	r7, sp, #8
 801a7f2:	60f8      	str	r0, [r7, #12]
 801a7f4:	60b9      	str	r1, [r7, #8]
 801a7f6:	4613      	mov	r3, r2
 801a7f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a7fa:	79fa      	ldrb	r2, [r7, #7]
 801a7fc:	4944      	ldr	r1, [pc, #272]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a7fe:	4613      	mov	r3, r2
 801a800:	005b      	lsls	r3, r3, #1
 801a802:	4413      	add	r3, r2
 801a804:	00db      	lsls	r3, r3, #3
 801a806:	440b      	add	r3, r1
 801a808:	3314      	adds	r3, #20
 801a80a:	781b      	ldrb	r3, [r3, #0]
 801a80c:	2b01      	cmp	r3, #1
 801a80e:	d806      	bhi.n	801a81e <etharp_output_to_arp_index+0x32>
 801a810:	4b40      	ldr	r3, [pc, #256]	@ (801a914 <etharp_output_to_arp_index+0x128>)
 801a812:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a816:	4940      	ldr	r1, [pc, #256]	@ (801a918 <etharp_output_to_arp_index+0x12c>)
 801a818:	4840      	ldr	r0, [pc, #256]	@ (801a91c <etharp_output_to_arp_index+0x130>)
 801a81a:	f002 fe35 	bl	801d488 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a81e:	79fa      	ldrb	r2, [r7, #7]
 801a820:	493b      	ldr	r1, [pc, #236]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a822:	4613      	mov	r3, r2
 801a824:	005b      	lsls	r3, r3, #1
 801a826:	4413      	add	r3, r2
 801a828:	00db      	lsls	r3, r3, #3
 801a82a:	440b      	add	r3, r1
 801a82c:	3314      	adds	r3, #20
 801a82e:	781b      	ldrb	r3, [r3, #0]
 801a830:	2b02      	cmp	r3, #2
 801a832:	d153      	bne.n	801a8dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a834:	79fa      	ldrb	r2, [r7, #7]
 801a836:	4936      	ldr	r1, [pc, #216]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a838:	4613      	mov	r3, r2
 801a83a:	005b      	lsls	r3, r3, #1
 801a83c:	4413      	add	r3, r2
 801a83e:	00db      	lsls	r3, r3, #3
 801a840:	440b      	add	r3, r1
 801a842:	3312      	adds	r3, #18
 801a844:	881b      	ldrh	r3, [r3, #0]
 801a846:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a84a:	d919      	bls.n	801a880 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a84c:	79fa      	ldrb	r2, [r7, #7]
 801a84e:	4613      	mov	r3, r2
 801a850:	005b      	lsls	r3, r3, #1
 801a852:	4413      	add	r3, r2
 801a854:	00db      	lsls	r3, r3, #3
 801a856:	4a2e      	ldr	r2, [pc, #184]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a858:	4413      	add	r3, r2
 801a85a:	3304      	adds	r3, #4
 801a85c:	4619      	mov	r1, r3
 801a85e:	68f8      	ldr	r0, [r7, #12]
 801a860:	f000 fb4c 	bl	801aefc <etharp_request>
 801a864:	4603      	mov	r3, r0
 801a866:	2b00      	cmp	r3, #0
 801a868:	d138      	bne.n	801a8dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a86a:	79fa      	ldrb	r2, [r7, #7]
 801a86c:	4928      	ldr	r1, [pc, #160]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a86e:	4613      	mov	r3, r2
 801a870:	005b      	lsls	r3, r3, #1
 801a872:	4413      	add	r3, r2
 801a874:	00db      	lsls	r3, r3, #3
 801a876:	440b      	add	r3, r1
 801a878:	3314      	adds	r3, #20
 801a87a:	2203      	movs	r2, #3
 801a87c:	701a      	strb	r2, [r3, #0]
 801a87e:	e02d      	b.n	801a8dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a880:	79fa      	ldrb	r2, [r7, #7]
 801a882:	4923      	ldr	r1, [pc, #140]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a884:	4613      	mov	r3, r2
 801a886:	005b      	lsls	r3, r3, #1
 801a888:	4413      	add	r3, r2
 801a88a:	00db      	lsls	r3, r3, #3
 801a88c:	440b      	add	r3, r1
 801a88e:	3312      	adds	r3, #18
 801a890:	881b      	ldrh	r3, [r3, #0]
 801a892:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a896:	d321      	bcc.n	801a8dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a898:	79fa      	ldrb	r2, [r7, #7]
 801a89a:	4613      	mov	r3, r2
 801a89c:	005b      	lsls	r3, r3, #1
 801a89e:	4413      	add	r3, r2
 801a8a0:	00db      	lsls	r3, r3, #3
 801a8a2:	4a1b      	ldr	r2, [pc, #108]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a8a4:	4413      	add	r3, r2
 801a8a6:	1d19      	adds	r1, r3, #4
 801a8a8:	79fa      	ldrb	r2, [r7, #7]
 801a8aa:	4613      	mov	r3, r2
 801a8ac:	005b      	lsls	r3, r3, #1
 801a8ae:	4413      	add	r3, r2
 801a8b0:	00db      	lsls	r3, r3, #3
 801a8b2:	3308      	adds	r3, #8
 801a8b4:	4a16      	ldr	r2, [pc, #88]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a8b6:	4413      	add	r3, r2
 801a8b8:	3304      	adds	r3, #4
 801a8ba:	461a      	mov	r2, r3
 801a8bc:	68f8      	ldr	r0, [r7, #12]
 801a8be:	f000 fafb 	bl	801aeb8 <etharp_request_dst>
 801a8c2:	4603      	mov	r3, r0
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	d109      	bne.n	801a8dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a8c8:	79fa      	ldrb	r2, [r7, #7]
 801a8ca:	4911      	ldr	r1, [pc, #68]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	005b      	lsls	r3, r3, #1
 801a8d0:	4413      	add	r3, r2
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	440b      	add	r3, r1
 801a8d6:	3314      	adds	r3, #20
 801a8d8:	2203      	movs	r2, #3
 801a8da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a8e2:	79fa      	ldrb	r2, [r7, #7]
 801a8e4:	4613      	mov	r3, r2
 801a8e6:	005b      	lsls	r3, r3, #1
 801a8e8:	4413      	add	r3, r2
 801a8ea:	00db      	lsls	r3, r3, #3
 801a8ec:	3308      	adds	r3, #8
 801a8ee:	4a08      	ldr	r2, [pc, #32]	@ (801a910 <etharp_output_to_arp_index+0x124>)
 801a8f0:	4413      	add	r3, r2
 801a8f2:	3304      	adds	r3, #4
 801a8f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a8f8:	9200      	str	r2, [sp, #0]
 801a8fa:	460a      	mov	r2, r1
 801a8fc:	68b9      	ldr	r1, [r7, #8]
 801a8fe:	68f8      	ldr	r0, [r7, #12]
 801a900:	f001 fe40 	bl	801c584 <ethernet_output>
 801a904:	4603      	mov	r3, r0
}
 801a906:	4618      	mov	r0, r3
 801a908:	3710      	adds	r7, #16
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bd80      	pop	{r7, pc}
 801a90e:	bf00      	nop
 801a910:	2000f3f4 	.word	0x2000f3f4
 801a914:	08022b3c 	.word	0x08022b3c
 801a918:	08022cac 	.word	0x08022cac
 801a91c:	08022bb4 	.word	0x08022bb4

0801a920 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b08a      	sub	sp, #40	@ 0x28
 801a924:	af02      	add	r7, sp, #8
 801a926:	60f8      	str	r0, [r7, #12]
 801a928:	60b9      	str	r1, [r7, #8]
 801a92a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d106      	bne.n	801a944 <etharp_output+0x24>
 801a936:	4b73      	ldr	r3, [pc, #460]	@ (801ab04 <etharp_output+0x1e4>)
 801a938:	f240 321e 	movw	r2, #798	@ 0x31e
 801a93c:	4972      	ldr	r1, [pc, #456]	@ (801ab08 <etharp_output+0x1e8>)
 801a93e:	4873      	ldr	r0, [pc, #460]	@ (801ab0c <etharp_output+0x1ec>)
 801a940:	f002 fda2 	bl	801d488 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d106      	bne.n	801a958 <etharp_output+0x38>
 801a94a:	4b6e      	ldr	r3, [pc, #440]	@ (801ab04 <etharp_output+0x1e4>)
 801a94c:	f240 321f 	movw	r2, #799	@ 0x31f
 801a950:	496f      	ldr	r1, [pc, #444]	@ (801ab10 <etharp_output+0x1f0>)
 801a952:	486e      	ldr	r0, [pc, #440]	@ (801ab0c <etharp_output+0x1ec>)
 801a954:	f002 fd98 	bl	801d488 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d106      	bne.n	801a96c <etharp_output+0x4c>
 801a95e:	4b69      	ldr	r3, [pc, #420]	@ (801ab04 <etharp_output+0x1e4>)
 801a960:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801a964:	496b      	ldr	r1, [pc, #428]	@ (801ab14 <etharp_output+0x1f4>)
 801a966:	4869      	ldr	r0, [pc, #420]	@ (801ab0c <etharp_output+0x1ec>)
 801a968:	f002 fd8e 	bl	801d488 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	68f9      	ldr	r1, [r7, #12]
 801a972:	4618      	mov	r0, r3
 801a974:	f000 fef8 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801a978:	4603      	mov	r3, r0
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d002      	beq.n	801a984 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a97e:	4b66      	ldr	r3, [pc, #408]	@ (801ab18 <etharp_output+0x1f8>)
 801a980:	61fb      	str	r3, [r7, #28]
 801a982:	e0af      	b.n	801aae4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a98c:	2be0      	cmp	r3, #224	@ 0xe0
 801a98e:	d118      	bne.n	801a9c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a990:	2301      	movs	r3, #1
 801a992:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a994:	2300      	movs	r3, #0
 801a996:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a998:	235e      	movs	r3, #94	@ 0x5e
 801a99a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	3301      	adds	r3, #1
 801a9a0:	781b      	ldrb	r3, [r3, #0]
 801a9a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a9a6:	b2db      	uxtb	r3, r3
 801a9a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	3302      	adds	r3, #2
 801a9ae:	781b      	ldrb	r3, [r3, #0]
 801a9b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	3303      	adds	r3, #3
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a9ba:	f107 0310 	add.w	r3, r7, #16
 801a9be:	61fb      	str	r3, [r7, #28]
 801a9c0:	e090      	b.n	801aae4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681a      	ldr	r2, [r3, #0]
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	3304      	adds	r3, #4
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	405a      	eors	r2, r3
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	3308      	adds	r3, #8
 801a9d2:	681b      	ldr	r3, [r3, #0]
 801a9d4:	4013      	ands	r3, r2
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d012      	beq.n	801aa00 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a9e0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801a9e4:	4293      	cmp	r3, r2
 801a9e6:	d00b      	beq.n	801aa00 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	330c      	adds	r3, #12
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d003      	beq.n	801a9fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	330c      	adds	r3, #12
 801a9f6:	61bb      	str	r3, [r7, #24]
 801a9f8:	e002      	b.n	801aa00 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a9fa:	f06f 0303 	mvn.w	r3, #3
 801a9fe:	e07d      	b.n	801aafc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa00:	4b46      	ldr	r3, [pc, #280]	@ (801ab1c <etharp_output+0x1fc>)
 801aa02:	781b      	ldrb	r3, [r3, #0]
 801aa04:	4619      	mov	r1, r3
 801aa06:	4a46      	ldr	r2, [pc, #280]	@ (801ab20 <etharp_output+0x200>)
 801aa08:	460b      	mov	r3, r1
 801aa0a:	005b      	lsls	r3, r3, #1
 801aa0c:	440b      	add	r3, r1
 801aa0e:	00db      	lsls	r3, r3, #3
 801aa10:	4413      	add	r3, r2
 801aa12:	3314      	adds	r3, #20
 801aa14:	781b      	ldrb	r3, [r3, #0]
 801aa16:	2b01      	cmp	r3, #1
 801aa18:	d925      	bls.n	801aa66 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aa1a:	4b40      	ldr	r3, [pc, #256]	@ (801ab1c <etharp_output+0x1fc>)
 801aa1c:	781b      	ldrb	r3, [r3, #0]
 801aa1e:	4619      	mov	r1, r3
 801aa20:	4a3f      	ldr	r2, [pc, #252]	@ (801ab20 <etharp_output+0x200>)
 801aa22:	460b      	mov	r3, r1
 801aa24:	005b      	lsls	r3, r3, #1
 801aa26:	440b      	add	r3, r1
 801aa28:	00db      	lsls	r3, r3, #3
 801aa2a:	4413      	add	r3, r2
 801aa2c:	3308      	adds	r3, #8
 801aa2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa30:	68fa      	ldr	r2, [r7, #12]
 801aa32:	429a      	cmp	r2, r3
 801aa34:	d117      	bne.n	801aa66 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aa36:	69bb      	ldr	r3, [r7, #24]
 801aa38:	681a      	ldr	r2, [r3, #0]
 801aa3a:	4b38      	ldr	r3, [pc, #224]	@ (801ab1c <etharp_output+0x1fc>)
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	4618      	mov	r0, r3
 801aa40:	4937      	ldr	r1, [pc, #220]	@ (801ab20 <etharp_output+0x200>)
 801aa42:	4603      	mov	r3, r0
 801aa44:	005b      	lsls	r3, r3, #1
 801aa46:	4403      	add	r3, r0
 801aa48:	00db      	lsls	r3, r3, #3
 801aa4a:	440b      	add	r3, r1
 801aa4c:	3304      	adds	r3, #4
 801aa4e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aa50:	429a      	cmp	r2, r3
 801aa52:	d108      	bne.n	801aa66 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aa54:	4b31      	ldr	r3, [pc, #196]	@ (801ab1c <etharp_output+0x1fc>)
 801aa56:	781b      	ldrb	r3, [r3, #0]
 801aa58:	461a      	mov	r2, r3
 801aa5a:	68b9      	ldr	r1, [r7, #8]
 801aa5c:	68f8      	ldr	r0, [r7, #12]
 801aa5e:	f7ff fec5 	bl	801a7ec <etharp_output_to_arp_index>
 801aa62:	4603      	mov	r3, r0
 801aa64:	e04a      	b.n	801aafc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aa66:	2300      	movs	r3, #0
 801aa68:	75fb      	strb	r3, [r7, #23]
 801aa6a:	e031      	b.n	801aad0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aa6c:	7dfa      	ldrb	r2, [r7, #23]
 801aa6e:	492c      	ldr	r1, [pc, #176]	@ (801ab20 <etharp_output+0x200>)
 801aa70:	4613      	mov	r3, r2
 801aa72:	005b      	lsls	r3, r3, #1
 801aa74:	4413      	add	r3, r2
 801aa76:	00db      	lsls	r3, r3, #3
 801aa78:	440b      	add	r3, r1
 801aa7a:	3314      	adds	r3, #20
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	2b01      	cmp	r3, #1
 801aa80:	d923      	bls.n	801aaca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801aa82:	7dfa      	ldrb	r2, [r7, #23]
 801aa84:	4926      	ldr	r1, [pc, #152]	@ (801ab20 <etharp_output+0x200>)
 801aa86:	4613      	mov	r3, r2
 801aa88:	005b      	lsls	r3, r3, #1
 801aa8a:	4413      	add	r3, r2
 801aa8c:	00db      	lsls	r3, r3, #3
 801aa8e:	440b      	add	r3, r1
 801aa90:	3308      	adds	r3, #8
 801aa92:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aa94:	68fa      	ldr	r2, [r7, #12]
 801aa96:	429a      	cmp	r2, r3
 801aa98:	d117      	bne.n	801aaca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801aa9a:	69bb      	ldr	r3, [r7, #24]
 801aa9c:	6819      	ldr	r1, [r3, #0]
 801aa9e:	7dfa      	ldrb	r2, [r7, #23]
 801aaa0:	481f      	ldr	r0, [pc, #124]	@ (801ab20 <etharp_output+0x200>)
 801aaa2:	4613      	mov	r3, r2
 801aaa4:	005b      	lsls	r3, r3, #1
 801aaa6:	4413      	add	r3, r2
 801aaa8:	00db      	lsls	r3, r3, #3
 801aaaa:	4403      	add	r3, r0
 801aaac:	3304      	adds	r3, #4
 801aaae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801aab0:	4299      	cmp	r1, r3
 801aab2:	d10a      	bne.n	801aaca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801aab4:	4a19      	ldr	r2, [pc, #100]	@ (801ab1c <etharp_output+0x1fc>)
 801aab6:	7dfb      	ldrb	r3, [r7, #23]
 801aab8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801aaba:	7dfb      	ldrb	r3, [r7, #23]
 801aabc:	461a      	mov	r2, r3
 801aabe:	68b9      	ldr	r1, [r7, #8]
 801aac0:	68f8      	ldr	r0, [r7, #12]
 801aac2:	f7ff fe93 	bl	801a7ec <etharp_output_to_arp_index>
 801aac6:	4603      	mov	r3, r0
 801aac8:	e018      	b.n	801aafc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aaca:	7dfb      	ldrb	r3, [r7, #23]
 801aacc:	3301      	adds	r3, #1
 801aace:	75fb      	strb	r3, [r7, #23]
 801aad0:	7dfb      	ldrb	r3, [r7, #23]
 801aad2:	2b09      	cmp	r3, #9
 801aad4:	d9ca      	bls.n	801aa6c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801aad6:	68ba      	ldr	r2, [r7, #8]
 801aad8:	69b9      	ldr	r1, [r7, #24]
 801aada:	68f8      	ldr	r0, [r7, #12]
 801aadc:	f000 f822 	bl	801ab24 <etharp_query>
 801aae0:	4603      	mov	r3, r0
 801aae2:	e00b      	b.n	801aafc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801aaea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aaee:	9300      	str	r3, [sp, #0]
 801aaf0:	69fb      	ldr	r3, [r7, #28]
 801aaf2:	68b9      	ldr	r1, [r7, #8]
 801aaf4:	68f8      	ldr	r0, [r7, #12]
 801aaf6:	f001 fd45 	bl	801c584 <ethernet_output>
 801aafa:	4603      	mov	r3, r0
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	3720      	adds	r7, #32
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd80      	pop	{r7, pc}
 801ab04:	08022b3c 	.word	0x08022b3c
 801ab08:	08022c8c 	.word	0x08022c8c
 801ab0c:	08022bb4 	.word	0x08022bb4
 801ab10:	08022cdc 	.word	0x08022cdc
 801ab14:	08022c7c 	.word	0x08022c7c
 801ab18:	08024a20 	.word	0x08024a20
 801ab1c:	2000f4e4 	.word	0x2000f4e4
 801ab20:	2000f3f4 	.word	0x2000f3f4

0801ab24 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b08c      	sub	sp, #48	@ 0x30
 801ab28:	af02      	add	r7, sp, #8
 801ab2a:	60f8      	str	r0, [r7, #12]
 801ab2c:	60b9      	str	r1, [r7, #8]
 801ab2e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	3326      	adds	r3, #38	@ 0x26
 801ab34:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ab36:	23ff      	movs	r3, #255	@ 0xff
 801ab38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	68f9      	ldr	r1, [r7, #12]
 801ab46:	4618      	mov	r0, r3
 801ab48:	f000 fe0e 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801ab4c:	4603      	mov	r3, r0
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d10c      	bne.n	801ab6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ab52:	68bb      	ldr	r3, [r7, #8]
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ab5a:	2be0      	cmp	r3, #224	@ 0xe0
 801ab5c:	d006      	beq.n	801ab6c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ab5e:	68bb      	ldr	r3, [r7, #8]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d003      	beq.n	801ab6c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ab64:	68bb      	ldr	r3, [r7, #8]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d102      	bne.n	801ab72 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ab6c:	f06f 030f 	mvn.w	r3, #15
 801ab70:	e101      	b.n	801ad76 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ab72:	68fa      	ldr	r2, [r7, #12]
 801ab74:	2101      	movs	r1, #1
 801ab76:	68b8      	ldr	r0, [r7, #8]
 801ab78:	f7ff fb60 	bl	801a23c <etharp_find_entry>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ab80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	da02      	bge.n	801ab8e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ab88:	8a7b      	ldrh	r3, [r7, #18]
 801ab8a:	b25b      	sxtb	r3, r3
 801ab8c:	e0f3      	b.n	801ad76 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ab8e:	8a7b      	ldrh	r3, [r7, #18]
 801ab90:	2b7e      	cmp	r3, #126	@ 0x7e
 801ab92:	d906      	bls.n	801aba2 <etharp_query+0x7e>
 801ab94:	4b7a      	ldr	r3, [pc, #488]	@ (801ad80 <etharp_query+0x25c>)
 801ab96:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ab9a:	497a      	ldr	r1, [pc, #488]	@ (801ad84 <etharp_query+0x260>)
 801ab9c:	487a      	ldr	r0, [pc, #488]	@ (801ad88 <etharp_query+0x264>)
 801ab9e:	f002 fc73 	bl	801d488 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801aba2:	8a7b      	ldrh	r3, [r7, #18]
 801aba4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801aba6:	7c7a      	ldrb	r2, [r7, #17]
 801aba8:	4978      	ldr	r1, [pc, #480]	@ (801ad8c <etharp_query+0x268>)
 801abaa:	4613      	mov	r3, r2
 801abac:	005b      	lsls	r3, r3, #1
 801abae:	4413      	add	r3, r2
 801abb0:	00db      	lsls	r3, r3, #3
 801abb2:	440b      	add	r3, r1
 801abb4:	3314      	adds	r3, #20
 801abb6:	781b      	ldrb	r3, [r3, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d115      	bne.n	801abe8 <etharp_query+0xc4>
    is_new_entry = 1;
 801abbc:	2301      	movs	r3, #1
 801abbe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801abc0:	7c7a      	ldrb	r2, [r7, #17]
 801abc2:	4972      	ldr	r1, [pc, #456]	@ (801ad8c <etharp_query+0x268>)
 801abc4:	4613      	mov	r3, r2
 801abc6:	005b      	lsls	r3, r3, #1
 801abc8:	4413      	add	r3, r2
 801abca:	00db      	lsls	r3, r3, #3
 801abcc:	440b      	add	r3, r1
 801abce:	3314      	adds	r3, #20
 801abd0:	2201      	movs	r2, #1
 801abd2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801abd4:	7c7a      	ldrb	r2, [r7, #17]
 801abd6:	496d      	ldr	r1, [pc, #436]	@ (801ad8c <etharp_query+0x268>)
 801abd8:	4613      	mov	r3, r2
 801abda:	005b      	lsls	r3, r3, #1
 801abdc:	4413      	add	r3, r2
 801abde:	00db      	lsls	r3, r3, #3
 801abe0:	440b      	add	r3, r1
 801abe2:	3308      	adds	r3, #8
 801abe4:	68fa      	ldr	r2, [r7, #12]
 801abe6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801abe8:	7c7a      	ldrb	r2, [r7, #17]
 801abea:	4968      	ldr	r1, [pc, #416]	@ (801ad8c <etharp_query+0x268>)
 801abec:	4613      	mov	r3, r2
 801abee:	005b      	lsls	r3, r3, #1
 801abf0:	4413      	add	r3, r2
 801abf2:	00db      	lsls	r3, r3, #3
 801abf4:	440b      	add	r3, r1
 801abf6:	3314      	adds	r3, #20
 801abf8:	781b      	ldrb	r3, [r3, #0]
 801abfa:	2b01      	cmp	r3, #1
 801abfc:	d011      	beq.n	801ac22 <etharp_query+0xfe>
 801abfe:	7c7a      	ldrb	r2, [r7, #17]
 801ac00:	4962      	ldr	r1, [pc, #392]	@ (801ad8c <etharp_query+0x268>)
 801ac02:	4613      	mov	r3, r2
 801ac04:	005b      	lsls	r3, r3, #1
 801ac06:	4413      	add	r3, r2
 801ac08:	00db      	lsls	r3, r3, #3
 801ac0a:	440b      	add	r3, r1
 801ac0c:	3314      	adds	r3, #20
 801ac0e:	781b      	ldrb	r3, [r3, #0]
 801ac10:	2b01      	cmp	r3, #1
 801ac12:	d806      	bhi.n	801ac22 <etharp_query+0xfe>
 801ac14:	4b5a      	ldr	r3, [pc, #360]	@ (801ad80 <etharp_query+0x25c>)
 801ac16:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801ac1a:	495d      	ldr	r1, [pc, #372]	@ (801ad90 <etharp_query+0x26c>)
 801ac1c:	485a      	ldr	r0, [pc, #360]	@ (801ad88 <etharp_query+0x264>)
 801ac1e:	f002 fc33 	bl	801d488 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ac22:	6a3b      	ldr	r3, [r7, #32]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d102      	bne.n	801ac2e <etharp_query+0x10a>
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d10c      	bne.n	801ac48 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ac2e:	68b9      	ldr	r1, [r7, #8]
 801ac30:	68f8      	ldr	r0, [r7, #12]
 801ac32:	f000 f963 	bl	801aefc <etharp_request>
 801ac36:	4603      	mov	r3, r0
 801ac38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d102      	bne.n	801ac48 <etharp_query+0x124>
      return result;
 801ac42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801ac46:	e096      	b.n	801ad76 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d106      	bne.n	801ac5c <etharp_query+0x138>
 801ac4e:	4b4c      	ldr	r3, [pc, #304]	@ (801ad80 <etharp_query+0x25c>)
 801ac50:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ac54:	494f      	ldr	r1, [pc, #316]	@ (801ad94 <etharp_query+0x270>)
 801ac56:	484c      	ldr	r0, [pc, #304]	@ (801ad88 <etharp_query+0x264>)
 801ac58:	f002 fc16 	bl	801d488 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ac5c:	7c7a      	ldrb	r2, [r7, #17]
 801ac5e:	494b      	ldr	r1, [pc, #300]	@ (801ad8c <etharp_query+0x268>)
 801ac60:	4613      	mov	r3, r2
 801ac62:	005b      	lsls	r3, r3, #1
 801ac64:	4413      	add	r3, r2
 801ac66:	00db      	lsls	r3, r3, #3
 801ac68:	440b      	add	r3, r1
 801ac6a:	3314      	adds	r3, #20
 801ac6c:	781b      	ldrb	r3, [r3, #0]
 801ac6e:	2b01      	cmp	r3, #1
 801ac70:	d917      	bls.n	801aca2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ac72:	4a49      	ldr	r2, [pc, #292]	@ (801ad98 <etharp_query+0x274>)
 801ac74:	7c7b      	ldrb	r3, [r7, #17]
 801ac76:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ac78:	7c7a      	ldrb	r2, [r7, #17]
 801ac7a:	4613      	mov	r3, r2
 801ac7c:	005b      	lsls	r3, r3, #1
 801ac7e:	4413      	add	r3, r2
 801ac80:	00db      	lsls	r3, r3, #3
 801ac82:	3308      	adds	r3, #8
 801ac84:	4a41      	ldr	r2, [pc, #260]	@ (801ad8c <etharp_query+0x268>)
 801ac86:	4413      	add	r3, r2
 801ac88:	3304      	adds	r3, #4
 801ac8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ac8e:	9200      	str	r2, [sp, #0]
 801ac90:	697a      	ldr	r2, [r7, #20]
 801ac92:	6879      	ldr	r1, [r7, #4]
 801ac94:	68f8      	ldr	r0, [r7, #12]
 801ac96:	f001 fc75 	bl	801c584 <ethernet_output>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801aca0:	e067      	b.n	801ad72 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aca2:	7c7a      	ldrb	r2, [r7, #17]
 801aca4:	4939      	ldr	r1, [pc, #228]	@ (801ad8c <etharp_query+0x268>)
 801aca6:	4613      	mov	r3, r2
 801aca8:	005b      	lsls	r3, r3, #1
 801acaa:	4413      	add	r3, r2
 801acac:	00db      	lsls	r3, r3, #3
 801acae:	440b      	add	r3, r1
 801acb0:	3314      	adds	r3, #20
 801acb2:	781b      	ldrb	r3, [r3, #0]
 801acb4:	2b01      	cmp	r3, #1
 801acb6:	d15c      	bne.n	801ad72 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801acb8:	2300      	movs	r3, #0
 801acba:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 801acc0:	e01c      	b.n	801acfc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801acc2:	69fb      	ldr	r3, [r7, #28]
 801acc4:	895a      	ldrh	r2, [r3, #10]
 801acc6:	69fb      	ldr	r3, [r7, #28]
 801acc8:	891b      	ldrh	r3, [r3, #8]
 801acca:	429a      	cmp	r2, r3
 801accc:	d10a      	bne.n	801ace4 <etharp_query+0x1c0>
 801acce:	69fb      	ldr	r3, [r7, #28]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	d006      	beq.n	801ace4 <etharp_query+0x1c0>
 801acd6:	4b2a      	ldr	r3, [pc, #168]	@ (801ad80 <etharp_query+0x25c>)
 801acd8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801acdc:	492f      	ldr	r1, [pc, #188]	@ (801ad9c <etharp_query+0x278>)
 801acde:	482a      	ldr	r0, [pc, #168]	@ (801ad88 <etharp_query+0x264>)
 801ace0:	f002 fbd2 	bl	801d488 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ace4:	69fb      	ldr	r3, [r7, #28]
 801ace6:	7b1b      	ldrb	r3, [r3, #12]
 801ace8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801acec:	2b00      	cmp	r3, #0
 801acee:	d002      	beq.n	801acf6 <etharp_query+0x1d2>
        copy_needed = 1;
 801acf0:	2301      	movs	r3, #1
 801acf2:	61bb      	str	r3, [r7, #24]
        break;
 801acf4:	e005      	b.n	801ad02 <etharp_query+0x1de>
      }
      p = p->next;
 801acf6:	69fb      	ldr	r3, [r7, #28]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	61fb      	str	r3, [r7, #28]
    while (p) {
 801acfc:	69fb      	ldr	r3, [r7, #28]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1df      	bne.n	801acc2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ad02:	69bb      	ldr	r3, [r7, #24]
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d007      	beq.n	801ad18 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ad08:	687a      	ldr	r2, [r7, #4]
 801ad0a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ad0e:	200e      	movs	r0, #14
 801ad10:	f7f8 fa72 	bl	80131f8 <pbuf_clone>
 801ad14:	61f8      	str	r0, [r7, #28]
 801ad16:	e004      	b.n	801ad22 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ad1c:	69f8      	ldr	r0, [r7, #28]
 801ad1e:	f7f8 f899 	bl	8012e54 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ad22:	69fb      	ldr	r3, [r7, #28]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d021      	beq.n	801ad6c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ad28:	7c7a      	ldrb	r2, [r7, #17]
 801ad2a:	4918      	ldr	r1, [pc, #96]	@ (801ad8c <etharp_query+0x268>)
 801ad2c:	4613      	mov	r3, r2
 801ad2e:	005b      	lsls	r3, r3, #1
 801ad30:	4413      	add	r3, r2
 801ad32:	00db      	lsls	r3, r3, #3
 801ad34:	440b      	add	r3, r1
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d00a      	beq.n	801ad52 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ad3c:	7c7a      	ldrb	r2, [r7, #17]
 801ad3e:	4913      	ldr	r1, [pc, #76]	@ (801ad8c <etharp_query+0x268>)
 801ad40:	4613      	mov	r3, r2
 801ad42:	005b      	lsls	r3, r3, #1
 801ad44:	4413      	add	r3, r2
 801ad46:	00db      	lsls	r3, r3, #3
 801ad48:	440b      	add	r3, r1
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	f7f7 ffdb 	bl	8012d08 <pbuf_free>
      }
      arp_table[i].q = p;
 801ad52:	7c7a      	ldrb	r2, [r7, #17]
 801ad54:	490d      	ldr	r1, [pc, #52]	@ (801ad8c <etharp_query+0x268>)
 801ad56:	4613      	mov	r3, r2
 801ad58:	005b      	lsls	r3, r3, #1
 801ad5a:	4413      	add	r3, r2
 801ad5c:	00db      	lsls	r3, r3, #3
 801ad5e:	440b      	add	r3, r1
 801ad60:	69fa      	ldr	r2, [r7, #28]
 801ad62:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ad64:	2300      	movs	r3, #0
 801ad66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad6a:	e002      	b.n	801ad72 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ad6c:	23ff      	movs	r3, #255	@ 0xff
 801ad6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ad72:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ad76:	4618      	mov	r0, r3
 801ad78:	3728      	adds	r7, #40	@ 0x28
 801ad7a:	46bd      	mov	sp, r7
 801ad7c:	bd80      	pop	{r7, pc}
 801ad7e:	bf00      	nop
 801ad80:	08022b3c 	.word	0x08022b3c
 801ad84:	08022ce8 	.word	0x08022ce8
 801ad88:	08022bb4 	.word	0x08022bb4
 801ad8c:	2000f3f4 	.word	0x2000f3f4
 801ad90:	08022cf8 	.word	0x08022cf8
 801ad94:	08022cdc 	.word	0x08022cdc
 801ad98:	2000f4e4 	.word	0x2000f4e4
 801ad9c:	08022d20 	.word	0x08022d20

0801ada0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b08a      	sub	sp, #40	@ 0x28
 801ada4:	af02      	add	r7, sp, #8
 801ada6:	60f8      	str	r0, [r7, #12]
 801ada8:	60b9      	str	r1, [r7, #8]
 801adaa:	607a      	str	r2, [r7, #4]
 801adac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801adae:	2300      	movs	r3, #0
 801adb0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801adb2:	68fb      	ldr	r3, [r7, #12]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d106      	bne.n	801adc6 <etharp_raw+0x26>
 801adb8:	4b3a      	ldr	r3, [pc, #232]	@ (801aea4 <etharp_raw+0x104>)
 801adba:	f240 4257 	movw	r2, #1111	@ 0x457
 801adbe:	493a      	ldr	r1, [pc, #232]	@ (801aea8 <etharp_raw+0x108>)
 801adc0:	483a      	ldr	r0, [pc, #232]	@ (801aeac <etharp_raw+0x10c>)
 801adc2:	f002 fb61 	bl	801d488 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801adc6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801adca:	211c      	movs	r1, #28
 801adcc:	200e      	movs	r0, #14
 801adce:	f7f7 fcb7 	bl	8012740 <pbuf_alloc>
 801add2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801add4:	69bb      	ldr	r3, [r7, #24]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d102      	bne.n	801ade0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801adda:	f04f 33ff 	mov.w	r3, #4294967295
 801adde:	e05d      	b.n	801ae9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ade0:	69bb      	ldr	r3, [r7, #24]
 801ade2:	895b      	ldrh	r3, [r3, #10]
 801ade4:	2b1b      	cmp	r3, #27
 801ade6:	d806      	bhi.n	801adf6 <etharp_raw+0x56>
 801ade8:	4b2e      	ldr	r3, [pc, #184]	@ (801aea4 <etharp_raw+0x104>)
 801adea:	f240 4262 	movw	r2, #1122	@ 0x462
 801adee:	4930      	ldr	r1, [pc, #192]	@ (801aeb0 <etharp_raw+0x110>)
 801adf0:	482e      	ldr	r0, [pc, #184]	@ (801aeac <etharp_raw+0x10c>)
 801adf2:	f002 fb49 	bl	801d488 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801adf6:	69bb      	ldr	r3, [r7, #24]
 801adf8:	685b      	ldr	r3, [r3, #4]
 801adfa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801adfc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801adfe:	4618      	mov	r0, r3
 801ae00:	f7f6 fb5a 	bl	80114b8 <lwip_htons>
 801ae04:	4603      	mov	r3, r0
 801ae06:	461a      	mov	r2, r3
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ae12:	2b06      	cmp	r3, #6
 801ae14:	d006      	beq.n	801ae24 <etharp_raw+0x84>
 801ae16:	4b23      	ldr	r3, [pc, #140]	@ (801aea4 <etharp_raw+0x104>)
 801ae18:	f240 4269 	movw	r2, #1129	@ 0x469
 801ae1c:	4925      	ldr	r1, [pc, #148]	@ (801aeb4 <etharp_raw+0x114>)
 801ae1e:	4823      	ldr	r0, [pc, #140]	@ (801aeac <etharp_raw+0x10c>)
 801ae20:	f002 fb32 	bl	801d488 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801ae24:	697b      	ldr	r3, [r7, #20]
 801ae26:	3308      	adds	r3, #8
 801ae28:	2206      	movs	r2, #6
 801ae2a:	6839      	ldr	r1, [r7, #0]
 801ae2c:	4618      	mov	r0, r3
 801ae2e:	f002 fcb8 	bl	801d7a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801ae32:	697b      	ldr	r3, [r7, #20]
 801ae34:	3312      	adds	r3, #18
 801ae36:	2206      	movs	r2, #6
 801ae38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	f002 fcb1 	bl	801d7a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	330e      	adds	r3, #14
 801ae44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae46:	6812      	ldr	r2, [r2, #0]
 801ae48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801ae4a:	697b      	ldr	r3, [r7, #20]
 801ae4c:	3318      	adds	r3, #24
 801ae4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ae50:	6812      	ldr	r2, [r2, #0]
 801ae52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801ae54:	697b      	ldr	r3, [r7, #20]
 801ae56:	2200      	movs	r2, #0
 801ae58:	701a      	strb	r2, [r3, #0]
 801ae5a:	2200      	movs	r2, #0
 801ae5c:	f042 0201 	orr.w	r2, r2, #1
 801ae60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801ae62:	697b      	ldr	r3, [r7, #20]
 801ae64:	2200      	movs	r2, #0
 801ae66:	f042 0208 	orr.w	r2, r2, #8
 801ae6a:	709a      	strb	r2, [r3, #2]
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801ae70:	697b      	ldr	r3, [r7, #20]
 801ae72:	2206      	movs	r2, #6
 801ae74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	2204      	movs	r2, #4
 801ae7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ae7c:	f640 0306 	movw	r3, #2054	@ 0x806
 801ae80:	9300      	str	r3, [sp, #0]
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	68ba      	ldr	r2, [r7, #8]
 801ae86:	69b9      	ldr	r1, [r7, #24]
 801ae88:	68f8      	ldr	r0, [r7, #12]
 801ae8a:	f001 fb7b 	bl	801c584 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ae8e:	69b8      	ldr	r0, [r7, #24]
 801ae90:	f7f7 ff3a 	bl	8012d08 <pbuf_free>
  p = NULL;
 801ae94:	2300      	movs	r3, #0
 801ae96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ae98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3720      	adds	r7, #32
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	08022b3c 	.word	0x08022b3c
 801aea8:	08022c8c 	.word	0x08022c8c
 801aeac:	08022bb4 	.word	0x08022bb4
 801aeb0:	08022d3c 	.word	0x08022d3c
 801aeb4:	08022d70 	.word	0x08022d70

0801aeb8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801aeb8:	b580      	push	{r7, lr}
 801aeba:	b088      	sub	sp, #32
 801aebc:	af04      	add	r7, sp, #16
 801aebe:	60f8      	str	r0, [r7, #12]
 801aec0:	60b9      	str	r1, [r7, #8]
 801aec2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aed4:	2201      	movs	r2, #1
 801aed6:	9203      	str	r2, [sp, #12]
 801aed8:	68ba      	ldr	r2, [r7, #8]
 801aeda:	9202      	str	r2, [sp, #8]
 801aedc:	4a06      	ldr	r2, [pc, #24]	@ (801aef8 <etharp_request_dst+0x40>)
 801aede:	9201      	str	r2, [sp, #4]
 801aee0:	9300      	str	r3, [sp, #0]
 801aee2:	4603      	mov	r3, r0
 801aee4:	687a      	ldr	r2, [r7, #4]
 801aee6:	68f8      	ldr	r0, [r7, #12]
 801aee8:	f7ff ff5a 	bl	801ada0 <etharp_raw>
 801aeec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801aeee:	4618      	mov	r0, r3
 801aef0:	3710      	adds	r7, #16
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}
 801aef6:	bf00      	nop
 801aef8:	08024a28 	.word	0x08024a28

0801aefc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801af06:	4a05      	ldr	r2, [pc, #20]	@ (801af1c <etharp_request+0x20>)
 801af08:	6839      	ldr	r1, [r7, #0]
 801af0a:	6878      	ldr	r0, [r7, #4]
 801af0c:	f7ff ffd4 	bl	801aeb8 <etharp_request_dst>
 801af10:	4603      	mov	r3, r0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3708      	adds	r7, #8
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
 801af1a:	bf00      	nop
 801af1c:	08024a20 	.word	0x08024a20

0801af20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b08e      	sub	sp, #56	@ 0x38
 801af24:	af04      	add	r7, sp, #16
 801af26:	6078      	str	r0, [r7, #4]
 801af28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801af2a:	4b79      	ldr	r3, [pc, #484]	@ (801b110 <icmp_input+0x1f0>)
 801af2c:	689b      	ldr	r3, [r3, #8]
 801af2e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801af30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	f003 030f 	and.w	r3, r3, #15
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	009b      	lsls	r3, r3, #2
 801af3c:	b2db      	uxtb	r3, r3
 801af3e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801af40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801af42:	2b13      	cmp	r3, #19
 801af44:	f240 80cd 	bls.w	801b0e2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	895b      	ldrh	r3, [r3, #10]
 801af4c:	2b03      	cmp	r3, #3
 801af4e:	f240 80ca 	bls.w	801b0e6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	781b      	ldrb	r3, [r3, #0]
 801af58:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801af5c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801af60:	2b00      	cmp	r3, #0
 801af62:	f000 80b7 	beq.w	801b0d4 <icmp_input+0x1b4>
 801af66:	2b08      	cmp	r3, #8
 801af68:	f040 80b7 	bne.w	801b0da <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801af6c:	4b69      	ldr	r3, [pc, #420]	@ (801b114 <icmp_input+0x1f4>)
 801af6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801af70:	4b67      	ldr	r3, [pc, #412]	@ (801b110 <icmp_input+0x1f0>)
 801af72:	695b      	ldr	r3, [r3, #20]
 801af74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801af78:	2be0      	cmp	r3, #224	@ 0xe0
 801af7a:	f000 80bb 	beq.w	801b0f4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801af7e:	4b64      	ldr	r3, [pc, #400]	@ (801b110 <icmp_input+0x1f0>)
 801af80:	695b      	ldr	r3, [r3, #20]
 801af82:	4a63      	ldr	r2, [pc, #396]	@ (801b110 <icmp_input+0x1f0>)
 801af84:	6812      	ldr	r2, [r2, #0]
 801af86:	4611      	mov	r1, r2
 801af88:	4618      	mov	r0, r3
 801af8a:	f000 fbed 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801af8e:	4603      	mov	r3, r0
 801af90:	2b00      	cmp	r3, #0
 801af92:	f040 80b1 	bne.w	801b0f8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	891b      	ldrh	r3, [r3, #8]
 801af9a:	2b07      	cmp	r3, #7
 801af9c:	f240 80a5 	bls.w	801b0ea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801afa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801afa2:	330e      	adds	r3, #14
 801afa4:	4619      	mov	r1, r3
 801afa6:	6878      	ldr	r0, [r7, #4]
 801afa8:	f7f7 fe18 	bl	8012bdc <pbuf_add_header>
 801afac:	4603      	mov	r3, r0
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d04b      	beq.n	801b04a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	891a      	ldrh	r2, [r3, #8]
 801afb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801afb8:	4413      	add	r3, r2
 801afba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	891b      	ldrh	r3, [r3, #8]
 801afc0:	8b7a      	ldrh	r2, [r7, #26]
 801afc2:	429a      	cmp	r2, r3
 801afc4:	f0c0 809a 	bcc.w	801b0fc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801afc8:	8b7b      	ldrh	r3, [r7, #26]
 801afca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801afce:	4619      	mov	r1, r3
 801afd0:	200e      	movs	r0, #14
 801afd2:	f7f7 fbb5 	bl	8012740 <pbuf_alloc>
 801afd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801afd8:	697b      	ldr	r3, [r7, #20]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	f000 8090 	beq.w	801b100 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801afe0:	697b      	ldr	r3, [r7, #20]
 801afe2:	895b      	ldrh	r3, [r3, #10]
 801afe4:	461a      	mov	r2, r3
 801afe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801afe8:	3308      	adds	r3, #8
 801afea:	429a      	cmp	r2, r3
 801afec:	d203      	bcs.n	801aff6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801afee:	6978      	ldr	r0, [r7, #20]
 801aff0:	f7f7 fe8a 	bl	8012d08 <pbuf_free>
          goto icmperr;
 801aff4:	e085      	b.n	801b102 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801aff6:	697b      	ldr	r3, [r7, #20]
 801aff8:	685b      	ldr	r3, [r3, #4]
 801affa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801affc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801affe:	4618      	mov	r0, r3
 801b000:	f002 fbcf 	bl	801d7a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b006:	4619      	mov	r1, r3
 801b008:	6978      	ldr	r0, [r7, #20]
 801b00a:	f7f7 fdf7 	bl	8012bfc <pbuf_remove_header>
 801b00e:	4603      	mov	r3, r0
 801b010:	2b00      	cmp	r3, #0
 801b012:	d009      	beq.n	801b028 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b014:	4b40      	ldr	r3, [pc, #256]	@ (801b118 <icmp_input+0x1f8>)
 801b016:	22b6      	movs	r2, #182	@ 0xb6
 801b018:	4940      	ldr	r1, [pc, #256]	@ (801b11c <icmp_input+0x1fc>)
 801b01a:	4841      	ldr	r0, [pc, #260]	@ (801b120 <icmp_input+0x200>)
 801b01c:	f002 fa34 	bl	801d488 <iprintf>
          pbuf_free(r);
 801b020:	6978      	ldr	r0, [r7, #20]
 801b022:	f7f7 fe71 	bl	8012d08 <pbuf_free>
          goto icmperr;
 801b026:	e06c      	b.n	801b102 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b028:	6879      	ldr	r1, [r7, #4]
 801b02a:	6978      	ldr	r0, [r7, #20]
 801b02c:	f7f7 ffa0 	bl	8012f70 <pbuf_copy>
 801b030:	4603      	mov	r3, r0
 801b032:	2b00      	cmp	r3, #0
 801b034:	d003      	beq.n	801b03e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b036:	6978      	ldr	r0, [r7, #20]
 801b038:	f7f7 fe66 	bl	8012d08 <pbuf_free>
          goto icmperr;
 801b03c:	e061      	b.n	801b102 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b03e:	6878      	ldr	r0, [r7, #4]
 801b040:	f7f7 fe62 	bl	8012d08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b044:	697b      	ldr	r3, [r7, #20]
 801b046:	607b      	str	r3, [r7, #4]
 801b048:	e00f      	b.n	801b06a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b04a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b04c:	330e      	adds	r3, #14
 801b04e:	4619      	mov	r1, r3
 801b050:	6878      	ldr	r0, [r7, #4]
 801b052:	f7f7 fdd3 	bl	8012bfc <pbuf_remove_header>
 801b056:	4603      	mov	r3, r0
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d006      	beq.n	801b06a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b05c:	4b2e      	ldr	r3, [pc, #184]	@ (801b118 <icmp_input+0x1f8>)
 801b05e:	22c7      	movs	r2, #199	@ 0xc7
 801b060:	4930      	ldr	r1, [pc, #192]	@ (801b124 <icmp_input+0x204>)
 801b062:	482f      	ldr	r0, [pc, #188]	@ (801b120 <icmp_input+0x200>)
 801b064:	f002 fa10 	bl	801d488 <iprintf>
          goto icmperr;
 801b068:	e04b      	b.n	801b102 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b070:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b072:	4619      	mov	r1, r3
 801b074:	6878      	ldr	r0, [r7, #4]
 801b076:	f7f7 fdb1 	bl	8012bdc <pbuf_add_header>
 801b07a:	4603      	mov	r3, r0
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d12b      	bne.n	801b0d8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	685b      	ldr	r3, [r3, #4]
 801b084:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b086:	69fb      	ldr	r3, [r7, #28]
 801b088:	681a      	ldr	r2, [r3, #0]
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b08e:	4b20      	ldr	r3, [pc, #128]	@ (801b110 <icmp_input+0x1f0>)
 801b090:	691a      	ldr	r2, [r3, #16]
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b096:	693b      	ldr	r3, [r7, #16]
 801b098:	2200      	movs	r2, #0
 801b09a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b09c:	693b      	ldr	r3, [r7, #16]
 801b09e:	2200      	movs	r2, #0
 801b0a0:	709a      	strb	r2, [r3, #2]
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	22ff      	movs	r2, #255	@ 0xff
 801b0aa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	729a      	strb	r2, [r3, #10]
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	9302      	str	r3, [sp, #8]
 801b0ba:	2301      	movs	r3, #1
 801b0bc:	9301      	str	r3, [sp, #4]
 801b0be:	2300      	movs	r3, #0
 801b0c0:	9300      	str	r3, [sp, #0]
 801b0c2:	23ff      	movs	r3, #255	@ 0xff
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	69f9      	ldr	r1, [r7, #28]
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	f000 fa75 	bl	801b5b8 <ip4_output_if>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b0d2:	e001      	b.n	801b0d8 <icmp_input+0x1b8>
      break;
 801b0d4:	bf00      	nop
 801b0d6:	e000      	b.n	801b0da <icmp_input+0x1ba>
      break;
 801b0d8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b0da:	6878      	ldr	r0, [r7, #4]
 801b0dc:	f7f7 fe14 	bl	8012d08 <pbuf_free>
  return;
 801b0e0:	e013      	b.n	801b10a <icmp_input+0x1ea>
    goto lenerr;
 801b0e2:	bf00      	nop
 801b0e4:	e002      	b.n	801b0ec <icmp_input+0x1cc>
    goto lenerr;
 801b0e6:	bf00      	nop
 801b0e8:	e000      	b.n	801b0ec <icmp_input+0x1cc>
        goto lenerr;
 801b0ea:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b0ec:	6878      	ldr	r0, [r7, #4]
 801b0ee:	f7f7 fe0b 	bl	8012d08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b0f2:	e00a      	b.n	801b10a <icmp_input+0x1ea>
        goto icmperr;
 801b0f4:	bf00      	nop
 801b0f6:	e004      	b.n	801b102 <icmp_input+0x1e2>
        goto icmperr;
 801b0f8:	bf00      	nop
 801b0fa:	e002      	b.n	801b102 <icmp_input+0x1e2>
          goto icmperr;
 801b0fc:	bf00      	nop
 801b0fe:	e000      	b.n	801b102 <icmp_input+0x1e2>
          goto icmperr;
 801b100:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b102:	6878      	ldr	r0, [r7, #4]
 801b104:	f7f7 fe00 	bl	8012d08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b108:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b10a:	3728      	adds	r7, #40	@ 0x28
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}
 801b110:	2000bc40 	.word	0x2000bc40
 801b114:	2000bc54 	.word	0x2000bc54
 801b118:	08022db4 	.word	0x08022db4
 801b11c:	08022dec 	.word	0x08022dec
 801b120:	08022e24 	.word	0x08022e24
 801b124:	08022e4c 	.word	0x08022e4c

0801b128 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b128:	b580      	push	{r7, lr}
 801b12a:	b082      	sub	sp, #8
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
 801b130:	460b      	mov	r3, r1
 801b132:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b134:	78fb      	ldrb	r3, [r7, #3]
 801b136:	461a      	mov	r2, r3
 801b138:	2103      	movs	r1, #3
 801b13a:	6878      	ldr	r0, [r7, #4]
 801b13c:	f000 f814 	bl	801b168 <icmp_send_response>
}
 801b140:	bf00      	nop
 801b142:	3708      	adds	r7, #8
 801b144:	46bd      	mov	sp, r7
 801b146:	bd80      	pop	{r7, pc}

0801b148 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b082      	sub	sp, #8
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
 801b150:	460b      	mov	r3, r1
 801b152:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b154:	78fb      	ldrb	r3, [r7, #3]
 801b156:	461a      	mov	r2, r3
 801b158:	210b      	movs	r1, #11
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	f000 f804 	bl	801b168 <icmp_send_response>
}
 801b160:	bf00      	nop
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}

0801b168 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b08c      	sub	sp, #48	@ 0x30
 801b16c:	af04      	add	r7, sp, #16
 801b16e:	6078      	str	r0, [r7, #4]
 801b170:	460b      	mov	r3, r1
 801b172:	70fb      	strb	r3, [r7, #3]
 801b174:	4613      	mov	r3, r2
 801b176:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b178:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b17c:	2124      	movs	r1, #36	@ 0x24
 801b17e:	2022      	movs	r0, #34	@ 0x22
 801b180:	f7f7 fade 	bl	8012740 <pbuf_alloc>
 801b184:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b186:	69fb      	ldr	r3, [r7, #28]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d04c      	beq.n	801b226 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b18c:	69fb      	ldr	r3, [r7, #28]
 801b18e:	895b      	ldrh	r3, [r3, #10]
 801b190:	2b23      	cmp	r3, #35	@ 0x23
 801b192:	d806      	bhi.n	801b1a2 <icmp_send_response+0x3a>
 801b194:	4b26      	ldr	r3, [pc, #152]	@ (801b230 <icmp_send_response+0xc8>)
 801b196:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b19a:	4926      	ldr	r1, [pc, #152]	@ (801b234 <icmp_send_response+0xcc>)
 801b19c:	4826      	ldr	r0, [pc, #152]	@ (801b238 <icmp_send_response+0xd0>)
 801b19e:	f002 f973 	bl	801d488 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b1a8:	69fb      	ldr	r3, [r7, #28]
 801b1aa:	685b      	ldr	r3, [r3, #4]
 801b1ac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b1ae:	697b      	ldr	r3, [r7, #20]
 801b1b0:	78fa      	ldrb	r2, [r7, #3]
 801b1b2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	78ba      	ldrb	r2, [r7, #2]
 801b1b8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b1ba:	697b      	ldr	r3, [r7, #20]
 801b1bc:	2200      	movs	r2, #0
 801b1be:	711a      	strb	r2, [r3, #4]
 801b1c0:	2200      	movs	r2, #0
 801b1c2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b1c4:	697b      	ldr	r3, [r7, #20]
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	719a      	strb	r2, [r3, #6]
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b1ce:	69fb      	ldr	r3, [r7, #28]
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	f103 0008 	add.w	r0, r3, #8
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	685b      	ldr	r3, [r3, #4]
 801b1da:	221c      	movs	r2, #28
 801b1dc:	4619      	mov	r1, r3
 801b1de:	f002 fae0 	bl	801d7a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b1e2:	69bb      	ldr	r3, [r7, #24]
 801b1e4:	68db      	ldr	r3, [r3, #12]
 801b1e6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b1e8:	f107 030c 	add.w	r3, r7, #12
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f000 f825 	bl	801b23c <ip4_route>
 801b1f2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b1f4:	693b      	ldr	r3, [r7, #16]
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d011      	beq.n	801b21e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b1fa:	697b      	ldr	r3, [r7, #20]
 801b1fc:	2200      	movs	r2, #0
 801b1fe:	709a      	strb	r2, [r3, #2]
 801b200:	2200      	movs	r2, #0
 801b202:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b204:	f107 020c 	add.w	r2, r7, #12
 801b208:	693b      	ldr	r3, [r7, #16]
 801b20a:	9302      	str	r3, [sp, #8]
 801b20c:	2301      	movs	r3, #1
 801b20e:	9301      	str	r3, [sp, #4]
 801b210:	2300      	movs	r3, #0
 801b212:	9300      	str	r3, [sp, #0]
 801b214:	23ff      	movs	r3, #255	@ 0xff
 801b216:	2100      	movs	r1, #0
 801b218:	69f8      	ldr	r0, [r7, #28]
 801b21a:	f000 f9cd 	bl	801b5b8 <ip4_output_if>
  }
  pbuf_free(q);
 801b21e:	69f8      	ldr	r0, [r7, #28]
 801b220:	f7f7 fd72 	bl	8012d08 <pbuf_free>
 801b224:	e000      	b.n	801b228 <icmp_send_response+0xc0>
    return;
 801b226:	bf00      	nop
}
 801b228:	3720      	adds	r7, #32
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}
 801b22e:	bf00      	nop
 801b230:	08022db4 	.word	0x08022db4
 801b234:	08022e80 	.word	0x08022e80
 801b238:	08022e24 	.word	0x08022e24

0801b23c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b23c:	b480      	push	{r7}
 801b23e:	b085      	sub	sp, #20
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b244:	4b33      	ldr	r3, [pc, #204]	@ (801b314 <ip4_route+0xd8>)
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	60fb      	str	r3, [r7, #12]
 801b24a:	e036      	b.n	801b2ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b252:	f003 0301 	and.w	r3, r3, #1
 801b256:	b2db      	uxtb	r3, r3
 801b258:	2b00      	cmp	r3, #0
 801b25a:	d02b      	beq.n	801b2b4 <ip4_route+0x78>
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b262:	089b      	lsrs	r3, r3, #2
 801b264:	f003 0301 	and.w	r3, r3, #1
 801b268:	b2db      	uxtb	r3, r3
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d022      	beq.n	801b2b4 <ip4_route+0x78>
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	3304      	adds	r3, #4
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d01d      	beq.n	801b2b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681a      	ldr	r2, [r3, #0]
 801b27c:	68fb      	ldr	r3, [r7, #12]
 801b27e:	3304      	adds	r3, #4
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	405a      	eors	r2, r3
 801b284:	68fb      	ldr	r3, [r7, #12]
 801b286:	3308      	adds	r3, #8
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	4013      	ands	r3, r2
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d101      	bne.n	801b294 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	e038      	b.n	801b306 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b29a:	f003 0302 	and.w	r3, r3, #2
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d108      	bne.n	801b2b4 <ip4_route+0x78>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	330c      	adds	r3, #12
 801b2aa:	681b      	ldr	r3, [r3, #0]
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	d101      	bne.n	801b2b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	e028      	b.n	801b306 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	60fb      	str	r3, [r7, #12]
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d1c5      	bne.n	801b24c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b2c0:	4b15      	ldr	r3, [pc, #84]	@ (801b318 <ip4_route+0xdc>)
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	d01a      	beq.n	801b2fe <ip4_route+0xc2>
 801b2c8:	4b13      	ldr	r3, [pc, #76]	@ (801b318 <ip4_route+0xdc>)
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2d0:	f003 0301 	and.w	r3, r3, #1
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d012      	beq.n	801b2fe <ip4_route+0xc2>
 801b2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801b318 <ip4_route+0xdc>)
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2e0:	f003 0304 	and.w	r3, r3, #4
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d00a      	beq.n	801b2fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b2e8:	4b0b      	ldr	r3, [pc, #44]	@ (801b318 <ip4_route+0xdc>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	3304      	adds	r3, #4
 801b2ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d004      	beq.n	801b2fe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	b2db      	uxtb	r3, r3
 801b2fa:	2b7f      	cmp	r3, #127	@ 0x7f
 801b2fc:	d101      	bne.n	801b302 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b2fe:	2300      	movs	r3, #0
 801b300:	e001      	b.n	801b306 <ip4_route+0xca>
  }

  return netif_default;
 801b302:	4b05      	ldr	r3, [pc, #20]	@ (801b318 <ip4_route+0xdc>)
 801b304:	681b      	ldr	r3, [r3, #0]
}
 801b306:	4618      	mov	r0, r3
 801b308:	3714      	adds	r7, #20
 801b30a:	46bd      	mov	sp, r7
 801b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b310:	4770      	bx	lr
 801b312:	bf00      	nop
 801b314:	2000f388 	.word	0x2000f388
 801b318:	2000f38c 	.word	0x2000f38c

0801b31c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b082      	sub	sp, #8
 801b320:	af00      	add	r7, sp, #0
 801b322:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b32a:	f003 0301 	and.w	r3, r3, #1
 801b32e:	b2db      	uxtb	r3, r3
 801b330:	2b00      	cmp	r3, #0
 801b332:	d016      	beq.n	801b362 <ip4_input_accept+0x46>
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	3304      	adds	r3, #4
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d011      	beq.n	801b362 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b33e:	4b0b      	ldr	r3, [pc, #44]	@ (801b36c <ip4_input_accept+0x50>)
 801b340:	695a      	ldr	r2, [r3, #20]
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	3304      	adds	r3, #4
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	429a      	cmp	r2, r3
 801b34a:	d008      	beq.n	801b35e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b34c:	4b07      	ldr	r3, [pc, #28]	@ (801b36c <ip4_input_accept+0x50>)
 801b34e:	695b      	ldr	r3, [r3, #20]
 801b350:	6879      	ldr	r1, [r7, #4]
 801b352:	4618      	mov	r0, r3
 801b354:	f000 fa08 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801b358:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d001      	beq.n	801b362 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b35e:	2301      	movs	r3, #1
 801b360:	e000      	b.n	801b364 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b362:	2300      	movs	r3, #0
}
 801b364:	4618      	mov	r0, r3
 801b366:	3708      	adds	r7, #8
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}
 801b36c:	2000bc40 	.word	0x2000bc40

0801b370 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b086      	sub	sp, #24
 801b374:	af00      	add	r7, sp, #0
 801b376:	6078      	str	r0, [r7, #4]
 801b378:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	685b      	ldr	r3, [r3, #4]
 801b37e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b380:	697b      	ldr	r3, [r7, #20]
 801b382:	781b      	ldrb	r3, [r3, #0]
 801b384:	091b      	lsrs	r3, r3, #4
 801b386:	b2db      	uxtb	r3, r3
 801b388:	2b04      	cmp	r3, #4
 801b38a:	d004      	beq.n	801b396 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	f7f7 fcbb 	bl	8012d08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b392:	2300      	movs	r3, #0
 801b394:	e107      	b.n	801b5a6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b396:	697b      	ldr	r3, [r7, #20]
 801b398:	781b      	ldrb	r3, [r3, #0]
 801b39a:	f003 030f 	and.w	r3, r3, #15
 801b39e:	b2db      	uxtb	r3, r3
 801b3a0:	009b      	lsls	r3, r3, #2
 801b3a2:	b2db      	uxtb	r3, r3
 801b3a4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b3a6:	697b      	ldr	r3, [r7, #20]
 801b3a8:	885b      	ldrh	r3, [r3, #2]
 801b3aa:	b29b      	uxth	r3, r3
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	f7f6 f883 	bl	80114b8 <lwip_htons>
 801b3b2:	4603      	mov	r3, r0
 801b3b4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	891b      	ldrh	r3, [r3, #8]
 801b3ba:	89ba      	ldrh	r2, [r7, #12]
 801b3bc:	429a      	cmp	r2, r3
 801b3be:	d204      	bcs.n	801b3ca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b3c0:	89bb      	ldrh	r3, [r7, #12]
 801b3c2:	4619      	mov	r1, r3
 801b3c4:	6878      	ldr	r0, [r7, #4]
 801b3c6:	f7f7 fb19 	bl	80129fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	895b      	ldrh	r3, [r3, #10]
 801b3ce:	89fa      	ldrh	r2, [r7, #14]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d807      	bhi.n	801b3e4 <ip4_input+0x74>
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	891b      	ldrh	r3, [r3, #8]
 801b3d8:	89ba      	ldrh	r2, [r7, #12]
 801b3da:	429a      	cmp	r2, r3
 801b3dc:	d802      	bhi.n	801b3e4 <ip4_input+0x74>
 801b3de:	89fb      	ldrh	r3, [r7, #14]
 801b3e0:	2b13      	cmp	r3, #19
 801b3e2:	d804      	bhi.n	801b3ee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b3e4:	6878      	ldr	r0, [r7, #4]
 801b3e6:	f7f7 fc8f 	bl	8012d08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	e0db      	b.n	801b5a6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b3ee:	697b      	ldr	r3, [r7, #20]
 801b3f0:	691b      	ldr	r3, [r3, #16]
 801b3f2:	4a6f      	ldr	r2, [pc, #444]	@ (801b5b0 <ip4_input+0x240>)
 801b3f4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b3f6:	697b      	ldr	r3, [r7, #20]
 801b3f8:	68db      	ldr	r3, [r3, #12]
 801b3fa:	4a6d      	ldr	r2, [pc, #436]	@ (801b5b0 <ip4_input+0x240>)
 801b3fc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b3fe:	4b6c      	ldr	r3, [pc, #432]	@ (801b5b0 <ip4_input+0x240>)
 801b400:	695b      	ldr	r3, [r3, #20]
 801b402:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b406:	2be0      	cmp	r3, #224	@ 0xe0
 801b408:	d112      	bne.n	801b430 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b40a:	683b      	ldr	r3, [r7, #0]
 801b40c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b410:	f003 0301 	and.w	r3, r3, #1
 801b414:	b2db      	uxtb	r3, r3
 801b416:	2b00      	cmp	r3, #0
 801b418:	d007      	beq.n	801b42a <ip4_input+0xba>
 801b41a:	683b      	ldr	r3, [r7, #0]
 801b41c:	3304      	adds	r3, #4
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d002      	beq.n	801b42a <ip4_input+0xba>
      netif = inp;
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	613b      	str	r3, [r7, #16]
 801b428:	e02a      	b.n	801b480 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b42a:	2300      	movs	r3, #0
 801b42c:	613b      	str	r3, [r7, #16]
 801b42e:	e027      	b.n	801b480 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b430:	6838      	ldr	r0, [r7, #0]
 801b432:	f7ff ff73 	bl	801b31c <ip4_input_accept>
 801b436:	4603      	mov	r3, r0
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d002      	beq.n	801b442 <ip4_input+0xd2>
      netif = inp;
 801b43c:	683b      	ldr	r3, [r7, #0]
 801b43e:	613b      	str	r3, [r7, #16]
 801b440:	e01e      	b.n	801b480 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b442:	2300      	movs	r3, #0
 801b444:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b446:	4b5a      	ldr	r3, [pc, #360]	@ (801b5b0 <ip4_input+0x240>)
 801b448:	695b      	ldr	r3, [r3, #20]
 801b44a:	b2db      	uxtb	r3, r3
 801b44c:	2b7f      	cmp	r3, #127	@ 0x7f
 801b44e:	d017      	beq.n	801b480 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b450:	4b58      	ldr	r3, [pc, #352]	@ (801b5b4 <ip4_input+0x244>)
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	613b      	str	r3, [r7, #16]
 801b456:	e00e      	b.n	801b476 <ip4_input+0x106>
          if (netif == inp) {
 801b458:	693a      	ldr	r2, [r7, #16]
 801b45a:	683b      	ldr	r3, [r7, #0]
 801b45c:	429a      	cmp	r2, r3
 801b45e:	d006      	beq.n	801b46e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b460:	6938      	ldr	r0, [r7, #16]
 801b462:	f7ff ff5b 	bl	801b31c <ip4_input_accept>
 801b466:	4603      	mov	r3, r0
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d108      	bne.n	801b47e <ip4_input+0x10e>
 801b46c:	e000      	b.n	801b470 <ip4_input+0x100>
            continue;
 801b46e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b470:	693b      	ldr	r3, [r7, #16]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	613b      	str	r3, [r7, #16]
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d1ed      	bne.n	801b458 <ip4_input+0xe8>
 801b47c:	e000      	b.n	801b480 <ip4_input+0x110>
            break;
 801b47e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b480:	4b4b      	ldr	r3, [pc, #300]	@ (801b5b0 <ip4_input+0x240>)
 801b482:	691b      	ldr	r3, [r3, #16]
 801b484:	6839      	ldr	r1, [r7, #0]
 801b486:	4618      	mov	r0, r3
 801b488:	f000 f96e 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801b48c:	4603      	mov	r3, r0
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d105      	bne.n	801b49e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b492:	4b47      	ldr	r3, [pc, #284]	@ (801b5b0 <ip4_input+0x240>)
 801b494:	691b      	ldr	r3, [r3, #16]
 801b496:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b49a:	2be0      	cmp	r3, #224	@ 0xe0
 801b49c:	d104      	bne.n	801b4a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b49e:	6878      	ldr	r0, [r7, #4]
 801b4a0:	f7f7 fc32 	bl	8012d08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b4a4:	2300      	movs	r3, #0
 801b4a6:	e07e      	b.n	801b5a6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b4a8:	693b      	ldr	r3, [r7, #16]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d104      	bne.n	801b4b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	f7f7 fc2a 	bl	8012d08 <pbuf_free>
    return ERR_OK;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	e076      	b.n	801b5a6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b4b8:	697b      	ldr	r3, [r7, #20]
 801b4ba:	88db      	ldrh	r3, [r3, #6]
 801b4bc:	b29b      	uxth	r3, r3
 801b4be:	461a      	mov	r2, r3
 801b4c0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b4c4:	4013      	ands	r3, r2
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d00b      	beq.n	801b4e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b4ca:	6878      	ldr	r0, [r7, #4]
 801b4cc:	f000 fc92 	bl	801bdf4 <ip4_reass>
 801b4d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d101      	bne.n	801b4dc <ip4_input+0x16c>
      return ERR_OK;
 801b4d8:	2300      	movs	r3, #0
 801b4da:	e064      	b.n	801b5a6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	685b      	ldr	r3, [r3, #4]
 801b4e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b4e2:	4a33      	ldr	r2, [pc, #204]	@ (801b5b0 <ip4_input+0x240>)
 801b4e4:	693b      	ldr	r3, [r7, #16]
 801b4e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b4e8:	4a31      	ldr	r2, [pc, #196]	@ (801b5b0 <ip4_input+0x240>)
 801b4ea:	683b      	ldr	r3, [r7, #0]
 801b4ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b4ee:	4a30      	ldr	r2, [pc, #192]	@ (801b5b0 <ip4_input+0x240>)
 801b4f0:	697b      	ldr	r3, [r7, #20]
 801b4f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	781b      	ldrb	r3, [r3, #0]
 801b4f8:	f003 030f 	and.w	r3, r3, #15
 801b4fc:	b2db      	uxtb	r3, r3
 801b4fe:	009b      	lsls	r3, r3, #2
 801b500:	b2db      	uxtb	r3, r3
 801b502:	461a      	mov	r2, r3
 801b504:	4b2a      	ldr	r3, [pc, #168]	@ (801b5b0 <ip4_input+0x240>)
 801b506:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b508:	89fb      	ldrh	r3, [r7, #14]
 801b50a:	4619      	mov	r1, r3
 801b50c:	6878      	ldr	r0, [r7, #4]
 801b50e:	f7f7 fb75 	bl	8012bfc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b512:	697b      	ldr	r3, [r7, #20]
 801b514:	7a5b      	ldrb	r3, [r3, #9]
 801b516:	2b11      	cmp	r3, #17
 801b518:	d006      	beq.n	801b528 <ip4_input+0x1b8>
 801b51a:	2b11      	cmp	r3, #17
 801b51c:	dc13      	bgt.n	801b546 <ip4_input+0x1d6>
 801b51e:	2b01      	cmp	r3, #1
 801b520:	d00c      	beq.n	801b53c <ip4_input+0x1cc>
 801b522:	2b06      	cmp	r3, #6
 801b524:	d005      	beq.n	801b532 <ip4_input+0x1c2>
 801b526:	e00e      	b.n	801b546 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b528:	6839      	ldr	r1, [r7, #0]
 801b52a:	6878      	ldr	r0, [r7, #4]
 801b52c:	f7fe f970 	bl	8019810 <udp_input>
        break;
 801b530:	e026      	b.n	801b580 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b532:	6839      	ldr	r1, [r7, #0]
 801b534:	6878      	ldr	r0, [r7, #4]
 801b536:	f7f9 fd2f 	bl	8014f98 <tcp_input>
        break;
 801b53a:	e021      	b.n	801b580 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b53c:	6839      	ldr	r1, [r7, #0]
 801b53e:	6878      	ldr	r0, [r7, #4]
 801b540:	f7ff fcee 	bl	801af20 <icmp_input>
        break;
 801b544:	e01c      	b.n	801b580 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b546:	4b1a      	ldr	r3, [pc, #104]	@ (801b5b0 <ip4_input+0x240>)
 801b548:	695b      	ldr	r3, [r3, #20]
 801b54a:	6939      	ldr	r1, [r7, #16]
 801b54c:	4618      	mov	r0, r3
 801b54e:	f000 f90b 	bl	801b768 <ip4_addr_isbroadcast_u32>
 801b552:	4603      	mov	r3, r0
 801b554:	2b00      	cmp	r3, #0
 801b556:	d10f      	bne.n	801b578 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b558:	4b15      	ldr	r3, [pc, #84]	@ (801b5b0 <ip4_input+0x240>)
 801b55a:	695b      	ldr	r3, [r3, #20]
 801b55c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b560:	2be0      	cmp	r3, #224	@ 0xe0
 801b562:	d009      	beq.n	801b578 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b568:	4619      	mov	r1, r3
 801b56a:	6878      	ldr	r0, [r7, #4]
 801b56c:	f7f7 fbb9 	bl	8012ce2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b570:	2102      	movs	r1, #2
 801b572:	6878      	ldr	r0, [r7, #4]
 801b574:	f7ff fdd8 	bl	801b128 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b578:	6878      	ldr	r0, [r7, #4]
 801b57a:	f7f7 fbc5 	bl	8012d08 <pbuf_free>
        break;
 801b57e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b580:	4b0b      	ldr	r3, [pc, #44]	@ (801b5b0 <ip4_input+0x240>)
 801b582:	2200      	movs	r2, #0
 801b584:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b586:	4b0a      	ldr	r3, [pc, #40]	@ (801b5b0 <ip4_input+0x240>)
 801b588:	2200      	movs	r2, #0
 801b58a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b58c:	4b08      	ldr	r3, [pc, #32]	@ (801b5b0 <ip4_input+0x240>)
 801b58e:	2200      	movs	r2, #0
 801b590:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b592:	4b07      	ldr	r3, [pc, #28]	@ (801b5b0 <ip4_input+0x240>)
 801b594:	2200      	movs	r2, #0
 801b596:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b598:	4b05      	ldr	r3, [pc, #20]	@ (801b5b0 <ip4_input+0x240>)
 801b59a:	2200      	movs	r2, #0
 801b59c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b59e:	4b04      	ldr	r3, [pc, #16]	@ (801b5b0 <ip4_input+0x240>)
 801b5a0:	2200      	movs	r2, #0
 801b5a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b5a4:	2300      	movs	r3, #0
}
 801b5a6:	4618      	mov	r0, r3
 801b5a8:	3718      	adds	r7, #24
 801b5aa:	46bd      	mov	sp, r7
 801b5ac:	bd80      	pop	{r7, pc}
 801b5ae:	bf00      	nop
 801b5b0:	2000bc40 	.word	0x2000bc40
 801b5b4:	2000f388 	.word	0x2000f388

0801b5b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b08a      	sub	sp, #40	@ 0x28
 801b5bc:	af04      	add	r7, sp, #16
 801b5be:	60f8      	str	r0, [r7, #12]
 801b5c0:	60b9      	str	r1, [r7, #8]
 801b5c2:	607a      	str	r2, [r7, #4]
 801b5c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b5c6:	68bb      	ldr	r3, [r7, #8]
 801b5c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d009      	beq.n	801b5e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b5d0:	68bb      	ldr	r3, [r7, #8]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d003      	beq.n	801b5de <ip4_output_if+0x26>
 801b5d6:	68bb      	ldr	r3, [r7, #8]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d102      	bne.n	801b5e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5e0:	3304      	adds	r3, #4
 801b5e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b5e4:	78fa      	ldrb	r2, [r7, #3]
 801b5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5e8:	9302      	str	r3, [sp, #8]
 801b5ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b5ee:	9301      	str	r3, [sp, #4]
 801b5f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b5f4:	9300      	str	r3, [sp, #0]
 801b5f6:	4613      	mov	r3, r2
 801b5f8:	687a      	ldr	r2, [r7, #4]
 801b5fa:	6979      	ldr	r1, [r7, #20]
 801b5fc:	68f8      	ldr	r0, [r7, #12]
 801b5fe:	f000 f805 	bl	801b60c <ip4_output_if_src>
 801b602:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b604:	4618      	mov	r0, r3
 801b606:	3718      	adds	r7, #24
 801b608:	46bd      	mov	sp, r7
 801b60a:	bd80      	pop	{r7, pc}

0801b60c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b088      	sub	sp, #32
 801b610:	af00      	add	r7, sp, #0
 801b612:	60f8      	str	r0, [r7, #12]
 801b614:	60b9      	str	r1, [r7, #8]
 801b616:	607a      	str	r2, [r7, #4]
 801b618:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	7b9b      	ldrb	r3, [r3, #14]
 801b61e:	2b01      	cmp	r3, #1
 801b620:	d006      	beq.n	801b630 <ip4_output_if_src+0x24>
 801b622:	4b4b      	ldr	r3, [pc, #300]	@ (801b750 <ip4_output_if_src+0x144>)
 801b624:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b628:	494a      	ldr	r1, [pc, #296]	@ (801b754 <ip4_output_if_src+0x148>)
 801b62a:	484b      	ldr	r0, [pc, #300]	@ (801b758 <ip4_output_if_src+0x14c>)
 801b62c:	f001 ff2c 	bl	801d488 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d060      	beq.n	801b6f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b636:	2314      	movs	r3, #20
 801b638:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b63a:	2114      	movs	r1, #20
 801b63c:	68f8      	ldr	r0, [r7, #12]
 801b63e:	f7f7 facd 	bl	8012bdc <pbuf_add_header>
 801b642:	4603      	mov	r3, r0
 801b644:	2b00      	cmp	r3, #0
 801b646:	d002      	beq.n	801b64e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b648:	f06f 0301 	mvn.w	r3, #1
 801b64c:	e07c      	b.n	801b748 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	685b      	ldr	r3, [r3, #4]
 801b652:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	895b      	ldrh	r3, [r3, #10]
 801b658:	2b13      	cmp	r3, #19
 801b65a:	d806      	bhi.n	801b66a <ip4_output_if_src+0x5e>
 801b65c:	4b3c      	ldr	r3, [pc, #240]	@ (801b750 <ip4_output_if_src+0x144>)
 801b65e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b662:	493e      	ldr	r1, [pc, #248]	@ (801b75c <ip4_output_if_src+0x150>)
 801b664:	483c      	ldr	r0, [pc, #240]	@ (801b758 <ip4_output_if_src+0x14c>)
 801b666:	f001 ff0f 	bl	801d488 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b66a:	69fb      	ldr	r3, [r7, #28]
 801b66c:	78fa      	ldrb	r2, [r7, #3]
 801b66e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b670:	69fb      	ldr	r3, [r7, #28]
 801b672:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b676:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681a      	ldr	r2, [r3, #0]
 801b67c:	69fb      	ldr	r3, [r7, #28]
 801b67e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b680:	8b7b      	ldrh	r3, [r7, #26]
 801b682:	089b      	lsrs	r3, r3, #2
 801b684:	b29b      	uxth	r3, r3
 801b686:	b2db      	uxtb	r3, r3
 801b688:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b68c:	b2da      	uxtb	r2, r3
 801b68e:	69fb      	ldr	r3, [r7, #28]
 801b690:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b692:	69fb      	ldr	r3, [r7, #28]
 801b694:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b698:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	891b      	ldrh	r3, [r3, #8]
 801b69e:	4618      	mov	r0, r3
 801b6a0:	f7f5 ff0a 	bl	80114b8 <lwip_htons>
 801b6a4:	4603      	mov	r3, r0
 801b6a6:	461a      	mov	r2, r3
 801b6a8:	69fb      	ldr	r3, [r7, #28]
 801b6aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b6ac:	69fb      	ldr	r3, [r7, #28]
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	719a      	strb	r2, [r3, #6]
 801b6b2:	2200      	movs	r2, #0
 801b6b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b6b6:	4b2a      	ldr	r3, [pc, #168]	@ (801b760 <ip4_output_if_src+0x154>)
 801b6b8:	881b      	ldrh	r3, [r3, #0]
 801b6ba:	4618      	mov	r0, r3
 801b6bc:	f7f5 fefc 	bl	80114b8 <lwip_htons>
 801b6c0:	4603      	mov	r3, r0
 801b6c2:	461a      	mov	r2, r3
 801b6c4:	69fb      	ldr	r3, [r7, #28]
 801b6c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b6c8:	4b25      	ldr	r3, [pc, #148]	@ (801b760 <ip4_output_if_src+0x154>)
 801b6ca:	881b      	ldrh	r3, [r3, #0]
 801b6cc:	3301      	adds	r3, #1
 801b6ce:	b29a      	uxth	r2, r3
 801b6d0:	4b23      	ldr	r3, [pc, #140]	@ (801b760 <ip4_output_if_src+0x154>)
 801b6d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d104      	bne.n	801b6e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b6da:	4b22      	ldr	r3, [pc, #136]	@ (801b764 <ip4_output_if_src+0x158>)
 801b6dc:	681a      	ldr	r2, [r3, #0]
 801b6de:	69fb      	ldr	r3, [r7, #28]
 801b6e0:	60da      	str	r2, [r3, #12]
 801b6e2:	e003      	b.n	801b6ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	681a      	ldr	r2, [r3, #0]
 801b6e8:	69fb      	ldr	r3, [r7, #28]
 801b6ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	2200      	movs	r2, #0
 801b6f0:	729a      	strb	r2, [r3, #10]
 801b6f2:	2200      	movs	r2, #0
 801b6f4:	72da      	strb	r2, [r3, #11]
 801b6f6:	e00f      	b.n	801b718 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	895b      	ldrh	r3, [r3, #10]
 801b6fc:	2b13      	cmp	r3, #19
 801b6fe:	d802      	bhi.n	801b706 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b700:	f06f 0301 	mvn.w	r3, #1
 801b704:	e020      	b.n	801b748 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	685b      	ldr	r3, [r3, #4]
 801b70a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b70c:	69fb      	ldr	r3, [r7, #28]
 801b70e:	691b      	ldr	r3, [r3, #16]
 801b710:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b712:	f107 0314 	add.w	r3, r7, #20
 801b716:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b71a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d00c      	beq.n	801b73a <ip4_output_if_src+0x12e>
 801b720:	68fb      	ldr	r3, [r7, #12]
 801b722:	891a      	ldrh	r2, [r3, #8]
 801b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b726:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b728:	429a      	cmp	r2, r3
 801b72a:	d906      	bls.n	801b73a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b72c:	687a      	ldr	r2, [r7, #4]
 801b72e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b730:	68f8      	ldr	r0, [r7, #12]
 801b732:	f000 fd53 	bl	801c1dc <ip4_frag>
 801b736:	4603      	mov	r3, r0
 801b738:	e006      	b.n	801b748 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b73c:	695b      	ldr	r3, [r3, #20]
 801b73e:	687a      	ldr	r2, [r7, #4]
 801b740:	68f9      	ldr	r1, [r7, #12]
 801b742:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b744:	4798      	blx	r3
 801b746:	4603      	mov	r3, r0
}
 801b748:	4618      	mov	r0, r3
 801b74a:	3720      	adds	r7, #32
 801b74c:	46bd      	mov	sp, r7
 801b74e:	bd80      	pop	{r7, pc}
 801b750:	08022eac 	.word	0x08022eac
 801b754:	08022ee0 	.word	0x08022ee0
 801b758:	08022eec 	.word	0x08022eec
 801b75c:	08022f14 	.word	0x08022f14
 801b760:	2000f4e6 	.word	0x2000f4e6
 801b764:	08024a1c 	.word	0x08024a1c

0801b768 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b768:	b480      	push	{r7}
 801b76a:	b085      	sub	sp, #20
 801b76c:	af00      	add	r7, sp, #0
 801b76e:	6078      	str	r0, [r7, #4]
 801b770:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b77c:	d002      	beq.n	801b784 <ip4_addr_isbroadcast_u32+0x1c>
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d101      	bne.n	801b788 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b784:	2301      	movs	r3, #1
 801b786:	e02a      	b.n	801b7de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b788:	683b      	ldr	r3, [r7, #0]
 801b78a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b78e:	f003 0302 	and.w	r3, r3, #2
 801b792:	2b00      	cmp	r3, #0
 801b794:	d101      	bne.n	801b79a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b796:	2300      	movs	r3, #0
 801b798:	e021      	b.n	801b7de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	3304      	adds	r3, #4
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	687a      	ldr	r2, [r7, #4]
 801b7a2:	429a      	cmp	r2, r3
 801b7a4:	d101      	bne.n	801b7aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	e019      	b.n	801b7de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b7aa:	68fa      	ldr	r2, [r7, #12]
 801b7ac:	683b      	ldr	r3, [r7, #0]
 801b7ae:	3304      	adds	r3, #4
 801b7b0:	681b      	ldr	r3, [r3, #0]
 801b7b2:	405a      	eors	r2, r3
 801b7b4:	683b      	ldr	r3, [r7, #0]
 801b7b6:	3308      	adds	r3, #8
 801b7b8:	681b      	ldr	r3, [r3, #0]
 801b7ba:	4013      	ands	r3, r2
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d10d      	bne.n	801b7dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b7c0:	683b      	ldr	r3, [r7, #0]
 801b7c2:	3308      	adds	r3, #8
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	43da      	mvns	r2, r3
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	3308      	adds	r3, #8
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b7d4:	429a      	cmp	r2, r3
 801b7d6:	d101      	bne.n	801b7dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b7d8:	2301      	movs	r3, #1
 801b7da:	e000      	b.n	801b7de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b7dc:	2300      	movs	r3, #0
  }
}
 801b7de:	4618      	mov	r0, r3
 801b7e0:	3714      	adds	r7, #20
 801b7e2:	46bd      	mov	sp, r7
 801b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e8:	4770      	bx	lr
	...

0801b7ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b7ec:	b580      	push	{r7, lr}
 801b7ee:	b084      	sub	sp, #16
 801b7f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b7f6:	4b12      	ldr	r3, [pc, #72]	@ (801b840 <ip_reass_tmr+0x54>)
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b7fc:	e018      	b.n	801b830 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b7fe:	68fb      	ldr	r3, [r7, #12]
 801b800:	7fdb      	ldrb	r3, [r3, #31]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d00b      	beq.n	801b81e <ip_reass_tmr+0x32>
      r->timer--;
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	7fdb      	ldrb	r3, [r3, #31]
 801b80a:	3b01      	subs	r3, #1
 801b80c:	b2da      	uxtb	r2, r3
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b816:	68fb      	ldr	r3, [r7, #12]
 801b818:	681b      	ldr	r3, [r3, #0]
 801b81a:	60fb      	str	r3, [r7, #12]
 801b81c:	e008      	b.n	801b830 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b828:	68b9      	ldr	r1, [r7, #8]
 801b82a:	6878      	ldr	r0, [r7, #4]
 801b82c:	f000 f80a 	bl	801b844 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d1e3      	bne.n	801b7fe <ip_reass_tmr+0x12>
    }
  }
}
 801b836:	bf00      	nop
 801b838:	bf00      	nop
 801b83a:	3710      	adds	r7, #16
 801b83c:	46bd      	mov	sp, r7
 801b83e:	bd80      	pop	{r7, pc}
 801b840:	2000f4e8 	.word	0x2000f4e8

0801b844 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b844:	b580      	push	{r7, lr}
 801b846:	b088      	sub	sp, #32
 801b848:	af00      	add	r7, sp, #0
 801b84a:	6078      	str	r0, [r7, #4]
 801b84c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b84e:	2300      	movs	r3, #0
 801b850:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b852:	683a      	ldr	r2, [r7, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	429a      	cmp	r2, r3
 801b858:	d105      	bne.n	801b866 <ip_reass_free_complete_datagram+0x22>
 801b85a:	4b45      	ldr	r3, [pc, #276]	@ (801b970 <ip_reass_free_complete_datagram+0x12c>)
 801b85c:	22ab      	movs	r2, #171	@ 0xab
 801b85e:	4945      	ldr	r1, [pc, #276]	@ (801b974 <ip_reass_free_complete_datagram+0x130>)
 801b860:	4845      	ldr	r0, [pc, #276]	@ (801b978 <ip_reass_free_complete_datagram+0x134>)
 801b862:	f001 fe11 	bl	801d488 <iprintf>
  if (prev != NULL) {
 801b866:	683b      	ldr	r3, [r7, #0]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d00a      	beq.n	801b882 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b86c:	683b      	ldr	r3, [r7, #0]
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	687a      	ldr	r2, [r7, #4]
 801b872:	429a      	cmp	r2, r3
 801b874:	d005      	beq.n	801b882 <ip_reass_free_complete_datagram+0x3e>
 801b876:	4b3e      	ldr	r3, [pc, #248]	@ (801b970 <ip_reass_free_complete_datagram+0x12c>)
 801b878:	22ad      	movs	r2, #173	@ 0xad
 801b87a:	4940      	ldr	r1, [pc, #256]	@ (801b97c <ip_reass_free_complete_datagram+0x138>)
 801b87c:	483e      	ldr	r0, [pc, #248]	@ (801b978 <ip_reass_free_complete_datagram+0x134>)
 801b87e:	f001 fe03 	bl	801d488 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	685b      	ldr	r3, [r3, #4]
 801b886:	685b      	ldr	r3, [r3, #4]
 801b888:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	889b      	ldrh	r3, [r3, #4]
 801b88e:	b29b      	uxth	r3, r3
 801b890:	2b00      	cmp	r3, #0
 801b892:	d12a      	bne.n	801b8ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	685b      	ldr	r3, [r3, #4]
 801b898:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b89a:	697b      	ldr	r3, [r7, #20]
 801b89c:	681a      	ldr	r2, [r3, #0]
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b8a2:	69bb      	ldr	r3, [r7, #24]
 801b8a4:	6858      	ldr	r0, [r3, #4]
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	3308      	adds	r3, #8
 801b8aa:	2214      	movs	r2, #20
 801b8ac:	4619      	mov	r1, r3
 801b8ae:	f001 ff78 	bl	801d7a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b8b2:	2101      	movs	r1, #1
 801b8b4:	69b8      	ldr	r0, [r7, #24]
 801b8b6:	f7ff fc47 	bl	801b148 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b8ba:	69b8      	ldr	r0, [r7, #24]
 801b8bc:	f7f7 fab2 	bl	8012e24 <pbuf_clen>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b8c4:	8bfa      	ldrh	r2, [r7, #30]
 801b8c6:	8a7b      	ldrh	r3, [r7, #18]
 801b8c8:	4413      	add	r3, r2
 801b8ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b8ce:	db05      	blt.n	801b8dc <ip_reass_free_complete_datagram+0x98>
 801b8d0:	4b27      	ldr	r3, [pc, #156]	@ (801b970 <ip_reass_free_complete_datagram+0x12c>)
 801b8d2:	22bc      	movs	r2, #188	@ 0xbc
 801b8d4:	492a      	ldr	r1, [pc, #168]	@ (801b980 <ip_reass_free_complete_datagram+0x13c>)
 801b8d6:	4828      	ldr	r0, [pc, #160]	@ (801b978 <ip_reass_free_complete_datagram+0x134>)
 801b8d8:	f001 fdd6 	bl	801d488 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b8dc:	8bfa      	ldrh	r2, [r7, #30]
 801b8de:	8a7b      	ldrh	r3, [r7, #18]
 801b8e0:	4413      	add	r3, r2
 801b8e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b8e4:	69b8      	ldr	r0, [r7, #24]
 801b8e6:	f7f7 fa0f 	bl	8012d08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b8f0:	e01f      	b.n	801b932 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b8f2:	69bb      	ldr	r3, [r7, #24]
 801b8f4:	685b      	ldr	r3, [r3, #4]
 801b8f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b8f8:	69bb      	ldr	r3, [r7, #24]
 801b8fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b8fc:	697b      	ldr	r3, [r7, #20]
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b902:	68f8      	ldr	r0, [r7, #12]
 801b904:	f7f7 fa8e 	bl	8012e24 <pbuf_clen>
 801b908:	4603      	mov	r3, r0
 801b90a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b90c:	8bfa      	ldrh	r2, [r7, #30]
 801b90e:	8a7b      	ldrh	r3, [r7, #18]
 801b910:	4413      	add	r3, r2
 801b912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b916:	db05      	blt.n	801b924 <ip_reass_free_complete_datagram+0xe0>
 801b918:	4b15      	ldr	r3, [pc, #84]	@ (801b970 <ip_reass_free_complete_datagram+0x12c>)
 801b91a:	22cc      	movs	r2, #204	@ 0xcc
 801b91c:	4918      	ldr	r1, [pc, #96]	@ (801b980 <ip_reass_free_complete_datagram+0x13c>)
 801b91e:	4816      	ldr	r0, [pc, #88]	@ (801b978 <ip_reass_free_complete_datagram+0x134>)
 801b920:	f001 fdb2 	bl	801d488 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b924:	8bfa      	ldrh	r2, [r7, #30]
 801b926:	8a7b      	ldrh	r3, [r7, #18]
 801b928:	4413      	add	r3, r2
 801b92a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b92c:	68f8      	ldr	r0, [r7, #12]
 801b92e:	f7f7 f9eb 	bl	8012d08 <pbuf_free>
  while (p != NULL) {
 801b932:	69bb      	ldr	r3, [r7, #24]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d1dc      	bne.n	801b8f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b938:	6839      	ldr	r1, [r7, #0]
 801b93a:	6878      	ldr	r0, [r7, #4]
 801b93c:	f000 f8c2 	bl	801bac4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b940:	4b10      	ldr	r3, [pc, #64]	@ (801b984 <ip_reass_free_complete_datagram+0x140>)
 801b942:	881b      	ldrh	r3, [r3, #0]
 801b944:	8bfa      	ldrh	r2, [r7, #30]
 801b946:	429a      	cmp	r2, r3
 801b948:	d905      	bls.n	801b956 <ip_reass_free_complete_datagram+0x112>
 801b94a:	4b09      	ldr	r3, [pc, #36]	@ (801b970 <ip_reass_free_complete_datagram+0x12c>)
 801b94c:	22d2      	movs	r2, #210	@ 0xd2
 801b94e:	490e      	ldr	r1, [pc, #56]	@ (801b988 <ip_reass_free_complete_datagram+0x144>)
 801b950:	4809      	ldr	r0, [pc, #36]	@ (801b978 <ip_reass_free_complete_datagram+0x134>)
 801b952:	f001 fd99 	bl	801d488 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b956:	4b0b      	ldr	r3, [pc, #44]	@ (801b984 <ip_reass_free_complete_datagram+0x140>)
 801b958:	881a      	ldrh	r2, [r3, #0]
 801b95a:	8bfb      	ldrh	r3, [r7, #30]
 801b95c:	1ad3      	subs	r3, r2, r3
 801b95e:	b29a      	uxth	r2, r3
 801b960:	4b08      	ldr	r3, [pc, #32]	@ (801b984 <ip_reass_free_complete_datagram+0x140>)
 801b962:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b964:	8bfb      	ldrh	r3, [r7, #30]
}
 801b966:	4618      	mov	r0, r3
 801b968:	3720      	adds	r7, #32
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bd80      	pop	{r7, pc}
 801b96e:	bf00      	nop
 801b970:	08022f44 	.word	0x08022f44
 801b974:	08022f80 	.word	0x08022f80
 801b978:	08022f8c 	.word	0x08022f8c
 801b97c:	08022fb4 	.word	0x08022fb4
 801b980:	08022fc8 	.word	0x08022fc8
 801b984:	2000f4ec 	.word	0x2000f4ec
 801b988:	08022fe8 	.word	0x08022fe8

0801b98c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b08a      	sub	sp, #40	@ 0x28
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b996:	2300      	movs	r3, #0
 801b998:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b99a:	2300      	movs	r3, #0
 801b99c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b99e:	2300      	movs	r3, #0
 801b9a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b9aa:	4b28      	ldr	r3, [pc, #160]	@ (801ba4c <ip_reass_remove_oldest_datagram+0xc0>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801b9b0:	e030      	b.n	801ba14 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b4:	695a      	ldr	r2, [r3, #20]
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	68db      	ldr	r3, [r3, #12]
 801b9ba:	429a      	cmp	r2, r3
 801b9bc:	d10c      	bne.n	801b9d8 <ip_reass_remove_oldest_datagram+0x4c>
 801b9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9c0:	699a      	ldr	r2, [r3, #24]
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	691b      	ldr	r3, [r3, #16]
 801b9c6:	429a      	cmp	r2, r3
 801b9c8:	d106      	bne.n	801b9d8 <ip_reass_remove_oldest_datagram+0x4c>
 801b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9cc:	899a      	ldrh	r2, [r3, #12]
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	889b      	ldrh	r3, [r3, #4]
 801b9d2:	b29b      	uxth	r3, r3
 801b9d4:	429a      	cmp	r2, r3
 801b9d6:	d014      	beq.n	801ba02 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b9d8:	693b      	ldr	r3, [r7, #16]
 801b9da:	3301      	adds	r3, #1
 801b9dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b9de:	6a3b      	ldr	r3, [r7, #32]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d104      	bne.n	801b9ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b9e8:	69fb      	ldr	r3, [r7, #28]
 801b9ea:	61bb      	str	r3, [r7, #24]
 801b9ec:	e009      	b.n	801ba02 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f0:	7fda      	ldrb	r2, [r3, #31]
 801b9f2:	6a3b      	ldr	r3, [r7, #32]
 801b9f4:	7fdb      	ldrb	r3, [r3, #31]
 801b9f6:	429a      	cmp	r2, r3
 801b9f8:	d803      	bhi.n	801ba02 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b9fe:	69fb      	ldr	r3, [r7, #28]
 801ba00:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba04:	681b      	ldr	r3, [r3, #0]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d001      	beq.n	801ba0e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba0c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d1cb      	bne.n	801b9b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ba1a:	6a3b      	ldr	r3, [r7, #32]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d008      	beq.n	801ba32 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ba20:	69b9      	ldr	r1, [r7, #24]
 801ba22:	6a38      	ldr	r0, [r7, #32]
 801ba24:	f7ff ff0e 	bl	801b844 <ip_reass_free_complete_datagram>
 801ba28:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ba2a:	697a      	ldr	r2, [r7, #20]
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	4413      	add	r3, r2
 801ba30:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ba32:	697a      	ldr	r2, [r7, #20]
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	429a      	cmp	r2, r3
 801ba38:	da02      	bge.n	801ba40 <ip_reass_remove_oldest_datagram+0xb4>
 801ba3a:	693b      	ldr	r3, [r7, #16]
 801ba3c:	2b01      	cmp	r3, #1
 801ba3e:	dcac      	bgt.n	801b99a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ba40:	697b      	ldr	r3, [r7, #20]
}
 801ba42:	4618      	mov	r0, r3
 801ba44:	3728      	adds	r7, #40	@ 0x28
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}
 801ba4a:	bf00      	nop
 801ba4c:	2000f4e8 	.word	0x2000f4e8

0801ba50 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ba50:	b580      	push	{r7, lr}
 801ba52:	b084      	sub	sp, #16
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	6078      	str	r0, [r7, #4]
 801ba58:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ba5a:	2004      	movs	r0, #4
 801ba5c:	f7f6 fa3a 	bl	8011ed4 <memp_malloc>
 801ba60:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d110      	bne.n	801ba8a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ba68:	6839      	ldr	r1, [r7, #0]
 801ba6a:	6878      	ldr	r0, [r7, #4]
 801ba6c:	f7ff ff8e 	bl	801b98c <ip_reass_remove_oldest_datagram>
 801ba70:	4602      	mov	r2, r0
 801ba72:	683b      	ldr	r3, [r7, #0]
 801ba74:	4293      	cmp	r3, r2
 801ba76:	dc03      	bgt.n	801ba80 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ba78:	2004      	movs	r0, #4
 801ba7a:	f7f6 fa2b 	bl	8011ed4 <memp_malloc>
 801ba7e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d101      	bne.n	801ba8a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ba86:	2300      	movs	r3, #0
 801ba88:	e016      	b.n	801bab8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ba8a:	2220      	movs	r2, #32
 801ba8c:	2100      	movs	r1, #0
 801ba8e:	68f8      	ldr	r0, [r7, #12]
 801ba90:	f001 fd99 	bl	801d5c6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	220f      	movs	r2, #15
 801ba98:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ba9a:	4b09      	ldr	r3, [pc, #36]	@ (801bac0 <ip_reass_enqueue_new_datagram+0x70>)
 801ba9c:	681a      	ldr	r2, [r3, #0]
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801baa2:	4a07      	ldr	r2, [pc, #28]	@ (801bac0 <ip_reass_enqueue_new_datagram+0x70>)
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801baa8:	68fb      	ldr	r3, [r7, #12]
 801baaa:	3308      	adds	r3, #8
 801baac:	2214      	movs	r2, #20
 801baae:	6879      	ldr	r1, [r7, #4]
 801bab0:	4618      	mov	r0, r3
 801bab2:	f001 fe76 	bl	801d7a2 <memcpy>
  return ipr;
 801bab6:	68fb      	ldr	r3, [r7, #12]
}
 801bab8:	4618      	mov	r0, r3
 801baba:	3710      	adds	r7, #16
 801babc:	46bd      	mov	sp, r7
 801babe:	bd80      	pop	{r7, pc}
 801bac0:	2000f4e8 	.word	0x2000f4e8

0801bac4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bac4:	b580      	push	{r7, lr}
 801bac6:	b082      	sub	sp, #8
 801bac8:	af00      	add	r7, sp, #0
 801baca:	6078      	str	r0, [r7, #4]
 801bacc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bace:	4b10      	ldr	r3, [pc, #64]	@ (801bb10 <ip_reass_dequeue_datagram+0x4c>)
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	687a      	ldr	r2, [r7, #4]
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d104      	bne.n	801bae2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	4a0c      	ldr	r2, [pc, #48]	@ (801bb10 <ip_reass_dequeue_datagram+0x4c>)
 801bade:	6013      	str	r3, [r2, #0]
 801bae0:	e00d      	b.n	801bafe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d106      	bne.n	801baf6 <ip_reass_dequeue_datagram+0x32>
 801bae8:	4b0a      	ldr	r3, [pc, #40]	@ (801bb14 <ip_reass_dequeue_datagram+0x50>)
 801baea:	f240 1245 	movw	r2, #325	@ 0x145
 801baee:	490a      	ldr	r1, [pc, #40]	@ (801bb18 <ip_reass_dequeue_datagram+0x54>)
 801baf0:	480a      	ldr	r0, [pc, #40]	@ (801bb1c <ip_reass_dequeue_datagram+0x58>)
 801baf2:	f001 fcc9 	bl	801d488 <iprintf>
    prev->next = ipr->next;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	681a      	ldr	r2, [r3, #0]
 801bafa:	683b      	ldr	r3, [r7, #0]
 801bafc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bafe:	6879      	ldr	r1, [r7, #4]
 801bb00:	2004      	movs	r0, #4
 801bb02:	f7f6 fa5d 	bl	8011fc0 <memp_free>
}
 801bb06:	bf00      	nop
 801bb08:	3708      	adds	r7, #8
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	bd80      	pop	{r7, pc}
 801bb0e:	bf00      	nop
 801bb10:	2000f4e8 	.word	0x2000f4e8
 801bb14:	08022f44 	.word	0x08022f44
 801bb18:	0802300c 	.word	0x0802300c
 801bb1c:	08022f8c 	.word	0x08022f8c

0801bb20 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b08c      	sub	sp, #48	@ 0x30
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	60f8      	str	r0, [r7, #12]
 801bb28:	60b9      	str	r1, [r7, #8]
 801bb2a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bb2c:	2300      	movs	r3, #0
 801bb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bb30:	2301      	movs	r3, #1
 801bb32:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bb34:	68bb      	ldr	r3, [r7, #8]
 801bb36:	685b      	ldr	r3, [r3, #4]
 801bb38:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bb3a:	69fb      	ldr	r3, [r7, #28]
 801bb3c:	885b      	ldrh	r3, [r3, #2]
 801bb3e:	b29b      	uxth	r3, r3
 801bb40:	4618      	mov	r0, r3
 801bb42:	f7f5 fcb9 	bl	80114b8 <lwip_htons>
 801bb46:	4603      	mov	r3, r0
 801bb48:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bb4a:	69fb      	ldr	r3, [r7, #28]
 801bb4c:	781b      	ldrb	r3, [r3, #0]
 801bb4e:	f003 030f 	and.w	r3, r3, #15
 801bb52:	b2db      	uxtb	r3, r3
 801bb54:	009b      	lsls	r3, r3, #2
 801bb56:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bb58:	7e7b      	ldrb	r3, [r7, #25]
 801bb5a:	b29b      	uxth	r3, r3
 801bb5c:	8b7a      	ldrh	r2, [r7, #26]
 801bb5e:	429a      	cmp	r2, r3
 801bb60:	d202      	bcs.n	801bb68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bb62:	f04f 33ff 	mov.w	r3, #4294967295
 801bb66:	e135      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bb68:	7e7b      	ldrb	r3, [r7, #25]
 801bb6a:	b29b      	uxth	r3, r3
 801bb6c:	8b7a      	ldrh	r2, [r7, #26]
 801bb6e:	1ad3      	subs	r3, r2, r3
 801bb70:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bb72:	69fb      	ldr	r3, [r7, #28]
 801bb74:	88db      	ldrh	r3, [r3, #6]
 801bb76:	b29b      	uxth	r3, r3
 801bb78:	4618      	mov	r0, r3
 801bb7a:	f7f5 fc9d 	bl	80114b8 <lwip_htons>
 801bb7e:	4603      	mov	r3, r0
 801bb80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb84:	b29b      	uxth	r3, r3
 801bb86:	00db      	lsls	r3, r3, #3
 801bb88:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bb92:	2200      	movs	r2, #0
 801bb94:	701a      	strb	r2, [r3, #0]
 801bb96:	2200      	movs	r2, #0
 801bb98:	705a      	strb	r2, [r3, #1]
 801bb9a:	2200      	movs	r2, #0
 801bb9c:	709a      	strb	r2, [r3, #2]
 801bb9e:	2200      	movs	r2, #0
 801bba0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bba4:	8afa      	ldrh	r2, [r7, #22]
 801bba6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bba8:	8afa      	ldrh	r2, [r7, #22]
 801bbaa:	8b7b      	ldrh	r3, [r7, #26]
 801bbac:	4413      	add	r3, r2
 801bbae:	b29a      	uxth	r2, r3
 801bbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbb2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbb6:	88db      	ldrh	r3, [r3, #6]
 801bbb8:	b29b      	uxth	r3, r3
 801bbba:	8afa      	ldrh	r2, [r7, #22]
 801bbbc:	429a      	cmp	r2, r3
 801bbbe:	d902      	bls.n	801bbc6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bbc0:	f04f 33ff 	mov.w	r3, #4294967295
 801bbc4:	e106      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	685b      	ldr	r3, [r3, #4]
 801bbca:	627b      	str	r3, [r7, #36]	@ 0x24
 801bbcc:	e068      	b.n	801bca0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbd0:	685b      	ldr	r3, [r3, #4]
 801bbd2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbd6:	889b      	ldrh	r3, [r3, #4]
 801bbd8:	b29a      	uxth	r2, r3
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	889b      	ldrh	r3, [r3, #4]
 801bbde:	b29b      	uxth	r3, r3
 801bbe0:	429a      	cmp	r2, r3
 801bbe2:	d235      	bcs.n	801bc50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbe8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d020      	beq.n	801bc32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bbf2:	889b      	ldrh	r3, [r3, #4]
 801bbf4:	b29a      	uxth	r2, r3
 801bbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bbf8:	88db      	ldrh	r3, [r3, #6]
 801bbfa:	b29b      	uxth	r3, r3
 801bbfc:	429a      	cmp	r2, r3
 801bbfe:	d307      	bcc.n	801bc10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc02:	88db      	ldrh	r3, [r3, #6]
 801bc04:	b29a      	uxth	r2, r3
 801bc06:	693b      	ldr	r3, [r7, #16]
 801bc08:	889b      	ldrh	r3, [r3, #4]
 801bc0a:	b29b      	uxth	r3, r3
 801bc0c:	429a      	cmp	r2, r3
 801bc0e:	d902      	bls.n	801bc16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc10:	f04f 33ff 	mov.w	r3, #4294967295
 801bc14:	e0de      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc18:	68ba      	ldr	r2, [r7, #8]
 801bc1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc1e:	88db      	ldrh	r3, [r3, #6]
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc24:	889b      	ldrh	r3, [r3, #4]
 801bc26:	b29b      	uxth	r3, r3
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	d03d      	beq.n	801bca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bc30:	e03a      	b.n	801bca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc34:	88db      	ldrh	r3, [r3, #6]
 801bc36:	b29a      	uxth	r2, r3
 801bc38:	693b      	ldr	r3, [r7, #16]
 801bc3a:	889b      	ldrh	r3, [r3, #4]
 801bc3c:	b29b      	uxth	r3, r3
 801bc3e:	429a      	cmp	r2, r3
 801bc40:	d902      	bls.n	801bc48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc42:	f04f 33ff 	mov.w	r3, #4294967295
 801bc46:	e0c5      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	68ba      	ldr	r2, [r7, #8]
 801bc4c:	605a      	str	r2, [r3, #4]
      break;
 801bc4e:	e02b      	b.n	801bca8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc52:	889b      	ldrh	r3, [r3, #4]
 801bc54:	b29a      	uxth	r2, r3
 801bc56:	693b      	ldr	r3, [r7, #16]
 801bc58:	889b      	ldrh	r3, [r3, #4]
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	429a      	cmp	r2, r3
 801bc5e:	d102      	bne.n	801bc66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc60:	f04f 33ff 	mov.w	r3, #4294967295
 801bc64:	e0b6      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bc68:	889b      	ldrh	r3, [r3, #4]
 801bc6a:	b29a      	uxth	r2, r3
 801bc6c:	693b      	ldr	r3, [r7, #16]
 801bc6e:	88db      	ldrh	r3, [r3, #6]
 801bc70:	b29b      	uxth	r3, r3
 801bc72:	429a      	cmp	r2, r3
 801bc74:	d202      	bcs.n	801bc7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc76:	f04f 33ff 	mov.w	r3, #4294967295
 801bc7a:	e0ab      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d009      	beq.n	801bc96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bc84:	88db      	ldrh	r3, [r3, #6]
 801bc86:	b29a      	uxth	r2, r3
 801bc88:	693b      	ldr	r3, [r7, #16]
 801bc8a:	889b      	ldrh	r3, [r3, #4]
 801bc8c:	b29b      	uxth	r3, r3
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d001      	beq.n	801bc96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bc92:	2300      	movs	r3, #0
 801bc94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bc96:	693b      	ldr	r3, [r7, #16]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d193      	bne.n	801bbce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bca6:	e000      	b.n	801bcaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bca8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d12d      	bne.n	801bd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bcb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d01c      	beq.n	801bcf0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcb8:	88db      	ldrh	r3, [r3, #6]
 801bcba:	b29a      	uxth	r2, r3
 801bcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bcbe:	889b      	ldrh	r3, [r3, #4]
 801bcc0:	b29b      	uxth	r3, r3
 801bcc2:	429a      	cmp	r2, r3
 801bcc4:	d906      	bls.n	801bcd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bcc6:	4b45      	ldr	r3, [pc, #276]	@ (801bddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bcc8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bccc:	4944      	ldr	r1, [pc, #272]	@ (801bde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bcce:	4845      	ldr	r0, [pc, #276]	@ (801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bcd0:	f001 fbda 	bl	801d488 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcd6:	68ba      	ldr	r2, [r7, #8]
 801bcd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bcdc:	88db      	ldrh	r3, [r3, #6]
 801bcde:	b29a      	uxth	r2, r3
 801bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bce2:	889b      	ldrh	r3, [r3, #4]
 801bce4:	b29b      	uxth	r3, r3
 801bce6:	429a      	cmp	r2, r3
 801bce8:	d010      	beq.n	801bd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bcea:	2300      	movs	r3, #0
 801bcec:	623b      	str	r3, [r7, #32]
 801bcee:	e00d      	b.n	801bd0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	685b      	ldr	r3, [r3, #4]
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d006      	beq.n	801bd06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bcf8:	4b38      	ldr	r3, [pc, #224]	@ (801bddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bcfa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801bcfe:	493a      	ldr	r1, [pc, #232]	@ (801bde8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bd00:	4838      	ldr	r0, [pc, #224]	@ (801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd02:	f001 fbc1 	bl	801d488 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bd06:	68fb      	ldr	r3, [r7, #12]
 801bd08:	68ba      	ldr	r2, [r7, #8]
 801bd0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d105      	bne.n	801bd1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bd12:	68fb      	ldr	r3, [r7, #12]
 801bd14:	7f9b      	ldrb	r3, [r3, #30]
 801bd16:	f003 0301 	and.w	r3, r3, #1
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d059      	beq.n	801bdd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bd1e:	6a3b      	ldr	r3, [r7, #32]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d04f      	beq.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bd24:	68fb      	ldr	r3, [r7, #12]
 801bd26:	685b      	ldr	r3, [r3, #4]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d006      	beq.n	801bd3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	685b      	ldr	r3, [r3, #4]
 801bd30:	685b      	ldr	r3, [r3, #4]
 801bd32:	889b      	ldrh	r3, [r3, #4]
 801bd34:	b29b      	uxth	r3, r3
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d002      	beq.n	801bd40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	623b      	str	r3, [r7, #32]
 801bd3e:	e041      	b.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd42:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bd4a:	e012      	b.n	801bd72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd4e:	685b      	ldr	r3, [r3, #4]
 801bd50:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bd52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd54:	88db      	ldrh	r3, [r3, #6]
 801bd56:	b29a      	uxth	r2, r3
 801bd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd5a:	889b      	ldrh	r3, [r3, #4]
 801bd5c:	b29b      	uxth	r3, r3
 801bd5e:	429a      	cmp	r2, r3
 801bd60:	d002      	beq.n	801bd68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bd62:	2300      	movs	r3, #0
 801bd64:	623b      	str	r3, [r7, #32]
            break;
 801bd66:	e007      	b.n	801bd78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d1e9      	bne.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bd78:	6a3b      	ldr	r3, [r7, #32]
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d022      	beq.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d106      	bne.n	801bd94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bd86:	4b15      	ldr	r3, [pc, #84]	@ (801bddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd88:	f240 12df 	movw	r2, #479	@ 0x1df
 801bd8c:	4917      	ldr	r1, [pc, #92]	@ (801bdec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bd8e:	4815      	ldr	r0, [pc, #84]	@ (801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd90:	f001 fb7a 	bl	801d488 <iprintf>
          LWIP_ASSERT("sanity check",
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	685b      	ldr	r3, [r3, #4]
 801bd9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d106      	bne.n	801bdae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bda0:	4b0e      	ldr	r3, [pc, #56]	@ (801bddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bda2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bda6:	4911      	ldr	r1, [pc, #68]	@ (801bdec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bda8:	480e      	ldr	r0, [pc, #56]	@ (801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bdaa:	f001 fb6d 	bl	801d488 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdb0:	681b      	ldr	r3, [r3, #0]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d006      	beq.n	801bdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bdb6:	4b09      	ldr	r3, [pc, #36]	@ (801bddc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bdb8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bdbc:	490c      	ldr	r1, [pc, #48]	@ (801bdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bdbe:	4809      	ldr	r0, [pc, #36]	@ (801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bdc0:	f001 fb62 	bl	801d488 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bdc4:	6a3b      	ldr	r3, [r7, #32]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	bf14      	ite	ne
 801bdca:	2301      	movne	r3, #1
 801bdcc:	2300      	moveq	r3, #0
 801bdce:	b2db      	uxtb	r3, r3
 801bdd0:	e000      	b.n	801bdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bdd2:	2300      	movs	r3, #0
}
 801bdd4:	4618      	mov	r0, r3
 801bdd6:	3730      	adds	r7, #48	@ 0x30
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	bd80      	pop	{r7, pc}
 801bddc:	08022f44 	.word	0x08022f44
 801bde0:	08023028 	.word	0x08023028
 801bde4:	08022f8c 	.word	0x08022f8c
 801bde8:	08023048 	.word	0x08023048
 801bdec:	08023080 	.word	0x08023080
 801bdf0:	08023090 	.word	0x08023090

0801bdf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b08e      	sub	sp, #56	@ 0x38
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	685b      	ldr	r3, [r3, #4]
 801be00:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801be02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	f003 030f 	and.w	r3, r3, #15
 801be0a:	b2db      	uxtb	r3, r3
 801be0c:	009b      	lsls	r3, r3, #2
 801be0e:	b2db      	uxtb	r3, r3
 801be10:	2b14      	cmp	r3, #20
 801be12:	f040 8171 	bne.w	801c0f8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801be16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be18:	88db      	ldrh	r3, [r3, #6]
 801be1a:	b29b      	uxth	r3, r3
 801be1c:	4618      	mov	r0, r3
 801be1e:	f7f5 fb4b 	bl	80114b8 <lwip_htons>
 801be22:	4603      	mov	r3, r0
 801be24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be28:	b29b      	uxth	r3, r3
 801be2a:	00db      	lsls	r3, r3, #3
 801be2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801be2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be30:	885b      	ldrh	r3, [r3, #2]
 801be32:	b29b      	uxth	r3, r3
 801be34:	4618      	mov	r0, r3
 801be36:	f7f5 fb3f 	bl	80114b8 <lwip_htons>
 801be3a:	4603      	mov	r3, r0
 801be3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801be3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be40:	781b      	ldrb	r3, [r3, #0]
 801be42:	f003 030f 	and.w	r3, r3, #15
 801be46:	b2db      	uxtb	r3, r3
 801be48:	009b      	lsls	r3, r3, #2
 801be4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801be4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be52:	b29b      	uxth	r3, r3
 801be54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801be56:	429a      	cmp	r2, r3
 801be58:	f0c0 8150 	bcc.w	801c0fc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801be5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be60:	b29b      	uxth	r3, r3
 801be62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801be64:	1ad3      	subs	r3, r2, r3
 801be66:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801be68:	6878      	ldr	r0, [r7, #4]
 801be6a:	f7f6 ffdb 	bl	8012e24 <pbuf_clen>
 801be6e:	4603      	mov	r3, r0
 801be70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801be72:	4b8c      	ldr	r3, [pc, #560]	@ (801c0a4 <ip4_reass+0x2b0>)
 801be74:	881b      	ldrh	r3, [r3, #0]
 801be76:	461a      	mov	r2, r3
 801be78:	8c3b      	ldrh	r3, [r7, #32]
 801be7a:	4413      	add	r3, r2
 801be7c:	2b0a      	cmp	r3, #10
 801be7e:	dd10      	ble.n	801bea2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801be80:	8c3b      	ldrh	r3, [r7, #32]
 801be82:	4619      	mov	r1, r3
 801be84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801be86:	f7ff fd81 	bl	801b98c <ip_reass_remove_oldest_datagram>
 801be8a:	4603      	mov	r3, r0
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	f000 8137 	beq.w	801c100 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801be92:	4b84      	ldr	r3, [pc, #528]	@ (801c0a4 <ip4_reass+0x2b0>)
 801be94:	881b      	ldrh	r3, [r3, #0]
 801be96:	461a      	mov	r2, r3
 801be98:	8c3b      	ldrh	r3, [r7, #32]
 801be9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801be9c:	2b0a      	cmp	r3, #10
 801be9e:	f300 812f 	bgt.w	801c100 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bea2:	4b81      	ldr	r3, [pc, #516]	@ (801c0a8 <ip4_reass+0x2b4>)
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	633b      	str	r3, [r7, #48]	@ 0x30
 801bea8:	e015      	b.n	801bed6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801beaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801beac:	695a      	ldr	r2, [r3, #20]
 801beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beb0:	68db      	ldr	r3, [r3, #12]
 801beb2:	429a      	cmp	r2, r3
 801beb4:	d10c      	bne.n	801bed0 <ip4_reass+0xdc>
 801beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801beb8:	699a      	ldr	r2, [r3, #24]
 801beba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bebc:	691b      	ldr	r3, [r3, #16]
 801bebe:	429a      	cmp	r2, r3
 801bec0:	d106      	bne.n	801bed0 <ip4_reass+0xdc>
 801bec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bec4:	899a      	ldrh	r2, [r3, #12]
 801bec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bec8:	889b      	ldrh	r3, [r3, #4]
 801beca:	b29b      	uxth	r3, r3
 801becc:	429a      	cmp	r2, r3
 801bece:	d006      	beq.n	801bede <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	633b      	str	r3, [r7, #48]	@ 0x30
 801bed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d1e6      	bne.n	801beaa <ip4_reass+0xb6>
 801bedc:	e000      	b.n	801bee0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bede:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d109      	bne.n	801befa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bee6:	8c3b      	ldrh	r3, [r7, #32]
 801bee8:	4619      	mov	r1, r3
 801beea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801beec:	f7ff fdb0 	bl	801ba50 <ip_reass_enqueue_new_datagram>
 801bef0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d11c      	bne.n	801bf32 <ip4_reass+0x13e>
      goto nullreturn;
 801bef8:	e105      	b.n	801c106 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801befa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801befc:	88db      	ldrh	r3, [r3, #6]
 801befe:	b29b      	uxth	r3, r3
 801bf00:	4618      	mov	r0, r3
 801bf02:	f7f5 fad9 	bl	80114b8 <lwip_htons>
 801bf06:	4603      	mov	r3, r0
 801bf08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d110      	bne.n	801bf32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf12:	89db      	ldrh	r3, [r3, #14]
 801bf14:	4618      	mov	r0, r3
 801bf16:	f7f5 facf 	bl	80114b8 <lwip_htons>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d006      	beq.n	801bf32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bf24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf26:	3308      	adds	r3, #8
 801bf28:	2214      	movs	r2, #20
 801bf2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801bf2c:	4618      	mov	r0, r3
 801bf2e:	f001 fc38 	bl	801d7a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf34:	88db      	ldrh	r3, [r3, #6]
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	f003 0320 	and.w	r3, r3, #32
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	bf0c      	ite	eq
 801bf40:	2301      	moveq	r3, #1
 801bf42:	2300      	movne	r3, #0
 801bf44:	b2db      	uxtb	r3, r3
 801bf46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bf48:	69fb      	ldr	r3, [r7, #28]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d00e      	beq.n	801bf6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bf4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bf50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf52:	4413      	add	r3, r2
 801bf54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bf56:	8b7a      	ldrh	r2, [r7, #26]
 801bf58:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	f0c0 80a0 	bcc.w	801c0a0 <ip4_reass+0x2ac>
 801bf60:	8b7b      	ldrh	r3, [r7, #26]
 801bf62:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801bf66:	4293      	cmp	r3, r2
 801bf68:	f200 809a 	bhi.w	801c0a0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801bf6c:	69fa      	ldr	r2, [r7, #28]
 801bf6e:	6879      	ldr	r1, [r7, #4]
 801bf70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bf72:	f7ff fdd5 	bl	801bb20 <ip_reass_chain_frag_into_datagram_and_validate>
 801bf76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf7e:	f000 809b 	beq.w	801c0b8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801bf82:	4b48      	ldr	r3, [pc, #288]	@ (801c0a4 <ip4_reass+0x2b0>)
 801bf84:	881a      	ldrh	r2, [r3, #0]
 801bf86:	8c3b      	ldrh	r3, [r7, #32]
 801bf88:	4413      	add	r3, r2
 801bf8a:	b29a      	uxth	r2, r3
 801bf8c:	4b45      	ldr	r3, [pc, #276]	@ (801c0a4 <ip4_reass+0x2b0>)
 801bf8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801bf90:	69fb      	ldr	r3, [r7, #28]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d00d      	beq.n	801bfb2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801bf96:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801bf98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801bf9a:	4413      	add	r3, r2
 801bf9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801bf9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfa0:	8a7a      	ldrh	r2, [r7, #18]
 801bfa2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfa6:	7f9b      	ldrb	r3, [r3, #30]
 801bfa8:	f043 0301 	orr.w	r3, r3, #1
 801bfac:	b2da      	uxtb	r2, r3
 801bfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfb0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801bfb2:	697b      	ldr	r3, [r7, #20]
 801bfb4:	2b01      	cmp	r3, #1
 801bfb6:	d171      	bne.n	801c09c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801bfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfba:	8b9b      	ldrh	r3, [r3, #28]
 801bfbc:	3314      	adds	r3, #20
 801bfbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801bfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfc2:	685b      	ldr	r3, [r3, #4]
 801bfc4:	685b      	ldr	r3, [r3, #4]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfcc:	685b      	ldr	r3, [r3, #4]
 801bfce:	685b      	ldr	r3, [r3, #4]
 801bfd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfd4:	3308      	adds	r3, #8
 801bfd6:	2214      	movs	r2, #20
 801bfd8:	4619      	mov	r1, r3
 801bfda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801bfdc:	f001 fbe1 	bl	801d7a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801bfe0:	8a3b      	ldrh	r3, [r7, #16]
 801bfe2:	4618      	mov	r0, r3
 801bfe4:	f7f5 fa68 	bl	80114b8 <lwip_htons>
 801bfe8:	4603      	mov	r3, r0
 801bfea:	461a      	mov	r2, r3
 801bfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801bff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bff2:	2200      	movs	r2, #0
 801bff4:	719a      	strb	r2, [r3, #6]
 801bff6:	2200      	movs	r2, #0
 801bff8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bffc:	2200      	movs	r2, #0
 801bffe:	729a      	strb	r2, [r3, #10]
 801c000:	2200      	movs	r2, #0
 801c002:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c006:	685b      	ldr	r3, [r3, #4]
 801c008:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c00a:	e00d      	b.n	801c028 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c00e:	685b      	ldr	r3, [r3, #4]
 801c010:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c012:	2114      	movs	r1, #20
 801c014:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c016:	f7f6 fdf1 	bl	8012bfc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c01a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	f7f6 ff41 	bl	8012ea4 <pbuf_cat>
      r = iprh->next_pbuf;
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d1ee      	bne.n	801c00c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c02e:	4b1e      	ldr	r3, [pc, #120]	@ (801c0a8 <ip4_reass+0x2b4>)
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c034:	429a      	cmp	r2, r3
 801c036:	d102      	bne.n	801c03e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c038:	2300      	movs	r3, #0
 801c03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c03c:	e010      	b.n	801c060 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c03e:	4b1a      	ldr	r3, [pc, #104]	@ (801c0a8 <ip4_reass+0x2b4>)
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c044:	e007      	b.n	801c056 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c04c:	429a      	cmp	r2, r3
 801c04e:	d006      	beq.n	801c05e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d1f4      	bne.n	801c046 <ip4_reass+0x252>
 801c05c:	e000      	b.n	801c060 <ip4_reass+0x26c>
          break;
 801c05e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c060:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c062:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c064:	f7ff fd2e 	bl	801bac4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c068:	6878      	ldr	r0, [r7, #4]
 801c06a:	f7f6 fedb 	bl	8012e24 <pbuf_clen>
 801c06e:	4603      	mov	r3, r0
 801c070:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c072:	4b0c      	ldr	r3, [pc, #48]	@ (801c0a4 <ip4_reass+0x2b0>)
 801c074:	881b      	ldrh	r3, [r3, #0]
 801c076:	8c3a      	ldrh	r2, [r7, #32]
 801c078:	429a      	cmp	r2, r3
 801c07a:	d906      	bls.n	801c08a <ip4_reass+0x296>
 801c07c:	4b0b      	ldr	r3, [pc, #44]	@ (801c0ac <ip4_reass+0x2b8>)
 801c07e:	f240 229b 	movw	r2, #667	@ 0x29b
 801c082:	490b      	ldr	r1, [pc, #44]	@ (801c0b0 <ip4_reass+0x2bc>)
 801c084:	480b      	ldr	r0, [pc, #44]	@ (801c0b4 <ip4_reass+0x2c0>)
 801c086:	f001 f9ff 	bl	801d488 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c08a:	4b06      	ldr	r3, [pc, #24]	@ (801c0a4 <ip4_reass+0x2b0>)
 801c08c:	881a      	ldrh	r2, [r3, #0]
 801c08e:	8c3b      	ldrh	r3, [r7, #32]
 801c090:	1ad3      	subs	r3, r2, r3
 801c092:	b29a      	uxth	r2, r3
 801c094:	4b03      	ldr	r3, [pc, #12]	@ (801c0a4 <ip4_reass+0x2b0>)
 801c096:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	e038      	b.n	801c10e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c09c:	2300      	movs	r3, #0
 801c09e:	e036      	b.n	801c10e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c0a0:	bf00      	nop
 801c0a2:	e00a      	b.n	801c0ba <ip4_reass+0x2c6>
 801c0a4:	2000f4ec 	.word	0x2000f4ec
 801c0a8:	2000f4e8 	.word	0x2000f4e8
 801c0ac:	08022f44 	.word	0x08022f44
 801c0b0:	080230b4 	.word	0x080230b4
 801c0b4:	08022f8c 	.word	0x08022f8c
    goto nullreturn_ipr;
 801c0b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d106      	bne.n	801c0ce <ip4_reass+0x2da>
 801c0c0:	4b15      	ldr	r3, [pc, #84]	@ (801c118 <ip4_reass+0x324>)
 801c0c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c0c6:	4915      	ldr	r1, [pc, #84]	@ (801c11c <ip4_reass+0x328>)
 801c0c8:	4815      	ldr	r0, [pc, #84]	@ (801c120 <ip4_reass+0x32c>)
 801c0ca:	f001 f9dd 	bl	801d488 <iprintf>
  if (ipr->p == NULL) {
 801c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0d0:	685b      	ldr	r3, [r3, #4]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d116      	bne.n	801c104 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c0d6:	4b13      	ldr	r3, [pc, #76]	@ (801c124 <ip4_reass+0x330>)
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c0dc:	429a      	cmp	r2, r3
 801c0de:	d006      	beq.n	801c0ee <ip4_reass+0x2fa>
 801c0e0:	4b0d      	ldr	r3, [pc, #52]	@ (801c118 <ip4_reass+0x324>)
 801c0e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c0e6:	4910      	ldr	r1, [pc, #64]	@ (801c128 <ip4_reass+0x334>)
 801c0e8:	480d      	ldr	r0, [pc, #52]	@ (801c120 <ip4_reass+0x32c>)
 801c0ea:	f001 f9cd 	bl	801d488 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c0ee:	2100      	movs	r1, #0
 801c0f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c0f2:	f7ff fce7 	bl	801bac4 <ip_reass_dequeue_datagram>
 801c0f6:	e006      	b.n	801c106 <ip4_reass+0x312>
    goto nullreturn;
 801c0f8:	bf00      	nop
 801c0fa:	e004      	b.n	801c106 <ip4_reass+0x312>
    goto nullreturn;
 801c0fc:	bf00      	nop
 801c0fe:	e002      	b.n	801c106 <ip4_reass+0x312>
      goto nullreturn;
 801c100:	bf00      	nop
 801c102:	e000      	b.n	801c106 <ip4_reass+0x312>
  }

nullreturn:
 801c104:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c106:	6878      	ldr	r0, [r7, #4]
 801c108:	f7f6 fdfe 	bl	8012d08 <pbuf_free>
  return NULL;
 801c10c:	2300      	movs	r3, #0
}
 801c10e:	4618      	mov	r0, r3
 801c110:	3738      	adds	r7, #56	@ 0x38
 801c112:	46bd      	mov	sp, r7
 801c114:	bd80      	pop	{r7, pc}
 801c116:	bf00      	nop
 801c118:	08022f44 	.word	0x08022f44
 801c11c:	080230d0 	.word	0x080230d0
 801c120:	08022f8c 	.word	0x08022f8c
 801c124:	2000f4e8 	.word	0x2000f4e8
 801c128:	080230dc 	.word	0x080230dc

0801c12c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c130:	2005      	movs	r0, #5
 801c132:	f7f5 fecf 	bl	8011ed4 <memp_malloc>
 801c136:	4603      	mov	r3, r0
}
 801c138:	4618      	mov	r0, r3
 801c13a:	bd80      	pop	{r7, pc}

0801c13c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b082      	sub	sp, #8
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d106      	bne.n	801c158 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c14a:	4b07      	ldr	r3, [pc, #28]	@ (801c168 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c14c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c150:	4906      	ldr	r1, [pc, #24]	@ (801c16c <ip_frag_free_pbuf_custom_ref+0x30>)
 801c152:	4807      	ldr	r0, [pc, #28]	@ (801c170 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c154:	f001 f998 	bl	801d488 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c158:	6879      	ldr	r1, [r7, #4]
 801c15a:	2005      	movs	r0, #5
 801c15c:	f7f5 ff30 	bl	8011fc0 <memp_free>
}
 801c160:	bf00      	nop
 801c162:	3708      	adds	r7, #8
 801c164:	46bd      	mov	sp, r7
 801c166:	bd80      	pop	{r7, pc}
 801c168:	08022f44 	.word	0x08022f44
 801c16c:	080230fc 	.word	0x080230fc
 801c170:	08022f8c 	.word	0x08022f8c

0801c174 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c174:	b580      	push	{r7, lr}
 801c176:	b084      	sub	sp, #16
 801c178:	af00      	add	r7, sp, #0
 801c17a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	2b00      	cmp	r3, #0
 801c184:	d106      	bne.n	801c194 <ipfrag_free_pbuf_custom+0x20>
 801c186:	4b11      	ldr	r3, [pc, #68]	@ (801c1cc <ipfrag_free_pbuf_custom+0x58>)
 801c188:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c18c:	4910      	ldr	r1, [pc, #64]	@ (801c1d0 <ipfrag_free_pbuf_custom+0x5c>)
 801c18e:	4811      	ldr	r0, [pc, #68]	@ (801c1d4 <ipfrag_free_pbuf_custom+0x60>)
 801c190:	f001 f97a 	bl	801d488 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c194:	68fa      	ldr	r2, [r7, #12]
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	429a      	cmp	r2, r3
 801c19a:	d006      	beq.n	801c1aa <ipfrag_free_pbuf_custom+0x36>
 801c19c:	4b0b      	ldr	r3, [pc, #44]	@ (801c1cc <ipfrag_free_pbuf_custom+0x58>)
 801c19e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c1a2:	490d      	ldr	r1, [pc, #52]	@ (801c1d8 <ipfrag_free_pbuf_custom+0x64>)
 801c1a4:	480b      	ldr	r0, [pc, #44]	@ (801c1d4 <ipfrag_free_pbuf_custom+0x60>)
 801c1a6:	f001 f96f 	bl	801d488 <iprintf>
  if (pcr->original != NULL) {
 801c1aa:	68fb      	ldr	r3, [r7, #12]
 801c1ac:	695b      	ldr	r3, [r3, #20]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d004      	beq.n	801c1bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c1b2:	68fb      	ldr	r3, [r7, #12]
 801c1b4:	695b      	ldr	r3, [r3, #20]
 801c1b6:	4618      	mov	r0, r3
 801c1b8:	f7f6 fda6 	bl	8012d08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c1bc:	68f8      	ldr	r0, [r7, #12]
 801c1be:	f7ff ffbd 	bl	801c13c <ip_frag_free_pbuf_custom_ref>
}
 801c1c2:	bf00      	nop
 801c1c4:	3710      	adds	r7, #16
 801c1c6:	46bd      	mov	sp, r7
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	08022f44 	.word	0x08022f44
 801c1d0:	08023108 	.word	0x08023108
 801c1d4:	08022f8c 	.word	0x08022f8c
 801c1d8:	08023114 	.word	0x08023114

0801c1dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b094      	sub	sp, #80	@ 0x50
 801c1e0:	af02      	add	r7, sp, #8
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c1e8:	2300      	movs	r3, #0
 801c1ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c1ee:	68bb      	ldr	r3, [r7, #8]
 801c1f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c1f2:	3b14      	subs	r3, #20
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	da00      	bge.n	801c1fa <ip4_frag+0x1e>
 801c1f8:	3307      	adds	r3, #7
 801c1fa:	10db      	asrs	r3, r3, #3
 801c1fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c1fe:	2314      	movs	r3, #20
 801c200:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c202:	68fb      	ldr	r3, [r7, #12]
 801c204:	685b      	ldr	r3, [r3, #4]
 801c206:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c20a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c20e:	781b      	ldrb	r3, [r3, #0]
 801c210:	f003 030f 	and.w	r3, r3, #15
 801c214:	b2db      	uxtb	r3, r3
 801c216:	009b      	lsls	r3, r3, #2
 801c218:	b2db      	uxtb	r3, r3
 801c21a:	2b14      	cmp	r3, #20
 801c21c:	d002      	beq.n	801c224 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c21e:	f06f 0305 	mvn.w	r3, #5
 801c222:	e110      	b.n	801c446 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	895b      	ldrh	r3, [r3, #10]
 801c228:	2b13      	cmp	r3, #19
 801c22a:	d809      	bhi.n	801c240 <ip4_frag+0x64>
 801c22c:	4b88      	ldr	r3, [pc, #544]	@ (801c450 <ip4_frag+0x274>)
 801c22e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c232:	4988      	ldr	r1, [pc, #544]	@ (801c454 <ip4_frag+0x278>)
 801c234:	4888      	ldr	r0, [pc, #544]	@ (801c458 <ip4_frag+0x27c>)
 801c236:	f001 f927 	bl	801d488 <iprintf>
 801c23a:	f06f 0305 	mvn.w	r3, #5
 801c23e:	e102      	b.n	801c446 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c242:	88db      	ldrh	r3, [r3, #6]
 801c244:	b29b      	uxth	r3, r3
 801c246:	4618      	mov	r0, r3
 801c248:	f7f5 f936 	bl	80114b8 <lwip_htons>
 801c24c:	4603      	mov	r3, r0
 801c24e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c250:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c252:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c256:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c25a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c25c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c260:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c262:	68fb      	ldr	r3, [r7, #12]
 801c264:	891b      	ldrh	r3, [r3, #8]
 801c266:	3b14      	subs	r3, #20
 801c268:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c26c:	e0e1      	b.n	801c432 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c26e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c270:	00db      	lsls	r3, r3, #3
 801c272:	b29b      	uxth	r3, r3
 801c274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c278:	4293      	cmp	r3, r2
 801c27a:	bf28      	it	cs
 801c27c:	4613      	movcs	r3, r2
 801c27e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c280:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c284:	2114      	movs	r1, #20
 801c286:	200e      	movs	r0, #14
 801c288:	f7f6 fa5a 	bl	8012740 <pbuf_alloc>
 801c28c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c290:	2b00      	cmp	r3, #0
 801c292:	f000 80d5 	beq.w	801c440 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c298:	895b      	ldrh	r3, [r3, #10]
 801c29a:	2b13      	cmp	r3, #19
 801c29c:	d806      	bhi.n	801c2ac <ip4_frag+0xd0>
 801c29e:	4b6c      	ldr	r3, [pc, #432]	@ (801c450 <ip4_frag+0x274>)
 801c2a0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c2a4:	496d      	ldr	r1, [pc, #436]	@ (801c45c <ip4_frag+0x280>)
 801c2a6:	486c      	ldr	r0, [pc, #432]	@ (801c458 <ip4_frag+0x27c>)
 801c2a8:	f001 f8ee 	bl	801d488 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2ae:	685b      	ldr	r3, [r3, #4]
 801c2b0:	2214      	movs	r2, #20
 801c2b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	f001 fa74 	bl	801d7a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2bc:	685b      	ldr	r3, [r3, #4]
 801c2be:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c2c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c2c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c2c6:	e064      	b.n	801c392 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	895a      	ldrh	r2, [r3, #10]
 801c2cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c2ce:	1ad3      	subs	r3, r2, r3
 801c2d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	895b      	ldrh	r3, [r3, #10]
 801c2d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d906      	bls.n	801c2ea <ip4_frag+0x10e>
 801c2dc:	4b5c      	ldr	r3, [pc, #368]	@ (801c450 <ip4_frag+0x274>)
 801c2de:	f240 322d 	movw	r2, #813	@ 0x32d
 801c2e2:	495f      	ldr	r1, [pc, #380]	@ (801c460 <ip4_frag+0x284>)
 801c2e4:	485c      	ldr	r0, [pc, #368]	@ (801c458 <ip4_frag+0x27c>)
 801c2e6:	f001 f8cf 	bl	801d488 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c2ea:	8bfa      	ldrh	r2, [r7, #30]
 801c2ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c2f0:	4293      	cmp	r3, r2
 801c2f2:	bf28      	it	cs
 801c2f4:	4613      	movcs	r3, r2
 801c2f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c2fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d105      	bne.n	801c30e <ip4_frag+0x132>
        poff = 0;
 801c302:	2300      	movs	r3, #0
 801c304:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	60fb      	str	r3, [r7, #12]
        continue;
 801c30c:	e041      	b.n	801c392 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c30e:	f7ff ff0d 	bl	801c12c <ip_frag_alloc_pbuf_custom_ref>
 801c312:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c314:	69bb      	ldr	r3, [r7, #24]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d103      	bne.n	801c322 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c31a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c31c:	f7f6 fcf4 	bl	8012d08 <pbuf_free>
        goto memerr;
 801c320:	e08f      	b.n	801c442 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c322:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c328:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c32a:	4413      	add	r3, r2
 801c32c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c330:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c334:	9201      	str	r2, [sp, #4]
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	4603      	mov	r3, r0
 801c33a:	2241      	movs	r2, #65	@ 0x41
 801c33c:	2000      	movs	r0, #0
 801c33e:	f7f6 fb29 	bl	8012994 <pbuf_alloced_custom>
 801c342:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c344:	697b      	ldr	r3, [r7, #20]
 801c346:	2b00      	cmp	r3, #0
 801c348:	d106      	bne.n	801c358 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c34a:	69b8      	ldr	r0, [r7, #24]
 801c34c:	f7ff fef6 	bl	801c13c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c352:	f7f6 fcd9 	bl	8012d08 <pbuf_free>
        goto memerr;
 801c356:	e074      	b.n	801c442 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c358:	68f8      	ldr	r0, [r7, #12]
 801c35a:	f7f6 fd7b 	bl	8012e54 <pbuf_ref>
      pcr->original = p;
 801c35e:	69bb      	ldr	r3, [r7, #24]
 801c360:	68fa      	ldr	r2, [r7, #12]
 801c362:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c364:	69bb      	ldr	r3, [r7, #24]
 801c366:	4a3f      	ldr	r2, [pc, #252]	@ (801c464 <ip4_frag+0x288>)
 801c368:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c36a:	6979      	ldr	r1, [r7, #20]
 801c36c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c36e:	f7f6 fd99 	bl	8012ea4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c372:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c376:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c37a:	1ad3      	subs	r3, r2, r3
 801c37c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c380:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c384:	2b00      	cmp	r3, #0
 801c386:	d004      	beq.n	801c392 <ip4_frag+0x1b6>
        poff = 0;
 801c388:	2300      	movs	r3, #0
 801c38a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c392:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c396:	2b00      	cmp	r3, #0
 801c398:	d196      	bne.n	801c2c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c39a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c39c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c3a0:	4413      	add	r3, r2
 801c3a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c3a4:	68bb      	ldr	r3, [r7, #8]
 801c3a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3a8:	f1a3 0213 	sub.w	r2, r3, #19
 801c3ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c3b0:	429a      	cmp	r2, r3
 801c3b2:	bfcc      	ite	gt
 801c3b4:	2301      	movgt	r3, #1
 801c3b6:	2300      	movle	r3, #0
 801c3b8:	b2db      	uxtb	r3, r3
 801c3ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c3bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c3c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c3c6:	6a3b      	ldr	r3, [r7, #32]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d002      	beq.n	801c3d2 <ip4_frag+0x1f6>
 801c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d003      	beq.n	801c3da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c3d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c3d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c3d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c3da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c3dc:	4618      	mov	r0, r3
 801c3de:	f7f5 f86b 	bl	80114b8 <lwip_htons>
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	461a      	mov	r2, r3
 801c3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c3ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c3ec:	3314      	adds	r3, #20
 801c3ee:	b29b      	uxth	r3, r3
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	f7f5 f861 	bl	80114b8 <lwip_htons>
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	461a      	mov	r2, r3
 801c3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c400:	2200      	movs	r2, #0
 801c402:	729a      	strb	r2, [r3, #10]
 801c404:	2200      	movs	r2, #0
 801c406:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c408:	68bb      	ldr	r3, [r7, #8]
 801c40a:	695b      	ldr	r3, [r3, #20]
 801c40c:	687a      	ldr	r2, [r7, #4]
 801c40e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c410:	68b8      	ldr	r0, [r7, #8]
 801c412:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c416:	f7f6 fc77 	bl	8012d08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c41a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c41e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c420:	1ad3      	subs	r3, r2, r3
 801c422:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c426:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c42a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c42c:	4413      	add	r3, r2
 801c42e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c432:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c436:	2b00      	cmp	r3, #0
 801c438:	f47f af19 	bne.w	801c26e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c43c:	2300      	movs	r3, #0
 801c43e:	e002      	b.n	801c446 <ip4_frag+0x26a>
      goto memerr;
 801c440:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c442:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c446:	4618      	mov	r0, r3
 801c448:	3748      	adds	r7, #72	@ 0x48
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}
 801c44e:	bf00      	nop
 801c450:	08022f44 	.word	0x08022f44
 801c454:	08023120 	.word	0x08023120
 801c458:	08022f8c 	.word	0x08022f8c
 801c45c:	0802313c 	.word	0x0802313c
 801c460:	0802315c 	.word	0x0802315c
 801c464:	0801c175 	.word	0x0801c175

0801c468 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c468:	b580      	push	{r7, lr}
 801c46a:	b086      	sub	sp, #24
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]
 801c470:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c472:	230e      	movs	r3, #14
 801c474:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	895b      	ldrh	r3, [r3, #10]
 801c47a:	2b0e      	cmp	r3, #14
 801c47c:	d96e      	bls.n	801c55c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	7bdb      	ldrb	r3, [r3, #15]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d106      	bne.n	801c494 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c486:	683b      	ldr	r3, [r7, #0]
 801c488:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c48c:	3301      	adds	r3, #1
 801c48e:	b2da      	uxtb	r2, r3
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	685b      	ldr	r3, [r3, #4]
 801c498:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c49a:	693b      	ldr	r3, [r7, #16]
 801c49c:	7b1a      	ldrb	r2, [r3, #12]
 801c49e:	7b5b      	ldrb	r3, [r3, #13]
 801c4a0:	021b      	lsls	r3, r3, #8
 801c4a2:	4313      	orrs	r3, r2
 801c4a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c4a6:	693b      	ldr	r3, [r7, #16]
 801c4a8:	781b      	ldrb	r3, [r3, #0]
 801c4aa:	f003 0301 	and.w	r3, r3, #1
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d023      	beq.n	801c4fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	781b      	ldrb	r3, [r3, #0]
 801c4b6:	2b01      	cmp	r3, #1
 801c4b8:	d10f      	bne.n	801c4da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c4ba:	693b      	ldr	r3, [r7, #16]
 801c4bc:	785b      	ldrb	r3, [r3, #1]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d11b      	bne.n	801c4fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c4c2:	693b      	ldr	r3, [r7, #16]
 801c4c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c4c6:	2b5e      	cmp	r3, #94	@ 0x5e
 801c4c8:	d117      	bne.n	801c4fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	7b5b      	ldrb	r3, [r3, #13]
 801c4ce:	f043 0310 	orr.w	r3, r3, #16
 801c4d2:	b2da      	uxtb	r2, r3
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	735a      	strb	r2, [r3, #13]
 801c4d8:	e00f      	b.n	801c4fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c4da:	693b      	ldr	r3, [r7, #16]
 801c4dc:	2206      	movs	r2, #6
 801c4de:	4928      	ldr	r1, [pc, #160]	@ (801c580 <ethernet_input+0x118>)
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	f001 f846 	bl	801d572 <memcmp>
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d106      	bne.n	801c4fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	7b5b      	ldrb	r3, [r3, #13]
 801c4f0:	f043 0308 	orr.w	r3, r3, #8
 801c4f4:	b2da      	uxtb	r2, r3
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c4fa:	89fb      	ldrh	r3, [r7, #14]
 801c4fc:	2b08      	cmp	r3, #8
 801c4fe:	d003      	beq.n	801c508 <ethernet_input+0xa0>
 801c500:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c504:	d014      	beq.n	801c530 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c506:	e032      	b.n	801c56e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c508:	683b      	ldr	r3, [r7, #0]
 801c50a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c50e:	f003 0308 	and.w	r3, r3, #8
 801c512:	2b00      	cmp	r3, #0
 801c514:	d024      	beq.n	801c560 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c516:	8afb      	ldrh	r3, [r7, #22]
 801c518:	4619      	mov	r1, r3
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f7f6 fb6e 	bl	8012bfc <pbuf_remove_header>
 801c520:	4603      	mov	r3, r0
 801c522:	2b00      	cmp	r3, #0
 801c524:	d11e      	bne.n	801c564 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c526:	6839      	ldr	r1, [r7, #0]
 801c528:	6878      	ldr	r0, [r7, #4]
 801c52a:	f7fe ff21 	bl	801b370 <ip4_input>
      break;
 801c52e:	e013      	b.n	801c558 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c530:	683b      	ldr	r3, [r7, #0]
 801c532:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c536:	f003 0308 	and.w	r3, r3, #8
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d014      	beq.n	801c568 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c53e:	8afb      	ldrh	r3, [r7, #22]
 801c540:	4619      	mov	r1, r3
 801c542:	6878      	ldr	r0, [r7, #4]
 801c544:	f7f6 fb5a 	bl	8012bfc <pbuf_remove_header>
 801c548:	4603      	mov	r3, r0
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d10e      	bne.n	801c56c <ethernet_input+0x104>
        etharp_input(p, netif);
 801c54e:	6839      	ldr	r1, [r7, #0]
 801c550:	6878      	ldr	r0, [r7, #4]
 801c552:	f7fe f8c1 	bl	801a6d8 <etharp_input>
      break;
 801c556:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c558:	2300      	movs	r3, #0
 801c55a:	e00c      	b.n	801c576 <ethernet_input+0x10e>
    goto free_and_return;
 801c55c:	bf00      	nop
 801c55e:	e006      	b.n	801c56e <ethernet_input+0x106>
        goto free_and_return;
 801c560:	bf00      	nop
 801c562:	e004      	b.n	801c56e <ethernet_input+0x106>
        goto free_and_return;
 801c564:	bf00      	nop
 801c566:	e002      	b.n	801c56e <ethernet_input+0x106>
        goto free_and_return;
 801c568:	bf00      	nop
 801c56a:	e000      	b.n	801c56e <ethernet_input+0x106>
        goto free_and_return;
 801c56c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c56e:	6878      	ldr	r0, [r7, #4]
 801c570:	f7f6 fbca 	bl	8012d08 <pbuf_free>
  return ERR_OK;
 801c574:	2300      	movs	r3, #0
}
 801c576:	4618      	mov	r0, r3
 801c578:	3718      	adds	r7, #24
 801c57a:	46bd      	mov	sp, r7
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	bf00      	nop
 801c580:	08024a20 	.word	0x08024a20

0801c584 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c584:	b580      	push	{r7, lr}
 801c586:	b086      	sub	sp, #24
 801c588:	af00      	add	r7, sp, #0
 801c58a:	60f8      	str	r0, [r7, #12]
 801c58c:	60b9      	str	r1, [r7, #8]
 801c58e:	607a      	str	r2, [r7, #4]
 801c590:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c592:	8c3b      	ldrh	r3, [r7, #32]
 801c594:	4618      	mov	r0, r3
 801c596:	f7f4 ff8f 	bl	80114b8 <lwip_htons>
 801c59a:	4603      	mov	r3, r0
 801c59c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c59e:	210e      	movs	r1, #14
 801c5a0:	68b8      	ldr	r0, [r7, #8]
 801c5a2:	f7f6 fb1b 	bl	8012bdc <pbuf_add_header>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d125      	bne.n	801c5f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c5ac:	68bb      	ldr	r3, [r7, #8]
 801c5ae:	685b      	ldr	r3, [r3, #4]
 801c5b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c5b2:	693b      	ldr	r3, [r7, #16]
 801c5b4:	8afa      	ldrh	r2, [r7, #22]
 801c5b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c5b8:	693b      	ldr	r3, [r7, #16]
 801c5ba:	2206      	movs	r2, #6
 801c5bc:	6839      	ldr	r1, [r7, #0]
 801c5be:	4618      	mov	r0, r3
 801c5c0:	f001 f8ef 	bl	801d7a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c5c4:	693b      	ldr	r3, [r7, #16]
 801c5c6:	3306      	adds	r3, #6
 801c5c8:	2206      	movs	r2, #6
 801c5ca:	6879      	ldr	r1, [r7, #4]
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	f001 f8e8 	bl	801d7a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c5d8:	2b06      	cmp	r3, #6
 801c5da:	d006      	beq.n	801c5ea <ethernet_output+0x66>
 801c5dc:	4b0a      	ldr	r3, [pc, #40]	@ (801c608 <ethernet_output+0x84>)
 801c5de:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c5e2:	490a      	ldr	r1, [pc, #40]	@ (801c60c <ethernet_output+0x88>)
 801c5e4:	480a      	ldr	r0, [pc, #40]	@ (801c610 <ethernet_output+0x8c>)
 801c5e6:	f000 ff4f 	bl	801d488 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	699b      	ldr	r3, [r3, #24]
 801c5ee:	68b9      	ldr	r1, [r7, #8]
 801c5f0:	68f8      	ldr	r0, [r7, #12]
 801c5f2:	4798      	blx	r3
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	e002      	b.n	801c5fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c5f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c5fa:	f06f 0301 	mvn.w	r3, #1
}
 801c5fe:	4618      	mov	r0, r3
 801c600:	3718      	adds	r7, #24
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}
 801c606:	bf00      	nop
 801c608:	0802316c 	.word	0x0802316c
 801c60c:	080231a4 	.word	0x080231a4
 801c610:	080231d8 	.word	0x080231d8

0801c614 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b086      	sub	sp, #24
 801c618:	af00      	add	r7, sp, #0
 801c61a:	6078      	str	r0, [r7, #4]
 801c61c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c61e:	683b      	ldr	r3, [r7, #0]
 801c620:	60bb      	str	r3, [r7, #8]
 801c622:	2304      	movs	r3, #4
 801c624:	60fb      	str	r3, [r7, #12]
 801c626:	2300      	movs	r3, #0
 801c628:	613b      	str	r3, [r7, #16]
 801c62a:	2300      	movs	r3, #0
 801c62c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c62e:	f107 0308 	add.w	r3, r7, #8
 801c632:	2100      	movs	r1, #0
 801c634:	4618      	mov	r0, r3
 801c636:	f7ee febc 	bl	800b3b2 <osMessageCreate>
 801c63a:	4602      	mov	r2, r0
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d102      	bne.n	801c64e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c648:	f04f 33ff 	mov.w	r3, #4294967295
 801c64c:	e000      	b.n	801c650 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c64e:	2300      	movs	r3, #0
}
 801c650:	4618      	mov	r0, r3
 801c652:	3718      	adds	r7, #24
 801c654:	46bd      	mov	sp, r7
 801c656:	bd80      	pop	{r7, pc}

0801c658 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c658:	b580      	push	{r7, lr}
 801c65a:	b082      	sub	sp, #8
 801c65c:	af00      	add	r7, sp, #0
 801c65e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	4618      	mov	r0, r3
 801c666:	f7ee ff81 	bl	800b56c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	4618      	mov	r0, r3
 801c670:	f7ee ff92 	bl	800b598 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c674:	bf00      	nop
 801c676:	3708      	adds	r7, #8
 801c678:	46bd      	mov	sp, r7
 801c67a:	bd80      	pop	{r7, pc}

0801c67c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c67c:	b580      	push	{r7, lr}
 801c67e:	b084      	sub	sp, #16
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
 801c684:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	6839      	ldr	r1, [r7, #0]
 801c68c:	2200      	movs	r2, #0
 801c68e:	4618      	mov	r0, r3
 801c690:	f7ee feb8 	bl	800b404 <osMessagePut>
 801c694:	4603      	mov	r3, r0
 801c696:	2b00      	cmp	r3, #0
 801c698:	d102      	bne.n	801c6a0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c69a:	2300      	movs	r3, #0
 801c69c:	73fb      	strb	r3, [r7, #15]
 801c69e:	e001      	b.n	801c6a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c6a0:	23ff      	movs	r3, #255	@ 0xff
 801c6a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	3710      	adds	r7, #16
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}

0801c6b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b08c      	sub	sp, #48	@ 0x30
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	61f8      	str	r0, [r7, #28]
 801c6b8:	61b9      	str	r1, [r7, #24]
 801c6ba:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c6bc:	f7ee fca4 	bl	800b008 <osKernelSysTick>
 801c6c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d017      	beq.n	801c6f8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c6c8:	69fb      	ldr	r3, [r7, #28]
 801c6ca:	6819      	ldr	r1, [r3, #0]
 801c6cc:	f107 0320 	add.w	r3, r7, #32
 801c6d0:	697a      	ldr	r2, [r7, #20]
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f7ee fed6 	bl	800b484 <osMessageGet>

    if(event.status == osEventMessage)
 801c6d8:	6a3b      	ldr	r3, [r7, #32]
 801c6da:	2b10      	cmp	r3, #16
 801c6dc:	d109      	bne.n	801c6f2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6e0:	461a      	mov	r2, r3
 801c6e2:	69bb      	ldr	r3, [r7, #24]
 801c6e4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c6e6:	f7ee fc8f 	bl	800b008 <osKernelSysTick>
 801c6ea:	4602      	mov	r2, r0
 801c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ee:	1ad3      	subs	r3, r2, r3
 801c6f0:	e019      	b.n	801c726 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c6f2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f6:	e016      	b.n	801c726 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c6f8:	69fb      	ldr	r3, [r7, #28]
 801c6fa:	6819      	ldr	r1, [r3, #0]
 801c6fc:	463b      	mov	r3, r7
 801c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 801c702:	4618      	mov	r0, r3
 801c704:	f7ee febe 	bl	800b484 <osMessageGet>
 801c708:	f107 0320 	add.w	r3, r7, #32
 801c70c:	463a      	mov	r2, r7
 801c70e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c710:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c716:	461a      	mov	r2, r3
 801c718:	69bb      	ldr	r3, [r7, #24]
 801c71a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c71c:	f7ee fc74 	bl	800b008 <osKernelSysTick>
 801c720:	4602      	mov	r2, r0
 801c722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c724:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c726:	4618      	mov	r0, r3
 801c728:	3730      	adds	r7, #48	@ 0x30
 801c72a:	46bd      	mov	sp, r7
 801c72c:	bd80      	pop	{r7, pc}

0801c72e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c72e:	b580      	push	{r7, lr}
 801c730:	b086      	sub	sp, #24
 801c732:	af00      	add	r7, sp, #0
 801c734:	6078      	str	r0, [r7, #4]
 801c736:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	6819      	ldr	r1, [r3, #0]
 801c73c:	f107 030c 	add.w	r3, r7, #12
 801c740:	2200      	movs	r2, #0
 801c742:	4618      	mov	r0, r3
 801c744:	f7ee fe9e 	bl	800b484 <osMessageGet>

  if(event.status == osEventMessage)
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	2b10      	cmp	r3, #16
 801c74c:	d105      	bne.n	801c75a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c74e:	693b      	ldr	r3, [r7, #16]
 801c750:	461a      	mov	r2, r3
 801c752:	683b      	ldr	r3, [r7, #0]
 801c754:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c756:	2300      	movs	r3, #0
 801c758:	e001      	b.n	801c75e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c75a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c75e:	4618      	mov	r0, r3
 801c760:	3718      	adds	r7, #24
 801c762:	46bd      	mov	sp, r7
 801c764:	bd80      	pop	{r7, pc}

0801c766 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c766:	b480      	push	{r7}
 801c768:	b083      	sub	sp, #12
 801c76a:	af00      	add	r7, sp, #0
 801c76c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d101      	bne.n	801c77a <sys_mbox_valid+0x14>
    return 0;
 801c776:	2300      	movs	r3, #0
 801c778:	e000      	b.n	801c77c <sys_mbox_valid+0x16>
  else
    return 1;
 801c77a:	2301      	movs	r3, #1
}
 801c77c:	4618      	mov	r0, r3
 801c77e:	370c      	adds	r7, #12
 801c780:	46bd      	mov	sp, r7
 801c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c786:	4770      	bx	lr

0801c788 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c788:	b480      	push	{r7}
 801c78a:	b083      	sub	sp, #12
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	2200      	movs	r2, #0
 801c794:	601a      	str	r2, [r3, #0]
}
 801c796:	bf00      	nop
 801c798:	370c      	adds	r7, #12
 801c79a:	46bd      	mov	sp, r7
 801c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7a0:	4770      	bx	lr

0801c7a2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c7a2:	b580      	push	{r7, lr}
 801c7a4:	b084      	sub	sp, #16
 801c7a6:	af00      	add	r7, sp, #0
 801c7a8:	6078      	str	r0, [r7, #4]
 801c7aa:	460b      	mov	r3, r1
 801c7ac:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	60bb      	str	r3, [r7, #8]
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c7b6:	f107 0308 	add.w	r3, r7, #8
 801c7ba:	2101      	movs	r1, #1
 801c7bc:	4618      	mov	r0, r3
 801c7be:	f7ee fd2f 	bl	800b220 <osSemaphoreCreate>
 801c7c2:	4602      	mov	r2, r0
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d102      	bne.n	801c7d6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c7d0:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d4:	e009      	b.n	801c7ea <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c7d6:	78fb      	ldrb	r3, [r7, #3]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d105      	bne.n	801c7e8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	2100      	movs	r1, #0
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f7ee fd4e 	bl	800b284 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c7e8:	2300      	movs	r3, #0
}
 801c7ea:	4618      	mov	r0, r3
 801c7ec:	3710      	adds	r7, #16
 801c7ee:	46bd      	mov	sp, r7
 801c7f0:	bd80      	pop	{r7, pc}

0801c7f2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c7f2:	b580      	push	{r7, lr}
 801c7f4:	b084      	sub	sp, #16
 801c7f6:	af00      	add	r7, sp, #0
 801c7f8:	6078      	str	r0, [r7, #4]
 801c7fa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c7fc:	f7ee fc04 	bl	800b008 <osKernelSysTick>
 801c800:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c802:	683b      	ldr	r3, [r7, #0]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d011      	beq.n	801c82c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	6839      	ldr	r1, [r7, #0]
 801c80e:	4618      	mov	r0, r3
 801c810:	f7ee fd38 	bl	800b284 <osSemaphoreWait>
 801c814:	4603      	mov	r3, r0
 801c816:	2b00      	cmp	r3, #0
 801c818:	d105      	bne.n	801c826 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c81a:	f7ee fbf5 	bl	800b008 <osKernelSysTick>
 801c81e:	4602      	mov	r2, r0
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	1ad3      	subs	r3, r2, r3
 801c824:	e012      	b.n	801c84c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c826:	f04f 33ff 	mov.w	r3, #4294967295
 801c82a:	e00f      	b.n	801c84c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c82c:	bf00      	nop
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	f04f 31ff 	mov.w	r1, #4294967295
 801c836:	4618      	mov	r0, r3
 801c838:	f7ee fd24 	bl	800b284 <osSemaphoreWait>
 801c83c:	4603      	mov	r3, r0
 801c83e:	2b00      	cmp	r3, #0
 801c840:	d1f5      	bne.n	801c82e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c842:	f7ee fbe1 	bl	800b008 <osKernelSysTick>
 801c846:	4602      	mov	r2, r0
 801c848:	68fb      	ldr	r3, [r7, #12]
 801c84a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c84c:	4618      	mov	r0, r3
 801c84e:	3710      	adds	r7, #16
 801c850:	46bd      	mov	sp, r7
 801c852:	bd80      	pop	{r7, pc}

0801c854 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c854:	b580      	push	{r7, lr}
 801c856:	b082      	sub	sp, #8
 801c858:	af00      	add	r7, sp, #0
 801c85a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	4618      	mov	r0, r3
 801c862:	f7ee fd5d 	bl	800b320 <osSemaphoreRelease>
}
 801c866:	bf00      	nop
 801c868:	3708      	adds	r7, #8
 801c86a:	46bd      	mov	sp, r7
 801c86c:	bd80      	pop	{r7, pc}

0801c86e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c86e:	b580      	push	{r7, lr}
 801c870:	b082      	sub	sp, #8
 801c872:	af00      	add	r7, sp, #0
 801c874:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	4618      	mov	r0, r3
 801c87c:	f7ee fd86 	bl	800b38c <osSemaphoreDelete>
}
 801c880:	bf00      	nop
 801c882:	3708      	adds	r7, #8
 801c884:	46bd      	mov	sp, r7
 801c886:	bd80      	pop	{r7, pc}

0801c888 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c888:	b480      	push	{r7}
 801c88a:	b083      	sub	sp, #12
 801c88c:	af00      	add	r7, sp, #0
 801c88e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	681b      	ldr	r3, [r3, #0]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d101      	bne.n	801c89c <sys_sem_valid+0x14>
    return 0;
 801c898:	2300      	movs	r3, #0
 801c89a:	e000      	b.n	801c89e <sys_sem_valid+0x16>
  else
    return 1;
 801c89c:	2301      	movs	r3, #1
}
 801c89e:	4618      	mov	r0, r3
 801c8a0:	370c      	adds	r7, #12
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a8:	4770      	bx	lr

0801c8aa <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801c8aa:	b480      	push	{r7}
 801c8ac:	b083      	sub	sp, #12
 801c8ae:	af00      	add	r7, sp, #0
 801c8b0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	601a      	str	r2, [r3, #0]
}
 801c8b8:	bf00      	nop
 801c8ba:	370c      	adds	r7, #12
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c2:	4770      	bx	lr

0801c8c4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c8c8:	4803      	ldr	r0, [pc, #12]	@ (801c8d8 <sys_init+0x14>)
 801c8ca:	f7ee fc0d 	bl	800b0e8 <osMutexCreate>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	4a02      	ldr	r2, [pc, #8]	@ (801c8dc <sys_init+0x18>)
 801c8d2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c8d4:	bf00      	nop
 801c8d6:	bd80      	pop	{r7, pc}
 801c8d8:	08024a30 	.word	0x08024a30
 801c8dc:	2000f4f0 	.word	0x2000f4f0

0801c8e0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b084      	sub	sp, #16
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	60bb      	str	r3, [r7, #8]
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c8f0:	f107 0308 	add.w	r3, r7, #8
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	f7ee fbf7 	bl	800b0e8 <osMutexCreate>
 801c8fa:	4602      	mov	r2, r0
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	2b00      	cmp	r3, #0
 801c906:	d102      	bne.n	801c90e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c908:	f04f 33ff 	mov.w	r3, #4294967295
 801c90c:	e000      	b.n	801c910 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c90e:	2300      	movs	r3, #0
}
 801c910:	4618      	mov	r0, r3
 801c912:	3710      	adds	r7, #16
 801c914:	46bd      	mov	sp, r7
 801c916:	bd80      	pop	{r7, pc}

0801c918 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	b082      	sub	sp, #8
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	f04f 31ff 	mov.w	r1, #4294967295
 801c928:	4618      	mov	r0, r3
 801c92a:	f7ee fbf5 	bl	800b118 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c92e:	bf00      	nop
 801c930:	3708      	adds	r7, #8
 801c932:	46bd      	mov	sp, r7
 801c934:	bd80      	pop	{r7, pc}

0801c936 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c936:	b580      	push	{r7, lr}
 801c938:	b082      	sub	sp, #8
 801c93a:	af00      	add	r7, sp, #0
 801c93c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	4618      	mov	r0, r3
 801c944:	f7ee fc36 	bl	800b1b4 <osMutexRelease>
}
 801c948:	bf00      	nop
 801c94a:	3708      	adds	r7, #8
 801c94c:	46bd      	mov	sp, r7
 801c94e:	bd80      	pop	{r7, pc}

0801c950 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b08c      	sub	sp, #48	@ 0x30
 801c954:	af00      	add	r7, sp, #0
 801c956:	60f8      	str	r0, [r7, #12]
 801c958:	60b9      	str	r1, [r7, #8]
 801c95a:	607a      	str	r2, [r7, #4]
 801c95c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c95e:	f107 0314 	add.w	r3, r7, #20
 801c962:	2200      	movs	r2, #0
 801c964:	601a      	str	r2, [r3, #0]
 801c966:	605a      	str	r2, [r3, #4]
 801c968:	609a      	str	r2, [r3, #8]
 801c96a:	60da      	str	r2, [r3, #12]
 801c96c:	611a      	str	r2, [r3, #16]
 801c96e:	615a      	str	r2, [r3, #20]
 801c970:	619a      	str	r2, [r3, #24]
 801c972:	68fb      	ldr	r3, [r7, #12]
 801c974:	617b      	str	r3, [r7, #20]
 801c976:	68bb      	ldr	r3, [r7, #8]
 801c978:	61bb      	str	r3, [r7, #24]
 801c97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c97c:	b21b      	sxth	r3, r3
 801c97e:	83bb      	strh	r3, [r7, #28]
 801c980:	683b      	ldr	r3, [r7, #0]
 801c982:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c984:	f107 0314 	add.w	r3, r7, #20
 801c988:	6879      	ldr	r1, [r7, #4]
 801c98a:	4618      	mov	r0, r3
 801c98c:	f7ee fb4c 	bl	800b028 <osThreadCreate>
 801c990:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c992:	4618      	mov	r0, r3
 801c994:	3730      	adds	r7, #48	@ 0x30
 801c996:	46bd      	mov	sp, r7
 801c998:	bd80      	pop	{r7, pc}
	...

0801c99c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c99c:	b580      	push	{r7, lr}
 801c99e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c9a0:	4b04      	ldr	r3, [pc, #16]	@ (801c9b4 <sys_arch_protect+0x18>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f04f 31ff 	mov.w	r1, #4294967295
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	f7ee fbb5 	bl	800b118 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c9ae:	2301      	movs	r3, #1
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	bd80      	pop	{r7, pc}
 801c9b4:	2000f4f0 	.word	0x2000f4f0

0801c9b8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c9c0:	4b04      	ldr	r3, [pc, #16]	@ (801c9d4 <sys_arch_unprotect+0x1c>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f7ee fbf5 	bl	800b1b4 <osMutexRelease>
}
 801c9ca:	bf00      	nop
 801c9cc:	3708      	adds	r7, #8
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	bd80      	pop	{r7, pc}
 801c9d2:	bf00      	nop
 801c9d4:	2000f4f0 	.word	0x2000f4f0

0801c9d8 <rand>:
 801c9d8:	4b16      	ldr	r3, [pc, #88]	@ (801ca34 <rand+0x5c>)
 801c9da:	b510      	push	{r4, lr}
 801c9dc:	681c      	ldr	r4, [r3, #0]
 801c9de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c9e0:	b9b3      	cbnz	r3, 801ca10 <rand+0x38>
 801c9e2:	2018      	movs	r0, #24
 801c9e4:	f001 fda2 	bl	801e52c <malloc>
 801c9e8:	4602      	mov	r2, r0
 801c9ea:	6320      	str	r0, [r4, #48]	@ 0x30
 801c9ec:	b920      	cbnz	r0, 801c9f8 <rand+0x20>
 801c9ee:	4b12      	ldr	r3, [pc, #72]	@ (801ca38 <rand+0x60>)
 801c9f0:	4812      	ldr	r0, [pc, #72]	@ (801ca3c <rand+0x64>)
 801c9f2:	2152      	movs	r1, #82	@ 0x52
 801c9f4:	f000 fee4 	bl	801d7c0 <__assert_func>
 801c9f8:	4911      	ldr	r1, [pc, #68]	@ (801ca40 <rand+0x68>)
 801c9fa:	4b12      	ldr	r3, [pc, #72]	@ (801ca44 <rand+0x6c>)
 801c9fc:	e9c0 1300 	strd	r1, r3, [r0]
 801ca00:	4b11      	ldr	r3, [pc, #68]	@ (801ca48 <rand+0x70>)
 801ca02:	6083      	str	r3, [r0, #8]
 801ca04:	230b      	movs	r3, #11
 801ca06:	8183      	strh	r3, [r0, #12]
 801ca08:	2100      	movs	r1, #0
 801ca0a:	2001      	movs	r0, #1
 801ca0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801ca10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ca12:	480e      	ldr	r0, [pc, #56]	@ (801ca4c <rand+0x74>)
 801ca14:	690b      	ldr	r3, [r1, #16]
 801ca16:	694c      	ldr	r4, [r1, #20]
 801ca18:	4a0d      	ldr	r2, [pc, #52]	@ (801ca50 <rand+0x78>)
 801ca1a:	4358      	muls	r0, r3
 801ca1c:	fb02 0004 	mla	r0, r2, r4, r0
 801ca20:	fba3 3202 	umull	r3, r2, r3, r2
 801ca24:	3301      	adds	r3, #1
 801ca26:	eb40 0002 	adc.w	r0, r0, r2
 801ca2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ca2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ca32:	bd10      	pop	{r4, pc}
 801ca34:	20000094 	.word	0x20000094
 801ca38:	08024a38 	.word	0x08024a38
 801ca3c:	08024a4f 	.word	0x08024a4f
 801ca40:	abcd330e 	.word	0xabcd330e
 801ca44:	e66d1234 	.word	0xe66d1234
 801ca48:	0005deec 	.word	0x0005deec
 801ca4c:	5851f42d 	.word	0x5851f42d
 801ca50:	4c957f2d 	.word	0x4c957f2d

0801ca54 <__cvt>:
 801ca54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ca58:	ec57 6b10 	vmov	r6, r7, d0
 801ca5c:	2f00      	cmp	r7, #0
 801ca5e:	460c      	mov	r4, r1
 801ca60:	4619      	mov	r1, r3
 801ca62:	463b      	mov	r3, r7
 801ca64:	bfbb      	ittet	lt
 801ca66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801ca6a:	461f      	movlt	r7, r3
 801ca6c:	2300      	movge	r3, #0
 801ca6e:	232d      	movlt	r3, #45	@ 0x2d
 801ca70:	700b      	strb	r3, [r1, #0]
 801ca72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ca74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801ca78:	4691      	mov	r9, r2
 801ca7a:	f023 0820 	bic.w	r8, r3, #32
 801ca7e:	bfbc      	itt	lt
 801ca80:	4632      	movlt	r2, r6
 801ca82:	4616      	movlt	r6, r2
 801ca84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801ca88:	d005      	beq.n	801ca96 <__cvt+0x42>
 801ca8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801ca8e:	d100      	bne.n	801ca92 <__cvt+0x3e>
 801ca90:	3401      	adds	r4, #1
 801ca92:	2102      	movs	r1, #2
 801ca94:	e000      	b.n	801ca98 <__cvt+0x44>
 801ca96:	2103      	movs	r1, #3
 801ca98:	ab03      	add	r3, sp, #12
 801ca9a:	9301      	str	r3, [sp, #4]
 801ca9c:	ab02      	add	r3, sp, #8
 801ca9e:	9300      	str	r3, [sp, #0]
 801caa0:	ec47 6b10 	vmov	d0, r6, r7
 801caa4:	4653      	mov	r3, sl
 801caa6:	4622      	mov	r2, r4
 801caa8:	f000 ff32 	bl	801d910 <_dtoa_r>
 801caac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cab0:	4605      	mov	r5, r0
 801cab2:	d119      	bne.n	801cae8 <__cvt+0x94>
 801cab4:	f019 0f01 	tst.w	r9, #1
 801cab8:	d00e      	beq.n	801cad8 <__cvt+0x84>
 801caba:	eb00 0904 	add.w	r9, r0, r4
 801cabe:	2200      	movs	r2, #0
 801cac0:	2300      	movs	r3, #0
 801cac2:	4630      	mov	r0, r6
 801cac4:	4639      	mov	r1, r7
 801cac6:	f7e4 f82f 	bl	8000b28 <__aeabi_dcmpeq>
 801caca:	b108      	cbz	r0, 801cad0 <__cvt+0x7c>
 801cacc:	f8cd 900c 	str.w	r9, [sp, #12]
 801cad0:	2230      	movs	r2, #48	@ 0x30
 801cad2:	9b03      	ldr	r3, [sp, #12]
 801cad4:	454b      	cmp	r3, r9
 801cad6:	d31e      	bcc.n	801cb16 <__cvt+0xc2>
 801cad8:	9b03      	ldr	r3, [sp, #12]
 801cada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cadc:	1b5b      	subs	r3, r3, r5
 801cade:	4628      	mov	r0, r5
 801cae0:	6013      	str	r3, [r2, #0]
 801cae2:	b004      	add	sp, #16
 801cae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cae8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801caec:	eb00 0904 	add.w	r9, r0, r4
 801caf0:	d1e5      	bne.n	801cabe <__cvt+0x6a>
 801caf2:	7803      	ldrb	r3, [r0, #0]
 801caf4:	2b30      	cmp	r3, #48	@ 0x30
 801caf6:	d10a      	bne.n	801cb0e <__cvt+0xba>
 801caf8:	2200      	movs	r2, #0
 801cafa:	2300      	movs	r3, #0
 801cafc:	4630      	mov	r0, r6
 801cafe:	4639      	mov	r1, r7
 801cb00:	f7e4 f812 	bl	8000b28 <__aeabi_dcmpeq>
 801cb04:	b918      	cbnz	r0, 801cb0e <__cvt+0xba>
 801cb06:	f1c4 0401 	rsb	r4, r4, #1
 801cb0a:	f8ca 4000 	str.w	r4, [sl]
 801cb0e:	f8da 3000 	ldr.w	r3, [sl]
 801cb12:	4499      	add	r9, r3
 801cb14:	e7d3      	b.n	801cabe <__cvt+0x6a>
 801cb16:	1c59      	adds	r1, r3, #1
 801cb18:	9103      	str	r1, [sp, #12]
 801cb1a:	701a      	strb	r2, [r3, #0]
 801cb1c:	e7d9      	b.n	801cad2 <__cvt+0x7e>

0801cb1e <__exponent>:
 801cb1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb20:	2900      	cmp	r1, #0
 801cb22:	bfba      	itte	lt
 801cb24:	4249      	neglt	r1, r1
 801cb26:	232d      	movlt	r3, #45	@ 0x2d
 801cb28:	232b      	movge	r3, #43	@ 0x2b
 801cb2a:	2909      	cmp	r1, #9
 801cb2c:	7002      	strb	r2, [r0, #0]
 801cb2e:	7043      	strb	r3, [r0, #1]
 801cb30:	dd29      	ble.n	801cb86 <__exponent+0x68>
 801cb32:	f10d 0307 	add.w	r3, sp, #7
 801cb36:	461d      	mov	r5, r3
 801cb38:	270a      	movs	r7, #10
 801cb3a:	461a      	mov	r2, r3
 801cb3c:	fbb1 f6f7 	udiv	r6, r1, r7
 801cb40:	fb07 1416 	mls	r4, r7, r6, r1
 801cb44:	3430      	adds	r4, #48	@ 0x30
 801cb46:	f802 4c01 	strb.w	r4, [r2, #-1]
 801cb4a:	460c      	mov	r4, r1
 801cb4c:	2c63      	cmp	r4, #99	@ 0x63
 801cb4e:	f103 33ff 	add.w	r3, r3, #4294967295
 801cb52:	4631      	mov	r1, r6
 801cb54:	dcf1      	bgt.n	801cb3a <__exponent+0x1c>
 801cb56:	3130      	adds	r1, #48	@ 0x30
 801cb58:	1e94      	subs	r4, r2, #2
 801cb5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801cb5e:	1c41      	adds	r1, r0, #1
 801cb60:	4623      	mov	r3, r4
 801cb62:	42ab      	cmp	r3, r5
 801cb64:	d30a      	bcc.n	801cb7c <__exponent+0x5e>
 801cb66:	f10d 0309 	add.w	r3, sp, #9
 801cb6a:	1a9b      	subs	r3, r3, r2
 801cb6c:	42ac      	cmp	r4, r5
 801cb6e:	bf88      	it	hi
 801cb70:	2300      	movhi	r3, #0
 801cb72:	3302      	adds	r3, #2
 801cb74:	4403      	add	r3, r0
 801cb76:	1a18      	subs	r0, r3, r0
 801cb78:	b003      	add	sp, #12
 801cb7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801cb80:	f801 6f01 	strb.w	r6, [r1, #1]!
 801cb84:	e7ed      	b.n	801cb62 <__exponent+0x44>
 801cb86:	2330      	movs	r3, #48	@ 0x30
 801cb88:	3130      	adds	r1, #48	@ 0x30
 801cb8a:	7083      	strb	r3, [r0, #2]
 801cb8c:	70c1      	strb	r1, [r0, #3]
 801cb8e:	1d03      	adds	r3, r0, #4
 801cb90:	e7f1      	b.n	801cb76 <__exponent+0x58>
	...

0801cb94 <_printf_float>:
 801cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb98:	b08d      	sub	sp, #52	@ 0x34
 801cb9a:	460c      	mov	r4, r1
 801cb9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cba0:	4616      	mov	r6, r2
 801cba2:	461f      	mov	r7, r3
 801cba4:	4605      	mov	r5, r0
 801cba6:	f000 fd35 	bl	801d614 <_localeconv_r>
 801cbaa:	6803      	ldr	r3, [r0, #0]
 801cbac:	9304      	str	r3, [sp, #16]
 801cbae:	4618      	mov	r0, r3
 801cbb0:	f7e3 fb8e 	bl	80002d0 <strlen>
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	930a      	str	r3, [sp, #40]	@ 0x28
 801cbb8:	f8d8 3000 	ldr.w	r3, [r8]
 801cbbc:	9005      	str	r0, [sp, #20]
 801cbbe:	3307      	adds	r3, #7
 801cbc0:	f023 0307 	bic.w	r3, r3, #7
 801cbc4:	f103 0208 	add.w	r2, r3, #8
 801cbc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cbcc:	f8d4 b000 	ldr.w	fp, [r4]
 801cbd0:	f8c8 2000 	str.w	r2, [r8]
 801cbd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cbd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cbdc:	9307      	str	r3, [sp, #28]
 801cbde:	f8cd 8018 	str.w	r8, [sp, #24]
 801cbe2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cbe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cbea:	4b9c      	ldr	r3, [pc, #624]	@ (801ce5c <_printf_float+0x2c8>)
 801cbec:	f04f 32ff 	mov.w	r2, #4294967295
 801cbf0:	f7e3 ffcc 	bl	8000b8c <__aeabi_dcmpun>
 801cbf4:	bb70      	cbnz	r0, 801cc54 <_printf_float+0xc0>
 801cbf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cbfa:	4b98      	ldr	r3, [pc, #608]	@ (801ce5c <_printf_float+0x2c8>)
 801cbfc:	f04f 32ff 	mov.w	r2, #4294967295
 801cc00:	f7e3 ffa6 	bl	8000b50 <__aeabi_dcmple>
 801cc04:	bb30      	cbnz	r0, 801cc54 <_printf_float+0xc0>
 801cc06:	2200      	movs	r2, #0
 801cc08:	2300      	movs	r3, #0
 801cc0a:	4640      	mov	r0, r8
 801cc0c:	4649      	mov	r1, r9
 801cc0e:	f7e3 ff95 	bl	8000b3c <__aeabi_dcmplt>
 801cc12:	b110      	cbz	r0, 801cc1a <_printf_float+0x86>
 801cc14:	232d      	movs	r3, #45	@ 0x2d
 801cc16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cc1a:	4a91      	ldr	r2, [pc, #580]	@ (801ce60 <_printf_float+0x2cc>)
 801cc1c:	4b91      	ldr	r3, [pc, #580]	@ (801ce64 <_printf_float+0x2d0>)
 801cc1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cc22:	bf94      	ite	ls
 801cc24:	4690      	movls	r8, r2
 801cc26:	4698      	movhi	r8, r3
 801cc28:	2303      	movs	r3, #3
 801cc2a:	6123      	str	r3, [r4, #16]
 801cc2c:	f02b 0304 	bic.w	r3, fp, #4
 801cc30:	6023      	str	r3, [r4, #0]
 801cc32:	f04f 0900 	mov.w	r9, #0
 801cc36:	9700      	str	r7, [sp, #0]
 801cc38:	4633      	mov	r3, r6
 801cc3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cc3c:	4621      	mov	r1, r4
 801cc3e:	4628      	mov	r0, r5
 801cc40:	f000 f9d2 	bl	801cfe8 <_printf_common>
 801cc44:	3001      	adds	r0, #1
 801cc46:	f040 808d 	bne.w	801cd64 <_printf_float+0x1d0>
 801cc4a:	f04f 30ff 	mov.w	r0, #4294967295
 801cc4e:	b00d      	add	sp, #52	@ 0x34
 801cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc54:	4642      	mov	r2, r8
 801cc56:	464b      	mov	r3, r9
 801cc58:	4640      	mov	r0, r8
 801cc5a:	4649      	mov	r1, r9
 801cc5c:	f7e3 ff96 	bl	8000b8c <__aeabi_dcmpun>
 801cc60:	b140      	cbz	r0, 801cc74 <_printf_float+0xe0>
 801cc62:	464b      	mov	r3, r9
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	bfbc      	itt	lt
 801cc68:	232d      	movlt	r3, #45	@ 0x2d
 801cc6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cc6e:	4a7e      	ldr	r2, [pc, #504]	@ (801ce68 <_printf_float+0x2d4>)
 801cc70:	4b7e      	ldr	r3, [pc, #504]	@ (801ce6c <_printf_float+0x2d8>)
 801cc72:	e7d4      	b.n	801cc1e <_printf_float+0x8a>
 801cc74:	6863      	ldr	r3, [r4, #4]
 801cc76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801cc7a:	9206      	str	r2, [sp, #24]
 801cc7c:	1c5a      	adds	r2, r3, #1
 801cc7e:	d13b      	bne.n	801ccf8 <_printf_float+0x164>
 801cc80:	2306      	movs	r3, #6
 801cc82:	6063      	str	r3, [r4, #4]
 801cc84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801cc88:	2300      	movs	r3, #0
 801cc8a:	6022      	str	r2, [r4, #0]
 801cc8c:	9303      	str	r3, [sp, #12]
 801cc8e:	ab0a      	add	r3, sp, #40	@ 0x28
 801cc90:	e9cd a301 	strd	sl, r3, [sp, #4]
 801cc94:	ab09      	add	r3, sp, #36	@ 0x24
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	6861      	ldr	r1, [r4, #4]
 801cc9a:	ec49 8b10 	vmov	d0, r8, r9
 801cc9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cca2:	4628      	mov	r0, r5
 801cca4:	f7ff fed6 	bl	801ca54 <__cvt>
 801cca8:	9b06      	ldr	r3, [sp, #24]
 801ccaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ccac:	2b47      	cmp	r3, #71	@ 0x47
 801ccae:	4680      	mov	r8, r0
 801ccb0:	d129      	bne.n	801cd06 <_printf_float+0x172>
 801ccb2:	1cc8      	adds	r0, r1, #3
 801ccb4:	db02      	blt.n	801ccbc <_printf_float+0x128>
 801ccb6:	6863      	ldr	r3, [r4, #4]
 801ccb8:	4299      	cmp	r1, r3
 801ccba:	dd41      	ble.n	801cd40 <_printf_float+0x1ac>
 801ccbc:	f1aa 0a02 	sub.w	sl, sl, #2
 801ccc0:	fa5f fa8a 	uxtb.w	sl, sl
 801ccc4:	3901      	subs	r1, #1
 801ccc6:	4652      	mov	r2, sl
 801ccc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cccc:	9109      	str	r1, [sp, #36]	@ 0x24
 801ccce:	f7ff ff26 	bl	801cb1e <__exponent>
 801ccd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ccd4:	1813      	adds	r3, r2, r0
 801ccd6:	2a01      	cmp	r2, #1
 801ccd8:	4681      	mov	r9, r0
 801ccda:	6123      	str	r3, [r4, #16]
 801ccdc:	dc02      	bgt.n	801cce4 <_printf_float+0x150>
 801ccde:	6822      	ldr	r2, [r4, #0]
 801cce0:	07d2      	lsls	r2, r2, #31
 801cce2:	d501      	bpl.n	801cce8 <_printf_float+0x154>
 801cce4:	3301      	adds	r3, #1
 801cce6:	6123      	str	r3, [r4, #16]
 801cce8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d0a2      	beq.n	801cc36 <_printf_float+0xa2>
 801ccf0:	232d      	movs	r3, #45	@ 0x2d
 801ccf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ccf6:	e79e      	b.n	801cc36 <_printf_float+0xa2>
 801ccf8:	9a06      	ldr	r2, [sp, #24]
 801ccfa:	2a47      	cmp	r2, #71	@ 0x47
 801ccfc:	d1c2      	bne.n	801cc84 <_printf_float+0xf0>
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d1c0      	bne.n	801cc84 <_printf_float+0xf0>
 801cd02:	2301      	movs	r3, #1
 801cd04:	e7bd      	b.n	801cc82 <_printf_float+0xee>
 801cd06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cd0a:	d9db      	bls.n	801ccc4 <_printf_float+0x130>
 801cd0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801cd10:	d118      	bne.n	801cd44 <_printf_float+0x1b0>
 801cd12:	2900      	cmp	r1, #0
 801cd14:	6863      	ldr	r3, [r4, #4]
 801cd16:	dd0b      	ble.n	801cd30 <_printf_float+0x19c>
 801cd18:	6121      	str	r1, [r4, #16]
 801cd1a:	b913      	cbnz	r3, 801cd22 <_printf_float+0x18e>
 801cd1c:	6822      	ldr	r2, [r4, #0]
 801cd1e:	07d0      	lsls	r0, r2, #31
 801cd20:	d502      	bpl.n	801cd28 <_printf_float+0x194>
 801cd22:	3301      	adds	r3, #1
 801cd24:	440b      	add	r3, r1
 801cd26:	6123      	str	r3, [r4, #16]
 801cd28:	65a1      	str	r1, [r4, #88]	@ 0x58
 801cd2a:	f04f 0900 	mov.w	r9, #0
 801cd2e:	e7db      	b.n	801cce8 <_printf_float+0x154>
 801cd30:	b913      	cbnz	r3, 801cd38 <_printf_float+0x1a4>
 801cd32:	6822      	ldr	r2, [r4, #0]
 801cd34:	07d2      	lsls	r2, r2, #31
 801cd36:	d501      	bpl.n	801cd3c <_printf_float+0x1a8>
 801cd38:	3302      	adds	r3, #2
 801cd3a:	e7f4      	b.n	801cd26 <_printf_float+0x192>
 801cd3c:	2301      	movs	r3, #1
 801cd3e:	e7f2      	b.n	801cd26 <_printf_float+0x192>
 801cd40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801cd44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd46:	4299      	cmp	r1, r3
 801cd48:	db05      	blt.n	801cd56 <_printf_float+0x1c2>
 801cd4a:	6823      	ldr	r3, [r4, #0]
 801cd4c:	6121      	str	r1, [r4, #16]
 801cd4e:	07d8      	lsls	r0, r3, #31
 801cd50:	d5ea      	bpl.n	801cd28 <_printf_float+0x194>
 801cd52:	1c4b      	adds	r3, r1, #1
 801cd54:	e7e7      	b.n	801cd26 <_printf_float+0x192>
 801cd56:	2900      	cmp	r1, #0
 801cd58:	bfd4      	ite	le
 801cd5a:	f1c1 0202 	rsble	r2, r1, #2
 801cd5e:	2201      	movgt	r2, #1
 801cd60:	4413      	add	r3, r2
 801cd62:	e7e0      	b.n	801cd26 <_printf_float+0x192>
 801cd64:	6823      	ldr	r3, [r4, #0]
 801cd66:	055a      	lsls	r2, r3, #21
 801cd68:	d407      	bmi.n	801cd7a <_printf_float+0x1e6>
 801cd6a:	6923      	ldr	r3, [r4, #16]
 801cd6c:	4642      	mov	r2, r8
 801cd6e:	4631      	mov	r1, r6
 801cd70:	4628      	mov	r0, r5
 801cd72:	47b8      	blx	r7
 801cd74:	3001      	adds	r0, #1
 801cd76:	d12b      	bne.n	801cdd0 <_printf_float+0x23c>
 801cd78:	e767      	b.n	801cc4a <_printf_float+0xb6>
 801cd7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801cd7e:	f240 80dd 	bls.w	801cf3c <_printf_float+0x3a8>
 801cd82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cd86:	2200      	movs	r2, #0
 801cd88:	2300      	movs	r3, #0
 801cd8a:	f7e3 fecd 	bl	8000b28 <__aeabi_dcmpeq>
 801cd8e:	2800      	cmp	r0, #0
 801cd90:	d033      	beq.n	801cdfa <_printf_float+0x266>
 801cd92:	4a37      	ldr	r2, [pc, #220]	@ (801ce70 <_printf_float+0x2dc>)
 801cd94:	2301      	movs	r3, #1
 801cd96:	4631      	mov	r1, r6
 801cd98:	4628      	mov	r0, r5
 801cd9a:	47b8      	blx	r7
 801cd9c:	3001      	adds	r0, #1
 801cd9e:	f43f af54 	beq.w	801cc4a <_printf_float+0xb6>
 801cda2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801cda6:	4543      	cmp	r3, r8
 801cda8:	db02      	blt.n	801cdb0 <_printf_float+0x21c>
 801cdaa:	6823      	ldr	r3, [r4, #0]
 801cdac:	07d8      	lsls	r0, r3, #31
 801cdae:	d50f      	bpl.n	801cdd0 <_printf_float+0x23c>
 801cdb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cdb4:	4631      	mov	r1, r6
 801cdb6:	4628      	mov	r0, r5
 801cdb8:	47b8      	blx	r7
 801cdba:	3001      	adds	r0, #1
 801cdbc:	f43f af45 	beq.w	801cc4a <_printf_float+0xb6>
 801cdc0:	f04f 0900 	mov.w	r9, #0
 801cdc4:	f108 38ff 	add.w	r8, r8, #4294967295
 801cdc8:	f104 0a1a 	add.w	sl, r4, #26
 801cdcc:	45c8      	cmp	r8, r9
 801cdce:	dc09      	bgt.n	801cde4 <_printf_float+0x250>
 801cdd0:	6823      	ldr	r3, [r4, #0]
 801cdd2:	079b      	lsls	r3, r3, #30
 801cdd4:	f100 8103 	bmi.w	801cfde <_printf_float+0x44a>
 801cdd8:	68e0      	ldr	r0, [r4, #12]
 801cdda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cddc:	4298      	cmp	r0, r3
 801cdde:	bfb8      	it	lt
 801cde0:	4618      	movlt	r0, r3
 801cde2:	e734      	b.n	801cc4e <_printf_float+0xba>
 801cde4:	2301      	movs	r3, #1
 801cde6:	4652      	mov	r2, sl
 801cde8:	4631      	mov	r1, r6
 801cdea:	4628      	mov	r0, r5
 801cdec:	47b8      	blx	r7
 801cdee:	3001      	adds	r0, #1
 801cdf0:	f43f af2b 	beq.w	801cc4a <_printf_float+0xb6>
 801cdf4:	f109 0901 	add.w	r9, r9, #1
 801cdf8:	e7e8      	b.n	801cdcc <_printf_float+0x238>
 801cdfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	dc39      	bgt.n	801ce74 <_printf_float+0x2e0>
 801ce00:	4a1b      	ldr	r2, [pc, #108]	@ (801ce70 <_printf_float+0x2dc>)
 801ce02:	2301      	movs	r3, #1
 801ce04:	4631      	mov	r1, r6
 801ce06:	4628      	mov	r0, r5
 801ce08:	47b8      	blx	r7
 801ce0a:	3001      	adds	r0, #1
 801ce0c:	f43f af1d 	beq.w	801cc4a <_printf_float+0xb6>
 801ce10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ce14:	ea59 0303 	orrs.w	r3, r9, r3
 801ce18:	d102      	bne.n	801ce20 <_printf_float+0x28c>
 801ce1a:	6823      	ldr	r3, [r4, #0]
 801ce1c:	07d9      	lsls	r1, r3, #31
 801ce1e:	d5d7      	bpl.n	801cdd0 <_printf_float+0x23c>
 801ce20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ce24:	4631      	mov	r1, r6
 801ce26:	4628      	mov	r0, r5
 801ce28:	47b8      	blx	r7
 801ce2a:	3001      	adds	r0, #1
 801ce2c:	f43f af0d 	beq.w	801cc4a <_printf_float+0xb6>
 801ce30:	f04f 0a00 	mov.w	sl, #0
 801ce34:	f104 0b1a 	add.w	fp, r4, #26
 801ce38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce3a:	425b      	negs	r3, r3
 801ce3c:	4553      	cmp	r3, sl
 801ce3e:	dc01      	bgt.n	801ce44 <_printf_float+0x2b0>
 801ce40:	464b      	mov	r3, r9
 801ce42:	e793      	b.n	801cd6c <_printf_float+0x1d8>
 801ce44:	2301      	movs	r3, #1
 801ce46:	465a      	mov	r2, fp
 801ce48:	4631      	mov	r1, r6
 801ce4a:	4628      	mov	r0, r5
 801ce4c:	47b8      	blx	r7
 801ce4e:	3001      	adds	r0, #1
 801ce50:	f43f aefb 	beq.w	801cc4a <_printf_float+0xb6>
 801ce54:	f10a 0a01 	add.w	sl, sl, #1
 801ce58:	e7ee      	b.n	801ce38 <_printf_float+0x2a4>
 801ce5a:	bf00      	nop
 801ce5c:	7fefffff 	.word	0x7fefffff
 801ce60:	08024ba8 	.word	0x08024ba8
 801ce64:	08024bac 	.word	0x08024bac
 801ce68:	08024bb0 	.word	0x08024bb0
 801ce6c:	08024bb4 	.word	0x08024bb4
 801ce70:	08024bb8 	.word	0x08024bb8
 801ce74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ce76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ce7a:	4553      	cmp	r3, sl
 801ce7c:	bfa8      	it	ge
 801ce7e:	4653      	movge	r3, sl
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	4699      	mov	r9, r3
 801ce84:	dc36      	bgt.n	801cef4 <_printf_float+0x360>
 801ce86:	f04f 0b00 	mov.w	fp, #0
 801ce8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ce8e:	f104 021a 	add.w	r2, r4, #26
 801ce92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ce94:	9306      	str	r3, [sp, #24]
 801ce96:	eba3 0309 	sub.w	r3, r3, r9
 801ce9a:	455b      	cmp	r3, fp
 801ce9c:	dc31      	bgt.n	801cf02 <_printf_float+0x36e>
 801ce9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cea0:	459a      	cmp	sl, r3
 801cea2:	dc3a      	bgt.n	801cf1a <_printf_float+0x386>
 801cea4:	6823      	ldr	r3, [r4, #0]
 801cea6:	07da      	lsls	r2, r3, #31
 801cea8:	d437      	bmi.n	801cf1a <_printf_float+0x386>
 801ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceac:	ebaa 0903 	sub.w	r9, sl, r3
 801ceb0:	9b06      	ldr	r3, [sp, #24]
 801ceb2:	ebaa 0303 	sub.w	r3, sl, r3
 801ceb6:	4599      	cmp	r9, r3
 801ceb8:	bfa8      	it	ge
 801ceba:	4699      	movge	r9, r3
 801cebc:	f1b9 0f00 	cmp.w	r9, #0
 801cec0:	dc33      	bgt.n	801cf2a <_printf_float+0x396>
 801cec2:	f04f 0800 	mov.w	r8, #0
 801cec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ceca:	f104 0b1a 	add.w	fp, r4, #26
 801cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ced0:	ebaa 0303 	sub.w	r3, sl, r3
 801ced4:	eba3 0309 	sub.w	r3, r3, r9
 801ced8:	4543      	cmp	r3, r8
 801ceda:	f77f af79 	ble.w	801cdd0 <_printf_float+0x23c>
 801cede:	2301      	movs	r3, #1
 801cee0:	465a      	mov	r2, fp
 801cee2:	4631      	mov	r1, r6
 801cee4:	4628      	mov	r0, r5
 801cee6:	47b8      	blx	r7
 801cee8:	3001      	adds	r0, #1
 801ceea:	f43f aeae 	beq.w	801cc4a <_printf_float+0xb6>
 801ceee:	f108 0801 	add.w	r8, r8, #1
 801cef2:	e7ec      	b.n	801cece <_printf_float+0x33a>
 801cef4:	4642      	mov	r2, r8
 801cef6:	4631      	mov	r1, r6
 801cef8:	4628      	mov	r0, r5
 801cefa:	47b8      	blx	r7
 801cefc:	3001      	adds	r0, #1
 801cefe:	d1c2      	bne.n	801ce86 <_printf_float+0x2f2>
 801cf00:	e6a3      	b.n	801cc4a <_printf_float+0xb6>
 801cf02:	2301      	movs	r3, #1
 801cf04:	4631      	mov	r1, r6
 801cf06:	4628      	mov	r0, r5
 801cf08:	9206      	str	r2, [sp, #24]
 801cf0a:	47b8      	blx	r7
 801cf0c:	3001      	adds	r0, #1
 801cf0e:	f43f ae9c 	beq.w	801cc4a <_printf_float+0xb6>
 801cf12:	9a06      	ldr	r2, [sp, #24]
 801cf14:	f10b 0b01 	add.w	fp, fp, #1
 801cf18:	e7bb      	b.n	801ce92 <_printf_float+0x2fe>
 801cf1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf1e:	4631      	mov	r1, r6
 801cf20:	4628      	mov	r0, r5
 801cf22:	47b8      	blx	r7
 801cf24:	3001      	adds	r0, #1
 801cf26:	d1c0      	bne.n	801ceaa <_printf_float+0x316>
 801cf28:	e68f      	b.n	801cc4a <_printf_float+0xb6>
 801cf2a:	9a06      	ldr	r2, [sp, #24]
 801cf2c:	464b      	mov	r3, r9
 801cf2e:	4442      	add	r2, r8
 801cf30:	4631      	mov	r1, r6
 801cf32:	4628      	mov	r0, r5
 801cf34:	47b8      	blx	r7
 801cf36:	3001      	adds	r0, #1
 801cf38:	d1c3      	bne.n	801cec2 <_printf_float+0x32e>
 801cf3a:	e686      	b.n	801cc4a <_printf_float+0xb6>
 801cf3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801cf40:	f1ba 0f01 	cmp.w	sl, #1
 801cf44:	dc01      	bgt.n	801cf4a <_printf_float+0x3b6>
 801cf46:	07db      	lsls	r3, r3, #31
 801cf48:	d536      	bpl.n	801cfb8 <_printf_float+0x424>
 801cf4a:	2301      	movs	r3, #1
 801cf4c:	4642      	mov	r2, r8
 801cf4e:	4631      	mov	r1, r6
 801cf50:	4628      	mov	r0, r5
 801cf52:	47b8      	blx	r7
 801cf54:	3001      	adds	r0, #1
 801cf56:	f43f ae78 	beq.w	801cc4a <_printf_float+0xb6>
 801cf5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cf5e:	4631      	mov	r1, r6
 801cf60:	4628      	mov	r0, r5
 801cf62:	47b8      	blx	r7
 801cf64:	3001      	adds	r0, #1
 801cf66:	f43f ae70 	beq.w	801cc4a <_printf_float+0xb6>
 801cf6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801cf6e:	2200      	movs	r2, #0
 801cf70:	2300      	movs	r3, #0
 801cf72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cf76:	f7e3 fdd7 	bl	8000b28 <__aeabi_dcmpeq>
 801cf7a:	b9c0      	cbnz	r0, 801cfae <_printf_float+0x41a>
 801cf7c:	4653      	mov	r3, sl
 801cf7e:	f108 0201 	add.w	r2, r8, #1
 801cf82:	4631      	mov	r1, r6
 801cf84:	4628      	mov	r0, r5
 801cf86:	47b8      	blx	r7
 801cf88:	3001      	adds	r0, #1
 801cf8a:	d10c      	bne.n	801cfa6 <_printf_float+0x412>
 801cf8c:	e65d      	b.n	801cc4a <_printf_float+0xb6>
 801cf8e:	2301      	movs	r3, #1
 801cf90:	465a      	mov	r2, fp
 801cf92:	4631      	mov	r1, r6
 801cf94:	4628      	mov	r0, r5
 801cf96:	47b8      	blx	r7
 801cf98:	3001      	adds	r0, #1
 801cf9a:	f43f ae56 	beq.w	801cc4a <_printf_float+0xb6>
 801cf9e:	f108 0801 	add.w	r8, r8, #1
 801cfa2:	45d0      	cmp	r8, sl
 801cfa4:	dbf3      	blt.n	801cf8e <_printf_float+0x3fa>
 801cfa6:	464b      	mov	r3, r9
 801cfa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801cfac:	e6df      	b.n	801cd6e <_printf_float+0x1da>
 801cfae:	f04f 0800 	mov.w	r8, #0
 801cfb2:	f104 0b1a 	add.w	fp, r4, #26
 801cfb6:	e7f4      	b.n	801cfa2 <_printf_float+0x40e>
 801cfb8:	2301      	movs	r3, #1
 801cfba:	4642      	mov	r2, r8
 801cfbc:	e7e1      	b.n	801cf82 <_printf_float+0x3ee>
 801cfbe:	2301      	movs	r3, #1
 801cfc0:	464a      	mov	r2, r9
 801cfc2:	4631      	mov	r1, r6
 801cfc4:	4628      	mov	r0, r5
 801cfc6:	47b8      	blx	r7
 801cfc8:	3001      	adds	r0, #1
 801cfca:	f43f ae3e 	beq.w	801cc4a <_printf_float+0xb6>
 801cfce:	f108 0801 	add.w	r8, r8, #1
 801cfd2:	68e3      	ldr	r3, [r4, #12]
 801cfd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cfd6:	1a5b      	subs	r3, r3, r1
 801cfd8:	4543      	cmp	r3, r8
 801cfda:	dcf0      	bgt.n	801cfbe <_printf_float+0x42a>
 801cfdc:	e6fc      	b.n	801cdd8 <_printf_float+0x244>
 801cfde:	f04f 0800 	mov.w	r8, #0
 801cfe2:	f104 0919 	add.w	r9, r4, #25
 801cfe6:	e7f4      	b.n	801cfd2 <_printf_float+0x43e>

0801cfe8 <_printf_common>:
 801cfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfec:	4616      	mov	r6, r2
 801cfee:	4698      	mov	r8, r3
 801cff0:	688a      	ldr	r2, [r1, #8]
 801cff2:	690b      	ldr	r3, [r1, #16]
 801cff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cff8:	4293      	cmp	r3, r2
 801cffa:	bfb8      	it	lt
 801cffc:	4613      	movlt	r3, r2
 801cffe:	6033      	str	r3, [r6, #0]
 801d000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d004:	4607      	mov	r7, r0
 801d006:	460c      	mov	r4, r1
 801d008:	b10a      	cbz	r2, 801d00e <_printf_common+0x26>
 801d00a:	3301      	adds	r3, #1
 801d00c:	6033      	str	r3, [r6, #0]
 801d00e:	6823      	ldr	r3, [r4, #0]
 801d010:	0699      	lsls	r1, r3, #26
 801d012:	bf42      	ittt	mi
 801d014:	6833      	ldrmi	r3, [r6, #0]
 801d016:	3302      	addmi	r3, #2
 801d018:	6033      	strmi	r3, [r6, #0]
 801d01a:	6825      	ldr	r5, [r4, #0]
 801d01c:	f015 0506 	ands.w	r5, r5, #6
 801d020:	d106      	bne.n	801d030 <_printf_common+0x48>
 801d022:	f104 0a19 	add.w	sl, r4, #25
 801d026:	68e3      	ldr	r3, [r4, #12]
 801d028:	6832      	ldr	r2, [r6, #0]
 801d02a:	1a9b      	subs	r3, r3, r2
 801d02c:	42ab      	cmp	r3, r5
 801d02e:	dc26      	bgt.n	801d07e <_printf_common+0x96>
 801d030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d034:	6822      	ldr	r2, [r4, #0]
 801d036:	3b00      	subs	r3, #0
 801d038:	bf18      	it	ne
 801d03a:	2301      	movne	r3, #1
 801d03c:	0692      	lsls	r2, r2, #26
 801d03e:	d42b      	bmi.n	801d098 <_printf_common+0xb0>
 801d040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d044:	4641      	mov	r1, r8
 801d046:	4638      	mov	r0, r7
 801d048:	47c8      	blx	r9
 801d04a:	3001      	adds	r0, #1
 801d04c:	d01e      	beq.n	801d08c <_printf_common+0xa4>
 801d04e:	6823      	ldr	r3, [r4, #0]
 801d050:	6922      	ldr	r2, [r4, #16]
 801d052:	f003 0306 	and.w	r3, r3, #6
 801d056:	2b04      	cmp	r3, #4
 801d058:	bf02      	ittt	eq
 801d05a:	68e5      	ldreq	r5, [r4, #12]
 801d05c:	6833      	ldreq	r3, [r6, #0]
 801d05e:	1aed      	subeq	r5, r5, r3
 801d060:	68a3      	ldr	r3, [r4, #8]
 801d062:	bf0c      	ite	eq
 801d064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d068:	2500      	movne	r5, #0
 801d06a:	4293      	cmp	r3, r2
 801d06c:	bfc4      	itt	gt
 801d06e:	1a9b      	subgt	r3, r3, r2
 801d070:	18ed      	addgt	r5, r5, r3
 801d072:	2600      	movs	r6, #0
 801d074:	341a      	adds	r4, #26
 801d076:	42b5      	cmp	r5, r6
 801d078:	d11a      	bne.n	801d0b0 <_printf_common+0xc8>
 801d07a:	2000      	movs	r0, #0
 801d07c:	e008      	b.n	801d090 <_printf_common+0xa8>
 801d07e:	2301      	movs	r3, #1
 801d080:	4652      	mov	r2, sl
 801d082:	4641      	mov	r1, r8
 801d084:	4638      	mov	r0, r7
 801d086:	47c8      	blx	r9
 801d088:	3001      	adds	r0, #1
 801d08a:	d103      	bne.n	801d094 <_printf_common+0xac>
 801d08c:	f04f 30ff 	mov.w	r0, #4294967295
 801d090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d094:	3501      	adds	r5, #1
 801d096:	e7c6      	b.n	801d026 <_printf_common+0x3e>
 801d098:	18e1      	adds	r1, r4, r3
 801d09a:	1c5a      	adds	r2, r3, #1
 801d09c:	2030      	movs	r0, #48	@ 0x30
 801d09e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d0a2:	4422      	add	r2, r4
 801d0a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d0a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d0ac:	3302      	adds	r3, #2
 801d0ae:	e7c7      	b.n	801d040 <_printf_common+0x58>
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	4622      	mov	r2, r4
 801d0b4:	4641      	mov	r1, r8
 801d0b6:	4638      	mov	r0, r7
 801d0b8:	47c8      	blx	r9
 801d0ba:	3001      	adds	r0, #1
 801d0bc:	d0e6      	beq.n	801d08c <_printf_common+0xa4>
 801d0be:	3601      	adds	r6, #1
 801d0c0:	e7d9      	b.n	801d076 <_printf_common+0x8e>
	...

0801d0c4 <_printf_i>:
 801d0c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d0c8:	7e0f      	ldrb	r7, [r1, #24]
 801d0ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d0cc:	2f78      	cmp	r7, #120	@ 0x78
 801d0ce:	4691      	mov	r9, r2
 801d0d0:	4680      	mov	r8, r0
 801d0d2:	460c      	mov	r4, r1
 801d0d4:	469a      	mov	sl, r3
 801d0d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d0da:	d807      	bhi.n	801d0ec <_printf_i+0x28>
 801d0dc:	2f62      	cmp	r7, #98	@ 0x62
 801d0de:	d80a      	bhi.n	801d0f6 <_printf_i+0x32>
 801d0e0:	2f00      	cmp	r7, #0
 801d0e2:	f000 80d2 	beq.w	801d28a <_printf_i+0x1c6>
 801d0e6:	2f58      	cmp	r7, #88	@ 0x58
 801d0e8:	f000 80b9 	beq.w	801d25e <_printf_i+0x19a>
 801d0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d0f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d0f4:	e03a      	b.n	801d16c <_printf_i+0xa8>
 801d0f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d0fa:	2b15      	cmp	r3, #21
 801d0fc:	d8f6      	bhi.n	801d0ec <_printf_i+0x28>
 801d0fe:	a101      	add	r1, pc, #4	@ (adr r1, 801d104 <_printf_i+0x40>)
 801d100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d104:	0801d15d 	.word	0x0801d15d
 801d108:	0801d171 	.word	0x0801d171
 801d10c:	0801d0ed 	.word	0x0801d0ed
 801d110:	0801d0ed 	.word	0x0801d0ed
 801d114:	0801d0ed 	.word	0x0801d0ed
 801d118:	0801d0ed 	.word	0x0801d0ed
 801d11c:	0801d171 	.word	0x0801d171
 801d120:	0801d0ed 	.word	0x0801d0ed
 801d124:	0801d0ed 	.word	0x0801d0ed
 801d128:	0801d0ed 	.word	0x0801d0ed
 801d12c:	0801d0ed 	.word	0x0801d0ed
 801d130:	0801d271 	.word	0x0801d271
 801d134:	0801d19b 	.word	0x0801d19b
 801d138:	0801d22b 	.word	0x0801d22b
 801d13c:	0801d0ed 	.word	0x0801d0ed
 801d140:	0801d0ed 	.word	0x0801d0ed
 801d144:	0801d293 	.word	0x0801d293
 801d148:	0801d0ed 	.word	0x0801d0ed
 801d14c:	0801d19b 	.word	0x0801d19b
 801d150:	0801d0ed 	.word	0x0801d0ed
 801d154:	0801d0ed 	.word	0x0801d0ed
 801d158:	0801d233 	.word	0x0801d233
 801d15c:	6833      	ldr	r3, [r6, #0]
 801d15e:	1d1a      	adds	r2, r3, #4
 801d160:	681b      	ldr	r3, [r3, #0]
 801d162:	6032      	str	r2, [r6, #0]
 801d164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d16c:	2301      	movs	r3, #1
 801d16e:	e09d      	b.n	801d2ac <_printf_i+0x1e8>
 801d170:	6833      	ldr	r3, [r6, #0]
 801d172:	6820      	ldr	r0, [r4, #0]
 801d174:	1d19      	adds	r1, r3, #4
 801d176:	6031      	str	r1, [r6, #0]
 801d178:	0606      	lsls	r6, r0, #24
 801d17a:	d501      	bpl.n	801d180 <_printf_i+0xbc>
 801d17c:	681d      	ldr	r5, [r3, #0]
 801d17e:	e003      	b.n	801d188 <_printf_i+0xc4>
 801d180:	0645      	lsls	r5, r0, #25
 801d182:	d5fb      	bpl.n	801d17c <_printf_i+0xb8>
 801d184:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d188:	2d00      	cmp	r5, #0
 801d18a:	da03      	bge.n	801d194 <_printf_i+0xd0>
 801d18c:	232d      	movs	r3, #45	@ 0x2d
 801d18e:	426d      	negs	r5, r5
 801d190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d194:	4859      	ldr	r0, [pc, #356]	@ (801d2fc <_printf_i+0x238>)
 801d196:	230a      	movs	r3, #10
 801d198:	e011      	b.n	801d1be <_printf_i+0xfa>
 801d19a:	6821      	ldr	r1, [r4, #0]
 801d19c:	6833      	ldr	r3, [r6, #0]
 801d19e:	0608      	lsls	r0, r1, #24
 801d1a0:	f853 5b04 	ldr.w	r5, [r3], #4
 801d1a4:	d402      	bmi.n	801d1ac <_printf_i+0xe8>
 801d1a6:	0649      	lsls	r1, r1, #25
 801d1a8:	bf48      	it	mi
 801d1aa:	b2ad      	uxthmi	r5, r5
 801d1ac:	2f6f      	cmp	r7, #111	@ 0x6f
 801d1ae:	4853      	ldr	r0, [pc, #332]	@ (801d2fc <_printf_i+0x238>)
 801d1b0:	6033      	str	r3, [r6, #0]
 801d1b2:	bf14      	ite	ne
 801d1b4:	230a      	movne	r3, #10
 801d1b6:	2308      	moveq	r3, #8
 801d1b8:	2100      	movs	r1, #0
 801d1ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d1be:	6866      	ldr	r6, [r4, #4]
 801d1c0:	60a6      	str	r6, [r4, #8]
 801d1c2:	2e00      	cmp	r6, #0
 801d1c4:	bfa2      	ittt	ge
 801d1c6:	6821      	ldrge	r1, [r4, #0]
 801d1c8:	f021 0104 	bicge.w	r1, r1, #4
 801d1cc:	6021      	strge	r1, [r4, #0]
 801d1ce:	b90d      	cbnz	r5, 801d1d4 <_printf_i+0x110>
 801d1d0:	2e00      	cmp	r6, #0
 801d1d2:	d04b      	beq.n	801d26c <_printf_i+0x1a8>
 801d1d4:	4616      	mov	r6, r2
 801d1d6:	fbb5 f1f3 	udiv	r1, r5, r3
 801d1da:	fb03 5711 	mls	r7, r3, r1, r5
 801d1de:	5dc7      	ldrb	r7, [r0, r7]
 801d1e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d1e4:	462f      	mov	r7, r5
 801d1e6:	42bb      	cmp	r3, r7
 801d1e8:	460d      	mov	r5, r1
 801d1ea:	d9f4      	bls.n	801d1d6 <_printf_i+0x112>
 801d1ec:	2b08      	cmp	r3, #8
 801d1ee:	d10b      	bne.n	801d208 <_printf_i+0x144>
 801d1f0:	6823      	ldr	r3, [r4, #0]
 801d1f2:	07df      	lsls	r7, r3, #31
 801d1f4:	d508      	bpl.n	801d208 <_printf_i+0x144>
 801d1f6:	6923      	ldr	r3, [r4, #16]
 801d1f8:	6861      	ldr	r1, [r4, #4]
 801d1fa:	4299      	cmp	r1, r3
 801d1fc:	bfde      	ittt	le
 801d1fe:	2330      	movle	r3, #48	@ 0x30
 801d200:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d204:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d208:	1b92      	subs	r2, r2, r6
 801d20a:	6122      	str	r2, [r4, #16]
 801d20c:	f8cd a000 	str.w	sl, [sp]
 801d210:	464b      	mov	r3, r9
 801d212:	aa03      	add	r2, sp, #12
 801d214:	4621      	mov	r1, r4
 801d216:	4640      	mov	r0, r8
 801d218:	f7ff fee6 	bl	801cfe8 <_printf_common>
 801d21c:	3001      	adds	r0, #1
 801d21e:	d14a      	bne.n	801d2b6 <_printf_i+0x1f2>
 801d220:	f04f 30ff 	mov.w	r0, #4294967295
 801d224:	b004      	add	sp, #16
 801d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d22a:	6823      	ldr	r3, [r4, #0]
 801d22c:	f043 0320 	orr.w	r3, r3, #32
 801d230:	6023      	str	r3, [r4, #0]
 801d232:	4833      	ldr	r0, [pc, #204]	@ (801d300 <_printf_i+0x23c>)
 801d234:	2778      	movs	r7, #120	@ 0x78
 801d236:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d23a:	6823      	ldr	r3, [r4, #0]
 801d23c:	6831      	ldr	r1, [r6, #0]
 801d23e:	061f      	lsls	r7, r3, #24
 801d240:	f851 5b04 	ldr.w	r5, [r1], #4
 801d244:	d402      	bmi.n	801d24c <_printf_i+0x188>
 801d246:	065f      	lsls	r7, r3, #25
 801d248:	bf48      	it	mi
 801d24a:	b2ad      	uxthmi	r5, r5
 801d24c:	6031      	str	r1, [r6, #0]
 801d24e:	07d9      	lsls	r1, r3, #31
 801d250:	bf44      	itt	mi
 801d252:	f043 0320 	orrmi.w	r3, r3, #32
 801d256:	6023      	strmi	r3, [r4, #0]
 801d258:	b11d      	cbz	r5, 801d262 <_printf_i+0x19e>
 801d25a:	2310      	movs	r3, #16
 801d25c:	e7ac      	b.n	801d1b8 <_printf_i+0xf4>
 801d25e:	4827      	ldr	r0, [pc, #156]	@ (801d2fc <_printf_i+0x238>)
 801d260:	e7e9      	b.n	801d236 <_printf_i+0x172>
 801d262:	6823      	ldr	r3, [r4, #0]
 801d264:	f023 0320 	bic.w	r3, r3, #32
 801d268:	6023      	str	r3, [r4, #0]
 801d26a:	e7f6      	b.n	801d25a <_printf_i+0x196>
 801d26c:	4616      	mov	r6, r2
 801d26e:	e7bd      	b.n	801d1ec <_printf_i+0x128>
 801d270:	6833      	ldr	r3, [r6, #0]
 801d272:	6825      	ldr	r5, [r4, #0]
 801d274:	6961      	ldr	r1, [r4, #20]
 801d276:	1d18      	adds	r0, r3, #4
 801d278:	6030      	str	r0, [r6, #0]
 801d27a:	062e      	lsls	r6, r5, #24
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	d501      	bpl.n	801d284 <_printf_i+0x1c0>
 801d280:	6019      	str	r1, [r3, #0]
 801d282:	e002      	b.n	801d28a <_printf_i+0x1c6>
 801d284:	0668      	lsls	r0, r5, #25
 801d286:	d5fb      	bpl.n	801d280 <_printf_i+0x1bc>
 801d288:	8019      	strh	r1, [r3, #0]
 801d28a:	2300      	movs	r3, #0
 801d28c:	6123      	str	r3, [r4, #16]
 801d28e:	4616      	mov	r6, r2
 801d290:	e7bc      	b.n	801d20c <_printf_i+0x148>
 801d292:	6833      	ldr	r3, [r6, #0]
 801d294:	1d1a      	adds	r2, r3, #4
 801d296:	6032      	str	r2, [r6, #0]
 801d298:	681e      	ldr	r6, [r3, #0]
 801d29a:	6862      	ldr	r2, [r4, #4]
 801d29c:	2100      	movs	r1, #0
 801d29e:	4630      	mov	r0, r6
 801d2a0:	f7e2 ffc6 	bl	8000230 <memchr>
 801d2a4:	b108      	cbz	r0, 801d2aa <_printf_i+0x1e6>
 801d2a6:	1b80      	subs	r0, r0, r6
 801d2a8:	6060      	str	r0, [r4, #4]
 801d2aa:	6863      	ldr	r3, [r4, #4]
 801d2ac:	6123      	str	r3, [r4, #16]
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d2b4:	e7aa      	b.n	801d20c <_printf_i+0x148>
 801d2b6:	6923      	ldr	r3, [r4, #16]
 801d2b8:	4632      	mov	r2, r6
 801d2ba:	4649      	mov	r1, r9
 801d2bc:	4640      	mov	r0, r8
 801d2be:	47d0      	blx	sl
 801d2c0:	3001      	adds	r0, #1
 801d2c2:	d0ad      	beq.n	801d220 <_printf_i+0x15c>
 801d2c4:	6823      	ldr	r3, [r4, #0]
 801d2c6:	079b      	lsls	r3, r3, #30
 801d2c8:	d413      	bmi.n	801d2f2 <_printf_i+0x22e>
 801d2ca:	68e0      	ldr	r0, [r4, #12]
 801d2cc:	9b03      	ldr	r3, [sp, #12]
 801d2ce:	4298      	cmp	r0, r3
 801d2d0:	bfb8      	it	lt
 801d2d2:	4618      	movlt	r0, r3
 801d2d4:	e7a6      	b.n	801d224 <_printf_i+0x160>
 801d2d6:	2301      	movs	r3, #1
 801d2d8:	4632      	mov	r2, r6
 801d2da:	4649      	mov	r1, r9
 801d2dc:	4640      	mov	r0, r8
 801d2de:	47d0      	blx	sl
 801d2e0:	3001      	adds	r0, #1
 801d2e2:	d09d      	beq.n	801d220 <_printf_i+0x15c>
 801d2e4:	3501      	adds	r5, #1
 801d2e6:	68e3      	ldr	r3, [r4, #12]
 801d2e8:	9903      	ldr	r1, [sp, #12]
 801d2ea:	1a5b      	subs	r3, r3, r1
 801d2ec:	42ab      	cmp	r3, r5
 801d2ee:	dcf2      	bgt.n	801d2d6 <_printf_i+0x212>
 801d2f0:	e7eb      	b.n	801d2ca <_printf_i+0x206>
 801d2f2:	2500      	movs	r5, #0
 801d2f4:	f104 0619 	add.w	r6, r4, #25
 801d2f8:	e7f5      	b.n	801d2e6 <_printf_i+0x222>
 801d2fa:	bf00      	nop
 801d2fc:	08024bba 	.word	0x08024bba
 801d300:	08024bcb 	.word	0x08024bcb

0801d304 <std>:
 801d304:	2300      	movs	r3, #0
 801d306:	b510      	push	{r4, lr}
 801d308:	4604      	mov	r4, r0
 801d30a:	e9c0 3300 	strd	r3, r3, [r0]
 801d30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d312:	6083      	str	r3, [r0, #8]
 801d314:	8181      	strh	r1, [r0, #12]
 801d316:	6643      	str	r3, [r0, #100]	@ 0x64
 801d318:	81c2      	strh	r2, [r0, #14]
 801d31a:	6183      	str	r3, [r0, #24]
 801d31c:	4619      	mov	r1, r3
 801d31e:	2208      	movs	r2, #8
 801d320:	305c      	adds	r0, #92	@ 0x5c
 801d322:	f000 f950 	bl	801d5c6 <memset>
 801d326:	4b0d      	ldr	r3, [pc, #52]	@ (801d35c <std+0x58>)
 801d328:	6263      	str	r3, [r4, #36]	@ 0x24
 801d32a:	4b0d      	ldr	r3, [pc, #52]	@ (801d360 <std+0x5c>)
 801d32c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d32e:	4b0d      	ldr	r3, [pc, #52]	@ (801d364 <std+0x60>)
 801d330:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d332:	4b0d      	ldr	r3, [pc, #52]	@ (801d368 <std+0x64>)
 801d334:	6323      	str	r3, [r4, #48]	@ 0x30
 801d336:	4b0d      	ldr	r3, [pc, #52]	@ (801d36c <std+0x68>)
 801d338:	6224      	str	r4, [r4, #32]
 801d33a:	429c      	cmp	r4, r3
 801d33c:	d006      	beq.n	801d34c <std+0x48>
 801d33e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d342:	4294      	cmp	r4, r2
 801d344:	d002      	beq.n	801d34c <std+0x48>
 801d346:	33d0      	adds	r3, #208	@ 0xd0
 801d348:	429c      	cmp	r4, r3
 801d34a:	d105      	bne.n	801d358 <std+0x54>
 801d34c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d354:	f000 ba22 	b.w	801d79c <__retarget_lock_init_recursive>
 801d358:	bd10      	pop	{r4, pc}
 801d35a:	bf00      	nop
 801d35c:	0801d4ed 	.word	0x0801d4ed
 801d360:	0801d50f 	.word	0x0801d50f
 801d364:	0801d547 	.word	0x0801d547
 801d368:	0801d56b 	.word	0x0801d56b
 801d36c:	2000f4f4 	.word	0x2000f4f4

0801d370 <stdio_exit_handler>:
 801d370:	4a02      	ldr	r2, [pc, #8]	@ (801d37c <stdio_exit_handler+0xc>)
 801d372:	4903      	ldr	r1, [pc, #12]	@ (801d380 <stdio_exit_handler+0x10>)
 801d374:	4803      	ldr	r0, [pc, #12]	@ (801d384 <stdio_exit_handler+0x14>)
 801d376:	f000 b869 	b.w	801d44c <_fwalk_sglue>
 801d37a:	bf00      	nop
 801d37c:	20000088 	.word	0x20000088
 801d380:	0801f3d9 	.word	0x0801f3d9
 801d384:	20000098 	.word	0x20000098

0801d388 <cleanup_stdio>:
 801d388:	6841      	ldr	r1, [r0, #4]
 801d38a:	4b0c      	ldr	r3, [pc, #48]	@ (801d3bc <cleanup_stdio+0x34>)
 801d38c:	4299      	cmp	r1, r3
 801d38e:	b510      	push	{r4, lr}
 801d390:	4604      	mov	r4, r0
 801d392:	d001      	beq.n	801d398 <cleanup_stdio+0x10>
 801d394:	f002 f820 	bl	801f3d8 <_fflush_r>
 801d398:	68a1      	ldr	r1, [r4, #8]
 801d39a:	4b09      	ldr	r3, [pc, #36]	@ (801d3c0 <cleanup_stdio+0x38>)
 801d39c:	4299      	cmp	r1, r3
 801d39e:	d002      	beq.n	801d3a6 <cleanup_stdio+0x1e>
 801d3a0:	4620      	mov	r0, r4
 801d3a2:	f002 f819 	bl	801f3d8 <_fflush_r>
 801d3a6:	68e1      	ldr	r1, [r4, #12]
 801d3a8:	4b06      	ldr	r3, [pc, #24]	@ (801d3c4 <cleanup_stdio+0x3c>)
 801d3aa:	4299      	cmp	r1, r3
 801d3ac:	d004      	beq.n	801d3b8 <cleanup_stdio+0x30>
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3b4:	f002 b810 	b.w	801f3d8 <_fflush_r>
 801d3b8:	bd10      	pop	{r4, pc}
 801d3ba:	bf00      	nop
 801d3bc:	2000f4f4 	.word	0x2000f4f4
 801d3c0:	2000f55c 	.word	0x2000f55c
 801d3c4:	2000f5c4 	.word	0x2000f5c4

0801d3c8 <global_stdio_init.part.0>:
 801d3c8:	b510      	push	{r4, lr}
 801d3ca:	4b0b      	ldr	r3, [pc, #44]	@ (801d3f8 <global_stdio_init.part.0+0x30>)
 801d3cc:	4c0b      	ldr	r4, [pc, #44]	@ (801d3fc <global_stdio_init.part.0+0x34>)
 801d3ce:	4a0c      	ldr	r2, [pc, #48]	@ (801d400 <global_stdio_init.part.0+0x38>)
 801d3d0:	601a      	str	r2, [r3, #0]
 801d3d2:	4620      	mov	r0, r4
 801d3d4:	2200      	movs	r2, #0
 801d3d6:	2104      	movs	r1, #4
 801d3d8:	f7ff ff94 	bl	801d304 <std>
 801d3dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d3e0:	2201      	movs	r2, #1
 801d3e2:	2109      	movs	r1, #9
 801d3e4:	f7ff ff8e 	bl	801d304 <std>
 801d3e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d3ec:	2202      	movs	r2, #2
 801d3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3f2:	2112      	movs	r1, #18
 801d3f4:	f7ff bf86 	b.w	801d304 <std>
 801d3f8:	2000f62c 	.word	0x2000f62c
 801d3fc:	2000f4f4 	.word	0x2000f4f4
 801d400:	0801d371 	.word	0x0801d371

0801d404 <__sfp_lock_acquire>:
 801d404:	4801      	ldr	r0, [pc, #4]	@ (801d40c <__sfp_lock_acquire+0x8>)
 801d406:	f000 b9ca 	b.w	801d79e <__retarget_lock_acquire_recursive>
 801d40a:	bf00      	nop
 801d40c:	2000f635 	.word	0x2000f635

0801d410 <__sfp_lock_release>:
 801d410:	4801      	ldr	r0, [pc, #4]	@ (801d418 <__sfp_lock_release+0x8>)
 801d412:	f000 b9c5 	b.w	801d7a0 <__retarget_lock_release_recursive>
 801d416:	bf00      	nop
 801d418:	2000f635 	.word	0x2000f635

0801d41c <__sinit>:
 801d41c:	b510      	push	{r4, lr}
 801d41e:	4604      	mov	r4, r0
 801d420:	f7ff fff0 	bl	801d404 <__sfp_lock_acquire>
 801d424:	6a23      	ldr	r3, [r4, #32]
 801d426:	b11b      	cbz	r3, 801d430 <__sinit+0x14>
 801d428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d42c:	f7ff bff0 	b.w	801d410 <__sfp_lock_release>
 801d430:	4b04      	ldr	r3, [pc, #16]	@ (801d444 <__sinit+0x28>)
 801d432:	6223      	str	r3, [r4, #32]
 801d434:	4b04      	ldr	r3, [pc, #16]	@ (801d448 <__sinit+0x2c>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	d1f5      	bne.n	801d428 <__sinit+0xc>
 801d43c:	f7ff ffc4 	bl	801d3c8 <global_stdio_init.part.0>
 801d440:	e7f2      	b.n	801d428 <__sinit+0xc>
 801d442:	bf00      	nop
 801d444:	0801d389 	.word	0x0801d389
 801d448:	2000f62c 	.word	0x2000f62c

0801d44c <_fwalk_sglue>:
 801d44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d450:	4607      	mov	r7, r0
 801d452:	4688      	mov	r8, r1
 801d454:	4614      	mov	r4, r2
 801d456:	2600      	movs	r6, #0
 801d458:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d45c:	f1b9 0901 	subs.w	r9, r9, #1
 801d460:	d505      	bpl.n	801d46e <_fwalk_sglue+0x22>
 801d462:	6824      	ldr	r4, [r4, #0]
 801d464:	2c00      	cmp	r4, #0
 801d466:	d1f7      	bne.n	801d458 <_fwalk_sglue+0xc>
 801d468:	4630      	mov	r0, r6
 801d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d46e:	89ab      	ldrh	r3, [r5, #12]
 801d470:	2b01      	cmp	r3, #1
 801d472:	d907      	bls.n	801d484 <_fwalk_sglue+0x38>
 801d474:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d478:	3301      	adds	r3, #1
 801d47a:	d003      	beq.n	801d484 <_fwalk_sglue+0x38>
 801d47c:	4629      	mov	r1, r5
 801d47e:	4638      	mov	r0, r7
 801d480:	47c0      	blx	r8
 801d482:	4306      	orrs	r6, r0
 801d484:	3568      	adds	r5, #104	@ 0x68
 801d486:	e7e9      	b.n	801d45c <_fwalk_sglue+0x10>

0801d488 <iprintf>:
 801d488:	b40f      	push	{r0, r1, r2, r3}
 801d48a:	b507      	push	{r0, r1, r2, lr}
 801d48c:	4906      	ldr	r1, [pc, #24]	@ (801d4a8 <iprintf+0x20>)
 801d48e:	ab04      	add	r3, sp, #16
 801d490:	6808      	ldr	r0, [r1, #0]
 801d492:	f853 2b04 	ldr.w	r2, [r3], #4
 801d496:	6881      	ldr	r1, [r0, #8]
 801d498:	9301      	str	r3, [sp, #4]
 801d49a:	f001 fe01 	bl	801f0a0 <_vfiprintf_r>
 801d49e:	b003      	add	sp, #12
 801d4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4a4:	b004      	add	sp, #16
 801d4a6:	4770      	bx	lr
 801d4a8:	20000094 	.word	0x20000094

0801d4ac <siprintf>:
 801d4ac:	b40e      	push	{r1, r2, r3}
 801d4ae:	b500      	push	{lr}
 801d4b0:	b09c      	sub	sp, #112	@ 0x70
 801d4b2:	ab1d      	add	r3, sp, #116	@ 0x74
 801d4b4:	9002      	str	r0, [sp, #8]
 801d4b6:	9006      	str	r0, [sp, #24]
 801d4b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d4bc:	4809      	ldr	r0, [pc, #36]	@ (801d4e4 <siprintf+0x38>)
 801d4be:	9107      	str	r1, [sp, #28]
 801d4c0:	9104      	str	r1, [sp, #16]
 801d4c2:	4909      	ldr	r1, [pc, #36]	@ (801d4e8 <siprintf+0x3c>)
 801d4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4c8:	9105      	str	r1, [sp, #20]
 801d4ca:	6800      	ldr	r0, [r0, #0]
 801d4cc:	9301      	str	r3, [sp, #4]
 801d4ce:	a902      	add	r1, sp, #8
 801d4d0:	f001 fcc0 	bl	801ee54 <_svfiprintf_r>
 801d4d4:	9b02      	ldr	r3, [sp, #8]
 801d4d6:	2200      	movs	r2, #0
 801d4d8:	701a      	strb	r2, [r3, #0]
 801d4da:	b01c      	add	sp, #112	@ 0x70
 801d4dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4e0:	b003      	add	sp, #12
 801d4e2:	4770      	bx	lr
 801d4e4:	20000094 	.word	0x20000094
 801d4e8:	ffff0208 	.word	0xffff0208

0801d4ec <__sread>:
 801d4ec:	b510      	push	{r4, lr}
 801d4ee:	460c      	mov	r4, r1
 801d4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4f4:	f000 f90a 	bl	801d70c <_read_r>
 801d4f8:	2800      	cmp	r0, #0
 801d4fa:	bfab      	itete	ge
 801d4fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d4fe:	89a3      	ldrhlt	r3, [r4, #12]
 801d500:	181b      	addge	r3, r3, r0
 801d502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d506:	bfac      	ite	ge
 801d508:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d50a:	81a3      	strhlt	r3, [r4, #12]
 801d50c:	bd10      	pop	{r4, pc}

0801d50e <__swrite>:
 801d50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d512:	461f      	mov	r7, r3
 801d514:	898b      	ldrh	r3, [r1, #12]
 801d516:	05db      	lsls	r3, r3, #23
 801d518:	4605      	mov	r5, r0
 801d51a:	460c      	mov	r4, r1
 801d51c:	4616      	mov	r6, r2
 801d51e:	d505      	bpl.n	801d52c <__swrite+0x1e>
 801d520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d524:	2302      	movs	r3, #2
 801d526:	2200      	movs	r2, #0
 801d528:	f000 f8de 	bl	801d6e8 <_lseek_r>
 801d52c:	89a3      	ldrh	r3, [r4, #12]
 801d52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d536:	81a3      	strh	r3, [r4, #12]
 801d538:	4632      	mov	r2, r6
 801d53a:	463b      	mov	r3, r7
 801d53c:	4628      	mov	r0, r5
 801d53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d542:	f000 b8f5 	b.w	801d730 <_write_r>

0801d546 <__sseek>:
 801d546:	b510      	push	{r4, lr}
 801d548:	460c      	mov	r4, r1
 801d54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d54e:	f000 f8cb 	bl	801d6e8 <_lseek_r>
 801d552:	1c43      	adds	r3, r0, #1
 801d554:	89a3      	ldrh	r3, [r4, #12]
 801d556:	bf15      	itete	ne
 801d558:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d55a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d55e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d562:	81a3      	strheq	r3, [r4, #12]
 801d564:	bf18      	it	ne
 801d566:	81a3      	strhne	r3, [r4, #12]
 801d568:	bd10      	pop	{r4, pc}

0801d56a <__sclose>:
 801d56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d56e:	f000 b855 	b.w	801d61c <_close_r>

0801d572 <memcmp>:
 801d572:	b510      	push	{r4, lr}
 801d574:	3901      	subs	r1, #1
 801d576:	4402      	add	r2, r0
 801d578:	4290      	cmp	r0, r2
 801d57a:	d101      	bne.n	801d580 <memcmp+0xe>
 801d57c:	2000      	movs	r0, #0
 801d57e:	e005      	b.n	801d58c <memcmp+0x1a>
 801d580:	7803      	ldrb	r3, [r0, #0]
 801d582:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d586:	42a3      	cmp	r3, r4
 801d588:	d001      	beq.n	801d58e <memcmp+0x1c>
 801d58a:	1b18      	subs	r0, r3, r4
 801d58c:	bd10      	pop	{r4, pc}
 801d58e:	3001      	adds	r0, #1
 801d590:	e7f2      	b.n	801d578 <memcmp+0x6>

0801d592 <memmove>:
 801d592:	4288      	cmp	r0, r1
 801d594:	b510      	push	{r4, lr}
 801d596:	eb01 0402 	add.w	r4, r1, r2
 801d59a:	d902      	bls.n	801d5a2 <memmove+0x10>
 801d59c:	4284      	cmp	r4, r0
 801d59e:	4623      	mov	r3, r4
 801d5a0:	d807      	bhi.n	801d5b2 <memmove+0x20>
 801d5a2:	1e43      	subs	r3, r0, #1
 801d5a4:	42a1      	cmp	r1, r4
 801d5a6:	d008      	beq.n	801d5ba <memmove+0x28>
 801d5a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d5ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d5b0:	e7f8      	b.n	801d5a4 <memmove+0x12>
 801d5b2:	4402      	add	r2, r0
 801d5b4:	4601      	mov	r1, r0
 801d5b6:	428a      	cmp	r2, r1
 801d5b8:	d100      	bne.n	801d5bc <memmove+0x2a>
 801d5ba:	bd10      	pop	{r4, pc}
 801d5bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d5c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d5c4:	e7f7      	b.n	801d5b6 <memmove+0x24>

0801d5c6 <memset>:
 801d5c6:	4402      	add	r2, r0
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	4293      	cmp	r3, r2
 801d5cc:	d100      	bne.n	801d5d0 <memset+0xa>
 801d5ce:	4770      	bx	lr
 801d5d0:	f803 1b01 	strb.w	r1, [r3], #1
 801d5d4:	e7f9      	b.n	801d5ca <memset+0x4>

0801d5d6 <strchr>:
 801d5d6:	b2c9      	uxtb	r1, r1
 801d5d8:	4603      	mov	r3, r0
 801d5da:	4618      	mov	r0, r3
 801d5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d5e0:	b112      	cbz	r2, 801d5e8 <strchr+0x12>
 801d5e2:	428a      	cmp	r2, r1
 801d5e4:	d1f9      	bne.n	801d5da <strchr+0x4>
 801d5e6:	4770      	bx	lr
 801d5e8:	2900      	cmp	r1, #0
 801d5ea:	bf18      	it	ne
 801d5ec:	2000      	movne	r0, #0
 801d5ee:	4770      	bx	lr

0801d5f0 <strncmp>:
 801d5f0:	b510      	push	{r4, lr}
 801d5f2:	b16a      	cbz	r2, 801d610 <strncmp+0x20>
 801d5f4:	3901      	subs	r1, #1
 801d5f6:	1884      	adds	r4, r0, r2
 801d5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d600:	429a      	cmp	r2, r3
 801d602:	d103      	bne.n	801d60c <strncmp+0x1c>
 801d604:	42a0      	cmp	r0, r4
 801d606:	d001      	beq.n	801d60c <strncmp+0x1c>
 801d608:	2a00      	cmp	r2, #0
 801d60a:	d1f5      	bne.n	801d5f8 <strncmp+0x8>
 801d60c:	1ad0      	subs	r0, r2, r3
 801d60e:	bd10      	pop	{r4, pc}
 801d610:	4610      	mov	r0, r2
 801d612:	e7fc      	b.n	801d60e <strncmp+0x1e>

0801d614 <_localeconv_r>:
 801d614:	4800      	ldr	r0, [pc, #0]	@ (801d618 <_localeconv_r+0x4>)
 801d616:	4770      	bx	lr
 801d618:	200001d4 	.word	0x200001d4

0801d61c <_close_r>:
 801d61c:	b538      	push	{r3, r4, r5, lr}
 801d61e:	4d06      	ldr	r5, [pc, #24]	@ (801d638 <_close_r+0x1c>)
 801d620:	2300      	movs	r3, #0
 801d622:	4604      	mov	r4, r0
 801d624:	4608      	mov	r0, r1
 801d626:	602b      	str	r3, [r5, #0]
 801d628:	f7e5 fe02 	bl	8003230 <_close>
 801d62c:	1c43      	adds	r3, r0, #1
 801d62e:	d102      	bne.n	801d636 <_close_r+0x1a>
 801d630:	682b      	ldr	r3, [r5, #0]
 801d632:	b103      	cbz	r3, 801d636 <_close_r+0x1a>
 801d634:	6023      	str	r3, [r4, #0]
 801d636:	bd38      	pop	{r3, r4, r5, pc}
 801d638:	2000f630 	.word	0x2000f630

0801d63c <_reclaim_reent>:
 801d63c:	4b29      	ldr	r3, [pc, #164]	@ (801d6e4 <_reclaim_reent+0xa8>)
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	4283      	cmp	r3, r0
 801d642:	b570      	push	{r4, r5, r6, lr}
 801d644:	4604      	mov	r4, r0
 801d646:	d04b      	beq.n	801d6e0 <_reclaim_reent+0xa4>
 801d648:	69c3      	ldr	r3, [r0, #28]
 801d64a:	b1ab      	cbz	r3, 801d678 <_reclaim_reent+0x3c>
 801d64c:	68db      	ldr	r3, [r3, #12]
 801d64e:	b16b      	cbz	r3, 801d66c <_reclaim_reent+0x30>
 801d650:	2500      	movs	r5, #0
 801d652:	69e3      	ldr	r3, [r4, #28]
 801d654:	68db      	ldr	r3, [r3, #12]
 801d656:	5959      	ldr	r1, [r3, r5]
 801d658:	2900      	cmp	r1, #0
 801d65a:	d13b      	bne.n	801d6d4 <_reclaim_reent+0x98>
 801d65c:	3504      	adds	r5, #4
 801d65e:	2d80      	cmp	r5, #128	@ 0x80
 801d660:	d1f7      	bne.n	801d652 <_reclaim_reent+0x16>
 801d662:	69e3      	ldr	r3, [r4, #28]
 801d664:	4620      	mov	r0, r4
 801d666:	68d9      	ldr	r1, [r3, #12]
 801d668:	f000 ff16 	bl	801e498 <_free_r>
 801d66c:	69e3      	ldr	r3, [r4, #28]
 801d66e:	6819      	ldr	r1, [r3, #0]
 801d670:	b111      	cbz	r1, 801d678 <_reclaim_reent+0x3c>
 801d672:	4620      	mov	r0, r4
 801d674:	f000 ff10 	bl	801e498 <_free_r>
 801d678:	6961      	ldr	r1, [r4, #20]
 801d67a:	b111      	cbz	r1, 801d682 <_reclaim_reent+0x46>
 801d67c:	4620      	mov	r0, r4
 801d67e:	f000 ff0b 	bl	801e498 <_free_r>
 801d682:	69e1      	ldr	r1, [r4, #28]
 801d684:	b111      	cbz	r1, 801d68c <_reclaim_reent+0x50>
 801d686:	4620      	mov	r0, r4
 801d688:	f000 ff06 	bl	801e498 <_free_r>
 801d68c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d68e:	b111      	cbz	r1, 801d696 <_reclaim_reent+0x5a>
 801d690:	4620      	mov	r0, r4
 801d692:	f000 ff01 	bl	801e498 <_free_r>
 801d696:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d698:	b111      	cbz	r1, 801d6a0 <_reclaim_reent+0x64>
 801d69a:	4620      	mov	r0, r4
 801d69c:	f000 fefc 	bl	801e498 <_free_r>
 801d6a0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d6a2:	b111      	cbz	r1, 801d6aa <_reclaim_reent+0x6e>
 801d6a4:	4620      	mov	r0, r4
 801d6a6:	f000 fef7 	bl	801e498 <_free_r>
 801d6aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d6ac:	b111      	cbz	r1, 801d6b4 <_reclaim_reent+0x78>
 801d6ae:	4620      	mov	r0, r4
 801d6b0:	f000 fef2 	bl	801e498 <_free_r>
 801d6b4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d6b6:	b111      	cbz	r1, 801d6be <_reclaim_reent+0x82>
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	f000 feed 	bl	801e498 <_free_r>
 801d6be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d6c0:	b111      	cbz	r1, 801d6c8 <_reclaim_reent+0x8c>
 801d6c2:	4620      	mov	r0, r4
 801d6c4:	f000 fee8 	bl	801e498 <_free_r>
 801d6c8:	6a23      	ldr	r3, [r4, #32]
 801d6ca:	b14b      	cbz	r3, 801d6e0 <_reclaim_reent+0xa4>
 801d6cc:	4620      	mov	r0, r4
 801d6ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d6d2:	4718      	bx	r3
 801d6d4:	680e      	ldr	r6, [r1, #0]
 801d6d6:	4620      	mov	r0, r4
 801d6d8:	f000 fede 	bl	801e498 <_free_r>
 801d6dc:	4631      	mov	r1, r6
 801d6de:	e7bb      	b.n	801d658 <_reclaim_reent+0x1c>
 801d6e0:	bd70      	pop	{r4, r5, r6, pc}
 801d6e2:	bf00      	nop
 801d6e4:	20000094 	.word	0x20000094

0801d6e8 <_lseek_r>:
 801d6e8:	b538      	push	{r3, r4, r5, lr}
 801d6ea:	4d07      	ldr	r5, [pc, #28]	@ (801d708 <_lseek_r+0x20>)
 801d6ec:	4604      	mov	r4, r0
 801d6ee:	4608      	mov	r0, r1
 801d6f0:	4611      	mov	r1, r2
 801d6f2:	2200      	movs	r2, #0
 801d6f4:	602a      	str	r2, [r5, #0]
 801d6f6:	461a      	mov	r2, r3
 801d6f8:	f7e5 fdc1 	bl	800327e <_lseek>
 801d6fc:	1c43      	adds	r3, r0, #1
 801d6fe:	d102      	bne.n	801d706 <_lseek_r+0x1e>
 801d700:	682b      	ldr	r3, [r5, #0]
 801d702:	b103      	cbz	r3, 801d706 <_lseek_r+0x1e>
 801d704:	6023      	str	r3, [r4, #0]
 801d706:	bd38      	pop	{r3, r4, r5, pc}
 801d708:	2000f630 	.word	0x2000f630

0801d70c <_read_r>:
 801d70c:	b538      	push	{r3, r4, r5, lr}
 801d70e:	4d07      	ldr	r5, [pc, #28]	@ (801d72c <_read_r+0x20>)
 801d710:	4604      	mov	r4, r0
 801d712:	4608      	mov	r0, r1
 801d714:	4611      	mov	r1, r2
 801d716:	2200      	movs	r2, #0
 801d718:	602a      	str	r2, [r5, #0]
 801d71a:	461a      	mov	r2, r3
 801d71c:	f7e5 fd6b 	bl	80031f6 <_read>
 801d720:	1c43      	adds	r3, r0, #1
 801d722:	d102      	bne.n	801d72a <_read_r+0x1e>
 801d724:	682b      	ldr	r3, [r5, #0]
 801d726:	b103      	cbz	r3, 801d72a <_read_r+0x1e>
 801d728:	6023      	str	r3, [r4, #0]
 801d72a:	bd38      	pop	{r3, r4, r5, pc}
 801d72c:	2000f630 	.word	0x2000f630

0801d730 <_write_r>:
 801d730:	b538      	push	{r3, r4, r5, lr}
 801d732:	4d07      	ldr	r5, [pc, #28]	@ (801d750 <_write_r+0x20>)
 801d734:	4604      	mov	r4, r0
 801d736:	4608      	mov	r0, r1
 801d738:	4611      	mov	r1, r2
 801d73a:	2200      	movs	r2, #0
 801d73c:	602a      	str	r2, [r5, #0]
 801d73e:	461a      	mov	r2, r3
 801d740:	f7e5 fa88 	bl	8002c54 <_write>
 801d744:	1c43      	adds	r3, r0, #1
 801d746:	d102      	bne.n	801d74e <_write_r+0x1e>
 801d748:	682b      	ldr	r3, [r5, #0]
 801d74a:	b103      	cbz	r3, 801d74e <_write_r+0x1e>
 801d74c:	6023      	str	r3, [r4, #0]
 801d74e:	bd38      	pop	{r3, r4, r5, pc}
 801d750:	2000f630 	.word	0x2000f630

0801d754 <__libc_init_array>:
 801d754:	b570      	push	{r4, r5, r6, lr}
 801d756:	4d0d      	ldr	r5, [pc, #52]	@ (801d78c <__libc_init_array+0x38>)
 801d758:	4c0d      	ldr	r4, [pc, #52]	@ (801d790 <__libc_init_array+0x3c>)
 801d75a:	1b64      	subs	r4, r4, r5
 801d75c:	10a4      	asrs	r4, r4, #2
 801d75e:	2600      	movs	r6, #0
 801d760:	42a6      	cmp	r6, r4
 801d762:	d109      	bne.n	801d778 <__libc_init_array+0x24>
 801d764:	4d0b      	ldr	r5, [pc, #44]	@ (801d794 <__libc_init_array+0x40>)
 801d766:	4c0c      	ldr	r4, [pc, #48]	@ (801d798 <__libc_init_array+0x44>)
 801d768:	f002 f84c 	bl	801f804 <_init>
 801d76c:	1b64      	subs	r4, r4, r5
 801d76e:	10a4      	asrs	r4, r4, #2
 801d770:	2600      	movs	r6, #0
 801d772:	42a6      	cmp	r6, r4
 801d774:	d105      	bne.n	801d782 <__libc_init_array+0x2e>
 801d776:	bd70      	pop	{r4, r5, r6, pc}
 801d778:	f855 3b04 	ldr.w	r3, [r5], #4
 801d77c:	4798      	blx	r3
 801d77e:	3601      	adds	r6, #1
 801d780:	e7ee      	b.n	801d760 <__libc_init_array+0xc>
 801d782:	f855 3b04 	ldr.w	r3, [r5], #4
 801d786:	4798      	blx	r3
 801d788:	3601      	adds	r6, #1
 801d78a:	e7f2      	b.n	801d772 <__libc_init_array+0x1e>
 801d78c:	08024e0c 	.word	0x08024e0c
 801d790:	08024e0c 	.word	0x08024e0c
 801d794:	08024e0c 	.word	0x08024e0c
 801d798:	08024e10 	.word	0x08024e10

0801d79c <__retarget_lock_init_recursive>:
 801d79c:	4770      	bx	lr

0801d79e <__retarget_lock_acquire_recursive>:
 801d79e:	4770      	bx	lr

0801d7a0 <__retarget_lock_release_recursive>:
 801d7a0:	4770      	bx	lr

0801d7a2 <memcpy>:
 801d7a2:	440a      	add	r2, r1
 801d7a4:	4291      	cmp	r1, r2
 801d7a6:	f100 33ff 	add.w	r3, r0, #4294967295
 801d7aa:	d100      	bne.n	801d7ae <memcpy+0xc>
 801d7ac:	4770      	bx	lr
 801d7ae:	b510      	push	{r4, lr}
 801d7b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d7b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d7b8:	4291      	cmp	r1, r2
 801d7ba:	d1f9      	bne.n	801d7b0 <memcpy+0xe>
 801d7bc:	bd10      	pop	{r4, pc}
	...

0801d7c0 <__assert_func>:
 801d7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d7c2:	4614      	mov	r4, r2
 801d7c4:	461a      	mov	r2, r3
 801d7c6:	4b09      	ldr	r3, [pc, #36]	@ (801d7ec <__assert_func+0x2c>)
 801d7c8:	681b      	ldr	r3, [r3, #0]
 801d7ca:	4605      	mov	r5, r0
 801d7cc:	68d8      	ldr	r0, [r3, #12]
 801d7ce:	b954      	cbnz	r4, 801d7e6 <__assert_func+0x26>
 801d7d0:	4b07      	ldr	r3, [pc, #28]	@ (801d7f0 <__assert_func+0x30>)
 801d7d2:	461c      	mov	r4, r3
 801d7d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d7d8:	9100      	str	r1, [sp, #0]
 801d7da:	462b      	mov	r3, r5
 801d7dc:	4905      	ldr	r1, [pc, #20]	@ (801d7f4 <__assert_func+0x34>)
 801d7de:	f001 fe23 	bl	801f428 <fiprintf>
 801d7e2:	f001 fed7 	bl	801f594 <abort>
 801d7e6:	4b04      	ldr	r3, [pc, #16]	@ (801d7f8 <__assert_func+0x38>)
 801d7e8:	e7f4      	b.n	801d7d4 <__assert_func+0x14>
 801d7ea:	bf00      	nop
 801d7ec:	20000094 	.word	0x20000094
 801d7f0:	08024c17 	.word	0x08024c17
 801d7f4:	08024be9 	.word	0x08024be9
 801d7f8:	08024bdc 	.word	0x08024bdc

0801d7fc <quorem>:
 801d7fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d800:	6903      	ldr	r3, [r0, #16]
 801d802:	690c      	ldr	r4, [r1, #16]
 801d804:	42a3      	cmp	r3, r4
 801d806:	4607      	mov	r7, r0
 801d808:	db7e      	blt.n	801d908 <quorem+0x10c>
 801d80a:	3c01      	subs	r4, #1
 801d80c:	f101 0814 	add.w	r8, r1, #20
 801d810:	00a3      	lsls	r3, r4, #2
 801d812:	f100 0514 	add.w	r5, r0, #20
 801d816:	9300      	str	r3, [sp, #0]
 801d818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d81c:	9301      	str	r3, [sp, #4]
 801d81e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d826:	3301      	adds	r3, #1
 801d828:	429a      	cmp	r2, r3
 801d82a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d82e:	fbb2 f6f3 	udiv	r6, r2, r3
 801d832:	d32e      	bcc.n	801d892 <quorem+0x96>
 801d834:	f04f 0a00 	mov.w	sl, #0
 801d838:	46c4      	mov	ip, r8
 801d83a:	46ae      	mov	lr, r5
 801d83c:	46d3      	mov	fp, sl
 801d83e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d842:	b298      	uxth	r0, r3
 801d844:	fb06 a000 	mla	r0, r6, r0, sl
 801d848:	0c02      	lsrs	r2, r0, #16
 801d84a:	0c1b      	lsrs	r3, r3, #16
 801d84c:	fb06 2303 	mla	r3, r6, r3, r2
 801d850:	f8de 2000 	ldr.w	r2, [lr]
 801d854:	b280      	uxth	r0, r0
 801d856:	b292      	uxth	r2, r2
 801d858:	1a12      	subs	r2, r2, r0
 801d85a:	445a      	add	r2, fp
 801d85c:	f8de 0000 	ldr.w	r0, [lr]
 801d860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d864:	b29b      	uxth	r3, r3
 801d866:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801d86a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801d86e:	b292      	uxth	r2, r2
 801d870:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d874:	45e1      	cmp	r9, ip
 801d876:	f84e 2b04 	str.w	r2, [lr], #4
 801d87a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801d87e:	d2de      	bcs.n	801d83e <quorem+0x42>
 801d880:	9b00      	ldr	r3, [sp, #0]
 801d882:	58eb      	ldr	r3, [r5, r3]
 801d884:	b92b      	cbnz	r3, 801d892 <quorem+0x96>
 801d886:	9b01      	ldr	r3, [sp, #4]
 801d888:	3b04      	subs	r3, #4
 801d88a:	429d      	cmp	r5, r3
 801d88c:	461a      	mov	r2, r3
 801d88e:	d32f      	bcc.n	801d8f0 <quorem+0xf4>
 801d890:	613c      	str	r4, [r7, #16]
 801d892:	4638      	mov	r0, r7
 801d894:	f001 f97a 	bl	801eb8c <__mcmp>
 801d898:	2800      	cmp	r0, #0
 801d89a:	db25      	blt.n	801d8e8 <quorem+0xec>
 801d89c:	4629      	mov	r1, r5
 801d89e:	2000      	movs	r0, #0
 801d8a0:	f858 2b04 	ldr.w	r2, [r8], #4
 801d8a4:	f8d1 c000 	ldr.w	ip, [r1]
 801d8a8:	fa1f fe82 	uxth.w	lr, r2
 801d8ac:	fa1f f38c 	uxth.w	r3, ip
 801d8b0:	eba3 030e 	sub.w	r3, r3, lr
 801d8b4:	4403      	add	r3, r0
 801d8b6:	0c12      	lsrs	r2, r2, #16
 801d8b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801d8bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801d8c0:	b29b      	uxth	r3, r3
 801d8c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d8c6:	45c1      	cmp	r9, r8
 801d8c8:	f841 3b04 	str.w	r3, [r1], #4
 801d8cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801d8d0:	d2e6      	bcs.n	801d8a0 <quorem+0xa4>
 801d8d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d8d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d8da:	b922      	cbnz	r2, 801d8e6 <quorem+0xea>
 801d8dc:	3b04      	subs	r3, #4
 801d8de:	429d      	cmp	r5, r3
 801d8e0:	461a      	mov	r2, r3
 801d8e2:	d30b      	bcc.n	801d8fc <quorem+0x100>
 801d8e4:	613c      	str	r4, [r7, #16]
 801d8e6:	3601      	adds	r6, #1
 801d8e8:	4630      	mov	r0, r6
 801d8ea:	b003      	add	sp, #12
 801d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8f0:	6812      	ldr	r2, [r2, #0]
 801d8f2:	3b04      	subs	r3, #4
 801d8f4:	2a00      	cmp	r2, #0
 801d8f6:	d1cb      	bne.n	801d890 <quorem+0x94>
 801d8f8:	3c01      	subs	r4, #1
 801d8fa:	e7c6      	b.n	801d88a <quorem+0x8e>
 801d8fc:	6812      	ldr	r2, [r2, #0]
 801d8fe:	3b04      	subs	r3, #4
 801d900:	2a00      	cmp	r2, #0
 801d902:	d1ef      	bne.n	801d8e4 <quorem+0xe8>
 801d904:	3c01      	subs	r4, #1
 801d906:	e7ea      	b.n	801d8de <quorem+0xe2>
 801d908:	2000      	movs	r0, #0
 801d90a:	e7ee      	b.n	801d8ea <quorem+0xee>
 801d90c:	0000      	movs	r0, r0
	...

0801d910 <_dtoa_r>:
 801d910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d914:	69c7      	ldr	r7, [r0, #28]
 801d916:	b099      	sub	sp, #100	@ 0x64
 801d918:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d91c:	ec55 4b10 	vmov	r4, r5, d0
 801d920:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801d922:	9109      	str	r1, [sp, #36]	@ 0x24
 801d924:	4683      	mov	fp, r0
 801d926:	920e      	str	r2, [sp, #56]	@ 0x38
 801d928:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d92a:	b97f      	cbnz	r7, 801d94c <_dtoa_r+0x3c>
 801d92c:	2010      	movs	r0, #16
 801d92e:	f000 fdfd 	bl	801e52c <malloc>
 801d932:	4602      	mov	r2, r0
 801d934:	f8cb 001c 	str.w	r0, [fp, #28]
 801d938:	b920      	cbnz	r0, 801d944 <_dtoa_r+0x34>
 801d93a:	4ba7      	ldr	r3, [pc, #668]	@ (801dbd8 <_dtoa_r+0x2c8>)
 801d93c:	21ef      	movs	r1, #239	@ 0xef
 801d93e:	48a7      	ldr	r0, [pc, #668]	@ (801dbdc <_dtoa_r+0x2cc>)
 801d940:	f7ff ff3e 	bl	801d7c0 <__assert_func>
 801d944:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801d948:	6007      	str	r7, [r0, #0]
 801d94a:	60c7      	str	r7, [r0, #12]
 801d94c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d950:	6819      	ldr	r1, [r3, #0]
 801d952:	b159      	cbz	r1, 801d96c <_dtoa_r+0x5c>
 801d954:	685a      	ldr	r2, [r3, #4]
 801d956:	604a      	str	r2, [r1, #4]
 801d958:	2301      	movs	r3, #1
 801d95a:	4093      	lsls	r3, r2
 801d95c:	608b      	str	r3, [r1, #8]
 801d95e:	4658      	mov	r0, fp
 801d960:	f000 feda 	bl	801e718 <_Bfree>
 801d964:	f8db 301c 	ldr.w	r3, [fp, #28]
 801d968:	2200      	movs	r2, #0
 801d96a:	601a      	str	r2, [r3, #0]
 801d96c:	1e2b      	subs	r3, r5, #0
 801d96e:	bfb9      	ittee	lt
 801d970:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801d974:	9303      	strlt	r3, [sp, #12]
 801d976:	2300      	movge	r3, #0
 801d978:	6033      	strge	r3, [r6, #0]
 801d97a:	9f03      	ldr	r7, [sp, #12]
 801d97c:	4b98      	ldr	r3, [pc, #608]	@ (801dbe0 <_dtoa_r+0x2d0>)
 801d97e:	bfbc      	itt	lt
 801d980:	2201      	movlt	r2, #1
 801d982:	6032      	strlt	r2, [r6, #0]
 801d984:	43bb      	bics	r3, r7
 801d986:	d112      	bne.n	801d9ae <_dtoa_r+0x9e>
 801d988:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d98a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801d98e:	6013      	str	r3, [r2, #0]
 801d990:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d994:	4323      	orrs	r3, r4
 801d996:	f000 854d 	beq.w	801e434 <_dtoa_r+0xb24>
 801d99a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d99c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801dbf4 <_dtoa_r+0x2e4>
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	f000 854f 	beq.w	801e444 <_dtoa_r+0xb34>
 801d9a6:	f10a 0303 	add.w	r3, sl, #3
 801d9aa:	f000 bd49 	b.w	801e440 <_dtoa_r+0xb30>
 801d9ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d9b2:	2200      	movs	r2, #0
 801d9b4:	ec51 0b17 	vmov	r0, r1, d7
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801d9be:	f7e3 f8b3 	bl	8000b28 <__aeabi_dcmpeq>
 801d9c2:	4680      	mov	r8, r0
 801d9c4:	b158      	cbz	r0, 801d9de <_dtoa_r+0xce>
 801d9c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d9c8:	2301      	movs	r3, #1
 801d9ca:	6013      	str	r3, [r2, #0]
 801d9cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d9ce:	b113      	cbz	r3, 801d9d6 <_dtoa_r+0xc6>
 801d9d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801d9d2:	4b84      	ldr	r3, [pc, #528]	@ (801dbe4 <_dtoa_r+0x2d4>)
 801d9d4:	6013      	str	r3, [r2, #0]
 801d9d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801dbf8 <_dtoa_r+0x2e8>
 801d9da:	f000 bd33 	b.w	801e444 <_dtoa_r+0xb34>
 801d9de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d9e2:	aa16      	add	r2, sp, #88	@ 0x58
 801d9e4:	a917      	add	r1, sp, #92	@ 0x5c
 801d9e6:	4658      	mov	r0, fp
 801d9e8:	f001 f980 	bl	801ecec <__d2b>
 801d9ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801d9f0:	4681      	mov	r9, r0
 801d9f2:	2e00      	cmp	r6, #0
 801d9f4:	d077      	beq.n	801dae6 <_dtoa_r+0x1d6>
 801d9f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d9f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801d9fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801da00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801da08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801da0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801da10:	4619      	mov	r1, r3
 801da12:	2200      	movs	r2, #0
 801da14:	4b74      	ldr	r3, [pc, #464]	@ (801dbe8 <_dtoa_r+0x2d8>)
 801da16:	f7e2 fc67 	bl	80002e8 <__aeabi_dsub>
 801da1a:	a369      	add	r3, pc, #420	@ (adr r3, 801dbc0 <_dtoa_r+0x2b0>)
 801da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da20:	f7e2 fe1a 	bl	8000658 <__aeabi_dmul>
 801da24:	a368      	add	r3, pc, #416	@ (adr r3, 801dbc8 <_dtoa_r+0x2b8>)
 801da26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da2a:	f7e2 fc5f 	bl	80002ec <__adddf3>
 801da2e:	4604      	mov	r4, r0
 801da30:	4630      	mov	r0, r6
 801da32:	460d      	mov	r5, r1
 801da34:	f7e2 fda6 	bl	8000584 <__aeabi_i2d>
 801da38:	a365      	add	r3, pc, #404	@ (adr r3, 801dbd0 <_dtoa_r+0x2c0>)
 801da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da3e:	f7e2 fe0b 	bl	8000658 <__aeabi_dmul>
 801da42:	4602      	mov	r2, r0
 801da44:	460b      	mov	r3, r1
 801da46:	4620      	mov	r0, r4
 801da48:	4629      	mov	r1, r5
 801da4a:	f7e2 fc4f 	bl	80002ec <__adddf3>
 801da4e:	4604      	mov	r4, r0
 801da50:	460d      	mov	r5, r1
 801da52:	f7e3 f8b1 	bl	8000bb8 <__aeabi_d2iz>
 801da56:	2200      	movs	r2, #0
 801da58:	4607      	mov	r7, r0
 801da5a:	2300      	movs	r3, #0
 801da5c:	4620      	mov	r0, r4
 801da5e:	4629      	mov	r1, r5
 801da60:	f7e3 f86c 	bl	8000b3c <__aeabi_dcmplt>
 801da64:	b140      	cbz	r0, 801da78 <_dtoa_r+0x168>
 801da66:	4638      	mov	r0, r7
 801da68:	f7e2 fd8c 	bl	8000584 <__aeabi_i2d>
 801da6c:	4622      	mov	r2, r4
 801da6e:	462b      	mov	r3, r5
 801da70:	f7e3 f85a 	bl	8000b28 <__aeabi_dcmpeq>
 801da74:	b900      	cbnz	r0, 801da78 <_dtoa_r+0x168>
 801da76:	3f01      	subs	r7, #1
 801da78:	2f16      	cmp	r7, #22
 801da7a:	d851      	bhi.n	801db20 <_dtoa_r+0x210>
 801da7c:	4b5b      	ldr	r3, [pc, #364]	@ (801dbec <_dtoa_r+0x2dc>)
 801da7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da8a:	f7e3 f857 	bl	8000b3c <__aeabi_dcmplt>
 801da8e:	2800      	cmp	r0, #0
 801da90:	d048      	beq.n	801db24 <_dtoa_r+0x214>
 801da92:	3f01      	subs	r7, #1
 801da94:	2300      	movs	r3, #0
 801da96:	9312      	str	r3, [sp, #72]	@ 0x48
 801da98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801da9a:	1b9b      	subs	r3, r3, r6
 801da9c:	1e5a      	subs	r2, r3, #1
 801da9e:	bf44      	itt	mi
 801daa0:	f1c3 0801 	rsbmi	r8, r3, #1
 801daa4:	2300      	movmi	r3, #0
 801daa6:	9208      	str	r2, [sp, #32]
 801daa8:	bf54      	ite	pl
 801daaa:	f04f 0800 	movpl.w	r8, #0
 801daae:	9308      	strmi	r3, [sp, #32]
 801dab0:	2f00      	cmp	r7, #0
 801dab2:	db39      	blt.n	801db28 <_dtoa_r+0x218>
 801dab4:	9b08      	ldr	r3, [sp, #32]
 801dab6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801dab8:	443b      	add	r3, r7
 801daba:	9308      	str	r3, [sp, #32]
 801dabc:	2300      	movs	r3, #0
 801dabe:	930a      	str	r3, [sp, #40]	@ 0x28
 801dac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dac2:	2b09      	cmp	r3, #9
 801dac4:	d864      	bhi.n	801db90 <_dtoa_r+0x280>
 801dac6:	2b05      	cmp	r3, #5
 801dac8:	bfc4      	itt	gt
 801daca:	3b04      	subgt	r3, #4
 801dacc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801dace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dad0:	f1a3 0302 	sub.w	r3, r3, #2
 801dad4:	bfcc      	ite	gt
 801dad6:	2400      	movgt	r4, #0
 801dad8:	2401      	movle	r4, #1
 801dada:	2b03      	cmp	r3, #3
 801dadc:	d863      	bhi.n	801dba6 <_dtoa_r+0x296>
 801dade:	e8df f003 	tbb	[pc, r3]
 801dae2:	372a      	.short	0x372a
 801dae4:	5535      	.short	0x5535
 801dae6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801daea:	441e      	add	r6, r3
 801daec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801daf0:	2b20      	cmp	r3, #32
 801daf2:	bfc1      	itttt	gt
 801daf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801daf8:	409f      	lslgt	r7, r3
 801dafa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801dafe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801db02:	bfd6      	itet	le
 801db04:	f1c3 0320 	rsble	r3, r3, #32
 801db08:	ea47 0003 	orrgt.w	r0, r7, r3
 801db0c:	fa04 f003 	lslle.w	r0, r4, r3
 801db10:	f7e2 fd28 	bl	8000564 <__aeabi_ui2d>
 801db14:	2201      	movs	r2, #1
 801db16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801db1a:	3e01      	subs	r6, #1
 801db1c:	9214      	str	r2, [sp, #80]	@ 0x50
 801db1e:	e777      	b.n	801da10 <_dtoa_r+0x100>
 801db20:	2301      	movs	r3, #1
 801db22:	e7b8      	b.n	801da96 <_dtoa_r+0x186>
 801db24:	9012      	str	r0, [sp, #72]	@ 0x48
 801db26:	e7b7      	b.n	801da98 <_dtoa_r+0x188>
 801db28:	427b      	negs	r3, r7
 801db2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801db2c:	2300      	movs	r3, #0
 801db2e:	eba8 0807 	sub.w	r8, r8, r7
 801db32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801db34:	e7c4      	b.n	801dac0 <_dtoa_r+0x1b0>
 801db36:	2300      	movs	r3, #0
 801db38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	dc35      	bgt.n	801dbac <_dtoa_r+0x29c>
 801db40:	2301      	movs	r3, #1
 801db42:	9300      	str	r3, [sp, #0]
 801db44:	9307      	str	r3, [sp, #28]
 801db46:	461a      	mov	r2, r3
 801db48:	920e      	str	r2, [sp, #56]	@ 0x38
 801db4a:	e00b      	b.n	801db64 <_dtoa_r+0x254>
 801db4c:	2301      	movs	r3, #1
 801db4e:	e7f3      	b.n	801db38 <_dtoa_r+0x228>
 801db50:	2300      	movs	r3, #0
 801db52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db56:	18fb      	adds	r3, r7, r3
 801db58:	9300      	str	r3, [sp, #0]
 801db5a:	3301      	adds	r3, #1
 801db5c:	2b01      	cmp	r3, #1
 801db5e:	9307      	str	r3, [sp, #28]
 801db60:	bfb8      	it	lt
 801db62:	2301      	movlt	r3, #1
 801db64:	f8db 001c 	ldr.w	r0, [fp, #28]
 801db68:	2100      	movs	r1, #0
 801db6a:	2204      	movs	r2, #4
 801db6c:	f102 0514 	add.w	r5, r2, #20
 801db70:	429d      	cmp	r5, r3
 801db72:	d91f      	bls.n	801dbb4 <_dtoa_r+0x2a4>
 801db74:	6041      	str	r1, [r0, #4]
 801db76:	4658      	mov	r0, fp
 801db78:	f000 fd8e 	bl	801e698 <_Balloc>
 801db7c:	4682      	mov	sl, r0
 801db7e:	2800      	cmp	r0, #0
 801db80:	d13c      	bne.n	801dbfc <_dtoa_r+0x2ec>
 801db82:	4b1b      	ldr	r3, [pc, #108]	@ (801dbf0 <_dtoa_r+0x2e0>)
 801db84:	4602      	mov	r2, r0
 801db86:	f240 11af 	movw	r1, #431	@ 0x1af
 801db8a:	e6d8      	b.n	801d93e <_dtoa_r+0x2e>
 801db8c:	2301      	movs	r3, #1
 801db8e:	e7e0      	b.n	801db52 <_dtoa_r+0x242>
 801db90:	2401      	movs	r4, #1
 801db92:	2300      	movs	r3, #0
 801db94:	9309      	str	r3, [sp, #36]	@ 0x24
 801db96:	940b      	str	r4, [sp, #44]	@ 0x2c
 801db98:	f04f 33ff 	mov.w	r3, #4294967295
 801db9c:	9300      	str	r3, [sp, #0]
 801db9e:	9307      	str	r3, [sp, #28]
 801dba0:	2200      	movs	r2, #0
 801dba2:	2312      	movs	r3, #18
 801dba4:	e7d0      	b.n	801db48 <_dtoa_r+0x238>
 801dba6:	2301      	movs	r3, #1
 801dba8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dbaa:	e7f5      	b.n	801db98 <_dtoa_r+0x288>
 801dbac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbae:	9300      	str	r3, [sp, #0]
 801dbb0:	9307      	str	r3, [sp, #28]
 801dbb2:	e7d7      	b.n	801db64 <_dtoa_r+0x254>
 801dbb4:	3101      	adds	r1, #1
 801dbb6:	0052      	lsls	r2, r2, #1
 801dbb8:	e7d8      	b.n	801db6c <_dtoa_r+0x25c>
 801dbba:	bf00      	nop
 801dbbc:	f3af 8000 	nop.w
 801dbc0:	636f4361 	.word	0x636f4361
 801dbc4:	3fd287a7 	.word	0x3fd287a7
 801dbc8:	8b60c8b3 	.word	0x8b60c8b3
 801dbcc:	3fc68a28 	.word	0x3fc68a28
 801dbd0:	509f79fb 	.word	0x509f79fb
 801dbd4:	3fd34413 	.word	0x3fd34413
 801dbd8:	08024a38 	.word	0x08024a38
 801dbdc:	08024c25 	.word	0x08024c25
 801dbe0:	7ff00000 	.word	0x7ff00000
 801dbe4:	08024bb9 	.word	0x08024bb9
 801dbe8:	3ff80000 	.word	0x3ff80000
 801dbec:	08024d20 	.word	0x08024d20
 801dbf0:	08024c7d 	.word	0x08024c7d
 801dbf4:	08024c21 	.word	0x08024c21
 801dbf8:	08024bb8 	.word	0x08024bb8
 801dbfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801dc00:	6018      	str	r0, [r3, #0]
 801dc02:	9b07      	ldr	r3, [sp, #28]
 801dc04:	2b0e      	cmp	r3, #14
 801dc06:	f200 80a4 	bhi.w	801dd52 <_dtoa_r+0x442>
 801dc0a:	2c00      	cmp	r4, #0
 801dc0c:	f000 80a1 	beq.w	801dd52 <_dtoa_r+0x442>
 801dc10:	2f00      	cmp	r7, #0
 801dc12:	dd33      	ble.n	801dc7c <_dtoa_r+0x36c>
 801dc14:	4bad      	ldr	r3, [pc, #692]	@ (801decc <_dtoa_r+0x5bc>)
 801dc16:	f007 020f 	and.w	r2, r7, #15
 801dc1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc1e:	ed93 7b00 	vldr	d7, [r3]
 801dc22:	05f8      	lsls	r0, r7, #23
 801dc24:	ed8d 7b04 	vstr	d7, [sp, #16]
 801dc28:	ea4f 1427 	mov.w	r4, r7, asr #4
 801dc2c:	d516      	bpl.n	801dc5c <_dtoa_r+0x34c>
 801dc2e:	4ba8      	ldr	r3, [pc, #672]	@ (801ded0 <_dtoa_r+0x5c0>)
 801dc30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dc34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801dc38:	f7e2 fe38 	bl	80008ac <__aeabi_ddiv>
 801dc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc40:	f004 040f 	and.w	r4, r4, #15
 801dc44:	2603      	movs	r6, #3
 801dc46:	4da2      	ldr	r5, [pc, #648]	@ (801ded0 <_dtoa_r+0x5c0>)
 801dc48:	b954      	cbnz	r4, 801dc60 <_dtoa_r+0x350>
 801dc4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dc52:	f7e2 fe2b 	bl	80008ac <__aeabi_ddiv>
 801dc56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc5a:	e028      	b.n	801dcae <_dtoa_r+0x39e>
 801dc5c:	2602      	movs	r6, #2
 801dc5e:	e7f2      	b.n	801dc46 <_dtoa_r+0x336>
 801dc60:	07e1      	lsls	r1, r4, #31
 801dc62:	d508      	bpl.n	801dc76 <_dtoa_r+0x366>
 801dc64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801dc68:	e9d5 2300 	ldrd	r2, r3, [r5]
 801dc6c:	f7e2 fcf4 	bl	8000658 <__aeabi_dmul>
 801dc70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dc74:	3601      	adds	r6, #1
 801dc76:	1064      	asrs	r4, r4, #1
 801dc78:	3508      	adds	r5, #8
 801dc7a:	e7e5      	b.n	801dc48 <_dtoa_r+0x338>
 801dc7c:	f000 80d2 	beq.w	801de24 <_dtoa_r+0x514>
 801dc80:	427c      	negs	r4, r7
 801dc82:	4b92      	ldr	r3, [pc, #584]	@ (801decc <_dtoa_r+0x5bc>)
 801dc84:	4d92      	ldr	r5, [pc, #584]	@ (801ded0 <_dtoa_r+0x5c0>)
 801dc86:	f004 020f 	and.w	r2, r4, #15
 801dc8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801dc96:	f7e2 fcdf 	bl	8000658 <__aeabi_dmul>
 801dc9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dc9e:	1124      	asrs	r4, r4, #4
 801dca0:	2300      	movs	r3, #0
 801dca2:	2602      	movs	r6, #2
 801dca4:	2c00      	cmp	r4, #0
 801dca6:	f040 80b2 	bne.w	801de0e <_dtoa_r+0x4fe>
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d1d3      	bne.n	801dc56 <_dtoa_r+0x346>
 801dcae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dcb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	f000 80b7 	beq.w	801de28 <_dtoa_r+0x518>
 801dcba:	4b86      	ldr	r3, [pc, #536]	@ (801ded4 <_dtoa_r+0x5c4>)
 801dcbc:	2200      	movs	r2, #0
 801dcbe:	4620      	mov	r0, r4
 801dcc0:	4629      	mov	r1, r5
 801dcc2:	f7e2 ff3b 	bl	8000b3c <__aeabi_dcmplt>
 801dcc6:	2800      	cmp	r0, #0
 801dcc8:	f000 80ae 	beq.w	801de28 <_dtoa_r+0x518>
 801dccc:	9b07      	ldr	r3, [sp, #28]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	f000 80aa 	beq.w	801de28 <_dtoa_r+0x518>
 801dcd4:	9b00      	ldr	r3, [sp, #0]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	dd37      	ble.n	801dd4a <_dtoa_r+0x43a>
 801dcda:	1e7b      	subs	r3, r7, #1
 801dcdc:	9304      	str	r3, [sp, #16]
 801dcde:	4620      	mov	r0, r4
 801dce0:	4b7d      	ldr	r3, [pc, #500]	@ (801ded8 <_dtoa_r+0x5c8>)
 801dce2:	2200      	movs	r2, #0
 801dce4:	4629      	mov	r1, r5
 801dce6:	f7e2 fcb7 	bl	8000658 <__aeabi_dmul>
 801dcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dcee:	9c00      	ldr	r4, [sp, #0]
 801dcf0:	3601      	adds	r6, #1
 801dcf2:	4630      	mov	r0, r6
 801dcf4:	f7e2 fc46 	bl	8000584 <__aeabi_i2d>
 801dcf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801dcfc:	f7e2 fcac 	bl	8000658 <__aeabi_dmul>
 801dd00:	4b76      	ldr	r3, [pc, #472]	@ (801dedc <_dtoa_r+0x5cc>)
 801dd02:	2200      	movs	r2, #0
 801dd04:	f7e2 faf2 	bl	80002ec <__adddf3>
 801dd08:	4605      	mov	r5, r0
 801dd0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801dd0e:	2c00      	cmp	r4, #0
 801dd10:	f040 808d 	bne.w	801de2e <_dtoa_r+0x51e>
 801dd14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd18:	4b71      	ldr	r3, [pc, #452]	@ (801dee0 <_dtoa_r+0x5d0>)
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	f7e2 fae4 	bl	80002e8 <__aeabi_dsub>
 801dd20:	4602      	mov	r2, r0
 801dd22:	460b      	mov	r3, r1
 801dd24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801dd28:	462a      	mov	r2, r5
 801dd2a:	4633      	mov	r3, r6
 801dd2c:	f7e2 ff24 	bl	8000b78 <__aeabi_dcmpgt>
 801dd30:	2800      	cmp	r0, #0
 801dd32:	f040 828b 	bne.w	801e24c <_dtoa_r+0x93c>
 801dd36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dd3a:	462a      	mov	r2, r5
 801dd3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801dd40:	f7e2 fefc 	bl	8000b3c <__aeabi_dcmplt>
 801dd44:	2800      	cmp	r0, #0
 801dd46:	f040 8128 	bne.w	801df9a <_dtoa_r+0x68a>
 801dd4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801dd4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801dd52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	f2c0 815a 	blt.w	801e00e <_dtoa_r+0x6fe>
 801dd5a:	2f0e      	cmp	r7, #14
 801dd5c:	f300 8157 	bgt.w	801e00e <_dtoa_r+0x6fe>
 801dd60:	4b5a      	ldr	r3, [pc, #360]	@ (801decc <_dtoa_r+0x5bc>)
 801dd62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801dd66:	ed93 7b00 	vldr	d7, [r3]
 801dd6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	ed8d 7b00 	vstr	d7, [sp]
 801dd72:	da03      	bge.n	801dd7c <_dtoa_r+0x46c>
 801dd74:	9b07      	ldr	r3, [sp, #28]
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	f340 8101 	ble.w	801df7e <_dtoa_r+0x66e>
 801dd7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801dd80:	4656      	mov	r6, sl
 801dd82:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd86:	4620      	mov	r0, r4
 801dd88:	4629      	mov	r1, r5
 801dd8a:	f7e2 fd8f 	bl	80008ac <__aeabi_ddiv>
 801dd8e:	f7e2 ff13 	bl	8000bb8 <__aeabi_d2iz>
 801dd92:	4680      	mov	r8, r0
 801dd94:	f7e2 fbf6 	bl	8000584 <__aeabi_i2d>
 801dd98:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dd9c:	f7e2 fc5c 	bl	8000658 <__aeabi_dmul>
 801dda0:	4602      	mov	r2, r0
 801dda2:	460b      	mov	r3, r1
 801dda4:	4620      	mov	r0, r4
 801dda6:	4629      	mov	r1, r5
 801dda8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ddac:	f7e2 fa9c 	bl	80002e8 <__aeabi_dsub>
 801ddb0:	f806 4b01 	strb.w	r4, [r6], #1
 801ddb4:	9d07      	ldr	r5, [sp, #28]
 801ddb6:	eba6 040a 	sub.w	r4, r6, sl
 801ddba:	42a5      	cmp	r5, r4
 801ddbc:	4602      	mov	r2, r0
 801ddbe:	460b      	mov	r3, r1
 801ddc0:	f040 8117 	bne.w	801dff2 <_dtoa_r+0x6e2>
 801ddc4:	f7e2 fa92 	bl	80002ec <__adddf3>
 801ddc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ddcc:	4604      	mov	r4, r0
 801ddce:	460d      	mov	r5, r1
 801ddd0:	f7e2 fed2 	bl	8000b78 <__aeabi_dcmpgt>
 801ddd4:	2800      	cmp	r0, #0
 801ddd6:	f040 80f9 	bne.w	801dfcc <_dtoa_r+0x6bc>
 801ddda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ddde:	4620      	mov	r0, r4
 801dde0:	4629      	mov	r1, r5
 801dde2:	f7e2 fea1 	bl	8000b28 <__aeabi_dcmpeq>
 801dde6:	b118      	cbz	r0, 801ddf0 <_dtoa_r+0x4e0>
 801dde8:	f018 0f01 	tst.w	r8, #1
 801ddec:	f040 80ee 	bne.w	801dfcc <_dtoa_r+0x6bc>
 801ddf0:	4649      	mov	r1, r9
 801ddf2:	4658      	mov	r0, fp
 801ddf4:	f000 fc90 	bl	801e718 <_Bfree>
 801ddf8:	2300      	movs	r3, #0
 801ddfa:	7033      	strb	r3, [r6, #0]
 801ddfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ddfe:	3701      	adds	r7, #1
 801de00:	601f      	str	r7, [r3, #0]
 801de02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801de04:	2b00      	cmp	r3, #0
 801de06:	f000 831d 	beq.w	801e444 <_dtoa_r+0xb34>
 801de0a:	601e      	str	r6, [r3, #0]
 801de0c:	e31a      	b.n	801e444 <_dtoa_r+0xb34>
 801de0e:	07e2      	lsls	r2, r4, #31
 801de10:	d505      	bpl.n	801de1e <_dtoa_r+0x50e>
 801de12:	e9d5 2300 	ldrd	r2, r3, [r5]
 801de16:	f7e2 fc1f 	bl	8000658 <__aeabi_dmul>
 801de1a:	3601      	adds	r6, #1
 801de1c:	2301      	movs	r3, #1
 801de1e:	1064      	asrs	r4, r4, #1
 801de20:	3508      	adds	r5, #8
 801de22:	e73f      	b.n	801dca4 <_dtoa_r+0x394>
 801de24:	2602      	movs	r6, #2
 801de26:	e742      	b.n	801dcae <_dtoa_r+0x39e>
 801de28:	9c07      	ldr	r4, [sp, #28]
 801de2a:	9704      	str	r7, [sp, #16]
 801de2c:	e761      	b.n	801dcf2 <_dtoa_r+0x3e2>
 801de2e:	4b27      	ldr	r3, [pc, #156]	@ (801decc <_dtoa_r+0x5bc>)
 801de30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801de36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801de3a:	4454      	add	r4, sl
 801de3c:	2900      	cmp	r1, #0
 801de3e:	d053      	beq.n	801dee8 <_dtoa_r+0x5d8>
 801de40:	4928      	ldr	r1, [pc, #160]	@ (801dee4 <_dtoa_r+0x5d4>)
 801de42:	2000      	movs	r0, #0
 801de44:	f7e2 fd32 	bl	80008ac <__aeabi_ddiv>
 801de48:	4633      	mov	r3, r6
 801de4a:	462a      	mov	r2, r5
 801de4c:	f7e2 fa4c 	bl	80002e8 <__aeabi_dsub>
 801de50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801de54:	4656      	mov	r6, sl
 801de56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de5a:	f7e2 fead 	bl	8000bb8 <__aeabi_d2iz>
 801de5e:	4605      	mov	r5, r0
 801de60:	f7e2 fb90 	bl	8000584 <__aeabi_i2d>
 801de64:	4602      	mov	r2, r0
 801de66:	460b      	mov	r3, r1
 801de68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801de6c:	f7e2 fa3c 	bl	80002e8 <__aeabi_dsub>
 801de70:	3530      	adds	r5, #48	@ 0x30
 801de72:	4602      	mov	r2, r0
 801de74:	460b      	mov	r3, r1
 801de76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801de7a:	f806 5b01 	strb.w	r5, [r6], #1
 801de7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801de82:	f7e2 fe5b 	bl	8000b3c <__aeabi_dcmplt>
 801de86:	2800      	cmp	r0, #0
 801de88:	d171      	bne.n	801df6e <_dtoa_r+0x65e>
 801de8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801de8e:	4911      	ldr	r1, [pc, #68]	@ (801ded4 <_dtoa_r+0x5c4>)
 801de90:	2000      	movs	r0, #0
 801de92:	f7e2 fa29 	bl	80002e8 <__aeabi_dsub>
 801de96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801de9a:	f7e2 fe4f 	bl	8000b3c <__aeabi_dcmplt>
 801de9e:	2800      	cmp	r0, #0
 801dea0:	f040 8095 	bne.w	801dfce <_dtoa_r+0x6be>
 801dea4:	42a6      	cmp	r6, r4
 801dea6:	f43f af50 	beq.w	801dd4a <_dtoa_r+0x43a>
 801deaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801deae:	4b0a      	ldr	r3, [pc, #40]	@ (801ded8 <_dtoa_r+0x5c8>)
 801deb0:	2200      	movs	r2, #0
 801deb2:	f7e2 fbd1 	bl	8000658 <__aeabi_dmul>
 801deb6:	4b08      	ldr	r3, [pc, #32]	@ (801ded8 <_dtoa_r+0x5c8>)
 801deb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801debc:	2200      	movs	r2, #0
 801debe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801dec2:	f7e2 fbc9 	bl	8000658 <__aeabi_dmul>
 801dec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801deca:	e7c4      	b.n	801de56 <_dtoa_r+0x546>
 801decc:	08024d20 	.word	0x08024d20
 801ded0:	08024cf8 	.word	0x08024cf8
 801ded4:	3ff00000 	.word	0x3ff00000
 801ded8:	40240000 	.word	0x40240000
 801dedc:	401c0000 	.word	0x401c0000
 801dee0:	40140000 	.word	0x40140000
 801dee4:	3fe00000 	.word	0x3fe00000
 801dee8:	4631      	mov	r1, r6
 801deea:	4628      	mov	r0, r5
 801deec:	f7e2 fbb4 	bl	8000658 <__aeabi_dmul>
 801def0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801def4:	9415      	str	r4, [sp, #84]	@ 0x54
 801def6:	4656      	mov	r6, sl
 801def8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801defc:	f7e2 fe5c 	bl	8000bb8 <__aeabi_d2iz>
 801df00:	4605      	mov	r5, r0
 801df02:	f7e2 fb3f 	bl	8000584 <__aeabi_i2d>
 801df06:	4602      	mov	r2, r0
 801df08:	460b      	mov	r3, r1
 801df0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df0e:	f7e2 f9eb 	bl	80002e8 <__aeabi_dsub>
 801df12:	3530      	adds	r5, #48	@ 0x30
 801df14:	f806 5b01 	strb.w	r5, [r6], #1
 801df18:	4602      	mov	r2, r0
 801df1a:	460b      	mov	r3, r1
 801df1c:	42a6      	cmp	r6, r4
 801df1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801df22:	f04f 0200 	mov.w	r2, #0
 801df26:	d124      	bne.n	801df72 <_dtoa_r+0x662>
 801df28:	4bac      	ldr	r3, [pc, #688]	@ (801e1dc <_dtoa_r+0x8cc>)
 801df2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801df2e:	f7e2 f9dd 	bl	80002ec <__adddf3>
 801df32:	4602      	mov	r2, r0
 801df34:	460b      	mov	r3, r1
 801df36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df3a:	f7e2 fe1d 	bl	8000b78 <__aeabi_dcmpgt>
 801df3e:	2800      	cmp	r0, #0
 801df40:	d145      	bne.n	801dfce <_dtoa_r+0x6be>
 801df42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801df46:	49a5      	ldr	r1, [pc, #660]	@ (801e1dc <_dtoa_r+0x8cc>)
 801df48:	2000      	movs	r0, #0
 801df4a:	f7e2 f9cd 	bl	80002e8 <__aeabi_dsub>
 801df4e:	4602      	mov	r2, r0
 801df50:	460b      	mov	r3, r1
 801df52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801df56:	f7e2 fdf1 	bl	8000b3c <__aeabi_dcmplt>
 801df5a:	2800      	cmp	r0, #0
 801df5c:	f43f aef5 	beq.w	801dd4a <_dtoa_r+0x43a>
 801df60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801df62:	1e73      	subs	r3, r6, #1
 801df64:	9315      	str	r3, [sp, #84]	@ 0x54
 801df66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801df6a:	2b30      	cmp	r3, #48	@ 0x30
 801df6c:	d0f8      	beq.n	801df60 <_dtoa_r+0x650>
 801df6e:	9f04      	ldr	r7, [sp, #16]
 801df70:	e73e      	b.n	801ddf0 <_dtoa_r+0x4e0>
 801df72:	4b9b      	ldr	r3, [pc, #620]	@ (801e1e0 <_dtoa_r+0x8d0>)
 801df74:	f7e2 fb70 	bl	8000658 <__aeabi_dmul>
 801df78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801df7c:	e7bc      	b.n	801def8 <_dtoa_r+0x5e8>
 801df7e:	d10c      	bne.n	801df9a <_dtoa_r+0x68a>
 801df80:	4b98      	ldr	r3, [pc, #608]	@ (801e1e4 <_dtoa_r+0x8d4>)
 801df82:	2200      	movs	r2, #0
 801df84:	e9dd 0100 	ldrd	r0, r1, [sp]
 801df88:	f7e2 fb66 	bl	8000658 <__aeabi_dmul>
 801df8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801df90:	f7e2 fde8 	bl	8000b64 <__aeabi_dcmpge>
 801df94:	2800      	cmp	r0, #0
 801df96:	f000 8157 	beq.w	801e248 <_dtoa_r+0x938>
 801df9a:	2400      	movs	r4, #0
 801df9c:	4625      	mov	r5, r4
 801df9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfa0:	43db      	mvns	r3, r3
 801dfa2:	9304      	str	r3, [sp, #16]
 801dfa4:	4656      	mov	r6, sl
 801dfa6:	2700      	movs	r7, #0
 801dfa8:	4621      	mov	r1, r4
 801dfaa:	4658      	mov	r0, fp
 801dfac:	f000 fbb4 	bl	801e718 <_Bfree>
 801dfb0:	2d00      	cmp	r5, #0
 801dfb2:	d0dc      	beq.n	801df6e <_dtoa_r+0x65e>
 801dfb4:	b12f      	cbz	r7, 801dfc2 <_dtoa_r+0x6b2>
 801dfb6:	42af      	cmp	r7, r5
 801dfb8:	d003      	beq.n	801dfc2 <_dtoa_r+0x6b2>
 801dfba:	4639      	mov	r1, r7
 801dfbc:	4658      	mov	r0, fp
 801dfbe:	f000 fbab 	bl	801e718 <_Bfree>
 801dfc2:	4629      	mov	r1, r5
 801dfc4:	4658      	mov	r0, fp
 801dfc6:	f000 fba7 	bl	801e718 <_Bfree>
 801dfca:	e7d0      	b.n	801df6e <_dtoa_r+0x65e>
 801dfcc:	9704      	str	r7, [sp, #16]
 801dfce:	4633      	mov	r3, r6
 801dfd0:	461e      	mov	r6, r3
 801dfd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dfd6:	2a39      	cmp	r2, #57	@ 0x39
 801dfd8:	d107      	bne.n	801dfea <_dtoa_r+0x6da>
 801dfda:	459a      	cmp	sl, r3
 801dfdc:	d1f8      	bne.n	801dfd0 <_dtoa_r+0x6c0>
 801dfde:	9a04      	ldr	r2, [sp, #16]
 801dfe0:	3201      	adds	r2, #1
 801dfe2:	9204      	str	r2, [sp, #16]
 801dfe4:	2230      	movs	r2, #48	@ 0x30
 801dfe6:	f88a 2000 	strb.w	r2, [sl]
 801dfea:	781a      	ldrb	r2, [r3, #0]
 801dfec:	3201      	adds	r2, #1
 801dfee:	701a      	strb	r2, [r3, #0]
 801dff0:	e7bd      	b.n	801df6e <_dtoa_r+0x65e>
 801dff2:	4b7b      	ldr	r3, [pc, #492]	@ (801e1e0 <_dtoa_r+0x8d0>)
 801dff4:	2200      	movs	r2, #0
 801dff6:	f7e2 fb2f 	bl	8000658 <__aeabi_dmul>
 801dffa:	2200      	movs	r2, #0
 801dffc:	2300      	movs	r3, #0
 801dffe:	4604      	mov	r4, r0
 801e000:	460d      	mov	r5, r1
 801e002:	f7e2 fd91 	bl	8000b28 <__aeabi_dcmpeq>
 801e006:	2800      	cmp	r0, #0
 801e008:	f43f aebb 	beq.w	801dd82 <_dtoa_r+0x472>
 801e00c:	e6f0      	b.n	801ddf0 <_dtoa_r+0x4e0>
 801e00e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e010:	2a00      	cmp	r2, #0
 801e012:	f000 80db 	beq.w	801e1cc <_dtoa_r+0x8bc>
 801e016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e018:	2a01      	cmp	r2, #1
 801e01a:	f300 80bf 	bgt.w	801e19c <_dtoa_r+0x88c>
 801e01e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e020:	2a00      	cmp	r2, #0
 801e022:	f000 80b7 	beq.w	801e194 <_dtoa_r+0x884>
 801e026:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e02a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e02c:	4646      	mov	r6, r8
 801e02e:	9a08      	ldr	r2, [sp, #32]
 801e030:	2101      	movs	r1, #1
 801e032:	441a      	add	r2, r3
 801e034:	4658      	mov	r0, fp
 801e036:	4498      	add	r8, r3
 801e038:	9208      	str	r2, [sp, #32]
 801e03a:	f000 fc21 	bl	801e880 <__i2b>
 801e03e:	4605      	mov	r5, r0
 801e040:	b15e      	cbz	r6, 801e05a <_dtoa_r+0x74a>
 801e042:	9b08      	ldr	r3, [sp, #32]
 801e044:	2b00      	cmp	r3, #0
 801e046:	dd08      	ble.n	801e05a <_dtoa_r+0x74a>
 801e048:	42b3      	cmp	r3, r6
 801e04a:	9a08      	ldr	r2, [sp, #32]
 801e04c:	bfa8      	it	ge
 801e04e:	4633      	movge	r3, r6
 801e050:	eba8 0803 	sub.w	r8, r8, r3
 801e054:	1af6      	subs	r6, r6, r3
 801e056:	1ad3      	subs	r3, r2, r3
 801e058:	9308      	str	r3, [sp, #32]
 801e05a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e05c:	b1f3      	cbz	r3, 801e09c <_dtoa_r+0x78c>
 801e05e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e060:	2b00      	cmp	r3, #0
 801e062:	f000 80b7 	beq.w	801e1d4 <_dtoa_r+0x8c4>
 801e066:	b18c      	cbz	r4, 801e08c <_dtoa_r+0x77c>
 801e068:	4629      	mov	r1, r5
 801e06a:	4622      	mov	r2, r4
 801e06c:	4658      	mov	r0, fp
 801e06e:	f000 fcc7 	bl	801ea00 <__pow5mult>
 801e072:	464a      	mov	r2, r9
 801e074:	4601      	mov	r1, r0
 801e076:	4605      	mov	r5, r0
 801e078:	4658      	mov	r0, fp
 801e07a:	f000 fc17 	bl	801e8ac <__multiply>
 801e07e:	4649      	mov	r1, r9
 801e080:	9004      	str	r0, [sp, #16]
 801e082:	4658      	mov	r0, fp
 801e084:	f000 fb48 	bl	801e718 <_Bfree>
 801e088:	9b04      	ldr	r3, [sp, #16]
 801e08a:	4699      	mov	r9, r3
 801e08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e08e:	1b1a      	subs	r2, r3, r4
 801e090:	d004      	beq.n	801e09c <_dtoa_r+0x78c>
 801e092:	4649      	mov	r1, r9
 801e094:	4658      	mov	r0, fp
 801e096:	f000 fcb3 	bl	801ea00 <__pow5mult>
 801e09a:	4681      	mov	r9, r0
 801e09c:	2101      	movs	r1, #1
 801e09e:	4658      	mov	r0, fp
 801e0a0:	f000 fbee 	bl	801e880 <__i2b>
 801e0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	f000 81cf 	beq.w	801e44c <_dtoa_r+0xb3c>
 801e0ae:	461a      	mov	r2, r3
 801e0b0:	4601      	mov	r1, r0
 801e0b2:	4658      	mov	r0, fp
 801e0b4:	f000 fca4 	bl	801ea00 <__pow5mult>
 801e0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0ba:	2b01      	cmp	r3, #1
 801e0bc:	4604      	mov	r4, r0
 801e0be:	f300 8095 	bgt.w	801e1ec <_dtoa_r+0x8dc>
 801e0c2:	9b02      	ldr	r3, [sp, #8]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	f040 8087 	bne.w	801e1d8 <_dtoa_r+0x8c8>
 801e0ca:	9b03      	ldr	r3, [sp, #12]
 801e0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	f040 8089 	bne.w	801e1e8 <_dtoa_r+0x8d8>
 801e0d6:	9b03      	ldr	r3, [sp, #12]
 801e0d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e0dc:	0d1b      	lsrs	r3, r3, #20
 801e0de:	051b      	lsls	r3, r3, #20
 801e0e0:	b12b      	cbz	r3, 801e0ee <_dtoa_r+0x7de>
 801e0e2:	9b08      	ldr	r3, [sp, #32]
 801e0e4:	3301      	adds	r3, #1
 801e0e6:	9308      	str	r3, [sp, #32]
 801e0e8:	f108 0801 	add.w	r8, r8, #1
 801e0ec:	2301      	movs	r3, #1
 801e0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801e0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e0f2:	2b00      	cmp	r3, #0
 801e0f4:	f000 81b0 	beq.w	801e458 <_dtoa_r+0xb48>
 801e0f8:	6923      	ldr	r3, [r4, #16]
 801e0fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e0fe:	6918      	ldr	r0, [r3, #16]
 801e100:	f000 fb72 	bl	801e7e8 <__hi0bits>
 801e104:	f1c0 0020 	rsb	r0, r0, #32
 801e108:	9b08      	ldr	r3, [sp, #32]
 801e10a:	4418      	add	r0, r3
 801e10c:	f010 001f 	ands.w	r0, r0, #31
 801e110:	d077      	beq.n	801e202 <_dtoa_r+0x8f2>
 801e112:	f1c0 0320 	rsb	r3, r0, #32
 801e116:	2b04      	cmp	r3, #4
 801e118:	dd6b      	ble.n	801e1f2 <_dtoa_r+0x8e2>
 801e11a:	9b08      	ldr	r3, [sp, #32]
 801e11c:	f1c0 001c 	rsb	r0, r0, #28
 801e120:	4403      	add	r3, r0
 801e122:	4480      	add	r8, r0
 801e124:	4406      	add	r6, r0
 801e126:	9308      	str	r3, [sp, #32]
 801e128:	f1b8 0f00 	cmp.w	r8, #0
 801e12c:	dd05      	ble.n	801e13a <_dtoa_r+0x82a>
 801e12e:	4649      	mov	r1, r9
 801e130:	4642      	mov	r2, r8
 801e132:	4658      	mov	r0, fp
 801e134:	f000 fcbe 	bl	801eab4 <__lshift>
 801e138:	4681      	mov	r9, r0
 801e13a:	9b08      	ldr	r3, [sp, #32]
 801e13c:	2b00      	cmp	r3, #0
 801e13e:	dd05      	ble.n	801e14c <_dtoa_r+0x83c>
 801e140:	4621      	mov	r1, r4
 801e142:	461a      	mov	r2, r3
 801e144:	4658      	mov	r0, fp
 801e146:	f000 fcb5 	bl	801eab4 <__lshift>
 801e14a:	4604      	mov	r4, r0
 801e14c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d059      	beq.n	801e206 <_dtoa_r+0x8f6>
 801e152:	4621      	mov	r1, r4
 801e154:	4648      	mov	r0, r9
 801e156:	f000 fd19 	bl	801eb8c <__mcmp>
 801e15a:	2800      	cmp	r0, #0
 801e15c:	da53      	bge.n	801e206 <_dtoa_r+0x8f6>
 801e15e:	1e7b      	subs	r3, r7, #1
 801e160:	9304      	str	r3, [sp, #16]
 801e162:	4649      	mov	r1, r9
 801e164:	2300      	movs	r3, #0
 801e166:	220a      	movs	r2, #10
 801e168:	4658      	mov	r0, fp
 801e16a:	f000 faf7 	bl	801e75c <__multadd>
 801e16e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e170:	4681      	mov	r9, r0
 801e172:	2b00      	cmp	r3, #0
 801e174:	f000 8172 	beq.w	801e45c <_dtoa_r+0xb4c>
 801e178:	2300      	movs	r3, #0
 801e17a:	4629      	mov	r1, r5
 801e17c:	220a      	movs	r2, #10
 801e17e:	4658      	mov	r0, fp
 801e180:	f000 faec 	bl	801e75c <__multadd>
 801e184:	9b00      	ldr	r3, [sp, #0]
 801e186:	2b00      	cmp	r3, #0
 801e188:	4605      	mov	r5, r0
 801e18a:	dc67      	bgt.n	801e25c <_dtoa_r+0x94c>
 801e18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e18e:	2b02      	cmp	r3, #2
 801e190:	dc41      	bgt.n	801e216 <_dtoa_r+0x906>
 801e192:	e063      	b.n	801e25c <_dtoa_r+0x94c>
 801e194:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e19a:	e746      	b.n	801e02a <_dtoa_r+0x71a>
 801e19c:	9b07      	ldr	r3, [sp, #28]
 801e19e:	1e5c      	subs	r4, r3, #1
 801e1a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e1a2:	42a3      	cmp	r3, r4
 801e1a4:	bfbf      	itttt	lt
 801e1a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e1a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e1aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e1ac:	1ae3      	sublt	r3, r4, r3
 801e1ae:	bfb4      	ite	lt
 801e1b0:	18d2      	addlt	r2, r2, r3
 801e1b2:	1b1c      	subge	r4, r3, r4
 801e1b4:	9b07      	ldr	r3, [sp, #28]
 801e1b6:	bfbc      	itt	lt
 801e1b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e1ba:	2400      	movlt	r4, #0
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	bfb5      	itete	lt
 801e1c0:	eba8 0603 	sublt.w	r6, r8, r3
 801e1c4:	9b07      	ldrge	r3, [sp, #28]
 801e1c6:	2300      	movlt	r3, #0
 801e1c8:	4646      	movge	r6, r8
 801e1ca:	e730      	b.n	801e02e <_dtoa_r+0x71e>
 801e1cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e1ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e1d0:	4646      	mov	r6, r8
 801e1d2:	e735      	b.n	801e040 <_dtoa_r+0x730>
 801e1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e1d6:	e75c      	b.n	801e092 <_dtoa_r+0x782>
 801e1d8:	2300      	movs	r3, #0
 801e1da:	e788      	b.n	801e0ee <_dtoa_r+0x7de>
 801e1dc:	3fe00000 	.word	0x3fe00000
 801e1e0:	40240000 	.word	0x40240000
 801e1e4:	40140000 	.word	0x40140000
 801e1e8:	9b02      	ldr	r3, [sp, #8]
 801e1ea:	e780      	b.n	801e0ee <_dtoa_r+0x7de>
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801e1f0:	e782      	b.n	801e0f8 <_dtoa_r+0x7e8>
 801e1f2:	d099      	beq.n	801e128 <_dtoa_r+0x818>
 801e1f4:	9a08      	ldr	r2, [sp, #32]
 801e1f6:	331c      	adds	r3, #28
 801e1f8:	441a      	add	r2, r3
 801e1fa:	4498      	add	r8, r3
 801e1fc:	441e      	add	r6, r3
 801e1fe:	9208      	str	r2, [sp, #32]
 801e200:	e792      	b.n	801e128 <_dtoa_r+0x818>
 801e202:	4603      	mov	r3, r0
 801e204:	e7f6      	b.n	801e1f4 <_dtoa_r+0x8e4>
 801e206:	9b07      	ldr	r3, [sp, #28]
 801e208:	9704      	str	r7, [sp, #16]
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	dc20      	bgt.n	801e250 <_dtoa_r+0x940>
 801e20e:	9300      	str	r3, [sp, #0]
 801e210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e212:	2b02      	cmp	r3, #2
 801e214:	dd1e      	ble.n	801e254 <_dtoa_r+0x944>
 801e216:	9b00      	ldr	r3, [sp, #0]
 801e218:	2b00      	cmp	r3, #0
 801e21a:	f47f aec0 	bne.w	801df9e <_dtoa_r+0x68e>
 801e21e:	4621      	mov	r1, r4
 801e220:	2205      	movs	r2, #5
 801e222:	4658      	mov	r0, fp
 801e224:	f000 fa9a 	bl	801e75c <__multadd>
 801e228:	4601      	mov	r1, r0
 801e22a:	4604      	mov	r4, r0
 801e22c:	4648      	mov	r0, r9
 801e22e:	f000 fcad 	bl	801eb8c <__mcmp>
 801e232:	2800      	cmp	r0, #0
 801e234:	f77f aeb3 	ble.w	801df9e <_dtoa_r+0x68e>
 801e238:	4656      	mov	r6, sl
 801e23a:	2331      	movs	r3, #49	@ 0x31
 801e23c:	f806 3b01 	strb.w	r3, [r6], #1
 801e240:	9b04      	ldr	r3, [sp, #16]
 801e242:	3301      	adds	r3, #1
 801e244:	9304      	str	r3, [sp, #16]
 801e246:	e6ae      	b.n	801dfa6 <_dtoa_r+0x696>
 801e248:	9c07      	ldr	r4, [sp, #28]
 801e24a:	9704      	str	r7, [sp, #16]
 801e24c:	4625      	mov	r5, r4
 801e24e:	e7f3      	b.n	801e238 <_dtoa_r+0x928>
 801e250:	9b07      	ldr	r3, [sp, #28]
 801e252:	9300      	str	r3, [sp, #0]
 801e254:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e256:	2b00      	cmp	r3, #0
 801e258:	f000 8104 	beq.w	801e464 <_dtoa_r+0xb54>
 801e25c:	2e00      	cmp	r6, #0
 801e25e:	dd05      	ble.n	801e26c <_dtoa_r+0x95c>
 801e260:	4629      	mov	r1, r5
 801e262:	4632      	mov	r2, r6
 801e264:	4658      	mov	r0, fp
 801e266:	f000 fc25 	bl	801eab4 <__lshift>
 801e26a:	4605      	mov	r5, r0
 801e26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d05a      	beq.n	801e328 <_dtoa_r+0xa18>
 801e272:	6869      	ldr	r1, [r5, #4]
 801e274:	4658      	mov	r0, fp
 801e276:	f000 fa0f 	bl	801e698 <_Balloc>
 801e27a:	4606      	mov	r6, r0
 801e27c:	b928      	cbnz	r0, 801e28a <_dtoa_r+0x97a>
 801e27e:	4b84      	ldr	r3, [pc, #528]	@ (801e490 <_dtoa_r+0xb80>)
 801e280:	4602      	mov	r2, r0
 801e282:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e286:	f7ff bb5a 	b.w	801d93e <_dtoa_r+0x2e>
 801e28a:	692a      	ldr	r2, [r5, #16]
 801e28c:	3202      	adds	r2, #2
 801e28e:	0092      	lsls	r2, r2, #2
 801e290:	f105 010c 	add.w	r1, r5, #12
 801e294:	300c      	adds	r0, #12
 801e296:	f7ff fa84 	bl	801d7a2 <memcpy>
 801e29a:	2201      	movs	r2, #1
 801e29c:	4631      	mov	r1, r6
 801e29e:	4658      	mov	r0, fp
 801e2a0:	f000 fc08 	bl	801eab4 <__lshift>
 801e2a4:	f10a 0301 	add.w	r3, sl, #1
 801e2a8:	9307      	str	r3, [sp, #28]
 801e2aa:	9b00      	ldr	r3, [sp, #0]
 801e2ac:	4453      	add	r3, sl
 801e2ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2b0:	9b02      	ldr	r3, [sp, #8]
 801e2b2:	f003 0301 	and.w	r3, r3, #1
 801e2b6:	462f      	mov	r7, r5
 801e2b8:	930a      	str	r3, [sp, #40]	@ 0x28
 801e2ba:	4605      	mov	r5, r0
 801e2bc:	9b07      	ldr	r3, [sp, #28]
 801e2be:	4621      	mov	r1, r4
 801e2c0:	3b01      	subs	r3, #1
 801e2c2:	4648      	mov	r0, r9
 801e2c4:	9300      	str	r3, [sp, #0]
 801e2c6:	f7ff fa99 	bl	801d7fc <quorem>
 801e2ca:	4639      	mov	r1, r7
 801e2cc:	9002      	str	r0, [sp, #8]
 801e2ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e2d2:	4648      	mov	r0, r9
 801e2d4:	f000 fc5a 	bl	801eb8c <__mcmp>
 801e2d8:	462a      	mov	r2, r5
 801e2da:	9008      	str	r0, [sp, #32]
 801e2dc:	4621      	mov	r1, r4
 801e2de:	4658      	mov	r0, fp
 801e2e0:	f000 fc70 	bl	801ebc4 <__mdiff>
 801e2e4:	68c2      	ldr	r2, [r0, #12]
 801e2e6:	4606      	mov	r6, r0
 801e2e8:	bb02      	cbnz	r2, 801e32c <_dtoa_r+0xa1c>
 801e2ea:	4601      	mov	r1, r0
 801e2ec:	4648      	mov	r0, r9
 801e2ee:	f000 fc4d 	bl	801eb8c <__mcmp>
 801e2f2:	4602      	mov	r2, r0
 801e2f4:	4631      	mov	r1, r6
 801e2f6:	4658      	mov	r0, fp
 801e2f8:	920e      	str	r2, [sp, #56]	@ 0x38
 801e2fa:	f000 fa0d 	bl	801e718 <_Bfree>
 801e2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e302:	9e07      	ldr	r6, [sp, #28]
 801e304:	ea43 0102 	orr.w	r1, r3, r2
 801e308:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e30a:	4319      	orrs	r1, r3
 801e30c:	d110      	bne.n	801e330 <_dtoa_r+0xa20>
 801e30e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e312:	d029      	beq.n	801e368 <_dtoa_r+0xa58>
 801e314:	9b08      	ldr	r3, [sp, #32]
 801e316:	2b00      	cmp	r3, #0
 801e318:	dd02      	ble.n	801e320 <_dtoa_r+0xa10>
 801e31a:	9b02      	ldr	r3, [sp, #8]
 801e31c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e320:	9b00      	ldr	r3, [sp, #0]
 801e322:	f883 8000 	strb.w	r8, [r3]
 801e326:	e63f      	b.n	801dfa8 <_dtoa_r+0x698>
 801e328:	4628      	mov	r0, r5
 801e32a:	e7bb      	b.n	801e2a4 <_dtoa_r+0x994>
 801e32c:	2201      	movs	r2, #1
 801e32e:	e7e1      	b.n	801e2f4 <_dtoa_r+0x9e4>
 801e330:	9b08      	ldr	r3, [sp, #32]
 801e332:	2b00      	cmp	r3, #0
 801e334:	db04      	blt.n	801e340 <_dtoa_r+0xa30>
 801e336:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e338:	430b      	orrs	r3, r1
 801e33a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e33c:	430b      	orrs	r3, r1
 801e33e:	d120      	bne.n	801e382 <_dtoa_r+0xa72>
 801e340:	2a00      	cmp	r2, #0
 801e342:	dded      	ble.n	801e320 <_dtoa_r+0xa10>
 801e344:	4649      	mov	r1, r9
 801e346:	2201      	movs	r2, #1
 801e348:	4658      	mov	r0, fp
 801e34a:	f000 fbb3 	bl	801eab4 <__lshift>
 801e34e:	4621      	mov	r1, r4
 801e350:	4681      	mov	r9, r0
 801e352:	f000 fc1b 	bl	801eb8c <__mcmp>
 801e356:	2800      	cmp	r0, #0
 801e358:	dc03      	bgt.n	801e362 <_dtoa_r+0xa52>
 801e35a:	d1e1      	bne.n	801e320 <_dtoa_r+0xa10>
 801e35c:	f018 0f01 	tst.w	r8, #1
 801e360:	d0de      	beq.n	801e320 <_dtoa_r+0xa10>
 801e362:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e366:	d1d8      	bne.n	801e31a <_dtoa_r+0xa0a>
 801e368:	9a00      	ldr	r2, [sp, #0]
 801e36a:	2339      	movs	r3, #57	@ 0x39
 801e36c:	7013      	strb	r3, [r2, #0]
 801e36e:	4633      	mov	r3, r6
 801e370:	461e      	mov	r6, r3
 801e372:	3b01      	subs	r3, #1
 801e374:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e378:	2a39      	cmp	r2, #57	@ 0x39
 801e37a:	d052      	beq.n	801e422 <_dtoa_r+0xb12>
 801e37c:	3201      	adds	r2, #1
 801e37e:	701a      	strb	r2, [r3, #0]
 801e380:	e612      	b.n	801dfa8 <_dtoa_r+0x698>
 801e382:	2a00      	cmp	r2, #0
 801e384:	dd07      	ble.n	801e396 <_dtoa_r+0xa86>
 801e386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e38a:	d0ed      	beq.n	801e368 <_dtoa_r+0xa58>
 801e38c:	9a00      	ldr	r2, [sp, #0]
 801e38e:	f108 0301 	add.w	r3, r8, #1
 801e392:	7013      	strb	r3, [r2, #0]
 801e394:	e608      	b.n	801dfa8 <_dtoa_r+0x698>
 801e396:	9b07      	ldr	r3, [sp, #28]
 801e398:	9a07      	ldr	r2, [sp, #28]
 801e39a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3a0:	4293      	cmp	r3, r2
 801e3a2:	d028      	beq.n	801e3f6 <_dtoa_r+0xae6>
 801e3a4:	4649      	mov	r1, r9
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	220a      	movs	r2, #10
 801e3aa:	4658      	mov	r0, fp
 801e3ac:	f000 f9d6 	bl	801e75c <__multadd>
 801e3b0:	42af      	cmp	r7, r5
 801e3b2:	4681      	mov	r9, r0
 801e3b4:	f04f 0300 	mov.w	r3, #0
 801e3b8:	f04f 020a 	mov.w	r2, #10
 801e3bc:	4639      	mov	r1, r7
 801e3be:	4658      	mov	r0, fp
 801e3c0:	d107      	bne.n	801e3d2 <_dtoa_r+0xac2>
 801e3c2:	f000 f9cb 	bl	801e75c <__multadd>
 801e3c6:	4607      	mov	r7, r0
 801e3c8:	4605      	mov	r5, r0
 801e3ca:	9b07      	ldr	r3, [sp, #28]
 801e3cc:	3301      	adds	r3, #1
 801e3ce:	9307      	str	r3, [sp, #28]
 801e3d0:	e774      	b.n	801e2bc <_dtoa_r+0x9ac>
 801e3d2:	f000 f9c3 	bl	801e75c <__multadd>
 801e3d6:	4629      	mov	r1, r5
 801e3d8:	4607      	mov	r7, r0
 801e3da:	2300      	movs	r3, #0
 801e3dc:	220a      	movs	r2, #10
 801e3de:	4658      	mov	r0, fp
 801e3e0:	f000 f9bc 	bl	801e75c <__multadd>
 801e3e4:	4605      	mov	r5, r0
 801e3e6:	e7f0      	b.n	801e3ca <_dtoa_r+0xaba>
 801e3e8:	9b00      	ldr	r3, [sp, #0]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	bfcc      	ite	gt
 801e3ee:	461e      	movgt	r6, r3
 801e3f0:	2601      	movle	r6, #1
 801e3f2:	4456      	add	r6, sl
 801e3f4:	2700      	movs	r7, #0
 801e3f6:	4649      	mov	r1, r9
 801e3f8:	2201      	movs	r2, #1
 801e3fa:	4658      	mov	r0, fp
 801e3fc:	f000 fb5a 	bl	801eab4 <__lshift>
 801e400:	4621      	mov	r1, r4
 801e402:	4681      	mov	r9, r0
 801e404:	f000 fbc2 	bl	801eb8c <__mcmp>
 801e408:	2800      	cmp	r0, #0
 801e40a:	dcb0      	bgt.n	801e36e <_dtoa_r+0xa5e>
 801e40c:	d102      	bne.n	801e414 <_dtoa_r+0xb04>
 801e40e:	f018 0f01 	tst.w	r8, #1
 801e412:	d1ac      	bne.n	801e36e <_dtoa_r+0xa5e>
 801e414:	4633      	mov	r3, r6
 801e416:	461e      	mov	r6, r3
 801e418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e41c:	2a30      	cmp	r2, #48	@ 0x30
 801e41e:	d0fa      	beq.n	801e416 <_dtoa_r+0xb06>
 801e420:	e5c2      	b.n	801dfa8 <_dtoa_r+0x698>
 801e422:	459a      	cmp	sl, r3
 801e424:	d1a4      	bne.n	801e370 <_dtoa_r+0xa60>
 801e426:	9b04      	ldr	r3, [sp, #16]
 801e428:	3301      	adds	r3, #1
 801e42a:	9304      	str	r3, [sp, #16]
 801e42c:	2331      	movs	r3, #49	@ 0x31
 801e42e:	f88a 3000 	strb.w	r3, [sl]
 801e432:	e5b9      	b.n	801dfa8 <_dtoa_r+0x698>
 801e434:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e436:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e494 <_dtoa_r+0xb84>
 801e43a:	b11b      	cbz	r3, 801e444 <_dtoa_r+0xb34>
 801e43c:	f10a 0308 	add.w	r3, sl, #8
 801e440:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e442:	6013      	str	r3, [r2, #0]
 801e444:	4650      	mov	r0, sl
 801e446:	b019      	add	sp, #100	@ 0x64
 801e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e44e:	2b01      	cmp	r3, #1
 801e450:	f77f ae37 	ble.w	801e0c2 <_dtoa_r+0x7b2>
 801e454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e456:	930a      	str	r3, [sp, #40]	@ 0x28
 801e458:	2001      	movs	r0, #1
 801e45a:	e655      	b.n	801e108 <_dtoa_r+0x7f8>
 801e45c:	9b00      	ldr	r3, [sp, #0]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	f77f aed6 	ble.w	801e210 <_dtoa_r+0x900>
 801e464:	4656      	mov	r6, sl
 801e466:	4621      	mov	r1, r4
 801e468:	4648      	mov	r0, r9
 801e46a:	f7ff f9c7 	bl	801d7fc <quorem>
 801e46e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e472:	f806 8b01 	strb.w	r8, [r6], #1
 801e476:	9b00      	ldr	r3, [sp, #0]
 801e478:	eba6 020a 	sub.w	r2, r6, sl
 801e47c:	4293      	cmp	r3, r2
 801e47e:	ddb3      	ble.n	801e3e8 <_dtoa_r+0xad8>
 801e480:	4649      	mov	r1, r9
 801e482:	2300      	movs	r3, #0
 801e484:	220a      	movs	r2, #10
 801e486:	4658      	mov	r0, fp
 801e488:	f000 f968 	bl	801e75c <__multadd>
 801e48c:	4681      	mov	r9, r0
 801e48e:	e7ea      	b.n	801e466 <_dtoa_r+0xb56>
 801e490:	08024c7d 	.word	0x08024c7d
 801e494:	08024c18 	.word	0x08024c18

0801e498 <_free_r>:
 801e498:	b538      	push	{r3, r4, r5, lr}
 801e49a:	4605      	mov	r5, r0
 801e49c:	2900      	cmp	r1, #0
 801e49e:	d041      	beq.n	801e524 <_free_r+0x8c>
 801e4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e4a4:	1f0c      	subs	r4, r1, #4
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	bfb8      	it	lt
 801e4aa:	18e4      	addlt	r4, r4, r3
 801e4ac:	f000 f8e8 	bl	801e680 <__malloc_lock>
 801e4b0:	4a1d      	ldr	r2, [pc, #116]	@ (801e528 <_free_r+0x90>)
 801e4b2:	6813      	ldr	r3, [r2, #0]
 801e4b4:	b933      	cbnz	r3, 801e4c4 <_free_r+0x2c>
 801e4b6:	6063      	str	r3, [r4, #4]
 801e4b8:	6014      	str	r4, [r2, #0]
 801e4ba:	4628      	mov	r0, r5
 801e4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e4c0:	f000 b8e4 	b.w	801e68c <__malloc_unlock>
 801e4c4:	42a3      	cmp	r3, r4
 801e4c6:	d908      	bls.n	801e4da <_free_r+0x42>
 801e4c8:	6820      	ldr	r0, [r4, #0]
 801e4ca:	1821      	adds	r1, r4, r0
 801e4cc:	428b      	cmp	r3, r1
 801e4ce:	bf01      	itttt	eq
 801e4d0:	6819      	ldreq	r1, [r3, #0]
 801e4d2:	685b      	ldreq	r3, [r3, #4]
 801e4d4:	1809      	addeq	r1, r1, r0
 801e4d6:	6021      	streq	r1, [r4, #0]
 801e4d8:	e7ed      	b.n	801e4b6 <_free_r+0x1e>
 801e4da:	461a      	mov	r2, r3
 801e4dc:	685b      	ldr	r3, [r3, #4]
 801e4de:	b10b      	cbz	r3, 801e4e4 <_free_r+0x4c>
 801e4e0:	42a3      	cmp	r3, r4
 801e4e2:	d9fa      	bls.n	801e4da <_free_r+0x42>
 801e4e4:	6811      	ldr	r1, [r2, #0]
 801e4e6:	1850      	adds	r0, r2, r1
 801e4e8:	42a0      	cmp	r0, r4
 801e4ea:	d10b      	bne.n	801e504 <_free_r+0x6c>
 801e4ec:	6820      	ldr	r0, [r4, #0]
 801e4ee:	4401      	add	r1, r0
 801e4f0:	1850      	adds	r0, r2, r1
 801e4f2:	4283      	cmp	r3, r0
 801e4f4:	6011      	str	r1, [r2, #0]
 801e4f6:	d1e0      	bne.n	801e4ba <_free_r+0x22>
 801e4f8:	6818      	ldr	r0, [r3, #0]
 801e4fa:	685b      	ldr	r3, [r3, #4]
 801e4fc:	6053      	str	r3, [r2, #4]
 801e4fe:	4408      	add	r0, r1
 801e500:	6010      	str	r0, [r2, #0]
 801e502:	e7da      	b.n	801e4ba <_free_r+0x22>
 801e504:	d902      	bls.n	801e50c <_free_r+0x74>
 801e506:	230c      	movs	r3, #12
 801e508:	602b      	str	r3, [r5, #0]
 801e50a:	e7d6      	b.n	801e4ba <_free_r+0x22>
 801e50c:	6820      	ldr	r0, [r4, #0]
 801e50e:	1821      	adds	r1, r4, r0
 801e510:	428b      	cmp	r3, r1
 801e512:	bf04      	itt	eq
 801e514:	6819      	ldreq	r1, [r3, #0]
 801e516:	685b      	ldreq	r3, [r3, #4]
 801e518:	6063      	str	r3, [r4, #4]
 801e51a:	bf04      	itt	eq
 801e51c:	1809      	addeq	r1, r1, r0
 801e51e:	6021      	streq	r1, [r4, #0]
 801e520:	6054      	str	r4, [r2, #4]
 801e522:	e7ca      	b.n	801e4ba <_free_r+0x22>
 801e524:	bd38      	pop	{r3, r4, r5, pc}
 801e526:	bf00      	nop
 801e528:	2000f63c 	.word	0x2000f63c

0801e52c <malloc>:
 801e52c:	4b02      	ldr	r3, [pc, #8]	@ (801e538 <malloc+0xc>)
 801e52e:	4601      	mov	r1, r0
 801e530:	6818      	ldr	r0, [r3, #0]
 801e532:	f000 b825 	b.w	801e580 <_malloc_r>
 801e536:	bf00      	nop
 801e538:	20000094 	.word	0x20000094

0801e53c <sbrk_aligned>:
 801e53c:	b570      	push	{r4, r5, r6, lr}
 801e53e:	4e0f      	ldr	r6, [pc, #60]	@ (801e57c <sbrk_aligned+0x40>)
 801e540:	460c      	mov	r4, r1
 801e542:	6831      	ldr	r1, [r6, #0]
 801e544:	4605      	mov	r5, r0
 801e546:	b911      	cbnz	r1, 801e54e <sbrk_aligned+0x12>
 801e548:	f001 f814 	bl	801f574 <_sbrk_r>
 801e54c:	6030      	str	r0, [r6, #0]
 801e54e:	4621      	mov	r1, r4
 801e550:	4628      	mov	r0, r5
 801e552:	f001 f80f 	bl	801f574 <_sbrk_r>
 801e556:	1c43      	adds	r3, r0, #1
 801e558:	d103      	bne.n	801e562 <sbrk_aligned+0x26>
 801e55a:	f04f 34ff 	mov.w	r4, #4294967295
 801e55e:	4620      	mov	r0, r4
 801e560:	bd70      	pop	{r4, r5, r6, pc}
 801e562:	1cc4      	adds	r4, r0, #3
 801e564:	f024 0403 	bic.w	r4, r4, #3
 801e568:	42a0      	cmp	r0, r4
 801e56a:	d0f8      	beq.n	801e55e <sbrk_aligned+0x22>
 801e56c:	1a21      	subs	r1, r4, r0
 801e56e:	4628      	mov	r0, r5
 801e570:	f001 f800 	bl	801f574 <_sbrk_r>
 801e574:	3001      	adds	r0, #1
 801e576:	d1f2      	bne.n	801e55e <sbrk_aligned+0x22>
 801e578:	e7ef      	b.n	801e55a <sbrk_aligned+0x1e>
 801e57a:	bf00      	nop
 801e57c:	2000f638 	.word	0x2000f638

0801e580 <_malloc_r>:
 801e580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e584:	1ccd      	adds	r5, r1, #3
 801e586:	f025 0503 	bic.w	r5, r5, #3
 801e58a:	3508      	adds	r5, #8
 801e58c:	2d0c      	cmp	r5, #12
 801e58e:	bf38      	it	cc
 801e590:	250c      	movcc	r5, #12
 801e592:	2d00      	cmp	r5, #0
 801e594:	4606      	mov	r6, r0
 801e596:	db01      	blt.n	801e59c <_malloc_r+0x1c>
 801e598:	42a9      	cmp	r1, r5
 801e59a:	d904      	bls.n	801e5a6 <_malloc_r+0x26>
 801e59c:	230c      	movs	r3, #12
 801e59e:	6033      	str	r3, [r6, #0]
 801e5a0:	2000      	movs	r0, #0
 801e5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e67c <_malloc_r+0xfc>
 801e5aa:	f000 f869 	bl	801e680 <__malloc_lock>
 801e5ae:	f8d8 3000 	ldr.w	r3, [r8]
 801e5b2:	461c      	mov	r4, r3
 801e5b4:	bb44      	cbnz	r4, 801e608 <_malloc_r+0x88>
 801e5b6:	4629      	mov	r1, r5
 801e5b8:	4630      	mov	r0, r6
 801e5ba:	f7ff ffbf 	bl	801e53c <sbrk_aligned>
 801e5be:	1c43      	adds	r3, r0, #1
 801e5c0:	4604      	mov	r4, r0
 801e5c2:	d158      	bne.n	801e676 <_malloc_r+0xf6>
 801e5c4:	f8d8 4000 	ldr.w	r4, [r8]
 801e5c8:	4627      	mov	r7, r4
 801e5ca:	2f00      	cmp	r7, #0
 801e5cc:	d143      	bne.n	801e656 <_malloc_r+0xd6>
 801e5ce:	2c00      	cmp	r4, #0
 801e5d0:	d04b      	beq.n	801e66a <_malloc_r+0xea>
 801e5d2:	6823      	ldr	r3, [r4, #0]
 801e5d4:	4639      	mov	r1, r7
 801e5d6:	4630      	mov	r0, r6
 801e5d8:	eb04 0903 	add.w	r9, r4, r3
 801e5dc:	f000 ffca 	bl	801f574 <_sbrk_r>
 801e5e0:	4581      	cmp	r9, r0
 801e5e2:	d142      	bne.n	801e66a <_malloc_r+0xea>
 801e5e4:	6821      	ldr	r1, [r4, #0]
 801e5e6:	1a6d      	subs	r5, r5, r1
 801e5e8:	4629      	mov	r1, r5
 801e5ea:	4630      	mov	r0, r6
 801e5ec:	f7ff ffa6 	bl	801e53c <sbrk_aligned>
 801e5f0:	3001      	adds	r0, #1
 801e5f2:	d03a      	beq.n	801e66a <_malloc_r+0xea>
 801e5f4:	6823      	ldr	r3, [r4, #0]
 801e5f6:	442b      	add	r3, r5
 801e5f8:	6023      	str	r3, [r4, #0]
 801e5fa:	f8d8 3000 	ldr.w	r3, [r8]
 801e5fe:	685a      	ldr	r2, [r3, #4]
 801e600:	bb62      	cbnz	r2, 801e65c <_malloc_r+0xdc>
 801e602:	f8c8 7000 	str.w	r7, [r8]
 801e606:	e00f      	b.n	801e628 <_malloc_r+0xa8>
 801e608:	6822      	ldr	r2, [r4, #0]
 801e60a:	1b52      	subs	r2, r2, r5
 801e60c:	d420      	bmi.n	801e650 <_malloc_r+0xd0>
 801e60e:	2a0b      	cmp	r2, #11
 801e610:	d917      	bls.n	801e642 <_malloc_r+0xc2>
 801e612:	1961      	adds	r1, r4, r5
 801e614:	42a3      	cmp	r3, r4
 801e616:	6025      	str	r5, [r4, #0]
 801e618:	bf18      	it	ne
 801e61a:	6059      	strne	r1, [r3, #4]
 801e61c:	6863      	ldr	r3, [r4, #4]
 801e61e:	bf08      	it	eq
 801e620:	f8c8 1000 	streq.w	r1, [r8]
 801e624:	5162      	str	r2, [r4, r5]
 801e626:	604b      	str	r3, [r1, #4]
 801e628:	4630      	mov	r0, r6
 801e62a:	f000 f82f 	bl	801e68c <__malloc_unlock>
 801e62e:	f104 000b 	add.w	r0, r4, #11
 801e632:	1d23      	adds	r3, r4, #4
 801e634:	f020 0007 	bic.w	r0, r0, #7
 801e638:	1ac2      	subs	r2, r0, r3
 801e63a:	bf1c      	itt	ne
 801e63c:	1a1b      	subne	r3, r3, r0
 801e63e:	50a3      	strne	r3, [r4, r2]
 801e640:	e7af      	b.n	801e5a2 <_malloc_r+0x22>
 801e642:	6862      	ldr	r2, [r4, #4]
 801e644:	42a3      	cmp	r3, r4
 801e646:	bf0c      	ite	eq
 801e648:	f8c8 2000 	streq.w	r2, [r8]
 801e64c:	605a      	strne	r2, [r3, #4]
 801e64e:	e7eb      	b.n	801e628 <_malloc_r+0xa8>
 801e650:	4623      	mov	r3, r4
 801e652:	6864      	ldr	r4, [r4, #4]
 801e654:	e7ae      	b.n	801e5b4 <_malloc_r+0x34>
 801e656:	463c      	mov	r4, r7
 801e658:	687f      	ldr	r7, [r7, #4]
 801e65a:	e7b6      	b.n	801e5ca <_malloc_r+0x4a>
 801e65c:	461a      	mov	r2, r3
 801e65e:	685b      	ldr	r3, [r3, #4]
 801e660:	42a3      	cmp	r3, r4
 801e662:	d1fb      	bne.n	801e65c <_malloc_r+0xdc>
 801e664:	2300      	movs	r3, #0
 801e666:	6053      	str	r3, [r2, #4]
 801e668:	e7de      	b.n	801e628 <_malloc_r+0xa8>
 801e66a:	230c      	movs	r3, #12
 801e66c:	6033      	str	r3, [r6, #0]
 801e66e:	4630      	mov	r0, r6
 801e670:	f000 f80c 	bl	801e68c <__malloc_unlock>
 801e674:	e794      	b.n	801e5a0 <_malloc_r+0x20>
 801e676:	6005      	str	r5, [r0, #0]
 801e678:	e7d6      	b.n	801e628 <_malloc_r+0xa8>
 801e67a:	bf00      	nop
 801e67c:	2000f63c 	.word	0x2000f63c

0801e680 <__malloc_lock>:
 801e680:	4801      	ldr	r0, [pc, #4]	@ (801e688 <__malloc_lock+0x8>)
 801e682:	f7ff b88c 	b.w	801d79e <__retarget_lock_acquire_recursive>
 801e686:	bf00      	nop
 801e688:	2000f634 	.word	0x2000f634

0801e68c <__malloc_unlock>:
 801e68c:	4801      	ldr	r0, [pc, #4]	@ (801e694 <__malloc_unlock+0x8>)
 801e68e:	f7ff b887 	b.w	801d7a0 <__retarget_lock_release_recursive>
 801e692:	bf00      	nop
 801e694:	2000f634 	.word	0x2000f634

0801e698 <_Balloc>:
 801e698:	b570      	push	{r4, r5, r6, lr}
 801e69a:	69c6      	ldr	r6, [r0, #28]
 801e69c:	4604      	mov	r4, r0
 801e69e:	460d      	mov	r5, r1
 801e6a0:	b976      	cbnz	r6, 801e6c0 <_Balloc+0x28>
 801e6a2:	2010      	movs	r0, #16
 801e6a4:	f7ff ff42 	bl	801e52c <malloc>
 801e6a8:	4602      	mov	r2, r0
 801e6aa:	61e0      	str	r0, [r4, #28]
 801e6ac:	b920      	cbnz	r0, 801e6b8 <_Balloc+0x20>
 801e6ae:	4b18      	ldr	r3, [pc, #96]	@ (801e710 <_Balloc+0x78>)
 801e6b0:	4818      	ldr	r0, [pc, #96]	@ (801e714 <_Balloc+0x7c>)
 801e6b2:	216b      	movs	r1, #107	@ 0x6b
 801e6b4:	f7ff f884 	bl	801d7c0 <__assert_func>
 801e6b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e6bc:	6006      	str	r6, [r0, #0]
 801e6be:	60c6      	str	r6, [r0, #12]
 801e6c0:	69e6      	ldr	r6, [r4, #28]
 801e6c2:	68f3      	ldr	r3, [r6, #12]
 801e6c4:	b183      	cbz	r3, 801e6e8 <_Balloc+0x50>
 801e6c6:	69e3      	ldr	r3, [r4, #28]
 801e6c8:	68db      	ldr	r3, [r3, #12]
 801e6ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e6ce:	b9b8      	cbnz	r0, 801e700 <_Balloc+0x68>
 801e6d0:	2101      	movs	r1, #1
 801e6d2:	fa01 f605 	lsl.w	r6, r1, r5
 801e6d6:	1d72      	adds	r2, r6, #5
 801e6d8:	0092      	lsls	r2, r2, #2
 801e6da:	4620      	mov	r0, r4
 801e6dc:	f000 ff61 	bl	801f5a2 <_calloc_r>
 801e6e0:	b160      	cbz	r0, 801e6fc <_Balloc+0x64>
 801e6e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e6e6:	e00e      	b.n	801e706 <_Balloc+0x6e>
 801e6e8:	2221      	movs	r2, #33	@ 0x21
 801e6ea:	2104      	movs	r1, #4
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f000 ff58 	bl	801f5a2 <_calloc_r>
 801e6f2:	69e3      	ldr	r3, [r4, #28]
 801e6f4:	60f0      	str	r0, [r6, #12]
 801e6f6:	68db      	ldr	r3, [r3, #12]
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d1e4      	bne.n	801e6c6 <_Balloc+0x2e>
 801e6fc:	2000      	movs	r0, #0
 801e6fe:	bd70      	pop	{r4, r5, r6, pc}
 801e700:	6802      	ldr	r2, [r0, #0]
 801e702:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e706:	2300      	movs	r3, #0
 801e708:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e70c:	e7f7      	b.n	801e6fe <_Balloc+0x66>
 801e70e:	bf00      	nop
 801e710:	08024a38 	.word	0x08024a38
 801e714:	08024c8e 	.word	0x08024c8e

0801e718 <_Bfree>:
 801e718:	b570      	push	{r4, r5, r6, lr}
 801e71a:	69c6      	ldr	r6, [r0, #28]
 801e71c:	4605      	mov	r5, r0
 801e71e:	460c      	mov	r4, r1
 801e720:	b976      	cbnz	r6, 801e740 <_Bfree+0x28>
 801e722:	2010      	movs	r0, #16
 801e724:	f7ff ff02 	bl	801e52c <malloc>
 801e728:	4602      	mov	r2, r0
 801e72a:	61e8      	str	r0, [r5, #28]
 801e72c:	b920      	cbnz	r0, 801e738 <_Bfree+0x20>
 801e72e:	4b09      	ldr	r3, [pc, #36]	@ (801e754 <_Bfree+0x3c>)
 801e730:	4809      	ldr	r0, [pc, #36]	@ (801e758 <_Bfree+0x40>)
 801e732:	218f      	movs	r1, #143	@ 0x8f
 801e734:	f7ff f844 	bl	801d7c0 <__assert_func>
 801e738:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e73c:	6006      	str	r6, [r0, #0]
 801e73e:	60c6      	str	r6, [r0, #12]
 801e740:	b13c      	cbz	r4, 801e752 <_Bfree+0x3a>
 801e742:	69eb      	ldr	r3, [r5, #28]
 801e744:	6862      	ldr	r2, [r4, #4]
 801e746:	68db      	ldr	r3, [r3, #12]
 801e748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e74c:	6021      	str	r1, [r4, #0]
 801e74e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e752:	bd70      	pop	{r4, r5, r6, pc}
 801e754:	08024a38 	.word	0x08024a38
 801e758:	08024c8e 	.word	0x08024c8e

0801e75c <__multadd>:
 801e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e760:	690d      	ldr	r5, [r1, #16]
 801e762:	4607      	mov	r7, r0
 801e764:	460c      	mov	r4, r1
 801e766:	461e      	mov	r6, r3
 801e768:	f101 0c14 	add.w	ip, r1, #20
 801e76c:	2000      	movs	r0, #0
 801e76e:	f8dc 3000 	ldr.w	r3, [ip]
 801e772:	b299      	uxth	r1, r3
 801e774:	fb02 6101 	mla	r1, r2, r1, r6
 801e778:	0c1e      	lsrs	r6, r3, #16
 801e77a:	0c0b      	lsrs	r3, r1, #16
 801e77c:	fb02 3306 	mla	r3, r2, r6, r3
 801e780:	b289      	uxth	r1, r1
 801e782:	3001      	adds	r0, #1
 801e784:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e788:	4285      	cmp	r5, r0
 801e78a:	f84c 1b04 	str.w	r1, [ip], #4
 801e78e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801e792:	dcec      	bgt.n	801e76e <__multadd+0x12>
 801e794:	b30e      	cbz	r6, 801e7da <__multadd+0x7e>
 801e796:	68a3      	ldr	r3, [r4, #8]
 801e798:	42ab      	cmp	r3, r5
 801e79a:	dc19      	bgt.n	801e7d0 <__multadd+0x74>
 801e79c:	6861      	ldr	r1, [r4, #4]
 801e79e:	4638      	mov	r0, r7
 801e7a0:	3101      	adds	r1, #1
 801e7a2:	f7ff ff79 	bl	801e698 <_Balloc>
 801e7a6:	4680      	mov	r8, r0
 801e7a8:	b928      	cbnz	r0, 801e7b6 <__multadd+0x5a>
 801e7aa:	4602      	mov	r2, r0
 801e7ac:	4b0c      	ldr	r3, [pc, #48]	@ (801e7e0 <__multadd+0x84>)
 801e7ae:	480d      	ldr	r0, [pc, #52]	@ (801e7e4 <__multadd+0x88>)
 801e7b0:	21ba      	movs	r1, #186	@ 0xba
 801e7b2:	f7ff f805 	bl	801d7c0 <__assert_func>
 801e7b6:	6922      	ldr	r2, [r4, #16]
 801e7b8:	3202      	adds	r2, #2
 801e7ba:	f104 010c 	add.w	r1, r4, #12
 801e7be:	0092      	lsls	r2, r2, #2
 801e7c0:	300c      	adds	r0, #12
 801e7c2:	f7fe ffee 	bl	801d7a2 <memcpy>
 801e7c6:	4621      	mov	r1, r4
 801e7c8:	4638      	mov	r0, r7
 801e7ca:	f7ff ffa5 	bl	801e718 <_Bfree>
 801e7ce:	4644      	mov	r4, r8
 801e7d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801e7d4:	3501      	adds	r5, #1
 801e7d6:	615e      	str	r6, [r3, #20]
 801e7d8:	6125      	str	r5, [r4, #16]
 801e7da:	4620      	mov	r0, r4
 801e7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7e0:	08024c7d 	.word	0x08024c7d
 801e7e4:	08024c8e 	.word	0x08024c8e

0801e7e8 <__hi0bits>:
 801e7e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	bf36      	itet	cc
 801e7f0:	0403      	lslcc	r3, r0, #16
 801e7f2:	2000      	movcs	r0, #0
 801e7f4:	2010      	movcc	r0, #16
 801e7f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e7fa:	bf3c      	itt	cc
 801e7fc:	021b      	lslcc	r3, r3, #8
 801e7fe:	3008      	addcc	r0, #8
 801e800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e804:	bf3c      	itt	cc
 801e806:	011b      	lslcc	r3, r3, #4
 801e808:	3004      	addcc	r0, #4
 801e80a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e80e:	bf3c      	itt	cc
 801e810:	009b      	lslcc	r3, r3, #2
 801e812:	3002      	addcc	r0, #2
 801e814:	2b00      	cmp	r3, #0
 801e816:	db05      	blt.n	801e824 <__hi0bits+0x3c>
 801e818:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801e81c:	f100 0001 	add.w	r0, r0, #1
 801e820:	bf08      	it	eq
 801e822:	2020      	moveq	r0, #32
 801e824:	4770      	bx	lr

0801e826 <__lo0bits>:
 801e826:	6803      	ldr	r3, [r0, #0]
 801e828:	4602      	mov	r2, r0
 801e82a:	f013 0007 	ands.w	r0, r3, #7
 801e82e:	d00b      	beq.n	801e848 <__lo0bits+0x22>
 801e830:	07d9      	lsls	r1, r3, #31
 801e832:	d421      	bmi.n	801e878 <__lo0bits+0x52>
 801e834:	0798      	lsls	r0, r3, #30
 801e836:	bf49      	itett	mi
 801e838:	085b      	lsrmi	r3, r3, #1
 801e83a:	089b      	lsrpl	r3, r3, #2
 801e83c:	2001      	movmi	r0, #1
 801e83e:	6013      	strmi	r3, [r2, #0]
 801e840:	bf5c      	itt	pl
 801e842:	6013      	strpl	r3, [r2, #0]
 801e844:	2002      	movpl	r0, #2
 801e846:	4770      	bx	lr
 801e848:	b299      	uxth	r1, r3
 801e84a:	b909      	cbnz	r1, 801e850 <__lo0bits+0x2a>
 801e84c:	0c1b      	lsrs	r3, r3, #16
 801e84e:	2010      	movs	r0, #16
 801e850:	b2d9      	uxtb	r1, r3
 801e852:	b909      	cbnz	r1, 801e858 <__lo0bits+0x32>
 801e854:	3008      	adds	r0, #8
 801e856:	0a1b      	lsrs	r3, r3, #8
 801e858:	0719      	lsls	r1, r3, #28
 801e85a:	bf04      	itt	eq
 801e85c:	091b      	lsreq	r3, r3, #4
 801e85e:	3004      	addeq	r0, #4
 801e860:	0799      	lsls	r1, r3, #30
 801e862:	bf04      	itt	eq
 801e864:	089b      	lsreq	r3, r3, #2
 801e866:	3002      	addeq	r0, #2
 801e868:	07d9      	lsls	r1, r3, #31
 801e86a:	d403      	bmi.n	801e874 <__lo0bits+0x4e>
 801e86c:	085b      	lsrs	r3, r3, #1
 801e86e:	f100 0001 	add.w	r0, r0, #1
 801e872:	d003      	beq.n	801e87c <__lo0bits+0x56>
 801e874:	6013      	str	r3, [r2, #0]
 801e876:	4770      	bx	lr
 801e878:	2000      	movs	r0, #0
 801e87a:	4770      	bx	lr
 801e87c:	2020      	movs	r0, #32
 801e87e:	4770      	bx	lr

0801e880 <__i2b>:
 801e880:	b510      	push	{r4, lr}
 801e882:	460c      	mov	r4, r1
 801e884:	2101      	movs	r1, #1
 801e886:	f7ff ff07 	bl	801e698 <_Balloc>
 801e88a:	4602      	mov	r2, r0
 801e88c:	b928      	cbnz	r0, 801e89a <__i2b+0x1a>
 801e88e:	4b05      	ldr	r3, [pc, #20]	@ (801e8a4 <__i2b+0x24>)
 801e890:	4805      	ldr	r0, [pc, #20]	@ (801e8a8 <__i2b+0x28>)
 801e892:	f240 1145 	movw	r1, #325	@ 0x145
 801e896:	f7fe ff93 	bl	801d7c0 <__assert_func>
 801e89a:	2301      	movs	r3, #1
 801e89c:	6144      	str	r4, [r0, #20]
 801e89e:	6103      	str	r3, [r0, #16]
 801e8a0:	bd10      	pop	{r4, pc}
 801e8a2:	bf00      	nop
 801e8a4:	08024c7d 	.word	0x08024c7d
 801e8a8:	08024c8e 	.word	0x08024c8e

0801e8ac <__multiply>:
 801e8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8b0:	4614      	mov	r4, r2
 801e8b2:	690a      	ldr	r2, [r1, #16]
 801e8b4:	6923      	ldr	r3, [r4, #16]
 801e8b6:	429a      	cmp	r2, r3
 801e8b8:	bfa8      	it	ge
 801e8ba:	4623      	movge	r3, r4
 801e8bc:	460f      	mov	r7, r1
 801e8be:	bfa4      	itt	ge
 801e8c0:	460c      	movge	r4, r1
 801e8c2:	461f      	movge	r7, r3
 801e8c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801e8c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801e8cc:	68a3      	ldr	r3, [r4, #8]
 801e8ce:	6861      	ldr	r1, [r4, #4]
 801e8d0:	eb0a 0609 	add.w	r6, sl, r9
 801e8d4:	42b3      	cmp	r3, r6
 801e8d6:	b085      	sub	sp, #20
 801e8d8:	bfb8      	it	lt
 801e8da:	3101      	addlt	r1, #1
 801e8dc:	f7ff fedc 	bl	801e698 <_Balloc>
 801e8e0:	b930      	cbnz	r0, 801e8f0 <__multiply+0x44>
 801e8e2:	4602      	mov	r2, r0
 801e8e4:	4b44      	ldr	r3, [pc, #272]	@ (801e9f8 <__multiply+0x14c>)
 801e8e6:	4845      	ldr	r0, [pc, #276]	@ (801e9fc <__multiply+0x150>)
 801e8e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801e8ec:	f7fe ff68 	bl	801d7c0 <__assert_func>
 801e8f0:	f100 0514 	add.w	r5, r0, #20
 801e8f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801e8f8:	462b      	mov	r3, r5
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	4543      	cmp	r3, r8
 801e8fe:	d321      	bcc.n	801e944 <__multiply+0x98>
 801e900:	f107 0114 	add.w	r1, r7, #20
 801e904:	f104 0214 	add.w	r2, r4, #20
 801e908:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801e90c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801e910:	9302      	str	r3, [sp, #8]
 801e912:	1b13      	subs	r3, r2, r4
 801e914:	3b15      	subs	r3, #21
 801e916:	f023 0303 	bic.w	r3, r3, #3
 801e91a:	3304      	adds	r3, #4
 801e91c:	f104 0715 	add.w	r7, r4, #21
 801e920:	42ba      	cmp	r2, r7
 801e922:	bf38      	it	cc
 801e924:	2304      	movcc	r3, #4
 801e926:	9301      	str	r3, [sp, #4]
 801e928:	9b02      	ldr	r3, [sp, #8]
 801e92a:	9103      	str	r1, [sp, #12]
 801e92c:	428b      	cmp	r3, r1
 801e92e:	d80c      	bhi.n	801e94a <__multiply+0x9e>
 801e930:	2e00      	cmp	r6, #0
 801e932:	dd03      	ble.n	801e93c <__multiply+0x90>
 801e934:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e938:	2b00      	cmp	r3, #0
 801e93a:	d05b      	beq.n	801e9f4 <__multiply+0x148>
 801e93c:	6106      	str	r6, [r0, #16]
 801e93e:	b005      	add	sp, #20
 801e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e944:	f843 2b04 	str.w	r2, [r3], #4
 801e948:	e7d8      	b.n	801e8fc <__multiply+0x50>
 801e94a:	f8b1 a000 	ldrh.w	sl, [r1]
 801e94e:	f1ba 0f00 	cmp.w	sl, #0
 801e952:	d024      	beq.n	801e99e <__multiply+0xf2>
 801e954:	f104 0e14 	add.w	lr, r4, #20
 801e958:	46a9      	mov	r9, r5
 801e95a:	f04f 0c00 	mov.w	ip, #0
 801e95e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e962:	f8d9 3000 	ldr.w	r3, [r9]
 801e966:	fa1f fb87 	uxth.w	fp, r7
 801e96a:	b29b      	uxth	r3, r3
 801e96c:	fb0a 330b 	mla	r3, sl, fp, r3
 801e970:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801e974:	f8d9 7000 	ldr.w	r7, [r9]
 801e978:	4463      	add	r3, ip
 801e97a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e97e:	fb0a c70b 	mla	r7, sl, fp, ip
 801e982:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801e986:	b29b      	uxth	r3, r3
 801e988:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e98c:	4572      	cmp	r2, lr
 801e98e:	f849 3b04 	str.w	r3, [r9], #4
 801e992:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801e996:	d8e2      	bhi.n	801e95e <__multiply+0xb2>
 801e998:	9b01      	ldr	r3, [sp, #4]
 801e99a:	f845 c003 	str.w	ip, [r5, r3]
 801e99e:	9b03      	ldr	r3, [sp, #12]
 801e9a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801e9a4:	3104      	adds	r1, #4
 801e9a6:	f1b9 0f00 	cmp.w	r9, #0
 801e9aa:	d021      	beq.n	801e9f0 <__multiply+0x144>
 801e9ac:	682b      	ldr	r3, [r5, #0]
 801e9ae:	f104 0c14 	add.w	ip, r4, #20
 801e9b2:	46ae      	mov	lr, r5
 801e9b4:	f04f 0a00 	mov.w	sl, #0
 801e9b8:	f8bc b000 	ldrh.w	fp, [ip]
 801e9bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801e9c0:	fb09 770b 	mla	r7, r9, fp, r7
 801e9c4:	4457      	add	r7, sl
 801e9c6:	b29b      	uxth	r3, r3
 801e9c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801e9cc:	f84e 3b04 	str.w	r3, [lr], #4
 801e9d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e9d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e9d8:	f8be 3000 	ldrh.w	r3, [lr]
 801e9dc:	fb09 330a 	mla	r3, r9, sl, r3
 801e9e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801e9e4:	4562      	cmp	r2, ip
 801e9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e9ea:	d8e5      	bhi.n	801e9b8 <__multiply+0x10c>
 801e9ec:	9f01      	ldr	r7, [sp, #4]
 801e9ee:	51eb      	str	r3, [r5, r7]
 801e9f0:	3504      	adds	r5, #4
 801e9f2:	e799      	b.n	801e928 <__multiply+0x7c>
 801e9f4:	3e01      	subs	r6, #1
 801e9f6:	e79b      	b.n	801e930 <__multiply+0x84>
 801e9f8:	08024c7d 	.word	0x08024c7d
 801e9fc:	08024c8e 	.word	0x08024c8e

0801ea00 <__pow5mult>:
 801ea00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea04:	4615      	mov	r5, r2
 801ea06:	f012 0203 	ands.w	r2, r2, #3
 801ea0a:	4607      	mov	r7, r0
 801ea0c:	460e      	mov	r6, r1
 801ea0e:	d007      	beq.n	801ea20 <__pow5mult+0x20>
 801ea10:	4c25      	ldr	r4, [pc, #148]	@ (801eaa8 <__pow5mult+0xa8>)
 801ea12:	3a01      	subs	r2, #1
 801ea14:	2300      	movs	r3, #0
 801ea16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ea1a:	f7ff fe9f 	bl	801e75c <__multadd>
 801ea1e:	4606      	mov	r6, r0
 801ea20:	10ad      	asrs	r5, r5, #2
 801ea22:	d03d      	beq.n	801eaa0 <__pow5mult+0xa0>
 801ea24:	69fc      	ldr	r4, [r7, #28]
 801ea26:	b97c      	cbnz	r4, 801ea48 <__pow5mult+0x48>
 801ea28:	2010      	movs	r0, #16
 801ea2a:	f7ff fd7f 	bl	801e52c <malloc>
 801ea2e:	4602      	mov	r2, r0
 801ea30:	61f8      	str	r0, [r7, #28]
 801ea32:	b928      	cbnz	r0, 801ea40 <__pow5mult+0x40>
 801ea34:	4b1d      	ldr	r3, [pc, #116]	@ (801eaac <__pow5mult+0xac>)
 801ea36:	481e      	ldr	r0, [pc, #120]	@ (801eab0 <__pow5mult+0xb0>)
 801ea38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ea3c:	f7fe fec0 	bl	801d7c0 <__assert_func>
 801ea40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ea44:	6004      	str	r4, [r0, #0]
 801ea46:	60c4      	str	r4, [r0, #12]
 801ea48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ea4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ea50:	b94c      	cbnz	r4, 801ea66 <__pow5mult+0x66>
 801ea52:	f240 2171 	movw	r1, #625	@ 0x271
 801ea56:	4638      	mov	r0, r7
 801ea58:	f7ff ff12 	bl	801e880 <__i2b>
 801ea5c:	2300      	movs	r3, #0
 801ea5e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ea62:	4604      	mov	r4, r0
 801ea64:	6003      	str	r3, [r0, #0]
 801ea66:	f04f 0900 	mov.w	r9, #0
 801ea6a:	07eb      	lsls	r3, r5, #31
 801ea6c:	d50a      	bpl.n	801ea84 <__pow5mult+0x84>
 801ea6e:	4631      	mov	r1, r6
 801ea70:	4622      	mov	r2, r4
 801ea72:	4638      	mov	r0, r7
 801ea74:	f7ff ff1a 	bl	801e8ac <__multiply>
 801ea78:	4631      	mov	r1, r6
 801ea7a:	4680      	mov	r8, r0
 801ea7c:	4638      	mov	r0, r7
 801ea7e:	f7ff fe4b 	bl	801e718 <_Bfree>
 801ea82:	4646      	mov	r6, r8
 801ea84:	106d      	asrs	r5, r5, #1
 801ea86:	d00b      	beq.n	801eaa0 <__pow5mult+0xa0>
 801ea88:	6820      	ldr	r0, [r4, #0]
 801ea8a:	b938      	cbnz	r0, 801ea9c <__pow5mult+0x9c>
 801ea8c:	4622      	mov	r2, r4
 801ea8e:	4621      	mov	r1, r4
 801ea90:	4638      	mov	r0, r7
 801ea92:	f7ff ff0b 	bl	801e8ac <__multiply>
 801ea96:	6020      	str	r0, [r4, #0]
 801ea98:	f8c0 9000 	str.w	r9, [r0]
 801ea9c:	4604      	mov	r4, r0
 801ea9e:	e7e4      	b.n	801ea6a <__pow5mult+0x6a>
 801eaa0:	4630      	mov	r0, r6
 801eaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eaa6:	bf00      	nop
 801eaa8:	08024ce8 	.word	0x08024ce8
 801eaac:	08024a38 	.word	0x08024a38
 801eab0:	08024c8e 	.word	0x08024c8e

0801eab4 <__lshift>:
 801eab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eab8:	460c      	mov	r4, r1
 801eaba:	6849      	ldr	r1, [r1, #4]
 801eabc:	6923      	ldr	r3, [r4, #16]
 801eabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801eac2:	68a3      	ldr	r3, [r4, #8]
 801eac4:	4607      	mov	r7, r0
 801eac6:	4691      	mov	r9, r2
 801eac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801eacc:	f108 0601 	add.w	r6, r8, #1
 801ead0:	42b3      	cmp	r3, r6
 801ead2:	db0b      	blt.n	801eaec <__lshift+0x38>
 801ead4:	4638      	mov	r0, r7
 801ead6:	f7ff fddf 	bl	801e698 <_Balloc>
 801eada:	4605      	mov	r5, r0
 801eadc:	b948      	cbnz	r0, 801eaf2 <__lshift+0x3e>
 801eade:	4602      	mov	r2, r0
 801eae0:	4b28      	ldr	r3, [pc, #160]	@ (801eb84 <__lshift+0xd0>)
 801eae2:	4829      	ldr	r0, [pc, #164]	@ (801eb88 <__lshift+0xd4>)
 801eae4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801eae8:	f7fe fe6a 	bl	801d7c0 <__assert_func>
 801eaec:	3101      	adds	r1, #1
 801eaee:	005b      	lsls	r3, r3, #1
 801eaf0:	e7ee      	b.n	801ead0 <__lshift+0x1c>
 801eaf2:	2300      	movs	r3, #0
 801eaf4:	f100 0114 	add.w	r1, r0, #20
 801eaf8:	f100 0210 	add.w	r2, r0, #16
 801eafc:	4618      	mov	r0, r3
 801eafe:	4553      	cmp	r3, sl
 801eb00:	db33      	blt.n	801eb6a <__lshift+0xb6>
 801eb02:	6920      	ldr	r0, [r4, #16]
 801eb04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eb08:	f104 0314 	add.w	r3, r4, #20
 801eb0c:	f019 091f 	ands.w	r9, r9, #31
 801eb10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801eb14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801eb18:	d02b      	beq.n	801eb72 <__lshift+0xbe>
 801eb1a:	f1c9 0e20 	rsb	lr, r9, #32
 801eb1e:	468a      	mov	sl, r1
 801eb20:	2200      	movs	r2, #0
 801eb22:	6818      	ldr	r0, [r3, #0]
 801eb24:	fa00 f009 	lsl.w	r0, r0, r9
 801eb28:	4310      	orrs	r0, r2
 801eb2a:	f84a 0b04 	str.w	r0, [sl], #4
 801eb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb32:	459c      	cmp	ip, r3
 801eb34:	fa22 f20e 	lsr.w	r2, r2, lr
 801eb38:	d8f3      	bhi.n	801eb22 <__lshift+0x6e>
 801eb3a:	ebac 0304 	sub.w	r3, ip, r4
 801eb3e:	3b15      	subs	r3, #21
 801eb40:	f023 0303 	bic.w	r3, r3, #3
 801eb44:	3304      	adds	r3, #4
 801eb46:	f104 0015 	add.w	r0, r4, #21
 801eb4a:	4584      	cmp	ip, r0
 801eb4c:	bf38      	it	cc
 801eb4e:	2304      	movcc	r3, #4
 801eb50:	50ca      	str	r2, [r1, r3]
 801eb52:	b10a      	cbz	r2, 801eb58 <__lshift+0xa4>
 801eb54:	f108 0602 	add.w	r6, r8, #2
 801eb58:	3e01      	subs	r6, #1
 801eb5a:	4638      	mov	r0, r7
 801eb5c:	612e      	str	r6, [r5, #16]
 801eb5e:	4621      	mov	r1, r4
 801eb60:	f7ff fdda 	bl	801e718 <_Bfree>
 801eb64:	4628      	mov	r0, r5
 801eb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb6a:	f842 0f04 	str.w	r0, [r2, #4]!
 801eb6e:	3301      	adds	r3, #1
 801eb70:	e7c5      	b.n	801eafe <__lshift+0x4a>
 801eb72:	3904      	subs	r1, #4
 801eb74:	f853 2b04 	ldr.w	r2, [r3], #4
 801eb78:	f841 2f04 	str.w	r2, [r1, #4]!
 801eb7c:	459c      	cmp	ip, r3
 801eb7e:	d8f9      	bhi.n	801eb74 <__lshift+0xc0>
 801eb80:	e7ea      	b.n	801eb58 <__lshift+0xa4>
 801eb82:	bf00      	nop
 801eb84:	08024c7d 	.word	0x08024c7d
 801eb88:	08024c8e 	.word	0x08024c8e

0801eb8c <__mcmp>:
 801eb8c:	690a      	ldr	r2, [r1, #16]
 801eb8e:	4603      	mov	r3, r0
 801eb90:	6900      	ldr	r0, [r0, #16]
 801eb92:	1a80      	subs	r0, r0, r2
 801eb94:	b530      	push	{r4, r5, lr}
 801eb96:	d10e      	bne.n	801ebb6 <__mcmp+0x2a>
 801eb98:	3314      	adds	r3, #20
 801eb9a:	3114      	adds	r1, #20
 801eb9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801eba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801eba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801eba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ebac:	4295      	cmp	r5, r2
 801ebae:	d003      	beq.n	801ebb8 <__mcmp+0x2c>
 801ebb0:	d205      	bcs.n	801ebbe <__mcmp+0x32>
 801ebb2:	f04f 30ff 	mov.w	r0, #4294967295
 801ebb6:	bd30      	pop	{r4, r5, pc}
 801ebb8:	42a3      	cmp	r3, r4
 801ebba:	d3f3      	bcc.n	801eba4 <__mcmp+0x18>
 801ebbc:	e7fb      	b.n	801ebb6 <__mcmp+0x2a>
 801ebbe:	2001      	movs	r0, #1
 801ebc0:	e7f9      	b.n	801ebb6 <__mcmp+0x2a>
	...

0801ebc4 <__mdiff>:
 801ebc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc8:	4689      	mov	r9, r1
 801ebca:	4606      	mov	r6, r0
 801ebcc:	4611      	mov	r1, r2
 801ebce:	4648      	mov	r0, r9
 801ebd0:	4614      	mov	r4, r2
 801ebd2:	f7ff ffdb 	bl	801eb8c <__mcmp>
 801ebd6:	1e05      	subs	r5, r0, #0
 801ebd8:	d112      	bne.n	801ec00 <__mdiff+0x3c>
 801ebda:	4629      	mov	r1, r5
 801ebdc:	4630      	mov	r0, r6
 801ebde:	f7ff fd5b 	bl	801e698 <_Balloc>
 801ebe2:	4602      	mov	r2, r0
 801ebe4:	b928      	cbnz	r0, 801ebf2 <__mdiff+0x2e>
 801ebe6:	4b3f      	ldr	r3, [pc, #252]	@ (801ece4 <__mdiff+0x120>)
 801ebe8:	f240 2137 	movw	r1, #567	@ 0x237
 801ebec:	483e      	ldr	r0, [pc, #248]	@ (801ece8 <__mdiff+0x124>)
 801ebee:	f7fe fde7 	bl	801d7c0 <__assert_func>
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ebf8:	4610      	mov	r0, r2
 801ebfa:	b003      	add	sp, #12
 801ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec00:	bfbc      	itt	lt
 801ec02:	464b      	movlt	r3, r9
 801ec04:	46a1      	movlt	r9, r4
 801ec06:	4630      	mov	r0, r6
 801ec08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ec0c:	bfba      	itte	lt
 801ec0e:	461c      	movlt	r4, r3
 801ec10:	2501      	movlt	r5, #1
 801ec12:	2500      	movge	r5, #0
 801ec14:	f7ff fd40 	bl	801e698 <_Balloc>
 801ec18:	4602      	mov	r2, r0
 801ec1a:	b918      	cbnz	r0, 801ec24 <__mdiff+0x60>
 801ec1c:	4b31      	ldr	r3, [pc, #196]	@ (801ece4 <__mdiff+0x120>)
 801ec1e:	f240 2145 	movw	r1, #581	@ 0x245
 801ec22:	e7e3      	b.n	801ebec <__mdiff+0x28>
 801ec24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ec28:	6926      	ldr	r6, [r4, #16]
 801ec2a:	60c5      	str	r5, [r0, #12]
 801ec2c:	f109 0310 	add.w	r3, r9, #16
 801ec30:	f109 0514 	add.w	r5, r9, #20
 801ec34:	f104 0e14 	add.w	lr, r4, #20
 801ec38:	f100 0b14 	add.w	fp, r0, #20
 801ec3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801ec40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801ec44:	9301      	str	r3, [sp, #4]
 801ec46:	46d9      	mov	r9, fp
 801ec48:	f04f 0c00 	mov.w	ip, #0
 801ec4c:	9b01      	ldr	r3, [sp, #4]
 801ec4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801ec52:	f853 af04 	ldr.w	sl, [r3, #4]!
 801ec56:	9301      	str	r3, [sp, #4]
 801ec58:	fa1f f38a 	uxth.w	r3, sl
 801ec5c:	4619      	mov	r1, r3
 801ec5e:	b283      	uxth	r3, r0
 801ec60:	1acb      	subs	r3, r1, r3
 801ec62:	0c00      	lsrs	r0, r0, #16
 801ec64:	4463      	add	r3, ip
 801ec66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801ec6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801ec6e:	b29b      	uxth	r3, r3
 801ec70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801ec74:	4576      	cmp	r6, lr
 801ec76:	f849 3b04 	str.w	r3, [r9], #4
 801ec7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ec7e:	d8e5      	bhi.n	801ec4c <__mdiff+0x88>
 801ec80:	1b33      	subs	r3, r6, r4
 801ec82:	3b15      	subs	r3, #21
 801ec84:	f023 0303 	bic.w	r3, r3, #3
 801ec88:	3415      	adds	r4, #21
 801ec8a:	3304      	adds	r3, #4
 801ec8c:	42a6      	cmp	r6, r4
 801ec8e:	bf38      	it	cc
 801ec90:	2304      	movcc	r3, #4
 801ec92:	441d      	add	r5, r3
 801ec94:	445b      	add	r3, fp
 801ec96:	461e      	mov	r6, r3
 801ec98:	462c      	mov	r4, r5
 801ec9a:	4544      	cmp	r4, r8
 801ec9c:	d30e      	bcc.n	801ecbc <__mdiff+0xf8>
 801ec9e:	f108 0103 	add.w	r1, r8, #3
 801eca2:	1b49      	subs	r1, r1, r5
 801eca4:	f021 0103 	bic.w	r1, r1, #3
 801eca8:	3d03      	subs	r5, #3
 801ecaa:	45a8      	cmp	r8, r5
 801ecac:	bf38      	it	cc
 801ecae:	2100      	movcc	r1, #0
 801ecb0:	440b      	add	r3, r1
 801ecb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ecb6:	b191      	cbz	r1, 801ecde <__mdiff+0x11a>
 801ecb8:	6117      	str	r7, [r2, #16]
 801ecba:	e79d      	b.n	801ebf8 <__mdiff+0x34>
 801ecbc:	f854 1b04 	ldr.w	r1, [r4], #4
 801ecc0:	46e6      	mov	lr, ip
 801ecc2:	0c08      	lsrs	r0, r1, #16
 801ecc4:	fa1c fc81 	uxtah	ip, ip, r1
 801ecc8:	4471      	add	r1, lr
 801ecca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801ecce:	b289      	uxth	r1, r1
 801ecd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801ecd4:	f846 1b04 	str.w	r1, [r6], #4
 801ecd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801ecdc:	e7dd      	b.n	801ec9a <__mdiff+0xd6>
 801ecde:	3f01      	subs	r7, #1
 801ece0:	e7e7      	b.n	801ecb2 <__mdiff+0xee>
 801ece2:	bf00      	nop
 801ece4:	08024c7d 	.word	0x08024c7d
 801ece8:	08024c8e 	.word	0x08024c8e

0801ecec <__d2b>:
 801ecec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ecf0:	460f      	mov	r7, r1
 801ecf2:	2101      	movs	r1, #1
 801ecf4:	ec59 8b10 	vmov	r8, r9, d0
 801ecf8:	4616      	mov	r6, r2
 801ecfa:	f7ff fccd 	bl	801e698 <_Balloc>
 801ecfe:	4604      	mov	r4, r0
 801ed00:	b930      	cbnz	r0, 801ed10 <__d2b+0x24>
 801ed02:	4602      	mov	r2, r0
 801ed04:	4b23      	ldr	r3, [pc, #140]	@ (801ed94 <__d2b+0xa8>)
 801ed06:	4824      	ldr	r0, [pc, #144]	@ (801ed98 <__d2b+0xac>)
 801ed08:	f240 310f 	movw	r1, #783	@ 0x30f
 801ed0c:	f7fe fd58 	bl	801d7c0 <__assert_func>
 801ed10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801ed14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ed18:	b10d      	cbz	r5, 801ed1e <__d2b+0x32>
 801ed1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ed1e:	9301      	str	r3, [sp, #4]
 801ed20:	f1b8 0300 	subs.w	r3, r8, #0
 801ed24:	d023      	beq.n	801ed6e <__d2b+0x82>
 801ed26:	4668      	mov	r0, sp
 801ed28:	9300      	str	r3, [sp, #0]
 801ed2a:	f7ff fd7c 	bl	801e826 <__lo0bits>
 801ed2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801ed32:	b1d0      	cbz	r0, 801ed6a <__d2b+0x7e>
 801ed34:	f1c0 0320 	rsb	r3, r0, #32
 801ed38:	fa02 f303 	lsl.w	r3, r2, r3
 801ed3c:	430b      	orrs	r3, r1
 801ed3e:	40c2      	lsrs	r2, r0
 801ed40:	6163      	str	r3, [r4, #20]
 801ed42:	9201      	str	r2, [sp, #4]
 801ed44:	9b01      	ldr	r3, [sp, #4]
 801ed46:	61a3      	str	r3, [r4, #24]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	bf0c      	ite	eq
 801ed4c:	2201      	moveq	r2, #1
 801ed4e:	2202      	movne	r2, #2
 801ed50:	6122      	str	r2, [r4, #16]
 801ed52:	b1a5      	cbz	r5, 801ed7e <__d2b+0x92>
 801ed54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ed58:	4405      	add	r5, r0
 801ed5a:	603d      	str	r5, [r7, #0]
 801ed5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ed60:	6030      	str	r0, [r6, #0]
 801ed62:	4620      	mov	r0, r4
 801ed64:	b003      	add	sp, #12
 801ed66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ed6a:	6161      	str	r1, [r4, #20]
 801ed6c:	e7ea      	b.n	801ed44 <__d2b+0x58>
 801ed6e:	a801      	add	r0, sp, #4
 801ed70:	f7ff fd59 	bl	801e826 <__lo0bits>
 801ed74:	9b01      	ldr	r3, [sp, #4]
 801ed76:	6163      	str	r3, [r4, #20]
 801ed78:	3020      	adds	r0, #32
 801ed7a:	2201      	movs	r2, #1
 801ed7c:	e7e8      	b.n	801ed50 <__d2b+0x64>
 801ed7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ed82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ed86:	6038      	str	r0, [r7, #0]
 801ed88:	6918      	ldr	r0, [r3, #16]
 801ed8a:	f7ff fd2d 	bl	801e7e8 <__hi0bits>
 801ed8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ed92:	e7e5      	b.n	801ed60 <__d2b+0x74>
 801ed94:	08024c7d 	.word	0x08024c7d
 801ed98:	08024c8e 	.word	0x08024c8e

0801ed9c <__ssputs_r>:
 801ed9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eda0:	688e      	ldr	r6, [r1, #8]
 801eda2:	461f      	mov	r7, r3
 801eda4:	42be      	cmp	r6, r7
 801eda6:	680b      	ldr	r3, [r1, #0]
 801eda8:	4682      	mov	sl, r0
 801edaa:	460c      	mov	r4, r1
 801edac:	4690      	mov	r8, r2
 801edae:	d82d      	bhi.n	801ee0c <__ssputs_r+0x70>
 801edb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801edb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801edb8:	d026      	beq.n	801ee08 <__ssputs_r+0x6c>
 801edba:	6965      	ldr	r5, [r4, #20]
 801edbc:	6909      	ldr	r1, [r1, #16]
 801edbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801edc2:	eba3 0901 	sub.w	r9, r3, r1
 801edc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801edca:	1c7b      	adds	r3, r7, #1
 801edcc:	444b      	add	r3, r9
 801edce:	106d      	asrs	r5, r5, #1
 801edd0:	429d      	cmp	r5, r3
 801edd2:	bf38      	it	cc
 801edd4:	461d      	movcc	r5, r3
 801edd6:	0553      	lsls	r3, r2, #21
 801edd8:	d527      	bpl.n	801ee2a <__ssputs_r+0x8e>
 801edda:	4629      	mov	r1, r5
 801eddc:	f7ff fbd0 	bl	801e580 <_malloc_r>
 801ede0:	4606      	mov	r6, r0
 801ede2:	b360      	cbz	r0, 801ee3e <__ssputs_r+0xa2>
 801ede4:	6921      	ldr	r1, [r4, #16]
 801ede6:	464a      	mov	r2, r9
 801ede8:	f7fe fcdb 	bl	801d7a2 <memcpy>
 801edec:	89a3      	ldrh	r3, [r4, #12]
 801edee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801edf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801edf6:	81a3      	strh	r3, [r4, #12]
 801edf8:	6126      	str	r6, [r4, #16]
 801edfa:	6165      	str	r5, [r4, #20]
 801edfc:	444e      	add	r6, r9
 801edfe:	eba5 0509 	sub.w	r5, r5, r9
 801ee02:	6026      	str	r6, [r4, #0]
 801ee04:	60a5      	str	r5, [r4, #8]
 801ee06:	463e      	mov	r6, r7
 801ee08:	42be      	cmp	r6, r7
 801ee0a:	d900      	bls.n	801ee0e <__ssputs_r+0x72>
 801ee0c:	463e      	mov	r6, r7
 801ee0e:	6820      	ldr	r0, [r4, #0]
 801ee10:	4632      	mov	r2, r6
 801ee12:	4641      	mov	r1, r8
 801ee14:	f7fe fbbd 	bl	801d592 <memmove>
 801ee18:	68a3      	ldr	r3, [r4, #8]
 801ee1a:	1b9b      	subs	r3, r3, r6
 801ee1c:	60a3      	str	r3, [r4, #8]
 801ee1e:	6823      	ldr	r3, [r4, #0]
 801ee20:	4433      	add	r3, r6
 801ee22:	6023      	str	r3, [r4, #0]
 801ee24:	2000      	movs	r0, #0
 801ee26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ee2a:	462a      	mov	r2, r5
 801ee2c:	f000 fbdf 	bl	801f5ee <_realloc_r>
 801ee30:	4606      	mov	r6, r0
 801ee32:	2800      	cmp	r0, #0
 801ee34:	d1e0      	bne.n	801edf8 <__ssputs_r+0x5c>
 801ee36:	6921      	ldr	r1, [r4, #16]
 801ee38:	4650      	mov	r0, sl
 801ee3a:	f7ff fb2d 	bl	801e498 <_free_r>
 801ee3e:	230c      	movs	r3, #12
 801ee40:	f8ca 3000 	str.w	r3, [sl]
 801ee44:	89a3      	ldrh	r3, [r4, #12]
 801ee46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee4a:	81a3      	strh	r3, [r4, #12]
 801ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 801ee50:	e7e9      	b.n	801ee26 <__ssputs_r+0x8a>
	...

0801ee54 <_svfiprintf_r>:
 801ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee58:	4698      	mov	r8, r3
 801ee5a:	898b      	ldrh	r3, [r1, #12]
 801ee5c:	061b      	lsls	r3, r3, #24
 801ee5e:	b09d      	sub	sp, #116	@ 0x74
 801ee60:	4607      	mov	r7, r0
 801ee62:	460d      	mov	r5, r1
 801ee64:	4614      	mov	r4, r2
 801ee66:	d510      	bpl.n	801ee8a <_svfiprintf_r+0x36>
 801ee68:	690b      	ldr	r3, [r1, #16]
 801ee6a:	b973      	cbnz	r3, 801ee8a <_svfiprintf_r+0x36>
 801ee6c:	2140      	movs	r1, #64	@ 0x40
 801ee6e:	f7ff fb87 	bl	801e580 <_malloc_r>
 801ee72:	6028      	str	r0, [r5, #0]
 801ee74:	6128      	str	r0, [r5, #16]
 801ee76:	b930      	cbnz	r0, 801ee86 <_svfiprintf_r+0x32>
 801ee78:	230c      	movs	r3, #12
 801ee7a:	603b      	str	r3, [r7, #0]
 801ee7c:	f04f 30ff 	mov.w	r0, #4294967295
 801ee80:	b01d      	add	sp, #116	@ 0x74
 801ee82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee86:	2340      	movs	r3, #64	@ 0x40
 801ee88:	616b      	str	r3, [r5, #20]
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee8e:	2320      	movs	r3, #32
 801ee90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ee94:	f8cd 800c 	str.w	r8, [sp, #12]
 801ee98:	2330      	movs	r3, #48	@ 0x30
 801ee9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f038 <_svfiprintf_r+0x1e4>
 801ee9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801eea2:	f04f 0901 	mov.w	r9, #1
 801eea6:	4623      	mov	r3, r4
 801eea8:	469a      	mov	sl, r3
 801eeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eeae:	b10a      	cbz	r2, 801eeb4 <_svfiprintf_r+0x60>
 801eeb0:	2a25      	cmp	r2, #37	@ 0x25
 801eeb2:	d1f9      	bne.n	801eea8 <_svfiprintf_r+0x54>
 801eeb4:	ebba 0b04 	subs.w	fp, sl, r4
 801eeb8:	d00b      	beq.n	801eed2 <_svfiprintf_r+0x7e>
 801eeba:	465b      	mov	r3, fp
 801eebc:	4622      	mov	r2, r4
 801eebe:	4629      	mov	r1, r5
 801eec0:	4638      	mov	r0, r7
 801eec2:	f7ff ff6b 	bl	801ed9c <__ssputs_r>
 801eec6:	3001      	adds	r0, #1
 801eec8:	f000 80a7 	beq.w	801f01a <_svfiprintf_r+0x1c6>
 801eecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eece:	445a      	add	r2, fp
 801eed0:	9209      	str	r2, [sp, #36]	@ 0x24
 801eed2:	f89a 3000 	ldrb.w	r3, [sl]
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	f000 809f 	beq.w	801f01a <_svfiprintf_r+0x1c6>
 801eedc:	2300      	movs	r3, #0
 801eede:	f04f 32ff 	mov.w	r2, #4294967295
 801eee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801eee6:	f10a 0a01 	add.w	sl, sl, #1
 801eeea:	9304      	str	r3, [sp, #16]
 801eeec:	9307      	str	r3, [sp, #28]
 801eeee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801eef2:	931a      	str	r3, [sp, #104]	@ 0x68
 801eef4:	4654      	mov	r4, sl
 801eef6:	2205      	movs	r2, #5
 801eef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eefc:	484e      	ldr	r0, [pc, #312]	@ (801f038 <_svfiprintf_r+0x1e4>)
 801eefe:	f7e1 f997 	bl	8000230 <memchr>
 801ef02:	9a04      	ldr	r2, [sp, #16]
 801ef04:	b9d8      	cbnz	r0, 801ef3e <_svfiprintf_r+0xea>
 801ef06:	06d0      	lsls	r0, r2, #27
 801ef08:	bf44      	itt	mi
 801ef0a:	2320      	movmi	r3, #32
 801ef0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef10:	0711      	lsls	r1, r2, #28
 801ef12:	bf44      	itt	mi
 801ef14:	232b      	movmi	r3, #43	@ 0x2b
 801ef16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ef1a:	f89a 3000 	ldrb.w	r3, [sl]
 801ef1e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef20:	d015      	beq.n	801ef4e <_svfiprintf_r+0xfa>
 801ef22:	9a07      	ldr	r2, [sp, #28]
 801ef24:	4654      	mov	r4, sl
 801ef26:	2000      	movs	r0, #0
 801ef28:	f04f 0c0a 	mov.w	ip, #10
 801ef2c:	4621      	mov	r1, r4
 801ef2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ef32:	3b30      	subs	r3, #48	@ 0x30
 801ef34:	2b09      	cmp	r3, #9
 801ef36:	d94b      	bls.n	801efd0 <_svfiprintf_r+0x17c>
 801ef38:	b1b0      	cbz	r0, 801ef68 <_svfiprintf_r+0x114>
 801ef3a:	9207      	str	r2, [sp, #28]
 801ef3c:	e014      	b.n	801ef68 <_svfiprintf_r+0x114>
 801ef3e:	eba0 0308 	sub.w	r3, r0, r8
 801ef42:	fa09 f303 	lsl.w	r3, r9, r3
 801ef46:	4313      	orrs	r3, r2
 801ef48:	9304      	str	r3, [sp, #16]
 801ef4a:	46a2      	mov	sl, r4
 801ef4c:	e7d2      	b.n	801eef4 <_svfiprintf_r+0xa0>
 801ef4e:	9b03      	ldr	r3, [sp, #12]
 801ef50:	1d19      	adds	r1, r3, #4
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	9103      	str	r1, [sp, #12]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	bfbb      	ittet	lt
 801ef5a:	425b      	neglt	r3, r3
 801ef5c:	f042 0202 	orrlt.w	r2, r2, #2
 801ef60:	9307      	strge	r3, [sp, #28]
 801ef62:	9307      	strlt	r3, [sp, #28]
 801ef64:	bfb8      	it	lt
 801ef66:	9204      	strlt	r2, [sp, #16]
 801ef68:	7823      	ldrb	r3, [r4, #0]
 801ef6a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ef6c:	d10a      	bne.n	801ef84 <_svfiprintf_r+0x130>
 801ef6e:	7863      	ldrb	r3, [r4, #1]
 801ef70:	2b2a      	cmp	r3, #42	@ 0x2a
 801ef72:	d132      	bne.n	801efda <_svfiprintf_r+0x186>
 801ef74:	9b03      	ldr	r3, [sp, #12]
 801ef76:	1d1a      	adds	r2, r3, #4
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	9203      	str	r2, [sp, #12]
 801ef7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ef80:	3402      	adds	r4, #2
 801ef82:	9305      	str	r3, [sp, #20]
 801ef84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f048 <_svfiprintf_r+0x1f4>
 801ef88:	7821      	ldrb	r1, [r4, #0]
 801ef8a:	2203      	movs	r2, #3
 801ef8c:	4650      	mov	r0, sl
 801ef8e:	f7e1 f94f 	bl	8000230 <memchr>
 801ef92:	b138      	cbz	r0, 801efa4 <_svfiprintf_r+0x150>
 801ef94:	9b04      	ldr	r3, [sp, #16]
 801ef96:	eba0 000a 	sub.w	r0, r0, sl
 801ef9a:	2240      	movs	r2, #64	@ 0x40
 801ef9c:	4082      	lsls	r2, r0
 801ef9e:	4313      	orrs	r3, r2
 801efa0:	3401      	adds	r4, #1
 801efa2:	9304      	str	r3, [sp, #16]
 801efa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efa8:	4824      	ldr	r0, [pc, #144]	@ (801f03c <_svfiprintf_r+0x1e8>)
 801efaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801efae:	2206      	movs	r2, #6
 801efb0:	f7e1 f93e 	bl	8000230 <memchr>
 801efb4:	2800      	cmp	r0, #0
 801efb6:	d036      	beq.n	801f026 <_svfiprintf_r+0x1d2>
 801efb8:	4b21      	ldr	r3, [pc, #132]	@ (801f040 <_svfiprintf_r+0x1ec>)
 801efba:	bb1b      	cbnz	r3, 801f004 <_svfiprintf_r+0x1b0>
 801efbc:	9b03      	ldr	r3, [sp, #12]
 801efbe:	3307      	adds	r3, #7
 801efc0:	f023 0307 	bic.w	r3, r3, #7
 801efc4:	3308      	adds	r3, #8
 801efc6:	9303      	str	r3, [sp, #12]
 801efc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801efca:	4433      	add	r3, r6
 801efcc:	9309      	str	r3, [sp, #36]	@ 0x24
 801efce:	e76a      	b.n	801eea6 <_svfiprintf_r+0x52>
 801efd0:	fb0c 3202 	mla	r2, ip, r2, r3
 801efd4:	460c      	mov	r4, r1
 801efd6:	2001      	movs	r0, #1
 801efd8:	e7a8      	b.n	801ef2c <_svfiprintf_r+0xd8>
 801efda:	2300      	movs	r3, #0
 801efdc:	3401      	adds	r4, #1
 801efde:	9305      	str	r3, [sp, #20]
 801efe0:	4619      	mov	r1, r3
 801efe2:	f04f 0c0a 	mov.w	ip, #10
 801efe6:	4620      	mov	r0, r4
 801efe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801efec:	3a30      	subs	r2, #48	@ 0x30
 801efee:	2a09      	cmp	r2, #9
 801eff0:	d903      	bls.n	801effa <_svfiprintf_r+0x1a6>
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	d0c6      	beq.n	801ef84 <_svfiprintf_r+0x130>
 801eff6:	9105      	str	r1, [sp, #20]
 801eff8:	e7c4      	b.n	801ef84 <_svfiprintf_r+0x130>
 801effa:	fb0c 2101 	mla	r1, ip, r1, r2
 801effe:	4604      	mov	r4, r0
 801f000:	2301      	movs	r3, #1
 801f002:	e7f0      	b.n	801efe6 <_svfiprintf_r+0x192>
 801f004:	ab03      	add	r3, sp, #12
 801f006:	9300      	str	r3, [sp, #0]
 801f008:	462a      	mov	r2, r5
 801f00a:	4b0e      	ldr	r3, [pc, #56]	@ (801f044 <_svfiprintf_r+0x1f0>)
 801f00c:	a904      	add	r1, sp, #16
 801f00e:	4638      	mov	r0, r7
 801f010:	f7fd fdc0 	bl	801cb94 <_printf_float>
 801f014:	1c42      	adds	r2, r0, #1
 801f016:	4606      	mov	r6, r0
 801f018:	d1d6      	bne.n	801efc8 <_svfiprintf_r+0x174>
 801f01a:	89ab      	ldrh	r3, [r5, #12]
 801f01c:	065b      	lsls	r3, r3, #25
 801f01e:	f53f af2d 	bmi.w	801ee7c <_svfiprintf_r+0x28>
 801f022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f024:	e72c      	b.n	801ee80 <_svfiprintf_r+0x2c>
 801f026:	ab03      	add	r3, sp, #12
 801f028:	9300      	str	r3, [sp, #0]
 801f02a:	462a      	mov	r2, r5
 801f02c:	4b05      	ldr	r3, [pc, #20]	@ (801f044 <_svfiprintf_r+0x1f0>)
 801f02e:	a904      	add	r1, sp, #16
 801f030:	4638      	mov	r0, r7
 801f032:	f7fe f847 	bl	801d0c4 <_printf_i>
 801f036:	e7ed      	b.n	801f014 <_svfiprintf_r+0x1c0>
 801f038:	08024de8 	.word	0x08024de8
 801f03c:	08024df2 	.word	0x08024df2
 801f040:	0801cb95 	.word	0x0801cb95
 801f044:	0801ed9d 	.word	0x0801ed9d
 801f048:	08024dee 	.word	0x08024dee

0801f04c <__sfputc_r>:
 801f04c:	6893      	ldr	r3, [r2, #8]
 801f04e:	3b01      	subs	r3, #1
 801f050:	2b00      	cmp	r3, #0
 801f052:	b410      	push	{r4}
 801f054:	6093      	str	r3, [r2, #8]
 801f056:	da08      	bge.n	801f06a <__sfputc_r+0x1e>
 801f058:	6994      	ldr	r4, [r2, #24]
 801f05a:	42a3      	cmp	r3, r4
 801f05c:	db01      	blt.n	801f062 <__sfputc_r+0x16>
 801f05e:	290a      	cmp	r1, #10
 801f060:	d103      	bne.n	801f06a <__sfputc_r+0x1e>
 801f062:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f066:	f000 b9f1 	b.w	801f44c <__swbuf_r>
 801f06a:	6813      	ldr	r3, [r2, #0]
 801f06c:	1c58      	adds	r0, r3, #1
 801f06e:	6010      	str	r0, [r2, #0]
 801f070:	7019      	strb	r1, [r3, #0]
 801f072:	4608      	mov	r0, r1
 801f074:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f078:	4770      	bx	lr

0801f07a <__sfputs_r>:
 801f07a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f07c:	4606      	mov	r6, r0
 801f07e:	460f      	mov	r7, r1
 801f080:	4614      	mov	r4, r2
 801f082:	18d5      	adds	r5, r2, r3
 801f084:	42ac      	cmp	r4, r5
 801f086:	d101      	bne.n	801f08c <__sfputs_r+0x12>
 801f088:	2000      	movs	r0, #0
 801f08a:	e007      	b.n	801f09c <__sfputs_r+0x22>
 801f08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f090:	463a      	mov	r2, r7
 801f092:	4630      	mov	r0, r6
 801f094:	f7ff ffda 	bl	801f04c <__sfputc_r>
 801f098:	1c43      	adds	r3, r0, #1
 801f09a:	d1f3      	bne.n	801f084 <__sfputs_r+0xa>
 801f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f0a0 <_vfiprintf_r>:
 801f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0a4:	460d      	mov	r5, r1
 801f0a6:	b09d      	sub	sp, #116	@ 0x74
 801f0a8:	4614      	mov	r4, r2
 801f0aa:	4698      	mov	r8, r3
 801f0ac:	4606      	mov	r6, r0
 801f0ae:	b118      	cbz	r0, 801f0b8 <_vfiprintf_r+0x18>
 801f0b0:	6a03      	ldr	r3, [r0, #32]
 801f0b2:	b90b      	cbnz	r3, 801f0b8 <_vfiprintf_r+0x18>
 801f0b4:	f7fe f9b2 	bl	801d41c <__sinit>
 801f0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f0ba:	07d9      	lsls	r1, r3, #31
 801f0bc:	d405      	bmi.n	801f0ca <_vfiprintf_r+0x2a>
 801f0be:	89ab      	ldrh	r3, [r5, #12]
 801f0c0:	059a      	lsls	r2, r3, #22
 801f0c2:	d402      	bmi.n	801f0ca <_vfiprintf_r+0x2a>
 801f0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f0c6:	f7fe fb6a 	bl	801d79e <__retarget_lock_acquire_recursive>
 801f0ca:	89ab      	ldrh	r3, [r5, #12]
 801f0cc:	071b      	lsls	r3, r3, #28
 801f0ce:	d501      	bpl.n	801f0d4 <_vfiprintf_r+0x34>
 801f0d0:	692b      	ldr	r3, [r5, #16]
 801f0d2:	b99b      	cbnz	r3, 801f0fc <_vfiprintf_r+0x5c>
 801f0d4:	4629      	mov	r1, r5
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	f000 f9f6 	bl	801f4c8 <__swsetup_r>
 801f0dc:	b170      	cbz	r0, 801f0fc <_vfiprintf_r+0x5c>
 801f0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f0e0:	07dc      	lsls	r4, r3, #31
 801f0e2:	d504      	bpl.n	801f0ee <_vfiprintf_r+0x4e>
 801f0e4:	f04f 30ff 	mov.w	r0, #4294967295
 801f0e8:	b01d      	add	sp, #116	@ 0x74
 801f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0ee:	89ab      	ldrh	r3, [r5, #12]
 801f0f0:	0598      	lsls	r0, r3, #22
 801f0f2:	d4f7      	bmi.n	801f0e4 <_vfiprintf_r+0x44>
 801f0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f0f6:	f7fe fb53 	bl	801d7a0 <__retarget_lock_release_recursive>
 801f0fa:	e7f3      	b.n	801f0e4 <_vfiprintf_r+0x44>
 801f0fc:	2300      	movs	r3, #0
 801f0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801f100:	2320      	movs	r3, #32
 801f102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f106:	f8cd 800c 	str.w	r8, [sp, #12]
 801f10a:	2330      	movs	r3, #48	@ 0x30
 801f10c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f2bc <_vfiprintf_r+0x21c>
 801f110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f114:	f04f 0901 	mov.w	r9, #1
 801f118:	4623      	mov	r3, r4
 801f11a:	469a      	mov	sl, r3
 801f11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f120:	b10a      	cbz	r2, 801f126 <_vfiprintf_r+0x86>
 801f122:	2a25      	cmp	r2, #37	@ 0x25
 801f124:	d1f9      	bne.n	801f11a <_vfiprintf_r+0x7a>
 801f126:	ebba 0b04 	subs.w	fp, sl, r4
 801f12a:	d00b      	beq.n	801f144 <_vfiprintf_r+0xa4>
 801f12c:	465b      	mov	r3, fp
 801f12e:	4622      	mov	r2, r4
 801f130:	4629      	mov	r1, r5
 801f132:	4630      	mov	r0, r6
 801f134:	f7ff ffa1 	bl	801f07a <__sfputs_r>
 801f138:	3001      	adds	r0, #1
 801f13a:	f000 80a7 	beq.w	801f28c <_vfiprintf_r+0x1ec>
 801f13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f140:	445a      	add	r2, fp
 801f142:	9209      	str	r2, [sp, #36]	@ 0x24
 801f144:	f89a 3000 	ldrb.w	r3, [sl]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	f000 809f 	beq.w	801f28c <_vfiprintf_r+0x1ec>
 801f14e:	2300      	movs	r3, #0
 801f150:	f04f 32ff 	mov.w	r2, #4294967295
 801f154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f158:	f10a 0a01 	add.w	sl, sl, #1
 801f15c:	9304      	str	r3, [sp, #16]
 801f15e:	9307      	str	r3, [sp, #28]
 801f160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f164:	931a      	str	r3, [sp, #104]	@ 0x68
 801f166:	4654      	mov	r4, sl
 801f168:	2205      	movs	r2, #5
 801f16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f16e:	4853      	ldr	r0, [pc, #332]	@ (801f2bc <_vfiprintf_r+0x21c>)
 801f170:	f7e1 f85e 	bl	8000230 <memchr>
 801f174:	9a04      	ldr	r2, [sp, #16]
 801f176:	b9d8      	cbnz	r0, 801f1b0 <_vfiprintf_r+0x110>
 801f178:	06d1      	lsls	r1, r2, #27
 801f17a:	bf44      	itt	mi
 801f17c:	2320      	movmi	r3, #32
 801f17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f182:	0713      	lsls	r3, r2, #28
 801f184:	bf44      	itt	mi
 801f186:	232b      	movmi	r3, #43	@ 0x2b
 801f188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f18c:	f89a 3000 	ldrb.w	r3, [sl]
 801f190:	2b2a      	cmp	r3, #42	@ 0x2a
 801f192:	d015      	beq.n	801f1c0 <_vfiprintf_r+0x120>
 801f194:	9a07      	ldr	r2, [sp, #28]
 801f196:	4654      	mov	r4, sl
 801f198:	2000      	movs	r0, #0
 801f19a:	f04f 0c0a 	mov.w	ip, #10
 801f19e:	4621      	mov	r1, r4
 801f1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f1a4:	3b30      	subs	r3, #48	@ 0x30
 801f1a6:	2b09      	cmp	r3, #9
 801f1a8:	d94b      	bls.n	801f242 <_vfiprintf_r+0x1a2>
 801f1aa:	b1b0      	cbz	r0, 801f1da <_vfiprintf_r+0x13a>
 801f1ac:	9207      	str	r2, [sp, #28]
 801f1ae:	e014      	b.n	801f1da <_vfiprintf_r+0x13a>
 801f1b0:	eba0 0308 	sub.w	r3, r0, r8
 801f1b4:	fa09 f303 	lsl.w	r3, r9, r3
 801f1b8:	4313      	orrs	r3, r2
 801f1ba:	9304      	str	r3, [sp, #16]
 801f1bc:	46a2      	mov	sl, r4
 801f1be:	e7d2      	b.n	801f166 <_vfiprintf_r+0xc6>
 801f1c0:	9b03      	ldr	r3, [sp, #12]
 801f1c2:	1d19      	adds	r1, r3, #4
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	9103      	str	r1, [sp, #12]
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	bfbb      	ittet	lt
 801f1cc:	425b      	neglt	r3, r3
 801f1ce:	f042 0202 	orrlt.w	r2, r2, #2
 801f1d2:	9307      	strge	r3, [sp, #28]
 801f1d4:	9307      	strlt	r3, [sp, #28]
 801f1d6:	bfb8      	it	lt
 801f1d8:	9204      	strlt	r2, [sp, #16]
 801f1da:	7823      	ldrb	r3, [r4, #0]
 801f1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 801f1de:	d10a      	bne.n	801f1f6 <_vfiprintf_r+0x156>
 801f1e0:	7863      	ldrb	r3, [r4, #1]
 801f1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 801f1e4:	d132      	bne.n	801f24c <_vfiprintf_r+0x1ac>
 801f1e6:	9b03      	ldr	r3, [sp, #12]
 801f1e8:	1d1a      	adds	r2, r3, #4
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	9203      	str	r2, [sp, #12]
 801f1ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f1f2:	3402      	adds	r4, #2
 801f1f4:	9305      	str	r3, [sp, #20]
 801f1f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f2cc <_vfiprintf_r+0x22c>
 801f1fa:	7821      	ldrb	r1, [r4, #0]
 801f1fc:	2203      	movs	r2, #3
 801f1fe:	4650      	mov	r0, sl
 801f200:	f7e1 f816 	bl	8000230 <memchr>
 801f204:	b138      	cbz	r0, 801f216 <_vfiprintf_r+0x176>
 801f206:	9b04      	ldr	r3, [sp, #16]
 801f208:	eba0 000a 	sub.w	r0, r0, sl
 801f20c:	2240      	movs	r2, #64	@ 0x40
 801f20e:	4082      	lsls	r2, r0
 801f210:	4313      	orrs	r3, r2
 801f212:	3401      	adds	r4, #1
 801f214:	9304      	str	r3, [sp, #16]
 801f216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f21a:	4829      	ldr	r0, [pc, #164]	@ (801f2c0 <_vfiprintf_r+0x220>)
 801f21c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f220:	2206      	movs	r2, #6
 801f222:	f7e1 f805 	bl	8000230 <memchr>
 801f226:	2800      	cmp	r0, #0
 801f228:	d03f      	beq.n	801f2aa <_vfiprintf_r+0x20a>
 801f22a:	4b26      	ldr	r3, [pc, #152]	@ (801f2c4 <_vfiprintf_r+0x224>)
 801f22c:	bb1b      	cbnz	r3, 801f276 <_vfiprintf_r+0x1d6>
 801f22e:	9b03      	ldr	r3, [sp, #12]
 801f230:	3307      	adds	r3, #7
 801f232:	f023 0307 	bic.w	r3, r3, #7
 801f236:	3308      	adds	r3, #8
 801f238:	9303      	str	r3, [sp, #12]
 801f23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f23c:	443b      	add	r3, r7
 801f23e:	9309      	str	r3, [sp, #36]	@ 0x24
 801f240:	e76a      	b.n	801f118 <_vfiprintf_r+0x78>
 801f242:	fb0c 3202 	mla	r2, ip, r2, r3
 801f246:	460c      	mov	r4, r1
 801f248:	2001      	movs	r0, #1
 801f24a:	e7a8      	b.n	801f19e <_vfiprintf_r+0xfe>
 801f24c:	2300      	movs	r3, #0
 801f24e:	3401      	adds	r4, #1
 801f250:	9305      	str	r3, [sp, #20]
 801f252:	4619      	mov	r1, r3
 801f254:	f04f 0c0a 	mov.w	ip, #10
 801f258:	4620      	mov	r0, r4
 801f25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f25e:	3a30      	subs	r2, #48	@ 0x30
 801f260:	2a09      	cmp	r2, #9
 801f262:	d903      	bls.n	801f26c <_vfiprintf_r+0x1cc>
 801f264:	2b00      	cmp	r3, #0
 801f266:	d0c6      	beq.n	801f1f6 <_vfiprintf_r+0x156>
 801f268:	9105      	str	r1, [sp, #20]
 801f26a:	e7c4      	b.n	801f1f6 <_vfiprintf_r+0x156>
 801f26c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f270:	4604      	mov	r4, r0
 801f272:	2301      	movs	r3, #1
 801f274:	e7f0      	b.n	801f258 <_vfiprintf_r+0x1b8>
 801f276:	ab03      	add	r3, sp, #12
 801f278:	9300      	str	r3, [sp, #0]
 801f27a:	462a      	mov	r2, r5
 801f27c:	4b12      	ldr	r3, [pc, #72]	@ (801f2c8 <_vfiprintf_r+0x228>)
 801f27e:	a904      	add	r1, sp, #16
 801f280:	4630      	mov	r0, r6
 801f282:	f7fd fc87 	bl	801cb94 <_printf_float>
 801f286:	4607      	mov	r7, r0
 801f288:	1c78      	adds	r0, r7, #1
 801f28a:	d1d6      	bne.n	801f23a <_vfiprintf_r+0x19a>
 801f28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f28e:	07d9      	lsls	r1, r3, #31
 801f290:	d405      	bmi.n	801f29e <_vfiprintf_r+0x1fe>
 801f292:	89ab      	ldrh	r3, [r5, #12]
 801f294:	059a      	lsls	r2, r3, #22
 801f296:	d402      	bmi.n	801f29e <_vfiprintf_r+0x1fe>
 801f298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f29a:	f7fe fa81 	bl	801d7a0 <__retarget_lock_release_recursive>
 801f29e:	89ab      	ldrh	r3, [r5, #12]
 801f2a0:	065b      	lsls	r3, r3, #25
 801f2a2:	f53f af1f 	bmi.w	801f0e4 <_vfiprintf_r+0x44>
 801f2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2a8:	e71e      	b.n	801f0e8 <_vfiprintf_r+0x48>
 801f2aa:	ab03      	add	r3, sp, #12
 801f2ac:	9300      	str	r3, [sp, #0]
 801f2ae:	462a      	mov	r2, r5
 801f2b0:	4b05      	ldr	r3, [pc, #20]	@ (801f2c8 <_vfiprintf_r+0x228>)
 801f2b2:	a904      	add	r1, sp, #16
 801f2b4:	4630      	mov	r0, r6
 801f2b6:	f7fd ff05 	bl	801d0c4 <_printf_i>
 801f2ba:	e7e4      	b.n	801f286 <_vfiprintf_r+0x1e6>
 801f2bc:	08024de8 	.word	0x08024de8
 801f2c0:	08024df2 	.word	0x08024df2
 801f2c4:	0801cb95 	.word	0x0801cb95
 801f2c8:	0801f07b 	.word	0x0801f07b
 801f2cc:	08024dee 	.word	0x08024dee

0801f2d0 <__sflush_r>:
 801f2d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f2d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2d8:	0716      	lsls	r6, r2, #28
 801f2da:	4605      	mov	r5, r0
 801f2dc:	460c      	mov	r4, r1
 801f2de:	d454      	bmi.n	801f38a <__sflush_r+0xba>
 801f2e0:	684b      	ldr	r3, [r1, #4]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	dc02      	bgt.n	801f2ec <__sflush_r+0x1c>
 801f2e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	dd48      	ble.n	801f37e <__sflush_r+0xae>
 801f2ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f2ee:	2e00      	cmp	r6, #0
 801f2f0:	d045      	beq.n	801f37e <__sflush_r+0xae>
 801f2f2:	2300      	movs	r3, #0
 801f2f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f2f8:	682f      	ldr	r7, [r5, #0]
 801f2fa:	6a21      	ldr	r1, [r4, #32]
 801f2fc:	602b      	str	r3, [r5, #0]
 801f2fe:	d030      	beq.n	801f362 <__sflush_r+0x92>
 801f300:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f302:	89a3      	ldrh	r3, [r4, #12]
 801f304:	0759      	lsls	r1, r3, #29
 801f306:	d505      	bpl.n	801f314 <__sflush_r+0x44>
 801f308:	6863      	ldr	r3, [r4, #4]
 801f30a:	1ad2      	subs	r2, r2, r3
 801f30c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f30e:	b10b      	cbz	r3, 801f314 <__sflush_r+0x44>
 801f310:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f312:	1ad2      	subs	r2, r2, r3
 801f314:	2300      	movs	r3, #0
 801f316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f318:	6a21      	ldr	r1, [r4, #32]
 801f31a:	4628      	mov	r0, r5
 801f31c:	47b0      	blx	r6
 801f31e:	1c43      	adds	r3, r0, #1
 801f320:	89a3      	ldrh	r3, [r4, #12]
 801f322:	d106      	bne.n	801f332 <__sflush_r+0x62>
 801f324:	6829      	ldr	r1, [r5, #0]
 801f326:	291d      	cmp	r1, #29
 801f328:	d82b      	bhi.n	801f382 <__sflush_r+0xb2>
 801f32a:	4a2a      	ldr	r2, [pc, #168]	@ (801f3d4 <__sflush_r+0x104>)
 801f32c:	410a      	asrs	r2, r1
 801f32e:	07d6      	lsls	r6, r2, #31
 801f330:	d427      	bmi.n	801f382 <__sflush_r+0xb2>
 801f332:	2200      	movs	r2, #0
 801f334:	6062      	str	r2, [r4, #4]
 801f336:	04d9      	lsls	r1, r3, #19
 801f338:	6922      	ldr	r2, [r4, #16]
 801f33a:	6022      	str	r2, [r4, #0]
 801f33c:	d504      	bpl.n	801f348 <__sflush_r+0x78>
 801f33e:	1c42      	adds	r2, r0, #1
 801f340:	d101      	bne.n	801f346 <__sflush_r+0x76>
 801f342:	682b      	ldr	r3, [r5, #0]
 801f344:	b903      	cbnz	r3, 801f348 <__sflush_r+0x78>
 801f346:	6560      	str	r0, [r4, #84]	@ 0x54
 801f348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f34a:	602f      	str	r7, [r5, #0]
 801f34c:	b1b9      	cbz	r1, 801f37e <__sflush_r+0xae>
 801f34e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f352:	4299      	cmp	r1, r3
 801f354:	d002      	beq.n	801f35c <__sflush_r+0x8c>
 801f356:	4628      	mov	r0, r5
 801f358:	f7ff f89e 	bl	801e498 <_free_r>
 801f35c:	2300      	movs	r3, #0
 801f35e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f360:	e00d      	b.n	801f37e <__sflush_r+0xae>
 801f362:	2301      	movs	r3, #1
 801f364:	4628      	mov	r0, r5
 801f366:	47b0      	blx	r6
 801f368:	4602      	mov	r2, r0
 801f36a:	1c50      	adds	r0, r2, #1
 801f36c:	d1c9      	bne.n	801f302 <__sflush_r+0x32>
 801f36e:	682b      	ldr	r3, [r5, #0]
 801f370:	2b00      	cmp	r3, #0
 801f372:	d0c6      	beq.n	801f302 <__sflush_r+0x32>
 801f374:	2b1d      	cmp	r3, #29
 801f376:	d001      	beq.n	801f37c <__sflush_r+0xac>
 801f378:	2b16      	cmp	r3, #22
 801f37a:	d11e      	bne.n	801f3ba <__sflush_r+0xea>
 801f37c:	602f      	str	r7, [r5, #0]
 801f37e:	2000      	movs	r0, #0
 801f380:	e022      	b.n	801f3c8 <__sflush_r+0xf8>
 801f382:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f386:	b21b      	sxth	r3, r3
 801f388:	e01b      	b.n	801f3c2 <__sflush_r+0xf2>
 801f38a:	690f      	ldr	r7, [r1, #16]
 801f38c:	2f00      	cmp	r7, #0
 801f38e:	d0f6      	beq.n	801f37e <__sflush_r+0xae>
 801f390:	0793      	lsls	r3, r2, #30
 801f392:	680e      	ldr	r6, [r1, #0]
 801f394:	bf08      	it	eq
 801f396:	694b      	ldreq	r3, [r1, #20]
 801f398:	600f      	str	r7, [r1, #0]
 801f39a:	bf18      	it	ne
 801f39c:	2300      	movne	r3, #0
 801f39e:	eba6 0807 	sub.w	r8, r6, r7
 801f3a2:	608b      	str	r3, [r1, #8]
 801f3a4:	f1b8 0f00 	cmp.w	r8, #0
 801f3a8:	dde9      	ble.n	801f37e <__sflush_r+0xae>
 801f3aa:	6a21      	ldr	r1, [r4, #32]
 801f3ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f3ae:	4643      	mov	r3, r8
 801f3b0:	463a      	mov	r2, r7
 801f3b2:	4628      	mov	r0, r5
 801f3b4:	47b0      	blx	r6
 801f3b6:	2800      	cmp	r0, #0
 801f3b8:	dc08      	bgt.n	801f3cc <__sflush_r+0xfc>
 801f3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f3c2:	81a3      	strh	r3, [r4, #12]
 801f3c4:	f04f 30ff 	mov.w	r0, #4294967295
 801f3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3cc:	4407      	add	r7, r0
 801f3ce:	eba8 0800 	sub.w	r8, r8, r0
 801f3d2:	e7e7      	b.n	801f3a4 <__sflush_r+0xd4>
 801f3d4:	dfbffffe 	.word	0xdfbffffe

0801f3d8 <_fflush_r>:
 801f3d8:	b538      	push	{r3, r4, r5, lr}
 801f3da:	690b      	ldr	r3, [r1, #16]
 801f3dc:	4605      	mov	r5, r0
 801f3de:	460c      	mov	r4, r1
 801f3e0:	b913      	cbnz	r3, 801f3e8 <_fflush_r+0x10>
 801f3e2:	2500      	movs	r5, #0
 801f3e4:	4628      	mov	r0, r5
 801f3e6:	bd38      	pop	{r3, r4, r5, pc}
 801f3e8:	b118      	cbz	r0, 801f3f2 <_fflush_r+0x1a>
 801f3ea:	6a03      	ldr	r3, [r0, #32]
 801f3ec:	b90b      	cbnz	r3, 801f3f2 <_fflush_r+0x1a>
 801f3ee:	f7fe f815 	bl	801d41c <__sinit>
 801f3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d0f3      	beq.n	801f3e2 <_fflush_r+0xa>
 801f3fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f3fc:	07d0      	lsls	r0, r2, #31
 801f3fe:	d404      	bmi.n	801f40a <_fflush_r+0x32>
 801f400:	0599      	lsls	r1, r3, #22
 801f402:	d402      	bmi.n	801f40a <_fflush_r+0x32>
 801f404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f406:	f7fe f9ca 	bl	801d79e <__retarget_lock_acquire_recursive>
 801f40a:	4628      	mov	r0, r5
 801f40c:	4621      	mov	r1, r4
 801f40e:	f7ff ff5f 	bl	801f2d0 <__sflush_r>
 801f412:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f414:	07da      	lsls	r2, r3, #31
 801f416:	4605      	mov	r5, r0
 801f418:	d4e4      	bmi.n	801f3e4 <_fflush_r+0xc>
 801f41a:	89a3      	ldrh	r3, [r4, #12]
 801f41c:	059b      	lsls	r3, r3, #22
 801f41e:	d4e1      	bmi.n	801f3e4 <_fflush_r+0xc>
 801f420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f422:	f7fe f9bd 	bl	801d7a0 <__retarget_lock_release_recursive>
 801f426:	e7dd      	b.n	801f3e4 <_fflush_r+0xc>

0801f428 <fiprintf>:
 801f428:	b40e      	push	{r1, r2, r3}
 801f42a:	b503      	push	{r0, r1, lr}
 801f42c:	4601      	mov	r1, r0
 801f42e:	ab03      	add	r3, sp, #12
 801f430:	4805      	ldr	r0, [pc, #20]	@ (801f448 <fiprintf+0x20>)
 801f432:	f853 2b04 	ldr.w	r2, [r3], #4
 801f436:	6800      	ldr	r0, [r0, #0]
 801f438:	9301      	str	r3, [sp, #4]
 801f43a:	f7ff fe31 	bl	801f0a0 <_vfiprintf_r>
 801f43e:	b002      	add	sp, #8
 801f440:	f85d eb04 	ldr.w	lr, [sp], #4
 801f444:	b003      	add	sp, #12
 801f446:	4770      	bx	lr
 801f448:	20000094 	.word	0x20000094

0801f44c <__swbuf_r>:
 801f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f44e:	460e      	mov	r6, r1
 801f450:	4614      	mov	r4, r2
 801f452:	4605      	mov	r5, r0
 801f454:	b118      	cbz	r0, 801f45e <__swbuf_r+0x12>
 801f456:	6a03      	ldr	r3, [r0, #32]
 801f458:	b90b      	cbnz	r3, 801f45e <__swbuf_r+0x12>
 801f45a:	f7fd ffdf 	bl	801d41c <__sinit>
 801f45e:	69a3      	ldr	r3, [r4, #24]
 801f460:	60a3      	str	r3, [r4, #8]
 801f462:	89a3      	ldrh	r3, [r4, #12]
 801f464:	071a      	lsls	r2, r3, #28
 801f466:	d501      	bpl.n	801f46c <__swbuf_r+0x20>
 801f468:	6923      	ldr	r3, [r4, #16]
 801f46a:	b943      	cbnz	r3, 801f47e <__swbuf_r+0x32>
 801f46c:	4621      	mov	r1, r4
 801f46e:	4628      	mov	r0, r5
 801f470:	f000 f82a 	bl	801f4c8 <__swsetup_r>
 801f474:	b118      	cbz	r0, 801f47e <__swbuf_r+0x32>
 801f476:	f04f 37ff 	mov.w	r7, #4294967295
 801f47a:	4638      	mov	r0, r7
 801f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f47e:	6823      	ldr	r3, [r4, #0]
 801f480:	6922      	ldr	r2, [r4, #16]
 801f482:	1a98      	subs	r0, r3, r2
 801f484:	6963      	ldr	r3, [r4, #20]
 801f486:	b2f6      	uxtb	r6, r6
 801f488:	4283      	cmp	r3, r0
 801f48a:	4637      	mov	r7, r6
 801f48c:	dc05      	bgt.n	801f49a <__swbuf_r+0x4e>
 801f48e:	4621      	mov	r1, r4
 801f490:	4628      	mov	r0, r5
 801f492:	f7ff ffa1 	bl	801f3d8 <_fflush_r>
 801f496:	2800      	cmp	r0, #0
 801f498:	d1ed      	bne.n	801f476 <__swbuf_r+0x2a>
 801f49a:	68a3      	ldr	r3, [r4, #8]
 801f49c:	3b01      	subs	r3, #1
 801f49e:	60a3      	str	r3, [r4, #8]
 801f4a0:	6823      	ldr	r3, [r4, #0]
 801f4a2:	1c5a      	adds	r2, r3, #1
 801f4a4:	6022      	str	r2, [r4, #0]
 801f4a6:	701e      	strb	r6, [r3, #0]
 801f4a8:	6962      	ldr	r2, [r4, #20]
 801f4aa:	1c43      	adds	r3, r0, #1
 801f4ac:	429a      	cmp	r2, r3
 801f4ae:	d004      	beq.n	801f4ba <__swbuf_r+0x6e>
 801f4b0:	89a3      	ldrh	r3, [r4, #12]
 801f4b2:	07db      	lsls	r3, r3, #31
 801f4b4:	d5e1      	bpl.n	801f47a <__swbuf_r+0x2e>
 801f4b6:	2e0a      	cmp	r6, #10
 801f4b8:	d1df      	bne.n	801f47a <__swbuf_r+0x2e>
 801f4ba:	4621      	mov	r1, r4
 801f4bc:	4628      	mov	r0, r5
 801f4be:	f7ff ff8b 	bl	801f3d8 <_fflush_r>
 801f4c2:	2800      	cmp	r0, #0
 801f4c4:	d0d9      	beq.n	801f47a <__swbuf_r+0x2e>
 801f4c6:	e7d6      	b.n	801f476 <__swbuf_r+0x2a>

0801f4c8 <__swsetup_r>:
 801f4c8:	b538      	push	{r3, r4, r5, lr}
 801f4ca:	4b29      	ldr	r3, [pc, #164]	@ (801f570 <__swsetup_r+0xa8>)
 801f4cc:	4605      	mov	r5, r0
 801f4ce:	6818      	ldr	r0, [r3, #0]
 801f4d0:	460c      	mov	r4, r1
 801f4d2:	b118      	cbz	r0, 801f4dc <__swsetup_r+0x14>
 801f4d4:	6a03      	ldr	r3, [r0, #32]
 801f4d6:	b90b      	cbnz	r3, 801f4dc <__swsetup_r+0x14>
 801f4d8:	f7fd ffa0 	bl	801d41c <__sinit>
 801f4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f4e0:	0719      	lsls	r1, r3, #28
 801f4e2:	d422      	bmi.n	801f52a <__swsetup_r+0x62>
 801f4e4:	06da      	lsls	r2, r3, #27
 801f4e6:	d407      	bmi.n	801f4f8 <__swsetup_r+0x30>
 801f4e8:	2209      	movs	r2, #9
 801f4ea:	602a      	str	r2, [r5, #0]
 801f4ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f4f0:	81a3      	strh	r3, [r4, #12]
 801f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 801f4f6:	e033      	b.n	801f560 <__swsetup_r+0x98>
 801f4f8:	0758      	lsls	r0, r3, #29
 801f4fa:	d512      	bpl.n	801f522 <__swsetup_r+0x5a>
 801f4fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f4fe:	b141      	cbz	r1, 801f512 <__swsetup_r+0x4a>
 801f500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f504:	4299      	cmp	r1, r3
 801f506:	d002      	beq.n	801f50e <__swsetup_r+0x46>
 801f508:	4628      	mov	r0, r5
 801f50a:	f7fe ffc5 	bl	801e498 <_free_r>
 801f50e:	2300      	movs	r3, #0
 801f510:	6363      	str	r3, [r4, #52]	@ 0x34
 801f512:	89a3      	ldrh	r3, [r4, #12]
 801f514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f518:	81a3      	strh	r3, [r4, #12]
 801f51a:	2300      	movs	r3, #0
 801f51c:	6063      	str	r3, [r4, #4]
 801f51e:	6923      	ldr	r3, [r4, #16]
 801f520:	6023      	str	r3, [r4, #0]
 801f522:	89a3      	ldrh	r3, [r4, #12]
 801f524:	f043 0308 	orr.w	r3, r3, #8
 801f528:	81a3      	strh	r3, [r4, #12]
 801f52a:	6923      	ldr	r3, [r4, #16]
 801f52c:	b94b      	cbnz	r3, 801f542 <__swsetup_r+0x7a>
 801f52e:	89a3      	ldrh	r3, [r4, #12]
 801f530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f538:	d003      	beq.n	801f542 <__swsetup_r+0x7a>
 801f53a:	4621      	mov	r1, r4
 801f53c:	4628      	mov	r0, r5
 801f53e:	f000 f8b7 	bl	801f6b0 <__smakebuf_r>
 801f542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f546:	f013 0201 	ands.w	r2, r3, #1
 801f54a:	d00a      	beq.n	801f562 <__swsetup_r+0x9a>
 801f54c:	2200      	movs	r2, #0
 801f54e:	60a2      	str	r2, [r4, #8]
 801f550:	6962      	ldr	r2, [r4, #20]
 801f552:	4252      	negs	r2, r2
 801f554:	61a2      	str	r2, [r4, #24]
 801f556:	6922      	ldr	r2, [r4, #16]
 801f558:	b942      	cbnz	r2, 801f56c <__swsetup_r+0xa4>
 801f55a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f55e:	d1c5      	bne.n	801f4ec <__swsetup_r+0x24>
 801f560:	bd38      	pop	{r3, r4, r5, pc}
 801f562:	0799      	lsls	r1, r3, #30
 801f564:	bf58      	it	pl
 801f566:	6962      	ldrpl	r2, [r4, #20]
 801f568:	60a2      	str	r2, [r4, #8]
 801f56a:	e7f4      	b.n	801f556 <__swsetup_r+0x8e>
 801f56c:	2000      	movs	r0, #0
 801f56e:	e7f7      	b.n	801f560 <__swsetup_r+0x98>
 801f570:	20000094 	.word	0x20000094

0801f574 <_sbrk_r>:
 801f574:	b538      	push	{r3, r4, r5, lr}
 801f576:	4d06      	ldr	r5, [pc, #24]	@ (801f590 <_sbrk_r+0x1c>)
 801f578:	2300      	movs	r3, #0
 801f57a:	4604      	mov	r4, r0
 801f57c:	4608      	mov	r0, r1
 801f57e:	602b      	str	r3, [r5, #0]
 801f580:	f7e3 fe8a 	bl	8003298 <_sbrk>
 801f584:	1c43      	adds	r3, r0, #1
 801f586:	d102      	bne.n	801f58e <_sbrk_r+0x1a>
 801f588:	682b      	ldr	r3, [r5, #0]
 801f58a:	b103      	cbz	r3, 801f58e <_sbrk_r+0x1a>
 801f58c:	6023      	str	r3, [r4, #0]
 801f58e:	bd38      	pop	{r3, r4, r5, pc}
 801f590:	2000f630 	.word	0x2000f630

0801f594 <abort>:
 801f594:	b508      	push	{r3, lr}
 801f596:	2006      	movs	r0, #6
 801f598:	f000 f8ee 	bl	801f778 <raise>
 801f59c:	2001      	movs	r0, #1
 801f59e:	f7e3 fe1f 	bl	80031e0 <_exit>

0801f5a2 <_calloc_r>:
 801f5a2:	b570      	push	{r4, r5, r6, lr}
 801f5a4:	fba1 5402 	umull	r5, r4, r1, r2
 801f5a8:	b93c      	cbnz	r4, 801f5ba <_calloc_r+0x18>
 801f5aa:	4629      	mov	r1, r5
 801f5ac:	f7fe ffe8 	bl	801e580 <_malloc_r>
 801f5b0:	4606      	mov	r6, r0
 801f5b2:	b928      	cbnz	r0, 801f5c0 <_calloc_r+0x1e>
 801f5b4:	2600      	movs	r6, #0
 801f5b6:	4630      	mov	r0, r6
 801f5b8:	bd70      	pop	{r4, r5, r6, pc}
 801f5ba:	220c      	movs	r2, #12
 801f5bc:	6002      	str	r2, [r0, #0]
 801f5be:	e7f9      	b.n	801f5b4 <_calloc_r+0x12>
 801f5c0:	462a      	mov	r2, r5
 801f5c2:	4621      	mov	r1, r4
 801f5c4:	f7fd ffff 	bl	801d5c6 <memset>
 801f5c8:	e7f5      	b.n	801f5b6 <_calloc_r+0x14>

0801f5ca <__ascii_mbtowc>:
 801f5ca:	b082      	sub	sp, #8
 801f5cc:	b901      	cbnz	r1, 801f5d0 <__ascii_mbtowc+0x6>
 801f5ce:	a901      	add	r1, sp, #4
 801f5d0:	b142      	cbz	r2, 801f5e4 <__ascii_mbtowc+0x1a>
 801f5d2:	b14b      	cbz	r3, 801f5e8 <__ascii_mbtowc+0x1e>
 801f5d4:	7813      	ldrb	r3, [r2, #0]
 801f5d6:	600b      	str	r3, [r1, #0]
 801f5d8:	7812      	ldrb	r2, [r2, #0]
 801f5da:	1e10      	subs	r0, r2, #0
 801f5dc:	bf18      	it	ne
 801f5de:	2001      	movne	r0, #1
 801f5e0:	b002      	add	sp, #8
 801f5e2:	4770      	bx	lr
 801f5e4:	4610      	mov	r0, r2
 801f5e6:	e7fb      	b.n	801f5e0 <__ascii_mbtowc+0x16>
 801f5e8:	f06f 0001 	mvn.w	r0, #1
 801f5ec:	e7f8      	b.n	801f5e0 <__ascii_mbtowc+0x16>

0801f5ee <_realloc_r>:
 801f5ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5f2:	4680      	mov	r8, r0
 801f5f4:	4615      	mov	r5, r2
 801f5f6:	460c      	mov	r4, r1
 801f5f8:	b921      	cbnz	r1, 801f604 <_realloc_r+0x16>
 801f5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5fe:	4611      	mov	r1, r2
 801f600:	f7fe bfbe 	b.w	801e580 <_malloc_r>
 801f604:	b92a      	cbnz	r2, 801f612 <_realloc_r+0x24>
 801f606:	f7fe ff47 	bl	801e498 <_free_r>
 801f60a:	2400      	movs	r4, #0
 801f60c:	4620      	mov	r0, r4
 801f60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f612:	f000 f8ef 	bl	801f7f4 <_malloc_usable_size_r>
 801f616:	4285      	cmp	r5, r0
 801f618:	4606      	mov	r6, r0
 801f61a:	d802      	bhi.n	801f622 <_realloc_r+0x34>
 801f61c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801f620:	d8f4      	bhi.n	801f60c <_realloc_r+0x1e>
 801f622:	4629      	mov	r1, r5
 801f624:	4640      	mov	r0, r8
 801f626:	f7fe ffab 	bl	801e580 <_malloc_r>
 801f62a:	4607      	mov	r7, r0
 801f62c:	2800      	cmp	r0, #0
 801f62e:	d0ec      	beq.n	801f60a <_realloc_r+0x1c>
 801f630:	42b5      	cmp	r5, r6
 801f632:	462a      	mov	r2, r5
 801f634:	4621      	mov	r1, r4
 801f636:	bf28      	it	cs
 801f638:	4632      	movcs	r2, r6
 801f63a:	f7fe f8b2 	bl	801d7a2 <memcpy>
 801f63e:	4621      	mov	r1, r4
 801f640:	4640      	mov	r0, r8
 801f642:	f7fe ff29 	bl	801e498 <_free_r>
 801f646:	463c      	mov	r4, r7
 801f648:	e7e0      	b.n	801f60c <_realloc_r+0x1e>

0801f64a <__ascii_wctomb>:
 801f64a:	4603      	mov	r3, r0
 801f64c:	4608      	mov	r0, r1
 801f64e:	b141      	cbz	r1, 801f662 <__ascii_wctomb+0x18>
 801f650:	2aff      	cmp	r2, #255	@ 0xff
 801f652:	d904      	bls.n	801f65e <__ascii_wctomb+0x14>
 801f654:	228a      	movs	r2, #138	@ 0x8a
 801f656:	601a      	str	r2, [r3, #0]
 801f658:	f04f 30ff 	mov.w	r0, #4294967295
 801f65c:	4770      	bx	lr
 801f65e:	700a      	strb	r2, [r1, #0]
 801f660:	2001      	movs	r0, #1
 801f662:	4770      	bx	lr

0801f664 <__swhatbuf_r>:
 801f664:	b570      	push	{r4, r5, r6, lr}
 801f666:	460c      	mov	r4, r1
 801f668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f66c:	2900      	cmp	r1, #0
 801f66e:	b096      	sub	sp, #88	@ 0x58
 801f670:	4615      	mov	r5, r2
 801f672:	461e      	mov	r6, r3
 801f674:	da0d      	bge.n	801f692 <__swhatbuf_r+0x2e>
 801f676:	89a3      	ldrh	r3, [r4, #12]
 801f678:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f67c:	f04f 0100 	mov.w	r1, #0
 801f680:	bf14      	ite	ne
 801f682:	2340      	movne	r3, #64	@ 0x40
 801f684:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f688:	2000      	movs	r0, #0
 801f68a:	6031      	str	r1, [r6, #0]
 801f68c:	602b      	str	r3, [r5, #0]
 801f68e:	b016      	add	sp, #88	@ 0x58
 801f690:	bd70      	pop	{r4, r5, r6, pc}
 801f692:	466a      	mov	r2, sp
 801f694:	f000 f878 	bl	801f788 <_fstat_r>
 801f698:	2800      	cmp	r0, #0
 801f69a:	dbec      	blt.n	801f676 <__swhatbuf_r+0x12>
 801f69c:	9901      	ldr	r1, [sp, #4]
 801f69e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f6a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f6a6:	4259      	negs	r1, r3
 801f6a8:	4159      	adcs	r1, r3
 801f6aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f6ae:	e7eb      	b.n	801f688 <__swhatbuf_r+0x24>

0801f6b0 <__smakebuf_r>:
 801f6b0:	898b      	ldrh	r3, [r1, #12]
 801f6b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f6b4:	079d      	lsls	r5, r3, #30
 801f6b6:	4606      	mov	r6, r0
 801f6b8:	460c      	mov	r4, r1
 801f6ba:	d507      	bpl.n	801f6cc <__smakebuf_r+0x1c>
 801f6bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f6c0:	6023      	str	r3, [r4, #0]
 801f6c2:	6123      	str	r3, [r4, #16]
 801f6c4:	2301      	movs	r3, #1
 801f6c6:	6163      	str	r3, [r4, #20]
 801f6c8:	b003      	add	sp, #12
 801f6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6cc:	ab01      	add	r3, sp, #4
 801f6ce:	466a      	mov	r2, sp
 801f6d0:	f7ff ffc8 	bl	801f664 <__swhatbuf_r>
 801f6d4:	9f00      	ldr	r7, [sp, #0]
 801f6d6:	4605      	mov	r5, r0
 801f6d8:	4639      	mov	r1, r7
 801f6da:	4630      	mov	r0, r6
 801f6dc:	f7fe ff50 	bl	801e580 <_malloc_r>
 801f6e0:	b948      	cbnz	r0, 801f6f6 <__smakebuf_r+0x46>
 801f6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f6e6:	059a      	lsls	r2, r3, #22
 801f6e8:	d4ee      	bmi.n	801f6c8 <__smakebuf_r+0x18>
 801f6ea:	f023 0303 	bic.w	r3, r3, #3
 801f6ee:	f043 0302 	orr.w	r3, r3, #2
 801f6f2:	81a3      	strh	r3, [r4, #12]
 801f6f4:	e7e2      	b.n	801f6bc <__smakebuf_r+0xc>
 801f6f6:	89a3      	ldrh	r3, [r4, #12]
 801f6f8:	6020      	str	r0, [r4, #0]
 801f6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f6fe:	81a3      	strh	r3, [r4, #12]
 801f700:	9b01      	ldr	r3, [sp, #4]
 801f702:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f706:	b15b      	cbz	r3, 801f720 <__smakebuf_r+0x70>
 801f708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f70c:	4630      	mov	r0, r6
 801f70e:	f000 f84d 	bl	801f7ac <_isatty_r>
 801f712:	b128      	cbz	r0, 801f720 <__smakebuf_r+0x70>
 801f714:	89a3      	ldrh	r3, [r4, #12]
 801f716:	f023 0303 	bic.w	r3, r3, #3
 801f71a:	f043 0301 	orr.w	r3, r3, #1
 801f71e:	81a3      	strh	r3, [r4, #12]
 801f720:	89a3      	ldrh	r3, [r4, #12]
 801f722:	431d      	orrs	r5, r3
 801f724:	81a5      	strh	r5, [r4, #12]
 801f726:	e7cf      	b.n	801f6c8 <__smakebuf_r+0x18>

0801f728 <_raise_r>:
 801f728:	291f      	cmp	r1, #31
 801f72a:	b538      	push	{r3, r4, r5, lr}
 801f72c:	4605      	mov	r5, r0
 801f72e:	460c      	mov	r4, r1
 801f730:	d904      	bls.n	801f73c <_raise_r+0x14>
 801f732:	2316      	movs	r3, #22
 801f734:	6003      	str	r3, [r0, #0]
 801f736:	f04f 30ff 	mov.w	r0, #4294967295
 801f73a:	bd38      	pop	{r3, r4, r5, pc}
 801f73c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f73e:	b112      	cbz	r2, 801f746 <_raise_r+0x1e>
 801f740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f744:	b94b      	cbnz	r3, 801f75a <_raise_r+0x32>
 801f746:	4628      	mov	r0, r5
 801f748:	f000 f852 	bl	801f7f0 <_getpid_r>
 801f74c:	4622      	mov	r2, r4
 801f74e:	4601      	mov	r1, r0
 801f750:	4628      	mov	r0, r5
 801f752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f756:	f000 b839 	b.w	801f7cc <_kill_r>
 801f75a:	2b01      	cmp	r3, #1
 801f75c:	d00a      	beq.n	801f774 <_raise_r+0x4c>
 801f75e:	1c59      	adds	r1, r3, #1
 801f760:	d103      	bne.n	801f76a <_raise_r+0x42>
 801f762:	2316      	movs	r3, #22
 801f764:	6003      	str	r3, [r0, #0]
 801f766:	2001      	movs	r0, #1
 801f768:	e7e7      	b.n	801f73a <_raise_r+0x12>
 801f76a:	2100      	movs	r1, #0
 801f76c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f770:	4620      	mov	r0, r4
 801f772:	4798      	blx	r3
 801f774:	2000      	movs	r0, #0
 801f776:	e7e0      	b.n	801f73a <_raise_r+0x12>

0801f778 <raise>:
 801f778:	4b02      	ldr	r3, [pc, #8]	@ (801f784 <raise+0xc>)
 801f77a:	4601      	mov	r1, r0
 801f77c:	6818      	ldr	r0, [r3, #0]
 801f77e:	f7ff bfd3 	b.w	801f728 <_raise_r>
 801f782:	bf00      	nop
 801f784:	20000094 	.word	0x20000094

0801f788 <_fstat_r>:
 801f788:	b538      	push	{r3, r4, r5, lr}
 801f78a:	4d07      	ldr	r5, [pc, #28]	@ (801f7a8 <_fstat_r+0x20>)
 801f78c:	2300      	movs	r3, #0
 801f78e:	4604      	mov	r4, r0
 801f790:	4608      	mov	r0, r1
 801f792:	4611      	mov	r1, r2
 801f794:	602b      	str	r3, [r5, #0]
 801f796:	f7e3 fd57 	bl	8003248 <_fstat>
 801f79a:	1c43      	adds	r3, r0, #1
 801f79c:	d102      	bne.n	801f7a4 <_fstat_r+0x1c>
 801f79e:	682b      	ldr	r3, [r5, #0]
 801f7a0:	b103      	cbz	r3, 801f7a4 <_fstat_r+0x1c>
 801f7a2:	6023      	str	r3, [r4, #0]
 801f7a4:	bd38      	pop	{r3, r4, r5, pc}
 801f7a6:	bf00      	nop
 801f7a8:	2000f630 	.word	0x2000f630

0801f7ac <_isatty_r>:
 801f7ac:	b538      	push	{r3, r4, r5, lr}
 801f7ae:	4d06      	ldr	r5, [pc, #24]	@ (801f7c8 <_isatty_r+0x1c>)
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	4604      	mov	r4, r0
 801f7b4:	4608      	mov	r0, r1
 801f7b6:	602b      	str	r3, [r5, #0]
 801f7b8:	f7e3 fd56 	bl	8003268 <_isatty>
 801f7bc:	1c43      	adds	r3, r0, #1
 801f7be:	d102      	bne.n	801f7c6 <_isatty_r+0x1a>
 801f7c0:	682b      	ldr	r3, [r5, #0]
 801f7c2:	b103      	cbz	r3, 801f7c6 <_isatty_r+0x1a>
 801f7c4:	6023      	str	r3, [r4, #0]
 801f7c6:	bd38      	pop	{r3, r4, r5, pc}
 801f7c8:	2000f630 	.word	0x2000f630

0801f7cc <_kill_r>:
 801f7cc:	b538      	push	{r3, r4, r5, lr}
 801f7ce:	4d07      	ldr	r5, [pc, #28]	@ (801f7ec <_kill_r+0x20>)
 801f7d0:	2300      	movs	r3, #0
 801f7d2:	4604      	mov	r4, r0
 801f7d4:	4608      	mov	r0, r1
 801f7d6:	4611      	mov	r1, r2
 801f7d8:	602b      	str	r3, [r5, #0]
 801f7da:	f7e3 fcef 	bl	80031bc <_kill>
 801f7de:	1c43      	adds	r3, r0, #1
 801f7e0:	d102      	bne.n	801f7e8 <_kill_r+0x1c>
 801f7e2:	682b      	ldr	r3, [r5, #0]
 801f7e4:	b103      	cbz	r3, 801f7e8 <_kill_r+0x1c>
 801f7e6:	6023      	str	r3, [r4, #0]
 801f7e8:	bd38      	pop	{r3, r4, r5, pc}
 801f7ea:	bf00      	nop
 801f7ec:	2000f630 	.word	0x2000f630

0801f7f0 <_getpid_r>:
 801f7f0:	f7e3 bcdc 	b.w	80031ac <_getpid>

0801f7f4 <_malloc_usable_size_r>:
 801f7f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f7f8:	1f18      	subs	r0, r3, #4
 801f7fa:	2b00      	cmp	r3, #0
 801f7fc:	bfbc      	itt	lt
 801f7fe:	580b      	ldrlt	r3, [r1, r0]
 801f800:	18c0      	addlt	r0, r0, r3
 801f802:	4770      	bx	lr

0801f804 <_init>:
 801f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f806:	bf00      	nop
 801f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f80a:	bc08      	pop	{r3}
 801f80c:	469e      	mov	lr, r3
 801f80e:	4770      	bx	lr

0801f810 <_fini>:
 801f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f812:	bf00      	nop
 801f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f816:	bc08      	pop	{r3}
 801f818:	469e      	mov	lr, r3
 801f81a:	4770      	bx	lr
