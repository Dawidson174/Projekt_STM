
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa0c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004bc4  0801fbe0  0801fbe0  00020be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080247a4  080247a4  00026390  2**0
                  CONTENTS
  4 .ARM          00000008  080247a4  080247a4  000257a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080247ac  080247ac  00026390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080247ac  080247ac  000257ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080247b0  080247b0  000257b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  080247b4  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000250  08024a04  00026250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200002f0  08024aa4  000262f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f2f8  20000390  08024b44  00026390  2**2
                  ALLOC
 12 ._user_heap_stack 00000800  2000f688  08024b44  00026688  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00026390  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003eb71  00000000  00000000  000263c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009ae7  00000000  00000000  00064f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002cb8  00000000  00000000  0006ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000234c  00000000  00000000  000716d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ba59  00000000  00000000  00073a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048dfa  00000000  00000000  000af475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d503  00000000  00000000  000f826f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00215772  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c92c  00000000  00000000  002157b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008f  00000000  00000000  002220e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000390 	.word	0x20000390
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801fbc4 	.word	0x0801fbc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000394 	.word	0x20000394
 800020c:	0801fbc4 	.word	0x0801fbc4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <bmp2_init>:
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fa47 	bl	8001434 <null_ptr_check>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d117      	bne.n	8000fe2 <bmp2_init+0x4a>
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	20d0      	movs	r0, #208	@ 0xd0
 8000fba:	f000 f818 	bl	8000fee <bmp2_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10b      	bne.n	8000fe2 <bmp2_init+0x4a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b58      	cmp	r3, #88	@ 0x58
 8000fd0:	d105      	bne.n	8000fde <bmp2_init+0x46>
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa79 	bl	80014ca <get_calib_param>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <bmp2_init+0x4a>
 8000fde:	23fc      	movs	r3, #252	@ 0xfc
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <bmp2_get_regs>:
 8000fee:	b590      	push	{r4, r7, lr}
 8000ff0:	b087      	sub	sp, #28
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	6838      	ldr	r0, [r7, #0]
 8001000:	f000 fa18 	bl	8001434 <null_ptr_check>
 8001004:	4603      	mov	r3, r0
 8001006:	75fb      	strb	r3, [r7, #23]
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d11e      	bne.n	800104e <bmp2_get_regs+0x60>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d01b      	beq.n	800104e <bmp2_get_regs+0x60>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <bmp2_get_regs+0x38>
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001024:	73fb      	strb	r3, [r7, #15]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68dc      	ldr	r4, [r3, #12]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	7bf8      	ldrb	r0, [r7, #15]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	47a0      	blx	r4
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	721a      	strb	r2, [r3, #8]
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <bmp2_get_regs+0x64>
 8001048:	23fe      	movs	r3, #254	@ 0xfe
 800104a:	75fb      	strb	r3, [r7, #23]
 800104c:	e001      	b.n	8001052 <bmp2_get_regs+0x64>
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001056:	4618      	mov	r0, r3
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}

0800105e <bmp2_set_regs>:
 800105e:	b590      	push	{r4, r7, lr}
 8001060:	b08b      	sub	sp, #44	@ 0x2c
 8001062:	af00      	add	r7, sp, #0
 8001064:	60f8      	str	r0, [r7, #12]
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b04      	cmp	r3, #4
 8001070:	d901      	bls.n	8001076 <bmp2_set_regs+0x18>
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	6838      	ldr	r0, [r7, #0]
 8001078:	f000 f9dc 	bl	8001434 <null_ptr_check>
 800107c:	4603      	mov	r3, r0
 800107e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001082:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001086:	2b00      	cmp	r3, #0
 8001088:	d150      	bne.n	800112c <bmp2_set_regs+0xce>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d04d      	beq.n	800112c <bmp2_set_regs+0xce>
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d04a      	beq.n	800112c <bmp2_set_regs+0xce>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d043      	beq.n	8001124 <bmp2_set_regs+0xc6>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	753b      	strb	r3, [r7, #20]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <bmp2_set_regs+0x76>
 80010aa:	2300      	movs	r3, #0
 80010ac:	77fb      	strb	r3, [r7, #31]
 80010ae:	e00d      	b.n	80010cc <bmp2_set_regs+0x6e>
 80010b0:	7ffb      	ldrb	r3, [r7, #31]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4413      	add	r3, r2
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	440b      	add	r3, r1
 80010be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	3301      	adds	r3, #1
 80010ca:	77fb      	strb	r3, [r7, #31]
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8ed      	bhi.n	80010b0 <bmp2_set_regs+0x52>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d90b      	bls.n	80010f2 <bmp2_set_regs+0x94>
 80010da:	f107 0114 	add.w	r1, r7, #20
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f9c6 	bl	8001474 <interleave_data>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3b01      	subs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	e001      	b.n	80010f6 <bmp2_set_regs+0x98>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691c      	ldr	r4, [r3, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f107 0114 	add.w	r1, r7, #20
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	47a0      	blx	r4
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	721a      	strb	r2, [r3, #8]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <bmp2_set_regs+0xd6>
 800111c:	23fe      	movs	r3, #254	@ 0xfe
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001122:	e007      	b.n	8001134 <bmp2_set_regs+0xd6>
 8001124:	23fd      	movs	r3, #253	@ 0xfd
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800112a:	e003      	b.n	8001134 <bmp2_set_regs+0xd6>
 800112c:	23ff      	movs	r3, #255	@ 0xff
 800112e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001132:	e000      	b.n	8001136 <bmp2_set_regs+0xd8>
 8001134:	bf00      	nop
 8001136:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800113a:	4618      	mov	r0, r3
 800113c:	372c      	adds	r7, #44	@ 0x2c
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <bmp2_soft_reset>:
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	23e0      	movs	r3, #224	@ 0xe0
 800114c:	73bb      	strb	r3, [r7, #14]
 800114e:	23b6      	movs	r3, #182	@ 0xb6
 8001150:	737b      	strb	r3, [r7, #13]
 8001152:	f107 010d 	add.w	r1, r7, #13
 8001156:	f107 000e 	add.w	r0, r7, #14
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f7ff ff7e 	bl	800105e <bmp2_set_regs>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <bmp2_get_config>:
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
 800117c:	2300      	movs	r3, #0
 800117e:	81bb      	strh	r3, [r7, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d02d      	beq.n	80011e2 <bmp2_get_config+0x70>
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	20f4      	movs	r0, #244	@ 0xf4
 8001190:	f7ff ff2d 	bl	8000fee <bmp2_get_regs>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d122      	bne.n	80011e6 <bmp2_get_config+0x74>
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	109b      	asrs	r3, r3, #2
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	705a      	strb	r2, [r3, #1]
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	095b      	lsrs	r3, r3, #5
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	709a      	strb	r2, [r3, #2]
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	109b      	asrs	r3, r3, #2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	711a      	strb	r2, [r3, #4]
 80011d4:	7b7b      	ldrb	r3, [r7, #13]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	715a      	strb	r2, [r3, #5]
 80011e0:	e001      	b.n	80011e6 <bmp2_get_config+0x74>
 80011e2:	23ff      	movs	r3, #255	@ 0xff
 80011e4:	73fb      	strb	r3, [r7, #15]
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <bmp2_set_config>:
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f9fd 	bl	8001600 <conf_sensor>
 8001206:	4603      	mov	r3, r0
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <bmp2_get_status>:
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01b      	beq.n	8001258 <bmp2_get_status+0x48>
 8001220:	f107 010e 	add.w	r1, r7, #14
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	20f3      	movs	r0, #243	@ 0xf3
 800122a:	f7ff fee0 	bl	8000fee <bmp2_get_regs>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d110      	bne.n	800125c <bmp2_get_status+0x4c>
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	10db      	asrs	r3, r3, #3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	b2da      	uxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	705a      	strb	r2, [r3, #1]
 8001256:	e001      	b.n	800125c <bmp2_get_status+0x4c>
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <bmp2_set_power_mode>:
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	73fb      	strb	r3, [r7, #15]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	68b9      	ldr	r1, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9bf 	bl	8001600 <conf_sensor>
 8001282:	4603      	mov	r3, r0
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800128a:	4618      	mov	r0, r3
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <bmp2_get_sensor_data>:
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	2300      	movs	r3, #0
 80012a2:	82bb      	strh	r3, [r7, #20]
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d024      	beq.n	80012fe <bmp2_get_sensor_data+0x6c>
 80012b4:	f107 0110 	add.w	r1, r7, #16
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2206      	movs	r2, #6
 80012bc:	20f7      	movs	r0, #247	@ 0xf7
 80012be:	f7ff fe96 	bl	8000fee <bmp2_get_regs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
 80012c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d119      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
 80012ce:	f107 0208 	add.w	r2, r7, #8
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fab9 	bl	8001850 <parse_sensor_data>
 80012de:	4603      	mov	r3, r0
 80012e0:	75fb      	strb	r3, [r7, #23]
 80012e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10b      	bne.n	8001302 <bmp2_get_sensor_data+0x70>
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f80b 	bl	800130e <bmp2_compensate_data>
 80012f8:	4603      	mov	r3, r0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e001      	b.n	8001302 <bmp2_get_sensor_data+0x70>
 80012fe:	23ff      	movs	r3, #255	@ 0xff
 8001300:	75fb      	strb	r3, [r7, #23]
 8001302:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <bmp2_compensate_data>:
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 f88a 	bl	8001434 <null_ptr_check>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
 8001324:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d129      	bne.n	8001380 <bmp2_compensate_data+0x72>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d026      	beq.n	8001380 <bmp2_compensate_data+0x72>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d023      	beq.n	8001380 <bmp2_compensate_data+0x72>
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c1 2300 	strd	r2, r3, [r1]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	3308      	adds	r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68f9      	ldr	r1, [r7, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 fabb 	bl	80018d8 <compensate_temperature>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
 8001366:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <bmp2_compensate_data+0x76>
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68f9      	ldr	r1, [r7, #12]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 fba7 	bl	8001ac8 <compensate_pressure>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e001      	b.n	8001384 <bmp2_compensate_data+0x76>
 8001380:	23ff      	movs	r3, #255	@ 0xff
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bmp2_compute_meas_time>:
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b092      	sub	sp, #72	@ 0x48
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	4b23      	ldr	r3, [pc, #140]	@ (800142c <bmp2_compute_meas_time+0x9c>)
 800139e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80013a2:	461d      	mov	r5, r3
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	6023      	str	r3, [r4, #0]
 80013ac:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <bmp2_compute_meas_time+0xa0>)
 80013ae:	f107 0410 	add.w	r4, r7, #16
 80013b2:	461d      	mov	r5, r3
 80013b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f837 	bl	8001434 <null_ptr_check>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d122      	bne.n	800141a <bmp2_compute_meas_time+0x8a>
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d01f      	beq.n	800141a <bmp2_compute_meas_time+0x8a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7e1b      	ldrb	r3, [r3, #24]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d111      	bne.n	8001406 <bmp2_compute_meas_time+0x76>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3348      	adds	r3, #72	@ 0x48
 80013ea:	443b      	add	r3, r7
 80013ec:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	3348      	adds	r3, #72	@ 0x48
 80013f8:	443b      	add	r3, r7
 80013fa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013fe:	441a      	add	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e00c      	b.n	8001420 <bmp2_compute_meas_time+0x90>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3348      	adds	r3, #72	@ 0x48
 800140e:	443b      	add	r3, r7
 8001410:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e002      	b.n	8001420 <bmp2_compute_meas_time+0x90>
 800141a:	23ff      	movs	r3, #255	@ 0xff
 800141c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001420:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8001424:	4618      	mov	r0, r3
 8001426:	3748      	adds	r7, #72	@ 0x48
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	0801fbe0 	.word	0x0801fbe0
 8001430:	0801fbf4 	.word	0x0801fbf4

08001434 <null_ptr_check>:
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <null_ptr_check+0x26>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <null_ptr_check+0x26>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <null_ptr_check+0x26>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <null_ptr_check+0x2c>
 800145a:	23ff      	movs	r3, #255	@ 0xff
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e001      	b.n	8001464 <null_ptr_check+0x30>
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <interleave_data>:
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e015      	b.n	80014b4 <interleave_data+0x40>
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	441a      	add	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3b01      	subs	r3, #1
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	440b      	add	r3, r1
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	441a      	add	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	440b      	add	r3, r1
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3e5      	bcc.n	8001488 <interleave_data+0x14>
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <get_calib_param>:
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b08a      	sub	sp, #40	@ 0x28
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	751a      	strb	r2, [r3, #20]
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2219      	movs	r2, #25
 80014f0:	2088      	movs	r0, #136	@ 0x88
 80014f2:	f7ff fd7c 	bl	8000fee <bmp2_get_regs>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001500:	2b00      	cmp	r3, #0
 8001502:	d177      	bne.n	80015f4 <get_calib_param+0x12a>
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	839a      	strh	r2, [r3, #28]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	83da      	strh	r2, [r3, #30]
 800152a:	7c7b      	ldrb	r3, [r7, #17]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	b21a      	sxth	r2, r3
 8001530:	7c3b      	ldrb	r3, [r7, #16]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21a      	sxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	841a      	strh	r2, [r3, #32]
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	7cbb      	ldrb	r3, [r7, #18]
 8001544:	b21b      	sxth	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b21b      	sxth	r3, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	7d3b      	ldrb	r3, [r7, #20]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001562:	7dfb      	ldrb	r3, [r7, #23]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001574:	7e7b      	ldrb	r3, [r7, #25]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7e3b      	ldrb	r3, [r7, #24]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b21a      	sxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7ebb      	ldrb	r3, [r7, #26]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21a      	sxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001598:	7f7b      	ldrb	r3, [r7, #29]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	7f3b      	ldrb	r3, [r7, #28]
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	7fbb      	ldrb	r3, [r7, #30]
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
 80015bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80015d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	865a      	strh	r2, [r3, #50]	@ 0x32
 80015e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80015f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80015f8:	4618      	mov	r0, r3
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <conf_sensor>:
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	2300      	movs	r3, #0
 8001610:	82bb      	strh	r3, [r7, #20]
 8001612:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 8001616:	823b      	strh	r3, [r7, #16]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d074      	beq.n	8001708 <conf_sensor+0x108>
 800161e:	f107 0114 	add.w	r1, r7, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	20f4      	movs	r0, #244	@ 0xf4
 8001628:	f7ff fce1 	bl	8000fee <bmp2_get_regs>
 800162c:	4603      	mov	r3, r0
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d169      	bne.n	800170c <conf_sensor+0x10c>
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fd82 	bl	8001142 <bmp2_soft_reset>
 800163e:	4603      	mov	r3, r0
 8001640:	75fb      	strb	r3, [r7, #23]
 8001642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d160      	bne.n	800170c <conf_sensor+0x10c>
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f861 	bl	8001718 <set_os_mode>
 8001656:	7d7b      	ldrb	r3, [r7, #21]
 8001658:	b25b      	sxtb	r3, r3
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	b25a      	sxtb	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	b25b      	sxtb	r3, r3
 8001668:	4313      	orrs	r3, r2
 800166a:	b25b      	sxtb	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	757b      	strb	r3, [r7, #21]
 8001670:	7d7b      	ldrb	r3, [r7, #21]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f023 031c 	bic.w	r3, r3, #28
 8001678:	b25a      	sxtb	r2, r3
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	b25b      	sxtb	r3, r3
 8001688:	4313      	orrs	r3, r2
 800168a:	b25b      	sxtb	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	757b      	strb	r3, [r7, #21]
 8001690:	7d7b      	ldrb	r3, [r7, #21]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	b25a      	sxtb	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	757b      	strb	r3, [r7, #21]
 80016ae:	f107 0114 	add.w	r1, r7, #20
 80016b2:	f107 0010 	add.w	r0, r7, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f7ff fcd0 	bl	800105e <bmp2_set_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]
 80016c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d120      	bne.n	800170c <conf_sensor+0x10c>
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01d      	beq.n	800170c <conf_sensor+0x10c>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	761a      	strb	r2, [r3, #24]
 80016d6:	7d3b      	ldrb	r3, [r7, #20]
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	753b      	strb	r3, [r7, #20]
 80016f2:	f107 0114 	add.w	r1, r7, #20
 80016f6:	f107 0010 	add.w	r0, r7, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f7ff fcae 	bl	800105e <bmp2_set_regs>
 8001702:	4603      	mov	r3, r0
 8001704:	75fb      	strb	r3, [r7, #23]
 8001706:	e001      	b.n	800170c <conf_sensor+0x10c>
 8001708:	23ff      	movs	r3, #255	@ 0xff
 800170a:	75fb      	strb	r3, [r7, #23]
 800170c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <set_os_mode>:
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	78db      	ldrb	r3, [r3, #3]
 8001726:	2b04      	cmp	r3, #4
 8001728:	f200 808b 	bhi.w	8001842 <set_os_mode+0x12a>
 800172c:	a201      	add	r2, pc, #4	@ (adr r2, 8001734 <set_os_mode+0x1c>)
 800172e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001732:	bf00      	nop
 8001734:	08001749 	.word	0x08001749
 8001738:	0800177b 	.word	0x0800177b
 800173c:	080017ad 	.word	0x080017ad
 8001740:	080017df 	.word	0x080017df
 8001744:	08001811 	.word	0x08001811
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25b      	sxtb	r3, r3
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	b25b      	sxtb	r3, r3
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 031c 	bic.w	r3, r3, #28
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e064      	b.n	8001844 <set_os_mode+0x12c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 031f 	and.w	r3, r3, #31
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	b25b      	sxtb	r3, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f023 031c 	bic.w	r3, r3, #28
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e04b      	b.n	8001844 <set_os_mode+0x12c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	f003 031f 	and.w	r3, r3, #31
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 031c 	bic.w	r3, r3, #28
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f043 030c 	orr.w	r3, r3, #12
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e032      	b.n	8001844 <set_os_mode+0x12c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	701a      	strb	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f023 031c 	bic.w	r3, r3, #28
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	b25b      	sxtb	r3, r3
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e019      	b.n	8001844 <set_os_mode+0x12c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b25b      	sxtb	r3, r3
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	b25b      	sxtb	r3, r3
 800181c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001820:	b25b      	sxtb	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	f023 031c 	bic.w	r3, r3, #28
 8001832:	b25b      	sxtb	r3, r3
 8001834:	f043 0314 	orr.w	r3, r3, #20
 8001838:	b25b      	sxtb	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e000      	b.n	8001844 <set_os_mode+0x12c>
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <parse_sensor_data>:
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	031b      	lsls	r3, r3, #12
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3301      	adds	r3, #1
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3302      	adds	r3, #2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	b2db      	uxtb	r3, r3
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	431a      	orrs	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	431a      	orrs	r2, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3303      	adds	r3, #3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	031b      	lsls	r3, r3, #12
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3305      	adds	r3, #5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f000 fae5 	bl	8001e90 <st_check_boundaries>
 80018c6:	4603      	mov	r3, r0
 80018c8:	72fb      	strb	r3, [r7, #11]
 80018ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <compensate_temperature>:
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b08c      	sub	sp, #48	@ 0x30
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe47 	bl	8000584 <__aeabi_i2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <compensate_temperature+0x1d4>)
 80018fc:	f7fe ffd6 	bl	80008ac <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4614      	mov	r4, r2
 8001906:	461d      	mov	r5, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	8b9b      	ldrh	r3, [r3, #28]
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe29 	bl	8000564 <__aeabi_ui2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <compensate_temperature+0x1d8>)
 8001918:	f7fe ffc8 	bl	80008ac <__aeabi_ddiv>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7fe fce0 	bl	80002e8 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fe24 	bl	8000584 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7fe fe88 	bl	8000658 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe15 	bl	8000584 <__aeabi_i2d>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001962:	f7fe ffa3 	bl	80008ac <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	8b9b      	ldrh	r3, [r3, #28]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf6 	bl	8000564 <__aeabi_ui2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab4 <compensate_temperature+0x1dc>)
 800197e:	f7fe ff95 	bl	80008ac <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe fcad 	bl	80002e8 <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4614      	mov	r4, r2
 8001994:	461d      	mov	r5, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fdf2 	bl	8000584 <__aeabi_i2d>
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019a8:	f7fe ff80 	bl	80008ac <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8b9b      	ldrh	r3, [r3, #28]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdd3 	bl	8000564 <__aeabi_ui2d>
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ab4 <compensate_temperature+0x1dc>)
 80019c4:	f7fe ff72 	bl	80008ac <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4640      	mov	r0, r8
 80019ce:	4649      	mov	r1, r9
 80019d0:	f7fe fc8a 	bl	80002e8 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe3c 	bl	8000658 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4614      	mov	r4, r2
 80019e6:	461d      	mov	r5, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdc8 	bl	8000584 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fe2c 	bl	8000658 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a10:	f7fe fc6c 	bl	80002ec <__adddf3>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7ff f8cc 	bl	8000bb8 <__aeabi_d2iz>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a2e:	f7fe fc5d 	bl	80002ec <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <compensate_temperature+0x1e0>)
 8001a40:	f7fe ff34 	bl	80008ac <__aeabi_ddiv>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a52:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a56:	f7ff f871 	bl	8000b3c <__aeabi_dcmplt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <compensate_temperature+0x198>
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <compensate_temperature+0x1e4>)
 8001a66:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a76:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a7a:	f7ff f87d 	bl	8000b78 <__aeabi_dcmpgt>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <compensate_temperature+0x1bc>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <compensate_temperature+0x1e8>)
 8001a8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a9a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3730      	adds	r7, #48	@ 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aac:	40d00000 	.word	0x40d00000
 8001ab0:	40900000 	.word	0x40900000
 8001ab4:	40c00000 	.word	0x40c00000
 8001ab8:	40b40000 	.word	0x40b40000
 8001abc:	c0440000 	.word	0xc0440000
 8001ac0:	40554000 	.word	0x40554000
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <compensate_pressure>:
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd4a 	bl	8000584 <__aeabi_i2d>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001af8:	f7fe fed8 	bl	80008ac <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4bcb      	ldr	r3, [pc, #812]	@ (8001e38 <compensate_pressure+0x370>)
 8001b0a:	f7fe fbed 	bl	80002e8 <__aeabi_dsub>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001b16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b1e:	f7fe fd9b 	bl	8000658 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4614      	mov	r4, r2
 8001b28:	461d      	mov	r5, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd27 	bl	8000584 <__aeabi_i2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fd8b 	bl	8000658 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e3c <compensate_pressure+0x374>)
 8001b50:	f7fe feac 	bl	80008ac <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd0e 	bl	8000584 <__aeabi_i2d>
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd74 	bl	8000658 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	f7fe fbb6 	bl	80002ec <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b88:	f7fe fbb0 	bl	80002ec <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	4ba9      	ldr	r3, [pc, #676]	@ (8001e40 <compensate_pressure+0x378>)
 8001b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9e:	f7fe fe85 	bl	80008ac <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4614      	mov	r4, r2
 8001ba8:	461d      	mov	r5, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fce7 	bl	8000584 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4ba2      	ldr	r3, [pc, #648]	@ (8001e44 <compensate_pressure+0x37c>)
 8001bbc:	f7fe fd4c 	bl	8000658 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb90 	bl	80002ec <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcd2 	bl	8000584 <__aeabi_i2d>
 8001be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001be4:	f7fe fd38 	bl	8000658 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd30 	bl	8000658 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b90      	ldr	r3, [pc, #576]	@ (8001e48 <compensate_pressure+0x380>)
 8001c06:	f7fe fe51 	bl	80008ac <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4614      	mov	r4, r2
 8001c10:	461d      	mov	r5, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fcb3 	bl	8000584 <__aeabi_i2d>
 8001c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c22:	f7fe fd19 	bl	8000658 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	4629      	mov	r1, r5
 8001c2e:	f7fe fb5d 	bl	80002ec <__adddf3>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <compensate_pressure+0x380>)
 8001c40:	f7fe fe34 	bl	80008ac <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <compensate_pressure+0x374>)
 8001c52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c56:	f7fe fe29 	bl	80008ac <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <compensate_pressure+0x384>)
 8001c68:	f7fe fb40 	bl	80002ec <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc73 	bl	8000564 <__aeabi_ui2d>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4620      	mov	r0, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	f7fe fce7 	bl	8000658 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c9e:	f7fe ff4d 	bl	8000b3c <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <compensate_pressure+0x1f8>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb4:	f7fe ff60 	bl	8000b78 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 80de 	beq.w	8001e7c <compensate_pressure+0x3b4>
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc4d 	bl	8000564 <__aeabi_ui2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	f04f 0000 	mov.w	r0, #0
 8001cd2:	495f      	ldr	r1, [pc, #380]	@ (8001e50 <compensate_pressure+0x388>)
 8001cd4:	f7fe fb08 	bl	80002e8 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e54 <compensate_pressure+0x38c>)
 8001ce6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cea:	f7fe fddf 	bl	80008ac <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cf6:	f7fe faf7 	bl	80002e8 <__aeabi_dsub>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	a347      	add	r3, pc, #284	@ (adr r3, 8001e20 <compensate_pressure+0x358>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fca6 	bl	8000658 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d18:	f7fe fdc8 	bl	80008ac <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc2a 	bl	8000584 <__aeabi_i2d>
 8001d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d34:	f7fe fc90 	bl	8000658 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d44:	f7fe fc88 	bl	8000658 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <compensate_pressure+0x390>)
 8001d56:	f7fe fda9 	bl	80008ac <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fc0b 	bl	8000584 <__aeabi_i2d>
 8001d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d72:	f7fe fc71 	bl	8000658 <__aeabi_dmul>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <compensate_pressure+0x374>)
 8001d84:	f7fe fd92 	bl	80008ac <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d98:	f7fe faa8 	bl	80002ec <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4614      	mov	r4, r2
 8001da2:	461d      	mov	r5, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbea 	bl	8000584 <__aeabi_i2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa98 	bl	80002ec <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <compensate_pressure+0x394>)
 8001dca:	f7fe fd6f 	bl	80008ac <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dd6:	f7fe fa89 	bl	80002ec <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001de2:	a311      	add	r3, pc, #68	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dec:	f7fe fea6 	bl	8000b3c <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <compensate_pressure+0x33e>
 8001df6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001e28 <compensate_pressure+0x360>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e00:	2303      	movs	r3, #3
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001e06:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e30 <compensate_pressure+0x368>)
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e10:	f7fe feb2 	bl	8000b78 <__aeabi_dcmpgt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	e022      	b.n	8001e60 <compensate_pressure+0x398>
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40b86a00 	.word	0x40b86a00
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40dd4c00 	.word	0x40dd4c00
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40fadb00 	.word	0x40fadb00
 8001e38:	40ef4000 	.word	0x40ef4000
 8001e3c:	40e00000 	.word	0x40e00000
 8001e40:	40100000 	.word	0x40100000
 8001e44:	40f00000 	.word	0x40f00000
 8001e48:	41200000 	.word	0x41200000
 8001e4c:	3ff00000 	.word	0x3ff00000
 8001e50:	41300000 	.word	0x41300000
 8001e54:	40b00000 	.word	0x40b00000
 8001e58:	41e00000 	.word	0x41e00000
 8001e5c:	40300000 	.word	0x40300000
 8001e60:	d007      	beq.n	8001e72 <compensate_pressure+0x3aa>
 8001e62:	a309      	add	r3, pc, #36	@ (adr r3, 8001e88 <compensate_pressure+0x3c0>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001e72:	68f9      	ldr	r1, [r7, #12]
 8001e74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
 8001e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	@ 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bdb0      	pop	{r4, r5, r7, pc}
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	40fadb00 	.word	0x40fadb00

08001e90 <st_check_boundaries>:
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db03      	blt.n	8001eac <st_check_boundaries+0x1c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	dd09      	ble.n	8001ec0 <st_check_boundaries+0x30>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db06      	blt.n	8001ec0 <st_check_boundaries+0x30>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	dc02      	bgt.n	8001ec0 <st_check_boundaries+0x30>
 8001eba:	23fa      	movs	r3, #250	@ 0xfa
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e023      	b.n	8001f08 <st_check_boundaries+0x78>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <st_check_boundaries+0x3e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd09      	ble.n	8001ee2 <st_check_boundaries+0x52>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db06      	blt.n	8001ee2 <st_check_boundaries+0x52>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <st_check_boundaries+0x88>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	dc02      	bgt.n	8001ee2 <st_check_boundaries+0x52>
 8001edc:	23fb      	movs	r3, #251	@ 0xfb
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e012      	b.n	8001f08 <st_check_boundaries+0x78>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db03      	blt.n	8001ef0 <st_check_boundaries+0x60>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4a0b      	ldr	r2, [pc, #44]	@ (8001f18 <st_check_boundaries+0x88>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	dd09      	ble.n	8001f04 <st_check_boundaries+0x74>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db03      	blt.n	8001efe <st_check_boundaries+0x6e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <st_check_boundaries+0x88>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	dd02      	ble.n	8001f04 <st_check_boundaries+0x74>
 8001efe:	23f9      	movs	r3, #249	@ 0xf9
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e001      	b.n	8001f08 <st_check_boundaries+0x78>
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	000ffff0 	.word	0x000ffff0

08001f1c <BMP2_Init>:
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff f837 	bl	8000f98 <bmp2_init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	75fb      	strb	r3, [r7, #23]
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f91c 	bl	8001172 <bmp2_get_config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]
 8001f3e:	2303      	movs	r3, #3
 8001f40:	733b      	strb	r3, [r7, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	72fb      	strb	r3, [r7, #11]
 8001f46:	2303      	movs	r3, #3
 8001f48:	72bb      	strb	r3, [r7, #10]
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f94e 	bl	80011f2 <bmp2_set_config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff f980 	bl	8001268 <bmp2_set_power_mode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75fb      	strb	r3, [r7, #23]
 8001f6c:	f107 0108 	add.w	r1, r7, #8
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fa0a 	bl	8001390 <bmp2_compute_meas_time>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]
 8001f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <bmp2_spi_read>:
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	75bb      	strb	r3, [r7, #22]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6858      	ldr	r0, [r3, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	891b      	ldrh	r3, [r3, #8]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f003 fae2 	bl	800557c <HAL_GPIO_WritePin>
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	f107 010f 	add.w	r1, r7, #15
 8001fc0:	2305      	movs	r3, #5
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f005 f913 	bl	80071ee <HAL_SPI_Transmit>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	75bb      	strb	r3, [r7, #22]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	f005 fa77 	bl	80074ca <HAL_SPI_Receive>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	461a      	mov	r2, r3
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	75bb      	strb	r3, [r7, #22]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6858      	ldr	r0, [r3, #4]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	891b      	ldrh	r3, [r3, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f003 fac3 	bl	800557c <HAL_GPIO_WritePin>
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <bmp2_spi_read+0x74>
 8001ffc:	23ff      	movs	r3, #255	@ 0xff
 8001ffe:	75fb      	strb	r3, [r7, #23]
 8002000:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <bmp2_spi_write>:
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	2300      	movs	r3, #0
 800201e:	75bb      	strb	r3, [r7, #22]
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	6858      	ldr	r0, [r3, #4]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	891b      	ldrh	r3, [r3, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	f003 faa2 	bl	800557c <HAL_GPIO_WritePin>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	f107 010f 	add.w	r1, r7, #15
 8002040:	2305      	movs	r3, #5
 8002042:	2201      	movs	r2, #1
 8002044:	f005 f8d3 	bl	80071ee <HAL_SPI_Transmit>
 8002048:	4603      	mov	r3, r0
 800204a:	75bb      	strb	r3, [r7, #22]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2305      	movs	r3, #5
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	f005 f8c9 	bl	80071ee <HAL_SPI_Transmit>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	4413      	add	r3, r2
 8002064:	75bb      	strb	r3, [r7, #22]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	6858      	ldr	r0, [r3, #4]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	f003 fa83 	bl	800557c <HAL_GPIO_WritePin>
 8002076:	7dbb      	ldrb	r3, [r7, #22]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <bmp2_spi_write+0x74>
 800207c:	23ff      	movs	r3, #255	@ 0xff
 800207e:	75fb      	strb	r3, [r7, #23]
 8002080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <bmp2_delay_us>:
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <bmp2_delay_us+0x24>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fc79 	bl	8003998 <HAL_Delay>
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <BMP2_ReadData>:
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	23ff      	movs	r3, #255	@ 0xff
 80020c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	899b      	ldrh	r3, [r3, #12]
 80020cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d4:	68f9      	ldr	r1, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f89a 	bl	8001210 <bmp2_get_status>
 80020dc:	4603      	mov	r3, r0
 80020de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff f8d2 	bl	8001292 <bmp2_get_sensor_data>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
 80020fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <BMP2_ReadData+0xc4>)
 8002108:	f7fe fbd0 	bl	80008ac <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	e9c1 2300 	strd	r2, r3, [r1]
 8002116:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002124:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <BMP2_ReadData+0x80>
 800212c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	dccd      	bgt.n	80020d0 <BMP2_ReadData+0x1c>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	684c      	ldr	r4, [r1, #4]
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fd61 	bl	8000c08 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	6163      	str	r3, [r4, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	684c      	ldr	r4, [r1, #4]
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd56 	bl	8000c08 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	6123      	str	r3, [r4, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002168:	729a      	strb	r2, [r3, #10]
 800216a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800216e:	4618      	mov	r0, r3
 8002170:	372c      	adds	r7, #44	@ 0x2c
 8002172:	46bd      	mov	sp, r7
 8002174:	bd90      	pop	{r4, r7, pc}
 8002176:	bf00      	nop
 8002178:	40590000 	.word	0x40590000

0800217c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a07      	ldr	r2, [pc, #28]	@ (80021a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800218c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <vApplicationGetIdleTaskMemory+0x30>)
 8002192:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2280      	movs	r2, #128	@ 0x80
 8002198:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200003b8 	.word	0x200003b8
 80021ac:	20000458 	.word	0x20000458

080021b0 <TempSensorTask>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */

void TempSensorTask(void *argument) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	6078      	str	r0, [r7, #4]
    double temp, press;
    while(1) {
        if (BMP2_ReadData(&bmp2dev, &press, &temp) == BMP2_OK) {
 80021b8:	f107 0210 	add.w	r2, r7, #16
 80021bc:	f107 0308 	add.w	r3, r7, #8
 80021c0:	4619      	mov	r1, r3
 80021c2:	4814      	ldr	r0, [pc, #80]	@ (8002214 <TempSensorTask+0x64>)
 80021c4:	f7ff ff76 	bl	80020b4 <BMP2_ReadData>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d11b      	bne.n	8002206 <TempSensorTask+0x56>
            temp_mdegC = (int)(temp * 1000);
 80021ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <TempSensorTask+0x68>)
 80021d8:	f7fe fa3e 	bl	8000658 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fce8 	bl	8000bb8 <__aeabi_d2iz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <TempSensorTask+0x6c>)
 80021ec:	6013      	str	r3, [r2, #0]

            printf("Temp: %.2f C, Press: %.2f Pa\n", temp, press);
 80021ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021f6:	e9cd 2300 	strd	r2, r3, [sp]
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4808      	ldr	r0, [pc, #32]	@ (8002220 <TempSensorTask+0x70>)
 8002200:	f01b fac2 	bl	801d788 <iprintf>
 8002204:	e002      	b.n	800220c <TempSensorTask+0x5c>
        } else {
            printf("Błąd odczytu sensora BMP2\n");
 8002206:	4807      	ldr	r0, [pc, #28]	@ (8002224 <TempSensorTask+0x74>)
 8002208:	f01b fb26 	bl	801d858 <puts>
        }
        osDelay(250);
 800220c:	20fa      	movs	r0, #250	@ 0xfa
 800220e:	f009 f8d7 	bl	800b3c0 <osDelay>
        if (BMP2_ReadData(&bmp2dev, &press, &temp) == BMP2_OK) {
 8002212:	e7d1      	b.n	80021b8 <TempSensorTask+0x8>
 8002214:	20000018 	.word	0x20000018
 8002218:	408f4000 	.word	0x408f4000
 800221c:	200006d4 	.word	0x200006d4
 8002220:	0801fc14 	.word	0x0801fc14
 8002224:	0801fc34 	.word	0x0801fc34

08002228 <StartLCDTask>:
    }
}


void StartLCDTask(void *argument)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
      char buffer[16];
      sprintf(buffer, "Temp. zad.: %.2f", my_variable);
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <StartLCDTask+0x48>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f9b7 	bl	80005a8 <__aeabi_f2d>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	f107 0008 	add.w	r0, r7, #8
 8002242:	490c      	ldr	r1, [pc, #48]	@ (8002274 <StartLCDTask+0x4c>)
 8002244:	f01b fb10 	bl	801d868 <siprintf>

      sprintf((char *)disp.f_line, "%s", buffer);
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	461a      	mov	r2, r3
 800224e:	490a      	ldr	r1, [pc, #40]	@ (8002278 <StartLCDTask+0x50>)
 8002250:	480a      	ldr	r0, [pc, #40]	@ (800227c <StartLCDTask+0x54>)
 8002252:	f01b fb09 	bl	801d868 <siprintf>
      sprintf((char *)disp.s_line, "");
 8002256:	490a      	ldr	r1, [pc, #40]	@ (8002280 <StartLCDTask+0x58>)
 8002258:	480a      	ldr	r0, [pc, #40]	@ (8002284 <StartLCDTask+0x5c>)
 800225a:	f01b fb05 	bl	801d868 <siprintf>
      lcd_display(&disp);
 800225e:	480a      	ldr	r0, [pc, #40]	@ (8002288 <StartLCDTask+0x60>)
 8002260:	f000 fbce 	bl	8002a00 <lcd_display>

      osDelay(500);
 8002264:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002268:	f009 f8aa 	bl	800b3c0 <osDelay>
  {
 800226c:	bf00      	nop
 800226e:	e7df      	b.n	8002230 <StartLCDTask+0x8>
 8002270:	20000054 	.word	0x20000054
 8002274:	0801fc50 	.word	0x0801fc50
 8002278:	0801fc64 	.word	0x0801fc64
 800227c:	200006ad 	.word	0x200006ad
 8002280:	0801fc68 	.word	0x0801fc68
 8002284:	200006be 	.word	0x200006be
 8002288:	200006ac 	.word	0x200006ac

0800228c <StartHttpServerTask>:
  }
}

void StartHttpServerTask(void *argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
    while (!netif_is_up(&gnetif))
 8002294:	e002      	b.n	800229c <StartHttpServerTask+0x10>
    {
        osDelay(100);
 8002296:	2064      	movs	r0, #100	@ 0x64
 8002298:	f009 f892 	bl	800b3c0 <osDelay>
    while (!netif_is_up(&gnetif))
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <StartHttpServerTask+0x2c>)
 800229e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f5      	beq.n	8002296 <StartHttpServerTask+0xa>
    }

    httpd_init();
 80022aa:	f00f fa65 	bl	8011778 <httpd_init>

    for (;;)
    {
        osDelay(1000);
 80022ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022b2:	f009 f885 	bl	800b3c0 <osDelay>
 80022b6:	e7fa      	b.n	80022ae <StartHttpServerTask+0x22>
 80022b8:	200008b4 	.word	0x200008b4

080022bc <MX_FREERTOS_Init>:
    }
}

void MX_FREERTOS_Init(void) {
 80022bc:	b5b0      	push	{r4, r5, r7, lr}
 80022be:	b0aa      	sub	sp, #168	@ 0xa8
 80022c0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80022c2:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <MX_FREERTOS_Init+0xdc>)
 80022c4:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80022c8:	461d      	mov	r5, r3
 80022ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80022d6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f009 f823 	bl	800b328 <osThreadCreate>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <MX_FREERTOS_Init+0xe0>)
 80022e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 80022e8:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <MX_FREERTOS_Init+0xe4>)
 80022ea:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 80022ee:	461d      	mov	r5, r3
 80022f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 80022fc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f009 f810 	bl	800b328 <osThreadCreate>
 8002308:	4603      	mov	r3, r0
 800230a:	4a26      	ldr	r2, [pc, #152]	@ (80023a4 <MX_FREERTOS_Init+0xe8>)
 800230c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <MX_FREERTOS_Init+0xec>)
 8002310:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002314:	461d      	mov	r5, r3
 8002316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800231a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800231e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 8002322:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f008 fffd 	bl	800b328 <osThreadCreate>
 800232e:	4603      	mov	r3, r0
 8002330:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <MX_FREERTOS_Init+0xf0>)
 8002332:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(tempTask, TempSensorTask, osPriorityNormal, 0, 256);
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <MX_FREERTOS_Init+0xf4>)
 8002336:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800233a:	461d      	mov	r5, r3
 800233c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800233e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002340:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(tempTask), NULL);
 8002348:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f008 ffea 	bl	800b328 <osThreadCreate>

  osThreadDef(lcdTask, StartLCDTask, osPriorityNormal, 0, 128);
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <MX_FREERTOS_Init+0xf8>)
 8002356:	f107 041c 	add.w	r4, r7, #28
 800235a:	461d      	mov	r5, r3
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(lcdTask), NULL);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f008 ffda 	bl	800b328 <osThreadCreate>
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 8002374:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <MX_FREERTOS_Init+0xfc>)
 8002376:	463c      	mov	r4, r7
 8002378:	461d      	mov	r5, r3
 800237a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800237c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 8002386:	463b      	mov	r3, r7
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f008 ffcc 	bl	800b328 <osThreadCreate>


  /* USER CODE END RTOS_THREADS */

}
 8002390:	bf00      	nop
 8002392:	37a8      	adds	r7, #168	@ 0xa8
 8002394:	46bd      	mov	sp, r7
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	0801fc78 	.word	0x0801fc78
 800239c:	200003ac 	.word	0x200003ac
 80023a0:	0801fca0 	.word	0x0801fca0
 80023a4:	200003b0 	.word	0x200003b0
 80023a8:	0801fcc8 	.word	0x0801fcc8
 80023ac:	200003b4 	.word	0x200003b4
 80023b0:	0801fcf0 	.word	0x0801fcf0
 80023b4:	0801fd14 	.word	0x0801fd14
 80023b8:	0801fd40 	.word	0x0801fd40

080023bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80023c4:	f008 f93e 	bl	800a644 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80023c8:	2101      	movs	r1, #1
 80023ca:	4804      	ldr	r0, [pc, #16]	@ (80023dc <StartDefaultTask+0x20>)
 80023cc:	f003 f8ef 	bl	80055ae <HAL_GPIO_TogglePin>
    osDelay(100);
 80023d0:	2064      	movs	r0, #100	@ 0x64
 80023d2:	f008 fff5 	bl	800b3c0 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80023d6:	bf00      	nop
 80023d8:	e7f6      	b.n	80023c8 <StartDefaultTask+0xc>
 80023da:	bf00      	nop
 80023dc:	40020400 	.word	0x40020400

080023e0 <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0a0      	sub	sp, #128	@ 0x80
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 80023ec:	2064      	movs	r0, #100	@ 0x64
 80023ee:	f008 ffe7 	bl	800b3c0 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	2020      	movs	r0, #32
 80023f8:	f00c f80e 	bl	800e418 <netconn_new_with_proto_and_callback>
 80023fc:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 80023fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <StartUdpEcho+0x32>
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <StartUdpEcho+0xe0>)
 8002406:	22f8      	movs	r2, #248	@ 0xf8
 8002408:	492e      	ldr	r1, [pc, #184]	@ (80024c4 <StartUdpEcho+0xe4>)
 800240a:	482f      	ldr	r0, [pc, #188]	@ (80024c8 <StartUdpEcho+0xe8>)
 800240c:	f01b f9bc 	bl	801d788 <iprintf>
 8002410:	e053      	b.n	80024ba <StartUdpEcho+0xda>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 8002412:	2208      	movs	r2, #8
 8002414:	492d      	ldr	r1, [pc, #180]	@ (80024cc <StartUdpEcho+0xec>)
 8002416:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002418:	f00c f8b8 	bl	800e58c <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 800241c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002420:	4619      	mov	r1, r3
 8002422:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002424:	f00c fb1e 	bl	800ea64 <netconn_recv>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 800242e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1f2      	bne.n	800241c <StartUdpEcho+0x3c>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	4825      	ldr	r0, [pc, #148]	@ (80024d0 <StartUdpEcho+0xf0>)
 800243c:	f003 f89e 	bl	800557c <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 8002440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002448:	2300      	movs	r3, #0
 800244a:	2220      	movs	r2, #32
 800244c:	f010 ffe2 	bl	8013414 <pbuf_copy_partial>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	891b      	ldrh	r3, [r3, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d123      	bne.n	80024a6 <StartUdpEcho+0xc6>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 800245e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002460:	3301      	adds	r3, #1
 8002462:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 8002464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	891b      	ldrh	r3, [r3, #8]
 800246a:	3380      	adds	r3, #128	@ 0x80
 800246c:	443b      	add	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 8002474:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002478:	f107 000c 	add.w	r0, r7, #12
 800247c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800247e:	4915      	ldr	r1, [pc, #84]	@ (80024d4 <StartUdpEcho+0xf4>)
 8002480:	f01b f9f2 	bl	801d868 <siprintf>
 8002484:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 8002486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002488:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800248a:	b292      	uxth	r2, r2
 800248c:	f107 010c 	add.w	r1, r7, #12
 8002490:	4618      	mov	r0, r3
 8002492:	f00e f8fb 	bl	801068c <netbuf_ref>
		err = netconn_send(conn, buf);
 8002496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002498:	4619      	mov	r1, r3
 800249a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800249c:	f00c fb5c 	bl	800eb58 <netconn_send>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 80024a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00e f8cf 	bl	801064c <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	4807      	ldr	r0, [pc, #28]	@ (80024d0 <StartUdpEcho+0xf0>)
 80024b4:	f003 f862 	bl	800557c <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 80024b8:	e7b0      	b.n	800241c <StartUdpEcho+0x3c>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 80024ba:	3780      	adds	r7, #128	@ 0x80
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	0801fd5c 	.word	0x0801fd5c
 80024c4:	0801fd74 	.word	0x0801fd74
 80024c8:	0801fd8c 	.word	0x0801fd8c
 80024cc:	080243c0 	.word	0x080243c0
 80024d0:	40020400 	.word	0x40020400
 80024d4:	0801fdb4 	.word	0x0801fdb4

080024d8 <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b096      	sub	sp, #88	@ 0x58
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 80024e4:	2064      	movs	r0, #100	@ 0x64
 80024e6:	f008 ff6b 	bl	800b3c0 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2010      	movs	r0, #16
 80024f0:	f00b ff92 	bl	800e418 <netconn_new_with_proto_and_callback>
 80024f4:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 80024f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8083 	beq.w	8002604 <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 80024fe:	2207      	movs	r2, #7
 8002500:	2100      	movs	r1, #0
 8002502:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002504:	f00c f842 	bl	800e58c <netconn_bind>
 8002508:	4603      	mov	r3, r0
 800250a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 800250e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002512:	2b00      	cmp	r3, #0
 8002514:	d172      	bne.n	80025fc <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 8002516:	21ff      	movs	r1, #255	@ 0xff
 8002518:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800251a:	f00c f86f 	bl	800e5fc <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 800251e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002522:	4619      	mov	r1, r3
 8002524:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002526:	f00c f895 	bl	800e654 <netconn_accept>
 800252a:	4603      	mov	r3, r0
 800252c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 8002530:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f2      	bne.n	800251e <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8002538:	e04d      	b.n	80025d6 <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002540:	4832      	ldr	r0, [pc, #200]	@ (800260c <StartTcpEcho+0x134>)
 8002542:	f003 f81b 	bl	800557c <HAL_GPIO_WritePin>
		    msg_cnt++;
 8002546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002548:	3301      	adds	r3, #1
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8002552:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002556:	4618      	mov	r0, r3
 8002558:	f00e f8e2 	bl	8010720 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002562:	492b      	ldr	r1, [pc, #172]	@ (8002610 <StartTcpEcho+0x138>)
 8002564:	4618      	mov	r0, r3
 8002566:	f01b f97f 	bl	801d868 <siprintf>
 800256a:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 800256c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800256e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002570:	f107 010c 	add.w	r1, r7, #12
 8002574:	2300      	movs	r3, #0
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	2301      	movs	r3, #1
 800257a:	f00c fb1b 	bl	800ebb4 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 800257e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002580:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002582:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2301      	movs	r3, #1
 800258c:	f00c fb12 	bl	800ebb4 <netconn_write_partly>
			  char postfix[] = "\r\n";
 8002590:	4a20      	ldr	r2, [pc, #128]	@ (8002614 <StartTcpEcho+0x13c>)
 8002592:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4611      	mov	r1, r2
 800259a:	8019      	strh	r1, [r3, #0]
 800259c:	3302      	adds	r3, #2
 800259e:	0c12      	lsrs	r2, r2, #16
 80025a0:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 80025a2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80025a4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2300      	movs	r3, #0
 80025ae:	2202      	movs	r2, #2
 80025b0:	f00c fb00 	bl	800ebb4 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 80025b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b6:	4618      	mov	r0, r3
 80025b8:	f00e f8fc 	bl	80107b4 <netbuf_next>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	dac4      	bge.n	800254c <StartTcpEcho+0x74>
            netbuf_delete(buf);
 80025c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c4:	4618      	mov	r0, r3
 80025c6:	f00e f841 	bl	801064c <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025d0:	480e      	ldr	r0, [pc, #56]	@ (800260c <StartTcpEcho+0x134>)
 80025d2:	f002 ffd3 	bl	800557c <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 80025d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025d8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f00c fa40 	bl	800ea64 <netconn_recv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0a7      	beq.n	800253a <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 80025ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00c fbe3 	bl	800edb8 <netconn_close>
		  netconn_delete(newconn);
 80025f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00b ffad 	bl	800e554 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 80025fa:	e790      	b.n	800251e <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 80025fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025fe:	4618      	mov	r0, r3
 8002600:	f00b ffa8 	bl	800e554 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 8002604:	bf00      	nop
 8002606:	3750      	adds	r7, #80	@ 0x50
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40020400 	.word	0x40020400
 8002610:	0801fdc8 	.word	0x0801fdc8
 8002614:	0801fddc 	.word	0x0801fddc

08002618 <MX_GPIO_Init>:
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	@ 0x30
 800261c:	af00      	add	r7, sp, #0
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]
 800262e:	4b5c      	ldr	r3, [pc, #368]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a5b      	ldr	r2, [pc, #364]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b59      	ldr	r3, [pc, #356]	@ (80027a0 <MX_GPIO_Init+0x188>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4b56      	ldr	r3, [pc, #344]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a55      	ldr	r2, [pc, #340]	@ (80027a0 <MX_GPIO_Init+0x188>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b53      	ldr	r3, [pc, #332]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4b50      	ldr	r3, [pc, #320]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	4a4f      	ldr	r2, [pc, #316]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002668:	6313      	str	r3, [r2, #48]	@ 0x30
 800266a:	4b4d      	ldr	r3, [pc, #308]	@ (80027a0 <MX_GPIO_Init+0x188>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4b4a      	ldr	r3, [pc, #296]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a49      	ldr	r2, [pc, #292]	@ (80027a0 <MX_GPIO_Init+0x188>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b47      	ldr	r3, [pc, #284]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4b44      	ldr	r3, [pc, #272]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a43      	ldr	r2, [pc, #268]	@ (80027a0 <MX_GPIO_Init+0x188>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b41      	ldr	r3, [pc, #260]	@ (80027a0 <MX_GPIO_Init+0x188>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a3d      	ldr	r2, [pc, #244]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026ac:	f043 0308 	orr.w	r3, r3, #8
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	607b      	str	r3, [r7, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a37      	ldr	r2, [pc, #220]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b35      	ldr	r3, [pc, #212]	@ (80027a0 <MX_GPIO_Init+0x188>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80026dc:	4831      	ldr	r0, [pc, #196]	@ (80027a4 <MX_GPIO_Init+0x18c>)
 80026de:	f002 ff4d 	bl	800557c <HAL_GPIO_WritePin>
 80026e2:	2200      	movs	r2, #0
 80026e4:	2140      	movs	r1, #64	@ 0x40
 80026e6:	4830      	ldr	r0, [pc, #192]	@ (80027a8 <MX_GPIO_Init+0x190>)
 80026e8:	f002 ff48 	bl	800557c <HAL_GPIO_WritePin>
 80026ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	482a      	ldr	r0, [pc, #168]	@ (80027ac <MX_GPIO_Init+0x194>)
 8002704:	f002 fd8e 	bl	8005224 <HAL_GPIO_Init>
 8002708:	f244 0381 	movw	r3, #16513	@ 0x4081
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	2301      	movs	r3, #1
 8002710:	623b      	str	r3, [r7, #32]
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271a:	f107 031c 	add.w	r3, r7, #28
 800271e:	4619      	mov	r1, r3
 8002720:	4820      	ldr	r0, [pc, #128]	@ (80027a4 <MX_GPIO_Init+0x18c>)
 8002722:	f002 fd7f 	bl	8005224 <HAL_GPIO_Init>
 8002726:	2340      	movs	r3, #64	@ 0x40
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	2301      	movs	r3, #1
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
 8002732:	2300      	movs	r3, #0
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	481a      	ldr	r0, [pc, #104]	@ (80027a8 <MX_GPIO_Init+0x190>)
 800273e:	f002 fd71 	bl	8005224 <HAL_GPIO_Init>
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	61fb      	str	r3, [r7, #28]
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	2300      	movs	r3, #0
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
 800274e:	f107 031c 	add.w	r3, r7, #28
 8002752:	4619      	mov	r1, r3
 8002754:	4814      	ldr	r0, [pc, #80]	@ (80027a8 <MX_GPIO_Init+0x190>)
 8002756:	f002 fd65 	bl	8005224 <HAL_GPIO_Init>
 800275a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
 8002768:	2303      	movs	r3, #3
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800276c:	230a      	movs	r3, #10
 800276e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	4619      	mov	r1, r3
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <MX_GPIO_Init+0x198>)
 8002778:	f002 fd54 	bl	8005224 <HAL_GPIO_Init>
 800277c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
 800278a:	f107 031c 	add.w	r3, r7, #28
 800278e:	4619      	mov	r1, r3
 8002790:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <MX_GPIO_Init+0x198>)
 8002792:	f002 fd47 	bl	8005224 <HAL_GPIO_Init>
 8002796:	bf00      	nop
 8002798:	3730      	adds	r7, #48	@ 0x30
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40021800 	.word	0x40021800
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020000 	.word	0x40020000

080027b4 <MX_I2C1_Init>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027ba:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <MX_I2C1_Init+0x78>)
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <MX_I2C1_Init+0x7c>)
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
 80027dc:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
 80027ee:	480e      	ldr	r0, [pc, #56]	@ (8002828 <MX_I2C1_Init+0x74>)
 80027f0:	f002 fef8 	bl	80055e4 <HAL_I2C_Init>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_I2C1_Init+0x4a>
 80027fa:	f000 fb43 	bl	8002e84 <Error_Handler>
 80027fe:	2100      	movs	r1, #0
 8002800:	4809      	ldr	r0, [pc, #36]	@ (8002828 <MX_I2C1_Init+0x74>)
 8002802:	f003 fa65 	bl	8005cd0 <HAL_I2CEx_ConfigAnalogFilter>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_I2C1_Init+0x5c>
 800280c:	f000 fb3a 	bl	8002e84 <Error_Handler>
 8002810:	2100      	movs	r1, #0
 8002812:	4805      	ldr	r0, [pc, #20]	@ (8002828 <MX_I2C1_Init+0x74>)
 8002814:	f003 faa7 	bl	8005d66 <HAL_I2CEx_ConfigDigitalFilter>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_I2C1_Init+0x6e>
 800281e:	f000 fb31 	bl	8002e84 <Error_Handler>
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000658 	.word	0x20000658
 800282c:	40005400 	.word	0x40005400
 8002830:	20404768 	.word	0x20404768

08002834 <HAL_I2C_MspInit>:
 8002834:	b580      	push	{r7, lr}
 8002836:	b0aa      	sub	sp, #168	@ 0xa8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	2284      	movs	r2, #132	@ 0x84
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f01b f929 	bl	801daac <memset>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a22      	ldr	r2, [pc, #136]	@ (80028e8 <HAL_I2C_MspInit+0xb4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13c      	bne.n	80028de <HAL_I2C_MspInit+0xaa>
 8002864:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	2300      	movs	r3, #0
 800286c:	677b      	str	r3, [r7, #116]	@ 0x74
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	4618      	mov	r0, r3
 8002874:	f004 f820 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_MspInit+0x4e>
 800287e:	f000 fb01 	bl	8002e84 <Error_Handler>
 8002882:	4b1a      	ldr	r3, [pc, #104]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b17      	ldr	r3, [pc, #92]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800289e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028a2:	2312      	movs	r3, #18
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028ae:	2303      	movs	r3, #3
 80028b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028b4:	2304      	movs	r3, #4
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80028ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80028be:	4619      	mov	r1, r3
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <HAL_I2C_MspInit+0xbc>)
 80028c2:	f002 fcaf 	bl	8005224 <HAL_GPIO_Init>
 80028c6:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a08      	ldr	r2, [pc, #32]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 80028cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_I2C_MspInit+0xb8>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	bf00      	nop
 80028e0:	37a8      	adds	r7, #168	@ 0xa8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40005400 	.word	0x40005400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020400 	.word	0x40020400

080028f4 <lcd_init>:
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <lcd_init+0x1a>
 800290a:	2308      	movs	r3, #8
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	2028      	movs	r0, #40	@ 0x28
 8002910:	f001 f842 	bl	8003998 <HAL_Delay>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	2130      	movs	r1, #48	@ 0x30
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f829 	bl	8002974 <lcd_write>
 8002922:	2005      	movs	r0, #5
 8002924:	f001 f838 	bl	8003998 <HAL_Delay>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	2130      	movs	r1, #48	@ 0x30
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f81f 	bl	8002974 <lcd_write>
 8002936:	2001      	movs	r0, #1
 8002938:	f001 f82e 	bl	8003998 <HAL_Delay>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	2130      	movs	r1, #48	@ 0x30
 8002944:	4618      	mov	r0, r3
 8002946:	f000 f815 	bl	8002974 <lcd_write>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	7bfa      	ldrb	r2, [r7, #15]
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f80e 	bl	8002974 <lcd_write>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	210c      	movs	r1, #12
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f807 	bl	8002974 <lcd_write>
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f89f 	bl	8002aaa <lcd_clear>
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <lcd_write>:
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af02      	add	r7, sp, #8
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	460b      	mov	r3, r1
 8002980:	71bb      	strb	r3, [r7, #6]
 8002982:	4613      	mov	r3, r2
 8002984:	717b      	strb	r3, [r7, #5]
 8002986:	79bb      	ldrb	r3, [r7, #6]
 8002988:	f023 030f 	bic.w	r3, r3, #15
 800298c:	b2da      	uxtb	r2, r3
 800298e:	797b      	ldrb	r3, [r7, #5]
 8002990:	4313      	orrs	r3, r2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	b2db      	uxtb	r3, r3
 800299a:	733b      	strb	r3, [r7, #12]
 800299c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029a0:	f023 030f 	bic.w	r3, r3, #15
 80029a4:	b25a      	sxtb	r2, r3
 80029a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	b25b      	sxtb	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	737b      	strb	r3, [r7, #13]
 80029b2:	79bb      	ldrb	r3, [r7, #6]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	797b      	ldrb	r3, [r7, #5]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	73bb      	strb	r3, [r7, #14]
 80029c6:	79bb      	ldrb	r3, [r7, #6]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	b25a      	sxtb	r2, r3
 80029cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	b25b      	sxtb	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	73fb      	strb	r3, [r7, #15]
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	b299      	uxth	r1, r3
 80029dc:	f107 020c 	add.w	r2, r7, #12
 80029e0:	2364      	movs	r3, #100	@ 0x64
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2304      	movs	r3, #4
 80029e6:	4805      	ldr	r0, [pc, #20]	@ (80029fc <lcd_write+0x88>)
 80029e8:	f002 fe8c 	bl	8005704 <HAL_I2C_Master_Transmit>
 80029ec:	2005      	movs	r0, #5
 80029ee:	f000 ffd3 	bl	8003998 <HAL_Delay>
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000658 	.word	0x20000658

08002a00 <lcd_display>:
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	73bb      	strb	r3, [r7, #14]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <lcd_display+0x1e>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f843 	bl	8002aaa <lcd_clear>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	2180      	movs	r1, #128	@ 0x80
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ffa1 	bl	8002974 <lcd_write>
 8002a32:	e00f      	b.n	8002a54 <lcd_display+0x54>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7818      	ldrb	r0, [r3, #0]
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	7859      	ldrb	r1, [r3, #1]
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f7ff ff93 	bl	8002974 <lcd_write>
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	3301      	adds	r3, #1
 8002a52:	73bb      	strb	r3, [r7, #14]
 8002a54:	7bbb      	ldrb	r3, [r7, #14]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e9      	bne.n	8002a34 <lcd_display+0x34>
 8002a60:	2300      	movs	r3, #0
 8002a62:	73bb      	strb	r3, [r7, #14]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	21c0      	movs	r1, #192	@ 0xc0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff81 	bl	8002974 <lcd_write>
 8002a72:	e00f      	b.n	8002a94 <lcd_display+0x94>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7818      	ldrb	r0, [r3, #0]
 8002a78:	7bbb      	ldrb	r3, [r7, #14]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	7c99      	ldrb	r1, [r3, #18]
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f7ff ff73 	bl	8002974 <lcd_write>
 8002a8e:	7bbb      	ldrb	r3, [r7, #14]
 8002a90:	3301      	adds	r3, #1
 8002a92:	73bb      	strb	r3, [r7, #14]
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	7c9b      	ldrb	r3, [r3, #18]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e9      	bne.n	8002a74 <lcd_display+0x74>
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <lcd_clear>:
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <lcd_clear+0x1a>
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff51 	bl	8002974 <lcd_write>
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  return (HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4807      	ldr	r0, [pc, #28]	@ (8002b10 <_write+0x34>)
 8002af4:	f006 fb18 	bl	8009128 <HAL_UART_Transmit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <_write+0x26>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	e001      	b.n	8002b06 <_write+0x2a>
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000828 	.word	0x20000828

08002b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b08c      	sub	sp, #48	@ 0x30
 8002b18:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1a:	f000 ff0f 	bl	800393c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b1e:	f000 f8c9 	bl	8002cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b22:	f7ff fd79 	bl	8002618 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002b26:	f000 fce7 	bl	80034f8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002b2a:	f7ff fe43 	bl	80027b4 <MX_I2C1_Init>
  MX_SPI4_Init();
 8002b2e:	f000 f9af 	bl	8002e90 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002b32:	f000 fbcb 	bl	80032cc <MX_TIM2_Init>
  MX_TIM7_Init();
 8002b36:	f000 fc3f 	bl	80033b8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 8002b3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c70 <main+0x15c>)
 8002b3c:	224e      	movs	r2, #78	@ 0x4e
 8002b3e:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002b40:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <main+0x15c>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  lcd_init(&disp);
 8002b48:	4849      	ldr	r0, [pc, #292]	@ (8002c70 <main+0x15c>)
 8002b4a:	f7ff fed3 	bl	80028f4 <lcd_init>
  sprintf((char *)disp.f_line, "Wartosc: %.2f", my_variable);
 8002b4e:	4b49      	ldr	r3, [pc, #292]	@ (8002c74 <main+0x160>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fd28 	bl	80005a8 <__aeabi_f2d>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4946      	ldr	r1, [pc, #280]	@ (8002c78 <main+0x164>)
 8002b5e:	4847      	ldr	r0, [pc, #284]	@ (8002c7c <main+0x168>)
 8002b60:	f01a fe82 	bl	801d868 <siprintf>
  sprintf((char *)disp.s_line, "");
 8002b64:	4946      	ldr	r1, [pc, #280]	@ (8002c80 <main+0x16c>)
 8002b66:	4847      	ldr	r0, [pc, #284]	@ (8002c84 <main+0x170>)
 8002b68:	f01a fe7e 	bl	801d868 <siprintf>
  lcd_display(&disp);
 8002b6c:	4840      	ldr	r0, [pc, #256]	@ (8002c70 <main+0x15c>)
 8002b6e:	f7ff ff47 	bl	8002a00 <lcd_display>

  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8002b72:	2201      	movs	r2, #1
 8002b74:	4944      	ldr	r1, [pc, #272]	@ (8002c88 <main+0x174>)
 8002b76:	4845      	ldr	r0, [pc, #276]	@ (8002c8c <main+0x178>)
 8002b78:	f006 fb59 	bl	800922e <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev);
 8002b7c:	4844      	ldr	r0, [pc, #272]	@ (8002c90 <main+0x17c>)
 8002b7e:	f7ff f9cd 	bl	8001f1c <BMP2_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002b82:	f7ff fb9b 	bl	80022bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b86:	f008 fbb8 	bl	800b2fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float prev_variable = -1.0;
 8002b8a:	4b42      	ldr	r3, [pc, #264]	@ (8002c94 <main+0x180>)
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
	  if (prev_variable != my_variable) {
 8002b8e:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <main+0x160>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b98:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	d016      	beq.n	8002bd0 <main+0xbc>
	  char buffer[16];
	  sprintf(buffer, "Val: %.2f", my_variable);
 8002ba2:	4b34      	ldr	r3, [pc, #208]	@ (8002c74 <main+0x160>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fcfe 	bl	80005a8 <__aeabi_f2d>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4638      	mov	r0, r7
 8002bb2:	4939      	ldr	r1, [pc, #228]	@ (8002c98 <main+0x184>)
 8002bb4:	f01a fe58 	bl	801d868 <siprintf>
	  sprintf((char *)disp.f_line, "%s", buffer);
 8002bb8:	463b      	mov	r3, r7
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4937      	ldr	r1, [pc, #220]	@ (8002c9c <main+0x188>)
 8002bbe:	482f      	ldr	r0, [pc, #188]	@ (8002c7c <main+0x168>)
 8002bc0:	f01a fe52 	bl	801d868 <siprintf>
	  lcd_display(&disp);  // Aktualizacja wyświetlacza LCD
 8002bc4:	482a      	ldr	r0, [pc, #168]	@ (8002c70 <main+0x15c>)
 8002bc6:	f7ff ff1b 	bl	8002a00 <lcd_display>
	  prev_variable = my_variable;
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <main+0x160>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	      HAL_Delay(500);
 8002bd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002bd4:	f000 fee0 	bl	8003998 <HAL_Delay>

	      double temp, press;
	          BMP2_ReadData(&bmp2dev, &press, &temp);
 8002bd8:	f107 0218 	add.w	r2, r7, #24
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	4619      	mov	r1, r3
 8002be2:	482b      	ldr	r0, [pc, #172]	@ (8002c90 <main+0x17c>)
 8002be4:	f7ff fa66 	bl	80020b4 <BMP2_ReadData>
	          temp_mdegC = 1000*temp;
 8002be8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <main+0x18c>)
 8002bf2:	f7fd fd31 	bl	8000658 <__aeabi_dmul>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd ffdb 	bl	8000bb8 <__aeabi_d2iz>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <main+0x190>)
 8002c06:	6013      	str	r3, [r2, #0]
	          press_Pa = 100*press;
 8002c08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <main+0x194>)
 8002c12:	f7fd fd21 	bl	8000658 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd ffcb 	bl	8000bb8 <__aeabi_d2iz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4a21      	ldr	r2, [pc, #132]	@ (8002cac <main+0x198>)
 8002c26:	6013      	str	r3, [r2, #0]
	          printf("{\"id\":1,\"temp\":%5.2f, \"press\":%7.2f }\r\n", (float)temp, (float)press);
 8002c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd ffea 	bl	8000c08 <__aeabi_d2f>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fcb6 	bl	80005a8 <__aeabi_f2d>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	460d      	mov	r5, r1
 8002c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c44:	4610      	mov	r0, r2
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fd ffde 	bl	8000c08 <__aeabi_d2f>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fcaa 	bl	80005a8 <__aeabi_f2d>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	e9cd 2300 	strd	r2, r3, [sp]
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	462b      	mov	r3, r5
 8002c60:	4813      	ldr	r0, [pc, #76]	@ (8002cb0 <main+0x19c>)
 8002c62:	f01a fd91 	bl	801d788 <iprintf>
	          HAL_Delay(250);
 8002c66:	20fa      	movs	r0, #250	@ 0xfa
 8002c68:	f000 fe96 	bl	8003998 <HAL_Delay>
  {
 8002c6c:	e78f      	b.n	8002b8e <main+0x7a>
 8002c6e:	bf00      	nop
 8002c70:	200006ac 	.word	0x200006ac
 8002c74:	20000054 	.word	0x20000054
 8002c78:	0801fde0 	.word	0x0801fde0
 8002c7c:	200006ad 	.word	0x200006ad
 8002c80:	0801fdf0 	.word	0x0801fdf0
 8002c84:	200006be 	.word	0x200006be
 8002c88:	200006d0 	.word	0x200006d0
 8002c8c:	20000828 	.word	0x20000828
 8002c90:	20000018 	.word	0x20000018
 8002c94:	bf800000 	.word	0xbf800000
 8002c98:	0801fdf4 	.word	0x0801fdf4
 8002c9c:	0801fe00 	.word	0x0801fe00
 8002ca0:	408f4000 	.word	0x408f4000
 8002ca4:	200006d4 	.word	0x200006d4
 8002ca8:	40590000 	.word	0x40590000
 8002cac:	200006d8 	.word	0x200006d8
 8002cb0:	0801fe04 	.word	0x0801fe04

08002cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b094      	sub	sp, #80	@ 0x50
 8002cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cba:	f107 0320 	add.w	r3, r7, #32
 8002cbe:	2230      	movs	r2, #48	@ 0x30
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f01a fef2 	bl	801daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002cd8:	f003 f892 	bl	8005e00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <SystemClock_Config+0xd4>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <SystemClock_Config+0xd4>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <SystemClock_Config+0xd4>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <SystemClock_Config+0xd8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a24      	ldr	r2, [pc, #144]	@ (8002d8c <SystemClock_Config+0xd8>)
 8002cfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <SystemClock_Config+0xd8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d10:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002d14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d16:	2302      	movs	r3, #2
 8002d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d20:	2304      	movs	r3, #4
 8002d22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d24:	23d8      	movs	r3, #216	@ 0xd8
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d30:	f107 0320 	add.w	r3, r7, #32
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 f8c3 	bl	8005ec0 <HAL_RCC_OscConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002d40:	f000 f8a0 	bl	8002e84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d44:	f003 f86c 	bl	8005e20 <HAL_PWREx_EnableOverDrive>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d4e:	f000 f899 	bl	8002e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d52:	230f      	movs	r3, #15
 8002d54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d56:	2302      	movs	r3, #2
 8002d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	2107      	movs	r1, #7
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fb49 	bl	8006408 <HAL_RCC_ClockConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002d7c:	f000 f882 	bl	8002e84 <Error_Handler>
  }
}
 8002d80:	bf00      	nop
 8002d82:	3750      	adds	r7, #80	@ 0x50
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e48 <HAL_UART_RxCpltCallback+0xb8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d14d      	bne.n	8002e3e <HAL_UART_RxCpltCallback+0xae>
        if (rx_buffer[0] == '+') {
 8002da2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <HAL_UART_RxCpltCallback+0xbc>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b2b      	cmp	r3, #43	@ 0x2b
 8002da8:	d113      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x42>
            my_variable += 0.5;
 8002daa:	4b29      	ldr	r3, [pc, #164]	@ (8002e50 <HAL_UART_RxCpltCallback+0xc0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fbfa 	bl	80005a8 <__aeabi_f2d>
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	4b26      	ldr	r3, [pc, #152]	@ (8002e54 <HAL_UART_RxCpltCallback+0xc4>)
 8002dba:	f7fd fa97 	bl	80002ec <__adddf3>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f7fd ff1f 	bl	8000c08 <__aeabi_d2f>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_UART_RxCpltCallback+0xc0>)
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e016      	b.n	8002e00 <HAL_UART_RxCpltCallback+0x70>
        } else if (rx_buffer[0] == '-') {
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_UART_RxCpltCallback+0xbc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b2d      	cmp	r3, #45	@ 0x2d
 8002dd8:	d112      	bne.n	8002e00 <HAL_UART_RxCpltCallback+0x70>
            my_variable -= 0.5;
 8002dda:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_UART_RxCpltCallback+0xc0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd fbe2 	bl	80005a8 <__aeabi_f2d>
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_UART_RxCpltCallback+0xc4>)
 8002dea:	f7fd fa7d 	bl	80002e8 <__aeabi_dsub>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7fd ff07 	bl	8000c08 <__aeabi_d2f>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_UART_RxCpltCallback+0xc0>)
 8002dfe:	6013      	str	r3, [r2, #0]
        }

        // Wysyłanie aktualnej wartości
        char response[20];
        sprintf(response, "%.2f\n", my_variable);
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_UART_RxCpltCallback+0xc0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fbcf 	bl	80005a8 <__aeabi_f2d>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	f107 000c 	add.w	r0, r7, #12
 8002e12:	4911      	ldr	r1, [pc, #68]	@ (8002e58 <HAL_UART_RxCpltCallback+0xc8>)
 8002e14:	f01a fd28 	bl	801d868 <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fa57 	bl	80002d0 <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	f107 010c 	add.w	r1, r7, #12
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	480b      	ldr	r0, [pc, #44]	@ (8002e5c <HAL_UART_RxCpltCallback+0xcc>)
 8002e30:	f006 f97a 	bl	8009128 <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);  // Ponowne włączenie odbioru
 8002e34:	2201      	movs	r2, #1
 8002e36:	4905      	ldr	r1, [pc, #20]	@ (8002e4c <HAL_UART_RxCpltCallback+0xbc>)
 8002e38:	4808      	ldr	r0, [pc, #32]	@ (8002e5c <HAL_UART_RxCpltCallback+0xcc>)
 8002e3a:	f006 f9f8 	bl	800922e <HAL_UART_Receive_IT>
    }
}
 8002e3e:	bf00      	nop
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40004800 	.word	0x40004800
 8002e4c:	200006d0 	.word	0x200006d0
 8002e50:	20000054 	.word	0x20000054
 8002e54:	3fe00000 	.word	0x3fe00000
 8002e58:	0801fe2c 	.word	0x0801fe2c
 8002e5c:	20000828 	.word	0x20000828

08002e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e72:	f000 fd71 	bl	8003958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40001000 	.word	0x40001000

08002e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e88:	b672      	cpsid	i
}
 8002e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <Error_Handler+0x8>

08002e90 <MX_SPI4_Init>:
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002e96:	4a1c      	ldr	r2, [pc, #112]	@ (8002f08 <MX_SPI4_Init+0x78>)
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002eaa:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	4b14      	ldr	r3, [pc, #80]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	615a      	str	r2, [r3, #20]
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ebe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec2:	619a      	str	r2, [r3, #24]
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ec6:	2218      	movs	r2, #24
 8002ec8:	61da      	str	r2, [r3, #28]
 8002eca:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8002edc:	4b09      	ldr	r3, [pc, #36]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ede:	2207      	movs	r2, #7
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ee2:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee8:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eee:	4805      	ldr	r0, [pc, #20]	@ (8002f04 <MX_SPI4_Init+0x74>)
 8002ef0:	f004 f8d2 	bl	8007098 <HAL_SPI_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_SPI4_Init+0x6e>
 8002efa:	f7ff ffc3 	bl	8002e84 <Error_Handler>
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200006dc 	.word	0x200006dc
 8002f08:	40013400 	.word	0x40013400

08002f0c <HAL_SPI_MspInit>:
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	@ 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_SPI_MspInit+0x7c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d127      	bne.n	8002f7e <HAL_SPI_MspInit+0x72>
 8002f2e:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	4a16      	ldr	r2, [pc, #88]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3a:	4b14      	ldr	r3, [pc, #80]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4b11      	ldr	r3, [pc, #68]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	4a10      	ldr	r2, [pc, #64]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f4c:	f043 0310 	orr.w	r3, r3, #16
 8002f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2364      	movs	r3, #100	@ 0x64
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	2302      	movs	r3, #2
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	623b      	str	r3, [r7, #32]
 8002f6e:	2305      	movs	r3, #5
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	4805      	ldr	r0, [pc, #20]	@ (8002f90 <HAL_SPI_MspInit+0x84>)
 8002f7a:	f002 f953 	bl	8005224 <HAL_GPIO_Init>
 8002f7e:	bf00      	nop
 8002f80:	3728      	adds	r7, #40	@ 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40013400 	.word	0x40013400
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40021000 	.word	0x40021000

08002f94 <HAL_MspInit>:
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fbe:	4b08      	ldr	r3, [pc, #32]	@ (8002fe0 <HAL_MspInit+0x4c>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	603b      	str	r3, [r7, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	210f      	movs	r1, #15
 8002fce:	f06f 0001 	mvn.w	r0, #1
 8002fd2:	f000 fdbd 	bl	8003b50 <HAL_NVIC_SetPriority>
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_InitTick>:
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08e      	sub	sp, #56	@ 0x38
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff4:	4b33      	ldr	r3, [pc, #204]	@ (80030c4 <HAL_InitTick+0xe0>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	4a32      	ldr	r2, [pc, #200]	@ (80030c4 <HAL_InitTick+0xe0>)
 8002ffa:	f043 0310 	orr.w	r3, r3, #16
 8002ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003000:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <HAL_InitTick+0xe0>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f107 0210 	add.w	r2, r7, #16
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fc1c 	bl	8006854 <HAL_RCC_GetClockConfig>
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <HAL_InitTick+0x4a>
 8003026:	f003 fbed 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 800302a:	6378      	str	r0, [r7, #52]	@ 0x34
 800302c:	e004      	b.n	8003038 <HAL_InitTick+0x54>
 800302e:	f003 fbe9 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 8003032:	4603      	mov	r3, r0
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <HAL_InitTick+0xe4>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3b01      	subs	r3, #1
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <HAL_InitTick+0xe8>)
 8003048:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <HAL_InitTick+0xec>)
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4b1f      	ldr	r3, [pc, #124]	@ (80030cc <HAL_InitTick+0xe8>)
 800304e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	4a1d      	ldr	r2, [pc, #116]	@ (80030cc <HAL_InitTick+0xe8>)
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	6053      	str	r3, [r2, #4]
 800305a:	4b1c      	ldr	r3, [pc, #112]	@ (80030cc <HAL_InitTick+0xe8>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <HAL_InitTick+0xe8>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_InitTick+0xe8>)
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	4817      	ldr	r0, [pc, #92]	@ (80030cc <HAL_InitTick+0xe8>)
 800306e:	f004 ff73 	bl	8007f58 <HAL_TIM_Base_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8003078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11b      	bne.n	80030b8 <HAL_InitTick+0xd4>
 8003080:	4812      	ldr	r0, [pc, #72]	@ (80030cc <HAL_InitTick+0xe8>)
 8003082:	f004 ffc1 	bl	8008008 <HAL_TIM_Base_Start_IT>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800308c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003090:	2b00      	cmp	r3, #0
 8003092:	d111      	bne.n	80030b8 <HAL_InitTick+0xd4>
 8003094:	2036      	movs	r0, #54	@ 0x36
 8003096:	f000 fd77 	bl	8003b88 <HAL_NVIC_EnableIRQ>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d808      	bhi.n	80030b2 <HAL_InitTick+0xce>
 80030a0:	2200      	movs	r2, #0
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	2036      	movs	r0, #54	@ 0x36
 80030a6:	f000 fd53 	bl	8003b50 <HAL_NVIC_SetPriority>
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <HAL_InitTick+0xf0>)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e002      	b.n	80030b8 <HAL_InitTick+0xd4>
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80030b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030bc:	4618      	mov	r0, r3
 80030be:	3738      	adds	r7, #56	@ 0x38
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	20000740 	.word	0x20000740
 80030d0:	40001000 	.word	0x40001000
 80030d4:	2000005c 	.word	0x2000005c

080030d8 <NMI_Handler>:
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <NMI_Handler+0x4>

080030e0 <HardFault_Handler>:
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <HardFault_Handler+0x4>

080030e8 <MemManage_Handler>:
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <MemManage_Handler+0x4>

080030f0 <BusFault_Handler>:
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <BusFault_Handler+0x4>

080030f8 <UsageFault_Handler>:
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <UsageFault_Handler+0x4>

08003100 <DebugMon_Handler>:
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
 8003104:	bf00      	nop
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <USART3_IRQHandler>:
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
 8003114:	4802      	ldr	r0, [pc, #8]	@ (8003120 <USART3_IRQHandler+0x10>)
 8003116:	f006 f8cf 	bl	80092b8 <HAL_UART_IRQHandler>
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000828 	.word	0x20000828

08003124 <TIM6_DAC_IRQHandler>:
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <TIM6_DAC_IRQHandler+0x10>)
 800312a:	f005 f846 	bl	80081ba <HAL_TIM_IRQHandler>
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000740 	.word	0x20000740

08003138 <ETH_IRQHandler>:
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <ETH_IRQHandler+0x10>)
 800313e:	f001 f99d 	bl	800447c <HAL_ETH_IRQHandler>
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20005294 	.word	0x20005294

0800314c <_getpid>:
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
 8003150:	2301      	movs	r3, #1
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_kill>:
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	4b05      	ldr	r3, [pc, #20]	@ (800317c <_kill+0x20>)
 8003168:	2216      	movs	r2, #22
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	2000f678 	.word	0x2000f678

08003180 <_exit>:
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ffe5 	bl	800315c <_kill>
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <_exit+0x12>

08003196 <_read>:
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e00a      	b.n	80031be <_read+0x28>
 80031a8:	f3af 8000 	nop.w
 80031ac:	4601      	mov	r1, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60ba      	str	r2, [r7, #8]
 80031b4:	b2ca      	uxtb	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dbf0      	blt.n	80031a8 <_read+0x12>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_close>:
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	f04f 33ff 	mov.w	r3, #4294967295
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_fstat>:
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	2300      	movs	r3, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <_isatty>:
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	2301      	movs	r3, #1
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_lseek>:
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	2300      	movs	r3, #0
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <_sbrk>:
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	4a14      	ldr	r2, [pc, #80]	@ (8003294 <_sbrk+0x5c>)
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <_sbrk+0x60>)
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <_sbrk+0x64>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <_sbrk+0x22>
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <_sbrk+0x64>)
 8003256:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <_sbrk+0x68>)
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	429a      	cmp	r2, r3
 8003266:	d205      	bcs.n	8003274 <_sbrk+0x3c>
 8003268:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <_sbrk+0x6c>)
 800326a:	220c      	movs	r2, #12
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	e009      	b.n	8003288 <_sbrk+0x50>
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	4a06      	ldr	r2, [pc, #24]	@ (800329c <_sbrk+0x64>)
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4618      	mov	r0, r3
 800328a:	371c      	adds	r7, #28
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	20050000 	.word	0x20050000
 8003298:	00000400 	.word	0x00000400
 800329c:	2000078c 	.word	0x2000078c
 80032a0:	2000f688 	.word	0x2000f688
 80032a4:	2000f678 	.word	0x2000f678

080032a8 <SystemInit>:
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <SystemInit+0x20>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	4a05      	ldr	r2, [pc, #20]	@ (80032c8 <SystemInit+0x20>)
 80032b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <MX_TIM2_Init>:
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08e      	sub	sp, #56	@ 0x38
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	f107 031c 	add.w	r3, r7, #28
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	463b      	mov	r3, r7
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	615a      	str	r2, [r3, #20]
 80032fc:	619a      	str	r2, [r3, #24]
 80032fe:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003308:	226b      	movs	r2, #107	@ 0x6b
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003314:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	4b26      	ldr	r3, [pc, #152]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 800331c:	2200      	movs	r2, #0
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	4b24      	ldr	r3, [pc, #144]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
 8003326:	4823      	ldr	r0, [pc, #140]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003328:	f004 fe16 	bl	8007f58 <HAL_TIM_Base_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_TIM2_Init+0x6a>
 8003332:	f7ff fda7 	bl	8002e84 <Error_Handler>
 8003336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003340:	4619      	mov	r1, r3
 8003342:	481c      	ldr	r0, [pc, #112]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003344:	f005 f96c 	bl	8008620 <HAL_TIM_ConfigClockSource>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM2_Init+0x86>
 800334e:	f7ff fd99 	bl	8002e84 <Error_Handler>
 8003352:	4818      	ldr	r0, [pc, #96]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003354:	f004 fed0 	bl	80080f8 <HAL_TIM_PWM_Init>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0x96>
 800335e:	f7ff fd91 	bl	8002e84 <Error_Handler>
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	@ 0x24
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	4619      	mov	r1, r3
 8003370:	4810      	ldr	r0, [pc, #64]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003372:	f005 fddf 	bl	8008f34 <HAL_TIMEx_MasterConfigSynchronization>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM2_Init+0xb4>
 800337c:	f7ff fd82 	bl	8002e84 <Error_Handler>
 8003380:	2360      	movs	r3, #96	@ 0x60
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	463b      	mov	r3, r7
 8003392:	220c      	movs	r2, #12
 8003394:	4619      	mov	r1, r3
 8003396:	4807      	ldr	r0, [pc, #28]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 8003398:	f005 f82e 	bl	80083f8 <HAL_TIM_PWM_ConfigChannel>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_TIM2_Init+0xda>
 80033a2:	f7ff fd6f 	bl	8002e84 <Error_Handler>
 80033a6:	4803      	ldr	r0, [pc, #12]	@ (80033b4 <MX_TIM2_Init+0xe8>)
 80033a8:	f000 f870 	bl	800348c <HAL_TIM_MspPostInit>
 80033ac:	bf00      	nop
 80033ae:	3738      	adds	r7, #56	@ 0x38
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000790 	.word	0x20000790

080033b8 <MX_TIM7_Init>:
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	1d3b      	adds	r3, r7, #4
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <MX_TIM7_Init+0x6c>)
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033d0:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
 80033ea:	480d      	ldr	r0, [pc, #52]	@ (8003420 <MX_TIM7_Init+0x68>)
 80033ec:	f004 fdb4 	bl	8007f58 <HAL_TIM_Base_Init>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <MX_TIM7_Init+0x42>
 80033f6:	f7ff fd45 	bl	8002e84 <Error_Handler>
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4806      	ldr	r0, [pc, #24]	@ (8003420 <MX_TIM7_Init+0x68>)
 8003408:	f005 fd94 	bl	8008f34 <HAL_TIMEx_MasterConfigSynchronization>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM7_Init+0x5e>
 8003412:	f7ff fd37 	bl	8002e84 <Error_Handler>
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200007dc 	.word	0x200007dc
 8003424:	40001400 	.word	0x40001400

08003428 <HAL_TIM_Base_MspInit>:
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d10c      	bne.n	8003454 <HAL_TIM_Base_MspInit+0x2c>
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	4a11      	ldr	r2, [pc, #68]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6413      	str	r3, [r2, #64]	@ 0x40
 8003446:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	e010      	b.n	8003476 <HAL_TIM_Base_MspInit+0x4e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a0b      	ldr	r2, [pc, #44]	@ (8003488 <HAL_TIM_Base_MspInit+0x60>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10b      	bne.n	8003476 <HAL_TIM_Base_MspInit+0x4e>
 800345e:	4b09      	ldr	r3, [pc, #36]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	4a08      	ldr	r2, [pc, #32]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 8003464:	f043 0320 	orr.w	r3, r3, #32
 8003468:	6413      	str	r3, [r2, #64]	@ 0x40
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_TIM_Base_MspInit+0x5c>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	40001400 	.word	0x40001400

0800348c <HAL_TIM_MspPostInit>:
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_MspPostInit+0x5a>
 80034ae:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	4a0f      	ldr	r2, [pc, #60]	@ (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <HAL_TIM_MspPostInit+0x64>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2308      	movs	r3, #8
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	2302      	movs	r3, #2
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	2301      	movs	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4619      	mov	r1, r3
 80034e0:	4804      	ldr	r0, [pc, #16]	@ (80034f4 <HAL_TIM_MspPostInit+0x68>)
 80034e2:	f001 fe9f 	bl	8005224 <HAL_GPIO_Init>
 80034e6:	bf00      	nop
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <MX_USART3_UART_Init>:
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 80034fe:	4a15      	ldr	r2, [pc, #84]	@ (8003554 <MX_USART3_UART_Init+0x5c>)
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 800351e:	220c      	movs	r2, #12
 8003520:	615a      	str	r2, [r3, #20]
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003524:	2200      	movs	r2, #0
 8003526:	619a      	str	r2, [r3, #24]
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
 800352e:	4b08      	ldr	r3, [pc, #32]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	@ 0x24
 800353a:	4805      	ldr	r0, [pc, #20]	@ (8003550 <MX_USART3_UART_Init+0x58>)
 800353c:	f005 fda6 	bl	800908c <HAL_UART_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_USART3_UART_Init+0x52>
 8003546:	f7ff fc9d 	bl	8002e84 <Error_Handler>
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000828 	.word	0x20000828
 8003554:	40004800 	.word	0x40004800

08003558 <HAL_UART_MspInit>:
 8003558:	b580      	push	{r7, lr}
 800355a:	b0aa      	sub	sp, #168	@ 0xa8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	60da      	str	r2, [r3, #12]
 800356e:	611a      	str	r2, [r3, #16]
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	2284      	movs	r2, #132	@ 0x84
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f01a fa97 	bl	801daac <memset>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a26      	ldr	r2, [pc, #152]	@ (800361c <HAL_UART_MspInit+0xc4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d144      	bne.n	8003612 <HAL_UART_MspInit+0xba>
 8003588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	2300      	movs	r3, #0
 8003590:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003592:	f107 0310 	add.w	r3, r7, #16
 8003596:	4618      	mov	r0, r3
 8003598:	f003 f98e 	bl	80068b8 <HAL_RCCEx_PeriphCLKConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_UART_MspInit+0x4e>
 80035a2:	f7ff fc6f 	bl	8002e84 <Error_Handler>
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_UART_MspInit+0xc8>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80035da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035ea:	2303      	movs	r3, #3
 80035ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035f0:	2307      	movs	r3, #7
 80035f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80035f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80035fa:	4619      	mov	r1, r3
 80035fc:	4809      	ldr	r0, [pc, #36]	@ (8003624 <HAL_UART_MspInit+0xcc>)
 80035fe:	f001 fe11 	bl	8005224 <HAL_GPIO_Init>
 8003602:	2200      	movs	r2, #0
 8003604:	2105      	movs	r1, #5
 8003606:	2027      	movs	r0, #39	@ 0x27
 8003608:	f000 faa2 	bl	8003b50 <HAL_NVIC_SetPriority>
 800360c:	2027      	movs	r0, #39	@ 0x27
 800360e:	f000 fabb 	bl	8003b88 <HAL_NVIC_EnableIRQ>
 8003612:	bf00      	nop
 8003614:	37a8      	adds	r7, #168	@ 0xa8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40004800 	.word	0x40004800
 8003620:	40023800 	.word	0x40023800
 8003624:	40020c00 	.word	0x40020c00

08003628 <Reset_Handler>:
 8003628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003660 <LoopFillZerobss+0x12>
 800362c:	480d      	ldr	r0, [pc, #52]	@ (8003664 <LoopFillZerobss+0x16>)
 800362e:	490e      	ldr	r1, [pc, #56]	@ (8003668 <LoopFillZerobss+0x1a>)
 8003630:	4a0e      	ldr	r2, [pc, #56]	@ (800366c <LoopFillZerobss+0x1e>)
 8003632:	2300      	movs	r3, #0
 8003634:	e002      	b.n	800363c <LoopCopyDataInit>

08003636 <CopyDataInit>:
 8003636:	58d4      	ldr	r4, [r2, r3]
 8003638:	50c4      	str	r4, [r0, r3]
 800363a:	3304      	adds	r3, #4

0800363c <LoopCopyDataInit>:
 800363c:	18c4      	adds	r4, r0, r3
 800363e:	428c      	cmp	r4, r1
 8003640:	d3f9      	bcc.n	8003636 <CopyDataInit>
 8003642:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <LoopFillZerobss+0x22>)
 8003644:	4c0b      	ldr	r4, [pc, #44]	@ (8003674 <LoopFillZerobss+0x26>)
 8003646:	2300      	movs	r3, #0
 8003648:	e001      	b.n	800364e <LoopFillZerobss>

0800364a <FillZerobss>:
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	3204      	adds	r2, #4

0800364e <LoopFillZerobss>:
 800364e:	42a2      	cmp	r2, r4
 8003650:	d3fb      	bcc.n	800364a <FillZerobss>
 8003652:	f7ff fe29 	bl	80032a8 <SystemInit>
 8003656:	f01a faf1 	bl	801dc3c <__libc_init_array>
 800365a:	f7ff fa5b 	bl	8002b14 <main>
 800365e:	4770      	bx	lr
 8003660:	20050000 	.word	0x20050000
 8003664:	20000000 	.word	0x20000000
 8003668:	20000250 	.word	0x20000250
 800366c:	080247b4 	.word	0x080247b4
 8003670:	20000390 	.word	0x20000390
 8003674:	2000f688 	.word	0x2000f688

08003678 <ADC_IRQHandler>:
 8003678:	e7fe      	b.n	8003678 <ADC_IRQHandler>

0800367a <LAN8742_RegisterBusIO>:
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <LAN8742_RegisterBusIO+0x28>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d007      	beq.n	80036a2 <LAN8742_RegisterBusIO+0x28>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <LAN8742_RegisterBusIO+0x28>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <LAN8742_RegisterBusIO+0x2e>
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	e014      	b.n	80036d2 <LAN8742_RegisterBusIO+0x58>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	615a      	str	r2, [r3, #20]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	611a      	str	r2, [r3, #16]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
 80036d0:	2300      	movs	r3, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <LAN8742_Init>:
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d17c      	bne.n	80037f8 <LAN8742_Init+0x11a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <LAN8742_Init+0x2e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4798      	blx	r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e01c      	b.n	8003752 <LAN8742_Init+0x74>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f107 0208 	add.w	r2, r7, #8
 8003720:	2112      	movs	r1, #18
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	4798      	blx	r3
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	da03      	bge.n	8003734 <LAN8742_Init+0x56>
 800372c:	f06f 0304 	mvn.w	r3, #4
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e00b      	b.n	800374c <LAN8742_Init+0x6e>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d105      	bne.n	800374c <LAN8742_Init+0x6e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e005      	b.n	8003758 <LAN8742_Init+0x7a>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3301      	adds	r3, #1
 8003750:	617b      	str	r3, [r7, #20]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b1f      	cmp	r3, #31
 8003756:	d9df      	bls.n	8003718 <LAN8742_Init+0x3a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b1f      	cmp	r3, #31
 800375e:	d902      	bls.n	8003766 <LAN8742_Init+0x88>
 8003760:	f06f 0302 	mvn.w	r3, #2
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d145      	bne.n	80037f8 <LAN8742_Init+0x11a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6810      	ldr	r0, [r2, #0]
 8003774:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003778:	2100      	movs	r1, #0
 800377a:	4798      	blx	r3
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	db37      	blt.n	80037f2 <LAN8742_Init+0x114>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6810      	ldr	r0, [r2, #0]
 800378a:	f107 0208 	add.w	r2, r7, #8
 800378e:	2100      	movs	r1, #0
 8003790:	4798      	blx	r3
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	db28      	blt.n	80037ea <LAN8742_Init+0x10c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4798      	blx	r3
 800379e:	4603      	mov	r3, r0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e01c      	b.n	80037de <LAN8742_Init+0x100>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	4798      	blx	r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037b6:	d80e      	bhi.n	80037d6 <LAN8742_Init+0xf8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6810      	ldr	r0, [r2, #0]
 80037c0:	f107 0208 	add.w	r2, r7, #8
 80037c4:	2100      	movs	r1, #0
 80037c6:	4798      	blx	r3
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	da07      	bge.n	80037de <LAN8742_Init+0x100>
 80037ce:	f06f 0304 	mvn.w	r3, #4
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e010      	b.n	80037f8 <LAN8742_Init+0x11a>
 80037d6:	f06f 0301 	mvn.w	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e00c      	b.n	80037f8 <LAN8742_Init+0x11a>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1dd      	bne.n	80037a4 <LAN8742_Init+0xc6>
 80037e8:	e006      	b.n	80037f8 <LAN8742_Init+0x11a>
 80037ea:	f06f 0304 	mvn.w	r3, #4
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	e002      	b.n	80037f8 <LAN8742_Init+0x11a>
 80037f2:	f06f 0303 	mvn.w	r3, #3
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d112      	bne.n	8003824 <LAN8742_Init+0x146>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	4798      	blx	r3
 8003804:	4603      	mov	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	bf00      	nop
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4798      	blx	r3
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800381c:	d9f5      	bls.n	800380a <LAN8742_Init+0x12c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <LAN8742_GetLinkState>:
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6810      	ldr	r0, [r2, #0]
 8003842:	f107 020c 	add.w	r2, r7, #12
 8003846:	2101      	movs	r1, #1
 8003848:	4798      	blx	r3
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	da02      	bge.n	8003856 <LAN8742_GetLinkState+0x28>
 8003850:	f06f 0304 	mvn.w	r3, #4
 8003854:	e06e      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6810      	ldr	r0, [r2, #0]
 800385e:	f107 020c 	add.w	r2, r7, #12
 8003862:	2101      	movs	r1, #1
 8003864:	4798      	blx	r3
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	da02      	bge.n	8003872 <LAN8742_GetLinkState+0x44>
 800386c:	f06f 0304 	mvn.w	r3, #4
 8003870:	e060      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <LAN8742_GetLinkState+0x52>
 800387c:	2301      	movs	r3, #1
 800387e:	e059      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6810      	ldr	r0, [r2, #0]
 8003888:	f107 020c 	add.w	r2, r7, #12
 800388c:	2100      	movs	r1, #0
 800388e:	4798      	blx	r3
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	da02      	bge.n	800389c <LAN8742_GetLinkState+0x6e>
 8003896:	f06f 0304 	mvn.w	r3, #4
 800389a:	e04b      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11b      	bne.n	80038de <LAN8742_GetLinkState+0xb0>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <LAN8742_GetLinkState+0x90>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <LAN8742_GetLinkState+0x90>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e03a      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <LAN8742_GetLinkState+0x9e>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e033      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <LAN8742_GetLinkState+0xac>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e02c      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 80038da:	2305      	movs	r3, #5
 80038dc:	e02a      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6810      	ldr	r0, [r2, #0]
 80038e6:	f107 020c 	add.w	r2, r7, #12
 80038ea:	211f      	movs	r1, #31
 80038ec:	4798      	blx	r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da02      	bge.n	80038fa <LAN8742_GetLinkState+0xcc>
 80038f4:	f06f 0304 	mvn.w	r3, #4
 80038f8:	e01c      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <LAN8742_GetLinkState+0xda>
 8003904:	2306      	movs	r3, #6
 8003906:	e015      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 031c 	and.w	r3, r3, #28
 800390e:	2b18      	cmp	r3, #24
 8003910:	d101      	bne.n	8003916 <LAN8742_GetLinkState+0xe8>
 8003912:	2302      	movs	r3, #2
 8003914:	e00e      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 031c 	and.w	r3, r3, #28
 800391c:	2b08      	cmp	r3, #8
 800391e:	d101      	bne.n	8003924 <LAN8742_GetLinkState+0xf6>
 8003920:	2303      	movs	r3, #3
 8003922:	e007      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 031c 	and.w	r3, r3, #28
 800392a:	2b14      	cmp	r3, #20
 800392c:	d101      	bne.n	8003932 <LAN8742_GetLinkState+0x104>
 800392e:	2304      	movs	r3, #4
 8003930:	e000      	b.n	8003934 <LAN8742_GetLinkState+0x106>
 8003932:	2305      	movs	r3, #5
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_Init>:
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
 8003940:	2003      	movs	r0, #3
 8003942:	f000 f8fa 	bl	8003b3a <HAL_NVIC_SetPriorityGrouping>
 8003946:	200f      	movs	r0, #15
 8003948:	f7ff fb4c 	bl	8002fe4 <HAL_InitTick>
 800394c:	f7ff fb22 	bl	8002f94 <HAL_MspInit>
 8003950:	2300      	movs	r3, #0
 8003952:	4618      	mov	r0, r3
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_IncTick>:
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
 800395c:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_IncTick+0x20>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_IncTick+0x24>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4413      	add	r3, r2
 8003968:	4a04      	ldr	r2, [pc, #16]	@ (800397c <HAL_IncTick+0x24>)
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000060 	.word	0x20000060
 800397c:	200008b0 	.word	0x200008b0

08003980 <HAL_GetTick>:
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <HAL_GetTick+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	200008b0 	.word	0x200008b0

08003998 <HAL_Delay>:
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	f7ff ffee 	bl	8003980 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d005      	beq.n	80039be <HAL_Delay+0x26>
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <HAL_Delay+0x44>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	bf00      	nop
 80039c0:	f7ff ffde 	bl	8003980 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d8f7      	bhi.n	80039c0 <HAL_Delay+0x28>
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000060 	.word	0x20000060

080039e0 <__NVIC_SetPriorityGrouping>:
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <__NVIC_SetPriorityGrouping+0x40>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <__NVIC_SetPriorityGrouping+0x40>)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	60d3      	str	r3, [r2, #12]
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	05fa0000 	.word	0x05fa0000

08003a28 <__NVIC_GetPriorityGrouping>:
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <__NVIC_GetPriorityGrouping+0x18>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_EnableIRQ>:
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0b      	blt.n	8003a6e <__NVIC_EnableIRQ+0x2a>
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4907      	ldr	r1, [pc, #28]	@ (8003a7c <__NVIC_EnableIRQ+0x38>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e100 	.word	0xe000e100

08003a80 <__NVIC_SetPriority>:
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	db0a      	blt.n	8003aaa <__NVIC_SetPriority+0x2a>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	490c      	ldr	r1, [pc, #48]	@ (8003acc <__NVIC_SetPriority+0x4c>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	0112      	lsls	r2, r2, #4
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8003aa8:	e00a      	b.n	8003ac0 <__NVIC_SetPriority+0x40>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4908      	ldr	r1, [pc, #32]	@ (8003ad0 <__NVIC_SetPriority+0x50>)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	3b04      	subs	r3, #4
 8003ab8:	0112      	lsls	r2, r2, #4
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	440b      	add	r3, r1
 8003abe:	761a      	strb	r2, [r3, #24]
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <NVIC_EncodePriority>:
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	@ 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	bf28      	it	cs
 8003af2:	2304      	movcs	r3, #4
 8003af4:	61bb      	str	r3, [r7, #24]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d902      	bls.n	8003b04 <NVIC_EncodePriority+0x30>
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3b03      	subs	r3, #3
 8003b02:	e000      	b.n	8003b06 <NVIC_EncodePriority+0x32>
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43da      	mvns	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	401a      	ands	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	43d9      	mvns	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_NVIC_SetPriorityGrouping>:
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ff4c 	bl	80039e0 <__NVIC_SetPriorityGrouping>
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_NVIC_SetPriority>:
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	f7ff ff61 	bl	8003a28 <__NVIC_GetPriorityGrouping>
 8003b66:	6178      	str	r0, [r7, #20]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	6978      	ldr	r0, [r7, #20]
 8003b6e:	f7ff ffb1 	bl	8003ad4 <NVIC_EncodePriority>
 8003b72:	4602      	mov	r2, r0
 8003b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff80 	bl	8003a80 <__NVIC_SetPriority>
 8003b80:	bf00      	nop
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_NVIC_EnableIRQ>:
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff54 	bl	8003a44 <__NVIC_EnableIRQ>
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_DMA_Abort>:
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	f7ff fee5 	bl	8003980 <HAL_GetTick>
 8003bb6:	60b8      	str	r0, [r7, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d008      	beq.n	8003bd6 <HAL_DMA_Abort+0x32>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e052      	b.n	8003c7c <HAL_DMA_Abort+0xd8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0216 	bic.w	r2, r2, #22
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bf4:	615a      	str	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_DMA_Abort+0x62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_DMA_Abort+0x72>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0208 	bic.w	r2, r2, #8
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e013      	b.n	8003c50 <HAL_DMA_Abort+0xac>
 8003c28:	f7ff feaa 	bl	8003980 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d90c      	bls.n	8003c50 <HAL_DMA_Abort+0xac>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e015      	b.n	8003c7c <HAL_DMA_Abort+0xd8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e4      	bne.n	8003c28 <HAL_DMA_Abort+0x84>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c62:	223f      	movs	r2, #63	@ 0x3f
 8003c64:	409a      	lsls	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_DMA_Abort_IT>:
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x1e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	@ 0x80
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e00c      	b.n	8003cbc <HAL_DMA_Abort_IT+0x38>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0201 	bic.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_ETH_Init>:
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_ETH_Init+0x12>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e06a      	b.n	8003db0 <HAL_ETH_Init+0xe8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <HAL_ETH_Init+0x2a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2223      	movs	r2, #35	@ 0x23
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f007 f8c1 	bl	800ae74 <HAL_ETH_MspInit>
 8003cf2:	4b31      	ldr	r3, [pc, #196]	@ (8003db8 <HAL_ETH_Init+0xf0>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	4a30      	ldr	r2, [pc, #192]	@ (8003db8 <HAL_ETH_Init+0xf0>)
 8003cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8003db8 <HAL_ETH_Init+0xf0>)
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003dbc <HAL_ETH_Init+0xf4>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <HAL_ETH_Init+0xf4>)
 8003d10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d14:	6053      	str	r3, [r2, #4]
 8003d16:	4b29      	ldr	r3, [pc, #164]	@ (8003dbc <HAL_ETH_Init+0xf4>)
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4927      	ldr	r1, [pc, #156]	@ (8003dbc <HAL_ETH_Init+0xf4>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_ETH_Init+0xf4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	f7ff fe1e 	bl	8003980 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	e011      	b.n	8003d6c <HAL_ETH_Init+0xa4>
 8003d48:	f7ff fe1a 	bl	8003980 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d56:	d909      	bls.n	8003d6c <HAL_ETH_Init+0xa4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	22e0      	movs	r2, #224	@ 0xe0
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e021      	b.n	8003db0 <HAL_ETH_Init+0xe8>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e4      	bne.n	8003d48 <HAL_ETH_Init+0x80>
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 ffac 	bl	8004cdc <ETH_MACDMAConfig>
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f001 f853 	bl	8004e30 <ETH_DMATxDescListInit>
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 f8a9 	bl	8004ee2 <ETH_DMARxDescListInit>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	461a      	mov	r2, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f001 f811 	bl	8004dc0 <ETH_MACAddressConfig>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2210      	movs	r2, #16
 8003daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003dae:	2300      	movs	r3, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800

08003dc0 <HAL_ETH_Start>:
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d150      	bne.n	8003e74 <HAL_ETH_Start+0xb4>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2223      	movs	r2, #35	@ 0x23
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa7b 	bl	80042dc <ETH_UpdateDescriptor>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0208 	orr.w	r2, r2, #8
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7ff fdca 	bl	8003998 <HAL_Delay>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0204 	orr.w	r2, r2, #4
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	2001      	movs	r0, #1
 8003e26:	f7ff fdb7 	bl	8003998 <HAL_Delay>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fdf3 	bl	8004a1e <ETH_FlushTransmitFIFO>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e4e:	6193      	str	r3, [r2, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	f043 0302 	orr.w	r3, r3, #2
 8003e62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e66:	6193      	str	r3, [r2, #24]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2223      	movs	r2, #35	@ 0x23
 8003e6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003e70:	2300      	movs	r3, #0
 8003e72:	e000      	b.n	8003e76 <HAL_ETH_Start+0xb6>
 8003e74:	2301      	movs	r3, #1
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_ETH_Start_IT>:
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d17b      	bne.n	8003f8a <HAL_ETH_Start_IT+0x10a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2223      	movs	r2, #35	@ 0x23
 8003e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003eae:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b35      	ldr	r3, [pc, #212]	@ (8003f94 <HAL_ETH_Start_IT+0x114>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003ed4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2204      	movs	r2, #4
 8003edc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9fc 	bl	80042dc <ETH_UpdateDescriptor>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	2001      	movs	r0, #1
 8003efe:	f7ff fd4b 	bl	8003998 <HAL_Delay>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0204 	orr.w	r2, r2, #4
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff fd38 	bl	8003998 <HAL_Delay>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fd74 	bl	8004a1e <ETH_FlushTransmitFIFO>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003f48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f4c:	6193      	str	r3, [r2, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f64:	6193      	str	r3, [r2, #24]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f6e:	69d9      	ldr	r1, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b08      	ldr	r3, [pc, #32]	@ (8003f98 <HAL_ETH_Start_IT+0x118>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f7c:	61d3      	str	r3, [r2, #28]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2223      	movs	r2, #35	@ 0x23
 8003f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003f86:	2300      	movs	r3, #0
 8003f88:	e000      	b.n	8003f8c <HAL_ETH_Start_IT+0x10c>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	00020060 	.word	0x00020060
 8003f98:	0001a0c1 	.word	0x0001a0c1

08003f9c <HAL_ETH_Stop_IT>:
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003faa:	2b23      	cmp	r3, #35	@ 0x23
 8003fac:	d16e      	bne.n	800408c <HAL_ETH_Stop_IT+0xf0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2223      	movs	r2, #35	@ 0x23
 8003fb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b34      	ldr	r3, [pc, #208]	@ (8004098 <HAL_ETH_Stop_IT+0xfc>)
 8003fc6:	400b      	ands	r3, r1
 8003fc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fcc:	61d3      	str	r3, [r2, #28]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fe4:	6193      	str	r3, [r2, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6812      	ldr	r2, [r2, #0]
 8003ff4:	f023 0302 	bic.w	r3, r3, #2
 8003ff8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ffc:	6193      	str	r3, [r2, #24]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0204 	bic.w	r2, r2, #4
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	2001      	movs	r0, #1
 8004018:	f7ff fcbe 	bl	8003998 <HAL_Delay>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fcfa 	bl	8004a1e <ETH_FlushTransmitFIFO>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0208 	bic.w	r2, r2, #8
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	2001      	movs	r0, #1
 8004044:	f7ff fca8 	bl	8003998 <HAL_Delay>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e00e      	b.n	8004074 <HAL_ETH_Stop_IT+0xd8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	3212      	adds	r2, #18
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	3301      	adds	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d9ed      	bls.n	8004056 <HAL_ETH_Stop_IT+0xba>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2210      	movs	r2, #16
 8004084:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_ETH_Stop_IT+0xf2>
 800408c:	2301      	movs	r3, #1
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	fffe5f3e 	.word	0xfffe5f3e

0800409c <HAL_ETH_Transmit_IT>:
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <HAL_ETH_Transmit_IT+0x24>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80040bc:	2301      	movs	r3, #1
 80040be:	e045      	b.n	800414c <HAL_ETH_Transmit_IT+0xb0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040c6:	2b23      	cmp	r3, #35	@ 0x23
 80040c8:	d13f      	bne.n	800414a <HAL_ETH_Transmit_IT+0xae>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040d2:	2201      	movs	r2, #1
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 ff70 	bl	8004fbc <ETH_Prepare_Tx_Descriptors>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_ETH_Transmit_IT+0x5a>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f043 0202 	orr.w	r2, r3, #2
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80040f2:	2301      	movs	r3, #1
 80040f4:	e02a      	b.n	800414c <HAL_ETH_Transmit_IT+0xb0>
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	bf00      	nop
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	629a      	str	r2, [r3, #40]	@ 0x28
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	2b03      	cmp	r3, #3
 800410c:	d904      	bls.n	8004118 <HAL_ETH_Transmit_IT+0x7c>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004112:	1f1a      	subs	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_ETH_Transmit_IT+0xaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004132:	461a      	mov	r2, r3
 8004134:	2304      	movs	r3, #4
 8004136:	6153      	str	r3, [r2, #20]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004140:	461a      	mov	r2, r3
 8004142:	2300      	movs	r3, #0
 8004144:	6053      	str	r3, [r2, #4]
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <HAL_ETH_Transmit_IT+0xb0>
 800414a:	2301      	movs	r3, #1
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_ETH_ReadData>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_ETH_ReadData+0x2c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800417c:	2301      	movs	r3, #1
 800417e:	e0a8      	b.n	80042d2 <HAL_ETH_ReadData+0x17e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004186:	2b23      	cmp	r3, #35	@ 0x23
 8004188:	d001      	beq.n	800418e <HAL_ETH_ReadData+0x3a>
 800418a:	2301      	movs	r3, #1
 800418c:	e0a1      	b.n	80042d2 <HAL_ETH_ReadData+0x17e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	3212      	adds	r2, #18
 800419a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a4:	f1c3 0304 	rsb	r3, r3, #4
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	e06a      	b.n	8004282 <HAL_ETH_ReadData+0x12e>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <HAL_ETH_ReadData+0x74>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	699a      	ldr	r2, [r3, #24]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	679a      	str	r2, [r3, #120]	@ 0x78
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <HAL_ETH_ReadData+0x88>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d040      	beq.n	800425e <HAL_ETH_ReadData+0x10a>
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <HAL_ETH_ReadData+0xa0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	661a      	str	r2, [r3, #96]	@ 0x60
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	665a      	str	r2, [r3, #100]	@ 0x64
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00c      	beq.n	8004220 <HAL_ETH_ReadData+0xcc>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004210:	3b04      	subs	r3, #4
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	671a      	str	r2, [r3, #112]	@ 0x70
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	621a      	str	r2, [r3, #32]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	461a      	mov	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	b29b      	uxth	r3, r3
 800423e:	f006 ffe5 	bl	800b20c <HAL_ETH_RxLinkCallback>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	661a      	str	r2, [r3, #96]	@ 0x60
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	441a      	add	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	665a      	str	r2, [r3, #100]	@ 0x64
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2200      	movs	r2, #0
 800425c:	621a      	str	r2, [r3, #32]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3301      	adds	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d902      	bls.n	8004270 <HAL_ETH_ReadData+0x11c>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b04      	subs	r3, #4
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	3212      	adds	r2, #18
 8004276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3301      	adds	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db06      	blt.n	8004298 <HAL_ETH_ReadData+0x144>
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d202      	bcs.n	8004298 <HAL_ETH_ReadData+0x144>
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d089      	beq.n	80041ac <HAL_ETH_ReadData+0x58>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	441a      	add	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_ETH_ReadData+0x15e>
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f815 	bl	80042dc <ETH_UpdateDescriptor>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d108      	bne.n	80042d0 <HAL_ETH_ReadData+0x17c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80042cc:	2300      	movs	r3, #0
 80042ce:	e000      	b.n	80042d2 <HAL_ETH_ReadData+0x17e>
 80042d0:	2301      	movs	r3, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <ETH_UpdateDescriptor>:
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	2301      	movs	r3, #1
 80042ea:	74fb      	strb	r3, [r7, #19]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	3212      	adds	r2, #18
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e040      	b.n	8004388 <ETH_UpdateDescriptor+0xac>
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d112      	bne.n	8004334 <ETH_UpdateDescriptor+0x58>
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	4618      	mov	r0, r3
 8004314:	f006 ff4a 	bl	800b1ac <HAL_ETH_RxAllocateCallback>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <ETH_UpdateDescriptor+0x48>
 800431e:	2300      	movs	r3, #0
 8004320:	74fb      	strb	r3, [r7, #19]
 8004322:	e007      	b.n	8004334 <ETH_UpdateDescriptor+0x58>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	461a      	mov	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d026      	beq.n	8004388 <ETH_UpdateDescriptor+0xac>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <ETH_UpdateDescriptor+0x6e>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4a1e      	ldr	r2, [pc, #120]	@ (80043c0 <ETH_UpdateDescriptor+0xe4>)
 8004346:	605a      	str	r2, [r3, #4]
 8004348:	e003      	b.n	8004352 <ETH_UpdateDescriptor+0x76>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	f3bf 8f5f 	dmb	sy
 8004356:	bf00      	nop
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	3301      	adds	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	2b03      	cmp	r3, #3
 800436e:	d902      	bls.n	8004376 <ETH_UpdateDescriptor+0x9a>
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	3b04      	subs	r3, #4
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	3212      	adds	r2, #18
 800437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3b01      	subs	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <ETH_UpdateDescriptor+0xb8>
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1b8      	bne.n	8004306 <ETH_UpdateDescriptor+0x2a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	429a      	cmp	r2, r3
 800439c:	d00c      	beq.n	80043b8 <ETH_UpdateDescriptor+0xdc>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6093      	str	r3, [r2, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	669a      	str	r2, [r3, #104]	@ 0x68
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80043b8:	bf00      	nop
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	800045f8 	.word	0x800045f8

080043c4 <HAL_ETH_ReleaseTxPacket>:
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3318      	adds	r3, #24
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	e03f      	b.n	8004464 <HAL_ETH_ReleaseTxPacket+0xa0>
 80043e4:	2301      	movs	r3, #1
 80043e6:	73bb      	strb	r3, [r7, #14]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	3304      	adds	r3, #4
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_ETH_ReleaseTxPacket+0x48>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	2300      	movs	r3, #0
 800440a:	73bb      	strb	r3, [r7, #14]
 800440c:	7bbb      	ldrb	r3, [r7, #14]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d028      	beq.n	8004464 <HAL_ETH_ReleaseTxPacket+0xa0>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68d9      	ldr	r1, [r3, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	db1b      	blt.n	8004460 <HAL_ETH_ReleaseTxPacket+0x9c>
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3304      	adds	r3, #4
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f006 ff2b 	bl	800b290 <HAL_ETH_TxFreeCallback>
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	3304      	adds	r3, #4
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	3301      	adds	r3, #1
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	629a      	str	r2, [r3, #40]	@ 0x28
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800445e:	e001      	b.n	8004464 <HAL_ETH_ReleaseTxPacket+0xa0>
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_ETH_ReleaseTxPacket+0xac>
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1b9      	bne.n	80043e4 <HAL_ETH_ReleaseTxPacket+0x20>
 8004470:	2300      	movs	r3, #0
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_ETH_IRQHandler>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	d112      	bne.n	80044bc <HAL_ETH_IRQHandler+0x40>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b40      	cmp	r3, #64	@ 0x40
 80044a6:	d109      	bne.n	80044bc <HAL_ETH_IRQHandler+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <HAL_ETH_IRQHandler+0x178>)
 80044b4:	6153      	str	r3, [r2, #20]
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f006 fa40 	bl	800a93c <HAL_ETH_RxCpltCallback>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d113      	bne.n	80044f6 <HAL_ETH_IRQHandler+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10a      	bne.n	80044f6 <HAL_ETH_IRQHandler+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044e8:	461a      	mov	r2, r3
 80044ea:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80044ee:	6153      	str	r3, [r2, #20]
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f006 fa33 	bl	800a95c <HAL_ETH_TxCpltCallback>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004508:	d14c      	bne.n	80045a4 <HAL_ETH_IRQHandler+0x128>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451c:	d142      	bne.n	80045a4 <HAL_ETH_IRQHandler+0x128>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f043 0208 	orr.w	r2, r3, #8
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800453c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004540:	d11a      	bne.n	8004578 <HAL_ETH_IRQHandler+0xfc>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	4b2a      	ldr	r3, [pc, #168]	@ (80045f8 <HAL_ETH_IRQHandler+0x17c>)
 800454e:	4013      	ands	r3, r2
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004568:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800456c:	61d3      	str	r3, [r2, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	22e0      	movs	r2, #224	@ 0xe0
 8004572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004576:	e012      	b.n	800459e <HAL_ETH_IRQHandler+0x122>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004586:	4013      	ands	r3, r2
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004596:	461a      	mov	r2, r3
 8004598:	f248 6380 	movw	r3, #34432	@ 0x8680
 800459c:	6153      	str	r3, [r2, #20]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f006 f9ec 	bl	800a97c <HAL_ETH_ErrorCallback>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d10e      	bne.n	80045d0 <HAL_ETH_IRQHandler+0x154>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f81c 	bl	8004600 <HAL_ETH_PMTCallback>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80045d0:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_ETH_IRQHandler+0x180>)
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d006      	beq.n	80045ea <HAL_ETH_IRQHandler+0x16e>
 80045dc:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <HAL_ETH_IRQHandler+0x180>)
 80045de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80045e2:	615a      	str	r2, [r3, #20]
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f815 	bl	8004614 <HAL_ETH_WakeUpCallback>
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	00010040 	.word	0x00010040
 80045f8:	007e2000 	.word	0x007e2000
 80045fc:	40013c00 	.word	0x40013c00

08004600 <HAL_ETH_PMTCallback>:
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_ETH_WakeUpCallback>:
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_ETH_ReadPHYRegister>:
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 031c 	and.w	r3, r3, #28
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	02db      	lsls	r3, r3, #11
 800464a:	b29b      	uxth	r3, r3
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f023 0302 	bic.w	r3, r3, #2
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	611a      	str	r2, [r3, #16]
 8004678:	f7ff f982 	bl	8003980 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]
 800467e:	e00d      	b.n	800469c <HAL_ETH_ReadPHYRegister+0x74>
 8004680:	f7ff f97e 	bl	8003980 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468e:	d301      	bcc.n	8004694 <HAL_ETH_ReadPHYRegister+0x6c>
 8004690:	2301      	movs	r3, #1
 8004692:	e010      	b.n	80046b6 <HAL_ETH_ReadPHYRegister+0x8e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ec      	bne.n	8004680 <HAL_ETH_ReadPHYRegister+0x58>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	4618      	mov	r0, r3
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_ETH_WritePHYRegister>:
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 031c 	and.w	r3, r3, #28
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	02db      	lsls	r3, r3, #11
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	019b      	lsls	r3, r3, #6
 80046ec:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	615a      	str	r2, [r3, #20]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	611a      	str	r2, [r3, #16]
 8004718:	f7ff f932 	bl	8003980 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]
 800471e:	e00d      	b.n	800473c <HAL_ETH_WritePHYRegister+0x7e>
 8004720:	f7ff f92e 	bl	8003980 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472e:	d301      	bcc.n	8004734 <HAL_ETH_WritePHYRegister+0x76>
 8004730:	2301      	movs	r3, #1
 8004732:	e009      	b.n	8004748 <HAL_ETH_WritePHYRegister+0x8a>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1ec      	bne.n	8004720 <HAL_ETH_WritePHYRegister+0x62>
 8004746:	2300      	movs	r3, #0
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_ETH_GetMACConfig>:
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ETH_GetMACConfig+0x14>
 8004760:	2301      	movs	r3, #1
 8004762:	e0d9      	b.n	8004918 <HAL_ETH_GetMACConfig+0x1c8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	625a      	str	r2, [r3, #36]	@ 0x24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f883 2020 	strb.w	r2, [r3, #32]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	77da      	strb	r2, [r3, #31]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	779a      	strb	r2, [r3, #30]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	771a      	strb	r2, [r3, #28]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	619a      	str	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	615a      	str	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf0c      	ite	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	2300      	movne	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	745a      	strb	r2, [r3, #17]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	741a      	strb	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	73da      	strb	r2, [r3, #15]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	bf14      	ite	ne
 800487e:	2301      	movne	r3, #1
 8004880:	2300      	moveq	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	711a      	strb	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf14      	ite	ne
 8004898:	2301      	movne	r3, #1
 800489a:	2300      	moveq	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	b29a      	uxth	r2, r3
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	649a      	str	r2, [r3, #72]	@ 0x48
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 8004916:	2300      	movs	r3, #0
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_ETH_SetMACConfig>:
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_ETH_SetMACConfig+0x14>
 8004934:	2301      	movs	r3, #1
 8004936:	e00b      	b.n	8004950 <HAL_ETH_SetMACConfig+0x2c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493e:	2b10      	cmp	r3, #16
 8004940:	d105      	bne.n	800494e <HAL_ETH_SetMACConfig+0x2a>
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f88f 	bl	8004a68 <ETH_SetMACConfig>
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_ETH_SetMACConfig+0x2c>
 800494e:	2301      	movs	r3, #1
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_ETH_SetMDIOClockRange>:
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 031c 	bic.w	r3, r3, #28
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	f001 ff3c 	bl	80067ec <HAL_RCC_GetHCLKFreq>
 8004974:	60b8      	str	r0, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d908      	bls.n	8004990 <HAL_ETH_SetMDIOClockRange+0x38>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d804      	bhi.n	8004990 <HAL_ETH_SetMDIOClockRange+0x38>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f043 0308 	orr.w	r3, r3, #8
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e027      	b.n	80049e0 <HAL_ETH_SetMDIOClockRange+0x88>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d908      	bls.n	80049aa <HAL_ETH_SetMDIOClockRange+0x52>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d204      	bcs.n	80049aa <HAL_ETH_SetMDIOClockRange+0x52>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f043 030c 	orr.w	r3, r3, #12
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e01a      	b.n	80049e0 <HAL_ETH_SetMDIOClockRange+0x88>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a12      	ldr	r2, [pc, #72]	@ (80049f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d303      	bcc.n	80049ba <HAL_ETH_SetMDIOClockRange+0x62>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d911      	bls.n	80049de <HAL_ETH_SetMDIOClockRange+0x86>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4a0f      	ldr	r2, [pc, #60]	@ (80049fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d908      	bls.n	80049d4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004a00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d804      	bhi.n	80049d4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e005      	b.n	80049e0 <HAL_ETH_SetMDIOClockRange+0x88>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f043 0310 	orr.w	r3, r3, #16
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e000      	b.n	80049e0 <HAL_ETH_SetMDIOClockRange+0x88>
 80049de:	bf00      	nop
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	611a      	str	r2, [r3, #16]
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	01312cff 	.word	0x01312cff
 80049f4:	02160ebf 	.word	0x02160ebf
 80049f8:	03938700 	.word	0x03938700
 80049fc:	05f5e0ff 	.word	0x05f5e0ff
 8004a00:	08f0d17f 	.word	0x08f0d17f

08004a04 <HAL_ETH_GetDMAError>:
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <ETH_FlushTransmitFIFO>:
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a40:	6193      	str	r3, [r2, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f7fe ffa2 	bl	8003998 <HAL_Delay>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a5e:	6193      	str	r3, [r2, #24]
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <ETH_SetMACConfig>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4b51      	ldr	r3, [pc, #324]	@ (8004bc4 <ETH_SetMACConfig+0x15c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	7c1b      	ldrb	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <ETH_SetMACConfig+0x28>
 8004a8a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a8e:	e000      	b.n	8004a92 <ETH_SetMACConfig+0x2a>
 8004a90:	2200      	movs	r2, #0
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	7c5b      	ldrb	r3, [r3, #17]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <ETH_SetMACConfig+0x38>
 8004a9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a9e:	e000      	b.n	8004aa2 <ETH_SetMACConfig+0x3a>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	7fdb      	ldrb	r3, [r3, #31]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	7f92      	ldrb	r2, [r2, #30]
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	d102      	bne.n	8004ac6 <ETH_SetMACConfig+0x5e>
 8004ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ac4:	e000      	b.n	8004ac8 <ETH_SetMACConfig+0x60>
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	7f1b      	ldrb	r3, [r3, #28]
 8004ace:	031b      	lsls	r3, r3, #12
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ae6:	2a00      	cmp	r2, #0
 8004ae8:	d102      	bne.n	8004af0 <ETH_SetMACConfig+0x88>
 8004aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aee:	e000      	b.n	8004af2 <ETH_SetMACConfig+0x8a>
 8004af0:	2200      	movs	r2, #0
 8004af2:	431a      	orrs	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	7bdb      	ldrb	r3, [r3, #15]
 8004af8:	01db      	lsls	r3, r3, #7
 8004afa:	431a      	orrs	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7fe ff38 	bl	8003998 <HAL_Delay>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004b3e:	4013      	ands	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d101      	bne.n	8004b56 <ETH_SetMACConfig+0xee>
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	e000      	b.n	8004b58 <ETH_SetMACConfig+0xf0>
 8004b56:	2200      	movs	r2, #0
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004b66:	2a01      	cmp	r2, #1
 8004b68:	d101      	bne.n	8004b6e <ETH_SetMACConfig+0x106>
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	e000      	b.n	8004b70 <ETH_SetMACConfig+0x108>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	4313      	orrs	r3, r2
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004b78:	2a01      	cmp	r2, #1
 8004b7a:	d101      	bne.n	8004b80 <ETH_SetMACConfig+0x118>
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	e000      	b.n	8004b82 <ETH_SetMACConfig+0x11a>
 8004b80:	2200      	movs	r2, #0
 8004b82:	4313      	orrs	r3, r2
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004b8a:	2a01      	cmp	r2, #1
 8004b8c:	d101      	bne.n	8004b92 <ETH_SetMACConfig+0x12a>
 8004b8e:	2202      	movs	r2, #2
 8004b90:	e000      	b.n	8004b94 <ETH_SetMACConfig+0x12c>
 8004b92:	2200      	movs	r2, #0
 8004b94:	4313      	orrs	r3, r2
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	619a      	str	r2, [r3, #24]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	2001      	movs	r0, #1
 8004bae:	f7fe fef3 	bl	8003998 <HAL_Delay>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	619a      	str	r2, [r3, #24]
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	ff20810f 	.word	0xff20810f

08004bc8 <ETH_SetDMAConfig>:
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd8 <ETH_SetDMAConfig+0x110>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	7b1b      	ldrb	r3, [r3, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <ETH_SetDMAConfig+0x2c>
 8004bee:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004bf2:	e000      	b.n	8004bf6 <ETH_SetDMAConfig+0x2e>
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	7b5b      	ldrb	r3, [r3, #13]
 8004bfa:	065b      	lsls	r3, r3, #25
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	7f52      	ldrb	r2, [r2, #29]
 8004c02:	2a00      	cmp	r2, #0
 8004c04:	d102      	bne.n	8004c0c <ETH_SetDMAConfig+0x44>
 8004c06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c0a:	e000      	b.n	8004c0e <ETH_SetDMAConfig+0x46>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	7b9b      	ldrb	r3, [r3, #14]
 8004c14:	055b      	lsls	r3, r3, #21
 8004c16:	431a      	orrs	r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	7f1b      	ldrb	r3, [r3, #28]
 8004c22:	01db      	lsls	r3, r3, #7
 8004c24:	431a      	orrs	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	7f9b      	ldrb	r3, [r3, #30]
 8004c2a:	019b      	lsls	r3, r3, #6
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6193      	str	r3, [r2, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	2001      	movs	r0, #1
 8004c60:	f7fe fe9a 	bl	8003998 <HAL_Delay>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6193      	str	r3, [r2, #24]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	065a      	lsls	r2, r3, #25
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c90:	01db      	lsls	r3, r3, #7
 8004c92:	431a      	orrs	r2, r3
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	f7fe fe6b 	bl	8003998 <HAL_Delay>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cca:	461a      	mov	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	f8de3f23 	.word	0xf8de3f23

08004cdc <ETH_MACDMAConfig>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b0a6      	sub	sp, #152	@ 0x98
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8004d12:	2300      	movs	r3, #0
 8004d14:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d18:	2300      	movs	r3, #0
 8004d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8004d22:	2300      	movs	r3, #0
 8004d24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d32:	2300      	movs	r3, #0
 8004d34:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
 8004d3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8004d50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004d54:	4619      	mov	r1, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff fe86 	bl	8004a68 <ETH_SetMACConfig>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	753b      	strb	r3, [r7, #20]
 8004d60:	2301      	movs	r3, #1
 8004d62:	757b      	strb	r3, [r7, #21]
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	75bb      	strb	r3, [r7, #22]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	2300      	movs	r3, #0
 8004d74:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004d7e:	2300      	movs	r3, #0
 8004d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8004d88:	2301      	movs	r3, #1
 8004d8a:	733b      	strb	r3, [r7, #12]
 8004d8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8004da4:	2300      	movs	r3, #0
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da8:	2300      	movs	r3, #0
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff08 	bl	8004bc8 <ETH_SetDMAConfig>
 8004db8:	bf00      	nop
 8004dba:	3798      	adds	r7, #152	@ 0x98
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <ETH_MACAddressConfig>:
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3305      	adds	r3, #5
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	3204      	adds	r2, #4
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <ETH_MACAddressConfig+0x68>)
 8004de2:	4413      	add	r3, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3303      	adds	r3, #3
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	061a      	lsls	r2, r3, #24
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3302      	adds	r3, #2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	041b      	lsls	r3, r3, #16
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4313      	orrs	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <ETH_MACAddressConfig+0x6c>)
 8004e12:	4413      	add	r3, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40028040 	.word	0x40028040
 8004e2c:	40028044 	.word	0x40028044

08004e30 <ETH_DMATxDescListInit>:
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e03e      	b.n	8004ebc <ETH_DMATxDescListInit+0x8c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68d9      	ldr	r1, [r3, #12]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	3206      	adds	r2, #6
 8004e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d80c      	bhi.n	8004ea0 <ETH_DMATxDescListInit+0x70>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68d9      	ldr	r1, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e004      	b.n	8004eaa <ETH_DMATxDescListInit+0x7a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d9bd      	bls.n	8004e3e <ETH_DMATxDescListInit+0xe>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ed4:	611a      	str	r2, [r3, #16]
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <ETH_DMARxDescListInit>:
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	e046      	b.n	8004f7e <ETH_DMARxDescListInit+0x9c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6919      	ldr	r1, [r3, #16]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	440b      	add	r3, r1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2200      	movs	r2, #0
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	621a      	str	r2, [r3, #32]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2200      	movs	r2, #0
 8004f24:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	605a      	str	r2, [r3, #4]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	3212      	adds	r2, #18
 8004f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d80c      	bhi.n	8004f6e <ETH_DMARxDescListInit+0x8c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6919      	ldr	r1, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	461a      	mov	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	e004      	b.n	8004f78 <ETH_DMARxDescListInit+0x96>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d9b5      	bls.n	8004ef0 <ETH_DMARxDescListInit+0xe>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	669a      	str	r2, [r3, #104]	@ 0x68
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <ETH_Prepare_Tx_Descriptors>:
 8004fbc:	b480      	push	{r7}
 8004fbe:	b08d      	sub	sp, #52	@ 0x34
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3318      	adds	r3, #24
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe6:	623b      	str	r3, [r7, #32]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ffe:	d007      	beq.n	8005010 <ETH_Prepare_Tx_Descriptors+0x54>
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	3304      	adds	r3, #4
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <ETH_Prepare_Tx_Descriptors+0x58>
 8005010:	2302      	movs	r3, #2
 8005012:	e0ff      	b.n	8005214 <ETH_Prepare_Tx_Descriptors+0x258>
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	3301      	adds	r3, #1
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	4b7d      	ldr	r3, [pc, #500]	@ (8005220 <ETH_Prepare_Tx_Descriptors+0x264>)
 800502a:	4013      	ands	r3, r2
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	6852      	ldr	r2, [r2, #4]
 8005030:	431a      	orrs	r2, r3
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <ETH_Prepare_Tx_Descriptors+0x98>
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	431a      	orrs	r2, r3
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <ETH_Prepare_Tx_Descriptors+0xb6>
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	431a      	orrs	r2, r3
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <ETH_Prepare_Tx_Descriptors+0xce>
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	f3bf 8f5f 	dmb	sy
 800509a:	bf00      	nop
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e082      	b.n	80051b0 <ETH_Prepare_Tx_Descriptors+0x1f4>
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d006      	beq.n	80050ca <ETH_Prepare_Tx_Descriptors+0x10e>
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e005      	b.n	80050d6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	3301      	adds	r3, #1
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d902      	bls.n	80050e8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	3b04      	subs	r3, #4
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800510a:	d007      	beq.n	800511c <ETH_Prepare_Tx_Descriptors+0x160>
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005110:	3304      	adds	r3, #4
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d029      	beq.n	8005170 <ETH_Prepare_Tx_Descriptors+0x1b4>
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	2300      	movs	r3, #0
 800512c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512e:	e019      	b.n	8005164 <ETH_Prepare_Tx_Descriptors+0x1a8>
 8005130:	f3bf 8f5f 	dmb	sy
 8005134:	bf00      	nop
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	3301      	adds	r3, #1
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	2b03      	cmp	r3, #3
 800514c:	d902      	bls.n	8005154 <ETH_Prepare_Tx_Descriptors+0x198>
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	3b04      	subs	r3, #4
 8005152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	3301      	adds	r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	429a      	cmp	r2, r3
 800516a:	d3e1      	bcc.n	8005130 <ETH_Prepare_Tx_Descriptors+0x174>
 800516c:	2302      	movs	r3, #2
 800516e:	e051      	b.n	8005214 <ETH_Prepare_Tx_Descriptors+0x258>
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	609a      	str	r2, [r3, #8]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4b25      	ldr	r3, [pc, #148]	@ (8005220 <ETH_Prepare_Tx_Descriptors+0x264>)
 800518c:	4013      	ands	r3, r2
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	6852      	ldr	r2, [r2, #4]
 8005192:	431a      	orrs	r2, r3
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3301      	adds	r3, #1
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	f3bf 8f5f 	dmb	sy
 80051a2:	bf00      	nop
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f af78 	bne.w	80050aa <ETH_Prepare_Tx_Descriptors+0xee>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <ETH_Prepare_Tx_Descriptors+0x212>
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e005      	b.n	80051da <ETH_Prepare_Tx_Descriptors+0x21e>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ee:	3304      	adds	r3, #4
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051fa:	611a      	str	r2, [r3, #16]
 80051fc:	b672      	cpsid	i
 80051fe:	bf00      	nop
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	4413      	add	r3, r2
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	629a      	str	r2, [r3, #40]	@ 0x28
 800520e:	b662      	cpsie	i
 8005210:	bf00      	nop
 8005212:	2300      	movs	r3, #0
 8005214:	4618      	mov	r0, r3
 8005216:	3734      	adds	r7, #52	@ 0x34
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	ffffe000 	.word	0xffffe000

08005224 <HAL_GPIO_Init>:
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	@ 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e175      	b.n	8005530 <HAL_GPIO_Init+0x30c>
 8005244:	2201      	movs	r2, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	f040 8164 	bne.w	800552a <HAL_GPIO_Init+0x306>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d005      	beq.n	800527a <HAL_GPIO_Init+0x56>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d130      	bne.n	80052dc <HAL_GPIO_Init+0xb8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	609a      	str	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	2201      	movs	r2, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 0201 	and.w	r2, r3, #1
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d017      	beq.n	8005318 <HAL_GPIO_Init+0xf4>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2203      	movs	r2, #3
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	60da      	str	r2, [r3, #12]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d123      	bne.n	800536c <HAL_GPIO_Init+0x148>
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	220f      	movs	r2, #15
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	08da      	lsrs	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0203 	and.w	r2, r3, #3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80be 	beq.w	800552a <HAL_GPIO_Init+0x306>
 80053ae:	4b66      	ldr	r3, [pc, #408]	@ (8005548 <HAL_GPIO_Init+0x324>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	4a65      	ldr	r2, [pc, #404]	@ (8005548 <HAL_GPIO_Init+0x324>)
 80053b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80053ba:	4b63      	ldr	r3, [pc, #396]	@ (8005548 <HAL_GPIO_Init+0x324>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a61      	ldr	r2, [pc, #388]	@ (800554c <HAL_GPIO_Init+0x328>)
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	089b      	lsrs	r3, r3, #2
 80053cc:	3302      	adds	r3, #2
 80053ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	220f      	movs	r2, #15
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43db      	mvns	r3, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4013      	ands	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a58      	ldr	r2, [pc, #352]	@ (8005550 <HAL_GPIO_Init+0x32c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d037      	beq.n	8005462 <HAL_GPIO_Init+0x23e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a57      	ldr	r2, [pc, #348]	@ (8005554 <HAL_GPIO_Init+0x330>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d031      	beq.n	800545e <HAL_GPIO_Init+0x23a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a56      	ldr	r2, [pc, #344]	@ (8005558 <HAL_GPIO_Init+0x334>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d02b      	beq.n	800545a <HAL_GPIO_Init+0x236>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a55      	ldr	r2, [pc, #340]	@ (800555c <HAL_GPIO_Init+0x338>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d025      	beq.n	8005456 <HAL_GPIO_Init+0x232>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a54      	ldr	r2, [pc, #336]	@ (8005560 <HAL_GPIO_Init+0x33c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d01f      	beq.n	8005452 <HAL_GPIO_Init+0x22e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a53      	ldr	r2, [pc, #332]	@ (8005564 <HAL_GPIO_Init+0x340>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d019      	beq.n	800544e <HAL_GPIO_Init+0x22a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a52      	ldr	r2, [pc, #328]	@ (8005568 <HAL_GPIO_Init+0x344>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_GPIO_Init+0x226>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a51      	ldr	r2, [pc, #324]	@ (800556c <HAL_GPIO_Init+0x348>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00d      	beq.n	8005446 <HAL_GPIO_Init+0x222>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a50      	ldr	r2, [pc, #320]	@ (8005570 <HAL_GPIO_Init+0x34c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <HAL_GPIO_Init+0x21e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a4f      	ldr	r2, [pc, #316]	@ (8005574 <HAL_GPIO_Init+0x350>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d101      	bne.n	800543e <HAL_GPIO_Init+0x21a>
 800543a:	2309      	movs	r3, #9
 800543c:	e012      	b.n	8005464 <HAL_GPIO_Init+0x240>
 800543e:	230a      	movs	r3, #10
 8005440:	e010      	b.n	8005464 <HAL_GPIO_Init+0x240>
 8005442:	2308      	movs	r3, #8
 8005444:	e00e      	b.n	8005464 <HAL_GPIO_Init+0x240>
 8005446:	2307      	movs	r3, #7
 8005448:	e00c      	b.n	8005464 <HAL_GPIO_Init+0x240>
 800544a:	2306      	movs	r3, #6
 800544c:	e00a      	b.n	8005464 <HAL_GPIO_Init+0x240>
 800544e:	2305      	movs	r3, #5
 8005450:	e008      	b.n	8005464 <HAL_GPIO_Init+0x240>
 8005452:	2304      	movs	r3, #4
 8005454:	e006      	b.n	8005464 <HAL_GPIO_Init+0x240>
 8005456:	2303      	movs	r3, #3
 8005458:	e004      	b.n	8005464 <HAL_GPIO_Init+0x240>
 800545a:	2302      	movs	r3, #2
 800545c:	e002      	b.n	8005464 <HAL_GPIO_Init+0x240>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <HAL_GPIO_Init+0x240>
 8005462:	2300      	movs	r3, #0
 8005464:	69fa      	ldr	r2, [r7, #28]
 8005466:	f002 0203 	and.w	r2, r2, #3
 800546a:	0092      	lsls	r2, r2, #2
 800546c:	4093      	lsls	r3, r2
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	4935      	ldr	r1, [pc, #212]	@ (800554c <HAL_GPIO_Init+0x328>)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	089b      	lsrs	r3, r3, #2
 800547a:	3302      	adds	r3, #2
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005482:	4b3d      	ldr	r3, [pc, #244]	@ (8005578 <HAL_GPIO_Init+0x354>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_Init+0x282>
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	4a34      	ldr	r2, [pc, #208]	@ (8005578 <HAL_GPIO_Init+0x354>)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6093      	str	r3, [r2, #8]
 80054ac:	4b32      	ldr	r3, [pc, #200]	@ (8005578 <HAL_GPIO_Init+0x354>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_Init+0x2ac>
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	4a29      	ldr	r2, [pc, #164]	@ (8005578 <HAL_GPIO_Init+0x354>)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	60d3      	str	r3, [r2, #12]
 80054d6:	4b28      	ldr	r3, [pc, #160]	@ (8005578 <HAL_GPIO_Init+0x354>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_Init+0x2d6>
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <HAL_GPIO_Init+0x354>)
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	6053      	str	r3, [r2, #4]
 8005500:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <HAL_GPIO_Init+0x354>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	43db      	mvns	r3, r3
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x300>
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	4a14      	ldr	r2, [pc, #80]	@ (8005578 <HAL_GPIO_Init+0x354>)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3301      	adds	r3, #1
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2b0f      	cmp	r3, #15
 8005534:	f67f ae86 	bls.w	8005244 <HAL_GPIO_Init+0x20>
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	3724      	adds	r7, #36	@ 0x24
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	40013800 	.word	0x40013800
 8005550:	40020000 	.word	0x40020000
 8005554:	40020400 	.word	0x40020400
 8005558:	40020800 	.word	0x40020800
 800555c:	40020c00 	.word	0x40020c00
 8005560:	40021000 	.word	0x40021000
 8005564:	40021400 	.word	0x40021400
 8005568:	40021800 	.word	0x40021800
 800556c:	40021c00 	.word	0x40021c00
 8005570:	40022000 	.word	0x40022000
 8005574:	40022400 	.word	0x40022400
 8005578:	40013c00 	.word	0x40013c00

0800557c <HAL_GPIO_WritePin>:
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
 8005588:	4613      	mov	r3, r2
 800558a:	707b      	strb	r3, [r7, #1]
 800558c:	787b      	ldrb	r3, [r7, #1]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_WritePin+0x1e>
 8005592:	887a      	ldrh	r2, [r7, #2]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	e003      	b.n	80055a2 <HAL_GPIO_WritePin+0x26>
 800559a:	887b      	ldrh	r3, [r7, #2]
 800559c:	041a      	lsls	r2, r3, #16
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	619a      	str	r2, [r3, #24]
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_GPIO_TogglePin>:
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	807b      	strh	r3, [r7, #2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	887a      	ldrh	r2, [r7, #2]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	041a      	lsls	r2, r3, #16
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43d9      	mvns	r1, r3
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	400b      	ands	r3, r1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	619a      	str	r2, [r3, #24]
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_I2C_Init>:
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_I2C_Init+0x12>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e07f      	b.n	80056f6 <HAL_I2C_Init+0x112>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_I2C_Init+0x2c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fd f912 	bl	8002834 <HAL_I2C_MspInit>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	@ 0x24
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005644:	609a      	str	r2, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <HAL_I2C_Init+0x7a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	e006      	b.n	800566c <HAL_I2C_Init+0x88>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d104      	bne.n	800567e <HAL_I2C_Init+0x9a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6859      	ldr	r1, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <HAL_I2C_Init+0x11c>)
 800568a:	430b      	orrs	r3, r1
 800568c:	6053      	str	r3, [r2, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800569c:	60da      	str	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	ea42 0103 	orr.w	r1, r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	021a      	lsls	r2, r3, #8
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f4:	2300      	movs	r3, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	02008000 	.word	0x02008000

08005704 <HAL_I2C_Master_Transmit>:
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	461a      	mov	r2, r3
 8005710:	460b      	mov	r3, r1
 8005712:	817b      	strh	r3, [r7, #10]
 8005714:	4613      	mov	r3, r2
 8005716:	813b      	strh	r3, [r7, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b20      	cmp	r3, #32
 8005722:	f040 80da 	bne.w	80058da <HAL_I2C_Master_Transmit+0x1d6>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_I2C_Master_Transmit+0x30>
 8005730:	2302      	movs	r3, #2
 8005732:	e0d3      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800573c:	f7fe f920 	bl	8003980 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2319      	movs	r3, #25
 8005748:	2201      	movs	r2, #1
 800574a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f8f0 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_I2C_Master_Transmit+0x5a>
 800575a:	2301      	movs	r3, #1
 800575c:	e0be      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2221      	movs	r2, #33	@ 0x21
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2210      	movs	r2, #16
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	645a      	str	r2, [r3, #68]	@ 0x44
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	625a      	str	r2, [r3, #36]	@ 0x24
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	893a      	ldrh	r2, [r7, #8]
 800577e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	@ 0x34
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2bff      	cmp	r3, #255	@ 0xff
 800578e:	d90e      	bls.n	80057ae <HAL_I2C_Master_Transmit+0xaa>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	22ff      	movs	r2, #255	@ 0xff
 8005794:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579a:	b2da      	uxtb	r2, r3
 800579c:	8979      	ldrh	r1, [r7, #10]
 800579e:	4b51      	ldr	r3, [pc, #324]	@ (80058e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fa60 	bl	8005c6c <I2C_TransferConfig>
 80057ac:	e06c      	b.n	8005888 <HAL_I2C_Master_Transmit+0x184>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	8979      	ldrh	r1, [r7, #10]
 80057c0:	4b48      	ldr	r3, [pc, #288]	@ (80058e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fa4f 	bl	8005c6c <I2C_TransferConfig>
 80057ce:	e05b      	b.n	8005888 <HAL_I2C_Master_Transmit+0x184>
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	6a39      	ldr	r1, [r7, #32]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f8ed 	bl	80059b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_I2C_Master_Transmit+0xe0>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e07b      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d034      	beq.n	8005888 <HAL_I2C_Master_Transmit+0x184>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d130      	bne.n	8005888 <HAL_I2C_Master_Transmit+0x184>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	@ 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f87f 	bl	8005934 <I2C_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_I2C_Master_Transmit+0x13c>
 800583c:	2301      	movs	r3, #1
 800583e:	e04d      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2bff      	cmp	r3, #255	@ 0xff
 8005848:	d90e      	bls.n	8005868 <HAL_I2C_Master_Transmit+0x164>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	22ff      	movs	r2, #255	@ 0xff
 800584e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005854:	b2da      	uxtb	r2, r3
 8005856:	8979      	ldrh	r1, [r7, #10]
 8005858:	2300      	movs	r3, #0
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fa03 	bl	8005c6c <I2C_TransferConfig>
 8005866:	e00f      	b.n	8005888 <HAL_I2C_Master_Transmit+0x184>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005876:	b2da      	uxtb	r2, r3
 8005878:	8979      	ldrh	r1, [r7, #10]
 800587a:	2300      	movs	r3, #0
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f9f2 	bl	8005c6c <I2C_TransferConfig>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d19e      	bne.n	80057d0 <HAL_I2C_Master_Transmit+0xcc>
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	6a39      	ldr	r1, [r7, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f8cc 	bl	8005a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_I2C_Master_Transmit+0x1a2>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e01a      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2220      	movs	r2, #32
 80058ac:	61da      	str	r2, [r3, #28]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80058ba:	400b      	ands	r3, r1
 80058bc:	6053      	str	r3, [r2, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_I2C_Master_Transmit+0x1d8>
 80058da:	2302      	movs	r3, #2
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	80002000 	.word	0x80002000
 80058e8:	fe00e800 	.word	0xfe00e800

080058ec <I2C_Flush_TXDR>:
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d103      	bne.n	800590a <I2C_Flush_TXDR+0x1e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	@ 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d007      	beq.n	8005928 <I2C_Flush_TXDR+0x3c>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	619a      	str	r2, [r3, #24]
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <I2C_WaitOnFlagUntilTimeout>:
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	4613      	mov	r3, r2
 8005942:	71fb      	strb	r3, [r7, #7]
 8005944:	e022      	b.n	800598c <I2C_WaitOnFlagUntilTimeout+0x58>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d01e      	beq.n	800598c <I2C_WaitOnFlagUntilTimeout+0x58>
 800594e:	f7fe f817 	bl	8003980 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <I2C_WaitOnFlagUntilTimeout+0x30>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d113      	bne.n	800598c <I2C_WaitOnFlagUntilTimeout+0x58>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005988:	2301      	movs	r3, #1
 800598a:	e00f      	b.n	80059ac <I2C_WaitOnFlagUntilTimeout+0x78>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d0cd      	beq.n	8005946 <I2C_WaitOnFlagUntilTimeout+0x12>
 80059aa:	2300      	movs	r3, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <I2C_WaitOnTXISFlagUntilTimeout>:
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	e02c      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f870 	bl	8005aac <I2C_IsErrorOccurred>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e02a      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059dc:	d01e      	beq.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80059de:	f7fd ffcf 	bl	8003980 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d113      	bne.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e007      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d1cb      	bne.n	80059c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	e028      	b.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f000 f830 	bl	8005aac <I2C_IsErrorOccurred>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e026      	b.n	8005aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8005a56:	f7fd ff93 	bl	8003980 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d113      	bne.n	8005a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a90:	2301      	movs	r3, #1
 8005a92:	e007      	b.n	8005aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b20      	cmp	r3, #32
 8005aa0:	d1cf      	bne.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_IsErrorOccurred>:
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	@ 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d068      	beq.n	8005baa <I2C_IsErrorOccurred+0xfe>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2210      	movs	r2, #16
 8005ade:	61da      	str	r2, [r3, #28]
 8005ae0:	e049      	b.n	8005b76 <I2C_IsErrorOccurred+0xca>
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d045      	beq.n	8005b76 <I2C_IsErrorOccurred+0xca>
 8005aea:	f7fd ff49 	bl	8003980 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d302      	bcc.n	8005b00 <I2C_IsErrorOccurred+0x54>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d13a      	bne.n	8005b76 <I2C_IsErrorOccurred+0xca>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b0a:	617b      	str	r3, [r7, #20]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b12:	74fb      	strb	r3, [r7, #19]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b22:	d121      	bne.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2a:	d01d      	beq.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d01a      	beq.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	f7fd ff1d 	bl	8003980 <HAL_GetTick>
 8005b46:	61f8      	str	r0, [r7, #28]
 8005b48:	e00e      	b.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b4a:	f7fd ff19 	bl	8003980 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b19      	cmp	r3, #25
 8005b56:	d907      	bls.n	8005b68 <I2C_IsErrorOccurred+0xbc>
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f043 0320 	orr.w	r3, r3, #32
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005b66:	e006      	b.n	8005b76 <I2C_IsErrorOccurred+0xca>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	d1e9      	bne.n	8005b4a <I2C_IsErrorOccurred+0x9e>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d003      	beq.n	8005b8c <I2C_IsErrorOccurred+0xe0>
 8005b84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0aa      	beq.n	8005ae2 <I2C_IsErrorOccurred+0x36>
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <I2C_IsErrorOccurred+0xf0>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	61da      	str	r2, [r3, #28]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <I2C_IsErrorOccurred+0x128>
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	623b      	str	r3, [r7, #32]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bcc:	61da      	str	r2, [r3, #28]
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <I2C_IsErrorOccurred+0x14a>
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f043 0308 	orr.w	r3, r3, #8
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bee:	61da      	str	r2, [r3, #28]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <I2C_IsErrorOccurred+0x16c>
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	623b      	str	r3, [r7, #32]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c10:	61da      	str	r2, [r3, #28]
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d01c      	beq.n	8005c5a <I2C_IsErrorOccurred+0x1ae>
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff fe63 	bl	80058ec <I2C_Flush_TXDR>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b0d      	ldr	r3, [pc, #52]	@ (8005c68 <I2C_IsErrorOccurred+0x1bc>)
 8005c32:	400b      	ands	r3, r1
 8005c34:	6053      	str	r3, [r2, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3728      	adds	r7, #40	@ 0x28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	fe00e800 	.word	0xfe00e800

08005c6c <I2C_TransferConfig>:
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	817b      	strh	r3, [r7, #10]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	727b      	strb	r3, [r7, #9]
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c84:	7a7b      	ldrb	r3, [r7, #9]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	0d5b      	lsrs	r3, r3, #21
 8005ca6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <I2C_TransferConfig+0x60>)
 8005cac:	430b      	orrs	r3, r1
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	ea02 0103 	and.w	r1, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	03ff63ff 	.word	0x03ff63ff

08005cd0 <HAL_I2CEx_ConfigAnalogFilter>:
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b20      	cmp	r3, #32
 8005ce4:	d138      	bne.n	8005d58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e032      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	@ 0x24
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d54:	2300      	movs	r3, #0
 8005d56:	e000      	b.n	8005d5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2CEx_ConfigDigitalFilter>:
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b20      	cmp	r3, #32
 8005d7a:	d139      	bne.n	8005df0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d101      	bne.n	8005d8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d86:	2302      	movs	r3, #2
 8005d88:	e033      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2224      	movs	r2, #36	@ 0x24
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0201 	bic.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dec:	2300      	movs	r3, #0
 8005dee:	e000      	b.n	8005df2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005df0:	2302      	movs	r3, #2
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_PWR_EnableBkUpAccess>:
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40007000 	.word	0x40007000

08005e20 <HAL_PWREx_EnableOverDrive>:
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	4b23      	ldr	r3, [pc, #140]	@ (8005eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	4a22      	ldr	r2, [pc, #136]	@ (8005eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e36:	4b20      	ldr	r3, [pc, #128]	@ (8005eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	f7fd fd97 	bl	8003980 <HAL_GetTick>
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	e009      	b.n	8005e6a <HAL_PWREx_EnableOverDrive+0x4a>
 8005e56:	f7fd fd93 	bl	8003980 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e64:	d901      	bls.n	8005e6a <HAL_PWREx_EnableOverDrive+0x4a>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e022      	b.n	8005eb0 <HAL_PWREx_EnableOverDrive+0x90>
 8005e6a:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e76:	d1ee      	bne.n	8005e56 <HAL_PWREx_EnableOverDrive+0x36>
 8005e78:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	f7fd fd7c 	bl	8003980 <HAL_GetTick>
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	e009      	b.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x80>
 8005e8c:	f7fd fd78 	bl	8003980 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e9a:	d901      	bls.n	8005ea0 <HAL_PWREx_EnableOverDrive+0x80>
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e007      	b.n	8005eb0 <HAL_PWREx_EnableOverDrive+0x90>
 8005ea0:	4b06      	ldr	r3, [pc, #24]	@ (8005ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005eac:	d1ee      	bne.n	8005e8c <HAL_PWREx_EnableOverDrive+0x6c>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000

08005ec0 <HAL_RCC_OscConfig>:
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	75fb      	strb	r3, [r7, #23]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x16>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e291      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8087 	beq.w	8005ff2 <HAL_RCC_OscConfig+0x132>
 8005ee4:	4b96      	ldr	r3, [pc, #600]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d00c      	beq.n	8005f0a <HAL_RCC_OscConfig+0x4a>
 8005ef0:	4b93      	ldr	r3, [pc, #588]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d112      	bne.n	8005f22 <HAL_RCC_OscConfig+0x62>
 8005efc:	4b90      	ldr	r3, [pc, #576]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f08:	d10b      	bne.n	8005f22 <HAL_RCC_OscConfig+0x62>
 8005f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d06c      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x130>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d168      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x130>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e26b      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2a:	d106      	bne.n	8005f3a <HAL_RCC_OscConfig+0x7a>
 8005f2c:	4b84      	ldr	r3, [pc, #528]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a83      	ldr	r2, [pc, #524]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	e02e      	b.n	8005f98 <HAL_RCC_OscConfig+0xd8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x9c>
 8005f42:	4b7f      	ldr	r3, [pc, #508]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a7e      	ldr	r2, [pc, #504]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7b      	ldr	r2, [pc, #492]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e01d      	b.n	8005f98 <HAL_RCC_OscConfig+0xd8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f64:	d10c      	bne.n	8005f80 <HAL_RCC_OscConfig+0xc0>
 8005f66:	4b76      	ldr	r3, [pc, #472]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a75      	ldr	r2, [pc, #468]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b73      	ldr	r3, [pc, #460]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a72      	ldr	r2, [pc, #456]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e00b      	b.n	8005f98 <HAL_RCC_OscConfig+0xd8>
 8005f80:	4b6f      	ldr	r3, [pc, #444]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a6e      	ldr	r2, [pc, #440]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a6b      	ldr	r2, [pc, #428]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d013      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x108>
 8005fa0:	f7fd fcee 	bl	8003980 <HAL_GetTick>
 8005fa4:	6138      	str	r0, [r7, #16]
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0xfa>
 8005fa8:	f7fd fcea 	bl	8003980 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	@ 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0xfa>
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e21f      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8005fba:	4b61      	ldr	r3, [pc, #388]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0f0      	beq.n	8005fa8 <HAL_RCC_OscConfig+0xe8>
 8005fc6:	e014      	b.n	8005ff2 <HAL_RCC_OscConfig+0x132>
 8005fc8:	f7fd fcda 	bl	8003980 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x122>
 8005fd0:	f7fd fcd6 	bl	8003980 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b64      	cmp	r3, #100	@ 0x64
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x122>
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e20b      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8005fe2:	4b57      	ldr	r3, [pc, #348]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x110>
 8005fee:	e000      	b.n	8005ff2 <HAL_RCC_OscConfig+0x132>
 8005ff0:	bf00      	nop
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d069      	beq.n	80060d2 <HAL_RCC_OscConfig+0x212>
 8005ffe:	4b50      	ldr	r3, [pc, #320]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_RCC_OscConfig+0x162>
 800600a:	4b4d      	ldr	r3, [pc, #308]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 030c 	and.w	r3, r3, #12
 8006012:	2b08      	cmp	r3, #8
 8006014:	d11c      	bne.n	8006050 <HAL_RCC_OscConfig+0x190>
 8006016:	4b4a      	ldr	r3, [pc, #296]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d116      	bne.n	8006050 <HAL_RCC_OscConfig+0x190>
 8006022:	4b47      	ldr	r3, [pc, #284]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_RCC_OscConfig+0x17a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <HAL_RCC_OscConfig+0x17a>
 8006036:	2301      	movs	r3, #1
 8006038:	e1df      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800603a:	4b41      	ldr	r3, [pc, #260]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	493d      	ldr	r1, [pc, #244]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800604a:	4313      	orrs	r3, r2
 800604c:	600b      	str	r3, [r1, #0]
 800604e:	e040      	b.n	80060d2 <HAL_RCC_OscConfig+0x212>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d023      	beq.n	80060a0 <HAL_RCC_OscConfig+0x1e0>
 8006058:	4b39      	ldr	r3, [pc, #228]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a38      	ldr	r2, [pc, #224]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	f7fd fc8c 	bl	8003980 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x1be>
 800606c:	f7fd fc88 	bl	8003980 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x1be>
 800607a:	2303      	movs	r3, #3
 800607c:	e1bd      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800607e:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x1ac>
 800608a:	4b2d      	ldr	r3, [pc, #180]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	4929      	ldr	r1, [pc, #164]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800609a:	4313      	orrs	r3, r2
 800609c:	600b      	str	r3, [r1, #0]
 800609e:	e018      	b.n	80060d2 <HAL_RCC_OscConfig+0x212>
 80060a0:	4b27      	ldr	r3, [pc, #156]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a26      	ldr	r2, [pc, #152]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	f7fd fc68 	bl	8003980 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x206>
 80060b4:	f7fd fc64 	bl	8003980 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x206>
 80060c2:	2303      	movs	r3, #3
 80060c4:	e199      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 80060c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x1f4>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d038      	beq.n	8006150 <HAL_RCC_OscConfig+0x290>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d019      	beq.n	800611a <HAL_RCC_OscConfig+0x25a>
 80060e6:	4b16      	ldr	r3, [pc, #88]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 80060e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ea:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6753      	str	r3, [r2, #116]	@ 0x74
 80060f2:	f7fd fc45 	bl	8003980 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x24c>
 80060fa:	f7fd fc41 	bl	8003980 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x24c>
 8006108:	2303      	movs	r3, #3
 800610a:	e176      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800610c:	4b0c      	ldr	r3, [pc, #48]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800610e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x23a>
 8006118:	e01a      	b.n	8006150 <HAL_RCC_OscConfig+0x290>
 800611a:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 800611c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800611e:	4a08      	ldr	r2, [pc, #32]	@ (8006140 <HAL_RCC_OscConfig+0x280>)
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	6753      	str	r3, [r2, #116]	@ 0x74
 8006126:	f7fd fc2b 	bl	8003980 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]
 800612c:	e00a      	b.n	8006144 <HAL_RCC_OscConfig+0x284>
 800612e:	f7fd fc27 	bl	8003980 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d903      	bls.n	8006144 <HAL_RCC_OscConfig+0x284>
 800613c:	2303      	movs	r3, #3
 800613e:	e15c      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8006140:	40023800 	.word	0x40023800
 8006144:	4b91      	ldr	r3, [pc, #580]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ee      	bne.n	800612e <HAL_RCC_OscConfig+0x26e>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 80a4 	beq.w	80062a6 <HAL_RCC_OscConfig+0x3e6>
 800615e:	4b8b      	ldr	r3, [pc, #556]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_RCC_OscConfig+0x2c6>
 800616a:	4b88      	ldr	r3, [pc, #544]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	4a87      	ldr	r2, [pc, #540]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006174:	6413      	str	r3, [r2, #64]	@ 0x40
 8006176:	4b85      	ldr	r3, [pc, #532]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2301      	movs	r3, #1
 8006184:	75fb      	strb	r3, [r7, #23]
 8006186:	4b82      	ldr	r3, [pc, #520]	@ (8006390 <HAL_RCC_OscConfig+0x4d0>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d118      	bne.n	80061c4 <HAL_RCC_OscConfig+0x304>
 8006192:	4b7f      	ldr	r3, [pc, #508]	@ (8006390 <HAL_RCC_OscConfig+0x4d0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a7e      	ldr	r2, [pc, #504]	@ (8006390 <HAL_RCC_OscConfig+0x4d0>)
 8006198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	f7fd fbef 	bl	8003980 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x2f8>
 80061a6:	f7fd fbeb 	bl	8003980 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b64      	cmp	r3, #100	@ 0x64
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x2f8>
 80061b4:	2303      	movs	r3, #3
 80061b6:	e120      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 80061b8:	4b75      	ldr	r3, [pc, #468]	@ (8006390 <HAL_RCC_OscConfig+0x4d0>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x2e6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x31a>
 80061cc:	4b6f      	ldr	r3, [pc, #444]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d0:	4a6e      	ldr	r2, [pc, #440]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80061d8:	e02d      	b.n	8006236 <HAL_RCC_OscConfig+0x376>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10c      	bne.n	80061fc <HAL_RCC_OscConfig+0x33c>
 80061e2:	4b6a      	ldr	r3, [pc, #424]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e6:	4a69      	ldr	r2, [pc, #420]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80061ee:	4b67      	ldr	r3, [pc, #412]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061f2:	4a66      	ldr	r2, [pc, #408]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80061fa:	e01c      	b.n	8006236 <HAL_RCC_OscConfig+0x376>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b05      	cmp	r3, #5
 8006202:	d10c      	bne.n	800621e <HAL_RCC_OscConfig+0x35e>
 8006204:	4b61      	ldr	r3, [pc, #388]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006208:	4a60      	ldr	r2, [pc, #384]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800620a:	f043 0304 	orr.w	r3, r3, #4
 800620e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006210:	4b5e      	ldr	r3, [pc, #376]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	4a5d      	ldr	r2, [pc, #372]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	@ 0x70
 800621c:	e00b      	b.n	8006236 <HAL_RCC_OscConfig+0x376>
 800621e:	4b5b      	ldr	r3, [pc, #364]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006222:	4a5a      	ldr	r2, [pc, #360]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	6713      	str	r3, [r2, #112]	@ 0x70
 800622a:	4b58      	ldr	r3, [pc, #352]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800622c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800622e:	4a57      	ldr	r2, [pc, #348]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	6713      	str	r3, [r2, #112]	@ 0x70
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d015      	beq.n	800626a <HAL_RCC_OscConfig+0x3aa>
 800623e:	f7fd fb9f 	bl	8003980 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]
 8006244:	e00a      	b.n	800625c <HAL_RCC_OscConfig+0x39c>
 8006246:	f7fd fb9b 	bl	8003980 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x39c>
 8006258:	2303      	movs	r3, #3
 800625a:	e0ce      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800625c:	4b4b      	ldr	r3, [pc, #300]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0ee      	beq.n	8006246 <HAL_RCC_OscConfig+0x386>
 8006268:	e014      	b.n	8006294 <HAL_RCC_OscConfig+0x3d4>
 800626a:	f7fd fb89 	bl	8003980 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]
 8006270:	e00a      	b.n	8006288 <HAL_RCC_OscConfig+0x3c8>
 8006272:	f7fd fb85 	bl	8003980 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006280:	4293      	cmp	r3, r2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x3c8>
 8006284:	2303      	movs	r3, #3
 8006286:	e0b8      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 8006288:	4b40      	ldr	r3, [pc, #256]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ee      	bne.n	8006272 <HAL_RCC_OscConfig+0x3b2>
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <HAL_RCC_OscConfig+0x3e6>
 800629a:	4b3c      	ldr	r3, [pc, #240]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	4a3b      	ldr	r2, [pc, #236]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80062a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80a4 	beq.w	80063f8 <HAL_RCC_OscConfig+0x538>
 80062b0:	4b36      	ldr	r3, [pc, #216]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d06b      	beq.n	8006394 <HAL_RCC_OscConfig+0x4d4>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d149      	bne.n	8006358 <HAL_RCC_OscConfig+0x498>
 80062c4:	4b31      	ldr	r3, [pc, #196]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a30      	ldr	r2, [pc, #192]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80062ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	f7fd fb56 	bl	8003980 <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x42a>
 80062d8:	f7fd fb52 	bl	8003980 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x42a>
 80062e6:	2303      	movs	r3, #3
 80062e8:	e087      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 80062ea:	4b28      	ldr	r3, [pc, #160]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x418>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	019b      	lsls	r3, r3, #6
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	3b01      	subs	r3, #1
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	061b      	lsls	r3, r3, #24
 800631a:	4313      	orrs	r3, r2
 800631c:	4a1b      	ldr	r2, [pc, #108]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800631e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006322:	6053      	str	r3, [r2, #4]
 8006324:	4b19      	ldr	r3, [pc, #100]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a18      	ldr	r2, [pc, #96]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800632a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	f7fd fb26 	bl	8003980 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x48a>
 8006338:	f7fd fb22 	bl	8003980 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b02      	cmp	r3, #2
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x48a>
 8006346:	2303      	movs	r3, #3
 8006348:	e057      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800634a:	4b10      	ldr	r3, [pc, #64]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0x478>
 8006356:	e04f      	b.n	80063f8 <HAL_RCC_OscConfig+0x538>
 8006358:	4b0c      	ldr	r3, [pc, #48]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a0b      	ldr	r2, [pc, #44]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	f7fd fb0c 	bl	8003980 <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x4be>
 800636c:	f7fd fb08 	bl	8003980 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x4be>
 800637a:	2303      	movs	r3, #3
 800637c:	e03d      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 800637e:	4b03      	ldr	r3, [pc, #12]	@ (800638c <HAL_RCC_OscConfig+0x4cc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x4ac>
 800638a:	e035      	b.n	80063f8 <HAL_RCC_OscConfig+0x538>
 800638c:	40023800 	.word	0x40023800
 8006390:	40007000 	.word	0x40007000
 8006394:	4b1b      	ldr	r3, [pc, #108]	@ (8006404 <HAL_RCC_OscConfig+0x544>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d028      	beq.n	80063f4 <HAL_RCC_OscConfig+0x534>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d121      	bne.n	80063f4 <HAL_RCC_OscConfig+0x534>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d11a      	bne.n	80063f4 <HAL_RCC_OscConfig+0x534>
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80063c4:	4013      	ands	r3, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063ca:	0192      	lsls	r2, r2, #6
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d111      	bne.n	80063f4 <HAL_RCC_OscConfig+0x534>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	3b01      	subs	r3, #1
 80063de:	041b      	lsls	r3, r3, #16
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d107      	bne.n	80063f4 <HAL_RCC_OscConfig+0x534>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d001      	beq.n	80063f8 <HAL_RCC_OscConfig+0x538>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <HAL_RCC_OscConfig+0x53a>
 80063f8:	2300      	movs	r3, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800

08006408 <HAL_RCC_ClockConfig>:
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_RCC_ClockConfig+0x18>
 800641c:	2301      	movs	r3, #1
 800641e:	e0d0      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 8006420:	4b6a      	ldr	r3, [pc, #424]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	429a      	cmp	r2, r3
 800642c:	d910      	bls.n	8006450 <HAL_RCC_ClockConfig+0x48>
 800642e:	4b67      	ldr	r3, [pc, #412]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f023 020f 	bic.w	r2, r3, #15
 8006436:	4965      	ldr	r1, [pc, #404]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	4313      	orrs	r3, r2
 800643c:	600b      	str	r3, [r1, #0]
 800643e:	4b63      	ldr	r3, [pc, #396]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d001      	beq.n	8006450 <HAL_RCC_ClockConfig+0x48>
 800644c:	2301      	movs	r3, #1
 800644e:	e0b8      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d020      	beq.n	800649e <HAL_RCC_ClockConfig+0x96>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <HAL_RCC_ClockConfig+0x6c>
 8006468:	4b59      	ldr	r3, [pc, #356]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4a58      	ldr	r2, [pc, #352]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800646e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d005      	beq.n	800648c <HAL_RCC_ClockConfig+0x84>
 8006480:	4b53      	ldr	r3, [pc, #332]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	4a52      	ldr	r2, [pc, #328]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006486:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800648a:	6093      	str	r3, [r2, #8]
 800648c:	4b50      	ldr	r3, [pc, #320]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	494d      	ldr	r1, [pc, #308]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800649a:	4313      	orrs	r3, r2
 800649c:	608b      	str	r3, [r1, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d040      	beq.n	800652c <HAL_RCC_ClockConfig+0x124>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xba>
 80064b2:	4b47      	ldr	r3, [pc, #284]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d115      	bne.n	80064ea <HAL_RCC_ClockConfig+0xe2>
 80064be:	2301      	movs	r3, #1
 80064c0:	e07f      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d107      	bne.n	80064da <HAL_RCC_ClockConfig+0xd2>
 80064ca:	4b41      	ldr	r3, [pc, #260]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <HAL_RCC_ClockConfig+0xe2>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e073      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 80064da:	4b3d      	ldr	r3, [pc, #244]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_RCC_ClockConfig+0xe2>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e06b      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 80064ea:	4b39      	ldr	r3, [pc, #228]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f023 0203 	bic.w	r2, r3, #3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4936      	ldr	r1, [pc, #216]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	608b      	str	r3, [r1, #8]
 80064fc:	f7fd fa40 	bl	8003980 <HAL_GetTick>
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	e00a      	b.n	800651a <HAL_RCC_ClockConfig+0x112>
 8006504:	f7fd fa3c 	bl	8003980 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006512:	4293      	cmp	r3, r2
 8006514:	d901      	bls.n	800651a <HAL_RCC_ClockConfig+0x112>
 8006516:	2303      	movs	r3, #3
 8006518:	e053      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 800651a:	4b2d      	ldr	r3, [pc, #180]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 020c 	and.w	r2, r3, #12
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	429a      	cmp	r2, r3
 800652a:	d1eb      	bne.n	8006504 <HAL_RCC_ClockConfig+0xfc>
 800652c:	4b27      	ldr	r3, [pc, #156]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d210      	bcs.n	800655c <HAL_RCC_ClockConfig+0x154>
 800653a:	4b24      	ldr	r3, [pc, #144]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 020f 	bic.w	r2, r3, #15
 8006542:	4922      	ldr	r1, [pc, #136]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]
 800654a:	4b20      	ldr	r3, [pc, #128]	@ (80065cc <HAL_RCC_ClockConfig+0x1c4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d001      	beq.n	800655c <HAL_RCC_ClockConfig+0x154>
 8006558:	2301      	movs	r3, #1
 800655a:	e032      	b.n	80065c2 <HAL_RCC_ClockConfig+0x1ba>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_RCC_ClockConfig+0x172>
 8006568:	4b19      	ldr	r3, [pc, #100]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4916      	ldr	r1, [pc, #88]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0308 	and.w	r3, r3, #8
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_RCC_ClockConfig+0x192>
 8006586:	4b12      	ldr	r3, [pc, #72]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	490e      	ldr	r1, [pc, #56]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
 800659a:	f000 f821 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <HAL_RCC_ClockConfig+0x1c8>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	091b      	lsrs	r3, r3, #4
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	490a      	ldr	r1, [pc, #40]	@ (80065d4 <HAL_RCC_ClockConfig+0x1cc>)
 80065ac:	5ccb      	ldrb	r3, [r1, r3]
 80065ae:	fa22 f303 	lsr.w	r3, r2, r3
 80065b2:	4a09      	ldr	r2, [pc, #36]	@ (80065d8 <HAL_RCC_ClockConfig+0x1d0>)
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	4b09      	ldr	r3, [pc, #36]	@ (80065dc <HAL_RCC_ClockConfig+0x1d4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fc fd12 	bl	8002fe4 <HAL_InitTick>
 80065c0:	2300      	movs	r3, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40023c00 	.word	0x40023c00
 80065d0:	40023800 	.word	0x40023800
 80065d4:	080235c8 	.word	0x080235c8
 80065d8:	20000058 	.word	0x20000058
 80065dc:	2000005c 	.word	0x2000005c

080065e0 <HAL_RCC_GetSysClockFreq>:
 80065e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065e4:	b094      	sub	sp, #80	@ 0x50
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ec:	2300      	movs	r3, #0
 80065ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065f0:	2300      	movs	r3, #0
 80065f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f4:	2300      	movs	r3, #0
 80065f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f8:	4b79      	ldr	r3, [pc, #484]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f003 030c 	and.w	r3, r3, #12
 8006600:	2b08      	cmp	r3, #8
 8006602:	d00d      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0x40>
 8006604:	2b08      	cmp	r3, #8
 8006606:	f200 80e1 	bhi.w	80067cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_RCC_GetSysClockFreq+0x34>
 800660e:	2b04      	cmp	r3, #4
 8006610:	d003      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0x3a>
 8006612:	e0db      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006614:	4b73      	ldr	r3, [pc, #460]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006618:	e0db      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x1f2>
 800661a:	4b73      	ldr	r3, [pc, #460]	@ (80067e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800661c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800661e:	e0d8      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x1f2>
 8006620:	4b6f      	ldr	r3, [pc, #444]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006628:	647b      	str	r3, [r7, #68]	@ 0x44
 800662a:	4b6d      	ldr	r3, [pc, #436]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d063      	beq.n	80066fe <HAL_RCC_GetSysClockFreq+0x11e>
 8006636:	4b6a      	ldr	r3, [pc, #424]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	099b      	lsrs	r3, r3, #6
 800663c:	2200      	movs	r2, #0
 800663e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006640:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	633b      	str	r3, [r7, #48]	@ 0x30
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
 800664e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006652:	4622      	mov	r2, r4
 8006654:	462b      	mov	r3, r5
 8006656:	f04f 0000 	mov.w	r0, #0
 800665a:	f04f 0100 	mov.w	r1, #0
 800665e:	0159      	lsls	r1, r3, #5
 8006660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006664:	0150      	lsls	r0, r2, #5
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4621      	mov	r1, r4
 800666c:	1a51      	subs	r1, r2, r1
 800666e:	6139      	str	r1, [r7, #16]
 8006670:	4629      	mov	r1, r5
 8006672:	eb63 0301 	sbc.w	r3, r3, r1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006684:	4659      	mov	r1, fp
 8006686:	018b      	lsls	r3, r1, #6
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800668e:	4651      	mov	r1, sl
 8006690:	018a      	lsls	r2, r1, #6
 8006692:	4651      	mov	r1, sl
 8006694:	ebb2 0801 	subs.w	r8, r2, r1
 8006698:	4659      	mov	r1, fp
 800669a:	eb63 0901 	sbc.w	r9, r3, r1
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066b2:	4690      	mov	r8, r2
 80066b4:	4699      	mov	r9, r3
 80066b6:	4623      	mov	r3, r4
 80066b8:	eb18 0303 	adds.w	r3, r8, r3
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	462b      	mov	r3, r5
 80066c0:	eb49 0303 	adc.w	r3, r9, r3
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	f04f 0200 	mov.w	r2, #0
 80066ca:	f04f 0300 	mov.w	r3, #0
 80066ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066d2:	4629      	mov	r1, r5
 80066d4:	024b      	lsls	r3, r1, #9
 80066d6:	4621      	mov	r1, r4
 80066d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066dc:	4621      	mov	r1, r4
 80066de:	024a      	lsls	r2, r1, #9
 80066e0:	4610      	mov	r0, r2
 80066e2:	4619      	mov	r1, r3
 80066e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066e6:	2200      	movs	r2, #0
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066f0:	f7fa fada 	bl	8000ca8 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4613      	mov	r3, r2
 80066fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066fc:	e058      	b.n	80067b0 <HAL_RCC_GetSysClockFreq+0x1d0>
 80066fe:	4b38      	ldr	r3, [pc, #224]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	099b      	lsrs	r3, r3, #6
 8006704:	2200      	movs	r2, #0
 8006706:	4618      	mov	r0, r3
 8006708:	4611      	mov	r1, r2
 800670a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800670e:	623b      	str	r3, [r7, #32]
 8006710:	2300      	movs	r3, #0
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
 8006714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006718:	4642      	mov	r2, r8
 800671a:	464b      	mov	r3, r9
 800671c:	f04f 0000 	mov.w	r0, #0
 8006720:	f04f 0100 	mov.w	r1, #0
 8006724:	0159      	lsls	r1, r3, #5
 8006726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800672a:	0150      	lsls	r0, r2, #5
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4641      	mov	r1, r8
 8006732:	ebb2 0a01 	subs.w	sl, r2, r1
 8006736:	4649      	mov	r1, r9
 8006738:	eb63 0b01 	sbc.w	fp, r3, r1
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	f04f 0300 	mov.w	r3, #0
 8006744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800674c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006750:	ebb2 040a 	subs.w	r4, r2, sl
 8006754:	eb63 050b 	sbc.w	r5, r3, fp
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	00eb      	lsls	r3, r5, #3
 8006762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006766:	00e2      	lsls	r2, r4, #3
 8006768:	4614      	mov	r4, r2
 800676a:	461d      	mov	r5, r3
 800676c:	4643      	mov	r3, r8
 800676e:	18e3      	adds	r3, r4, r3
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	464b      	mov	r3, r9
 8006774:	eb45 0303 	adc.w	r3, r5, r3
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	f04f 0300 	mov.w	r3, #0
 8006782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006786:	4629      	mov	r1, r5
 8006788:	028b      	lsls	r3, r1, #10
 800678a:	4621      	mov	r1, r4
 800678c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006790:	4621      	mov	r1, r4
 8006792:	028a      	lsls	r2, r1, #10
 8006794:	4610      	mov	r0, r2
 8006796:	4619      	mov	r1, r3
 8006798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679a:	2200      	movs	r2, #0
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	61fa      	str	r2, [r7, #28]
 80067a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a4:	f7fa fa80 	bl	8000ca8 <__aeabi_uldivmod>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4613      	mov	r3, r2
 80067ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	3301      	adds	r3, #1
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	643b      	str	r3, [r7, #64]	@ 0x40
 80067c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ca:	e002      	b.n	80067d2 <HAL_RCC_GetSysClockFreq+0x1f2>
 80067cc:	4b05      	ldr	r3, [pc, #20]	@ (80067e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d0:	bf00      	nop
 80067d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067d4:	4618      	mov	r0, r3
 80067d6:	3750      	adds	r7, #80	@ 0x50
 80067d8:	46bd      	mov	sp, r7
 80067da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800
 80067e4:	00f42400 	.word	0x00f42400
 80067e8:	007a1200 	.word	0x007a1200

080067ec <HAL_RCC_GetHCLKFreq>:
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <HAL_RCC_GetHCLKFreq+0x14>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20000058 	.word	0x20000058

08006804 <HAL_RCC_GetPCLK1Freq>:
 8006804:	b580      	push	{r7, lr}
 8006806:	af00      	add	r7, sp, #0
 8006808:	f7ff fff0 	bl	80067ec <HAL_RCC_GetHCLKFreq>
 800680c:	4602      	mov	r2, r0
 800680e:	4b05      	ldr	r3, [pc, #20]	@ (8006824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	0a9b      	lsrs	r3, r3, #10
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	4903      	ldr	r1, [pc, #12]	@ (8006828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800681a:	5ccb      	ldrb	r3, [r1, r3]
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40023800 	.word	0x40023800
 8006828:	080235d8 	.word	0x080235d8

0800682c <HAL_RCC_GetPCLK2Freq>:
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
 8006830:	f7ff ffdc 	bl	80067ec <HAL_RCC_GetHCLKFreq>
 8006834:	4602      	mov	r2, r0
 8006836:	4b05      	ldr	r3, [pc, #20]	@ (800684c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	0b5b      	lsrs	r3, r3, #13
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4903      	ldr	r1, [pc, #12]	@ (8006850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006842:	5ccb      	ldrb	r3, [r1, r3]
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	4618      	mov	r0, r3
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40023800 	.word	0x40023800
 8006850:	080235d8 	.word	0x080235d8

08006854 <HAL_RCC_GetClockConfig>:
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	220f      	movs	r2, #15
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	4b12      	ldr	r3, [pc, #72]	@ (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0203 	and.w	r2, r3, #3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	605a      	str	r2, [r3, #4]
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	609a      	str	r2, [r3, #8]
 800687c:	4b0c      	ldr	r3, [pc, #48]	@ (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60da      	str	r2, [r3, #12]
 8006888:	4b09      	ldr	r3, [pc, #36]	@ (80068b0 <HAL_RCC_GetClockConfig+0x5c>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	08db      	lsrs	r3, r3, #3
 800688e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	611a      	str	r2, [r3, #16]
 8006896:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <HAL_RCC_GetClockConfig+0x60>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40023c00 	.word	0x40023c00

080068b8 <HAL_RCCEx_PeriphCLKConfig>:
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	2300      	movs	r3, #0
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	2300      	movs	r3, #0
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d012      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80068e0:	4b69      	ldr	r3, [pc, #420]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	4a68      	ldr	r2, [pc, #416]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80068ea:	6093      	str	r3, [r2, #8]
 80068ec:	4b66      	ldr	r3, [pc, #408]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f4:	4964      	ldr	r1, [pc, #400]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006902:	2301      	movs	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d017      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8006912:	4b5d      	ldr	r3, [pc, #372]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006918:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	4959      	ldr	r1, [pc, #356]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006930:	d101      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8006932:	2301      	movs	r3, #1
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800693e:	2301      	movs	r3, #1
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d017      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800694e:	4b4e      	ldr	r3, [pc, #312]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006954:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695c:	494a      	ldr	r1, [pc, #296]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800696c:	d101      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xba>
 800696e:	2301      	movs	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800697a:	2301      	movs	r3, #1
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800698a:	2301      	movs	r3, #1
 800698c:	61fb      	str	r3, [r7, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 808b 	beq.w	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800699c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	4a39      	ldr	r2, [pc, #228]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80069a8:	4b37      	ldr	r3, [pc, #220]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a34      	ldr	r2, [pc, #208]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80069ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	f7fc ffde 	bl	8003980 <HAL_GetTick>
 80069c4:	6178      	str	r0, [r7, #20]
 80069c6:	e008      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x122>
 80069c8:	f7fc ffda 	bl	8003980 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b64      	cmp	r3, #100	@ 0x64
 80069d4:	d901      	bls.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x122>
 80069d6:	2303      	movs	r3, #3
 80069d8:	e357      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80069da:	4b2c      	ldr	r3, [pc, #176]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d0f0      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80069e6:	4b28      	ldr	r3, [pc, #160]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d035      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d02e      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a04:	4b20      	ldr	r3, [pc, #128]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a12:	4a1d      	ldr	r2, [pc, #116]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a26:	4a18      	ldr	r2, [pc, #96]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006a2c:	4b16      	ldr	r3, [pc, #88]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d114      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006a38:	f7fc ffa2 	bl	8003980 <HAL_GetTick>
 8006a3c:	6178      	str	r0, [r7, #20]
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006a40:	f7fc ff9e 	bl	8003980 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006a52:	2303      	movs	r3, #3
 8006a54:	e319      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006a56:	4b0c      	ldr	r3, [pc, #48]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0ee      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a6e:	d111      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006a70:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006a7c:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a7e:	400b      	ands	r3, r1
 8006a80:	4901      	ldr	r1, [pc, #4]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	608b      	str	r3, [r1, #8]
 8006a86:	e00b      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	40007000 	.word	0x40007000
 8006a90:	0ffffcff 	.word	0x0ffffcff
 8006a94:	4baa      	ldr	r3, [pc, #680]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	4aa9      	ldr	r2, [pc, #676]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a9a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a9e:	6093      	str	r3, [r2, #8]
 8006aa0:	4ba7      	ldr	r3, [pc, #668]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	49a4      	ldr	r1, [pc, #656]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	670b      	str	r3, [r1, #112]	@ 0x70
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d010      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006abe:	4ba0      	ldr	r3, [pc, #640]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ac4:	4a9e      	ldr	r2, [pc, #632]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006ace:	4b9c      	ldr	r3, [pc, #624]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ad0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	4999      	ldr	r1, [pc, #612]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8006aec:	4b94      	ldr	r3, [pc, #592]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afa:	4991      	ldr	r1, [pc, #580]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b0e:	4b8c      	ldr	r3, [pc, #560]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b1c:	4988      	ldr	r1, [pc, #544]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006b30:	4b83      	ldr	r3, [pc, #524]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b3e:	4980      	ldr	r1, [pc, #512]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b52:	4b7b      	ldr	r3, [pc, #492]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b60:	4977      	ldr	r1, [pc, #476]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b74:	4b72      	ldr	r3, [pc, #456]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f023 0203 	bic.w	r2, r3, #3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b82:	496f      	ldr	r1, [pc, #444]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8006b96:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b9c:	f023 020c 	bic.w	r2, r3, #12
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba4:	4966      	ldr	r1, [pc, #408]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x316>
 8006bb8:	4b61      	ldr	r3, [pc, #388]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bbe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc6:	495e      	ldr	r1, [pc, #376]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8006bda:	4b59      	ldr	r3, [pc, #356]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be8:	4955      	ldr	r1, [pc, #340]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006bfc:	4b50      	ldr	r3, [pc, #320]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c0a:	494d      	ldr	r1, [pc, #308]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8006c1e:	4b48      	ldr	r3, [pc, #288]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2c:	4944      	ldr	r1, [pc, #272]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00a      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8006c40:	4b3f      	ldr	r3, [pc, #252]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4e:	493c      	ldr	r1, [pc, #240]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006c62:	4b37      	ldr	r3, [pc, #220]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c70:	4933      	ldr	r1, [pc, #204]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006c84:	4b2e      	ldr	r3, [pc, #184]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c8a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c92:	492b      	ldr	r1, [pc, #172]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x412>
 8006ca6:	4b26      	ldr	r3, [pc, #152]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cb4:	4922      	ldr	r1, [pc, #136]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cc4:	d101      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x412>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x444>
 8006ce6:	4b16      	ldr	r3, [pc, #88]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf4:	4912      	ldr	r1, [pc, #72]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8006d08:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d18:	4909      	ldr	r1, [pc, #36]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d006      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80d9 	beq.w	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8006d34:	4b02      	ldr	r3, [pc, #8]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a01      	ldr	r2, [pc, #4]	@ (8006d40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d3e:	e001      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006d40:	40023800 	.word	0x40023800
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	f7fc fe1b 	bl	8003980 <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]
 8006d4c:	e008      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d4e:	f7fc fe17 	bl	8003980 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b64      	cmp	r3, #100	@ 0x64
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e194      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006d60:	4b6c      	ldr	r3, [pc, #432]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f0      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d021      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11d      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006d80:	4b64      	ldr	r3, [pc, #400]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	4b61      	ldr	r3, [pc, #388]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d94:	0e1b      	lsrs	r3, r3, #24
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	019a      	lsls	r2, r3, #6
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	041b      	lsls	r3, r3, #16
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	061b      	lsls	r3, r3, #24
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	071b      	lsls	r3, r3, #28
 8006db4:	4957      	ldr	r1, [pc, #348]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd0:	d00a      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x530>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d02e      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006de6:	d129      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006de8:	4b4a      	ldr	r3, [pc, #296]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dee:	0c1b      	lsrs	r3, r3, #16
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	4b47      	ldr	r3, [pc, #284]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dfc:	0f1b      	lsrs	r3, r3, #28
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	019a      	lsls	r2, r3, #6
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	431a      	orrs	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	071b      	lsls	r3, r3, #28
 8006e1c:	493d      	ldr	r1, [pc, #244]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006e24:	4b3b      	ldr	r3, [pc, #236]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e2a:	f023 021f 	bic.w	r2, r3, #31
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	3b01      	subs	r3, #1
 8006e34:	4937      	ldr	r1, [pc, #220]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01d      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006e48:	4b32      	ldr	r3, [pc, #200]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e4e:	0e1b      	lsrs	r3, r3, #24
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	4b2f      	ldr	r3, [pc, #188]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e5c:	0f1b      	lsrs	r3, r3, #28
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	019a      	lsls	r2, r3, #6
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	041b      	lsls	r3, r3, #16
 8006e70:	431a      	orrs	r2, r3
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	431a      	orrs	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	071b      	lsls	r3, r3, #28
 8006e7c:	4925      	ldr	r1, [pc, #148]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d011      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	019a      	lsls	r2, r3, #6
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	071b      	lsls	r3, r3, #28
 8006eac:	4919      	ldr	r1, [pc, #100]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8006eb4:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a16      	ldr	r2, [pc, #88]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	f7fc fd5e 	bl	8003980 <HAL_GetTick>
 8006ec4:	6178      	str	r0, [r7, #20]
 8006ec6:	e008      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x622>
 8006ec8:	f7fc fd5a 	bl	8003980 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b64      	cmp	r3, #100	@ 0x64
 8006ed4:	d901      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x622>
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e0d7      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006eda:	4b0e      	ldr	r3, [pc, #56]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	f040 80cd 	bne.w	8007088 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8006eee:	4b09      	ldr	r3, [pc, #36]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a08      	ldr	r2, [pc, #32]	@ (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	f7fc fd41 	bl	8003980 <HAL_GetTick>
 8006efe:	6178      	str	r0, [r7, #20]
 8006f00:	e00a      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8006f02:	f7fc fd3d 	bl	8003980 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b64      	cmp	r3, #100	@ 0x64
 8006f0e:	d903      	bls.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x660>
 8006f10:	2303      	movs	r3, #3
 8006f12:	e0ba      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006f14:	40023800 	.word	0x40023800
 8006f18:	4b5e      	ldr	r3, [pc, #376]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f24:	d0ed      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x64a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x696>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d02e      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d12a      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8006f4e:	4b51      	ldr	r3, [pc, #324]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	0f1b      	lsrs	r3, r3, #28
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	019a      	lsls	r2, r3, #6
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	061b      	lsls	r3, r3, #24
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	071b      	lsls	r3, r3, #28
 8006f82:	4944      	ldr	r1, [pc, #272]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f8a:	4b42      	ldr	r3, [pc, #264]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f90:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	493d      	ldr	r1, [pc, #244]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d022      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb8:	d11d      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006fba:	4b36      	ldr	r3, [pc, #216]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc0:	0e1b      	lsrs	r3, r3, #24
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	4b32      	ldr	r3, [pc, #200]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	0f1b      	lsrs	r3, r3, #28
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	019a      	lsls	r2, r3, #6
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	061b      	lsls	r3, r3, #24
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	071b      	lsls	r3, r3, #28
 8006fee:	4929      	ldr	r1, [pc, #164]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d028      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x79c>
 8007002:	4b24      	ldr	r3, [pc, #144]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007008:	0e1b      	lsrs	r3, r3, #24
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	4b20      	ldr	r3, [pc, #128]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007016:	0c1b      	lsrs	r3, r3, #16
 8007018:	f003 0303 	and.w	r3, r3, #3
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	019a      	lsls	r2, r3, #6
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	431a      	orrs	r2, r3
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	071b      	lsls	r3, r3, #28
 8007036:	4917      	ldr	r1, [pc, #92]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800703e:	4b15      	ldr	r3, [pc, #84]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007040:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007044:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704c:	4911      	ldr	r1, [pc, #68]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007054:	4b0f      	ldr	r3, [pc, #60]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a0e      	ldr	r2, [pc, #56]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800705a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	f7fc fc8e 	bl	8003980 <HAL_GetTick>
 8007064:	6178      	str	r0, [r7, #20]
 8007066:	e008      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007068:	f7fc fc8a 	bl	8003980 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b64      	cmp	r3, #100	@ 0x64
 8007074:	d901      	bls.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 8007076:	2303      	movs	r3, #3
 8007078:	e007      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800707a:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007086:	d1ef      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
 8007088:	2300      	movs	r3, #0
 800708a:	4618      	mov	r0, r3
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800

08007098 <HAL_SPI_Init>:
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_SPI_Init+0x12>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e09d      	b.n	80071e6 <HAL_SPI_Init+0x14e>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d108      	bne.n	80070c4 <HAL_SPI_Init+0x2c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ba:	d009      	beq.n	80070d0 <HAL_SPI_Init+0x38>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	61da      	str	r2, [r3, #28]
 80070c2:	e005      	b.n	80070d0 <HAL_SPI_Init+0x38>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	611a      	str	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	615a      	str	r2, [r3, #20]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <HAL_SPI_Init+0x58>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fb ff0e 	bl	8002f0c <HAL_SPI_MspInit>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007110:	d902      	bls.n	8007118 <HAL_SPI_Init+0x80>
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e002      	b.n	800711e <HAL_SPI_Init+0x86>
 8007118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007126:	d007      	beq.n	8007138 <HAL_SPI_Init+0xa0>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007130:	d002      	beq.n	8007138 <HAL_SPI_Init+0xa0>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	@ 0x28
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	431a      	orrs	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717a:	ea42 0103 	orr.w	r1, r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007182:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	0c1b      	lsrs	r3, r3, #16
 8007194:	f003 0204 	and.w	r2, r3, #4
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	431a      	orrs	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80071b4:	ea42 0103 	orr.w	r1, r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071d4:	61da      	str	r2, [r3, #28]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	661a      	str	r2, [r3, #96]	@ 0x60
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80071e4:	2300      	movs	r3, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_SPI_Transmit>:
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
 80071fe:	2300      	movs	r3, #0
 8007200:	77fb      	strb	r3, [r7, #31]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_SPI_Transmit+0x22>
 800720c:	2302      	movs	r3, #2
 800720e:	e158      	b.n	80074c2 <HAL_SPI_Transmit+0x2d4>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007218:	f7fc fbb2 	bl	8003980 <HAL_GetTick>
 800721c:	61b8      	str	r0, [r7, #24]
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	82fb      	strh	r3, [r7, #22]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b01      	cmp	r3, #1
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x46>
 800722e:	2302      	movs	r3, #2
 8007230:	77fb      	strb	r3, [r7, #31]
 8007232:	e13d      	b.n	80074b0 <HAL_SPI_Transmit+0x2c2>
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_SPI_Transmit+0x52>
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <HAL_SPI_Transmit+0x58>
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e134      	b.n	80074b0 <HAL_SPI_Transmit+0x2c2>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2203      	movs	r2, #3
 800724a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	661a      	str	r2, [r3, #96]	@ 0x60
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	639a      	str	r2, [r3, #56]	@ 0x38
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	@ 0x50
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	64da      	str	r2, [r3, #76]	@ 0x4c
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007290:	d10f      	bne.n	80072b2 <HAL_SPI_Transmit+0xc4>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072bc:	2b40      	cmp	r3, #64	@ 0x40
 80072be:	d007      	beq.n	80072d0 <HAL_SPI_Transmit+0xe2>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072d8:	d94b      	bls.n	8007372 <HAL_SPI_Transmit+0x184>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_SPI_Transmit+0xfa>
 80072e2:	8afb      	ldrh	r3, [r7, #22]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d13e      	bne.n	8007366 <HAL_SPI_Transmit+0x178>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	881a      	ldrh	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f8:	1c9a      	adds	r2, r3, #2
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800730c:	e02b      	b.n	8007366 <HAL_SPI_Transmit+0x178>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b02      	cmp	r3, #2
 800731a:	d112      	bne.n	8007342 <HAL_SPI_Transmit+0x154>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	881a      	ldrh	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60da      	str	r2, [r3, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	1c9a      	adds	r2, r3, #2
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	639a      	str	r2, [r3, #56]	@ 0x38
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	3b01      	subs	r3, #1
 800733a:	b29a      	uxth	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007340:	e011      	b.n	8007366 <HAL_SPI_Transmit+0x178>
 8007342:	f7fc fb1d 	bl	8003980 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	429a      	cmp	r2, r3
 8007350:	d803      	bhi.n	800735a <HAL_SPI_Transmit+0x16c>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d102      	bne.n	8007360 <HAL_SPI_Transmit+0x172>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <HAL_SPI_Transmit+0x178>
 8007360:	2303      	movs	r3, #3
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e0a4      	b.n	80074b0 <HAL_SPI_Transmit+0x2c2>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1ce      	bne.n	800730e <HAL_SPI_Transmit+0x120>
 8007370:	e07c      	b.n	800746c <HAL_SPI_Transmit+0x27e>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <HAL_SPI_Transmit+0x192>
 800737a:	8afb      	ldrh	r3, [r7, #22]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d170      	bne.n	8007462 <HAL_SPI_Transmit+0x274>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	d912      	bls.n	80073b0 <HAL_SPI_Transmit+0x1c2>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60da      	str	r2, [r3, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	@ 0x38
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b02      	subs	r3, #2
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073ae:	e058      	b.n	8007462 <HAL_SPI_Transmit+0x274>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	7812      	ldrb	r2, [r2, #0]
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	3b01      	subs	r3, #1
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073d6:	e044      	b.n	8007462 <HAL_SPI_Transmit+0x274>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d12b      	bne.n	800743e <HAL_SPI_Transmit+0x250>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d912      	bls.n	8007416 <HAL_SPI_Transmit+0x228>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f4:	881a      	ldrh	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	1c9a      	adds	r2, r3, #2
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	@ 0x38
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800740a:	b29b      	uxth	r3, r3
 800740c:	3b02      	subs	r3, #2
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007414:	e025      	b.n	8007462 <HAL_SPI_Transmit+0x274>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	639a      	str	r2, [r3, #56]	@ 0x38
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800743c:	e011      	b.n	8007462 <HAL_SPI_Transmit+0x274>
 800743e:	f7fc fa9f 	bl	8003980 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d803      	bhi.n	8007456 <HAL_SPI_Transmit+0x268>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007454:	d102      	bne.n	800745c <HAL_SPI_Transmit+0x26e>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <HAL_SPI_Transmit+0x274>
 800745c:	2303      	movs	r3, #3
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e026      	b.n	80074b0 <HAL_SPI_Transmit+0x2c2>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1b5      	bne.n	80073d8 <HAL_SPI_Transmit+0x1ea>
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fd07 	bl	8007e84 <SPI_EndRxTxTransaction>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_SPI_Transmit+0x294>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	661a      	str	r2, [r3, #96]	@ 0x60
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <HAL_SPI_Transmit+0x2b2>
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_SPI_Transmit+0x2c0>
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e000      	b.n	80074b0 <HAL_SPI_Transmit+0x2c2>
 80074ae:	bf00      	nop
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80074c0:	7ffb      	ldrb	r3, [r7, #31]
 80074c2:	4618      	mov	r0, r3
 80074c4:	3720      	adds	r7, #32
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_SPI_Receive>:
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b088      	sub	sp, #32
 80074ce:	af02      	add	r7, sp, #8
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	60b9      	str	r1, [r7, #8]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074e6:	d112      	bne.n	800750e <HAL_SPI_Receive+0x44>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10e      	bne.n	800750e <HAL_SPI_Receive+0x44>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2204      	movs	r2, #4
 80074f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80074f8:	88fa      	ldrh	r2, [r7, #6]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4613      	mov	r3, r2
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f910 	bl	800772a <HAL_SPI_TransmitReceive>
 800750a:	4603      	mov	r3, r0
 800750c:	e109      	b.n	8007722 <HAL_SPI_Receive+0x258>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_SPI_Receive+0x52>
 8007518:	2302      	movs	r3, #2
 800751a:	e102      	b.n	8007722 <HAL_SPI_Receive+0x258>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007524:	f7fc fa2c 	bl	8003980 <HAL_GetTick>
 8007528:	6138      	str	r0, [r7, #16]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d002      	beq.n	800753c <HAL_SPI_Receive+0x72>
 8007536:	2302      	movs	r3, #2
 8007538:	75fb      	strb	r3, [r7, #23]
 800753a:	e0e9      	b.n	8007710 <HAL_SPI_Receive+0x246>
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_Receive+0x7e>
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <HAL_SPI_Receive+0x84>
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
 800754c:	e0e0      	b.n	8007710 <HAL_SPI_Receive+0x246>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2204      	movs	r2, #4
 8007552:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	661a      	str	r2, [r3, #96]	@ 0x60
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	641a      	str	r2, [r3, #64]	@ 0x40
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	639a      	str	r2, [r3, #56]	@ 0x38
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	64da      	str	r2, [r3, #76]	@ 0x4c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007598:	d908      	bls.n	80075ac <HAL_SPI_Receive+0xe2>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	e007      	b.n	80075bc <HAL_SPI_Receive+0xf2>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075c4:	d10f      	bne.n	80075e6 <HAL_SPI_Receive+0x11c>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d007      	beq.n	8007604 <HAL_SPI_Receive+0x13a>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800760c:	d867      	bhi.n	80076de <HAL_SPI_Receive+0x214>
 800760e:	e030      	b.n	8007672 <HAL_SPI_Receive+0x1a8>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b01      	cmp	r3, #1
 800761c:	d117      	bne.n	800764e <HAL_SPI_Receive+0x184>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f103 020c 	add.w	r2, r3, #12
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800764c:	e011      	b.n	8007672 <HAL_SPI_Receive+0x1a8>
 800764e:	f7fc f997 	bl	8003980 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d803      	bhi.n	8007666 <HAL_SPI_Receive+0x19c>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d102      	bne.n	800766c <HAL_SPI_Receive+0x1a2>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <HAL_SPI_Receive+0x1a8>
 800766c:	2303      	movs	r3, #3
 800766e:	75fb      	strb	r3, [r7, #23]
 8007670:	e04e      	b.n	8007710 <HAL_SPI_Receive+0x246>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1c8      	bne.n	8007610 <HAL_SPI_Receive+0x146>
 800767e:	e034      	b.n	80076ea <HAL_SPI_Receive+0x220>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d115      	bne.n	80076ba <HAL_SPI_Receive+0x1f0>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007698:	b292      	uxth	r2, r2
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a0:	1c9a      	adds	r2, r3, #2
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80076b8:	e011      	b.n	80076de <HAL_SPI_Receive+0x214>
 80076ba:	f7fc f961 	bl	8003980 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d803      	bhi.n	80076d2 <HAL_SPI_Receive+0x208>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d102      	bne.n	80076d8 <HAL_SPI_Receive+0x20e>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <HAL_SPI_Receive+0x214>
 80076d8:	2303      	movs	r3, #3
 80076da:	75fb      	strb	r3, [r7, #23]
 80076dc:	e018      	b.n	8007710 <HAL_SPI_Receive+0x246>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ca      	bne.n	8007680 <HAL_SPI_Receive+0x1b6>
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fb4c 	bl	8007d8c <SPI_EndRxTransaction>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_SPI_Receive+0x236>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	661a      	str	r2, [r3, #96]	@ 0x60
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SPI_Receive+0x244>
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	e000      	b.n	8007710 <HAL_SPI_Receive+0x246>
 800770e:	bf00      	nop
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_SPI_TransmitReceive>:
 800772a:	b580      	push	{r7, lr}
 800772c:	b08a      	sub	sp, #40	@ 0x28
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	807b      	strh	r3, [r7, #2]
 8007738:	2301      	movs	r3, #1
 800773a:	627b      	str	r3, [r7, #36]	@ 0x24
 800773c:	2300      	movs	r3, #0
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d101      	bne.n	8007750 <HAL_SPI_TransmitReceive+0x26>
 800774c:	2302      	movs	r3, #2
 800774e:	e1fb      	b.n	8007b48 <HAL_SPI_TransmitReceive+0x41e>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007758:	f7fc f912 	bl	8003980 <HAL_GetTick>
 800775c:	61f8      	str	r0, [r7, #28]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007764:	76fb      	strb	r3, [r7, #27]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	827b      	strh	r3, [r7, #18]
 8007770:	887b      	ldrh	r3, [r7, #2]
 8007772:	823b      	strh	r3, [r7, #16]
 8007774:	7efb      	ldrb	r3, [r7, #27]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d00e      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x6e>
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007780:	d106      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x66>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <HAL_SPI_TransmitReceive+0x66>
 800778a:	7efb      	ldrb	r3, [r7, #27]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d003      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x6e>
 8007790:	2302      	movs	r3, #2
 8007792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007796:	e1cd      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x40a>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x80>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x80>
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x88>
 80077aa:	2301      	movs	r3, #1
 80077ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b0:	e1c0      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x40a>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d003      	beq.n	80077c6 <HAL_SPI_TransmitReceive+0x9c>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2205      	movs	r2, #5
 80077c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	887a      	ldrh	r2, [r7, #2]
 80077de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	887a      	ldrh	r2, [r7, #2]
 80077ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	887a      	ldrh	r2, [r7, #2]
 80077f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007808:	d802      	bhi.n	8007810 <HAL_SPI_TransmitReceive+0xe6>
 800780a:	8a3b      	ldrh	r3, [r7, #16]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d908      	bls.n	8007822 <HAL_SPI_TransmitReceive+0xf8>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800781e:	605a      	str	r2, [r3, #4]
 8007820:	e007      	b.n	8007832 <HAL_SPI_TransmitReceive+0x108>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b40      	cmp	r3, #64	@ 0x40
 800783e:	d007      	beq.n	8007850 <HAL_SPI_TransmitReceive+0x126>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007858:	d97c      	bls.n	8007954 <HAL_SPI_TransmitReceive+0x22a>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_SPI_TransmitReceive+0x13e>
 8007862:	8a7b      	ldrh	r3, [r7, #18]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d169      	bne.n	800793c <HAL_SPI_TransmitReceive+0x212>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	881a      	ldrh	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	60da      	str	r2, [r3, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007878:	1c9a      	adds	r2, r3, #2
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	639a      	str	r2, [r3, #56]	@ 0x38
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	3b01      	subs	r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800788c:	e056      	b.n	800793c <HAL_SPI_TransmitReceive+0x212>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b02      	cmp	r3, #2
 800789a:	d11b      	bne.n	80078d4 <HAL_SPI_TransmitReceive+0x1aa>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d016      	beq.n	80078d4 <HAL_SPI_TransmitReceive+0x1aa>
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d113      	bne.n	80078d4 <HAL_SPI_TransmitReceive+0x1aa>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b0:	881a      	ldrh	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60da      	str	r2, [r3, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078bc:	1c9a      	adds	r2, r3, #2
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078d0:	2300      	movs	r3, #0
 80078d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d11c      	bne.n	800791c <HAL_SPI_TransmitReceive+0x1f2>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d016      	beq.n	800791c <HAL_SPI_TransmitReceive+0x1f2>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f8:	b292      	uxth	r2, r2
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	1c9a      	adds	r2, r3, #2
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	641a      	str	r2, [r3, #64]	@ 0x40
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007918:	2301      	movs	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	@ 0x24
 800791c:	f7fc f830 	bl	8003980 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007928:	429a      	cmp	r2, r3
 800792a:	d807      	bhi.n	800793c <HAL_SPI_TransmitReceive+0x212>
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d003      	beq.n	800793c <HAL_SPI_TransmitReceive+0x212>
 8007934:	2303      	movs	r3, #3
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793a:	e0fb      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x40a>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1a3      	bne.n	800788e <HAL_SPI_TransmitReceive+0x164>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800794c:	b29b      	uxth	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d19d      	bne.n	800788e <HAL_SPI_TransmitReceive+0x164>
 8007952:	e0df      	b.n	8007b14 <HAL_SPI_TransmitReceive+0x3ea>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_SPI_TransmitReceive+0x23a>
 800795c:	8a7b      	ldrh	r3, [r7, #18]
 800795e:	2b01      	cmp	r3, #1
 8007960:	f040 80cb 	bne.w	8007afa <HAL_SPI_TransmitReceive+0x3d0>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b01      	cmp	r3, #1
 800796c:	d912      	bls.n	8007994 <HAL_SPI_TransmitReceive+0x26a>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	881a      	ldrh	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	1c9a      	adds	r2, r3, #2
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	639a      	str	r2, [r3, #56]	@ 0x38
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b02      	subs	r3, #2
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007992:	e0b2      	b.n	8007afa <HAL_SPI_TransmitReceive+0x3d0>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	7812      	ldrb	r2, [r2, #0]
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079ba:	e09e      	b.n	8007afa <HAL_SPI_TransmitReceive+0x3d0>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d134      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x30a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02f      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x30a>
 80079d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d12c      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x30a>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d912      	bls.n	8007a0a <HAL_SPI_TransmitReceive+0x2e0>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e8:	881a      	ldrh	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b02      	subs	r3, #2
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a08:	e012      	b.n	8007a30 <HAL_SPI_TransmitReceive+0x306>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	330c      	adds	r3, #12
 8007a14:	7812      	ldrb	r2, [r2, #0]
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a30:	2300      	movs	r3, #0
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 0301 	and.w	r3, r3, #1
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d148      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x3aa>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d042      	beq.n	8007ad4 <HAL_SPI_TransmitReceive+0x3aa>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d923      	bls.n	8007aa2 <HAL_SPI_TransmitReceive+0x378>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	b292      	uxth	r2, r2
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b02      	subs	r3, #2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d81f      	bhi.n	8007ad0 <HAL_SPI_TransmitReceive+0x3a6>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007a9e:	605a      	str	r2, [r3, #4]
 8007aa0:	e016      	b.n	8007ad0 <HAL_SPI_TransmitReceive+0x3a6>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f103 020c 	add.w	r2, r3, #12
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab8:	1c5a      	adds	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	641a      	str	r2, [r3, #64]	@ 0x40
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad4:	f7fb ff54 	bl	8003980 <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d803      	bhi.n	8007aec <HAL_SPI_TransmitReceive+0x3c2>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d102      	bne.n	8007af2 <HAL_SPI_TransmitReceive+0x3c8>
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x3d0>
 8007af2:	2303      	movs	r3, #3
 8007af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af8:	e01c      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x40a>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f47f af5b 	bne.w	80079bc <HAL_SPI_TransmitReceive+0x292>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f47f af54 	bne.w	80079bc <HAL_SPI_TransmitReceive+0x292>
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f9b3 	bl	8007e84 <SPI_EndRxTxTransaction>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x408>
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b30:	e000      	b.n	8007b34 <HAL_SPI_TransmitReceive+0x40a>
 8007b32:	bf00      	nop
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007b44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3728      	adds	r7, #40	@ 0x28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <SPI_WaitFlagStateUntilTimeout>:
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	71fb      	strb	r3, [r7, #7]
 8007b60:	f7fb ff0e 	bl	8003980 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	f7fb ff06 	bl	8003980 <HAL_GetTick>
 8007b74:	61b8      	str	r0, [r7, #24]
 8007b76:	4b39      	ldr	r3, [pc, #228]	@ (8007c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	015b      	lsls	r3, r3, #5
 8007b7c:	0d1b      	lsrs	r3, r3, #20
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	fb02 f303 	mul.w	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e054      	b.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8e:	d050      	beq.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8007b90:	f7fb fef6 	bl	8003980 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d902      	bls.n	8007ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bb4:	605a      	str	r2, [r3, #4]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bbe:	d111      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc8:	d004      	beq.n	8007bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd2:	d107      	bne.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be2:	601a      	str	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bec:	d10f      	bne.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e017      	b.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0x102>
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61fb      	str	r3, [r7, #28]
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	bf0c      	ite	eq
 8007c42:	2301      	moveq	r3, #1
 8007c44:	2300      	movne	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d19b      	bne.n	8007b88 <SPI_WaitFlagStateUntilTimeout+0x38>
 8007c50:	2300      	movs	r3, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000058 	.word	0x20000058

08007c60 <SPI_WaitFifoStateUntilTimeout>:
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	@ 0x28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
 8007c72:	f7fb fe85 	bl	8003980 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	4413      	add	r3, r2
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c82:	f7fb fe7d 	bl	8003980 <HAL_GetTick>
 8007c86:	6238      	str	r0, [r7, #32]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	4b3d      	ldr	r3, [pc, #244]	@ (8007d88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	00da      	lsls	r2, r3, #3
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	0d1b      	lsrs	r3, r3, #20
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca2:	fb02 f303 	mul.w	r3, r2, r3
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	e060      	b.n	8007d6c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007cb0:	d107      	bne.n	8007cc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	75fb      	strb	r3, [r7, #23]
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d050      	beq.n	8007d6c <SPI_WaitFifoStateUntilTimeout+0x10c>
 8007cca:	f7fb fe59 	bl	8003980 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d902      	bls.n	8007ce0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d13d      	bne.n	8007d5c <SPI_WaitFifoStateUntilTimeout+0xfc>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf8:	d111      	bne.n	8007d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d02:	d004      	beq.n	8007d0e <SPI_WaitFifoStateUntilTimeout+0xae>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0c:	d107      	bne.n	8007d1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d26:	d10f      	bne.n	8007d48 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e010      	b.n	8007d7e <SPI_WaitFifoStateUntilTimeout+0x11e>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <SPI_WaitFifoStateUntilTimeout+0x106>
 8007d62:	2300      	movs	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	61bb      	str	r3, [r7, #24]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689a      	ldr	r2, [r3, #8]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d196      	bne.n	8007caa <SPI_WaitFifoStateUntilTimeout+0x4a>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3728      	adds	r7, #40	@ 0x28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000058 	.word	0x20000058

08007d8c <SPI_EndRxTransaction>:
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007da0:	d111      	bne.n	8007dc6 <SPI_EndRxTransaction+0x3a>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007daa:	d004      	beq.n	8007db6 <SPI_EndRxTransaction+0x2a>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007db4:	d107      	bne.n	8007dc6 <SPI_EndRxTransaction+0x3a>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dce:	d112      	bne.n	8007df6 <SPI_EndRxTransaction+0x6a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2180      	movs	r1, #128	@ 0x80
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff feb8 	bl	8007b50 <SPI_WaitFlagStateUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d021      	beq.n	8007e2a <SPI_EndRxTransaction+0x9e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	661a      	str	r2, [r3, #96]	@ 0x60
 8007df2:	2303      	movs	r3, #3
 8007df4:	e03d      	b.n	8007e72 <SPI_EndRxTransaction+0xe6>
 8007df6:	4b21      	ldr	r3, [pc, #132]	@ (8007e7c <SPI_EndRxTransaction+0xf0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a21      	ldr	r2, [pc, #132]	@ (8007e80 <SPI_EndRxTransaction+0xf4>)
 8007dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007e00:	0d5b      	lsrs	r3, r3, #21
 8007e02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <SPI_EndRxTransaction+0x9c>
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e22:	2b80      	cmp	r3, #128	@ 0x80
 8007e24:	d0f2      	beq.n	8007e0c <SPI_EndRxTransaction+0x80>
 8007e26:	e000      	b.n	8007e2a <SPI_EndRxTransaction+0x9e>
 8007e28:	bf00      	nop
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e32:	d11d      	bne.n	8007e70 <SPI_EndRxTransaction+0xe4>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e3c:	d004      	beq.n	8007e48 <SPI_EndRxTransaction+0xbc>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e46:	d113      	bne.n	8007e70 <SPI_EndRxTransaction+0xe4>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f7ff ff03 	bl	8007c60 <SPI_WaitFifoStateUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <SPI_EndRxTransaction+0xe4>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	661a      	str	r2, [r3, #96]	@ 0x60
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e000      	b.n	8007e72 <SPI_EndRxTransaction+0xe6>
 8007e70:	2300      	movs	r3, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000058 	.word	0x20000058
 8007e80:	165e9f81 	.word	0x165e9f81

08007e84 <SPI_EndRxTxTransaction>:
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff fedf 	bl	8007c60 <SPI_WaitFifoStateUntilTimeout>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <SPI_EndRxTxTransaction+0x34>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eac:	f043 0220 	orr.w	r2, r3, #32
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	661a      	str	r2, [r3, #96]	@ 0x60
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e046      	b.n	8007f46 <SPI_EndRxTxTransaction+0xc2>
 8007eb8:	4b25      	ldr	r3, [pc, #148]	@ (8007f50 <SPI_EndRxTxTransaction+0xcc>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a25      	ldr	r2, [pc, #148]	@ (8007f54 <SPI_EndRxTxTransaction+0xd0>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	0d5b      	lsrs	r3, r3, #21
 8007ec4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ed6:	d112      	bne.n	8007efe <SPI_EndRxTxTransaction+0x7a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2180      	movs	r1, #128	@ 0x80
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff fe34 	bl	8007b50 <SPI_WaitFlagStateUntilTimeout>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d016      	beq.n	8007f1c <SPI_EndRxTxTransaction+0x98>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef2:	f043 0220 	orr.w	r2, r3, #32
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	661a      	str	r2, [r3, #96]	@ 0x60
 8007efa:	2303      	movs	r3, #3
 8007efc:	e023      	b.n	8007f46 <SPI_EndRxTxTransaction+0xc2>
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <SPI_EndRxTxTransaction+0x96>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f14:	2b80      	cmp	r3, #128	@ 0x80
 8007f16:	d0f2      	beq.n	8007efe <SPI_EndRxTxTransaction+0x7a>
 8007f18:	e000      	b.n	8007f1c <SPI_EndRxTxTransaction+0x98>
 8007f1a:	bf00      	nop
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f7ff fe99 	bl	8007c60 <SPI_WaitFifoStateUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d007      	beq.n	8007f44 <SPI_EndRxTxTransaction+0xc0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f38:	f043 0220 	orr.w	r2, r3, #32
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007f40:	2303      	movs	r3, #3
 8007f42:	e000      	b.n	8007f46 <SPI_EndRxTxTransaction+0xc2>
 8007f44:	2300      	movs	r3, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000058 	.word	0x20000058
 8007f54:	165e9f81 	.word	0x165e9f81

08007f58 <HAL_TIM_Base_Init>:
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_TIM_Base_Init+0x12>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e049      	b.n	8007ffe <HAL_TIM_Base_Init+0xa6>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <HAL_TIM_Base_Init+0x2c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fb fa52 	bl	8003428 <HAL_TIM_Base_MspInit>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3304      	adds	r3, #4
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f000 fc34 	bl	8008804 <TIM_Base_SetConfig>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <HAL_TIM_Base_Start_IT>:
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d001      	beq.n	8008020 <HAL_TIM_Base_Start_IT+0x18>
 800801c:	2301      	movs	r3, #1
 800801e:	e054      	b.n	80080ca <HAL_TIM_Base_Start_IT+0xc2>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a26      	ldr	r2, [pc, #152]	@ (80080d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d022      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800804a:	d01d      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a22      	ldr	r2, [pc, #136]	@ (80080dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d018      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a21      	ldr	r2, [pc, #132]	@ (80080e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d013      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1f      	ldr	r2, [pc, #124]	@ (80080e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00e      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1e      	ldr	r2, [pc, #120]	@ (80080e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d009      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1c      	ldr	r2, [pc, #112]	@ (80080ec <HAL_TIM_Base_Start_IT+0xe4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0x80>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1b      	ldr	r2, [pc, #108]	@ (80080f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d115      	bne.n	80080b4 <HAL_TIM_Base_Start_IT+0xac>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	4b19      	ldr	r3, [pc, #100]	@ (80080f4 <HAL_TIM_Base_Start_IT+0xec>)
 8008090:	4013      	ands	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d015      	beq.n	80080c6 <HAL_TIM_Base_Start_IT+0xbe>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080a0:	d011      	beq.n	80080c6 <HAL_TIM_Base_Start_IT+0xbe>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0201 	orr.w	r2, r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	e008      	b.n	80080c6 <HAL_TIM_Base_Start_IT+0xbe>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	e000      	b.n	80080c8 <HAL_TIM_Base_Start_IT+0xc0>
 80080c6:	bf00      	nop
 80080c8:	2300      	movs	r3, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40000400 	.word	0x40000400
 80080e0:	40000800 	.word	0x40000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	40010400 	.word	0x40010400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40001800 	.word	0x40001800
 80080f4:	00010007 	.word	0x00010007

080080f8 <HAL_TIM_PWM_Init>:
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_TIM_PWM_Init+0x12>
 8008106:	2301      	movs	r3, #1
 8008108:	e049      	b.n	800819e <HAL_TIM_PWM_Init+0xa6>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_TIM_PWM_Init+0x2c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f841 	bl	80081a6 <HAL_TIM_PWM_MspInit>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f000 fb64 	bl	8008804 <TIM_Base_SetConfig>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800819c:	2300      	movs	r3, #0
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_PWM_MspInit>:
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_IRQHandler>:
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d122      	bne.n	8008216 <HAL_TIM_IRQHandler+0x5c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d11b      	bne.n	8008216 <HAL_TIM_IRQHandler+0x5c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f06f 0202 	mvn.w	r2, #2
 80081e6:	611a      	str	r2, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	771a      	strb	r2, [r3, #28]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_TIM_IRQHandler+0x4a>
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fae3 	bl	80087c8 <HAL_TIM_IC_CaptureCallback>
 8008202:	e005      	b.n	8008210 <HAL_TIM_IRQHandler+0x56>
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fad5 	bl	80087b4 <HAL_TIM_OC_DelayElapsedCallback>
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fae6 	bl	80087dc <HAL_TIM_PWM_PulseFinishedCallback>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	771a      	strb	r2, [r3, #28]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b04      	cmp	r3, #4
 8008222:	d122      	bne.n	800826a <HAL_TIM_IRQHandler+0xb0>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d11b      	bne.n	800826a <HAL_TIM_IRQHandler+0xb0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f06f 0204 	mvn.w	r2, #4
 800823a:	611a      	str	r2, [r3, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	771a      	strb	r2, [r3, #28]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <HAL_TIM_IRQHandler+0x9e>
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fab9 	bl	80087c8 <HAL_TIM_IC_CaptureCallback>
 8008256:	e005      	b.n	8008264 <HAL_TIM_IRQHandler+0xaa>
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 faab 	bl	80087b4 <HAL_TIM_OC_DelayElapsedCallback>
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fabc 	bl	80087dc <HAL_TIM_PWM_PulseFinishedCallback>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	771a      	strb	r2, [r3, #28]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b08      	cmp	r3, #8
 8008276:	d122      	bne.n	80082be <HAL_TIM_IRQHandler+0x104>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b08      	cmp	r3, #8
 8008284:	d11b      	bne.n	80082be <HAL_TIM_IRQHandler+0x104>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f06f 0208 	mvn.w	r2, #8
 800828e:	611a      	str	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2204      	movs	r2, #4
 8008294:	771a      	strb	r2, [r3, #28]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d003      	beq.n	80082ac <HAL_TIM_IRQHandler+0xf2>
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa8f 	bl	80087c8 <HAL_TIM_IC_CaptureCallback>
 80082aa:	e005      	b.n	80082b8 <HAL_TIM_IRQHandler+0xfe>
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fa81 	bl	80087b4 <HAL_TIM_OC_DelayElapsedCallback>
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa92 	bl	80087dc <HAL_TIM_PWM_PulseFinishedCallback>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	771a      	strb	r2, [r3, #28]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f003 0310 	and.w	r3, r3, #16
 80082c8:	2b10      	cmp	r3, #16
 80082ca:	d122      	bne.n	8008312 <HAL_TIM_IRQHandler+0x158>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f003 0310 	and.w	r3, r3, #16
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d11b      	bne.n	8008312 <HAL_TIM_IRQHandler+0x158>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f06f 0210 	mvn.w	r2, #16
 80082e2:	611a      	str	r2, [r3, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2208      	movs	r2, #8
 80082e8:	771a      	strb	r2, [r3, #28]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_TIM_IRQHandler+0x146>
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fa65 	bl	80087c8 <HAL_TIM_IC_CaptureCallback>
 80082fe:	e005      	b.n	800830c <HAL_TIM_IRQHandler+0x152>
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fa57 	bl	80087b4 <HAL_TIM_OC_DelayElapsedCallback>
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 fa68 	bl	80087dc <HAL_TIM_PWM_PulseFinishedCallback>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	771a      	strb	r2, [r3, #28]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b01      	cmp	r3, #1
 800831e:	d10e      	bne.n	800833e <HAL_TIM_IRQHandler+0x184>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b01      	cmp	r3, #1
 800832c:	d107      	bne.n	800833e <HAL_TIM_IRQHandler+0x184>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f06f 0201 	mvn.w	r2, #1
 8008336:	611a      	str	r2, [r3, #16]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7fa fd91 	bl	8002e60 <HAL_TIM_PeriodElapsedCallback>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008348:	2b80      	cmp	r3, #128	@ 0x80
 800834a:	d10e      	bne.n	800836a <HAL_TIM_IRQHandler+0x1b0>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b80      	cmp	r3, #128	@ 0x80
 8008358:	d107      	bne.n	800836a <HAL_TIM_IRQHandler+0x1b0>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008362:	611a      	str	r2, [r3, #16]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fe7d 	bl	8009064 <HAL_TIMEx_BreakCallback>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008378:	d10e      	bne.n	8008398 <HAL_TIM_IRQHandler+0x1de>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008384:	2b80      	cmp	r3, #128	@ 0x80
 8008386:	d107      	bne.n	8008398 <HAL_TIM_IRQHandler+0x1de>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008390:	611a      	str	r2, [r3, #16]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fe70 	bl	8009078 <HAL_TIMEx_Break2Callback>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a2:	2b40      	cmp	r3, #64	@ 0x40
 80083a4:	d10e      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x20a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b0:	2b40      	cmp	r3, #64	@ 0x40
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x20a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083bc:	611a      	str	r2, [r3, #16]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fa16 	bl	80087f0 <HAL_TIM_TriggerCallback>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d10e      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x236>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0320 	and.w	r3, r3, #32
 80083dc:	2b20      	cmp	r3, #32
 80083de:	d107      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x236>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0220 	mvn.w	r2, #32
 80083e8:	611a      	str	r2, [r3, #16]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fe30 	bl	8009050 <HAL_TIMEx_CommutCallback>
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_TIM_PWM_ConfigChannel>:
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	2300      	movs	r3, #0
 8008406:	75fb      	strb	r3, [r7, #23]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008412:	2302      	movs	r3, #2
 8008414:	e0ff      	b.n	8008616 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b14      	cmp	r3, #20
 8008422:	f200 80f0 	bhi.w	8008606 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008426:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842c:	08008481 	.word	0x08008481
 8008430:	08008607 	.word	0x08008607
 8008434:	08008607 	.word	0x08008607
 8008438:	08008607 	.word	0x08008607
 800843c:	080084c1 	.word	0x080084c1
 8008440:	08008607 	.word	0x08008607
 8008444:	08008607 	.word	0x08008607
 8008448:	08008607 	.word	0x08008607
 800844c:	08008503 	.word	0x08008503
 8008450:	08008607 	.word	0x08008607
 8008454:	08008607 	.word	0x08008607
 8008458:	08008607 	.word	0x08008607
 800845c:	08008543 	.word	0x08008543
 8008460:	08008607 	.word	0x08008607
 8008464:	08008607 	.word	0x08008607
 8008468:	08008607 	.word	0x08008607
 800846c:	08008585 	.word	0x08008585
 8008470:	08008607 	.word	0x08008607
 8008474:	08008607 	.word	0x08008607
 8008478:	08008607 	.word	0x08008607
 800847c:	080085c5 	.word	0x080085c5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fa5c 	bl	8008944 <TIM_OC1_SetConfig>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0208 	orr.w	r2, r2, #8
 800849a:	619a      	str	r2, [r3, #24]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0204 	bic.w	r2, r2, #4
 80084aa:	619a      	str	r2, [r3, #24]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6999      	ldr	r1, [r3, #24]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	691a      	ldr	r2, [r3, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	619a      	str	r2, [r3, #24]
 80084be:	e0a5      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 faae 	bl	8008a28 <TIM_OC2_SetConfig>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084da:	619a      	str	r2, [r3, #24]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	699a      	ldr	r2, [r3, #24]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084ea:	619a      	str	r2, [r3, #24]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6999      	ldr	r1, [r3, #24]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	021a      	lsls	r2, r3, #8
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	619a      	str	r2, [r3, #24]
 8008500:	e084      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fb05 	bl	8008b18 <TIM_OC3_SetConfig>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	69da      	ldr	r2, [r3, #28]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	61da      	str	r2, [r3, #28]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f022 0204 	bic.w	r2, r2, #4
 800852c:	61da      	str	r2, [r3, #28]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69d9      	ldr	r1, [r3, #28]
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	691a      	ldr	r2, [r3, #16]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	61da      	str	r2, [r3, #28]
 8008540:	e064      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68b9      	ldr	r1, [r7, #8]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 fb5b 	bl	8008c04 <TIM_OC4_SetConfig>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69da      	ldr	r2, [r3, #28]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800855c:	61da      	str	r2, [r3, #28]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69da      	ldr	r2, [r3, #28]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856c:	61da      	str	r2, [r3, #28]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	69d9      	ldr	r1, [r3, #28]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	021a      	lsls	r2, r3, #8
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	61da      	str	r2, [r3, #28]
 8008582:	e043      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fb92 	bl	8008cb4 <TIM_OC5_SetConfig>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0208 	orr.w	r2, r2, #8
 800859e:	655a      	str	r2, [r3, #84]	@ 0x54
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0204 	bic.w	r2, r2, #4
 80085ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80085c2:	e023      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fbc4 	bl	8008d58 <TIM_OC6_SetConfig>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085de:	655a      	str	r2, [r3, #84]	@ 0x54
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	021a      	lsls	r2, r3, #8
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	655a      	str	r2, [r3, #84]	@ 0x54
 8008604:	e002      	b.n	800860c <HAL_TIM_PWM_ConfigChannel+0x214>
 8008606:	2301      	movs	r3, #1
 8008608:	75fb      	strb	r3, [r7, #23]
 800860a:	bf00      	nop
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	4618      	mov	r0, r3
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <HAL_TIM_ConfigClockSource>:
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_TIM_ConfigClockSource+0x1c>
 8008638:	2302      	movs	r3, #2
 800863a:	e0b4      	b.n	80087a6 <HAL_TIM_ConfigClockSource+0x186>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	60bb      	str	r3, [r7, #8]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	4b56      	ldr	r3, [pc, #344]	@ (80087b0 <HAL_TIM_ConfigClockSource+0x190>)
 8008658:	4013      	ands	r3, r2
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008674:	d03e      	beq.n	80086f4 <HAL_TIM_ConfigClockSource+0xd4>
 8008676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800867a:	f200 8087 	bhi.w	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800867e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008682:	f000 8086 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x172>
 8008686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868a:	d87f      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800868c:	2b70      	cmp	r3, #112	@ 0x70
 800868e:	d01a      	beq.n	80086c6 <HAL_TIM_ConfigClockSource+0xa6>
 8008690:	2b70      	cmp	r3, #112	@ 0x70
 8008692:	d87b      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 8008694:	2b60      	cmp	r3, #96	@ 0x60
 8008696:	d050      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x11a>
 8008698:	2b60      	cmp	r3, #96	@ 0x60
 800869a:	d877      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 800869c:	2b50      	cmp	r3, #80	@ 0x50
 800869e:	d03c      	beq.n	800871a <HAL_TIM_ConfigClockSource+0xfa>
 80086a0:	2b50      	cmp	r3, #80	@ 0x50
 80086a2:	d873      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086a4:	2b40      	cmp	r3, #64	@ 0x40
 80086a6:	d058      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x13a>
 80086a8:	2b40      	cmp	r3, #64	@ 0x40
 80086aa:	d86f      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086ac:	2b30      	cmp	r3, #48	@ 0x30
 80086ae:	d064      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086b0:	2b30      	cmp	r3, #48	@ 0x30
 80086b2:	d86b      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086b4:	2b20      	cmp	r3, #32
 80086b6:	d060      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d867      	bhi.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d05c      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d05a      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x15a>
 80086c4:	e062      	b.n	800878c <HAL_TIM_ConfigClockSource+0x16c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	6899      	ldr	r1, [r3, #8]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f000 fc0d 	bl	8008ef4 <TIM_ETR_SetConfig>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	609a      	str	r2, [r3, #8]
 80086f2:	e04f      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	6899      	ldr	r1, [r3, #8]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f000 fbf6 	bl	8008ef4 <TIM_ETR_SetConfig>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	689a      	ldr	r2, [r3, #8]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008716:	609a      	str	r2, [r3, #8]
 8008718:	e03c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6859      	ldr	r1, [r3, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	461a      	mov	r2, r3
 8008728:	f000 fb6a 	bl	8008e00 <TIM_TI1_ConfigInputStage>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2150      	movs	r1, #80	@ 0x50
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fbc3 	bl	8008ebe <TIM_ITRx_SetConfig>
 8008738:	e02c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fb89 	bl	8008e5e <TIM_TI2_ConfigInputStage>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2160      	movs	r1, #96	@ 0x60
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fbb3 	bl	8008ebe <TIM_ITRx_SetConfig>
 8008758:	e01c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fb4a 	bl	8008e00 <TIM_TI1_ConfigInputStage>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2140      	movs	r1, #64	@ 0x40
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fba3 	bl	8008ebe <TIM_ITRx_SetConfig>
 8008778:	e00c      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4619      	mov	r1, r3
 8008784:	4610      	mov	r0, r2
 8008786:	f000 fb9a 	bl	8008ebe <TIM_ITRx_SetConfig>
 800878a:	e003      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
 8008790:	e000      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x174>
 8008792:	bf00      	nop
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	fffeff88 	.word	0xfffeff88

080087b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIM_IC_CaptureCallback>:
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_TIM_PWM_PulseFinishedCallback>:
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_TIM_TriggerCallback>:
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <TIM_Base_SetConfig>:
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a40      	ldr	r2, [pc, #256]	@ (8008918 <TIM_Base_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008822:	d00f      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a3d      	ldr	r2, [pc, #244]	@ (800891c <TIM_Base_SetConfig+0x118>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a3c      	ldr	r2, [pc, #240]	@ (8008920 <TIM_Base_SetConfig+0x11c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a3b      	ldr	r2, [pc, #236]	@ (8008924 <TIM_Base_SetConfig+0x120>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_Base_SetConfig+0x40>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a3a      	ldr	r2, [pc, #232]	@ (8008928 <TIM_Base_SetConfig+0x124>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d108      	bne.n	8008856 <TIM_Base_SetConfig+0x52>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884a:	60fb      	str	r3, [r7, #12]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a2f      	ldr	r2, [pc, #188]	@ (8008918 <TIM_Base_SetConfig+0x114>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d02b      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008864:	d027      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a2c      	ldr	r2, [pc, #176]	@ (800891c <TIM_Base_SetConfig+0x118>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d023      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a2b      	ldr	r2, [pc, #172]	@ (8008920 <TIM_Base_SetConfig+0x11c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d01f      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a2a      	ldr	r2, [pc, #168]	@ (8008924 <TIM_Base_SetConfig+0x120>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d01b      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a29      	ldr	r2, [pc, #164]	@ (8008928 <TIM_Base_SetConfig+0x124>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d017      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a28      	ldr	r2, [pc, #160]	@ (800892c <TIM_Base_SetConfig+0x128>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a27      	ldr	r2, [pc, #156]	@ (8008930 <TIM_Base_SetConfig+0x12c>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d00f      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a26      	ldr	r2, [pc, #152]	@ (8008934 <TIM_Base_SetConfig+0x130>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00b      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a25      	ldr	r2, [pc, #148]	@ (8008938 <TIM_Base_SetConfig+0x134>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d007      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a24      	ldr	r2, [pc, #144]	@ (800893c <TIM_Base_SetConfig+0x138>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_Base_SetConfig+0xb2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a23      	ldr	r2, [pc, #140]	@ (8008940 <TIM_Base_SetConfig+0x13c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d108      	bne.n	80088c8 <TIM_Base_SetConfig+0xc4>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	689a      	ldr	r2, [r3, #8]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008918 <TIM_Base_SetConfig+0x114>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d003      	beq.n	80088fc <TIM_Base_SetConfig+0xf8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008928 <TIM_Base_SetConfig+0x124>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d103      	bne.n	8008904 <TIM_Base_SetConfig+0x100>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	@ 0x30
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	615a      	str	r2, [r3, #20]
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40010400 	.word	0x40010400
 800892c:	40014000 	.word	0x40014000
 8008930:	40014400 	.word	0x40014400
 8008934:	40014800 	.word	0x40014800
 8008938:	40001800 	.word	0x40001800
 800893c:	40001c00 	.word	0x40001c00
 8008940:	40002000 	.word	0x40002000

08008944 <TIM_OC1_SetConfig>:
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	f023 0201 	bic.w	r2, r3, #1
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	621a      	str	r2, [r3, #32]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <TIM_OC1_SetConfig+0xd8>)
 8008970:	4013      	ands	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f023 0302 	bic.w	r3, r3, #2
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a21      	ldr	r2, [pc, #132]	@ (8008a20 <TIM_OC1_SetConfig+0xdc>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <TIM_OC1_SetConfig+0x64>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a20      	ldr	r2, [pc, #128]	@ (8008a24 <TIM_OC1_SetConfig+0xe0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d10c      	bne.n	80089c2 <TIM_OC1_SetConfig+0x7e>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f023 0308 	bic.w	r3, r3, #8
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 0304 	bic.w	r3, r3, #4
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a16      	ldr	r2, [pc, #88]	@ (8008a20 <TIM_OC1_SetConfig+0xdc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC1_SetConfig+0x8e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a15      	ldr	r2, [pc, #84]	@ (8008a24 <TIM_OC1_SetConfig+0xe0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d111      	bne.n	80089f6 <TIM_OC1_SetConfig+0xb2>
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089d8:	613b      	str	r3, [r7, #16]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	605a      	str	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	619a      	str	r2, [r3, #24]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	621a      	str	r2, [r3, #32]
 8008a10:	bf00      	nop
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	fffeff8f 	.word	0xfffeff8f
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40010400 	.word	0x40010400

08008a28 <TIM_OC2_SetConfig>:
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	f023 0210 	bic.w	r2, r3, #16
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	621a      	str	r2, [r3, #32]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	613b      	str	r3, [r7, #16]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4b2e      	ldr	r3, [pc, #184]	@ (8008b0c <TIM_OC2_SetConfig+0xe4>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f023 0320 	bic.w	r3, r3, #32
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	011b      	lsls	r3, r3, #4
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a23      	ldr	r2, [pc, #140]	@ (8008b10 <TIM_OC2_SetConfig+0xe8>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC2_SetConfig+0x68>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a22      	ldr	r2, [pc, #136]	@ (8008b14 <TIM_OC2_SetConfig+0xec>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10d      	bne.n	8008aac <TIM_OC2_SetConfig+0x84>
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a18      	ldr	r2, [pc, #96]	@ (8008b10 <TIM_OC2_SetConfig+0xe8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC2_SetConfig+0x94>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	@ (8008b14 <TIM_OC2_SetConfig+0xec>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d113      	bne.n	8008ae4 <TIM_OC2_SetConfig+0xbc>
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	605a      	str	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	619a      	str	r2, [r3, #24]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	621a      	str	r2, [r3, #32]
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	feff8fff 	.word	0xfeff8fff
 8008b10:	40010000 	.word	0x40010000
 8008b14:	40010400 	.word	0x40010400

08008b18 <TIM_OC3_SetConfig>:
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	621a      	str	r2, [r3, #32]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	60fb      	str	r3, [r7, #12]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf8 <TIM_OC3_SetConfig+0xe0>)
 8008b44:	4013      	ands	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a22      	ldr	r2, [pc, #136]	@ (8008bfc <TIM_OC3_SetConfig+0xe4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d003      	beq.n	8008b7e <TIM_OC3_SetConfig+0x66>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a21      	ldr	r2, [pc, #132]	@ (8008c00 <TIM_OC3_SetConfig+0xe8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d10d      	bne.n	8008b9a <TIM_OC3_SetConfig+0x82>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a17      	ldr	r2, [pc, #92]	@ (8008bfc <TIM_OC3_SetConfig+0xe4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_OC3_SetConfig+0x92>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a16      	ldr	r2, [pc, #88]	@ (8008c00 <TIM_OC3_SetConfig+0xe8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d113      	bne.n	8008bd2 <TIM_OC3_SetConfig+0xba>
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	605a      	str	r2, [r3, #4]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	61da      	str	r2, [r3, #28]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	621a      	str	r2, [r3, #32]
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	fffeff8f 	.word	0xfffeff8f
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400

08008c04 <TIM_OC4_SetConfig>:
 8008c04:	b480      	push	{r7}
 8008c06:	b087      	sub	sp, #28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	621a      	str	r2, [r3, #32]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ca8 <TIM_OC4_SetConfig+0xa4>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	031b      	lsls	r3, r3, #12
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <TIM_OC4_SetConfig+0xa8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d003      	beq.n	8008c6c <TIM_OC4_SetConfig+0x68>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a12      	ldr	r2, [pc, #72]	@ (8008cb0 <TIM_OC4_SetConfig+0xac>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d109      	bne.n	8008c80 <TIM_OC4_SetConfig+0x7c>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	019b      	lsls	r3, r3, #6
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	605a      	str	r2, [r3, #4]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	61da      	str	r2, [r3, #28]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	621a      	str	r2, [r3, #32]
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	feff8fff 	.word	0xfeff8fff
 8008cac:	40010000 	.word	0x40010000
 8008cb0:	40010400 	.word	0x40010400

08008cb4 <TIM_OC5_SetConfig>:
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	621a      	str	r2, [r3, #32]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	4b1b      	ldr	r3, [pc, #108]	@ (8008d4c <TIM_OC5_SetConfig+0x98>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	041b      	lsls	r3, r3, #16
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a12      	ldr	r2, [pc, #72]	@ (8008d50 <TIM_OC5_SetConfig+0x9c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d003      	beq.n	8008d12 <TIM_OC5_SetConfig+0x5e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a11      	ldr	r2, [pc, #68]	@ (8008d54 <TIM_OC5_SetConfig+0xa0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d109      	bne.n	8008d26 <TIM_OC5_SetConfig+0x72>
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	697a      	ldr	r2, [r7, #20]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	697a      	ldr	r2, [r7, #20]
 8008d2a:	605a      	str	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	621a      	str	r2, [r3, #32]
 8008d40:	bf00      	nop
 8008d42:	371c      	adds	r7, #28
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	fffeff8f 	.word	0xfffeff8f
 8008d50:	40010000 	.word	0x40010000
 8008d54:	40010400 	.word	0x40010400

08008d58 <TIM_OC6_SetConfig>:
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	621a      	str	r2, [r3, #32]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	613b      	str	r3, [r7, #16]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	617b      	str	r3, [r7, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4b1c      	ldr	r3, [pc, #112]	@ (8008df4 <TIM_OC6_SetConfig+0x9c>)
 8008d84:	4013      	ands	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	051b      	lsls	r3, r3, #20
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a13      	ldr	r2, [pc, #76]	@ (8008df8 <TIM_OC6_SetConfig+0xa0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d003      	beq.n	8008db8 <TIM_OC6_SetConfig+0x60>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a12      	ldr	r2, [pc, #72]	@ (8008dfc <TIM_OC6_SetConfig+0xa4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d109      	bne.n	8008dcc <TIM_OC6_SetConfig+0x74>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	029b      	lsls	r3, r3, #10
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	605a      	str	r2, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	621a      	str	r2, [r3, #32]
 8008de6:	bf00      	nop
 8008de8:	371c      	adds	r7, #28
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	feff8fff 	.word	0xfeff8fff
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40010400 	.word	0x40010400

08008e00 <TIM_TI1_ConfigInputStage>:
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f023 0201 	bic.w	r2, r3, #1
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 030a 	bic.w	r3, r3, #10
 8008e3c:	617b      	str	r3, [r7, #20]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	619a      	str	r2, [r3, #24]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <TIM_TI2_ConfigInputStage>:
 8008e5e:	b480      	push	{r7}
 8008e60:	b087      	sub	sp, #28
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	f023 0210 	bic.w	r2, r3, #16
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	621a      	str	r2, [r3, #32]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	031b      	lsls	r3, r3, #12
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	619a      	str	r2, [r3, #24]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	621a      	str	r2, [r3, #32]
 8008eb2:	bf00      	nop
 8008eb4:	371c      	adds	r7, #28
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <TIM_ITRx_SetConfig>:
 8008ebe:	b480      	push	{r7}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	6039      	str	r1, [r7, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f043 0307 	orr.w	r3, r3, #7
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <TIM_ETR_SetConfig>:
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	021a      	lsls	r2, r3, #8
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	bf00      	nop
 8008f2a:	371c      	adds	r7, #28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIMEx_MasterConfigSynchronization>:
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	e06d      	b.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a30      	ldr	r2, [pc, #192]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d004      	beq.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a2f      	ldr	r2, [pc, #188]	@ (8009038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d108      	bne.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	605a      	str	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a20      	ldr	r2, [pc, #128]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d022      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fbe:	d01d      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d018      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a1c      	ldr	r2, [pc, #112]	@ (8009040 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d013      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8009044 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00e      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a15      	ldr	r2, [pc, #84]	@ (8009038 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a16      	ldr	r2, [pc, #88]	@ (8009048 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d004      	beq.n	8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a15      	ldr	r2, [pc, #84]	@ (800904c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d10c      	bne.n	8009016 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009002:	60bb      	str	r3, [r7, #8]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4313      	orrs	r3, r2
 800900c:	60bb      	str	r3, [r7, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	609a      	str	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009026:	2300      	movs	r3, #0
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	40010000 	.word	0x40010000
 8009038:	40010400 	.word	0x40010400
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	40014000 	.word	0x40014000
 800904c:	40001800 	.word	0x40001800

08009050 <HAL_TIMEx_CommutCallback>:
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	bf00      	nop
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <HAL_TIMEx_BreakCallback>:
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <HAL_TIMEx_Break2Callback>:
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_UART_Init>:
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_UART_Init+0x12>
 800909a:	2301      	movs	r3, #1
 800909c:	e040      	b.n	8009120 <HAL_UART_Init+0x94>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_UART_Init+0x28>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fa fa52 	bl	8003558 <HAL_UART_MspInit>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2224      	movs	r2, #36	@ 0x24
 80090b8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 0201 	bic.w	r2, r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fbe6 	bl	800989c <UART_SetConfig>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_UART_Init+0x4e>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e022      	b.n	8009120 <HAL_UART_Init+0x94>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_UART_Init+0x5c>
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fe3e 	bl	8009d64 <UART_AdvFeatureConfig>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090f6:	605a      	str	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fec5 	bl	8009ea8 <UART_CheckIdleState>
 800911e:	4603      	mov	r3, r0
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <HAL_UART_Transmit>:
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	@ 0x28
 800912c:	af02      	add	r7, sp, #8
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	603b      	str	r3, [r7, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	80fb      	strh	r3, [r7, #6]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800913c:	2b20      	cmp	r3, #32
 800913e:	d171      	bne.n	8009224 <HAL_UART_Transmit+0xfc>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_UART_Transmit+0x24>
 8009146:	88fb      	ldrh	r3, [r7, #6]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <HAL_UART_Transmit+0x28>
 800914c:	2301      	movs	r3, #1
 800914e:	e06a      	b.n	8009226 <HAL_UART_Transmit+0xfe>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2221      	movs	r2, #33	@ 0x21
 800915c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800915e:	f7fa fc0f 	bl	8003980 <HAL_GetTick>
 8009162:	6178      	str	r0, [r7, #20]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800917c:	d108      	bne.n	8009190 <HAL_UART_Transmit+0x68>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <HAL_UART_Transmit+0x68>
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	e003      	b.n	8009198 <HAL_UART_Transmit+0x70>
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	2300      	movs	r3, #0
 8009196:	61bb      	str	r3, [r7, #24]
 8009198:	e02c      	b.n	80091f4 <HAL_UART_Transmit+0xcc>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	2180      	movs	r1, #128	@ 0x80
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 feb6 	bl	8009f16 <UART_WaitOnFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <HAL_UART_Transmit+0x8c>
 80091b0:	2303      	movs	r3, #3
 80091b2:	e038      	b.n	8009226 <HAL_UART_Transmit+0xfe>
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <HAL_UART_Transmit+0xaa>
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	3302      	adds	r3, #2
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	e007      	b.n	80091e2 <HAL_UART_Transmit+0xba>
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	781a      	ldrb	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	629a      	str	r2, [r3, #40]	@ 0x28
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	3301      	adds	r3, #1
 80091e0:	61fb      	str	r3, [r7, #28]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1cc      	bne.n	800919a <HAL_UART_Transmit+0x72>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2200      	movs	r2, #0
 8009208:	2140      	movs	r1, #64	@ 0x40
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fe83 	bl	8009f16 <UART_WaitOnFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_UART_Transmit+0xf2>
 8009216:	2303      	movs	r3, #3
 8009218:	e005      	b.n	8009226 <HAL_UART_Transmit+0xfe>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2220      	movs	r2, #32
 800921e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009220:	2300      	movs	r3, #0
 8009222:	e000      	b.n	8009226 <HAL_UART_Transmit+0xfe>
 8009224:	2302      	movs	r3, #2
 8009226:	4618      	mov	r0, r3
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_UART_Receive_IT>:
 800922e:	b580      	push	{r7, lr}
 8009230:	b08a      	sub	sp, #40	@ 0x28
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	60b9      	str	r1, [r7, #8]
 8009238:	4613      	mov	r3, r2
 800923a:	80fb      	strh	r3, [r7, #6]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009242:	2b20      	cmp	r3, #32
 8009244:	d132      	bne.n	80092ac <HAL_UART_Receive_IT+0x7e>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <HAL_UART_Receive_IT+0x24>
 800924c:	88fb      	ldrh	r3, [r7, #6]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_UART_Receive_IT+0x28>
 8009252:	2301      	movs	r3, #1
 8009254:	e02b      	b.n	80092ae <HAL_UART_Receive_IT+0x80>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	661a      	str	r2, [r3, #96]	@ 0x60
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d018      	beq.n	800929c <HAL_UART_Receive_IT+0x6e>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009288:	623b      	str	r3, [r7, #32]
 800928a:	61fa      	str	r2, [r7, #28]
 800928c:	69f9      	ldr	r1, [r7, #28]
 800928e:	6a3a      	ldr	r2, [r7, #32]
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e6      	bne.n	800926a <HAL_UART_Receive_IT+0x3c>
 800929c:	88fb      	ldrh	r3, [r7, #6]
 800929e:	461a      	mov	r2, r3
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fefe 	bl	800a0a4 <UART_Start_Receive_IT>
 80092a8:	4603      	mov	r3, r0
 80092aa:	e000      	b.n	80092ae <HAL_UART_Receive_IT+0x80>
 80092ac:	2302      	movs	r3, #2
 80092ae:	4618      	mov	r0, r3
 80092b0:	3728      	adds	r7, #40	@ 0x28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <HAL_UART_IRQHandler>:
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b0ba      	sub	sp, #232	@ 0xe8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69db      	ldr	r3, [r3, #28]
 80092c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80092de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80092e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80092e6:	4013      	ands	r3, r2
 80092e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d115      	bne.n	8009320 <HAL_UART_IRQHandler+0x68>
 80092f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00f      	beq.n	8009320 <HAL_UART_IRQHandler+0x68>
 8009300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d009      	beq.n	8009320 <HAL_UART_IRQHandler+0x68>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8297 	beq.w	8009844 <HAL_UART_IRQHandler+0x58c>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
 800931e:	e291      	b.n	8009844 <HAL_UART_IRQHandler+0x58c>
 8009320:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 8117 	beq.w	8009558 <HAL_UART_IRQHandler+0x2a0>
 800932a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <HAL_UART_IRQHandler+0x8c>
 8009336:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800933a:	4b85      	ldr	r3, [pc, #532]	@ (8009550 <HAL_UART_IRQHandler+0x298>)
 800933c:	4013      	ands	r3, r2
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 810a 	beq.w	8009558 <HAL_UART_IRQHandler+0x2a0>
 8009344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	d011      	beq.n	8009374 <HAL_UART_IRQHandler+0xbc>
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0xbc>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2201      	movs	r2, #1
 8009362:	621a      	str	r2, [r3, #32]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800936a:	f043 0201 	orr.w	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d011      	beq.n	80093a4 <HAL_UART_IRQHandler+0xec>
 8009380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <HAL_UART_IRQHandler+0xec>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2202      	movs	r2, #2
 8009392:	621a      	str	r2, [r3, #32]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800939a:	f043 0204 	orr.w	r2, r3, #4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80093a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d011      	beq.n	80093d4 <HAL_UART_IRQHandler+0x11c>
 80093b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00b      	beq.n	80093d4 <HAL_UART_IRQHandler+0x11c>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2204      	movs	r2, #4
 80093c2:	621a      	str	r2, [r3, #32]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ca:	f043 0202 	orr.w	r2, r3, #2
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80093d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d8:	f003 0308 	and.w	r3, r3, #8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d017      	beq.n	8009410 <HAL_UART_IRQHandler+0x158>
 80093e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093e4:	f003 0320 	and.w	r3, r3, #32
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d105      	bne.n	80093f8 <HAL_UART_IRQHandler+0x140>
 80093ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_UART_IRQHandler+0x158>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2208      	movs	r2, #8
 80093fe:	621a      	str	r2, [r3, #32]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009406:	f043 0208 	orr.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009418:	2b00      	cmp	r3, #0
 800941a:	d012      	beq.n	8009442 <HAL_UART_IRQHandler+0x18a>
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009420:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00c      	beq.n	8009442 <HAL_UART_IRQHandler+0x18a>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009430:	621a      	str	r2, [r3, #32]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 81fd 	beq.w	8009848 <HAL_UART_IRQHandler+0x590>
 800944e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009452:	f003 0320 	and.w	r3, r3, #32
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <HAL_UART_IRQHandler+0x1be>
 800945a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <HAL_UART_IRQHandler+0x1be>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <HAL_UART_IRQHandler+0x1be>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800947c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800948a:	2b40      	cmp	r3, #64	@ 0x40
 800948c:	d005      	beq.n	800949a <HAL_UART_IRQHandler+0x1e2>
 800948e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009492:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d04f      	beq.n	800953a <HAL_UART_IRQHandler+0x282>
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fec8 	bl	800a230 <UART_EndRxTransfer>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094aa:	2b40      	cmp	r3, #64	@ 0x40
 80094ac:	d141      	bne.n	8009532 <HAL_UART_IRQHandler+0x27a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3308      	adds	r3, #8
 80094b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80094c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3308      	adds	r3, #8
 80094d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80094da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80094de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80094e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80094e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80094f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1d9      	bne.n	80094ae <HAL_UART_IRQHandler+0x1f6>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d013      	beq.n	800952a <HAL_UART_IRQHandler+0x272>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009506:	4a13      	ldr	r2, [pc, #76]	@ (8009554 <HAL_UART_IRQHandler+0x29c>)
 8009508:	651a      	str	r2, [r3, #80]	@ 0x50
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800950e:	4618      	mov	r0, r3
 8009510:	f7fa fbb8 	bl	8003c84 <HAL_DMA_Abort_IT>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d017      	beq.n	800954a <HAL_UART_IRQHandler+0x292>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800951e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009524:	4610      	mov	r0, r2
 8009526:	4798      	blx	r3
 8009528:	e00f      	b.n	800954a <HAL_UART_IRQHandler+0x292>
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f9a0 	bl	8009870 <HAL_UART_ErrorCallback>
 8009530:	e00b      	b.n	800954a <HAL_UART_IRQHandler+0x292>
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f99c 	bl	8009870 <HAL_UART_ErrorCallback>
 8009538:	e007      	b.n	800954a <HAL_UART_IRQHandler+0x292>
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f998 	bl	8009870 <HAL_UART_ErrorCallback>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009548:	e17e      	b.n	8009848 <HAL_UART_IRQHandler+0x590>
 800954a:	bf00      	nop
 800954c:	e17c      	b.n	8009848 <HAL_UART_IRQHandler+0x590>
 800954e:	bf00      	nop
 8009550:	04000120 	.word	0x04000120
 8009554:	0800a2f9 	.word	0x0800a2f9
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800955c:	2b01      	cmp	r3, #1
 800955e:	f040 814c 	bne.w	80097fa <HAL_UART_IRQHandler+0x542>
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009566:	f003 0310 	and.w	r3, r3, #16
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8145 	beq.w	80097fa <HAL_UART_IRQHandler+0x542>
 8009570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009574:	f003 0310 	and.w	r3, r3, #16
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 813e 	beq.w	80097fa <HAL_UART_IRQHandler+0x542>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2210      	movs	r2, #16
 8009584:	621a      	str	r2, [r3, #32]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b40      	cmp	r3, #64	@ 0x40
 8009592:	f040 80b6 	bne.w	8009702 <HAL_UART_IRQHandler+0x44a>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 80095a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 8150 	beq.w	800984c <HAL_UART_IRQHandler+0x594>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80095b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095b6:	429a      	cmp	r2, r3
 80095b8:	f080 8148 	bcs.w	800984c <HAL_UART_IRQHandler+0x594>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ca:	69db      	ldr	r3, [r3, #28]
 80095cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095d0:	f000 8086 	beq.w	80096e0 <HAL_UART_IRQHandler+0x428>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80095fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009602:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8009606:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800960a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009616:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1da      	bne.n	80095d4 <HAL_UART_IRQHandler+0x31c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	677b      	str	r3, [r7, #116]	@ 0x74
 8009626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	673b      	str	r3, [r7, #112]	@ 0x70
 800962e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009630:	f023 0301 	bic.w	r3, r3, #1
 8009634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3308      	adds	r3, #8
 800963e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009642:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009646:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009648:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800964a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009654:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e1      	bne.n	800961e <HAL_UART_IRQHandler+0x366>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	663b      	str	r3, [r7, #96]	@ 0x60
 8009662:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800966a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800966c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3308      	adds	r3, #8
 800967a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800967e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009682:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009684:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	667b      	str	r3, [r7, #100]	@ 0x64
 800968c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e3      	bne.n	800965a <HAL_UART_IRQHandler+0x3a2>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	661a      	str	r2, [r3, #96]	@ 0x60
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096a8:	e853 3f00 	ldrex	r3, [r3]
 80096ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096b0:	f023 0310 	bic.w	r3, r3, #16
 80096b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	461a      	mov	r2, r3
 80096be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80096c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096c4:	657a      	str	r2, [r7, #84]	@ 0x54
 80096c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ca:	e841 2300 	strex	r3, r2, [r1]
 80096ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80096d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1e4      	bne.n	80096a0 <HAL_UART_IRQHandler+0x3e8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fa fa62 	bl	8003ba4 <HAL_DMA_Abort>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2202      	movs	r2, #2
 80096e4:	665a      	str	r2, [r3, #100]	@ 0x64
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f8c2 	bl	8009884 <HAL_UARTEx_RxEventCallback>
 8009700:	e0a4      	b.n	800984c <HAL_UART_IRQHandler+0x594>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800970e:	b29b      	uxth	r3, r3
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800971c:	b29b      	uxth	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	f000 8096 	beq.w	8009850 <HAL_UART_IRQHandler+0x598>
 8009724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8091 	beq.w	8009850 <HAL_UART_IRQHandler+0x598>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
 800973c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009750:	647b      	str	r3, [r7, #68]	@ 0x44
 8009752:	643a      	str	r2, [r7, #64]	@ 0x40
 8009754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800975e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <HAL_UART_IRQHandler+0x476>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	627b      	str	r3, [r7, #36]	@ 0x24
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	623b      	str	r3, [r7, #32]
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f023 0301 	bic.w	r3, r3, #1
 800977a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3308      	adds	r3, #8
 8009784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009788:	633a      	str	r2, [r7, #48]	@ 0x30
 800978a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800978c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800978e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e3      	bne.n	8009764 <HAL_UART_IRQHandler+0x4ac>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2220      	movs	r2, #32
 80097a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	669a      	str	r2, [r3, #104]	@ 0x68
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f023 0310 	bic.w	r3, r3, #16
 80097c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	461a      	mov	r2, r3
 80097ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	61ba      	str	r2, [r7, #24]
 80097d6:	69b9      	ldr	r1, [r7, #24]
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e4      	bne.n	80097b0 <HAL_UART_IRQHandler+0x4f8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	665a      	str	r2, [r3, #100]	@ 0x64
 80097ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f846 	bl	8009884 <HAL_UARTEx_RxEventCallback>
 80097f8:	e02a      	b.n	8009850 <HAL_UART_IRQHandler+0x598>
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00e      	beq.n	8009824 <HAL_UART_IRQHandler+0x56c>
 8009806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800980a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800980e:	2b00      	cmp	r3, #0
 8009810:	d008      	beq.n	8009824 <HAL_UART_IRQHandler+0x56c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01c      	beq.n	8009854 <HAL_UART_IRQHandler+0x59c>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
 8009822:	e017      	b.n	8009854 <HAL_UART_IRQHandler+0x59c>
 8009824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_UART_IRQHandler+0x59e>
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00c      	beq.n	8009856 <HAL_UART_IRQHandler+0x59e>
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fd71 	bl	800a324 <UART_EndTransmit_IT>
 8009842:	e008      	b.n	8009856 <HAL_UART_IRQHandler+0x59e>
 8009844:	bf00      	nop
 8009846:	e006      	b.n	8009856 <HAL_UART_IRQHandler+0x59e>
 8009848:	bf00      	nop
 800984a:	e004      	b.n	8009856 <HAL_UART_IRQHandler+0x59e>
 800984c:	bf00      	nop
 800984e:	e002      	b.n	8009856 <HAL_UART_IRQHandler+0x59e>
 8009850:	bf00      	nop
 8009852:	e000      	b.n	8009856 <HAL_UART_IRQHandler+0x59e>
 8009854:	bf00      	nop
 8009856:	37e8      	adds	r7, #232	@ 0xe8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <HAL_UART_TxCpltCallback>:
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_UART_ErrorCallback>:
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_UARTEx_RxEventCallback>:
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	807b      	strh	r3, [r7, #2]
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <UART_SetConfig>:
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	2300      	movs	r3, #0
 80098a6:	77bb      	strb	r3, [r7, #30]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4ba6      	ldr	r3, [pc, #664]	@ (8009b60 <UART_SetConfig+0x2c4>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	6979      	ldr	r1, [r7, #20]
 80098d0:	430b      	orrs	r3, r1
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	430a      	orrs	r2, r1
 800990c:	609a      	str	r2, [r3, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a94      	ldr	r2, [pc, #592]	@ (8009b64 <UART_SetConfig+0x2c8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d120      	bne.n	800995a <UART_SetConfig+0xbe>
 8009918:	4b93      	ldr	r3, [pc, #588]	@ (8009b68 <UART_SetConfig+0x2cc>)
 800991a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b03      	cmp	r3, #3
 8009924:	d816      	bhi.n	8009954 <UART_SetConfig+0xb8>
 8009926:	a201      	add	r2, pc, #4	@ (adr r2, 800992c <UART_SetConfig+0x90>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	0800993d 	.word	0x0800993d
 8009930:	08009949 	.word	0x08009949
 8009934:	08009943 	.word	0x08009943
 8009938:	0800994f 	.word	0x0800994f
 800993c:	2301      	movs	r3, #1
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e150      	b.n	8009be4 <UART_SetConfig+0x348>
 8009942:	2302      	movs	r3, #2
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e14d      	b.n	8009be4 <UART_SetConfig+0x348>
 8009948:	2304      	movs	r3, #4
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e14a      	b.n	8009be4 <UART_SetConfig+0x348>
 800994e:	2308      	movs	r3, #8
 8009950:	77fb      	strb	r3, [r7, #31]
 8009952:	e147      	b.n	8009be4 <UART_SetConfig+0x348>
 8009954:	2310      	movs	r3, #16
 8009956:	77fb      	strb	r3, [r7, #31]
 8009958:	e144      	b.n	8009be4 <UART_SetConfig+0x348>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a83      	ldr	r2, [pc, #524]	@ (8009b6c <UART_SetConfig+0x2d0>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d132      	bne.n	80099ca <UART_SetConfig+0x12e>
 8009964:	4b80      	ldr	r3, [pc, #512]	@ (8009b68 <UART_SetConfig+0x2cc>)
 8009966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800996a:	f003 030c 	and.w	r3, r3, #12
 800996e:	2b0c      	cmp	r3, #12
 8009970:	d828      	bhi.n	80099c4 <UART_SetConfig+0x128>
 8009972:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <UART_SetConfig+0xdc>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099c5 	.word	0x080099c5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099b9 	.word	0x080099b9
 800998c:	080099c5 	.word	0x080099c5
 8009990:	080099c5 	.word	0x080099c5
 8009994:	080099c5 	.word	0x080099c5
 8009998:	080099b3 	.word	0x080099b3
 800999c:	080099c5 	.word	0x080099c5
 80099a0:	080099c5 	.word	0x080099c5
 80099a4:	080099c5 	.word	0x080099c5
 80099a8:	080099bf 	.word	0x080099bf
 80099ac:	2300      	movs	r3, #0
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e118      	b.n	8009be4 <UART_SetConfig+0x348>
 80099b2:	2302      	movs	r3, #2
 80099b4:	77fb      	strb	r3, [r7, #31]
 80099b6:	e115      	b.n	8009be4 <UART_SetConfig+0x348>
 80099b8:	2304      	movs	r3, #4
 80099ba:	77fb      	strb	r3, [r7, #31]
 80099bc:	e112      	b.n	8009be4 <UART_SetConfig+0x348>
 80099be:	2308      	movs	r3, #8
 80099c0:	77fb      	strb	r3, [r7, #31]
 80099c2:	e10f      	b.n	8009be4 <UART_SetConfig+0x348>
 80099c4:	2310      	movs	r3, #16
 80099c6:	77fb      	strb	r3, [r7, #31]
 80099c8:	e10c      	b.n	8009be4 <UART_SetConfig+0x348>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a68      	ldr	r2, [pc, #416]	@ (8009b70 <UART_SetConfig+0x2d4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d120      	bne.n	8009a16 <UART_SetConfig+0x17a>
 80099d4:	4b64      	ldr	r3, [pc, #400]	@ (8009b68 <UART_SetConfig+0x2cc>)
 80099d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099da:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80099de:	2b30      	cmp	r3, #48	@ 0x30
 80099e0:	d013      	beq.n	8009a0a <UART_SetConfig+0x16e>
 80099e2:	2b30      	cmp	r3, #48	@ 0x30
 80099e4:	d814      	bhi.n	8009a10 <UART_SetConfig+0x174>
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d009      	beq.n	80099fe <UART_SetConfig+0x162>
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d810      	bhi.n	8009a10 <UART_SetConfig+0x174>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <UART_SetConfig+0x15c>
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d006      	beq.n	8009a04 <UART_SetConfig+0x168>
 80099f6:	e00b      	b.n	8009a10 <UART_SetConfig+0x174>
 80099f8:	2300      	movs	r3, #0
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e0f2      	b.n	8009be4 <UART_SetConfig+0x348>
 80099fe:	2302      	movs	r3, #2
 8009a00:	77fb      	strb	r3, [r7, #31]
 8009a02:	e0ef      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a04:	2304      	movs	r3, #4
 8009a06:	77fb      	strb	r3, [r7, #31]
 8009a08:	e0ec      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a0a:	2308      	movs	r3, #8
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e0e9      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a10:	2310      	movs	r3, #16
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e0e6      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a56      	ldr	r2, [pc, #344]	@ (8009b74 <UART_SetConfig+0x2d8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d120      	bne.n	8009a62 <UART_SetConfig+0x1c6>
 8009a20:	4b51      	ldr	r3, [pc, #324]	@ (8009b68 <UART_SetConfig+0x2cc>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009a2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a2c:	d013      	beq.n	8009a56 <UART_SetConfig+0x1ba>
 8009a2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009a30:	d814      	bhi.n	8009a5c <UART_SetConfig+0x1c0>
 8009a32:	2b80      	cmp	r3, #128	@ 0x80
 8009a34:	d009      	beq.n	8009a4a <UART_SetConfig+0x1ae>
 8009a36:	2b80      	cmp	r3, #128	@ 0x80
 8009a38:	d810      	bhi.n	8009a5c <UART_SetConfig+0x1c0>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d002      	beq.n	8009a44 <UART_SetConfig+0x1a8>
 8009a3e:	2b40      	cmp	r3, #64	@ 0x40
 8009a40:	d006      	beq.n	8009a50 <UART_SetConfig+0x1b4>
 8009a42:	e00b      	b.n	8009a5c <UART_SetConfig+0x1c0>
 8009a44:	2300      	movs	r3, #0
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e0cc      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e0c9      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a50:	2304      	movs	r3, #4
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e0c6      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a56:	2308      	movs	r3, #8
 8009a58:	77fb      	strb	r3, [r7, #31]
 8009a5a:	e0c3      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e0c0      	b.n	8009be4 <UART_SetConfig+0x348>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a44      	ldr	r2, [pc, #272]	@ (8009b78 <UART_SetConfig+0x2dc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d125      	bne.n	8009ab8 <UART_SetConfig+0x21c>
 8009a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8009b68 <UART_SetConfig+0x2cc>)
 8009a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a7a:	d017      	beq.n	8009aac <UART_SetConfig+0x210>
 8009a7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a80:	d817      	bhi.n	8009ab2 <UART_SetConfig+0x216>
 8009a82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a86:	d00b      	beq.n	8009aa0 <UART_SetConfig+0x204>
 8009a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a8c:	d811      	bhi.n	8009ab2 <UART_SetConfig+0x216>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <UART_SetConfig+0x1fe>
 8009a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a96:	d006      	beq.n	8009aa6 <UART_SetConfig+0x20a>
 8009a98:	e00b      	b.n	8009ab2 <UART_SetConfig+0x216>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	77fb      	strb	r3, [r7, #31]
 8009a9e:	e0a1      	b.n	8009be4 <UART_SetConfig+0x348>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e09e      	b.n	8009be4 <UART_SetConfig+0x348>
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	77fb      	strb	r3, [r7, #31]
 8009aaa:	e09b      	b.n	8009be4 <UART_SetConfig+0x348>
 8009aac:	2308      	movs	r3, #8
 8009aae:	77fb      	strb	r3, [r7, #31]
 8009ab0:	e098      	b.n	8009be4 <UART_SetConfig+0x348>
 8009ab2:	2310      	movs	r3, #16
 8009ab4:	77fb      	strb	r3, [r7, #31]
 8009ab6:	e095      	b.n	8009be4 <UART_SetConfig+0x348>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a2f      	ldr	r2, [pc, #188]	@ (8009b7c <UART_SetConfig+0x2e0>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d125      	bne.n	8009b0e <UART_SetConfig+0x272>
 8009ac2:	4b29      	ldr	r3, [pc, #164]	@ (8009b68 <UART_SetConfig+0x2cc>)
 8009ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009acc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ad0:	d017      	beq.n	8009b02 <UART_SetConfig+0x266>
 8009ad2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ad6:	d817      	bhi.n	8009b08 <UART_SetConfig+0x26c>
 8009ad8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009adc:	d00b      	beq.n	8009af6 <UART_SetConfig+0x25a>
 8009ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae2:	d811      	bhi.n	8009b08 <UART_SetConfig+0x26c>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d003      	beq.n	8009af0 <UART_SetConfig+0x254>
 8009ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aec:	d006      	beq.n	8009afc <UART_SetConfig+0x260>
 8009aee:	e00b      	b.n	8009b08 <UART_SetConfig+0x26c>
 8009af0:	2301      	movs	r3, #1
 8009af2:	77fb      	strb	r3, [r7, #31]
 8009af4:	e076      	b.n	8009be4 <UART_SetConfig+0x348>
 8009af6:	2302      	movs	r3, #2
 8009af8:	77fb      	strb	r3, [r7, #31]
 8009afa:	e073      	b.n	8009be4 <UART_SetConfig+0x348>
 8009afc:	2304      	movs	r3, #4
 8009afe:	77fb      	strb	r3, [r7, #31]
 8009b00:	e070      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b02:	2308      	movs	r3, #8
 8009b04:	77fb      	strb	r3, [r7, #31]
 8009b06:	e06d      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b08:	2310      	movs	r3, #16
 8009b0a:	77fb      	strb	r3, [r7, #31]
 8009b0c:	e06a      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1b      	ldr	r2, [pc, #108]	@ (8009b80 <UART_SetConfig+0x2e4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d138      	bne.n	8009b8a <UART_SetConfig+0x2ee>
 8009b18:	4b13      	ldr	r3, [pc, #76]	@ (8009b68 <UART_SetConfig+0x2cc>)
 8009b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b1e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b26:	d017      	beq.n	8009b58 <UART_SetConfig+0x2bc>
 8009b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009b2c:	d82a      	bhi.n	8009b84 <UART_SetConfig+0x2e8>
 8009b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b32:	d00b      	beq.n	8009b4c <UART_SetConfig+0x2b0>
 8009b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b38:	d824      	bhi.n	8009b84 <UART_SetConfig+0x2e8>
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <UART_SetConfig+0x2aa>
 8009b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b42:	d006      	beq.n	8009b52 <UART_SetConfig+0x2b6>
 8009b44:	e01e      	b.n	8009b84 <UART_SetConfig+0x2e8>
 8009b46:	2300      	movs	r3, #0
 8009b48:	77fb      	strb	r3, [r7, #31]
 8009b4a:	e04b      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e048      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b52:	2304      	movs	r3, #4
 8009b54:	77fb      	strb	r3, [r7, #31]
 8009b56:	e045      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	77fb      	strb	r3, [r7, #31]
 8009b5c:	e042      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b5e:	bf00      	nop
 8009b60:	efff69f3 	.word	0xefff69f3
 8009b64:	40011000 	.word	0x40011000
 8009b68:	40023800 	.word	0x40023800
 8009b6c:	40004400 	.word	0x40004400
 8009b70:	40004800 	.word	0x40004800
 8009b74:	40004c00 	.word	0x40004c00
 8009b78:	40005000 	.word	0x40005000
 8009b7c:	40011400 	.word	0x40011400
 8009b80:	40007800 	.word	0x40007800
 8009b84:	2310      	movs	r3, #16
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e02c      	b.n	8009be4 <UART_SetConfig+0x348>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a72      	ldr	r2, [pc, #456]	@ (8009d58 <UART_SetConfig+0x4bc>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d125      	bne.n	8009be0 <UART_SetConfig+0x344>
 8009b94:	4b71      	ldr	r3, [pc, #452]	@ (8009d5c <UART_SetConfig+0x4c0>)
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b9e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009ba2:	d017      	beq.n	8009bd4 <UART_SetConfig+0x338>
 8009ba4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009ba8:	d817      	bhi.n	8009bda <UART_SetConfig+0x33e>
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bae:	d00b      	beq.n	8009bc8 <UART_SetConfig+0x32c>
 8009bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bb4:	d811      	bhi.n	8009bda <UART_SetConfig+0x33e>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <UART_SetConfig+0x326>
 8009bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bbe:	d006      	beq.n	8009bce <UART_SetConfig+0x332>
 8009bc0:	e00b      	b.n	8009bda <UART_SetConfig+0x33e>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	77fb      	strb	r3, [r7, #31]
 8009bc6:	e00d      	b.n	8009be4 <UART_SetConfig+0x348>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e00a      	b.n	8009be4 <UART_SetConfig+0x348>
 8009bce:	2304      	movs	r3, #4
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e007      	b.n	8009be4 <UART_SetConfig+0x348>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e004      	b.n	8009be4 <UART_SetConfig+0x348>
 8009bda:	2310      	movs	r3, #16
 8009bdc:	77fb      	strb	r3, [r7, #31]
 8009bde:	e001      	b.n	8009be4 <UART_SetConfig+0x348>
 8009be0:	2310      	movs	r3, #16
 8009be2:	77fb      	strb	r3, [r7, #31]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bec:	d15b      	bne.n	8009ca6 <UART_SetConfig+0x40a>
 8009bee:	7ffb      	ldrb	r3, [r7, #31]
 8009bf0:	2b08      	cmp	r3, #8
 8009bf2:	d828      	bhi.n	8009c46 <UART_SetConfig+0x3aa>
 8009bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bfc <UART_SetConfig+0x360>)
 8009bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfa:	bf00      	nop
 8009bfc:	08009c21 	.word	0x08009c21
 8009c00:	08009c29 	.word	0x08009c29
 8009c04:	08009c31 	.word	0x08009c31
 8009c08:	08009c47 	.word	0x08009c47
 8009c0c:	08009c37 	.word	0x08009c37
 8009c10:	08009c47 	.word	0x08009c47
 8009c14:	08009c47 	.word	0x08009c47
 8009c18:	08009c47 	.word	0x08009c47
 8009c1c:	08009c3f 	.word	0x08009c3f
 8009c20:	f7fc fdf0 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 8009c24:	61b8      	str	r0, [r7, #24]
 8009c26:	e013      	b.n	8009c50 <UART_SetConfig+0x3b4>
 8009c28:	f7fc fe00 	bl	800682c <HAL_RCC_GetPCLK2Freq>
 8009c2c:	61b8      	str	r0, [r7, #24]
 8009c2e:	e00f      	b.n	8009c50 <UART_SetConfig+0x3b4>
 8009c30:	4b4b      	ldr	r3, [pc, #300]	@ (8009d60 <UART_SetConfig+0x4c4>)
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	e00c      	b.n	8009c50 <UART_SetConfig+0x3b4>
 8009c36:	f7fc fcd3 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 8009c3a:	61b8      	str	r0, [r7, #24]
 8009c3c:	e008      	b.n	8009c50 <UART_SetConfig+0x3b4>
 8009c3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c42:	61bb      	str	r3, [r7, #24]
 8009c44:	e004      	b.n	8009c50 <UART_SetConfig+0x3b4>
 8009c46:	2300      	movs	r3, #0
 8009c48:	61bb      	str	r3, [r7, #24]
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	77bb      	strb	r3, [r7, #30]
 8009c4e:	bf00      	nop
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d074      	beq.n	8009d40 <UART_SetConfig+0x4a4>
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	005a      	lsls	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	085b      	lsrs	r3, r3, #1
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	2b0f      	cmp	r3, #15
 8009c70:	d916      	bls.n	8009ca0 <UART_SetConfig+0x404>
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c78:	d212      	bcs.n	8009ca0 <UART_SetConfig+0x404>
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f023 030f 	bic.w	r3, r3, #15
 8009c82:	81fb      	strh	r3, [r7, #14]
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f003 0307 	and.w	r3, r3, #7
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	89fb      	ldrh	r3, [r7, #14]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	81fb      	strh	r3, [r7, #14]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	89fa      	ldrh	r2, [r7, #14]
 8009c9c:	60da      	str	r2, [r3, #12]
 8009c9e:	e04f      	b.n	8009d40 <UART_SetConfig+0x4a4>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	77bb      	strb	r3, [r7, #30]
 8009ca4:	e04c      	b.n	8009d40 <UART_SetConfig+0x4a4>
 8009ca6:	7ffb      	ldrb	r3, [r7, #31]
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d828      	bhi.n	8009cfe <UART_SetConfig+0x462>
 8009cac:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0x418>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009ce1 	.word	0x08009ce1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	08009cff 	.word	0x08009cff
 8009cc4:	08009cef 	.word	0x08009cef
 8009cc8:	08009cff 	.word	0x08009cff
 8009ccc:	08009cff 	.word	0x08009cff
 8009cd0:	08009cff 	.word	0x08009cff
 8009cd4:	08009cf7 	.word	0x08009cf7
 8009cd8:	f7fc fd94 	bl	8006804 <HAL_RCC_GetPCLK1Freq>
 8009cdc:	61b8      	str	r0, [r7, #24]
 8009cde:	e013      	b.n	8009d08 <UART_SetConfig+0x46c>
 8009ce0:	f7fc fda4 	bl	800682c <HAL_RCC_GetPCLK2Freq>
 8009ce4:	61b8      	str	r0, [r7, #24]
 8009ce6:	e00f      	b.n	8009d08 <UART_SetConfig+0x46c>
 8009ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d60 <UART_SetConfig+0x4c4>)
 8009cea:	61bb      	str	r3, [r7, #24]
 8009cec:	e00c      	b.n	8009d08 <UART_SetConfig+0x46c>
 8009cee:	f7fc fc77 	bl	80065e0 <HAL_RCC_GetSysClockFreq>
 8009cf2:	61b8      	str	r0, [r7, #24]
 8009cf4:	e008      	b.n	8009d08 <UART_SetConfig+0x46c>
 8009cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cfa:	61bb      	str	r3, [r7, #24]
 8009cfc:	e004      	b.n	8009d08 <UART_SetConfig+0x46c>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	2301      	movs	r3, #1
 8009d04:	77bb      	strb	r3, [r7, #30]
 8009d06:	bf00      	nop
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d018      	beq.n	8009d40 <UART_SetConfig+0x4a4>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	085a      	lsrs	r2, r3, #1
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	441a      	add	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d20:	613b      	str	r3, [r7, #16]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b0f      	cmp	r3, #15
 8009d26:	d909      	bls.n	8009d3c <UART_SetConfig+0x4a0>
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d2e:	d205      	bcs.n	8009d3c <UART_SetConfig+0x4a0>
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	e001      	b.n	8009d40 <UART_SetConfig+0x4a4>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	77bb      	strb	r3, [r7, #30]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	669a      	str	r2, [r3, #104]	@ 0x68
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009d4c:	7fbb      	ldrb	r3, [r7, #30]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3720      	adds	r7, #32
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	40007c00 	.word	0x40007c00
 8009d5c:	40023800 	.word	0x40023800
 8009d60:	00f42400 	.word	0x00f42400

08009d64 <UART_AdvFeatureConfig>:
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00a      	beq.n	8009d8e <UART_AdvFeatureConfig+0x2a>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	430a      	orrs	r2, r1
 8009d8c:	605a      	str	r2, [r3, #4]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00a      	beq.n	8009db0 <UART_AdvFeatureConfig+0x4c>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	605a      	str	r2, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00a      	beq.n	8009dd2 <UART_AdvFeatureConfig+0x6e>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	430a      	orrs	r2, r1
 8009dd0:	605a      	str	r2, [r3, #4]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd6:	f003 0308 	and.w	r3, r3, #8
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <UART_AdvFeatureConfig+0x90>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	605a      	str	r2, [r3, #4]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df8:	f003 0310 	and.w	r3, r3, #16
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00a      	beq.n	8009e16 <UART_AdvFeatureConfig+0xb2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	609a      	str	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00a      	beq.n	8009e38 <UART_AdvFeatureConfig+0xd4>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	609a      	str	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01a      	beq.n	8009e7a <UART_AdvFeatureConfig+0x116>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e62:	d10a      	bne.n	8009e7a <UART_AdvFeatureConfig+0x116>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	605a      	str	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <UART_AdvFeatureConfig+0x138>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	605a      	str	r2, [r3, #4]
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <UART_CheckIdleState>:
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af02      	add	r7, sp, #8
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8009eb8:	f7f9 fd62 	bl	8003980 <HAL_GetTick>
 8009ebc:	60f8      	str	r0, [r7, #12]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0308 	and.w	r3, r3, #8
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d10e      	bne.n	8009eea <UART_CheckIdleState+0x42>
 8009ecc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f81b 	bl	8009f16 <UART_WaitOnFlagUntilTimeout>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <UART_CheckIdleState+0x42>
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e011      	b.n	8009f0e <UART_CheckIdleState+0x66>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	661a      	str	r2, [r3, #96]	@ 0x60
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	665a      	str	r2, [r3, #100]	@ 0x64
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <UART_WaitOnFlagUntilTimeout>:
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b09c      	sub	sp, #112	@ 0x70
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	603b      	str	r3, [r7, #0]
 8009f22:	4613      	mov	r3, r2
 8009f24:	71fb      	strb	r3, [r7, #7]
 8009f26:	e0a7      	b.n	800a078 <UART_WaitOnFlagUntilTimeout+0x162>
 8009f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	f000 80a3 	beq.w	800a078 <UART_WaitOnFlagUntilTimeout+0x162>
 8009f32:	f7f9 fd25 	bl	8003980 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d302      	bcc.n	8009f48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d13f      	bne.n	8009fc8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f50:	e853 3f00 	ldrex	r3, [r3]
 8009f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f58:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009f5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009f6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009f6e:	e841 2300 	strex	r3, r2, [r1]
 8009f72:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1e6      	bne.n	8009f48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3308      	adds	r3, #8
 8009f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	3308      	adds	r3, #8
 8009f98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009f9a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009fa0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e5      	bne.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x64>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e068      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0x184>
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d050      	beq.n	800a078 <UART_WaitOnFlagUntilTimeout+0x162>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fe4:	d148      	bne.n	800a078 <UART_WaitOnFlagUntilTimeout+0x162>
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fee:	621a      	str	r2, [r3, #32]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff8:	e853 3f00 	ldrex	r3, [r3]
 8009ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a000:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a004:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a00e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a010:	633a      	str	r2, [r7, #48]	@ 0x30
 800a012:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e6      	bne.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0xda>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3308      	adds	r3, #8
 800a028:	617b      	str	r3, [r7, #20]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f023 0301 	bic.w	r3, r3, #1
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3308      	adds	r3, #8
 800a040:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a042:	623a      	str	r2, [r7, #32]
 800a044:	61fb      	str	r3, [r7, #28]
 800a046:	69f9      	ldr	r1, [r7, #28]
 800a048:	6a3a      	ldr	r2, [r7, #32]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	61bb      	str	r3, [r7, #24]
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0x10c>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2220      	movs	r2, #32
 800a05a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2220      	movs	r2, #32
 800a068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800a074:	2303      	movs	r3, #3
 800a076:	e010      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0x184>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69da      	ldr	r2, [r3, #28]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	4013      	ands	r3, r2
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	429a      	cmp	r2, r3
 800a086:	bf0c      	ite	eq
 800a088:	2301      	moveq	r3, #1
 800a08a:	2300      	movne	r3, #0
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	461a      	mov	r2, r3
 800a090:	79fb      	ldrb	r3, [r7, #7]
 800a092:	429a      	cmp	r2, r3
 800a094:	f43f af48 	beq.w	8009f28 <UART_WaitOnFlagUntilTimeout+0x12>
 800a098:	2300      	movs	r3, #0
 800a09a:	4618      	mov	r0, r3
 800a09c:	3770      	adds	r7, #112	@ 0x70
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
	...

0800a0a4 <UART_Start_Receive_IT>:
 800a0a4:	b480      	push	{r7}
 800a0a6:	b097      	sub	sp, #92	@ 0x5c
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	88fa      	ldrh	r2, [r7, #6]
 800a0c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	669a      	str	r2, [r3, #104]	@ 0x68
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0d6:	d10e      	bne.n	800a0f6 <UART_Start_Receive_IT+0x52>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <UART_Start_Receive_IT+0x48>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a0e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a0ea:	e02d      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	22ff      	movs	r2, #255	@ 0xff
 800a0f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a0f4:	e028      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10d      	bne.n	800a11a <UART_Start_Receive_IT+0x76>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d104      	bne.n	800a110 <UART_Start_Receive_IT+0x6c>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	22ff      	movs	r2, #255	@ 0xff
 800a10a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a10e:	e01b      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	227f      	movs	r2, #127	@ 0x7f
 800a114:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a118:	e016      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a122:	d10d      	bne.n	800a140 <UART_Start_Receive_IT+0x9c>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	691b      	ldr	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <UART_Start_Receive_IT+0x92>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	227f      	movs	r2, #127	@ 0x7f
 800a130:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a134:	e008      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	223f      	movs	r2, #63	@ 0x3f
 800a13a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a13e:	e003      	b.n	800a148 <UART_Start_Receive_IT+0xa4>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2222      	movs	r2, #34	@ 0x22
 800a154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3308      	adds	r3, #8
 800a15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16a:	f043 0301 	orr.w	r3, r3, #1
 800a16e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3308      	adds	r3, #8
 800a176:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a178:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a17c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a17e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	643b      	str	r3, [r7, #64]	@ 0x40
 800a186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e5      	bne.n	800a158 <UART_Start_Receive_IT+0xb4>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a194:	d107      	bne.n	800a1a6 <UART_Start_Receive_IT+0x102>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <UART_Start_Receive_IT+0x102>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4a21      	ldr	r2, [pc, #132]	@ (800a228 <UART_Start_Receive_IT+0x184>)
 800a1a2:	669a      	str	r2, [r3, #104]	@ 0x68
 800a1a4:	e002      	b.n	800a1ac <UART_Start_Receive_IT+0x108>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	4a20      	ldr	r2, [pc, #128]	@ (800a22c <UART_Start_Receive_IT+0x188>)
 800a1aa:	669a      	str	r2, [r3, #104]	@ 0x68
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d019      	beq.n	800a1e8 <UART_Start_Receive_IT+0x144>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a1c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <UART_Start_Receive_IT+0x110>
 800a1e6:	e018      	b.n	800a21a <UART_Start_Receive_IT+0x176>
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	e853 3f00 	ldrex	r3, [r3]
 800a1f4:	613b      	str	r3, [r7, #16]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f043 0320 	orr.w	r3, r3, #32
 800a1fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a206:	623b      	str	r3, [r7, #32]
 800a208:	61fa      	str	r2, [r7, #28]
 800a20a:	69f9      	ldr	r1, [r7, #28]
 800a20c:	6a3a      	ldr	r2, [r7, #32]
 800a20e:	e841 2300 	strex	r3, r2, [r1]
 800a212:	61bb      	str	r3, [r7, #24]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1e6      	bne.n	800a1e8 <UART_Start_Receive_IT+0x144>
 800a21a:	2300      	movs	r3, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	375c      	adds	r7, #92	@ 0x5c
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr
 800a228:	0800a4df 	.word	0x0800a4df
 800a22c:	0800a379 	.word	0x0800a379

0800a230 <UART_EndRxTransfer>:
 800a230:	b480      	push	{r7}
 800a232:	b095      	sub	sp, #84	@ 0x54
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a240:	e853 3f00 	ldrex	r3, [r3]
 800a244:	633b      	str	r3, [r7, #48]	@ 0x30
 800a246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a24c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a256:	643b      	str	r3, [r7, #64]	@ 0x40
 800a258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a25a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a25c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a25e:	e841 2300 	strex	r3, r2, [r1]
 800a262:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1e6      	bne.n	800a238 <UART_EndRxTransfer+0x8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3308      	adds	r3, #8
 800a270:	623b      	str	r3, [r7, #32]
 800a272:	6a3b      	ldr	r3, [r7, #32]
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	61fb      	str	r3, [r7, #28]
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f023 0301 	bic.w	r3, r3, #1
 800a280:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3308      	adds	r3, #8
 800a288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a28a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a28c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a28e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a290:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	627b      	str	r3, [r7, #36]	@ 0x24
 800a298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e5      	bne.n	800a26a <UART_EndRxTransfer+0x3a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d118      	bne.n	800a2d8 <UART_EndRxTransfer+0xa8>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	60bb      	str	r3, [r7, #8]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f023 0310 	bic.w	r3, r3, #16
 800a2ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	617a      	str	r2, [r7, #20]
 800a2c8:	6979      	ldr	r1, [r7, #20]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_EndRxTransfer+0x76>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	669a      	str	r2, [r3, #104]	@ 0x68
 800a2ec:	bf00      	nop
 800a2ee:	3754      	adds	r7, #84	@ 0x54
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <UART_DMAAbortOnError>:
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a304:	60fb      	str	r3, [r7, #12]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2200      	movs	r2, #0
 800a312:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff faaa 	bl	8009870 <HAL_UART_ErrorCallback>
 800a31c:	bf00      	nop
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <UART_EndTransmit_IT>:
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	e853 3f00 	ldrex	r3, [r3]
 800a338:	60bb      	str	r3, [r7, #8]
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	61bb      	str	r3, [r7, #24]
 800a34c:	617a      	str	r2, [r7, #20]
 800a34e:	6979      	ldr	r1, [r7, #20]
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	e841 2300 	strex	r3, r2, [r1]
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1e6      	bne.n	800a32c <UART_EndTransmit_IT+0x8>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2220      	movs	r2, #32
 800a362:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7ff fa76 	bl	800985c <HAL_UART_TxCpltCallback>
 800a370:	bf00      	nop
 800a372:	3720      	adds	r7, #32
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <UART_RxISR_8BIT>:
 800a378:	b580      	push	{r7, lr}
 800a37a:	b096      	sub	sp, #88	@ 0x58
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a386:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a390:	2b22      	cmp	r3, #34	@ 0x22
 800a392:	f040 8098 	bne.w	800a4c6 <UART_RxISR_8BIT+0x14e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a3a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a3a4:	b2d9      	uxtb	r1, r3
 800a3a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b0:	400a      	ands	r2, r1
 800a3b2:	b2d2      	uxtb	r2, r2
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ba:	1c5a      	adds	r2, r3, #1
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	655a      	str	r2, [r3, #84]	@ 0x54
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d17b      	bne.n	800a4d6 <UART_RxISR_8BIT+0x15e>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e6:	e853 3f00 	ldrex	r3, [r3]
 800a3ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a3f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800a400:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a402:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a40a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e6      	bne.n	800a3de <UART_RxISR_8BIT+0x66>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	3308      	adds	r3, #8
 800a416:	627b      	str	r3, [r7, #36]	@ 0x24
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	e853 3f00 	ldrex	r3, [r3]
 800a41e:	623b      	str	r3, [r7, #32]
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	f023 0301 	bic.w	r3, r3, #1
 800a426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a430:	633a      	str	r2, [r7, #48]	@ 0x30
 800a432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a438:	e841 2300 	strex	r3, r2, [r1]
 800a43c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1e5      	bne.n	800a410 <UART_RxISR_8BIT+0x98>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2220      	movs	r2, #32
 800a448:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	669a      	str	r2, [r3, #104]	@ 0x68
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	665a      	str	r2, [r3, #100]	@ 0x64
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d12e      	bne.n	800a4be <UART_RxISR_8BIT+0x146>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	661a      	str	r2, [r3, #96]	@ 0x60
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	613b      	str	r3, [r7, #16]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0310 	bic.w	r3, r3, #16
 800a47a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a484:	61fb      	str	r3, [r7, #28]
 800a486:	61ba      	str	r2, [r7, #24]
 800a488:	69b9      	ldr	r1, [r7, #24]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e6      	bne.n	800a466 <UART_RxISR_8BIT+0xee>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f003 0310 	and.w	r3, r3, #16
 800a4a2:	2b10      	cmp	r3, #16
 800a4a4:	d103      	bne.n	800a4ae <UART_RxISR_8BIT+0x136>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2210      	movs	r2, #16
 800a4ac:	621a      	str	r2, [r3, #32]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff f9e4 	bl	8009884 <HAL_UARTEx_RxEventCallback>
 800a4bc:	e00b      	b.n	800a4d6 <UART_RxISR_8BIT+0x15e>
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7f8 fc66 	bl	8002d90 <HAL_UART_RxCpltCallback>
 800a4c4:	e007      	b.n	800a4d6 <UART_RxISR_8BIT+0x15e>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0208 	orr.w	r2, r2, #8
 800a4d4:	619a      	str	r2, [r3, #24]
 800a4d6:	bf00      	nop
 800a4d8:	3758      	adds	r7, #88	@ 0x58
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <UART_RxISR_16BIT>:
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b096      	sub	sp, #88	@ 0x58
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a4ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4f6:	2b22      	cmp	r3, #34	@ 0x22
 800a4f8:	f040 8098 	bne.w	800a62c <UART_RxISR_16BIT+0x14e>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a502:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a50a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a50c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a510:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a514:	4013      	ands	r3, r2
 800a516:	b29a      	uxth	r2, r3
 800a518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a51a:	801a      	strh	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a520:	1c9a      	adds	r2, r3, #2
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	655a      	str	r2, [r3, #84]	@ 0x54
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	3b01      	subs	r3, #1
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a53e:	b29b      	uxth	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d17b      	bne.n	800a63c <UART_RxISR_16BIT+0x15e>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
 800a54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	633b      	str	r3, [r7, #48]	@ 0x30
 800a552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a562:	643b      	str	r3, [r7, #64]	@ 0x40
 800a564:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e6      	bne.n	800a544 <UART_RxISR_16BIT+0x66>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	623b      	str	r3, [r7, #32]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f023 0301 	bic.w	r3, r3, #1
 800a58c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3308      	adds	r3, #8
 800a594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a59a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a59c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1e5      	bne.n	800a576 <UART_RxISR_16BIT+0x98>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	669a      	str	r2, [r3, #104]	@ 0x68
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	665a      	str	r2, [r3, #100]	@ 0x64
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d12e      	bne.n	800a624 <UART_RxISR_16BIT+0x146>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	661a      	str	r2, [r3, #96]	@ 0x60
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	60bb      	str	r3, [r7, #8]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f023 0310 	bic.w	r3, r3, #16
 800a5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	617a      	str	r2, [r7, #20]
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	613b      	str	r3, [r7, #16]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e6      	bne.n	800a5cc <UART_RxISR_16BIT+0xee>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f003 0310 	and.w	r3, r3, #16
 800a608:	2b10      	cmp	r3, #16
 800a60a:	d103      	bne.n	800a614 <UART_RxISR_16BIT+0x136>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2210      	movs	r2, #16
 800a612:	621a      	str	r2, [r3, #32]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a61a:	4619      	mov	r1, r3
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff f931 	bl	8009884 <HAL_UARTEx_RxEventCallback>
 800a622:	e00b      	b.n	800a63c <UART_RxISR_16BIT+0x15e>
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7f8 fbb3 	bl	8002d90 <HAL_UART_RxCpltCallback>
 800a62a:	e007      	b.n	800a63c <UART_RxISR_16BIT+0x15e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0208 	orr.w	r2, r2, #8
 800a63a:	619a      	str	r2, [r3, #24]
 800a63c:	bf00      	nop
 800a63e:	3758      	adds	r7, #88	@ 0x58
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a644:	b5b0      	push	{r4, r5, r7, lr}
 800a646:	b08c      	sub	sp, #48	@ 0x30
 800a648:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a64a:	4b96      	ldr	r3, [pc, #600]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a64c:	22c0      	movs	r2, #192	@ 0xc0
 800a64e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a650:	4b94      	ldr	r3, [pc, #592]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a652:	22a8      	movs	r2, #168	@ 0xa8
 800a654:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a656:	4b93      	ldr	r3, [pc, #588]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a658:	2201      	movs	r2, #1
 800a65a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 800a65c:	4b91      	ldr	r3, [pc, #580]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a65e:	2242      	movs	r2, #66	@ 0x42
 800a660:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a662:	4b91      	ldr	r3, [pc, #580]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a664:	22ff      	movs	r2, #255	@ 0xff
 800a666:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a668:	4b8f      	ldr	r3, [pc, #572]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a66a:	22ff      	movs	r2, #255	@ 0xff
 800a66c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a66e:	4b8e      	ldr	r3, [pc, #568]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a670:	22ff      	movs	r2, #255	@ 0xff
 800a672:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a674:	4b8c      	ldr	r3, [pc, #560]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a676:	2200      	movs	r2, #0
 800a678:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a67a:	4b8c      	ldr	r3, [pc, #560]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a67c:	22c0      	movs	r2, #192	@ 0xc0
 800a67e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a680:	4b8a      	ldr	r3, [pc, #552]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a682:	22a8      	movs	r2, #168	@ 0xa8
 800a684:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a686:	4b89      	ldr	r3, [pc, #548]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a688:	2201      	movs	r2, #1
 800a68a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a68c:	4b87      	ldr	r3, [pc, #540]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a68e:	2201      	movs	r2, #1
 800a690:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a692:	2100      	movs	r1, #0
 800a694:	2000      	movs	r0, #0
 800a696:	f006 fa2b 	bl	8010af0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a69a:	4b82      	ldr	r3, [pc, #520]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	061a      	lsls	r2, r3, #24
 800a6a0:	4b80      	ldr	r3, [pc, #512]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	041b      	lsls	r3, r3, #16
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	4b7e      	ldr	r3, [pc, #504]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6aa:	789b      	ldrb	r3, [r3, #2]
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	4a7c      	ldr	r2, [pc, #496]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6b2:	78d2      	ldrb	r2, [r2, #3]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	061a      	lsls	r2, r3, #24
 800a6b8:	4b7a      	ldr	r3, [pc, #488]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	0619      	lsls	r1, r3, #24
 800a6be:	4b79      	ldr	r3, [pc, #484]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	4319      	orrs	r1, r3
 800a6c6:	4b77      	ldr	r3, [pc, #476]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6c8:	789b      	ldrb	r3, [r3, #2]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	4975      	ldr	r1, [pc, #468]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6d0:	78c9      	ldrb	r1, [r1, #3]
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	021b      	lsls	r3, r3, #8
 800a6d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	4b71      	ldr	r3, [pc, #452]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	0619      	lsls	r1, r3, #24
 800a6e2:	4b70      	ldr	r3, [pc, #448]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6e4:	785b      	ldrb	r3, [r3, #1]
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	4319      	orrs	r1, r3
 800a6ea:	4b6e      	ldr	r3, [pc, #440]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6ec:	789b      	ldrb	r3, [r3, #2]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	496c      	ldr	r1, [pc, #432]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a6f4:	78c9      	ldrb	r1, [r1, #3]
 800a6f6:	430b      	orrs	r3, r1
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6fe:	431a      	orrs	r2, r3
 800a700:	4b68      	ldr	r3, [pc, #416]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	0619      	lsls	r1, r3, #24
 800a706:	4b67      	ldr	r3, [pc, #412]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	041b      	lsls	r3, r3, #16
 800a70c:	4319      	orrs	r1, r3
 800a70e:	4b65      	ldr	r3, [pc, #404]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a710:	789b      	ldrb	r3, [r3, #2]
 800a712:	021b      	lsls	r3, r3, #8
 800a714:	430b      	orrs	r3, r1
 800a716:	4963      	ldr	r1, [pc, #396]	@ (800a8a4 <MX_LWIP_Init+0x260>)
 800a718:	78c9      	ldrb	r1, [r1, #3]
 800a71a:	430b      	orrs	r3, r1
 800a71c:	0e1b      	lsrs	r3, r3, #24
 800a71e:	4313      	orrs	r3, r2
 800a720:	4a63      	ldr	r2, [pc, #396]	@ (800a8b0 <MX_LWIP_Init+0x26c>)
 800a722:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a724:	4b60      	ldr	r3, [pc, #384]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	061a      	lsls	r2, r3, #24
 800a72a:	4b5f      	ldr	r3, [pc, #380]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	041b      	lsls	r3, r3, #16
 800a730:	431a      	orrs	r2, r3
 800a732:	4b5d      	ldr	r3, [pc, #372]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a734:	789b      	ldrb	r3, [r3, #2]
 800a736:	021b      	lsls	r3, r3, #8
 800a738:	4313      	orrs	r3, r2
 800a73a:	4a5b      	ldr	r2, [pc, #364]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a73c:	78d2      	ldrb	r2, [r2, #3]
 800a73e:	4313      	orrs	r3, r2
 800a740:	061a      	lsls	r2, r3, #24
 800a742:	4b59      	ldr	r3, [pc, #356]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	0619      	lsls	r1, r3, #24
 800a748:	4b57      	ldr	r3, [pc, #348]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	041b      	lsls	r3, r3, #16
 800a74e:	4319      	orrs	r1, r3
 800a750:	4b55      	ldr	r3, [pc, #340]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a752:	789b      	ldrb	r3, [r3, #2]
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	430b      	orrs	r3, r1
 800a758:	4953      	ldr	r1, [pc, #332]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a75a:	78c9      	ldrb	r1, [r1, #3]
 800a75c:	430b      	orrs	r3, r1
 800a75e:	021b      	lsls	r3, r3, #8
 800a760:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a764:	431a      	orrs	r2, r3
 800a766:	4b50      	ldr	r3, [pc, #320]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	0619      	lsls	r1, r3, #24
 800a76c:	4b4e      	ldr	r3, [pc, #312]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a76e:	785b      	ldrb	r3, [r3, #1]
 800a770:	041b      	lsls	r3, r3, #16
 800a772:	4319      	orrs	r1, r3
 800a774:	4b4c      	ldr	r3, [pc, #304]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a776:	789b      	ldrb	r3, [r3, #2]
 800a778:	021b      	lsls	r3, r3, #8
 800a77a:	430b      	orrs	r3, r1
 800a77c:	494a      	ldr	r1, [pc, #296]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a77e:	78c9      	ldrb	r1, [r1, #3]
 800a780:	430b      	orrs	r3, r1
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a788:	431a      	orrs	r2, r3
 800a78a:	4b47      	ldr	r3, [pc, #284]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	0619      	lsls	r1, r3, #24
 800a790:	4b45      	ldr	r3, [pc, #276]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a792:	785b      	ldrb	r3, [r3, #1]
 800a794:	041b      	lsls	r3, r3, #16
 800a796:	4319      	orrs	r1, r3
 800a798:	4b43      	ldr	r3, [pc, #268]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a79a:	789b      	ldrb	r3, [r3, #2]
 800a79c:	021b      	lsls	r3, r3, #8
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	4941      	ldr	r1, [pc, #260]	@ (800a8a8 <MX_LWIP_Init+0x264>)
 800a7a2:	78c9      	ldrb	r1, [r1, #3]
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	0e1b      	lsrs	r3, r3, #24
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	4a42      	ldr	r2, [pc, #264]	@ (800a8b4 <MX_LWIP_Init+0x270>)
 800a7ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a7ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	061a      	lsls	r2, r3, #24
 800a7b4:	4b3d      	ldr	r3, [pc, #244]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7b6:	785b      	ldrb	r3, [r3, #1]
 800a7b8:	041b      	lsls	r3, r3, #16
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	4b3b      	ldr	r3, [pc, #236]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7be:	789b      	ldrb	r3, [r3, #2]
 800a7c0:	021b      	lsls	r3, r3, #8
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	4a39      	ldr	r2, [pc, #228]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7c6:	78d2      	ldrb	r2, [r2, #3]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	061a      	lsls	r2, r3, #24
 800a7cc:	4b37      	ldr	r3, [pc, #220]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	0619      	lsls	r1, r3, #24
 800a7d2:	4b36      	ldr	r3, [pc, #216]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	4319      	orrs	r1, r3
 800a7da:	4b34      	ldr	r3, [pc, #208]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7dc:	789b      	ldrb	r3, [r3, #2]
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	430b      	orrs	r3, r1
 800a7e2:	4932      	ldr	r1, [pc, #200]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7e4:	78c9      	ldrb	r1, [r1, #3]
 800a7e6:	430b      	orrs	r3, r1
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	0619      	lsls	r1, r3, #24
 800a7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a7f8:	785b      	ldrb	r3, [r3, #1]
 800a7fa:	041b      	lsls	r3, r3, #16
 800a7fc:	4319      	orrs	r1, r3
 800a7fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a800:	789b      	ldrb	r3, [r3, #2]
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	430b      	orrs	r3, r1
 800a806:	4929      	ldr	r1, [pc, #164]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a808:	78c9      	ldrb	r1, [r1, #3]
 800a80a:	430b      	orrs	r3, r1
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a812:	431a      	orrs	r2, r3
 800a814:	4b25      	ldr	r3, [pc, #148]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	0619      	lsls	r1, r3, #24
 800a81a:	4b24      	ldr	r3, [pc, #144]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a81c:	785b      	ldrb	r3, [r3, #1]
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	4319      	orrs	r1, r3
 800a822:	4b22      	ldr	r3, [pc, #136]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a824:	789b      	ldrb	r3, [r3, #2]
 800a826:	021b      	lsls	r3, r3, #8
 800a828:	430b      	orrs	r3, r1
 800a82a:	4920      	ldr	r1, [pc, #128]	@ (800a8ac <MX_LWIP_Init+0x268>)
 800a82c:	78c9      	ldrb	r1, [r1, #3]
 800a82e:	430b      	orrs	r3, r1
 800a830:	0e1b      	lsrs	r3, r3, #24
 800a832:	4313      	orrs	r3, r2
 800a834:	4a20      	ldr	r2, [pc, #128]	@ (800a8b8 <MX_LWIP_Init+0x274>)
 800a836:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a838:	4b20      	ldr	r3, [pc, #128]	@ (800a8bc <MX_LWIP_Init+0x278>)
 800a83a:	9302      	str	r3, [sp, #8]
 800a83c:	4b20      	ldr	r3, [pc, #128]	@ (800a8c0 <MX_LWIP_Init+0x27c>)
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	2300      	movs	r3, #0
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <MX_LWIP_Init+0x274>)
 800a846:	4a1b      	ldr	r2, [pc, #108]	@ (800a8b4 <MX_LWIP_Init+0x270>)
 800a848:	4919      	ldr	r1, [pc, #100]	@ (800a8b0 <MX_LWIP_Init+0x26c>)
 800a84a:	481e      	ldr	r0, [pc, #120]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a84c:	f007 fd6a 	bl	8012324 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a850:	481c      	ldr	r0, [pc, #112]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a852:	f007 ff19 	bl	8012688 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a856:	4b1b      	ldr	r3, [pc, #108]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a858:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a85c:	089b      	lsrs	r3, r3, #2
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b00      	cmp	r3, #0
 800a866:	d003      	beq.n	800a870 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a868:	4816      	ldr	r0, [pc, #88]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a86a:	f007 ff1d 	bl	80126a8 <netif_set_up>
 800a86e:	e002      	b.n	800a876 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a870:	4814      	ldr	r0, [pc, #80]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a872:	f007 ff85 	bl	8012780 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a876:	4914      	ldr	r1, [pc, #80]	@ (800a8c8 <MX_LWIP_Init+0x284>)
 800a878:	4812      	ldr	r0, [pc, #72]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a87a:	f008 f817 	bl	80128ac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a87e:	4b13      	ldr	r3, [pc, #76]	@ (800a8cc <MX_LWIP_Init+0x288>)
 800a880:	1d3c      	adds	r4, r7, #4
 800a882:	461d      	mov	r5, r3
 800a884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a888:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a88c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a890:	1d3b      	adds	r3, r7, #4
 800a892:	490c      	ldr	r1, [pc, #48]	@ (800a8c4 <MX_LWIP_Init+0x280>)
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fd47 	bl	800b328 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a89a:	bf00      	nop
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200008f4 	.word	0x200008f4
 800a8a8:	200008f8 	.word	0x200008f8
 800a8ac:	200008fc 	.word	0x200008fc
 800a8b0:	200008e8 	.word	0x200008e8
 800a8b4:	200008ec 	.word	0x200008ec
 800a8b8:	200008f0 	.word	0x200008f0
 800a8bc:	08010a01 	.word	0x08010a01
 800a8c0:	0800adc9 	.word	0x0800adc9
 800a8c4:	200008b4 	.word	0x200008b4
 800a8c8:	0800a8d1 	.word	0x0800a8d1
 800a8cc:	0801fe3c 	.word	0x0801fe3c

0800a8d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a8f6:	2320      	movs	r3, #32
 800a8f8:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a8fa:	f3bf 8f4f 	dsb	sy
}
 800a8fe:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800a900:	e00b      	b.n	800a91a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a902:	4a0d      	ldr	r2, [pc, #52]	@ (800a938 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dcf0      	bgt.n	800a902 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a920:	f3bf 8f4f 	dsb	sy
}
 800a924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a926:	f3bf 8f6f 	isb	sy
}
 800a92a:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800a92c:	bf00      	nop
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	e000ed00 	.word	0xe000ed00

0800a93c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a944:	4b04      	ldr	r3, [pc, #16]	@ (800a958 <HAL_ETH_RxCpltCallback+0x1c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fe69 	bl	800b620 <osSemaphoreRelease>
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	2000528c 	.word	0x2000528c

0800a95c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a964:	4b04      	ldr	r3, [pc, #16]	@ (800a978 <HAL_ETH_TxCpltCallback+0x1c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fe59 	bl	800b620 <osSemaphoreRelease>
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20005290 	.word	0x20005290

0800a97c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7fa f83d 	bl	8004a04 <HAL_ETH_GetDMAError>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a990:	2b80      	cmp	r3, #128	@ 0x80
 800a992:	d104      	bne.n	800a99e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a994:	4b04      	ldr	r3, [pc, #16]	@ (800a9a8 <HAL_ETH_ErrorCallback+0x2c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fe41 	bl	800b620 <osSemaphoreRelease>
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	2000528c 	.word	0x2000528c

0800a9ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a9ac:	b5b0      	push	{r4, r5, r7, lr}
 800a9ae:	b0a8      	sub	sp, #160	@ 0xa0
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800a9c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9ca:	2264      	movs	r2, #100	@ 0x64
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f013 f86c 	bl	801daac <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a9d4:	4b85      	ldr	r3, [pc, #532]	@ (800abec <low_level_init+0x240>)
 800a9d6:	4a86      	ldr	r2, [pc, #536]	@ (800abf0 <low_level_init+0x244>)
 800a9d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 800a9e0:	2380      	movs	r3, #128	@ 0x80
 800a9e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 800a9e6:	23e1      	movs	r3, #225	@ 0xe1
 800a9e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800a9fe:	4a7b      	ldr	r2, [pc, #492]	@ (800abec <low_level_init+0x240>)
 800aa00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa04:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800aa06:	4b79      	ldr	r3, [pc, #484]	@ (800abec <low_level_init+0x240>)
 800aa08:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800aa0c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800aa0e:	4b77      	ldr	r3, [pc, #476]	@ (800abec <low_level_init+0x240>)
 800aa10:	4a78      	ldr	r2, [pc, #480]	@ (800abf4 <low_level_init+0x248>)
 800aa12:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800aa14:	4b75      	ldr	r3, [pc, #468]	@ (800abec <low_level_init+0x240>)
 800aa16:	4a78      	ldr	r2, [pc, #480]	@ (800abf8 <low_level_init+0x24c>)
 800aa18:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800aa1a:	4b74      	ldr	r3, [pc, #464]	@ (800abec <low_level_init+0x240>)
 800aa1c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800aa20:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800aa22:	4872      	ldr	r0, [pc, #456]	@ (800abec <low_level_init+0x240>)
 800aa24:	f7f9 f950 	bl	8003cc8 <HAL_ETH_Init>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800aa2e:	2238      	movs	r2, #56	@ 0x38
 800aa30:	2100      	movs	r1, #0
 800aa32:	4872      	ldr	r0, [pc, #456]	@ (800abfc <low_level_init+0x250>)
 800aa34:	f013 f83a 	bl	801daac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800aa38:	4b70      	ldr	r3, [pc, #448]	@ (800abfc <low_level_init+0x250>)
 800aa3a:	2221      	movs	r2, #33	@ 0x21
 800aa3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800aa3e:	4b6f      	ldr	r3, [pc, #444]	@ (800abfc <low_level_init+0x250>)
 800aa40:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800aa44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800aa46:	4b6d      	ldr	r3, [pc, #436]	@ (800abfc <low_level_init+0x250>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800aa4c:	486c      	ldr	r0, [pc, #432]	@ (800ac00 <low_level_init+0x254>)
 800aa4e:	f007 fb23 	bl	8012098 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2206      	movs	r2, #6
 800aa56:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aa5a:	4b64      	ldr	r3, [pc, #400]	@ (800abec <low_level_init+0x240>)
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800aa66:	4b61      	ldr	r3, [pc, #388]	@ (800abec <low_level_init+0x240>)
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	785a      	ldrb	r2, [r3, #1]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800aa72:	4b5e      	ldr	r3, [pc, #376]	@ (800abec <low_level_init+0x240>)
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	789a      	ldrb	r2, [r3, #2]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800aa7e:	4b5b      	ldr	r3, [pc, #364]	@ (800abec <low_level_init+0x240>)
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	78da      	ldrb	r2, [r3, #3]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800aa8a:	4b58      	ldr	r3, [pc, #352]	@ (800abec <low_level_init+0x240>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	791a      	ldrb	r2, [r3, #4]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800aa96:	4b55      	ldr	r3, [pc, #340]	@ (800abec <low_level_init+0x240>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	795a      	ldrb	r2, [r3, #5]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800aaa8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aab0:	f043 030a 	orr.w	r3, r3, #10
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800aabc:	2203      	movs	r2, #3
 800aabe:	2100      	movs	r1, #0
 800aac0:	2001      	movs	r0, #1
 800aac2:	f001 f8a4 	bl	800bc0e <xQueueGenericCreate>
 800aac6:	4603      	mov	r3, r0
 800aac8:	4a4e      	ldr	r2, [pc, #312]	@ (800ac04 <low_level_init+0x258>)
 800aaca:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800aacc:	2203      	movs	r2, #3
 800aace:	2100      	movs	r1, #0
 800aad0:	2001      	movs	r0, #1
 800aad2:	f001 f89c 	bl	800bc0e <xQueueGenericCreate>
 800aad6:	4603      	mov	r3, r0
 800aad8:	4a4b      	ldr	r2, [pc, #300]	@ (800ac08 <low_level_init+0x25c>)
 800aada:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800aadc:	4b4b      	ldr	r3, [pc, #300]	@ (800ac0c <low_level_init+0x260>)
 800aade:	f107 0408 	add.w	r4, r7, #8
 800aae2:	461d      	mov	r5, r3
 800aae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aaec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800aaf0:	f107 0308 	add.w	r3, r7, #8
 800aaf4:	6879      	ldr	r1, [r7, #4]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fc16 	bl	800b328 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800aafc:	4944      	ldr	r1, [pc, #272]	@ (800ac10 <low_level_init+0x264>)
 800aafe:	4845      	ldr	r0, [pc, #276]	@ (800ac14 <low_level_init+0x268>)
 800ab00:	f7f8 fdbb 	bl	800367a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ab04:	4843      	ldr	r0, [pc, #268]	@ (800ac14 <low_level_init+0x268>)
 800ab06:	f7f8 fdea 	bl	80036de <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ab0a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d165      	bne.n	800abde <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab12:	4840      	ldr	r0, [pc, #256]	@ (800ac14 <low_level_init+0x268>)
 800ab14:	f7f8 fe8b 	bl	800382e <LAN8742_GetLinkState>
 800ab18:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800ab1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	dc06      	bgt.n	800ab32 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f007 fe91 	bl	801284c <netif_set_link_down>
      netif_set_down(netif);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f007 fe28 	bl	8012780 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800ab30:	e057      	b.n	800abe2 <low_level_init+0x236>
      switch (PHYLinkState)
 800ab32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ab36:	3b02      	subs	r3, #2
 800ab38:	2b03      	cmp	r3, #3
 800ab3a:	d82b      	bhi.n	800ab94 <low_level_init+0x1e8>
 800ab3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <low_level_init+0x198>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800ab55 	.word	0x0800ab55
 800ab48:	0800ab67 	.word	0x0800ab67
 800ab4c:	0800ab77 	.word	0x0800ab77
 800ab50:	0800ab87 	.word	0x0800ab87
        duplex = ETH_FULLDUPLEX_MODE;
 800ab54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800ab5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800ab64:	e01f      	b.n	800aba6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800ab6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ab70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800ab74:	e017      	b.n	800aba6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800ab76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800ab84:	e00f      	b.n	800aba6 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800ab92:	e008      	b.n	800aba6 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800ab94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ab98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800ab9c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aba4:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800abaa:	4619      	mov	r1, r3
 800abac:	480f      	ldr	r0, [pc, #60]	@ (800abec <low_level_init+0x240>)
 800abae:	f7f9 fdcf 	bl	8004750 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800abb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abb6:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 800abb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abbc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800abbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800abc2:	4619      	mov	r1, r3
 800abc4:	4809      	ldr	r0, [pc, #36]	@ (800abec <low_level_init+0x240>)
 800abc6:	f7f9 fead 	bl	8004924 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800abca:	4808      	ldr	r0, [pc, #32]	@ (800abec <low_level_init+0x240>)
 800abcc:	f7f9 f958 	bl	8003e80 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f007 fd69 	bl	80126a8 <netif_set_up>
    netif_set_link_up(netif);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f007 fe04 	bl	80127e4 <netif_set_link_up>
}
 800abdc:	e001      	b.n	800abe2 <low_level_init+0x236>
    Error_Handler();
 800abde:	f7f8 f951 	bl	8002e84 <Error_Handler>
}
 800abe2:	bf00      	nop
 800abe4:	37a0      	adds	r7, #160	@ 0xa0
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bdb0      	pop	{r4, r5, r7, pc}
 800abea:	bf00      	nop
 800abec:	20005294 	.word	0x20005294
 800abf0:	40028000 	.word	0x40028000
 800abf4:	200002f0 	.word	0x200002f0
 800abf8:	20000250 	.word	0x20000250
 800abfc:	20005344 	.word	0x20005344
 800ac00:	080235e0 	.word	0x080235e0
 800ac04:	2000528c 	.word	0x2000528c
 800ac08:	20005290 	.word	0x20005290
 800ac0c:	0801fe60 	.word	0x0801fe60
 800ac10:	20000064 	.word	0x20000064
 800ac14:	2000537c 	.word	0x2000537c

0800ac18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b092      	sub	sp, #72	@ 0x48
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800ac26:	2300      	movs	r3, #0
 800ac28:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ac30:	f107 030c 	add.w	r3, r7, #12
 800ac34:	2230      	movs	r2, #48	@ 0x30
 800ac36:	2100      	movs	r1, #0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f012 ff37 	bl	801daac <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ac3e:	f107 030c 	add.w	r3, r7, #12
 800ac42:	2230      	movs	r2, #48	@ 0x30
 800ac44:	2100      	movs	r1, #0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f012 ff30 	bl	801daac <memset>

  for(q = p; q != NULL; q = q->next)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ac50:	e045      	b.n	800acde <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ac52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d902      	bls.n	800ac5e <low_level_output+0x46>
      return ERR_IF;
 800ac58:	f06f 030b 	mvn.w	r3, #11
 800ac5c:	e065      	b.n	800ad2a <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800ac5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac60:	6859      	ldr	r1, [r3, #4]
 800ac62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac64:	4613      	mov	r3, r2
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	3348      	adds	r3, #72	@ 0x48
 800ac6e:	443b      	add	r3, r7
 800ac70:	3b3c      	subs	r3, #60	@ 0x3c
 800ac72:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ac74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac76:	895b      	ldrh	r3, [r3, #10]
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	3348      	adds	r3, #72	@ 0x48
 800ac86:	443b      	add	r3, r7
 800ac88:	3b38      	subs	r3, #56	@ 0x38
 800ac8a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ac8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d011      	beq.n	800acb6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ac92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac94:	1e5a      	subs	r2, r3, #1
 800ac96:	f107 000c 	add.w	r0, r7, #12
 800ac9a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	440b      	add	r3, r1
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	18c1      	adds	r1, r0, r3
 800aca6:	4613      	mov	r3, r2
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	3348      	adds	r3, #72	@ 0x48
 800acb0:	443b      	add	r3, r7
 800acb2:	3b34      	subs	r3, #52	@ 0x34
 800acb4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800acb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d109      	bne.n	800acd2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800acbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acc0:	4613      	mov	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	4413      	add	r3, r2
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	3348      	adds	r3, #72	@ 0x48
 800acca:	443b      	add	r3, r7
 800accc:	3b34      	subs	r3, #52	@ 0x34
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800acd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800acd4:	3301      	adds	r3, #1
 800acd6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800acd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	643b      	str	r3, [r7, #64]	@ 0x40
 800acde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d1b6      	bne.n	800ac52 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	891b      	ldrh	r3, [r3, #8]
 800ace8:	461a      	mov	r2, r3
 800acea:	4b12      	ldr	r3, [pc, #72]	@ (800ad34 <low_level_output+0x11c>)
 800acec:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800acee:	4a11      	ldr	r2, [pc, #68]	@ (800ad34 <low_level_output+0x11c>)
 800acf0:	f107 030c 	add.w	r3, r7, #12
 800acf4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800acf6:	4a0f      	ldr	r2, [pc, #60]	@ (800ad34 <low_level_output+0x11c>)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800acfc:	6838      	ldr	r0, [r7, #0]
 800acfe:	f008 fa29 	bl	8013154 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800ad02:	490c      	ldr	r1, [pc, #48]	@ (800ad34 <low_level_output+0x11c>)
 800ad04:	480c      	ldr	r0, [pc, #48]	@ (800ad38 <low_level_output+0x120>)
 800ad06:	f7f9 f9c9 	bl	800409c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800ad0a:	bf00      	nop
 800ad0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad3c <low_level_output+0x124>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f04f 31ff 	mov.w	r1, #4294967295
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fc35 	bl	800b584 <osSemaphoreWait>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f5      	bne.n	800ad0c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800ad20:	4805      	ldr	r0, [pc, #20]	@ (800ad38 <low_level_output+0x120>)
 800ad22:	f7f9 fb4f 	bl	80043c4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800ad26:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3748      	adds	r7, #72	@ 0x48
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20005344 	.word	0x20005344
 800ad38:	20005294 	.word	0x20005294
 800ad3c:	20005290 	.word	0x20005290

0800ad40 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ad4c:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <low_level_input+0x2c>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d105      	bne.n	800ad60 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4805      	ldr	r0, [pc, #20]	@ (800ad70 <low_level_input+0x30>)
 800ad5c:	f7f9 f9fa 	bl	8004154 <HAL_ETH_ReadData>
  }

  return p;
 800ad60:	68fb      	ldr	r3, [r7, #12]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20005288 	.word	0x20005288
 800ad70:	20005294 	.word	0x20005294

0800ad74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ad84:	4b0f      	ldr	r3, [pc, #60]	@ (800adc4 <ethernetif_input+0x50>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f04f 31ff 	mov.w	r1, #4294967295
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 fbf9 	bl	800b584 <osSemaphoreWait>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1f5      	bne.n	800ad84 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800ad98:	68b8      	ldr	r0, [r7, #8]
 800ad9a:	f7ff ffd1 	bl	800ad40 <low_level_input>
 800ad9e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	4798      	blx	r3
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f008 f926 	bl	8013008 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1ea      	bne.n	800ad98 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800adc2:	e7df      	b.n	800ad84 <ethernetif_input+0x10>
 800adc4:	2000528c 	.word	0x2000528c

0800adc8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <ethernetif_init+0x1c>
 800add6:	4b0e      	ldr	r3, [pc, #56]	@ (800ae10 <ethernetif_init+0x48>)
 800add8:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800addc:	490d      	ldr	r1, [pc, #52]	@ (800ae14 <ethernetif_init+0x4c>)
 800adde:	480e      	ldr	r0, [pc, #56]	@ (800ae18 <ethernetif_init+0x50>)
 800ade0:	f012 fcd2 	bl	801d788 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2273      	movs	r2, #115	@ 0x73
 800ade8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2274      	movs	r2, #116	@ 0x74
 800adf0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a09      	ldr	r2, [pc, #36]	@ (800ae1c <ethernetif_init+0x54>)
 800adf8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4a08      	ldr	r2, [pc, #32]	@ (800ae20 <ethernetif_init+0x58>)
 800adfe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff fdd3 	bl	800a9ac <low_level_init>

  return ERR_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	0801fe7c 	.word	0x0801fe7c
 800ae14:	0801fe98 	.word	0x0801fe98
 800ae18:	0801fea8 	.word	0x0801fea8
 800ae1c:	0801ac21 	.word	0x0801ac21
 800ae20:	0800ac19 	.word	0x0800ac19

0800ae24 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ae30:	68f9      	ldr	r1, [r7, #12]
 800ae32:	4809      	ldr	r0, [pc, #36]	@ (800ae58 <pbuf_free_custom+0x34>)
 800ae34:	f007 fa20 	bl	8012278 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ae38:	4b08      	ldr	r3, [pc, #32]	@ (800ae5c <pbuf_free_custom+0x38>)
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d107      	bne.n	800ae50 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ae40:	4b06      	ldr	r3, [pc, #24]	@ (800ae5c <pbuf_free_custom+0x38>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ae46:	4b06      	ldr	r3, [pc, #24]	@ (800ae60 <pbuf_free_custom+0x3c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fbe8 	bl	800b620 <osSemaphoreRelease>
  }
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	080235e0 	.word	0x080235e0
 800ae5c:	20005288 	.word	0x20005288
 800ae60:	2000528c 	.word	0x2000528c

0800ae64 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ae68:	f7f8 fd8a 	bl	8003980 <HAL_GetTick>
 800ae6c:	4603      	mov	r3, r0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08e      	sub	sp, #56	@ 0x38
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	605a      	str	r2, [r3, #4]
 800ae86:	609a      	str	r2, [r3, #8]
 800ae88:	60da      	str	r2, [r3, #12]
 800ae8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a52      	ldr	r2, [pc, #328]	@ (800afdc <HAL_ETH_MspInit+0x168>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	f040 809e 	bne.w	800afd4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ae98:	4b51      	ldr	r3, [pc, #324]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae9c:	4a50      	ldr	r2, [pc, #320]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800ae9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aea2:	6313      	str	r3, [r2, #48]	@ 0x30
 800aea4:	4b4e      	ldr	r3, [pc, #312]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeac:	623b      	str	r3, [r7, #32]
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	4b4b      	ldr	r3, [pc, #300]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb4:	4a4a      	ldr	r2, [pc, #296]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aeb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aeba:	6313      	str	r3, [r2, #48]	@ 0x30
 800aebc:	4b48      	ldr	r3, [pc, #288]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aec0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aec4:	61fb      	str	r3, [r7, #28]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4b45      	ldr	r3, [pc, #276]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aeca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aecc:	4a44      	ldr	r2, [pc, #272]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aece:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aed2:	6313      	str	r3, [r2, #48]	@ 0x30
 800aed4:	4b42      	ldr	r3, [pc, #264]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aedc:	61bb      	str	r3, [r7, #24]
 800aede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aee0:	4b3f      	ldr	r3, [pc, #252]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee4:	4a3e      	ldr	r2, [pc, #248]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aee6:	f043 0304 	orr.w	r3, r3, #4
 800aeea:	6313      	str	r3, [r2, #48]	@ 0x30
 800aeec:	4b3c      	ldr	r3, [pc, #240]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aeee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aef8:	4b39      	ldr	r3, [pc, #228]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aefa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aefc:	4a38      	ldr	r2, [pc, #224]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800aefe:	f043 0301 	orr.w	r3, r3, #1
 800af02:	6313      	str	r3, [r2, #48]	@ 0x30
 800af04:	4b36      	ldr	r3, [pc, #216]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	613b      	str	r3, [r7, #16]
 800af0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af10:	4b33      	ldr	r3, [pc, #204]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af14:	4a32      	ldr	r2, [pc, #200]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af16:	f043 0302 	orr.w	r3, r3, #2
 800af1a:	6313      	str	r3, [r2, #48]	@ 0x30
 800af1c:	4b30      	ldr	r3, [pc, #192]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800af28:	4b2d      	ldr	r3, [pc, #180]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2c:	4a2c      	ldr	r2, [pc, #176]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af32:	6313      	str	r3, [r2, #48]	@ 0x30
 800af34:	4b2a      	ldr	r3, [pc, #168]	@ (800afe0 <HAL_ETH_MspInit+0x16c>)
 800af36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af3c:	60bb      	str	r3, [r7, #8]
 800af3e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800af40:	2332      	movs	r3, #50	@ 0x32
 800af42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af44:	2302      	movs	r3, #2
 800af46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af48:	2300      	movs	r3, #0
 800af4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af4c:	2303      	movs	r3, #3
 800af4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af50:	230b      	movs	r3, #11
 800af52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800af54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af58:	4619      	mov	r1, r3
 800af5a:	4822      	ldr	r0, [pc, #136]	@ (800afe4 <HAL_ETH_MspInit+0x170>)
 800af5c:	f7fa f962 	bl	8005224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800af60:	2386      	movs	r3, #134	@ 0x86
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af64:	2302      	movs	r3, #2
 800af66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af6c:	2303      	movs	r3, #3
 800af6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af70:	230b      	movs	r3, #11
 800af72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af78:	4619      	mov	r1, r3
 800af7a:	481b      	ldr	r0, [pc, #108]	@ (800afe8 <HAL_ETH_MspInit+0x174>)
 800af7c:	f7fa f952 	bl	8005224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800af80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af86:	2302      	movs	r3, #2
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af8e:	2303      	movs	r3, #3
 800af90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800af92:	230b      	movs	r3, #11
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800af96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af9a:	4619      	mov	r1, r3
 800af9c:	4813      	ldr	r0, [pc, #76]	@ (800afec <HAL_ETH_MspInit+0x178>)
 800af9e:	f7fa f941 	bl	8005224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800afa2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800afa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afa8:	2302      	movs	r3, #2
 800afaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afac:	2300      	movs	r3, #0
 800afae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afb0:	2303      	movs	r3, #3
 800afb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afb4:	230b      	movs	r3, #11
 800afb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800afb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800afbc:	4619      	mov	r1, r3
 800afbe:	480c      	ldr	r0, [pc, #48]	@ (800aff0 <HAL_ETH_MspInit+0x17c>)
 800afc0:	f7fa f930 	bl	8005224 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800afc4:	2200      	movs	r2, #0
 800afc6:	2105      	movs	r1, #5
 800afc8:	203d      	movs	r0, #61	@ 0x3d
 800afca:	f7f8 fdc1 	bl	8003b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800afce:	203d      	movs	r0, #61	@ 0x3d
 800afd0:	f7f8 fdda 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800afd4:	bf00      	nop
 800afd6:	3738      	adds	r7, #56	@ 0x38
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	40028000 	.word	0x40028000
 800afe0:	40023800 	.word	0x40023800
 800afe4:	40020800 	.word	0x40020800
 800afe8:	40020000 	.word	0x40020000
 800afec:	40020400 	.word	0x40020400
 800aff0:	40021800 	.word	0x40021800

0800aff4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aff8:	4802      	ldr	r0, [pc, #8]	@ (800b004 <ETH_PHY_IO_Init+0x10>)
 800affa:	f7f9 fcad 	bl	8004958 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20005294 	.word	0x20005294

0800b008 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  return 0;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	68f9      	ldr	r1, [r7, #12]
 800b02a:	4807      	ldr	r0, [pc, #28]	@ (800b048 <ETH_PHY_IO_ReadReg+0x30>)
 800b02c:	f7f9 fafc 	bl	8004628 <HAL_ETH_ReadPHYRegister>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b036:	f04f 33ff 	mov.w	r3, #4294967295
 800b03a:	e000      	b.n	800b03e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20005294 	.word	0x20005294

0800b04c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	68f9      	ldr	r1, [r7, #12]
 800b05e:	4807      	ldr	r0, [pc, #28]	@ (800b07c <ETH_PHY_IO_WriteReg+0x30>)
 800b060:	f7f9 fb2d 	bl	80046be <HAL_ETH_WritePHYRegister>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b06a:	f04f 33ff 	mov.w	r3, #4294967295
 800b06e:	e000      	b.n	800b072 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20005294 	.word	0x20005294

0800b080 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b084:	f7f8 fc7c 	bl	8003980 <HAL_GetTick>
 800b088:	4603      	mov	r3, r0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b0a0      	sub	sp, #128	@ 0x80
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	2264      	movs	r2, #100	@ 0x64
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f012 fd03 	bl	801daac <memset>
  int32_t PHYLinkState = 0;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b0ba:	483a      	ldr	r0, [pc, #232]	@ (800b1a4 <ethernet_link_thread+0x114>)
 800b0bc:	f7f8 fbb7 	bl	800382e <LAN8742_GetLinkState>
 800b0c0:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b0c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b0c8:	089b      	lsrs	r3, r3, #2
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00c      	beq.n	800b0ee <ethernet_link_thread+0x5e>
 800b0d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	dc09      	bgt.n	800b0ee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b0da:	4833      	ldr	r0, [pc, #204]	@ (800b1a8 <ethernet_link_thread+0x118>)
 800b0dc:	f7f8 ff5e 	bl	8003f9c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b0e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0e2:	f007 fb4d 	bl	8012780 <netif_set_down>
    netif_set_link_down(netif);
 800b0e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b0e8:	f007 fbb0 	bl	801284c <netif_set_link_down>
 800b0ec:	e055      	b.n	800b19a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b0f4:	f003 0304 	and.w	r3, r3, #4
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d14e      	bne.n	800b19a <ethernet_link_thread+0x10a>
 800b0fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	dd4b      	ble.n	800b19a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800b102:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b104:	3b02      	subs	r3, #2
 800b106:	2b03      	cmp	r3, #3
 800b108:	d82a      	bhi.n	800b160 <ethernet_link_thread+0xd0>
 800b10a:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <ethernet_link_thread+0x80>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b121 	.word	0x0800b121
 800b114:	0800b133 	.word	0x0800b133
 800b118:	0800b143 	.word	0x0800b143
 800b11c:	0800b153 	.word	0x0800b153
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b120:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b124:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b126:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b12a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b12c:	2301      	movs	r3, #1
 800b12e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b130:	e017      	b.n	800b162 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b132:	2300      	movs	r3, #0
 800b134:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800b136:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b13a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b13c:	2301      	movs	r3, #1
 800b13e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b140:	e00f      	b.n	800b162 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b146:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b148:	2300      	movs	r3, #0
 800b14a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b14c:	2301      	movs	r3, #1
 800b14e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b150:	e007      	b.n	800b162 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b152:	2300      	movs	r3, #0
 800b154:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b156:	2300      	movs	r3, #0
 800b158:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b15a:	2301      	movs	r3, #1
 800b15c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b15e:	e000      	b.n	800b162 <ethernet_link_thread+0xd2>
    default:
      break;
 800b160:	bf00      	nop
    }

    if(linkchanged)
 800b162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d018      	beq.n	800b19a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b168:	f107 0308 	add.w	r3, r7, #8
 800b16c:	4619      	mov	r1, r3
 800b16e:	480e      	ldr	r0, [pc, #56]	@ (800b1a8 <ethernet_link_thread+0x118>)
 800b170:	f7f9 faee 	bl	8004750 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b176:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b17a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b17c:	f107 0308 	add.w	r3, r7, #8
 800b180:	4619      	mov	r1, r3
 800b182:	4809      	ldr	r0, [pc, #36]	@ (800b1a8 <ethernet_link_thread+0x118>)
 800b184:	f7f9 fbce 	bl	8004924 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b188:	4807      	ldr	r0, [pc, #28]	@ (800b1a8 <ethernet_link_thread+0x118>)
 800b18a:	f7f8 fe19 	bl	8003dc0 <HAL_ETH_Start>
      netif_set_up(netif);
 800b18e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b190:	f007 fa8a 	bl	80126a8 <netif_set_up>
      netif_set_link_up(netif);
 800b194:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b196:	f007 fb25 	bl	80127e4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b19a:	2064      	movs	r0, #100	@ 0x64
 800b19c:	f000 f910 	bl	800b3c0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b1a0:	e78b      	b.n	800b0ba <ethernet_link_thread+0x2a>
 800b1a2:	bf00      	nop
 800b1a4:	2000537c 	.word	0x2000537c
 800b1a8:	20005294 	.word	0x20005294

0800b1ac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b1b4:	4812      	ldr	r0, [pc, #72]	@ (800b200 <HAL_ETH_RxAllocateCallback+0x54>)
 800b1b6:	f006 ffeb 	bl	8012190 <memp_malloc_pool>
 800b1ba:	60f8      	str	r0, [r7, #12]
  if (p)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d014      	beq.n	800b1ec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f103 0220 	add.w	r2, r3, #32
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4a0d      	ldr	r2, [pc, #52]	@ (800b204 <HAL_ETH_RxAllocateCallback+0x58>)
 800b1d0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b1da:	9201      	str	r2, [sp, #4]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2241      	movs	r2, #65	@ 0x41
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	f007 fd55 	bl	8012c94 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b1ea:	e005      	b.n	800b1f8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b1ec:	4b06      	ldr	r3, [pc, #24]	@ (800b208 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
}
 800b1f8:	bf00      	nop
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	080235e0 	.word	0x080235e0
 800b204:	0800ae25 	.word	0x0800ae25
 800b208:	20005288 	.word	0x20005288

0800b20c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b088      	sub	sp, #32
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	3b20      	subs	r3, #32
 800b22a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	2200      	movs	r2, #0
 800b236:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	887a      	ldrh	r2, [r7, #2]
 800b23c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d103      	bne.n	800b24e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	e003      	b.n	800b256 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	61fb      	str	r3, [r7, #28]
 800b262:	e009      	b.n	800b278 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	891a      	ldrh	r2, [r3, #8]
 800b268:	887b      	ldrh	r3, [r7, #2]
 800b26a:	4413      	add	r3, r2
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	61fb      	str	r3, [r7, #28]
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1f2      	bne.n	800b264 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b27e:	887b      	ldrh	r3, [r7, #2]
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7ff fb2e 	bl	800a8e4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b288:	bf00      	nop
 800b28a:	3720      	adds	r7, #32
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f007 feb5 	bl	8013008 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b085      	sub	sp, #20
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2b8:	2b84      	cmp	r3, #132	@ 0x84
 800b2ba:	d005      	beq.n	800b2c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	3303      	adds	r3, #3
 800b2c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2dc:	f3ef 8305 	mrs	r3, IPSR
 800b2e0:	607b      	str	r3, [r7, #4]
  return(result);
 800b2e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	bf14      	ite	ne
 800b2e8:	2301      	movne	r3, #1
 800b2ea:	2300      	moveq	r3, #0
 800b2ec:	b2db      	uxtb	r3, r3
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b2fe:	f001 fdad 	bl	800ce5c <vTaskStartScheduler>
  
  return osOK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	bd80      	pop	{r7, pc}

0800b308 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b30c:	f7ff ffe3 	bl	800b2d6 <inHandlerMode>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d003      	beq.n	800b31e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b316:	f001 fecd 	bl	800d0b4 <xTaskGetTickCountFromISR>
 800b31a:	4603      	mov	r3, r0
 800b31c:	e002      	b.n	800b324 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b31e:	f001 feb9 	bl	800d094 <xTaskGetTickCount>
 800b322:	4603      	mov	r3, r0
  }
}
 800b324:	4618      	mov	r0, r3
 800b326:	bd80      	pop	{r7, pc}

0800b328 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32a:	b089      	sub	sp, #36	@ 0x24
 800b32c:	af04      	add	r7, sp, #16
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d020      	beq.n	800b37c <osThreadCreate+0x54>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d01c      	beq.n	800b37c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685c      	ldr	r4, [r3, #4]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	691e      	ldr	r6, [r3, #16]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff ffa6 	bl	800b2a6 <makeFreeRtosPriority>
 800b35a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b364:	9202      	str	r2, [sp, #8]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	9100      	str	r1, [sp, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	4632      	mov	r2, r6
 800b36e:	4629      	mov	r1, r5
 800b370:	4620      	mov	r0, r4
 800b372:	f001 fb83 	bl	800ca7c <xTaskCreateStatic>
 800b376:	4603      	mov	r3, r0
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e01c      	b.n	800b3b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	685c      	ldr	r4, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b388:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b390:	4618      	mov	r0, r3
 800b392:	f7ff ff88 	bl	800b2a6 <makeFreeRtosPriority>
 800b396:	4602      	mov	r2, r0
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	9301      	str	r3, [sp, #4]
 800b39e:	9200      	str	r2, [sp, #0]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f001 fbce 	bl	800cb48 <xTaskCreate>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d001      	beq.n	800b3b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e000      	b.n	800b3b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <osDelay+0x16>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	e000      	b.n	800b3d8 <osDelay+0x18>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fd07 	bl	800cdec <vTaskDelay>
  
  return osOK;
 800b3de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d007      	beq.n	800b408 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	2001      	movs	r0, #1
 800b400:	f000 fc99 	bl	800bd36 <xQueueCreateMutexStatic>
 800b404:	4603      	mov	r3, r0
 800b406:	e003      	b.n	800b410 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b408:	2001      	movs	r0, #1
 800b40a:	f000 fc7c 	bl	800bd06 <xQueueCreateMutex>
 800b40e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <osMutexWait+0x18>
    return osErrorParameter;
 800b42c:	2380      	movs	r3, #128	@ 0x80
 800b42e:	e03a      	b.n	800b4a6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43a:	d103      	bne.n	800b444 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	e009      	b.n	800b458 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d006      	beq.n	800b458 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <osMutexWait+0x40>
      ticks = 1;
 800b454:	2301      	movs	r3, #1
 800b456:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b458:	f7ff ff3d 	bl	800b2d6 <inHandlerMode>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d017      	beq.n	800b492 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	461a      	mov	r2, r3
 800b468:	2100      	movs	r1, #0
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f8c4 	bl	800c5f8 <xQueueReceiveFromISR>
 800b470:	4603      	mov	r3, r0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d001      	beq.n	800b47a <osMutexWait+0x62>
      return osErrorOS;
 800b476:	23ff      	movs	r3, #255	@ 0xff
 800b478:	e015      	b.n	800b4a6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d011      	beq.n	800b4a4 <osMutexWait+0x8c>
 800b480:	4b0b      	ldr	r3, [pc, #44]	@ (800b4b0 <osMutexWait+0x98>)
 800b482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	e008      	b.n	800b4a4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 ff97 	bl	800c3c8 <xQueueSemaphoreTake>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d001      	beq.n	800b4a4 <osMutexWait+0x8c>
    return osErrorOS;
 800b4a0:	23ff      	movs	r3, #255	@ 0xff
 800b4a2:	e000      	b.n	800b4a6 <osMutexWait+0x8e>
  }
  
  return osOK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b4c4:	f7ff ff07 	bl	800b2d6 <inHandlerMode>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d016      	beq.n	800b4fc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fdf6 	bl	800c0c6 <xQueueGiveFromISR>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d001      	beq.n	800b4e4 <osMutexRelease+0x30>
      return osErrorOS;
 800b4e0:	23ff      	movs	r3, #255	@ 0xff
 800b4e2:	e017      	b.n	800b514 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d013      	beq.n	800b512 <osMutexRelease+0x5e>
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800b51c <osMutexRelease+0x68>)
 800b4ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	e00a      	b.n	800b512 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	2200      	movs	r2, #0
 800b500:	2100      	movs	r1, #0
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fc32 	bl	800bd6c <xQueueGenericSend>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d001      	beq.n	800b512 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b50e:	23ff      	movs	r3, #255	@ 0xff
 800b510:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b512:	68fb      	ldr	r3, [r7, #12]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00f      	beq.n	800b552 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d10a      	bne.n	800b54e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2203      	movs	r2, #3
 800b53e:	9200      	str	r2, [sp, #0]
 800b540:	2200      	movs	r2, #0
 800b542:	2100      	movs	r1, #0
 800b544:	2001      	movs	r0, #1
 800b546:	f000 fadb 	bl	800bb00 <xQueueGenericCreateStatic>
 800b54a:	4603      	mov	r3, r0
 800b54c:	e016      	b.n	800b57c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	e014      	b.n	800b57c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d110      	bne.n	800b57a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b558:	2203      	movs	r2, #3
 800b55a:	2100      	movs	r1, #0
 800b55c:	2001      	movs	r0, #1
 800b55e:	f000 fb56 	bl	800bc0e <xQueueGenericCreate>
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <osSemaphoreCreate+0x56>
 800b56a:	2300      	movs	r3, #0
 800b56c:	2200      	movs	r2, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fbfb 	bl	800bd6c <xQueueGenericSend>
      return sema;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	e000      	b.n	800b57c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b57a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b58e:	2300      	movs	r3, #0
 800b590:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b598:	2380      	movs	r3, #128	@ 0x80
 800b59a:	e03a      	b.n	800b612 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a6:	d103      	bne.n	800b5b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	e009      	b.n	800b5c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d006      	beq.n	800b5c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <osSemaphoreWait+0x40>
      ticks = 1;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b5c4:	f7ff fe87 	bl	800b2d6 <inHandlerMode>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d017      	beq.n	800b5fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b5ce:	f107 0308 	add.w	r3, r7, #8
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f001 f80e 	bl	800c5f8 <xQueueReceiveFromISR>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d001      	beq.n	800b5e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b5e2:	23ff      	movs	r3, #255	@ 0xff
 800b5e4:	e015      	b.n	800b612 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d011      	beq.n	800b610 <osSemaphoreWait+0x8c>
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b61c <osSemaphoreWait+0x98>)
 800b5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	e008      	b.n	800b610 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fee1 	bl	800c3c8 <xQueueSemaphoreTake>
 800b606:	4603      	mov	r3, r0
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d001      	beq.n	800b610 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b60c:	23ff      	movs	r3, #255	@ 0xff
 800b60e:	e000      	b.n	800b612 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b630:	f7ff fe51 	bl	800b2d6 <inHandlerMode>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d016      	beq.n	800b668 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b63a:	f107 0308 	add.w	r3, r7, #8
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fd40 	bl	800c0c6 <xQueueGiveFromISR>
 800b646:	4603      	mov	r3, r0
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d001      	beq.n	800b650 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b64c:	23ff      	movs	r3, #255	@ 0xff
 800b64e:	e017      	b.n	800b680 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d013      	beq.n	800b67e <osSemaphoreRelease+0x5e>
 800b656:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <osSemaphoreRelease+0x68>)
 800b658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b65c:	601a      	str	r2, [r3, #0]
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	e00a      	b.n	800b67e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b668:	2300      	movs	r3, #0
 800b66a:	2200      	movs	r2, #0
 800b66c:	2100      	movs	r1, #0
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fb7c 	bl	800bd6c <xQueueGenericSend>
 800b674:	4603      	mov	r3, r0
 800b676:	2b01      	cmp	r3, #1
 800b678:	d001      	beq.n	800b67e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b67a:	23ff      	movs	r3, #255	@ 0xff
 800b67c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b67e:	68fb      	ldr	r3, [r7, #12]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	e000ed04 	.word	0xe000ed04

0800b68c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b694:	f7ff fe1f 	bl	800b2d6 <inHandlerMode>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b69e:	2382      	movs	r3, #130	@ 0x82
 800b6a0:	e003      	b.n	800b6aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f001 f872 	bl	800c78c <vQueueDelete>

  return osOK; 
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b6b2:	b590      	push	{r4, r7, lr}
 800b6b4:	b085      	sub	sp, #20
 800b6b6:	af02      	add	r7, sp, #8
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d011      	beq.n	800b6e8 <osMessageCreate+0x36>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00d      	beq.n	800b6e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6859      	ldr	r1, [r3, #4]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	689a      	ldr	r2, [r3, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	2400      	movs	r4, #0
 800b6de:	9400      	str	r4, [sp, #0]
 800b6e0:	f000 fa0e 	bl	800bb00 <xQueueGenericCreateStatic>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	e008      	b.n	800b6fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6818      	ldr	r0, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	f000 fa8b 	bl	800bc0e <xQueueGenericCreate>
 800b6f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd90      	pop	{r4, r7, pc}
	...

0800b704 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b086      	sub	sp, #24
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <osMessagePut+0x1e>
    ticks = 1;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b722:	f7ff fdd8 	bl	800b2d6 <inHandlerMode>
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d018      	beq.n	800b75e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b72c:	f107 0210 	add.w	r2, r7, #16
 800b730:	f107 0108 	add.w	r1, r7, #8
 800b734:	2300      	movs	r3, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fc22 	bl	800bf80 <xQueueGenericSendFromISR>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d001      	beq.n	800b746 <osMessagePut+0x42>
      return osErrorOS;
 800b742:	23ff      	movs	r3, #255	@ 0xff
 800b744:	e018      	b.n	800b778 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d014      	beq.n	800b776 <osMessagePut+0x72>
 800b74c:	4b0c      	ldr	r3, [pc, #48]	@ (800b780 <osMessagePut+0x7c>)
 800b74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	e00b      	b.n	800b776 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b75e:	f107 0108 	add.w	r1, r7, #8
 800b762:	2300      	movs	r3, #0
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f000 fb00 	bl	800bd6c <xQueueGenericSend>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d001      	beq.n	800b776 <osMessagePut+0x72>
      return osErrorOS;
 800b772:	23ff      	movs	r3, #255	@ 0xff
 800b774:	e000      	b.n	800b778 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b784:	b590      	push	{r4, r7, lr}
 800b786:	b08b      	sub	sp, #44	@ 0x2c
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b794:	2300      	movs	r3, #0
 800b796:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10a      	bne.n	800b7b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b79e:	2380      	movs	r3, #128	@ 0x80
 800b7a0:	617b      	str	r3, [r7, #20]
    return event;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	f107 0314 	add.w	r3, r7, #20
 800b7aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7b2:	e054      	b.n	800b85e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7c2:	d103      	bne.n	800b7cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ca:	e009      	b.n	800b7e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d006      	beq.n	800b7e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d101      	bne.n	800b7e0 <osMessageGet+0x5c>
      ticks = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b7e0:	f7ff fd79 	bl	800b2d6 <inHandlerMode>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01c      	beq.n	800b824 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b7ea:	f107 0220 	add.w	r2, r7, #32
 800b7ee:	f107 0314 	add.w	r3, r7, #20
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	68b8      	ldr	r0, [r7, #8]
 800b7f8:	f000 fefe 	bl	800c5f8 <xQueueReceiveFromISR>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d102      	bne.n	800b808 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b802:	2310      	movs	r3, #16
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e001      	b.n	800b80c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b808:	2300      	movs	r3, #0
 800b80a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01d      	beq.n	800b84e <osMessageGet+0xca>
 800b812:	4b15      	ldr	r3, [pc, #84]	@ (800b868 <osMessageGet+0xe4>)
 800b814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	e014      	b.n	800b84e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b824:	f107 0314 	add.w	r3, r7, #20
 800b828:	3304      	adds	r3, #4
 800b82a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b82c:	4619      	mov	r1, r3
 800b82e:	68b8      	ldr	r0, [r7, #8]
 800b830:	f000 fce2 	bl	800c1f8 <xQueueReceive>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d102      	bne.n	800b840 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b83a:	2310      	movs	r3, #16
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e006      	b.n	800b84e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <osMessageGet+0xc6>
 800b846:	2300      	movs	r3, #0
 800b848:	e000      	b.n	800b84c <osMessageGet+0xc8>
 800b84a:	2340      	movs	r3, #64	@ 0x40
 800b84c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	461c      	mov	r4, r3
 800b852:	f107 0314 	add.w	r3, r7, #20
 800b856:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b85a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	372c      	adds	r7, #44	@ 0x2c
 800b862:	46bd      	mov	sp, r7
 800b864:	bd90      	pop	{r4, r7, pc}
 800b866:	bf00      	nop
 800b868:	e000ed04 	.word	0xe000ed04

0800b86c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b874:	f7ff fd2f 	bl	800b2d6 <inHandlerMode>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 ff63 	bl	800c74a <uxQueueMessagesWaitingFromISR>
 800b884:	4603      	mov	r3, r0
 800b886:	e003      	b.n	800b890 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 ff3d 	bl	800c708 <uxQueueMessagesWaiting>
 800b88e:	4603      	mov	r3, r0
  }
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b8a0:	f7ff fd19 	bl	800b2d6 <inHandlerMode>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d001      	beq.n	800b8ae <osMessageDelete+0x16>
    return osErrorISR;
 800b8aa:	2382      	movs	r3, #130	@ 0x82
 800b8ac:	e003      	b.n	800b8b6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 ff6c 	bl	800c78c <vQueueDelete>

  return osOK; 
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f103 0208 	add.w	r2, r3, #8
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f103 0208 	add.w	r2, r3, #8
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f103 0208 	add.w	r2, r3, #8
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8f2:	bf00      	nop
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	601a      	str	r2, [r3, #0]
}
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d103      	bne.n	800b980 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	e00c      	b.n	800b99a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3308      	adds	r3, #8
 800b984:	60fb      	str	r3, [r7, #12]
 800b986:	e002      	b.n	800b98e <vListInsert+0x2e>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	60fb      	str	r3, [r7, #12]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	429a      	cmp	r2, r3
 800b998:	d2f6      	bcs.n	800b988 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	601a      	str	r2, [r3, #0]
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b085      	sub	sp, #20
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	6892      	ldr	r2, [r2, #8]
 800b9e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6852      	ldr	r2, [r2, #4]
 800b9f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d103      	bne.n	800ba06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	1e5a      	subs	r2, r3, #1
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
	...

0800ba28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10d      	bne.n	800ba58 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	b672      	cpsid	i
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	b662      	cpsie	i
 800ba50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba52:	bf00      	nop
 800ba54:	bf00      	nop
 800ba56:	e7fd      	b.n	800ba54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ba58:	f002 f9a8 	bl	800ddac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba64:	68f9      	ldr	r1, [r7, #12]
 800ba66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ba68:	fb01 f303 	mul.w	r3, r1, r3
 800ba6c:	441a      	add	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba88:	3b01      	subs	r3, #1
 800ba8a:	68f9      	ldr	r1, [r7, #12]
 800ba8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ba8e:	fb01 f303 	mul.w	r3, r1, r3
 800ba92:	441a      	add	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	22ff      	movs	r2, #255	@ 0xff
 800ba9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	22ff      	movs	r2, #255	@ 0xff
 800baa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d114      	bne.n	800bad8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01a      	beq.n	800baec <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3310      	adds	r3, #16
 800baba:	4618      	mov	r0, r3
 800babc:	f001 fc56 	bl	800d36c <xTaskRemoveFromEventList>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d012      	beq.n	800baec <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bac6:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <xQueueGenericReset+0xd4>)
 800bac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	e009      	b.n	800baec <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3310      	adds	r3, #16
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff feee 	bl	800b8be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	3324      	adds	r3, #36	@ 0x24
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff fee9 	bl	800b8be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800baec:	f002 f994 	bl	800de18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800baf0:	2301      	movs	r3, #1
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	e000ed04 	.word	0xe000ed04

0800bb00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b08e      	sub	sp, #56	@ 0x38
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10d      	bne.n	800bb30 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb18:	b672      	cpsid	i
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	b662      	cpsie	i
 800bb28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bb2a:	bf00      	nop
 800bb2c:	bf00      	nop
 800bb2e:	e7fd      	b.n	800bb2c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10d      	bne.n	800bb52 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3a:	b672      	cpsid	i
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	b662      	cpsie	i
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	e7fd      	b.n	800bb4e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <xQueueGenericCreateStatic+0x5e>
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <xQueueGenericCreateStatic+0x62>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <xQueueGenericCreateStatic+0x64>
 800bb62:	2300      	movs	r3, #0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10d      	bne.n	800bb84 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800bb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6c:	b672      	cpsid	i
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	b662      	cpsie	i
 800bb7c:	623b      	str	r3, [r7, #32]
}
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
 800bb82:	e7fd      	b.n	800bb80 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <xQueueGenericCreateStatic+0x90>
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <xQueueGenericCreateStatic+0x94>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <xQueueGenericCreateStatic+0x96>
 800bb94:	2300      	movs	r3, #0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10d      	bne.n	800bbb6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9e:	b672      	cpsid	i
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	b662      	cpsie	i
 800bbae:	61fb      	str	r3, [r7, #28]
}
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	e7fd      	b.n	800bbb2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbb6:	2348      	movs	r3, #72	@ 0x48
 800bbb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b48      	cmp	r3, #72	@ 0x48
 800bbbe:	d00d      	beq.n	800bbdc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc4:	b672      	cpsid	i
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	b662      	cpsie	i
 800bbd4:	61bb      	str	r3, [r7, #24]
}
 800bbd6:	bf00      	nop
 800bbd8:	bf00      	nop
 800bbda:	e7fd      	b.n	800bbd8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bbdc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00d      	beq.n	800bc04 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbf0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 f848 	bl	800bc94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3730      	adds	r7, #48	@ 0x30
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b08a      	sub	sp, #40	@ 0x28
 800bc12:	af02      	add	r7, sp, #8
 800bc14:	60f8      	str	r0, [r7, #12]
 800bc16:	60b9      	str	r1, [r7, #8]
 800bc18:	4613      	mov	r3, r2
 800bc1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10d      	bne.n	800bc3e <xQueueGenericCreate+0x30>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	b672      	cpsid	i
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	b662      	cpsie	i
 800bc36:	613b      	str	r3, [r7, #16]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d102      	bne.n	800bc4a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	61fb      	str	r3, [r7, #28]
 800bc48:	e004      	b.n	800bc54 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	fb02 f303 	mul.w	r3, r2, r3
 800bc52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	3348      	adds	r3, #72	@ 0x48
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f002 f9d5 	bl	800e008 <pvPortMalloc>
 800bc5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc60:	69bb      	ldr	r3, [r7, #24]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d011      	beq.n	800bc8a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	3348      	adds	r3, #72	@ 0x48
 800bc6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2200      	movs	r2, #0
 800bc74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc78:	79fa      	ldrb	r2, [r7, #7]
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	68b9      	ldr	r1, [r7, #8]
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 f805 	bl	800bc94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc8a:	69bb      	ldr	r3, [r7, #24]
	}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3720      	adds	r7, #32
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	69ba      	ldr	r2, [r7, #24]
 800bcac:	601a      	str	r2, [r3, #0]
 800bcae:	e002      	b.n	800bcb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	69b8      	ldr	r0, [r7, #24]
 800bcc6:	f7ff feaf 	bl	800ba28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcca:	bf00      	nop
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f837 	bl	800bd6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bcfe:	bf00      	nop
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b086      	sub	sp, #24
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd10:	2301      	movs	r3, #1
 800bd12:	617b      	str	r3, [r7, #20]
 800bd14:	2300      	movs	r3, #0
 800bd16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	6939      	ldr	r1, [r7, #16]
 800bd1e:	6978      	ldr	r0, [r7, #20]
 800bd20:	f7ff ff75 	bl	800bc0e <xQueueGenericCreate>
 800bd24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff ffd3 	bl	800bcd2 <prvInitialiseMutex>

		return xNewQueue;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
	}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b088      	sub	sp, #32
 800bd3a:	af02      	add	r7, sp, #8
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	6039      	str	r1, [r7, #0]
 800bd40:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd42:	2301      	movs	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
 800bd46:	2300      	movs	r3, #0
 800bd48:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd4a:	79fb      	ldrb	r3, [r7, #7]
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	6939      	ldr	r1, [r7, #16]
 800bd54:	6978      	ldr	r0, [r7, #20]
 800bd56:	f7ff fed3 	bl	800bb00 <xQueueGenericCreateStatic>
 800bd5a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7ff ffb8 	bl	800bcd2 <prvInitialiseMutex>

		return xNewQueue;
 800bd62:	68fb      	ldr	r3, [r7, #12]
	}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3718      	adds	r7, #24
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08e      	sub	sp, #56	@ 0x38
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10d      	bne.n	800bda4 <xQueueGenericSend+0x38>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bd9e:	bf00      	nop
 800bda0:	bf00      	nop
 800bda2:	e7fd      	b.n	800bda0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d103      	bne.n	800bdb2 <xQueueGenericSend+0x46>
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <xQueueGenericSend+0x4a>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e000      	b.n	800bdb8 <xQueueGenericSend+0x4c>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10d      	bne.n	800bdd8 <xQueueGenericSend+0x6c>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	b672      	cpsid	i
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	b662      	cpsie	i
 800bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSend+0x7a>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <xQueueGenericSend+0x7e>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueGenericSend+0x80>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10d      	bne.n	800be0c <xQueueGenericSend+0xa0>
	__asm volatile
 800bdf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf4:	b672      	cpsid	i
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	b662      	cpsie	i
 800be04:	623b      	str	r3, [r7, #32]
}
 800be06:	bf00      	nop
 800be08:	bf00      	nop
 800be0a:	e7fd      	b.n	800be08 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be0c:	f001 fc7c 	bl	800d708 <xTaskGetSchedulerState>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d102      	bne.n	800be1c <xQueueGenericSend+0xb0>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d101      	bne.n	800be20 <xQueueGenericSend+0xb4>
 800be1c:	2301      	movs	r3, #1
 800be1e:	e000      	b.n	800be22 <xQueueGenericSend+0xb6>
 800be20:	2300      	movs	r3, #0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10d      	bne.n	800be42 <xQueueGenericSend+0xd6>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2a:	b672      	cpsid	i
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	b662      	cpsie	i
 800be3a:	61fb      	str	r3, [r7, #28]
}
 800be3c:	bf00      	nop
 800be3e:	bf00      	nop
 800be40:	e7fd      	b.n	800be3e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be42:	f001 ffb3 	bl	800ddac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be4e:	429a      	cmp	r2, r3
 800be50:	d302      	bcc.n	800be58 <xQueueGenericSend+0xec>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d129      	bne.n	800beac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be5e:	f000 fcd3 	bl	800c808 <prvCopyDataToQueue>
 800be62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d010      	beq.n	800be8e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6e:	3324      	adds	r3, #36	@ 0x24
 800be70:	4618      	mov	r0, r3
 800be72:	f001 fa7b 	bl	800d36c <xTaskRemoveFromEventList>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d013      	beq.n	800bea4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be7c:	4b3f      	ldr	r3, [pc, #252]	@ (800bf7c <xQueueGenericSend+0x210>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	e00a      	b.n	800bea4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be90:	2b00      	cmp	r3, #0
 800be92:	d007      	beq.n	800bea4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be94:	4b39      	ldr	r3, [pc, #228]	@ (800bf7c <xQueueGenericSend+0x210>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bea4:	f001 ffb8 	bl	800de18 <vPortExitCritical>
				return pdPASS;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e063      	b.n	800bf74 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beb2:	f001 ffb1 	bl	800de18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e05c      	b.n	800bf74 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bec0:	f107 0314 	add.w	r3, r7, #20
 800bec4:	4618      	mov	r0, r3
 800bec6:	f001 fab7 	bl	800d438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beca:	2301      	movs	r3, #1
 800becc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bece:	f001 ffa3 	bl	800de18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bed2:	f001 f831 	bl	800cf38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bed6:	f001 ff69 	bl	800ddac <vPortEnterCritical>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bee0:	b25b      	sxtb	r3, r3
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d103      	bne.n	800bef0 <xQueueGenericSend+0x184>
 800bee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bef6:	b25b      	sxtb	r3, r3
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d103      	bne.n	800bf06 <xQueueGenericSend+0x19a>
 800befe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf06:	f001 ff87 	bl	800de18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf0a:	1d3a      	adds	r2, r7, #4
 800bf0c:	f107 0314 	add.w	r3, r7, #20
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 faa6 	bl	800d464 <xTaskCheckForTimeOut>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d124      	bne.n	800bf68 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf20:	f000 fd6a 	bl	800c9f8 <prvIsQueueFull>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d018      	beq.n	800bf5c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2c:	3310      	adds	r3, #16
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f001 f9f2 	bl	800d31c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf3a:	f000 fcf5 	bl	800c928 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf3e:	f001 f809 	bl	800cf54 <xTaskResumeAll>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f47f af7c 	bne.w	800be42 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800bf4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf7c <xQueueGenericSend+0x210>)
 800bf4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	e772      	b.n	800be42 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf5e:	f000 fce3 	bl	800c928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf62:	f000 fff7 	bl	800cf54 <xTaskResumeAll>
 800bf66:	e76c      	b.n	800be42 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf6a:	f000 fcdd 	bl	800c928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf6e:	f000 fff1 	bl	800cf54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3738      	adds	r7, #56	@ 0x38
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	e000ed04 	.word	0xe000ed04

0800bf80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08e      	sub	sp, #56	@ 0x38
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10d      	bne.n	800bfb4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800bf98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9c:	b672      	cpsid	i
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	b662      	cpsie	i
 800bfac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d103      	bne.n	800bfc2 <xQueueGenericSendFromISR+0x42>
 800bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <xQueueGenericSendFromISR+0x46>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	e000      	b.n	800bfc8 <xQueueGenericSendFromISR+0x48>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10d      	bne.n	800bfe8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd0:	b672      	cpsid	i
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	b662      	cpsie	i
 800bfe0:	623b      	str	r3, [r7, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	e7fd      	b.n	800bfe4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d103      	bne.n	800bff6 <xQueueGenericSendFromISR+0x76>
 800bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d101      	bne.n	800bffa <xQueueGenericSendFromISR+0x7a>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e000      	b.n	800bffc <xQueueGenericSendFromISR+0x7c>
 800bffa:	2300      	movs	r3, #0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10d      	bne.n	800c01c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c004:	b672      	cpsid	i
 800c006:	f383 8811 	msr	BASEPRI, r3
 800c00a:	f3bf 8f6f 	isb	sy
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	b662      	cpsie	i
 800c014:	61fb      	str	r3, [r7, #28]
}
 800c016:	bf00      	nop
 800c018:	bf00      	nop
 800c01a:	e7fd      	b.n	800c018 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c01c:	f001 ffae 	bl	800df7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c020:	f3ef 8211 	mrs	r2, BASEPRI
 800c024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c028:	b672      	cpsid	i
 800c02a:	f383 8811 	msr	BASEPRI, r3
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f3bf 8f4f 	dsb	sy
 800c036:	b662      	cpsie	i
 800c038:	61ba      	str	r2, [r7, #24]
 800c03a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c03c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c048:	429a      	cmp	r2, r3
 800c04a:	d302      	bcc.n	800c052 <xQueueGenericSendFromISR+0xd2>
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d12c      	bne.n	800c0ac <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	68b9      	ldr	r1, [r7, #8]
 800c060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c062:	f000 fbd1 	bl	800c808 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c066:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d112      	bne.n	800c096 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	d016      	beq.n	800c0a6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07a:	3324      	adds	r3, #36	@ 0x24
 800c07c:	4618      	mov	r0, r3
 800c07e:	f001 f975 	bl	800d36c <xTaskRemoveFromEventList>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d00e      	beq.n	800c0a6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	e007      	b.n	800c0a6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c096:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c09a:	3301      	adds	r3, #1
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	b25a      	sxtb	r2, r3
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800c0aa:	e001      	b.n	800c0b0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c0ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3738      	adds	r7, #56	@ 0x38
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b08e      	sub	sp, #56	@ 0x38
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d10d      	bne.n	800c0f6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800c0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0de:	b672      	cpsid	i
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	b662      	cpsie	i
 800c0ee:	623b      	str	r3, [r7, #32]
}
 800c0f0:	bf00      	nop
 800c0f2:	bf00      	nop
 800c0f4:	e7fd      	b.n	800c0f2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00d      	beq.n	800c11a <xQueueGiveFromISR+0x54>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	b672      	cpsid	i
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	b662      	cpsie	i
 800c112:	61fb      	str	r3, [r7, #28]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d103      	bne.n	800c12a <xQueueGiveFromISR+0x64>
 800c122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <xQueueGiveFromISR+0x68>
 800c12a:	2301      	movs	r3, #1
 800c12c:	e000      	b.n	800c130 <xQueueGiveFromISR+0x6a>
 800c12e:	2300      	movs	r3, #0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10d      	bne.n	800c150 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800c134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c138:	b672      	cpsid	i
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	b662      	cpsie	i
 800c148:	61bb      	str	r3, [r7, #24]
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	e7fd      	b.n	800c14c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c150:	f001 ff14 	bl	800df7c <vPortValidateInterruptPriority>
	__asm volatile
 800c154:	f3ef 8211 	mrs	r2, BASEPRI
 800c158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15c:	b672      	cpsid	i
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	b662      	cpsie	i
 800c16c:	617a      	str	r2, [r7, #20]
 800c16e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c170:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c172:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c178:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c17e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c180:	429a      	cmp	r2, r3
 800c182:	d22b      	bcs.n	800c1dc <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c18a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c194:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c196:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d112      	bne.n	800c1c6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d016      	beq.n	800c1d6 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1aa:	3324      	adds	r3, #36	@ 0x24
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 f8dd 	bl	800d36c <xTaskRemoveFromEventList>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00e      	beq.n	800c1d6 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00b      	beq.n	800c1d6 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	e007      	b.n	800c1d6 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	b25a      	sxtb	r2, r3
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1da:	e001      	b.n	800c1e0 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f383 8811 	msr	BASEPRI, r3
}
 800c1ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3738      	adds	r7, #56	@ 0x38
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
	...

0800c1f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08c      	sub	sp, #48	@ 0x30
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c204:	2300      	movs	r3, #0
 800c206:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10d      	bne.n	800c22e <xQueueReceive+0x36>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c216:	b672      	cpsid	i
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	b662      	cpsie	i
 800c226:	623b      	str	r3, [r7, #32]
}
 800c228:	bf00      	nop
 800c22a:	bf00      	nop
 800c22c:	e7fd      	b.n	800c22a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d103      	bne.n	800c23c <xQueueReceive+0x44>
 800c234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d101      	bne.n	800c240 <xQueueReceive+0x48>
 800c23c:	2301      	movs	r3, #1
 800c23e:	e000      	b.n	800c242 <xQueueReceive+0x4a>
 800c240:	2300      	movs	r3, #0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10d      	bne.n	800c262 <xQueueReceive+0x6a>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24a:	b672      	cpsid	i
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	b662      	cpsie	i
 800c25a:	61fb      	str	r3, [r7, #28]
}
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
 800c260:	e7fd      	b.n	800c25e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c262:	f001 fa51 	bl	800d708 <xTaskGetSchedulerState>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <xQueueReceive+0x7a>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <xQueueReceive+0x7e>
 800c272:	2301      	movs	r3, #1
 800c274:	e000      	b.n	800c278 <xQueueReceive+0x80>
 800c276:	2300      	movs	r3, #0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10d      	bne.n	800c298 <xQueueReceive+0xa0>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c280:	b672      	cpsid	i
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	b662      	cpsie	i
 800c290:	61bb      	str	r3, [r7, #24]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c298:	f001 fd88 	bl	800ddac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d01f      	beq.n	800c2e8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ac:	f000 fb16 	bl	800c8dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	1e5a      	subs	r2, r3, #1
 800c2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	691b      	ldr	r3, [r3, #16]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00f      	beq.n	800c2e0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	3310      	adds	r3, #16
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 f851 	bl	800d36c <xTaskRemoveFromEventList>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d007      	beq.n	800c2e0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c2d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c3c4 <xQueueReceive+0x1cc>)
 800c2d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2d6:	601a      	str	r2, [r3, #0]
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2e0:	f001 fd9a 	bl	800de18 <vPortExitCritical>
				return pdPASS;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e069      	b.n	800c3bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d103      	bne.n	800c2f6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2ee:	f001 fd93 	bl	800de18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e062      	b.n	800c3bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d106      	bne.n	800c30a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2fc:	f107 0310 	add.w	r3, r7, #16
 800c300:	4618      	mov	r0, r3
 800c302:	f001 f899 	bl	800d438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c306:	2301      	movs	r3, #1
 800c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c30a:	f001 fd85 	bl	800de18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c30e:	f000 fe13 	bl	800cf38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c312:	f001 fd4b 	bl	800ddac <vPortEnterCritical>
 800c316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c31c:	b25b      	sxtb	r3, r3
 800c31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c322:	d103      	bne.n	800c32c <xQueueReceive+0x134>
 800c324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c332:	b25b      	sxtb	r3, r3
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d103      	bne.n	800c342 <xQueueReceive+0x14a>
 800c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c342:	f001 fd69 	bl	800de18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c346:	1d3a      	adds	r2, r7, #4
 800c348:	f107 0310 	add.w	r3, r7, #16
 800c34c:	4611      	mov	r1, r2
 800c34e:	4618      	mov	r0, r3
 800c350:	f001 f888 	bl	800d464 <xTaskCheckForTimeOut>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d123      	bne.n	800c3a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c35a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c35c:	f000 fb36 	bl	800c9cc <prvIsQueueEmpty>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d017      	beq.n	800c396 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c368:	3324      	adds	r3, #36	@ 0x24
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	4611      	mov	r1, r2
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 ffd4 	bl	800d31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c376:	f000 fad7 	bl	800c928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c37a:	f000 fdeb 	bl	800cf54 <xTaskResumeAll>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d189      	bne.n	800c298 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c384:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c4 <xQueueReceive+0x1cc>)
 800c386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	f3bf 8f6f 	isb	sy
 800c394:	e780      	b.n	800c298 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c398:	f000 fac6 	bl	800c928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c39c:	f000 fdda 	bl	800cf54 <xTaskResumeAll>
 800c3a0:	e77a      	b.n	800c298 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c3a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3a4:	f000 fac0 	bl	800c928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3a8:	f000 fdd4 	bl	800cf54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ae:	f000 fb0d 	bl	800c9cc <prvIsQueueEmpty>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f43f af6f 	beq.w	800c298 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c3ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3730      	adds	r7, #48	@ 0x30
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	e000ed04 	.word	0xe000ed04

0800c3c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	@ 0x38
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10d      	bne.n	800c400 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	b672      	cpsid	i
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	b662      	cpsie	i
 800c3f8:	623b      	str	r3, [r7, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	bf00      	nop
 800c3fe:	e7fd      	b.n	800c3fc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00d      	beq.n	800c424 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40c:	b672      	cpsid	i
 800c40e:	f383 8811 	msr	BASEPRI, r3
 800c412:	f3bf 8f6f 	isb	sy
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	b662      	cpsie	i
 800c41c:	61fb      	str	r3, [r7, #28]
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	e7fd      	b.n	800c420 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c424:	f001 f970 	bl	800d708 <xTaskGetSchedulerState>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d102      	bne.n	800c434 <xQueueSemaphoreTake+0x6c>
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <xQueueSemaphoreTake+0x70>
 800c434:	2301      	movs	r3, #1
 800c436:	e000      	b.n	800c43a <xQueueSemaphoreTake+0x72>
 800c438:	2300      	movs	r3, #0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10d      	bne.n	800c45a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	b672      	cpsid	i
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	b662      	cpsie	i
 800c452:	61bb      	str	r3, [r7, #24]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c45a:	f001 fca7 	bl	800ddac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c462:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c466:	2b00      	cmp	r3, #0
 800c468:	d024      	beq.n	800c4b4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46c:	1e5a      	subs	r2, r3, #1
 800c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c470:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d104      	bne.n	800c484 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c47a:	f001 fb0f 	bl	800da9c <pvTaskIncrementMutexHeldCount>
 800c47e:	4602      	mov	r2, r0
 800c480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c482:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00f      	beq.n	800c4ac <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48e:	3310      	adds	r3, #16
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff6b 	bl	800d36c <xTaskRemoveFromEventList>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d007      	beq.n	800c4ac <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c49c:	4b55      	ldr	r3, [pc, #340]	@ (800c5f4 <xQueueSemaphoreTake+0x22c>)
 800c49e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4a2:	601a      	str	r2, [r3, #0]
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c4ac:	f001 fcb4 	bl	800de18 <vPortExitCritical>
				return pdPASS;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e09a      	b.n	800c5ea <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d114      	bne.n	800c4e4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	b672      	cpsid	i
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	b662      	cpsie	i
 800c4d4:	617b      	str	r3, [r7, #20]
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	e7fd      	b.n	800c4d8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c4dc:	f001 fc9c 	bl	800de18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e082      	b.n	800c5ea <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4ea:	f107 030c 	add.w	r3, r7, #12
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 ffa2 	bl	800d438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4f8:	f001 fc8e 	bl	800de18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4fc:	f000 fd1c 	bl	800cf38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c500:	f001 fc54 	bl	800ddac <vPortEnterCritical>
 800c504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c50a:	b25b      	sxtb	r3, r3
 800c50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c510:	d103      	bne.n	800c51a <xQueueSemaphoreTake+0x152>
 800c512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c51c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c520:	b25b      	sxtb	r3, r3
 800c522:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c526:	d103      	bne.n	800c530 <xQueueSemaphoreTake+0x168>
 800c528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c530:	f001 fc72 	bl	800de18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c534:	463a      	mov	r2, r7
 800c536:	f107 030c 	add.w	r3, r7, #12
 800c53a:	4611      	mov	r1, r2
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 ff91 	bl	800d464 <xTaskCheckForTimeOut>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d132      	bne.n	800c5ae <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c54a:	f000 fa3f 	bl	800c9cc <prvIsQueueEmpty>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d026      	beq.n	800c5a2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d109      	bne.n	800c570 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c55c:	f001 fc26 	bl	800ddac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	4618      	mov	r0, r3
 800c566:	f001 f8ed 	bl	800d744 <xTaskPriorityInherit>
 800c56a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c56c:	f001 fc54 	bl	800de18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c572:	3324      	adds	r3, #36	@ 0x24
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	4611      	mov	r1, r2
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fecf 	bl	800d31c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c57e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c580:	f000 f9d2 	bl	800c928 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c584:	f000 fce6 	bl	800cf54 <xTaskResumeAll>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f47f af65 	bne.w	800c45a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c590:	4b18      	ldr	r3, [pc, #96]	@ (800c5f4 <xQueueSemaphoreTake+0x22c>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	e75b      	b.n	800c45a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c5a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5a4:	f000 f9c0 	bl	800c928 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5a8:	f000 fcd4 	bl	800cf54 <xTaskResumeAll>
 800c5ac:	e755      	b.n	800c45a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c5ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5b0:	f000 f9ba 	bl	800c928 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5b4:	f000 fcce 	bl	800cf54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5ba:	f000 fa07 	bl	800c9cc <prvIsQueueEmpty>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f43f af4a 	beq.w	800c45a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00d      	beq.n	800c5e8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c5cc:	f001 fbee 	bl	800ddac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c5d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5d2:	f000 f901 	bl	800c7d8 <prvGetDisinheritPriorityAfterTimeout>
 800c5d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f001 f9bc 	bl	800d95c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c5e4:	f001 fc18 	bl	800de18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c5e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3738      	adds	r7, #56	@ 0x38
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	e000ed04 	.word	0xe000ed04

0800c5f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08e      	sub	sp, #56	@ 0x38
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10d      	bne.n	800c62a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c612:	b672      	cpsid	i
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	b662      	cpsie	i
 800c622:	623b      	str	r3, [r7, #32]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d103      	bne.n	800c638 <xQueueReceiveFromISR+0x40>
 800c630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <xQueueReceiveFromISR+0x44>
 800c638:	2301      	movs	r3, #1
 800c63a:	e000      	b.n	800c63e <xQueueReceiveFromISR+0x46>
 800c63c:	2300      	movs	r3, #0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d10d      	bne.n	800c65e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c646:	b672      	cpsid	i
 800c648:	f383 8811 	msr	BASEPRI, r3
 800c64c:	f3bf 8f6f 	isb	sy
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	b662      	cpsie	i
 800c656:	61fb      	str	r3, [r7, #28]
}
 800c658:	bf00      	nop
 800c65a:	bf00      	nop
 800c65c:	e7fd      	b.n	800c65a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c65e:	f001 fc8d 	bl	800df7c <vPortValidateInterruptPriority>
	__asm volatile
 800c662:	f3ef 8211 	mrs	r2, BASEPRI
 800c666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	61ba      	str	r2, [r7, #24]
 800c67c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c67e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c686:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d02f      	beq.n	800c6ee <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c69c:	f000 f91e 	bl	800c8dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a2:	1e5a      	subs	r2, r3, #1
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c6a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b0:	d112      	bne.n	800c6d8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d016      	beq.n	800c6e8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6bc:	3310      	adds	r3, #16
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fe54 	bl	800d36c <xTaskRemoveFromEventList>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00e      	beq.n	800c6e8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00b      	beq.n	800c6e8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	e007      	b.n	800c6e8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6dc:	3301      	adds	r3, #1
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	b25a      	sxtb	r2, r3
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ec:	e001      	b.n	800c6f2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f383 8811 	msr	BASEPRI, r3
}
 800c6fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c700:	4618      	mov	r0, r3
 800c702:	3738      	adds	r7, #56	@ 0x38
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10d      	bne.n	800c732 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	b672      	cpsid	i
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	b662      	cpsie	i
 800c72a:	60bb      	str	r3, [r7, #8]
}
 800c72c:	bf00      	nop
 800c72e:	bf00      	nop
 800c730:	e7fd      	b.n	800c72e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800c732:	f001 fb3b 	bl	800ddac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c73c:	f001 fb6c 	bl	800de18 <vPortExitCritical>

	return uxReturn;
 800c740:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}

0800c74a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c74a:	b480      	push	{r7}
 800c74c:	b087      	sub	sp, #28
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10d      	bne.n	800c778 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	b672      	cpsid	i
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	b662      	cpsie	i
 800c770:	60fb      	str	r3, [r7, #12]
}
 800c772:	bf00      	nop
 800c774:	bf00      	nop
 800c776:	e7fd      	b.n	800c774 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c77c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c77e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c780:	4618      	mov	r0, r3
 800c782:	371c      	adds	r7, #28
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10d      	bne.n	800c7ba <vQueueDelete+0x2e>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	b672      	cpsid	i
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	b662      	cpsie	i
 800c7b2:	60bb      	str	r3, [r7, #8]
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	e7fd      	b.n	800c7b6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f000 f934 	bl	800ca28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f001 fcea 	bl	800e1a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c7d0:	bf00      	nop
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d006      	beq.n	800c7f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f1c3 0307 	rsb	r3, r3, #7
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	e001      	b.n	800c7fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c81c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10d      	bne.n	800c842 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d14d      	bne.n	800c8ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	4618      	mov	r0, r3
 800c834:	f001 f806 	bl	800d844 <xTaskPriorityDisinherit>
 800c838:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2200      	movs	r2, #0
 800c83e:	609a      	str	r2, [r3, #8]
 800c840:	e043      	b.n	800c8ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d119      	bne.n	800c87c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6858      	ldr	r0, [r3, #4]
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c850:	461a      	mov	r2, r3
 800c852:	68b9      	ldr	r1, [r7, #8]
 800c854:	f011 fa19 	bl	801dc8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c860:	441a      	add	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	685a      	ldr	r2, [r3, #4]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d32b      	bcc.n	800c8ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	605a      	str	r2, [r3, #4]
 800c87a:	e026      	b.n	800c8ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68d8      	ldr	r0, [r3, #12]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c884:	461a      	mov	r2, r3
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	f011 f9ff 	bl	801dc8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	68da      	ldr	r2, [r3, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c894:	425b      	negs	r3, r3
 800c896:	441a      	add	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	68da      	ldr	r2, [r3, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d207      	bcs.n	800c8b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	689a      	ldr	r2, [r3, #8]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b0:	425b      	negs	r3, r3
 800c8b2:	441a      	add	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d105      	bne.n	800c8ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	1c5a      	adds	r2, r3, #1
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c8d2:	697b      	ldr	r3, [r7, #20]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d018      	beq.n	800c920 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68da      	ldr	r2, [r3, #12]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f6:	441a      	add	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	429a      	cmp	r2, r3
 800c906:	d303      	bcc.n	800c910 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	68d9      	ldr	r1, [r3, #12]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c918:	461a      	mov	r2, r3
 800c91a:	6838      	ldr	r0, [r7, #0]
 800c91c:	f011 f9b5 	bl	801dc8a <memcpy>
	}
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c930:	f001 fa3c 	bl	800ddac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c93a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c93c:	e011      	b.n	800c962 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c942:	2b00      	cmp	r3, #0
 800c944:	d012      	beq.n	800c96c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3324      	adds	r3, #36	@ 0x24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 fd0e 	bl	800d36c <xTaskRemoveFromEventList>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c956:	f000 fded 	bl	800d534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	3b01      	subs	r3, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c966:	2b00      	cmp	r3, #0
 800c968:	dce9      	bgt.n	800c93e <prvUnlockQueue+0x16>
 800c96a:	e000      	b.n	800c96e <prvUnlockQueue+0x46>
					break;
 800c96c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	22ff      	movs	r2, #255	@ 0xff
 800c972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c976:	f001 fa4f 	bl	800de18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c97a:	f001 fa17 	bl	800ddac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c984:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c986:	e011      	b.n	800c9ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	691b      	ldr	r3, [r3, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d012      	beq.n	800c9b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	3310      	adds	r3, #16
 800c994:	4618      	mov	r0, r3
 800c996:	f000 fce9 	bl	800d36c <xTaskRemoveFromEventList>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d001      	beq.n	800c9a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c9a0:	f000 fdc8 	bl	800d534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dce9      	bgt.n	800c988 <prvUnlockQueue+0x60>
 800c9b4:	e000      	b.n	800c9b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	22ff      	movs	r2, #255	@ 0xff
 800c9bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c9c0:	f001 fa2a 	bl	800de18 <vPortExitCritical>
}
 800c9c4:	bf00      	nop
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9d4:	f001 f9ea 	bl	800ddac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d102      	bne.n	800c9e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	e001      	b.n	800c9ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ea:	f001 fa15 	bl	800de18 <vPortExitCritical>

	return xReturn;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca00:	f001 f9d4 	bl	800ddac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d102      	bne.n	800ca16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca10:	2301      	movs	r3, #1
 800ca12:	60fb      	str	r3, [r7, #12]
 800ca14:	e001      	b.n	800ca1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca1a:	f001 f9fd 	bl	800de18 <vPortExitCritical>

	return xReturn;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca30:	2300      	movs	r3, #0
 800ca32:	60fb      	str	r3, [r7, #12]
 800ca34:	e016      	b.n	800ca64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ca36:	4a10      	ldr	r2, [pc, #64]	@ (800ca78 <vQueueUnregisterQueue+0x50>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	4413      	add	r3, r2
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d10b      	bne.n	800ca5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ca46:	4a0c      	ldr	r2, [pc, #48]	@ (800ca78 <vQueueUnregisterQueue+0x50>)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ca50:	4a09      	ldr	r2, [pc, #36]	@ (800ca78 <vQueueUnregisterQueue+0x50>)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	4413      	add	r3, r2
 800ca58:	2200      	movs	r2, #0
 800ca5a:	605a      	str	r2, [r3, #4]
				break;
 800ca5c:	e006      	b.n	800ca6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b07      	cmp	r3, #7
 800ca68:	d9e5      	bls.n	800ca36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ca6a:	bf00      	nop
 800ca6c:	bf00      	nop
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	2000539c 	.word	0x2000539c

0800ca7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08e      	sub	sp, #56	@ 0x38
 800ca80:	af04      	add	r7, sp, #16
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10d      	bne.n	800caac <xTaskCreateStatic+0x30>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca94:	b672      	cpsid	i
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	b662      	cpsie	i
 800caa4:	623b      	str	r3, [r7, #32]
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	e7fd      	b.n	800caa8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800caac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <xTaskCreateStatic+0x52>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab6:	b672      	cpsid	i
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	b662      	cpsie	i
 800cac6:	61fb      	str	r3, [r7, #28]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cace:	23a0      	movs	r3, #160	@ 0xa0
 800cad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	2ba0      	cmp	r3, #160	@ 0xa0
 800cad6:	d00d      	beq.n	800caf4 <xTaskCreateStatic+0x78>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cadc:	b672      	cpsid	i
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	b662      	cpsie	i
 800caec:	61bb      	str	r3, [r7, #24]
}
 800caee:	bf00      	nop
 800caf0:	bf00      	nop
 800caf2:	e7fd      	b.n	800caf0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800caf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800caf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d01e      	beq.n	800cb3a <xTaskCreateStatic+0xbe>
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01b      	beq.n	800cb3a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb0e:	2202      	movs	r2, #2
 800cb10:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb14:	2300      	movs	r3, #0
 800cb16:	9303      	str	r3, [sp, #12]
 800cb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1a:	9302      	str	r3, [sp, #8]
 800cb1c:	f107 0314 	add.w	r3, r7, #20
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68b9      	ldr	r1, [r7, #8]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 f851 	bl	800cbd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb34:	f000 f8f0 	bl	800cd18 <prvAddNewTaskToReadyList>
 800cb38:	e001      	b.n	800cb3e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb3e:	697b      	ldr	r3, [r7, #20]
	}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3728      	adds	r7, #40	@ 0x28
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	@ 0x30
 800cb4c:	af04      	add	r7, sp, #16
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	603b      	str	r3, [r7, #0]
 800cb54:	4613      	mov	r3, r2
 800cb56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 fa53 	bl	800e008 <pvPortMalloc>
 800cb62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00e      	beq.n	800cb88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb6a:	20a0      	movs	r0, #160	@ 0xa0
 800cb6c:	f001 fa4c 	bl	800e008 <pvPortMalloc>
 800cb70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cb7e:	e005      	b.n	800cb8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cb80:	6978      	ldr	r0, [r7, #20]
 800cb82:	f001 fb0f 	bl	800e1a4 <vPortFree>
 800cb86:	e001      	b.n	800cb8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d017      	beq.n	800cbc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cb9a:	88fa      	ldrh	r2, [r7, #6]
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	69fb      	ldr	r3, [r7, #28]
 800cba2:	9302      	str	r3, [sp, #8]
 800cba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	68b9      	ldr	r1, [r7, #8]
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f000 f80f 	bl	800cbd4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbb6:	69f8      	ldr	r0, [r7, #28]
 800cbb8:	f000 f8ae 	bl	800cd18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	61bb      	str	r3, [r7, #24]
 800cbc0:	e002      	b.n	800cbc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbc2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbc8:	69bb      	ldr	r3, [r7, #24]
	}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3720      	adds	r7, #32
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cbec:	440b      	add	r3, r1
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	f023 0307 	bic.w	r3, r3, #7
 800cbfa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	f003 0307 	and.w	r3, r3, #7
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	617b      	str	r3, [r7, #20]
}
 800cc1c:	bf00      	nop
 800cc1e:	bf00      	nop
 800cc20:	e7fd      	b.n	800cc1e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d01f      	beq.n	800cc68 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	e012      	b.n	800cc54 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	4413      	add	r3, r2
 800cc34:	7819      	ldrb	r1, [r3, #0]
 800cc36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	3334      	adds	r3, #52	@ 0x34
 800cc3e:	460a      	mov	r2, r1
 800cc40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc42:	68ba      	ldr	r2, [r7, #8]
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	4413      	add	r3, r2
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	3301      	adds	r3, #1
 800cc52:	61fb      	str	r3, [r7, #28]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	2b0f      	cmp	r3, #15
 800cc58:	d9e9      	bls.n	800cc2e <prvInitialiseNewTask+0x5a>
 800cc5a:	e000      	b.n	800cc5e <prvInitialiseNewTask+0x8a>
			{
				break;
 800cc5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc60:	2200      	movs	r2, #0
 800cc62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cc66:	e003      	b.n	800cc70 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc72:	2b06      	cmp	r3, #6
 800cc74:	d901      	bls.n	800cc7a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cc76:	2306      	movs	r3, #6
 800cc78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc84:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cc86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc88:	2200      	movs	r2, #0
 800cc8a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fe fe34 	bl	800b8fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc98:	3318      	adds	r3, #24
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fe2f 	bl	800b8fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cca4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca8:	f1c3 0207 	rsb	r2, r3, #7
 800ccac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccb4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc8:	334c      	adds	r3, #76	@ 0x4c
 800ccca:	224c      	movs	r2, #76	@ 0x4c
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f010 feec 	bl	801daac <memset>
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd6:	4a0d      	ldr	r2, [pc, #52]	@ (800cd0c <prvInitialiseNewTask+0x138>)
 800ccd8:	651a      	str	r2, [r3, #80]	@ 0x50
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	4a0c      	ldr	r2, [pc, #48]	@ (800cd10 <prvInitialiseNewTask+0x13c>)
 800ccde:	655a      	str	r2, [r3, #84]	@ 0x54
 800cce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce2:	4a0c      	ldr	r2, [pc, #48]	@ (800cd14 <prvInitialiseNewTask+0x140>)
 800cce4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	68f9      	ldr	r1, [r7, #12]
 800ccea:	69b8      	ldr	r0, [r7, #24]
 800ccec:	f000 ff50 	bl	800db90 <pxPortInitialiseStack>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ccf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd02:	bf00      	nop
 800cd04:	3720      	adds	r7, #32
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	2000f53c 	.word	0x2000f53c
 800cd10:	2000f5a4 	.word	0x2000f5a4
 800cd14:	2000f60c 	.word	0x2000f60c

0800cd18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd20:	f001 f844 	bl	800ddac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd24:	4b2a      	ldr	r3, [pc, #168]	@ (800cdd0 <prvAddNewTaskToReadyList+0xb8>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	4a29      	ldr	r2, [pc, #164]	@ (800cdd0 <prvAddNewTaskToReadyList+0xb8>)
 800cd2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd2e:	4b29      	ldr	r3, [pc, #164]	@ (800cdd4 <prvAddNewTaskToReadyList+0xbc>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d109      	bne.n	800cd4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd36:	4a27      	ldr	r2, [pc, #156]	@ (800cdd4 <prvAddNewTaskToReadyList+0xbc>)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd3c:	4b24      	ldr	r3, [pc, #144]	@ (800cdd0 <prvAddNewTaskToReadyList+0xb8>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d110      	bne.n	800cd66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd44:	f000 fc1a 	bl	800d57c <prvInitialiseTaskLists>
 800cd48:	e00d      	b.n	800cd66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd4a:	4b23      	ldr	r3, [pc, #140]	@ (800cdd8 <prvAddNewTaskToReadyList+0xc0>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d109      	bne.n	800cd66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd52:	4b20      	ldr	r3, [pc, #128]	@ (800cdd4 <prvAddNewTaskToReadyList+0xbc>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d802      	bhi.n	800cd66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd60:	4a1c      	ldr	r2, [pc, #112]	@ (800cdd4 <prvAddNewTaskToReadyList+0xbc>)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd66:	4b1d      	ldr	r3, [pc, #116]	@ (800cddc <prvAddNewTaskToReadyList+0xc4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	4a1b      	ldr	r2, [pc, #108]	@ (800cddc <prvAddNewTaskToReadyList+0xc4>)
 800cd6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd74:	2201      	movs	r2, #1
 800cd76:	409a      	lsls	r2, r3
 800cd78:	4b19      	ldr	r3, [pc, #100]	@ (800cde0 <prvAddNewTaskToReadyList+0xc8>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	4a18      	ldr	r2, [pc, #96]	@ (800cde0 <prvAddNewTaskToReadyList+0xc8>)
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd86:	4613      	mov	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4a15      	ldr	r2, [pc, #84]	@ (800cde4 <prvAddNewTaskToReadyList+0xcc>)
 800cd90:	441a      	add	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3304      	adds	r3, #4
 800cd96:	4619      	mov	r1, r3
 800cd98:	4610      	mov	r0, r2
 800cd9a:	f7fe fdbd 	bl	800b918 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd9e:	f001 f83b 	bl	800de18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cda2:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd8 <prvAddNewTaskToReadyList+0xc0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00e      	beq.n	800cdc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdaa:	4b0a      	ldr	r3, [pc, #40]	@ (800cdd4 <prvAddNewTaskToReadyList+0xbc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d207      	bcs.n	800cdc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdb8:	4b0b      	ldr	r3, [pc, #44]	@ (800cde8 <prvAddNewTaskToReadyList+0xd0>)
 800cdba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	200054dc 	.word	0x200054dc
 800cdd4:	200053dc 	.word	0x200053dc
 800cdd8:	200054e8 	.word	0x200054e8
 800cddc:	200054f8 	.word	0x200054f8
 800cde0:	200054e4 	.word	0x200054e4
 800cde4:	200053e0 	.word	0x200053e0
 800cde8:	e000ed04 	.word	0xe000ed04

0800cdec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d01a      	beq.n	800ce34 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cdfe:	4b15      	ldr	r3, [pc, #84]	@ (800ce54 <vTaskDelay+0x68>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00d      	beq.n	800ce22 <vTaskDelay+0x36>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0a:	b672      	cpsid	i
 800ce0c:	f383 8811 	msr	BASEPRI, r3
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	f3bf 8f4f 	dsb	sy
 800ce18:	b662      	cpsie	i
 800ce1a:	60bb      	str	r3, [r7, #8]
}
 800ce1c:	bf00      	nop
 800ce1e:	bf00      	nop
 800ce20:	e7fd      	b.n	800ce1e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ce22:	f000 f889 	bl	800cf38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce26:	2100      	movs	r1, #0
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fe4b 	bl	800dac4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce2e:	f000 f891 	bl	800cf54 <xTaskResumeAll>
 800ce32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d107      	bne.n	800ce4a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800ce3a:	4b07      	ldr	r3, [pc, #28]	@ (800ce58 <vTaskDelay+0x6c>)
 800ce3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce40:	601a      	str	r2, [r3, #0]
 800ce42:	f3bf 8f4f 	dsb	sy
 800ce46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce4a:	bf00      	nop
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20005504 	.word	0x20005504
 800ce58:	e000ed04 	.word	0xe000ed04

0800ce5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	@ 0x28
 800ce60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce6a:	463a      	mov	r2, r7
 800ce6c:	1d39      	adds	r1, r7, #4
 800ce6e:	f107 0308 	add.w	r3, r7, #8
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f5 f982 	bl	800217c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	9202      	str	r2, [sp, #8]
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	2300      	movs	r3, #0
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	2300      	movs	r3, #0
 800ce88:	460a      	mov	r2, r1
 800ce8a:	4923      	ldr	r1, [pc, #140]	@ (800cf18 <vTaskStartScheduler+0xbc>)
 800ce8c:	4823      	ldr	r0, [pc, #140]	@ (800cf1c <vTaskStartScheduler+0xc0>)
 800ce8e:	f7ff fdf5 	bl	800ca7c <xTaskCreateStatic>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4a22      	ldr	r2, [pc, #136]	@ (800cf20 <vTaskStartScheduler+0xc4>)
 800ce96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce98:	4b21      	ldr	r3, [pc, #132]	@ (800cf20 <vTaskStartScheduler+0xc4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cea0:	2301      	movs	r3, #1
 800cea2:	617b      	str	r3, [r7, #20]
 800cea4:	e001      	b.n	800ceaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cea6:	2300      	movs	r3, #0
 800cea8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d11d      	bne.n	800ceec <vTaskStartScheduler+0x90>
	__asm volatile
 800ceb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb4:	b672      	cpsid	i
 800ceb6:	f383 8811 	msr	BASEPRI, r3
 800ceba:	f3bf 8f6f 	isb	sy
 800cebe:	f3bf 8f4f 	dsb	sy
 800cec2:	b662      	cpsie	i
 800cec4:	613b      	str	r3, [r7, #16]
}
 800cec6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cec8:	4b16      	ldr	r3, [pc, #88]	@ (800cf24 <vTaskStartScheduler+0xc8>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	334c      	adds	r3, #76	@ 0x4c
 800cece:	4a16      	ldr	r2, [pc, #88]	@ (800cf28 <vTaskStartScheduler+0xcc>)
 800ced0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ced2:	4b16      	ldr	r3, [pc, #88]	@ (800cf2c <vTaskStartScheduler+0xd0>)
 800ced4:	f04f 32ff 	mov.w	r2, #4294967295
 800ced8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ceda:	4b15      	ldr	r3, [pc, #84]	@ (800cf30 <vTaskStartScheduler+0xd4>)
 800cedc:	2201      	movs	r2, #1
 800cede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cee0:	4b14      	ldr	r3, [pc, #80]	@ (800cf34 <vTaskStartScheduler+0xd8>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cee6:	f000 fee3 	bl	800dcb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ceea:	e011      	b.n	800cf10 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef2:	d10d      	bne.n	800cf10 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef8:	b672      	cpsid	i
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	b662      	cpsie	i
 800cf08:	60fb      	str	r3, [r7, #12]
}
 800cf0a:	bf00      	nop
 800cf0c:	bf00      	nop
 800cf0e:	e7fd      	b.n	800cf0c <vTaskStartScheduler+0xb0>
}
 800cf10:	bf00      	nop
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	0801fed0 	.word	0x0801fed0
 800cf1c:	0800d54d 	.word	0x0800d54d
 800cf20:	20005500 	.word	0x20005500
 800cf24:	200053dc 	.word	0x200053dc
 800cf28:	20000094 	.word	0x20000094
 800cf2c:	200054fc 	.word	0x200054fc
 800cf30:	200054e8 	.word	0x200054e8
 800cf34:	200054e0 	.word	0x200054e0

0800cf38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cf3c:	4b04      	ldr	r3, [pc, #16]	@ (800cf50 <vTaskSuspendAll+0x18>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	4a03      	ldr	r2, [pc, #12]	@ (800cf50 <vTaskSuspendAll+0x18>)
 800cf44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cf46:	bf00      	nop
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	20005504 	.word	0x20005504

0800cf54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf62:	4b43      	ldr	r3, [pc, #268]	@ (800d070 <xTaskResumeAll+0x11c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10d      	bne.n	800cf86 <xTaskResumeAll+0x32>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6e:	b672      	cpsid	i
 800cf70:	f383 8811 	msr	BASEPRI, r3
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	f3bf 8f4f 	dsb	sy
 800cf7c:	b662      	cpsie	i
 800cf7e:	603b      	str	r3, [r7, #0]
}
 800cf80:	bf00      	nop
 800cf82:	bf00      	nop
 800cf84:	e7fd      	b.n	800cf82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf86:	f000 ff11 	bl	800ddac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf8a:	4b39      	ldr	r3, [pc, #228]	@ (800d070 <xTaskResumeAll+0x11c>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3b01      	subs	r3, #1
 800cf90:	4a37      	ldr	r2, [pc, #220]	@ (800d070 <xTaskResumeAll+0x11c>)
 800cf92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf94:	4b36      	ldr	r3, [pc, #216]	@ (800d070 <xTaskResumeAll+0x11c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d161      	bne.n	800d060 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf9c:	4b35      	ldr	r3, [pc, #212]	@ (800d074 <xTaskResumeAll+0x120>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d05d      	beq.n	800d060 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfa4:	e02e      	b.n	800d004 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa6:	4b34      	ldr	r3, [pc, #208]	@ (800d078 <xTaskResumeAll+0x124>)
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	3318      	adds	r3, #24
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fd0d 	bl	800b9d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe fd08 	bl	800b9d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	409a      	lsls	r2, r3
 800cfca:	4b2c      	ldr	r3, [pc, #176]	@ (800d07c <xTaskResumeAll+0x128>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	4a2a      	ldr	r2, [pc, #168]	@ (800d07c <xTaskResumeAll+0x128>)
 800cfd2:	6013      	str	r3, [r2, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4a27      	ldr	r2, [pc, #156]	@ (800d080 <xTaskResumeAll+0x12c>)
 800cfe2:	441a      	add	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fe fc94 	bl	800b918 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff4:	4b23      	ldr	r3, [pc, #140]	@ (800d084 <xTaskResumeAll+0x130>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d302      	bcc.n	800d004 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cffe:	4b22      	ldr	r3, [pc, #136]	@ (800d088 <xTaskResumeAll+0x134>)
 800d000:	2201      	movs	r2, #1
 800d002:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d004:	4b1c      	ldr	r3, [pc, #112]	@ (800d078 <xTaskResumeAll+0x124>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1cc      	bne.n	800cfa6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d012:	f000 fb59 	bl	800d6c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d016:	4b1d      	ldr	r3, [pc, #116]	@ (800d08c <xTaskResumeAll+0x138>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d010      	beq.n	800d044 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d022:	f000 f859 	bl	800d0d8 <xTaskIncrementTick>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800d02c:	4b16      	ldr	r3, [pc, #88]	@ (800d088 <xTaskResumeAll+0x134>)
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3b01      	subs	r3, #1
 800d036:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f1      	bne.n	800d022 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800d03e:	4b13      	ldr	r3, [pc, #76]	@ (800d08c <xTaskResumeAll+0x138>)
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d044:	4b10      	ldr	r3, [pc, #64]	@ (800d088 <xTaskResumeAll+0x134>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d009      	beq.n	800d060 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d04c:	2301      	movs	r3, #1
 800d04e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <xTaskResumeAll+0x13c>)
 800d052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d060:	f000 feda 	bl	800de18 <vPortExitCritical>

	return xAlreadyYielded;
 800d064:	68bb      	ldr	r3, [r7, #8]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	20005504 	.word	0x20005504
 800d074:	200054dc 	.word	0x200054dc
 800d078:	2000549c 	.word	0x2000549c
 800d07c:	200054e4 	.word	0x200054e4
 800d080:	200053e0 	.word	0x200053e0
 800d084:	200053dc 	.word	0x200053dc
 800d088:	200054f0 	.word	0x200054f0
 800d08c:	200054ec 	.word	0x200054ec
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d09a:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <xTaskGetTickCount+0x1c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0a0:	687b      	ldr	r3, [r7, #4]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	370c      	adds	r7, #12
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr
 800d0ae:	bf00      	nop
 800d0b0:	200054e0 	.word	0x200054e0

0800d0b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0ba:	f000 ff5f 	bl	800df7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d0be:	2300      	movs	r3, #0
 800d0c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d0c2:	4b04      	ldr	r3, [pc, #16]	@ (800d0d4 <xTaskGetTickCountFromISR+0x20>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0c8:	683b      	ldr	r3, [r7, #0]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	200054e0 	.word	0x200054e0

0800d0d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0e2:	4b50      	ldr	r3, [pc, #320]	@ (800d224 <xTaskIncrementTick+0x14c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f040 808b 	bne.w	800d202 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0ec:	4b4e      	ldr	r3, [pc, #312]	@ (800d228 <xTaskIncrementTick+0x150>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0f4:	4a4c      	ldr	r2, [pc, #304]	@ (800d228 <xTaskIncrementTick+0x150>)
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d123      	bne.n	800d148 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d100:	4b4a      	ldr	r3, [pc, #296]	@ (800d22c <xTaskIncrementTick+0x154>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00d      	beq.n	800d126 <xTaskIncrementTick+0x4e>
	__asm volatile
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	b672      	cpsid	i
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	b662      	cpsie	i
 800d11e:	603b      	str	r3, [r7, #0]
}
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <xTaskIncrementTick+0x4a>
 800d126:	4b41      	ldr	r3, [pc, #260]	@ (800d22c <xTaskIncrementTick+0x154>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	4b40      	ldr	r3, [pc, #256]	@ (800d230 <xTaskIncrementTick+0x158>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4a3e      	ldr	r2, [pc, #248]	@ (800d22c <xTaskIncrementTick+0x154>)
 800d132:	6013      	str	r3, [r2, #0]
 800d134:	4a3e      	ldr	r2, [pc, #248]	@ (800d230 <xTaskIncrementTick+0x158>)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	4b3e      	ldr	r3, [pc, #248]	@ (800d234 <xTaskIncrementTick+0x15c>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3301      	adds	r3, #1
 800d140:	4a3c      	ldr	r2, [pc, #240]	@ (800d234 <xTaskIncrementTick+0x15c>)
 800d142:	6013      	str	r3, [r2, #0]
 800d144:	f000 fac0 	bl	800d6c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d148:	4b3b      	ldr	r3, [pc, #236]	@ (800d238 <xTaskIncrementTick+0x160>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d348      	bcc.n	800d1e4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d152:	4b36      	ldr	r3, [pc, #216]	@ (800d22c <xTaskIncrementTick+0x154>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d104      	bne.n	800d166 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d15c:	4b36      	ldr	r3, [pc, #216]	@ (800d238 <xTaskIncrementTick+0x160>)
 800d15e:	f04f 32ff 	mov.w	r2, #4294967295
 800d162:	601a      	str	r2, [r3, #0]
					break;
 800d164:	e03e      	b.n	800d1e4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d166:	4b31      	ldr	r3, [pc, #196]	@ (800d22c <xTaskIncrementTick+0x154>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d176:	693a      	ldr	r2, [r7, #16]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d203      	bcs.n	800d186 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d17e:	4a2e      	ldr	r2, [pc, #184]	@ (800d238 <xTaskIncrementTick+0x160>)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d184:	e02e      	b.n	800d1e4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	3304      	adds	r3, #4
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe fc21 	bl	800b9d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d194:	2b00      	cmp	r3, #0
 800d196:	d004      	beq.n	800d1a2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	3318      	adds	r3, #24
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fe fc18 	bl	800b9d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	409a      	lsls	r2, r3
 800d1aa:	4b24      	ldr	r3, [pc, #144]	@ (800d23c <xTaskIncrementTick+0x164>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4313      	orrs	r3, r2
 800d1b0:	4a22      	ldr	r2, [pc, #136]	@ (800d23c <xTaskIncrementTick+0x164>)
 800d1b2:	6013      	str	r3, [r2, #0]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4a1f      	ldr	r2, [pc, #124]	@ (800d240 <xTaskIncrementTick+0x168>)
 800d1c2:	441a      	add	r2, r3
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	3304      	adds	r3, #4
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4610      	mov	r0, r2
 800d1cc:	f7fe fba4 	bl	800b918 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800d244 <xTaskIncrementTick+0x16c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d3b9      	bcc.n	800d152 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1e2:	e7b6      	b.n	800d152 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1e4:	4b17      	ldr	r3, [pc, #92]	@ (800d244 <xTaskIncrementTick+0x16c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ea:	4915      	ldr	r1, [pc, #84]	@ (800d240 <xTaskIncrementTick+0x168>)
 800d1ec:	4613      	mov	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4413      	add	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	440b      	add	r3, r1
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d907      	bls.n	800d20c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	617b      	str	r3, [r7, #20]
 800d200:	e004      	b.n	800d20c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d202:	4b11      	ldr	r3, [pc, #68]	@ (800d248 <xTaskIncrementTick+0x170>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	3301      	adds	r3, #1
 800d208:	4a0f      	ldr	r2, [pc, #60]	@ (800d248 <xTaskIncrementTick+0x170>)
 800d20a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d20c:	4b0f      	ldr	r3, [pc, #60]	@ (800d24c <xTaskIncrementTick+0x174>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d214:	2301      	movs	r3, #1
 800d216:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d218:	697b      	ldr	r3, [r7, #20]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3718      	adds	r7, #24
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	20005504 	.word	0x20005504
 800d228:	200054e0 	.word	0x200054e0
 800d22c:	20005494 	.word	0x20005494
 800d230:	20005498 	.word	0x20005498
 800d234:	200054f4 	.word	0x200054f4
 800d238:	200054fc 	.word	0x200054fc
 800d23c:	200054e4 	.word	0x200054e4
 800d240:	200053e0 	.word	0x200053e0
 800d244:	200053dc 	.word	0x200053dc
 800d248:	200054ec 	.word	0x200054ec
 800d24c:	200054f0 	.word	0x200054f0

0800d250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d250:	b480      	push	{r7}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d256:	4b2b      	ldr	r3, [pc, #172]	@ (800d304 <vTaskSwitchContext+0xb4>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d25e:	4b2a      	ldr	r3, [pc, #168]	@ (800d308 <vTaskSwitchContext+0xb8>)
 800d260:	2201      	movs	r2, #1
 800d262:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d264:	e047      	b.n	800d2f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d266:	4b28      	ldr	r3, [pc, #160]	@ (800d308 <vTaskSwitchContext+0xb8>)
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d26c:	4b27      	ldr	r3, [pc, #156]	@ (800d30c <vTaskSwitchContext+0xbc>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	fab3 f383 	clz	r3, r3
 800d278:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d27a:	7afb      	ldrb	r3, [r7, #11]
 800d27c:	f1c3 031f 	rsb	r3, r3, #31
 800d280:	617b      	str	r3, [r7, #20]
 800d282:	4923      	ldr	r1, [pc, #140]	@ (800d310 <vTaskSwitchContext+0xc0>)
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	440b      	add	r3, r1
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10d      	bne.n	800d2b2 <vTaskSwitchContext+0x62>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	b672      	cpsid	i
 800d29c:	f383 8811 	msr	BASEPRI, r3
 800d2a0:	f3bf 8f6f 	isb	sy
 800d2a4:	f3bf 8f4f 	dsb	sy
 800d2a8:	b662      	cpsie	i
 800d2aa:	607b      	str	r3, [r7, #4]
}
 800d2ac:	bf00      	nop
 800d2ae:	bf00      	nop
 800d2b0:	e7fd      	b.n	800d2ae <vTaskSwitchContext+0x5e>
 800d2b2:	697a      	ldr	r2, [r7, #20]
 800d2b4:	4613      	mov	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4a14      	ldr	r2, [pc, #80]	@ (800d310 <vTaskSwitchContext+0xc0>)
 800d2be:	4413      	add	r3, r2
 800d2c0:	613b      	str	r3, [r7, #16]
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	605a      	str	r2, [r3, #4]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	685a      	ldr	r2, [r3, #4]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	3308      	adds	r3, #8
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d104      	bne.n	800d2e2 <vTaskSwitchContext+0x92>
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	605a      	str	r2, [r3, #4]
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	4a0a      	ldr	r2, [pc, #40]	@ (800d314 <vTaskSwitchContext+0xc4>)
 800d2ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2ec:	4b09      	ldr	r3, [pc, #36]	@ (800d314 <vTaskSwitchContext+0xc4>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	334c      	adds	r3, #76	@ 0x4c
 800d2f2:	4a09      	ldr	r2, [pc, #36]	@ (800d318 <vTaskSwitchContext+0xc8>)
 800d2f4:	6013      	str	r3, [r2, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	371c      	adds	r7, #28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20005504 	.word	0x20005504
 800d308:	200054f0 	.word	0x200054f0
 800d30c:	200054e4 	.word	0x200054e4
 800d310:	200053e0 	.word	0x200053e0
 800d314:	200053dc 	.word	0x200053dc
 800d318:	20000094 	.word	0x20000094

0800d31c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10d      	bne.n	800d348 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d330:	b672      	cpsid	i
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	b662      	cpsie	i
 800d340:	60fb      	str	r3, [r7, #12]
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	e7fd      	b.n	800d344 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d348:	4b07      	ldr	r3, [pc, #28]	@ (800d368 <vTaskPlaceOnEventList+0x4c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3318      	adds	r3, #24
 800d34e:	4619      	mov	r1, r3
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7fe fb05 	bl	800b960 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d356:	2101      	movs	r1, #1
 800d358:	6838      	ldr	r0, [r7, #0]
 800d35a:	f000 fbb3 	bl	800dac4 <prvAddCurrentTaskToDelayedList>
}
 800d35e:	bf00      	nop
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	200053dc 	.word	0x200053dc

0800d36c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b086      	sub	sp, #24
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10d      	bne.n	800d39e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	b672      	cpsid	i
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	b662      	cpsie	i
 800d396:	60fb      	str	r3, [r7, #12]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	3318      	adds	r3, #24
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fb15 	bl	800b9d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d420 <xTaskRemoveFromEventList+0xb4>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d11c      	bne.n	800d3ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fb0c 	bl	800b9d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3be:	2201      	movs	r2, #1
 800d3c0:	409a      	lsls	r2, r3
 800d3c2:	4b18      	ldr	r3, [pc, #96]	@ (800d424 <xTaskRemoveFromEventList+0xb8>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	4a16      	ldr	r2, [pc, #88]	@ (800d424 <xTaskRemoveFromEventList+0xb8>)
 800d3ca:	6013      	str	r3, [r2, #0]
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4a13      	ldr	r2, [pc, #76]	@ (800d428 <xTaskRemoveFromEventList+0xbc>)
 800d3da:	441a      	add	r2, r3
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	f7fe fa98 	bl	800b918 <vListInsertEnd>
 800d3e8:	e005      	b.n	800d3f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	3318      	adds	r3, #24
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	480e      	ldr	r0, [pc, #56]	@ (800d42c <xTaskRemoveFromEventList+0xc0>)
 800d3f2:	f7fe fa91 	bl	800b918 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d430 <xTaskRemoveFromEventList+0xc4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d400:	429a      	cmp	r2, r3
 800d402:	d905      	bls.n	800d410 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d404:	2301      	movs	r3, #1
 800d406:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d408:	4b0a      	ldr	r3, [pc, #40]	@ (800d434 <xTaskRemoveFromEventList+0xc8>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	601a      	str	r2, [r3, #0]
 800d40e:	e001      	b.n	800d414 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d410:	2300      	movs	r3, #0
 800d412:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d414:	697b      	ldr	r3, [r7, #20]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20005504 	.word	0x20005504
 800d424:	200054e4 	.word	0x200054e4
 800d428:	200053e0 	.word	0x200053e0
 800d42c:	2000549c 	.word	0x2000549c
 800d430:	200053dc 	.word	0x200053dc
 800d434:	200054f0 	.word	0x200054f0

0800d438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d440:	4b06      	ldr	r3, [pc, #24]	@ (800d45c <vTaskInternalSetTimeOutState+0x24>)
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d448:	4b05      	ldr	r3, [pc, #20]	@ (800d460 <vTaskInternalSetTimeOutState+0x28>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	605a      	str	r2, [r3, #4]
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	200054f4 	.word	0x200054f4
 800d460:	200054e0 	.word	0x200054e0

0800d464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b088      	sub	sp, #32
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10d      	bne.n	800d490 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d478:	b672      	cpsid	i
 800d47a:	f383 8811 	msr	BASEPRI, r3
 800d47e:	f3bf 8f6f 	isb	sy
 800d482:	f3bf 8f4f 	dsb	sy
 800d486:	b662      	cpsie	i
 800d488:	613b      	str	r3, [r7, #16]
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10d      	bne.n	800d4b2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49a:	b672      	cpsid	i
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	b662      	cpsie	i
 800d4aa:	60fb      	str	r3, [r7, #12]
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	e7fd      	b.n	800d4ae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d4b2:	f000 fc7b 	bl	800ddac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4b6:	4b1d      	ldr	r3, [pc, #116]	@ (800d52c <xTaskCheckForTimeOut+0xc8>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	1ad3      	subs	r3, r2, r3
 800d4c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d102      	bne.n	800d4d6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	61fb      	str	r3, [r7, #28]
 800d4d4:	e023      	b.n	800d51e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	4b15      	ldr	r3, [pc, #84]	@ (800d530 <xTaskCheckForTimeOut+0xcc>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d007      	beq.n	800d4f2 <xTaskCheckForTimeOut+0x8e>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	69ba      	ldr	r2, [r7, #24]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d302      	bcc.n	800d4f2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	e015      	b.n	800d51e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d20b      	bcs.n	800d514 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	1ad2      	subs	r2, r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f7ff ff95 	bl	800d438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d50e:	2300      	movs	r3, #0
 800d510:	61fb      	str	r3, [r7, #28]
 800d512:	e004      	b.n	800d51e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d51a:	2301      	movs	r3, #1
 800d51c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d51e:	f000 fc7b 	bl	800de18 <vPortExitCritical>

	return xReturn;
 800d522:	69fb      	ldr	r3, [r7, #28]
}
 800d524:	4618      	mov	r0, r3
 800d526:	3720      	adds	r7, #32
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200054e0 	.word	0x200054e0
 800d530:	200054f4 	.word	0x200054f4

0800d534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d534:	b480      	push	{r7}
 800d536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d538:	4b03      	ldr	r3, [pc, #12]	@ (800d548 <vTaskMissedYield+0x14>)
 800d53a:	2201      	movs	r2, #1
 800d53c:	601a      	str	r2, [r3, #0]
}
 800d53e:	bf00      	nop
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	200054f0 	.word	0x200054f0

0800d54c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d554:	f000 f852 	bl	800d5fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d558:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <prvIdleTask+0x28>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d9f9      	bls.n	800d554 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d560:	4b05      	ldr	r3, [pc, #20]	@ (800d578 <prvIdleTask+0x2c>)
 800d562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d570:	e7f0      	b.n	800d554 <prvIdleTask+0x8>
 800d572:	bf00      	nop
 800d574:	200053e0 	.word	0x200053e0
 800d578:	e000ed04 	.word	0xe000ed04

0800d57c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d582:	2300      	movs	r3, #0
 800d584:	607b      	str	r3, [r7, #4]
 800d586:	e00c      	b.n	800d5a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	4613      	mov	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4a12      	ldr	r2, [pc, #72]	@ (800d5dc <prvInitialiseTaskLists+0x60>)
 800d594:	4413      	add	r3, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe f991 	bl	800b8be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	607b      	str	r3, [r7, #4]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2b06      	cmp	r3, #6
 800d5a6:	d9ef      	bls.n	800d588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5a8:	480d      	ldr	r0, [pc, #52]	@ (800d5e0 <prvInitialiseTaskLists+0x64>)
 800d5aa:	f7fe f988 	bl	800b8be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ae:	480d      	ldr	r0, [pc, #52]	@ (800d5e4 <prvInitialiseTaskLists+0x68>)
 800d5b0:	f7fe f985 	bl	800b8be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5b4:	480c      	ldr	r0, [pc, #48]	@ (800d5e8 <prvInitialiseTaskLists+0x6c>)
 800d5b6:	f7fe f982 	bl	800b8be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5ba:	480c      	ldr	r0, [pc, #48]	@ (800d5ec <prvInitialiseTaskLists+0x70>)
 800d5bc:	f7fe f97f 	bl	800b8be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5c0:	480b      	ldr	r0, [pc, #44]	@ (800d5f0 <prvInitialiseTaskLists+0x74>)
 800d5c2:	f7fe f97c 	bl	800b8be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d5f4 <prvInitialiseTaskLists+0x78>)
 800d5c8:	4a05      	ldr	r2, [pc, #20]	@ (800d5e0 <prvInitialiseTaskLists+0x64>)
 800d5ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f8 <prvInitialiseTaskLists+0x7c>)
 800d5ce:	4a05      	ldr	r2, [pc, #20]	@ (800d5e4 <prvInitialiseTaskLists+0x68>)
 800d5d0:	601a      	str	r2, [r3, #0]
}
 800d5d2:	bf00      	nop
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200053e0 	.word	0x200053e0
 800d5e0:	2000546c 	.word	0x2000546c
 800d5e4:	20005480 	.word	0x20005480
 800d5e8:	2000549c 	.word	0x2000549c
 800d5ec:	200054b0 	.word	0x200054b0
 800d5f0:	200054c8 	.word	0x200054c8
 800d5f4:	20005494 	.word	0x20005494
 800d5f8:	20005498 	.word	0x20005498

0800d5fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d602:	e019      	b.n	800d638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d604:	f000 fbd2 	bl	800ddac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d608:	4b10      	ldr	r3, [pc, #64]	@ (800d64c <prvCheckTasksWaitingTermination+0x50>)
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe f9dc 	bl	800b9d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d61a:	4b0d      	ldr	r3, [pc, #52]	@ (800d650 <prvCheckTasksWaitingTermination+0x54>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	3b01      	subs	r3, #1
 800d620:	4a0b      	ldr	r2, [pc, #44]	@ (800d650 <prvCheckTasksWaitingTermination+0x54>)
 800d622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d624:	4b0b      	ldr	r3, [pc, #44]	@ (800d654 <prvCheckTasksWaitingTermination+0x58>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3b01      	subs	r3, #1
 800d62a:	4a0a      	ldr	r2, [pc, #40]	@ (800d654 <prvCheckTasksWaitingTermination+0x58>)
 800d62c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d62e:	f000 fbf3 	bl	800de18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f810 	bl	800d658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d638:	4b06      	ldr	r3, [pc, #24]	@ (800d654 <prvCheckTasksWaitingTermination+0x58>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e1      	bne.n	800d604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	200054b0 	.word	0x200054b0
 800d650:	200054dc 	.word	0x200054dc
 800d654:	200054c4 	.word	0x200054c4

0800d658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	334c      	adds	r3, #76	@ 0x4c
 800d664:	4618      	mov	r0, r3
 800d666:	f010 fa5d 	bl	801db24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d670:	2b00      	cmp	r3, #0
 800d672:	d108      	bne.n	800d686 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 fd93 	bl	800e1a4 <vPortFree>
				vPortFree( pxTCB );
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fd90 	bl	800e1a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d684:	e01b      	b.n	800d6be <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d103      	bne.n	800d698 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fd87 	bl	800e1a4 <vPortFree>
	}
 800d696:	e012      	b.n	800d6be <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d00d      	beq.n	800d6be <prvDeleteTCB+0x66>
	__asm volatile
 800d6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a6:	b672      	cpsid	i
 800d6a8:	f383 8811 	msr	BASEPRI, r3
 800d6ac:	f3bf 8f6f 	isb	sy
 800d6b0:	f3bf 8f4f 	dsb	sy
 800d6b4:	b662      	cpsie	i
 800d6b6:	60fb      	str	r3, [r7, #12]
}
 800d6b8:	bf00      	nop
 800d6ba:	bf00      	nop
 800d6bc:	e7fd      	b.n	800d6ba <prvDeleteTCB+0x62>
	}
 800d6be:	bf00      	nop
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
	...

0800d6c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d700 <prvResetNextTaskUnblockTime+0x38>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d104      	bne.n	800d6e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d704 <prvResetNextTaskUnblockTime+0x3c>)
 800d6da:	f04f 32ff 	mov.w	r2, #4294967295
 800d6de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6e0:	e008      	b.n	800d6f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e2:	4b07      	ldr	r3, [pc, #28]	@ (800d700 <prvResetNextTaskUnblockTime+0x38>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	4a04      	ldr	r2, [pc, #16]	@ (800d704 <prvResetNextTaskUnblockTime+0x3c>)
 800d6f2:	6013      	str	r3, [r2, #0]
}
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	20005494 	.word	0x20005494
 800d704:	200054fc 	.word	0x200054fc

0800d708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d708:	b480      	push	{r7}
 800d70a:	b083      	sub	sp, #12
 800d70c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d70e:	4b0b      	ldr	r3, [pc, #44]	@ (800d73c <xTaskGetSchedulerState+0x34>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d102      	bne.n	800d71c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d716:	2301      	movs	r3, #1
 800d718:	607b      	str	r3, [r7, #4]
 800d71a:	e008      	b.n	800d72e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d71c:	4b08      	ldr	r3, [pc, #32]	@ (800d740 <xTaskGetSchedulerState+0x38>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d724:	2302      	movs	r3, #2
 800d726:	607b      	str	r3, [r7, #4]
 800d728:	e001      	b.n	800d72e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d72a:	2300      	movs	r3, #0
 800d72c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d72e:	687b      	ldr	r3, [r7, #4]
	}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	200054e8 	.word	0x200054e8
 800d740:	20005504 	.word	0x20005504

0800d744 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d069      	beq.n	800d82e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d75e:	4b36      	ldr	r3, [pc, #216]	@ (800d838 <xTaskPriorityInherit+0xf4>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d764:	429a      	cmp	r2, r3
 800d766:	d259      	bcs.n	800d81c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	db06      	blt.n	800d77e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d770:	4b31      	ldr	r3, [pc, #196]	@ (800d838 <xTaskPriorityInherit+0xf4>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d776:	f1c3 0207 	rsb	r2, r3, #7
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	6959      	ldr	r1, [r3, #20]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d786:	4613      	mov	r3, r2
 800d788:	009b      	lsls	r3, r3, #2
 800d78a:	4413      	add	r3, r2
 800d78c:	009b      	lsls	r3, r3, #2
 800d78e:	4a2b      	ldr	r2, [pc, #172]	@ (800d83c <xTaskPriorityInherit+0xf8>)
 800d790:	4413      	add	r3, r2
 800d792:	4299      	cmp	r1, r3
 800d794:	d13a      	bne.n	800d80c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	3304      	adds	r3, #4
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fe f919 	bl	800b9d2 <uxListRemove>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d115      	bne.n	800d7d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7aa:	4924      	ldr	r1, [pc, #144]	@ (800d83c <xTaskPriorityInherit+0xf8>)
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	440b      	add	r3, r1
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d10a      	bne.n	800d7d2 <xTaskPriorityInherit+0x8e>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c6:	43da      	mvns	r2, r3
 800d7c8:	4b1d      	ldr	r3, [pc, #116]	@ (800d840 <xTaskPriorityInherit+0xfc>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	4a1c      	ldr	r2, [pc, #112]	@ (800d840 <xTaskPriorityInherit+0xfc>)
 800d7d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7d2:	4b19      	ldr	r3, [pc, #100]	@ (800d838 <xTaskPriorityInherit+0xf4>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	409a      	lsls	r2, r3
 800d7e4:	4b16      	ldr	r3, [pc, #88]	@ (800d840 <xTaskPriorityInherit+0xfc>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	4a15      	ldr	r2, [pc, #84]	@ (800d840 <xTaskPriorityInherit+0xfc>)
 800d7ec:	6013      	str	r3, [r2, #0]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	4413      	add	r3, r2
 800d7f8:	009b      	lsls	r3, r3, #2
 800d7fa:	4a10      	ldr	r2, [pc, #64]	@ (800d83c <xTaskPriorityInherit+0xf8>)
 800d7fc:	441a      	add	r2, r3
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	3304      	adds	r3, #4
 800d802:	4619      	mov	r1, r3
 800d804:	4610      	mov	r0, r2
 800d806:	f7fe f887 	bl	800b918 <vListInsertEnd>
 800d80a:	e004      	b.n	800d816 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d80c:	4b0a      	ldr	r3, [pc, #40]	@ (800d838 <xTaskPriorityInherit+0xf4>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d816:	2301      	movs	r3, #1
 800d818:	60fb      	str	r3, [r7, #12]
 800d81a:	e008      	b.n	800d82e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d820:	4b05      	ldr	r3, [pc, #20]	@ (800d838 <xTaskPriorityInherit+0xf4>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	429a      	cmp	r2, r3
 800d828:	d201      	bcs.n	800d82e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d82a:	2301      	movs	r3, #1
 800d82c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d82e:	68fb      	ldr	r3, [r7, #12]
	}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	200053dc 	.word	0x200053dc
 800d83c:	200053e0 	.word	0x200053e0
 800d840:	200054e4 	.word	0x200054e4

0800d844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d850:	2300      	movs	r3, #0
 800d852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d074      	beq.n	800d944 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d85a:	4b3d      	ldr	r3, [pc, #244]	@ (800d950 <xTaskPriorityDisinherit+0x10c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	429a      	cmp	r2, r3
 800d862:	d00d      	beq.n	800d880 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d868:	b672      	cpsid	i
 800d86a:	f383 8811 	msr	BASEPRI, r3
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f3bf 8f4f 	dsb	sy
 800d876:	b662      	cpsie	i
 800d878:	60fb      	str	r3, [r7, #12]
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	e7fd      	b.n	800d87c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10d      	bne.n	800d8a4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88c:	b672      	cpsid	i
 800d88e:	f383 8811 	msr	BASEPRI, r3
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	b662      	cpsie	i
 800d89c:	60bb      	str	r3, [r7, #8]
}
 800d89e:	bf00      	nop
 800d8a0:	bf00      	nop
 800d8a2:	e7fd      	b.n	800d8a0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8a8:	1e5a      	subs	r2, r3, #1
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d044      	beq.n	800d944 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d140      	bne.n	800d944 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe f883 	bl	800b9d2 <uxListRemove>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d115      	bne.n	800d8fe <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8d6:	491f      	ldr	r1, [pc, #124]	@ (800d954 <xTaskPriorityDisinherit+0x110>)
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	440b      	add	r3, r1
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <xTaskPriorityDisinherit+0xba>
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f2:	43da      	mvns	r2, r3
 800d8f4:	4b18      	ldr	r3, [pc, #96]	@ (800d958 <xTaskPriorityDisinherit+0x114>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	4a17      	ldr	r2, [pc, #92]	@ (800d958 <xTaskPriorityDisinherit+0x114>)
 800d8fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d90a:	f1c3 0207 	rsb	r2, r3, #7
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d916:	2201      	movs	r2, #1
 800d918:	409a      	lsls	r2, r3
 800d91a:	4b0f      	ldr	r3, [pc, #60]	@ (800d958 <xTaskPriorityDisinherit+0x114>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4313      	orrs	r3, r2
 800d920:	4a0d      	ldr	r2, [pc, #52]	@ (800d958 <xTaskPriorityDisinherit+0x114>)
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	4a08      	ldr	r2, [pc, #32]	@ (800d954 <xTaskPriorityDisinherit+0x110>)
 800d932:	441a      	add	r2, r3
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	3304      	adds	r3, #4
 800d938:	4619      	mov	r1, r3
 800d93a:	4610      	mov	r0, r2
 800d93c:	f7fd ffec 	bl	800b918 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d944:	697b      	ldr	r3, [r7, #20]
	}
 800d946:	4618      	mov	r0, r3
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	200053dc 	.word	0x200053dc
 800d954:	200053e0 	.word	0x200053e0
 800d958:	200054e4 	.word	0x200054e4

0800d95c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b088      	sub	sp, #32
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d96a:	2301      	movs	r3, #1
 800d96c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 8089 	beq.w	800da88 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d10d      	bne.n	800d99a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d982:	b672      	cpsid	i
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	b662      	cpsie	i
 800d992:	60fb      	str	r3, [r7, #12]
}
 800d994:	bf00      	nop
 800d996:	bf00      	nop
 800d998:	e7fd      	b.n	800d996 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d99e:	683a      	ldr	r2, [r7, #0]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d902      	bls.n	800d9aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	61fb      	str	r3, [r7, #28]
 800d9a8:	e002      	b.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b4:	69fa      	ldr	r2, [r7, #28]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d066      	beq.n	800da88 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d161      	bne.n	800da88 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9c4:	4b32      	ldr	r3, [pc, #200]	@ (800da90 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	69ba      	ldr	r2, [r7, #24]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d10d      	bne.n	800d9ea <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d2:	b672      	cpsid	i
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	b662      	cpsie	i
 800d9e2:	60bb      	str	r3, [r7, #8]
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop
 800d9e8:	e7fd      	b.n	800d9e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ee:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	69fa      	ldr	r2, [r7, #28]
 800d9f4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	db04      	blt.n	800da08 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	f1c3 0207 	rsb	r2, r3, #7
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	6959      	ldr	r1, [r3, #20]
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	4613      	mov	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	4413      	add	r3, r2
 800da14:	009b      	lsls	r3, r3, #2
 800da16:	4a1f      	ldr	r2, [pc, #124]	@ (800da94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da18:	4413      	add	r3, r2
 800da1a:	4299      	cmp	r1, r3
 800da1c:	d134      	bne.n	800da88 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	3304      	adds	r3, #4
 800da22:	4618      	mov	r0, r3
 800da24:	f7fd ffd5 	bl	800b9d2 <uxListRemove>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d115      	bne.n	800da5a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da32:	4918      	ldr	r1, [pc, #96]	@ (800da94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	440b      	add	r3, r1
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10a      	bne.n	800da5a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da48:	2201      	movs	r2, #1
 800da4a:	fa02 f303 	lsl.w	r3, r2, r3
 800da4e:	43da      	mvns	r2, r3
 800da50:	4b11      	ldr	r3, [pc, #68]	@ (800da98 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	4013      	ands	r3, r2
 800da56:	4a10      	ldr	r2, [pc, #64]	@ (800da98 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5e:	2201      	movs	r2, #1
 800da60:	409a      	lsls	r2, r3
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4313      	orrs	r3, r2
 800da68:	4a0b      	ldr	r2, [pc, #44]	@ (800da98 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da70:	4613      	mov	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	009b      	lsls	r3, r3, #2
 800da78:	4a06      	ldr	r2, [pc, #24]	@ (800da94 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800da7a:	441a      	add	r2, r3
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	3304      	adds	r3, #4
 800da80:	4619      	mov	r1, r3
 800da82:	4610      	mov	r0, r2
 800da84:	f7fd ff48 	bl	800b918 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da88:	bf00      	nop
 800da8a:	3720      	adds	r7, #32
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	200053dc 	.word	0x200053dc
 800da94:	200053e0 	.word	0x200053e0
 800da98:	200054e4 	.word	0x200054e4

0800da9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da9c:	b480      	push	{r7}
 800da9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800daa0:	4b07      	ldr	r3, [pc, #28]	@ (800dac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800daa8:	4b05      	ldr	r3, [pc, #20]	@ (800dac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800daae:	3201      	adds	r2, #1
 800dab0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800dab2:	4b03      	ldr	r3, [pc, #12]	@ (800dac0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dab4:	681b      	ldr	r3, [r3, #0]
	}
 800dab6:	4618      	mov	r0, r3
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr
 800dac0:	200053dc 	.word	0x200053dc

0800dac4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dace:	4b29      	ldr	r3, [pc, #164]	@ (800db74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dad4:	4b28      	ldr	r3, [pc, #160]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3304      	adds	r3, #4
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fd ff79 	bl	800b9d2 <uxListRemove>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10b      	bne.n	800dafe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dae6:	4b24      	ldr	r3, [pc, #144]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daec:	2201      	movs	r2, #1
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	43da      	mvns	r2, r3
 800daf4:	4b21      	ldr	r3, [pc, #132]	@ (800db7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4013      	ands	r3, r2
 800dafa:	4a20      	ldr	r2, [pc, #128]	@ (800db7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800dafc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db04:	d10a      	bne.n	800db1c <prvAddCurrentTaskToDelayedList+0x58>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d007      	beq.n	800db1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db0c:	4b1a      	ldr	r3, [pc, #104]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	3304      	adds	r3, #4
 800db12:	4619      	mov	r1, r3
 800db14:	481a      	ldr	r0, [pc, #104]	@ (800db80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db16:	f7fd feff 	bl	800b918 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db1a:	e026      	b.n	800db6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4413      	add	r3, r2
 800db22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db24:	4b14      	ldr	r3, [pc, #80]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db2c:	68ba      	ldr	r2, [r7, #8]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	429a      	cmp	r2, r3
 800db32:	d209      	bcs.n	800db48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db34:	4b13      	ldr	r3, [pc, #76]	@ (800db84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	4b0f      	ldr	r3, [pc, #60]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	3304      	adds	r3, #4
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7fd ff0d 	bl	800b960 <vListInsert>
}
 800db46:	e010      	b.n	800db6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db48:	4b0f      	ldr	r3, [pc, #60]	@ (800db88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b0a      	ldr	r3, [pc, #40]	@ (800db78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f7fd ff03 	bl	800b960 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db5a:	4b0c      	ldr	r3, [pc, #48]	@ (800db8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	429a      	cmp	r2, r3
 800db62:	d202      	bcs.n	800db6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800db64:	4a09      	ldr	r2, [pc, #36]	@ (800db8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	6013      	str	r3, [r2, #0]
}
 800db6a:	bf00      	nop
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200054e0 	.word	0x200054e0
 800db78:	200053dc 	.word	0x200053dc
 800db7c:	200054e4 	.word	0x200054e4
 800db80:	200054c8 	.word	0x200054c8
 800db84:	20005498 	.word	0x20005498
 800db88:	20005494 	.word	0x20005494
 800db8c:	200054fc 	.word	0x200054fc

0800db90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	3b04      	subs	r3, #4
 800dba0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3b04      	subs	r3, #4
 800dbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f023 0201 	bic.w	r2, r3, #1
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3b04      	subs	r3, #4
 800dbbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbc0:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf4 <pxPortInitialiseStack+0x64>)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3b14      	subs	r3, #20
 800dbca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	3b04      	subs	r3, #4
 800dbd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f06f 0202 	mvn.w	r2, #2
 800dbde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3b20      	subs	r3, #32
 800dbe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3714      	adds	r7, #20
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr
 800dbf4:	0800dbf9 	.word	0x0800dbf9

0800dbf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc02:	4b15      	ldr	r3, [pc, #84]	@ (800dc58 <prvTaskExitError+0x60>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0a:	d00d      	beq.n	800dc28 <prvTaskExitError+0x30>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc10:	b672      	cpsid	i
 800dc12:	f383 8811 	msr	BASEPRI, r3
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	f3bf 8f4f 	dsb	sy
 800dc1e:	b662      	cpsie	i
 800dc20:	60fb      	str	r3, [r7, #12]
}
 800dc22:	bf00      	nop
 800dc24:	bf00      	nop
 800dc26:	e7fd      	b.n	800dc24 <prvTaskExitError+0x2c>
	__asm volatile
 800dc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc2c:	b672      	cpsid	i
 800dc2e:	f383 8811 	msr	BASEPRI, r3
 800dc32:	f3bf 8f6f 	isb	sy
 800dc36:	f3bf 8f4f 	dsb	sy
 800dc3a:	b662      	cpsie	i
 800dc3c:	60bb      	str	r3, [r7, #8]
}
 800dc3e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc40:	bf00      	nop
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d0fc      	beq.n	800dc42 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	20000078 	.word	0x20000078
 800dc5c:	00000000 	.word	0x00000000

0800dc60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc60:	4b07      	ldr	r3, [pc, #28]	@ (800dc80 <pxCurrentTCBConst2>)
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	6808      	ldr	r0, [r1, #0]
 800dc66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6a:	f380 8809 	msr	PSP, r0
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f04f 0000 	mov.w	r0, #0
 800dc76:	f380 8811 	msr	BASEPRI, r0
 800dc7a:	4770      	bx	lr
 800dc7c:	f3af 8000 	nop.w

0800dc80 <pxCurrentTCBConst2>:
 800dc80:	200053dc 	.word	0x200053dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc84:	bf00      	nop
 800dc86:	bf00      	nop

0800dc88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc88:	4808      	ldr	r0, [pc, #32]	@ (800dcac <prvPortStartFirstTask+0x24>)
 800dc8a:	6800      	ldr	r0, [r0, #0]
 800dc8c:	6800      	ldr	r0, [r0, #0]
 800dc8e:	f380 8808 	msr	MSP, r0
 800dc92:	f04f 0000 	mov.w	r0, #0
 800dc96:	f380 8814 	msr	CONTROL, r0
 800dc9a:	b662      	cpsie	i
 800dc9c:	b661      	cpsie	f
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	f3bf 8f6f 	isb	sy
 800dca6:	df00      	svc	0
 800dca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcaa:	bf00      	nop
 800dcac:	e000ed08 	.word	0xe000ed08

0800dcb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dcb6:	4b37      	ldr	r3, [pc, #220]	@ (800dd94 <xPortStartScheduler+0xe4>)
 800dcb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	22ff      	movs	r2, #255	@ 0xff
 800dcc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dcd0:	78fb      	ldrb	r3, [r7, #3]
 800dcd2:	b2db      	uxtb	r3, r3
 800dcd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dcd8:	b2da      	uxtb	r2, r3
 800dcda:	4b2f      	ldr	r3, [pc, #188]	@ (800dd98 <xPortStartScheduler+0xe8>)
 800dcdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dcde:	4b2f      	ldr	r3, [pc, #188]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dce0:	2207      	movs	r2, #7
 800dce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dce4:	e009      	b.n	800dcfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dce6:	4b2d      	ldr	r3, [pc, #180]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4a2b      	ldr	r2, [pc, #172]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dcee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dcf0:	78fb      	ldrb	r3, [r7, #3]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dcfa:	78fb      	ldrb	r3, [r7, #3]
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd02:	2b80      	cmp	r3, #128	@ 0x80
 800dd04:	d0ef      	beq.n	800dce6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd06:	4b25      	ldr	r3, [pc, #148]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f1c3 0307 	rsb	r3, r3, #7
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d00d      	beq.n	800dd2e <xPortStartScheduler+0x7e>
	__asm volatile
 800dd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd16:	b672      	cpsid	i
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	b662      	cpsie	i
 800dd26:	60bb      	str	r3, [r7, #8]
}
 800dd28:	bf00      	nop
 800dd2a:	bf00      	nop
 800dd2c:	e7fd      	b.n	800dd2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd2e:	4b1b      	ldr	r3, [pc, #108]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	021b      	lsls	r3, r3, #8
 800dd34:	4a19      	ldr	r2, [pc, #100]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dd36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd38:	4b18      	ldr	r3, [pc, #96]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dd40:	4a16      	ldr	r2, [pc, #88]	@ (800dd9c <xPortStartScheduler+0xec>)
 800dd42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd4c:	4b14      	ldr	r3, [pc, #80]	@ (800dda0 <xPortStartScheduler+0xf0>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a13      	ldr	r2, [pc, #76]	@ (800dda0 <xPortStartScheduler+0xf0>)
 800dd52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dd56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dd58:	4b11      	ldr	r3, [pc, #68]	@ (800dda0 <xPortStartScheduler+0xf0>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a10      	ldr	r2, [pc, #64]	@ (800dda0 <xPortStartScheduler+0xf0>)
 800dd5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dd62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd64:	f000 f8dc 	bl	800df20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd68:	4b0e      	ldr	r3, [pc, #56]	@ (800dda4 <xPortStartScheduler+0xf4>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd6e:	f000 f8fb 	bl	800df68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd72:	4b0d      	ldr	r3, [pc, #52]	@ (800dda8 <xPortStartScheduler+0xf8>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a0c      	ldr	r2, [pc, #48]	@ (800dda8 <xPortStartScheduler+0xf8>)
 800dd78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dd7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd7e:	f7ff ff83 	bl	800dc88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd82:	f7ff fa65 	bl	800d250 <vTaskSwitchContext>
	prvTaskExitError();
 800dd86:	f7ff ff37 	bl	800dbf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	e000e400 	.word	0xe000e400
 800dd98:	20005508 	.word	0x20005508
 800dd9c:	2000550c 	.word	0x2000550c
 800dda0:	e000ed20 	.word	0xe000ed20
 800dda4:	20000078 	.word	0x20000078
 800dda8:	e000ef34 	.word	0xe000ef34

0800ddac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb6:	b672      	cpsid	i
 800ddb8:	f383 8811 	msr	BASEPRI, r3
 800ddbc:	f3bf 8f6f 	isb	sy
 800ddc0:	f3bf 8f4f 	dsb	sy
 800ddc4:	b662      	cpsie	i
 800ddc6:	607b      	str	r3, [r7, #4]
}
 800ddc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ddca:	4b11      	ldr	r3, [pc, #68]	@ (800de10 <vPortEnterCritical+0x64>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3301      	adds	r3, #1
 800ddd0:	4a0f      	ldr	r2, [pc, #60]	@ (800de10 <vPortEnterCritical+0x64>)
 800ddd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ddd4:	4b0e      	ldr	r3, [pc, #56]	@ (800de10 <vPortEnterCritical+0x64>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2b01      	cmp	r3, #1
 800ddda:	d112      	bne.n	800de02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dddc:	4b0d      	ldr	r3, [pc, #52]	@ (800de14 <vPortEnterCritical+0x68>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d00d      	beq.n	800de02 <vPortEnterCritical+0x56>
	__asm volatile
 800dde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddea:	b672      	cpsid	i
 800ddec:	f383 8811 	msr	BASEPRI, r3
 800ddf0:	f3bf 8f6f 	isb	sy
 800ddf4:	f3bf 8f4f 	dsb	sy
 800ddf8:	b662      	cpsie	i
 800ddfa:	603b      	str	r3, [r7, #0]
}
 800ddfc:	bf00      	nop
 800ddfe:	bf00      	nop
 800de00:	e7fd      	b.n	800ddfe <vPortEnterCritical+0x52>
	}
}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	20000078 	.word	0x20000078
 800de14:	e000ed04 	.word	0xe000ed04

0800de18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de1e:	4b13      	ldr	r3, [pc, #76]	@ (800de6c <vPortExitCritical+0x54>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10d      	bne.n	800de42 <vPortExitCritical+0x2a>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	b672      	cpsid	i
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	b662      	cpsie	i
 800de3a:	607b      	str	r3, [r7, #4]
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	e7fd      	b.n	800de3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800de42:	4b0a      	ldr	r3, [pc, #40]	@ (800de6c <vPortExitCritical+0x54>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	3b01      	subs	r3, #1
 800de48:	4a08      	ldr	r2, [pc, #32]	@ (800de6c <vPortExitCritical+0x54>)
 800de4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de4c:	4b07      	ldr	r3, [pc, #28]	@ (800de6c <vPortExitCritical+0x54>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d105      	bne.n	800de60 <vPortExitCritical+0x48>
 800de54:	2300      	movs	r3, #0
 800de56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	f383 8811 	msr	BASEPRI, r3
}
 800de5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de60:	bf00      	nop
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr
 800de6c:	20000078 	.word	0x20000078

0800de70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de70:	f3ef 8009 	mrs	r0, PSP
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	4b15      	ldr	r3, [pc, #84]	@ (800ded0 <pxCurrentTCBConst>)
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	f01e 0f10 	tst.w	lr, #16
 800de80:	bf08      	it	eq
 800de82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8a:	6010      	str	r0, [r2, #0]
 800de8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800de94:	b672      	cpsid	i
 800de96:	f380 8811 	msr	BASEPRI, r0
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	b662      	cpsie	i
 800dea4:	f7ff f9d4 	bl	800d250 <vTaskSwitchContext>
 800dea8:	f04f 0000 	mov.w	r0, #0
 800deac:	f380 8811 	msr	BASEPRI, r0
 800deb0:	bc09      	pop	{r0, r3}
 800deb2:	6819      	ldr	r1, [r3, #0]
 800deb4:	6808      	ldr	r0, [r1, #0]
 800deb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deba:	f01e 0f10 	tst.w	lr, #16
 800debe:	bf08      	it	eq
 800dec0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dec4:	f380 8809 	msr	PSP, r0
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	4770      	bx	lr
 800dece:	bf00      	nop

0800ded0 <pxCurrentTCBConst>:
 800ded0:	200053dc 	.word	0x200053dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ded4:	bf00      	nop
 800ded6:	bf00      	nop

0800ded8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
	__asm volatile
 800dede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee2:	b672      	cpsid	i
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	b662      	cpsie	i
 800def2:	607b      	str	r3, [r7, #4]
}
 800def4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800def6:	f7ff f8ef 	bl	800d0d8 <xTaskIncrementTick>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d003      	beq.n	800df08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df00:	4b06      	ldr	r3, [pc, #24]	@ (800df1c <SysTick_Handler+0x44>)
 800df02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	2300      	movs	r3, #0
 800df0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f383 8811 	msr	BASEPRI, r3
}
 800df12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	e000ed04 	.word	0xe000ed04

0800df20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df20:	b480      	push	{r7}
 800df22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df24:	4b0b      	ldr	r3, [pc, #44]	@ (800df54 <vPortSetupTimerInterrupt+0x34>)
 800df26:	2200      	movs	r2, #0
 800df28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df2a:	4b0b      	ldr	r3, [pc, #44]	@ (800df58 <vPortSetupTimerInterrupt+0x38>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df30:	4b0a      	ldr	r3, [pc, #40]	@ (800df5c <vPortSetupTimerInterrupt+0x3c>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a0a      	ldr	r2, [pc, #40]	@ (800df60 <vPortSetupTimerInterrupt+0x40>)
 800df36:	fba2 2303 	umull	r2, r3, r2, r3
 800df3a:	099b      	lsrs	r3, r3, #6
 800df3c:	4a09      	ldr	r2, [pc, #36]	@ (800df64 <vPortSetupTimerInterrupt+0x44>)
 800df3e:	3b01      	subs	r3, #1
 800df40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df42:	4b04      	ldr	r3, [pc, #16]	@ (800df54 <vPortSetupTimerInterrupt+0x34>)
 800df44:	2207      	movs	r2, #7
 800df46:	601a      	str	r2, [r3, #0]
}
 800df48:	bf00      	nop
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr
 800df52:	bf00      	nop
 800df54:	e000e010 	.word	0xe000e010
 800df58:	e000e018 	.word	0xe000e018
 800df5c:	20000058 	.word	0x20000058
 800df60:	10624dd3 	.word	0x10624dd3
 800df64:	e000e014 	.word	0xe000e014

0800df68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800df78 <vPortEnableVFP+0x10>
 800df6c:	6801      	ldr	r1, [r0, #0]
 800df6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800df72:	6001      	str	r1, [r0, #0]
 800df74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df76:	bf00      	nop
 800df78:	e000ed88 	.word	0xe000ed88

0800df7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df82:	f3ef 8305 	mrs	r3, IPSR
 800df86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b0f      	cmp	r3, #15
 800df8c:	d917      	bls.n	800dfbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df8e:	4a1a      	ldr	r2, [pc, #104]	@ (800dff8 <vPortValidateInterruptPriority+0x7c>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df98:	4b18      	ldr	r3, [pc, #96]	@ (800dffc <vPortValidateInterruptPriority+0x80>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	7afa      	ldrb	r2, [r7, #11]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d20d      	bcs.n	800dfbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa6:	b672      	cpsid	i
 800dfa8:	f383 8811 	msr	BASEPRI, r3
 800dfac:	f3bf 8f6f 	isb	sy
 800dfb0:	f3bf 8f4f 	dsb	sy
 800dfb4:	b662      	cpsie	i
 800dfb6:	607b      	str	r3, [r7, #4]
}
 800dfb8:	bf00      	nop
 800dfba:	bf00      	nop
 800dfbc:	e7fd      	b.n	800dfba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dfbe:	4b10      	ldr	r3, [pc, #64]	@ (800e000 <vPortValidateInterruptPriority+0x84>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800e004 <vPortValidateInterruptPriority+0x88>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d90d      	bls.n	800dfea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd2:	b672      	cpsid	i
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	b662      	cpsie	i
 800dfe2:	603b      	str	r3, [r7, #0]
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop
 800dfe8:	e7fd      	b.n	800dfe6 <vPortValidateInterruptPriority+0x6a>
	}
 800dfea:	bf00      	nop
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	e000e3f0 	.word	0xe000e3f0
 800dffc:	20005508 	.word	0x20005508
 800e000:	e000ed0c 	.word	0xe000ed0c
 800e004:	2000550c 	.word	0x2000550c

0800e008 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	@ 0x28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e010:	2300      	movs	r3, #0
 800e012:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e014:	f7fe ff90 	bl	800cf38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e018:	4b5d      	ldr	r3, [pc, #372]	@ (800e190 <pvPortMalloc+0x188>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e020:	f000 f920 	bl	800e264 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e024:	4b5b      	ldr	r3, [pc, #364]	@ (800e194 <pvPortMalloc+0x18c>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4013      	ands	r3, r2
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f040 8094 	bne.w	800e15a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d020      	beq.n	800e07a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e038:	2208      	movs	r2, #8
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4413      	add	r3, r2
 800e03e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f003 0307 	and.w	r3, r3, #7
 800e046:	2b00      	cmp	r3, #0
 800e048:	d017      	beq.n	800e07a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f023 0307 	bic.w	r3, r3, #7
 800e050:	3308      	adds	r3, #8
 800e052:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f003 0307 	and.w	r3, r3, #7
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00d      	beq.n	800e07a <pvPortMalloc+0x72>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	b672      	cpsid	i
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	b662      	cpsie	i
 800e072:	617b      	str	r3, [r7, #20]
}
 800e074:	bf00      	nop
 800e076:	bf00      	nop
 800e078:	e7fd      	b.n	800e076 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d06c      	beq.n	800e15a <pvPortMalloc+0x152>
 800e080:	4b45      	ldr	r3, [pc, #276]	@ (800e198 <pvPortMalloc+0x190>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d867      	bhi.n	800e15a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e08a:	4b44      	ldr	r3, [pc, #272]	@ (800e19c <pvPortMalloc+0x194>)
 800e08c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e08e:	4b43      	ldr	r3, [pc, #268]	@ (800e19c <pvPortMalloc+0x194>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e094:	e004      	b.n	800e0a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d903      	bls.n	800e0b2 <pvPortMalloc+0xaa>
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1f1      	bne.n	800e096 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0b2:	4b37      	ldr	r3, [pc, #220]	@ (800e190 <pvPortMalloc+0x188>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d04e      	beq.n	800e15a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2208      	movs	r2, #8
 800e0c2:	4413      	add	r3, r2
 800e0c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	6a3b      	ldr	r3, [r7, #32]
 800e0cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	1ad2      	subs	r2, r2, r3
 800e0d6:	2308      	movs	r3, #8
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d922      	bls.n	800e124 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0e6:	69bb      	ldr	r3, [r7, #24]
 800e0e8:	f003 0307 	and.w	r3, r3, #7
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00d      	beq.n	800e10c <pvPortMalloc+0x104>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f4:	b672      	cpsid	i
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	b662      	cpsie	i
 800e104:	613b      	str	r3, [r7, #16]
}
 800e106:	bf00      	nop
 800e108:	bf00      	nop
 800e10a:	e7fd      	b.n	800e108 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10e:	685a      	ldr	r2, [r3, #4]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	1ad2      	subs	r2, r2, r3
 800e114:	69bb      	ldr	r3, [r7, #24]
 800e116:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e11e:	69b8      	ldr	r0, [r7, #24]
 800e120:	f000 f902 	bl	800e328 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e124:	4b1c      	ldr	r3, [pc, #112]	@ (800e198 <pvPortMalloc+0x190>)
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	1ad3      	subs	r3, r2, r3
 800e12e:	4a1a      	ldr	r2, [pc, #104]	@ (800e198 <pvPortMalloc+0x190>)
 800e130:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e132:	4b19      	ldr	r3, [pc, #100]	@ (800e198 <pvPortMalloc+0x190>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a0 <pvPortMalloc+0x198>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d203      	bcs.n	800e146 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e13e:	4b16      	ldr	r3, [pc, #88]	@ (800e198 <pvPortMalloc+0x190>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4a17      	ldr	r2, [pc, #92]	@ (800e1a0 <pvPortMalloc+0x198>)
 800e144:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e148:	685a      	ldr	r2, [r3, #4]
 800e14a:	4b12      	ldr	r3, [pc, #72]	@ (800e194 <pvPortMalloc+0x18c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	431a      	orrs	r2, r3
 800e150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e152:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	2200      	movs	r2, #0
 800e158:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e15a:	f7fe fefb 	bl	800cf54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	f003 0307 	and.w	r3, r3, #7
 800e164:	2b00      	cmp	r3, #0
 800e166:	d00d      	beq.n	800e184 <pvPortMalloc+0x17c>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16c:	b672      	cpsid	i
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	b662      	cpsie	i
 800e17c:	60fb      	str	r3, [r7, #12]
}
 800e17e:	bf00      	nop
 800e180:	bf00      	nop
 800e182:	e7fd      	b.n	800e180 <pvPortMalloc+0x178>
	return pvReturn;
 800e184:	69fb      	ldr	r3, [r7, #28]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3728      	adds	r7, #40	@ 0x28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2000b828 	.word	0x2000b828
 800e194:	2000b834 	.word	0x2000b834
 800e198:	2000b82c 	.word	0x2000b82c
 800e19c:	2000b820 	.word	0x2000b820
 800e1a0:	2000b830 	.word	0x2000b830

0800e1a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d04e      	beq.n	800e254 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1b6:	2308      	movs	r3, #8
 800e1b8:	425b      	negs	r3, r3
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	4413      	add	r3, r2
 800e1be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	685a      	ldr	r2, [r3, #4]
 800e1c8:	4b24      	ldr	r3, [pc, #144]	@ (800e25c <vPortFree+0xb8>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4013      	ands	r3, r2
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10d      	bne.n	800e1ee <vPortFree+0x4a>
	__asm volatile
 800e1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d6:	b672      	cpsid	i
 800e1d8:	f383 8811 	msr	BASEPRI, r3
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	b662      	cpsie	i
 800e1e6:	60fb      	str	r3, [r7, #12]
}
 800e1e8:	bf00      	nop
 800e1ea:	bf00      	nop
 800e1ec:	e7fd      	b.n	800e1ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00d      	beq.n	800e212 <vPortFree+0x6e>
	__asm volatile
 800e1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fa:	b672      	cpsid	i
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	b662      	cpsie	i
 800e20a:	60bb      	str	r3, [r7, #8]
}
 800e20c:	bf00      	nop
 800e20e:	bf00      	nop
 800e210:	e7fd      	b.n	800e20e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	4b11      	ldr	r3, [pc, #68]	@ (800e25c <vPortFree+0xb8>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4013      	ands	r3, r2
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d019      	beq.n	800e254 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d115      	bne.n	800e254 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	685a      	ldr	r2, [r3, #4]
 800e22c:	4b0b      	ldr	r3, [pc, #44]	@ (800e25c <vPortFree+0xb8>)
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	43db      	mvns	r3, r3
 800e232:	401a      	ands	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e238:	f7fe fe7e 	bl	800cf38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	4b07      	ldr	r3, [pc, #28]	@ (800e260 <vPortFree+0xbc>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4413      	add	r3, r2
 800e246:	4a06      	ldr	r2, [pc, #24]	@ (800e260 <vPortFree+0xbc>)
 800e248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e24a:	6938      	ldr	r0, [r7, #16]
 800e24c:	f000 f86c 	bl	800e328 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e250:	f7fe fe80 	bl	800cf54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e254:	bf00      	nop
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	2000b834 	.word	0x2000b834
 800e260:	2000b82c 	.word	0x2000b82c

0800e264 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e26a:	f246 3310 	movw	r3, #25360	@ 0x6310
 800e26e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e270:	4b27      	ldr	r3, [pc, #156]	@ (800e310 <prvHeapInit+0xac>)
 800e272:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	f003 0307 	and.w	r3, r3, #7
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00c      	beq.n	800e298 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	3307      	adds	r3, #7
 800e282:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f023 0307 	bic.w	r3, r3, #7
 800e28a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	4a1f      	ldr	r2, [pc, #124]	@ (800e310 <prvHeapInit+0xac>)
 800e294:	4413      	add	r3, r2
 800e296:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e29c:	4a1d      	ldr	r2, [pc, #116]	@ (800e314 <prvHeapInit+0xb0>)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2a2:	4b1c      	ldr	r3, [pc, #112]	@ (800e314 <prvHeapInit+0xb0>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2b0:	2208      	movs	r2, #8
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	1a9b      	subs	r3, r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f023 0307 	bic.w	r3, r3, #7
 800e2be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	4a15      	ldr	r2, [pc, #84]	@ (800e318 <prvHeapInit+0xb4>)
 800e2c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e2c6:	4b14      	ldr	r3, [pc, #80]	@ (800e318 <prvHeapInit+0xb4>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e2ce:	4b12      	ldr	r3, [pc, #72]	@ (800e318 <prvHeapInit+0xb4>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	1ad2      	subs	r2, r2, r3
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e318 <prvHeapInit+0xb4>)
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e31c <prvHeapInit+0xb8>)
 800e2f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	4a09      	ldr	r2, [pc, #36]	@ (800e320 <prvHeapInit+0xbc>)
 800e2fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e2fc:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <prvHeapInit+0xc0>)
 800e2fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e302:	601a      	str	r2, [r3, #0]
}
 800e304:	bf00      	nop
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	20005510 	.word	0x20005510
 800e314:	2000b820 	.word	0x2000b820
 800e318:	2000b828 	.word	0x2000b828
 800e31c:	2000b830 	.word	0x2000b830
 800e320:	2000b82c 	.word	0x2000b82c
 800e324:	2000b834 	.word	0x2000b834

0800e328 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e330:	4b28      	ldr	r3, [pc, #160]	@ (800e3d4 <prvInsertBlockIntoFreeList+0xac>)
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	e002      	b.n	800e33c <prvInsertBlockIntoFreeList+0x14>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	429a      	cmp	r2, r3
 800e344:	d8f7      	bhi.n	800e336 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	68ba      	ldr	r2, [r7, #8]
 800e350:	4413      	add	r3, r2
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	429a      	cmp	r2, r3
 800e356:	d108      	bne.n	800e36a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	441a      	add	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	441a      	add	r2, r3
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d118      	bne.n	800e3b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	4b15      	ldr	r3, [pc, #84]	@ (800e3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	429a      	cmp	r2, r3
 800e388:	d00d      	beq.n	800e3a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	441a      	add	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	681a      	ldr	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	601a      	str	r2, [r3, #0]
 800e3a4:	e008      	b.n	800e3b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e3d8 <prvInsertBlockIntoFreeList+0xb0>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	e003      	b.n	800e3b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e3b8:	68fa      	ldr	r2, [r7, #12]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	d002      	beq.n	800e3c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3c6:	bf00      	nop
 800e3c8:	3714      	adds	r7, #20
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	2000b820 	.word	0x2000b820
 800e3d8:	2000b828 	.word	0x2000b828

0800e3dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	330c      	adds	r3, #12
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f002 fb67 	bl	8010ac4 <tcpip_send_msg_wait_sem>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d103      	bne.n	800e40a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e408:	e001      	b.n	800e40e <netconn_apimsg+0x32>
  }
  return err;
 800e40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08c      	sub	sp, #48	@ 0x30
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	4603      	mov	r3, r0
 800e420:	603a      	str	r2, [r7, #0]
 800e422:	71fb      	strb	r3, [r7, #7]
 800e424:	460b      	mov	r3, r1
 800e426:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e428:	79fb      	ldrb	r3, [r7, #7]
 800e42a:	6839      	ldr	r1, [r7, #0]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f001 f951 	bl	800f6d4 <netconn_alloc>
 800e432:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e436:	2b00      	cmp	r3, #0
 800e438:	d054      	beq.n	800e4e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e43a:	79bb      	ldrb	r3, [r7, #6]
 800e43c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e440:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e442:	f107 0308 	add.w	r3, r7, #8
 800e446:	4619      	mov	r1, r3
 800e448:	4829      	ldr	r0, [pc, #164]	@ (800e4f0 <netconn_new_with_proto_and_callback+0xd8>)
 800e44a:	f7ff ffc7 	bl	800e3dc <netconn_apimsg>
 800e44e:	4603      	mov	r3, r0
 800e450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e454:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d043      	beq.n	800e4e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d005      	beq.n	800e470 <netconn_new_with_proto_and_callback+0x58>
 800e464:	4b23      	ldr	r3, [pc, #140]	@ (800e4f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e466:	22a3      	movs	r2, #163	@ 0xa3
 800e468:	4923      	ldr	r1, [pc, #140]	@ (800e4f8 <netconn_new_with_proto_and_callback+0xe0>)
 800e46a:	4824      	ldr	r0, [pc, #144]	@ (800e4fc <netconn_new_with_proto_and_callback+0xe4>)
 800e46c:	f00f f98c 	bl	801d788 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e472:	3310      	adds	r3, #16
 800e474:	4618      	mov	r0, r3
 800e476:	f00e faf6 	bl	801ca66 <sys_mbox_valid>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d105      	bne.n	800e48c <netconn_new_with_proto_and_callback+0x74>
 800e480:	4b1c      	ldr	r3, [pc, #112]	@ (800e4f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e482:	22a4      	movs	r2, #164	@ 0xa4
 800e484:	491e      	ldr	r1, [pc, #120]	@ (800e500 <netconn_new_with_proto_and_callback+0xe8>)
 800e486:	481d      	ldr	r0, [pc, #116]	@ (800e4fc <netconn_new_with_proto_and_callback+0xe4>)
 800e488:	f00f f97e 	bl	801d788 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48e:	3314      	adds	r3, #20
 800e490:	4618      	mov	r0, r3
 800e492:	f00e fae8 	bl	801ca66 <sys_mbox_valid>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d005      	beq.n	800e4a8 <netconn_new_with_proto_and_callback+0x90>
 800e49c:	4b15      	ldr	r3, [pc, #84]	@ (800e4f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e49e:	22a6      	movs	r2, #166	@ 0xa6
 800e4a0:	4918      	ldr	r1, [pc, #96]	@ (800e504 <netconn_new_with_proto_and_callback+0xec>)
 800e4a2:	4816      	ldr	r0, [pc, #88]	@ (800e4fc <netconn_new_with_proto_and_callback+0xe4>)
 800e4a4:	f00f f970 	bl	801d788 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4aa:	330c      	adds	r3, #12
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f00e fb6b 	bl	801cb88 <sys_sem_valid>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d105      	bne.n	800e4c4 <netconn_new_with_proto_and_callback+0xac>
 800e4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e4f4 <netconn_new_with_proto_and_callback+0xdc>)
 800e4ba:	22a9      	movs	r2, #169	@ 0xa9
 800e4bc:	4912      	ldr	r1, [pc, #72]	@ (800e508 <netconn_new_with_proto_and_callback+0xf0>)
 800e4be:	480f      	ldr	r0, [pc, #60]	@ (800e4fc <netconn_new_with_proto_and_callback+0xe4>)
 800e4c0:	f00f f962 	bl	801d788 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c6:	330c      	adds	r3, #12
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f00e fb50 	bl	801cb6e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d0:	3310      	adds	r3, #16
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f00e fa40 	bl	801c958 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e4d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e4da:	2007      	movs	r0, #7
 800e4dc:	f003 fef0 	bl	80122c0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	e000      	b.n	800e4e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3730      	adds	r7, #48	@ 0x30
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	0800f6a9 	.word	0x0800f6a9
 800e4f4:	0801fed8 	.word	0x0801fed8
 800e4f8:	0801ff0c 	.word	0x0801ff0c
 800e4fc:	0801ff30 	.word	0x0801ff30
 800e500:	0801ff58 	.word	0x0801ff58
 800e504:	0801ff70 	.word	0x0801ff70
 800e508:	0801ff94 	.word	0x0801ff94

0800e50c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b08c      	sub	sp, #48	@ 0x30
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d101      	bne.n	800e51e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	e014      	b.n	800e548 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e522:	2329      	movs	r3, #41	@ 0x29
 800e524:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e526:	f107 030c 	add.w	r3, r7, #12
 800e52a:	4619      	mov	r1, r3
 800e52c:	4808      	ldr	r0, [pc, #32]	@ (800e550 <netconn_prepare_delete+0x44>)
 800e52e:	f7ff ff55 	bl	800e3dc <netconn_apimsg>
 800e532:	4603      	mov	r3, r0
 800e534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e538:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d002      	beq.n	800e546 <netconn_prepare_delete+0x3a>
    return err;
 800e540:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e544:	e000      	b.n	800e548 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e546:	2300      	movs	r3, #0
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3730      	adds	r7, #48	@ 0x30
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	0800fc15 	.word	0x0800fc15

0800e554 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b084      	sub	sp, #16
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d101      	bne.n	800e566 <netconn_delete+0x12>
    return ERR_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	e00d      	b.n	800e582 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff ffd0 	bl	800e50c <netconn_prepare_delete>
 800e56c:	4603      	mov	r3, r0
 800e56e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d102      	bne.n	800e57e <netconn_delete+0x2a>
    netconn_free(conn);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f001 f919 	bl	800f7b0 <netconn_free>
  }
  return err;
 800e57e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3710      	adds	r7, #16
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b08e      	sub	sp, #56	@ 0x38
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	4613      	mov	r3, r2
 800e598:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d109      	bne.n	800e5b4 <netconn_bind+0x28>
 800e5a0:	4b11      	ldr	r3, [pc, #68]	@ (800e5e8 <netconn_bind+0x5c>)
 800e5a2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e5a6:	4911      	ldr	r1, [pc, #68]	@ (800e5ec <netconn_bind+0x60>)
 800e5a8:	4811      	ldr	r0, [pc, #68]	@ (800e5f0 <netconn_bind+0x64>)
 800e5aa:	f00f f8ed 	bl	801d788 <iprintf>
 800e5ae:	f06f 030f 	mvn.w	r3, #15
 800e5b2:	e015      	b.n	800e5e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e5f4 <netconn_bind+0x68>)
 800e5bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e5c6:	88fb      	ldrh	r3, [r7, #6]
 800e5c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e5ca:	f107 0314 	add.w	r3, r7, #20
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4809      	ldr	r0, [pc, #36]	@ (800e5f8 <netconn_bind+0x6c>)
 800e5d2:	f7ff ff03 	bl	800e3dc <netconn_apimsg>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e5dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3738      	adds	r7, #56	@ 0x38
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	0801fed8 	.word	0x0801fed8
 800e5ec:	08020010 	.word	0x08020010
 800e5f0:	0801ff30 	.word	0x0801ff30
 800e5f4:	080243c0 	.word	0x080243c0
 800e5f8:	0800fddd 	.word	0x0800fddd

0800e5fc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b08c      	sub	sp, #48	@ 0x30
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d109      	bne.n	800e622 <netconn_listen_with_backlog+0x26>
 800e60e:	4b0d      	ldr	r3, [pc, #52]	@ (800e644 <netconn_listen_with_backlog+0x48>)
 800e610:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800e614:	490c      	ldr	r1, [pc, #48]	@ (800e648 <netconn_listen_with_backlog+0x4c>)
 800e616:	480d      	ldr	r0, [pc, #52]	@ (800e64c <netconn_listen_with_backlog+0x50>)
 800e618:	f00f f8b6 	bl	801d788 <iprintf>
 800e61c:	f06f 030f 	mvn.w	r3, #15
 800e620:	e00c      	b.n	800e63c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e626:	f107 030c 	add.w	r3, r7, #12
 800e62a:	4619      	mov	r1, r3
 800e62c:	4808      	ldr	r0, [pc, #32]	@ (800e650 <netconn_listen_with_backlog+0x54>)
 800e62e:	f7ff fed5 	bl	800e3dc <netconn_apimsg>
 800e632:	4603      	mov	r3, r0
 800e634:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e638:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3730      	adds	r7, #48	@ 0x30
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}
 800e644:	0801fed8 	.word	0x0801fed8
 800e648:	08020090 	.word	0x08020090
 800e64c:	0801ff30 	.word	0x0801ff30
 800e650:	0800fe51 	.word	0x0800fe51

0800e654 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d109      	bne.n	800e678 <netconn_accept+0x24>
 800e664:	4b3d      	ldr	r3, [pc, #244]	@ (800e75c <netconn_accept+0x108>)
 800e666:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e66a:	493d      	ldr	r1, [pc, #244]	@ (800e760 <netconn_accept+0x10c>)
 800e66c:	483d      	ldr	r0, [pc, #244]	@ (800e764 <netconn_accept+0x110>)
 800e66e:	f00f f88b 	bl	801d788 <iprintf>
 800e672:	f06f 030f 	mvn.w	r3, #15
 800e676:	e06c      	b.n	800e752 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	2200      	movs	r2, #0
 800e67c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d109      	bne.n	800e698 <netconn_accept+0x44>
 800e684:	4b35      	ldr	r3, [pc, #212]	@ (800e75c <netconn_accept+0x108>)
 800e686:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800e68a:	4937      	ldr	r1, [pc, #220]	@ (800e768 <netconn_accept+0x114>)
 800e68c:	4835      	ldr	r0, [pc, #212]	@ (800e764 <netconn_accept+0x110>)
 800e68e:	f00f f87b 	bl	801d788 <iprintf>
 800e692:	f06f 030f 	mvn.w	r3, #15
 800e696:	e05c      	b.n	800e752 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 fb9a 	bl	800edd2 <netconn_err>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e6a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e6aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6ae:	e050      	b.n	800e752 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	3314      	adds	r3, #20
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f00e f9d6 	bl	801ca66 <sys_mbox_valid>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <netconn_accept+0x78>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	7f1b      	ldrb	r3, [r3, #28]
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e6cc:	f06f 030e 	mvn.w	r3, #14
 800e6d0:	e03f      	b.n	800e752 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7f1b      	ldrb	r3, [r3, #28]
 800e6d6:	f003 0302 	and.w	r3, r3, #2
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	3314      	adds	r3, #20
 800e6e2:	f107 020c 	add.w	r2, r7, #12
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f00e f9a0 	bl	801ca2e <sys_arch_mbox_tryfetch>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f4:	d10a      	bne.n	800e70c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e6f6:	f06f 0306 	mvn.w	r3, #6
 800e6fa:	e02a      	b.n	800e752 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	3314      	adds	r3, #20
 800e700:	f107 010c 	add.w	r1, r7, #12
 800e704:	2200      	movs	r2, #0
 800e706:	4618      	mov	r0, r3
 800e708:	f00e f952 	bl	801c9b0 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e710:	2b00      	cmp	r3, #0
 800e712:	d005      	beq.n	800e720 <netconn_accept+0xcc>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e718:	2200      	movs	r2, #0
 800e71a:	2101      	movs	r1, #1
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f107 0213 	add.w	r2, r7, #19
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fba3 	bl	800ee74 <lwip_netconn_is_err_msg>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d002      	beq.n	800e73a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e734:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e738:	e00b      	b.n	800e752 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d102      	bne.n	800e746 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e740:	f06f 030e 	mvn.w	r3, #14
 800e744:	e005      	b.n	800e752 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	697a      	ldr	r2, [r7, #20]
 800e74e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e750:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e752:	4618      	mov	r0, r3
 800e754:	3718      	adds	r7, #24
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	0801fed8 	.word	0x0801fed8
 800e760:	080200b0 	.word	0x080200b0
 800e764:	0801ff30 	.word	0x0801ff30
 800e768:	080200d0 	.word	0x080200d0

0800e76c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b088      	sub	sp, #32
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	4613      	mov	r3, r2
 800e778:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d109      	bne.n	800e798 <netconn_recv_data+0x2c>
 800e784:	4b58      	ldr	r3, [pc, #352]	@ (800e8e8 <netconn_recv_data+0x17c>)
 800e786:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e78a:	4958      	ldr	r1, [pc, #352]	@ (800e8ec <netconn_recv_data+0x180>)
 800e78c:	4858      	ldr	r0, [pc, #352]	@ (800e8f0 <netconn_recv_data+0x184>)
 800e78e:	f00e fffb 	bl	801d788 <iprintf>
 800e792:	f06f 030f 	mvn.w	r3, #15
 800e796:	e0a2      	b.n	800e8de <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	2200      	movs	r2, #0
 800e79c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d109      	bne.n	800e7b8 <netconn_recv_data+0x4c>
 800e7a4:	4b50      	ldr	r3, [pc, #320]	@ (800e8e8 <netconn_recv_data+0x17c>)
 800e7a6:	f240 224a 	movw	r2, #586	@ 0x24a
 800e7aa:	4952      	ldr	r1, [pc, #328]	@ (800e8f4 <netconn_recv_data+0x188>)
 800e7ac:	4850      	ldr	r0, [pc, #320]	@ (800e8f0 <netconn_recv_data+0x184>)
 800e7ae:	f00e ffeb 	bl	801d788 <iprintf>
 800e7b2:	f06f 030f 	mvn.w	r3, #15
 800e7b6:	e092      	b.n	800e8de <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	3310      	adds	r3, #16
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f00e f952 	bl	801ca66 <sys_mbox_valid>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10e      	bne.n	800e7e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f000 fb02 	bl	800edd2 <netconn_err>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e7d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e7da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e7de:	e07e      	b.n	800e8de <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e7e0:	f06f 030a 	mvn.w	r3, #10
 800e7e4:	e07b      	b.n	800e8de <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	7f1b      	ldrb	r3, [r3, #28]
 800e7ea:	f003 0302 	and.w	r3, r3, #2
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d10f      	bne.n	800e812 <netconn_recv_data+0xa6>
 800e7f2:	79fb      	ldrb	r3, [r7, #7]
 800e7f4:	f003 0304 	and.w	r3, r3, #4
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10a      	bne.n	800e812 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	7f1b      	ldrb	r3, [r3, #28]
 800e800:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e804:	2b00      	cmp	r3, #0
 800e806:	d104      	bne.n	800e812 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d023      	beq.n	800e85a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	3310      	adds	r3, #16
 800e816:	f107 0218 	add.w	r2, r7, #24
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f00e f906 	bl	801ca2e <sys_arch_mbox_tryfetch>
 800e822:	4603      	mov	r3, r0
 800e824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e828:	d11f      	bne.n	800e86a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	f000 fad1 	bl	800edd2 <netconn_err>
 800e830:	4603      	mov	r3, r0
 800e832:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e834:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e83c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e840:	e04d      	b.n	800e8de <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	7f1b      	ldrb	r3, [r3, #28]
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e84e:	f06f 030a 	mvn.w	r3, #10
 800e852:	e044      	b.n	800e8de <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e854:	f06f 0306 	mvn.w	r3, #6
 800e858:	e041      	b.n	800e8de <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	3310      	adds	r3, #16
 800e85e:	f107 0118 	add.w	r1, r7, #24
 800e862:	2200      	movs	r2, #0
 800e864:	4618      	mov	r0, r3
 800e866:	f00e f8a3 	bl	801c9b0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e872:	2b10      	cmp	r3, #16
 800e874:	d117      	bne.n	800e8a6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	f107 0217 	add.w	r2, r7, #23
 800e87c:	4611      	mov	r1, r2
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 faf8 	bl	800ee74 <lwip_netconn_is_err_msg>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d009      	beq.n	800e89e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e88e:	f113 0f0f 	cmn.w	r3, #15
 800e892:	d101      	bne.n	800e898 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	e022      	b.n	800e8de <netconn_recv_data+0x172>
      }
      return err;
 800e898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e89c:	e01f      	b.n	800e8de <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	891b      	ldrh	r3, [r3, #8]
 800e8a2:	83fb      	strh	r3, [r7, #30]
 800e8a4:	e00d      	b.n	800e8c2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d106      	bne.n	800e8ba <netconn_recv_data+0x14e>
 800e8ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e8e8 <netconn_recv_data+0x17c>)
 800e8ae:	f240 2291 	movw	r2, #657	@ 0x291
 800e8b2:	4911      	ldr	r1, [pc, #68]	@ (800e8f8 <netconn_recv_data+0x18c>)
 800e8b4:	480e      	ldr	r0, [pc, #56]	@ (800e8f0 <netconn_recv_data+0x184>)
 800e8b6:	f00e ff67 	bl	801d788 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	891b      	ldrh	r3, [r3, #8]
 800e8c0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d005      	beq.n	800e8d6 <netconn_recv_data+0x16a>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ce:	8bfa      	ldrh	r2, [r7, #30]
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e8d6:	69ba      	ldr	r2, [r7, #24]
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3720      	adds	r7, #32
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	0801fed8 	.word	0x0801fed8
 800e8ec:	080200f0 	.word	0x080200f0
 800e8f0:	0801ff30 	.word	0x0801ff30
 800e8f4:	08020110 	.word	0x08020110
 800e8f8:	0802012c 	.word	0x0802012c

0800e8fc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d005      	beq.n	800e91a <netconn_tcp_recvd_msg+0x1e>
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e916:	2b10      	cmp	r3, #16
 800e918:	d009      	beq.n	800e92e <netconn_tcp_recvd_msg+0x32>
 800e91a:	4b0c      	ldr	r3, [pc, #48]	@ (800e94c <netconn_tcp_recvd_msg+0x50>)
 800e91c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e920:	490b      	ldr	r1, [pc, #44]	@ (800e950 <netconn_tcp_recvd_msg+0x54>)
 800e922:	480c      	ldr	r0, [pc, #48]	@ (800e954 <netconn_tcp_recvd_msg+0x58>)
 800e924:	f00e ff30 	bl	801d788 <iprintf>
 800e928:	f06f 030f 	mvn.w	r3, #15
 800e92c:	e00a      	b.n	800e944 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	4806      	ldr	r0, [pc, #24]	@ (800e958 <netconn_tcp_recvd_msg+0x5c>)
 800e93e:	f7ff fd4d 	bl	800e3dc <netconn_apimsg>
 800e942:	4603      	mov	r3, r0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	0801fed8 	.word	0x0801fed8
 800e950:	08020138 	.word	0x08020138
 800e954:	0801ff30 	.word	0x0801ff30
 800e958:	0801001b 	.word	0x0801001b

0800e95c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b090      	sub	sp, #64	@ 0x40
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	4613      	mov	r3, r2
 800e968:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3310      	adds	r3, #16
 800e96e:	4618      	mov	r0, r3
 800e970:	f00e f879 	bl	801ca66 <sys_mbox_valid>
 800e974:	4603      	mov	r3, r0
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e97a:	f06f 030a 	mvn.w	r3, #10
 800e97e:	e06d      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	7f1b      	ldrb	r3, [r3, #28]
 800e984:	b25b      	sxtb	r3, r3
 800e986:	2b00      	cmp	r3, #0
 800e988:	da07      	bge.n	800e99a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	7f1b      	ldrb	r3, [r3, #28]
 800e98e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e992:	b2da      	uxtb	r2, r3
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e998:	e039      	b.n	800ea0e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	461a      	mov	r2, r3
 800e99e:	68b9      	ldr	r1, [r7, #8]
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f7ff fee3 	bl	800e76c <netconn_recv_data>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e9ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e9b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e9b8:	e050      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	f003 0308 	and.w	r3, r3, #8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10e      	bne.n	800e9e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <netconn_recv_data_tcp+0x7a>
 800e9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9d2:	891b      	ldrh	r3, [r3, #8]
 800e9d4:	e000      	b.n	800e9d8 <netconn_recv_data_tcp+0x7c>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e9da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e9dc:	f107 0214 	add.w	r2, r7, #20
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	68f8      	ldr	r0, [r7, #12]
 800e9e4:	f7ff ff8a 	bl	800e8fc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d134      	bne.n	800ea58 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e9ee:	79fb      	ldrb	r3, [r7, #7]
 800e9f0:	f003 0310 	and.w	r3, r3, #16
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d009      	beq.n	800ea0c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	7f1b      	ldrb	r3, [r3, #28]
 800e9fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ea06:	f06f 0306 	mvn.w	r3, #6
 800ea0a:	e027      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ea0c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <netconn_recv_data_tcp+0xc6>
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	2101      	movs	r1, #1
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10f      	bne.n	800ea4a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f000 f9d1 	bl	800edd2 <netconn_err>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800ea36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <netconn_recv_data_tcp+0xe8>
          return err;
 800ea3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ea42:	e00b      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ea44:	f06f 030d 	mvn.w	r3, #13
 800ea48:	e008      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 f983 	bl	800ed58 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ea52:	f06f 030e 	mvn.w	r3, #14
 800ea56:	e001      	b.n	800ea5c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ea58:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3740      	adds	r7, #64	@ 0x40
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}

0800ea64 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d109      	bne.n	800ea8c <netconn_recv+0x28>
 800ea78:	4b32      	ldr	r3, [pc, #200]	@ (800eb44 <netconn_recv+0xe0>)
 800ea7a:	f240 3263 	movw	r2, #867	@ 0x363
 800ea7e:	4932      	ldr	r1, [pc, #200]	@ (800eb48 <netconn_recv+0xe4>)
 800ea80:	4832      	ldr	r0, [pc, #200]	@ (800eb4c <netconn_recv+0xe8>)
 800ea82:	f00e fe81 	bl	801d788 <iprintf>
 800ea86:	f06f 030f 	mvn.w	r3, #15
 800ea8a:	e056      	b.n	800eb3a <netconn_recv+0xd6>
  *new_buf = NULL;
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d109      	bne.n	800eaac <netconn_recv+0x48>
 800ea98:	4b2a      	ldr	r3, [pc, #168]	@ (800eb44 <netconn_recv+0xe0>)
 800ea9a:	f240 3265 	movw	r2, #869	@ 0x365
 800ea9e:	492c      	ldr	r1, [pc, #176]	@ (800eb50 <netconn_recv+0xec>)
 800eaa0:	482a      	ldr	r0, [pc, #168]	@ (800eb4c <netconn_recv+0xe8>)
 800eaa2:	f00e fe71 	bl	801d788 <iprintf>
 800eaa6:	f06f 030f 	mvn.w	r3, #15
 800eaaa:	e046      	b.n	800eb3a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eab4:	2b10      	cmp	r3, #16
 800eab6:	d13a      	bne.n	800eb2e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800eab8:	2300      	movs	r3, #0
 800eaba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800eabc:	2006      	movs	r0, #6
 800eabe:	f003 fb89 	bl	80121d4 <memp_malloc>
 800eac2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d102      	bne.n	800ead0 <netconn_recv+0x6c>
      return ERR_MEM;
 800eaca:	f04f 33ff 	mov.w	r3, #4294967295
 800eace:	e034      	b.n	800eb3a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ead0:	f107 030c 	add.w	r3, r7, #12
 800ead4:	2200      	movs	r2, #0
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7ff ff3f 	bl	800e95c <netconn_recv_data_tcp>
 800eade:	4603      	mov	r3, r0
 800eae0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800eae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d006      	beq.n	800eaf8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800eaea:	6979      	ldr	r1, [r7, #20]
 800eaec:	2006      	movs	r0, #6
 800eaee:	f003 fbe7 	bl	80122c0 <memp_free>
      return err;
 800eaf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eaf6:	e020      	b.n	800eb3a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d106      	bne.n	800eb0c <netconn_recv+0xa8>
 800eafe:	4b11      	ldr	r3, [pc, #68]	@ (800eb44 <netconn_recv+0xe0>)
 800eb00:	f240 3279 	movw	r2, #889	@ 0x379
 800eb04:	4913      	ldr	r1, [pc, #76]	@ (800eb54 <netconn_recv+0xf0>)
 800eb06:	4811      	ldr	r0, [pc, #68]	@ (800eb4c <netconn_recv+0xe8>)
 800eb08:	f00e fe3e 	bl	801d788 <iprintf>

    buf->p = p;
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2200      	movs	r2, #0
 800eb22:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	697a      	ldr	r2, [r7, #20]
 800eb28:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e005      	b.n	800eb3a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800eb2e:	2200      	movs	r2, #0
 800eb30:	6839      	ldr	r1, [r7, #0]
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f7ff fe1a 	bl	800e76c <netconn_recv_data>
 800eb38:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	0801fed8 	.word	0x0801fed8
 800eb48:	080200f0 	.word	0x080200f0
 800eb4c:	0801ff30 	.word	0x0801ff30
 800eb50:	08020110 	.word	0x08020110
 800eb54:	08020188 	.word	0x08020188

0800eb58 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b08c      	sub	sp, #48	@ 0x30
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d109      	bne.n	800eb7c <netconn_send+0x24>
 800eb68:	4b0e      	ldr	r3, [pc, #56]	@ (800eba4 <netconn_send+0x4c>)
 800eb6a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800eb6e:	490e      	ldr	r1, [pc, #56]	@ (800eba8 <netconn_send+0x50>)
 800eb70:	480e      	ldr	r0, [pc, #56]	@ (800ebac <netconn_send+0x54>)
 800eb72:	f00e fe09 	bl	801d788 <iprintf>
 800eb76:	f06f 030f 	mvn.w	r3, #15
 800eb7a:	e00e      	b.n	800eb9a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800eb84:	f107 030c 	add.w	r3, r7, #12
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4809      	ldr	r0, [pc, #36]	@ (800ebb0 <netconn_send+0x58>)
 800eb8c:	f7ff fc26 	bl	800e3dc <netconn_apimsg>
 800eb90:	4603      	mov	r3, r0
 800eb92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800eb96:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3730      	adds	r7, #48	@ 0x30
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	0801fed8 	.word	0x0801fed8
 800eba8:	08020194 	.word	0x08020194
 800ebac:	0801ff30 	.word	0x0801ff30
 800ebb0:	0800ff81 	.word	0x0800ff81

0800ebb4 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b088      	sub	sp, #32
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	607a      	str	r2, [r7, #4]
 800ebc0:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ebca:	78fa      	ldrb	r2, [r7, #3]
 800ebcc:	f107 0110 	add.w	r1, r7, #16
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	2201      	movs	r2, #1
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f000 f805 	bl	800ebe8 <netconn_write_vectors_partly>
 800ebde:	4603      	mov	r3, r0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b092      	sub	sp, #72	@ 0x48
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	60b9      	str	r1, [r7, #8]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	80fb      	strh	r3, [r7, #6]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d109      	bne.n	800ec18 <netconn_write_vectors_partly+0x30>
 800ec04:	4b4e      	ldr	r3, [pc, #312]	@ (800ed40 <netconn_write_vectors_partly+0x158>)
 800ec06:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ec0a:	494e      	ldr	r1, [pc, #312]	@ (800ed44 <netconn_write_vectors_partly+0x15c>)
 800ec0c:	484e      	ldr	r0, [pc, #312]	@ (800ed48 <netconn_write_vectors_partly+0x160>)
 800ec0e:	f00e fdbb 	bl	801d788 <iprintf>
 800ec12:	f06f 030f 	mvn.w	r3, #15
 800ec16:	e08e      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ec20:	2b10      	cmp	r3, #16
 800ec22:	d009      	beq.n	800ec38 <netconn_write_vectors_partly+0x50>
 800ec24:	4b46      	ldr	r3, [pc, #280]	@ (800ed40 <netconn_write_vectors_partly+0x158>)
 800ec26:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800ec2a:	4948      	ldr	r1, [pc, #288]	@ (800ed4c <netconn_write_vectors_partly+0x164>)
 800ec2c:	4846      	ldr	r0, [pc, #280]	@ (800ed48 <netconn_write_vectors_partly+0x160>)
 800ec2e:	f00e fdab 	bl	801d788 <iprintf>
 800ec32:	f06f 0305 	mvn.w	r3, #5
 800ec36:	e07e      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	7f1b      	ldrb	r3, [r3, #28]
 800ec3c:	f003 0302 	and.w	r3, r3, #2
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d104      	bne.n	800ec4e <netconn_write_vectors_partly+0x66>
 800ec44:	797b      	ldrb	r3, [r7, #5]
 800ec46:	f003 0304 	and.w	r3, r3, #4
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <netconn_write_vectors_partly+0x6a>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	e000      	b.n	800ec54 <netconn_write_vectors_partly+0x6c>
 800ec52:	2300      	movs	r3, #0
 800ec54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800ec58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d005      	beq.n	800ec6c <netconn_write_vectors_partly+0x84>
 800ec60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d102      	bne.n	800ec6c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ec66:	f06f 0305 	mvn.w	r3, #5
 800ec6a:	e064      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800ec70:	2300      	movs	r3, #0
 800ec72:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec74:	e015      	b.n	800eca2 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800ec76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec78:	00db      	lsls	r3, r3, #3
 800ec7a:	68ba      	ldr	r2, [r7, #8]
 800ec7c:	4413      	add	r3, r2
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec82:	4413      	add	r3, r2
 800ec84:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800ec86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec88:	00db      	lsls	r3, r3, #3
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d202      	bcs.n	800ec9c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800ec96:	f06f 0305 	mvn.w	r3, #5
 800ec9a:	e04c      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800ec9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec9e:	3301      	adds	r3, #1
 800eca0:	643b      	str	r3, [r7, #64]	@ 0x40
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eca6:	429a      	cmp	r2, r3
 800eca8:	dbe5      	blt.n	800ec76 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800ecaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e040      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800ecb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	da0a      	bge.n	800ecd0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800ecba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800ecc0:	f06f 0305 	mvn.w	r3, #5
 800ecc4:	e037      	b.n	800ed36 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800ecc6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ecca:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800eccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecce:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ecd8:	88fb      	ldrh	r3, [r7, #6]
 800ecda:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ece0:	797b      	ldrb	r3, [r7, #5]
 800ece2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ece6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ecea:	2300      	movs	r3, #0
 800ecec:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ecee:	f107 0314 	add.w	r3, r7, #20
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	4816      	ldr	r0, [pc, #88]	@ (800ed50 <netconn_write_vectors_partly+0x168>)
 800ecf6:	f7ff fb71 	bl	800e3dc <netconn_apimsg>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ed00:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d114      	bne.n	800ed32 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ed08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ed0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed12:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ed14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10a      	bne.n	800ed32 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ed1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d006      	beq.n	800ed32 <netconn_write_vectors_partly+0x14a>
 800ed24:	4b06      	ldr	r3, [pc, #24]	@ (800ed40 <netconn_write_vectors_partly+0x158>)
 800ed26:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ed2a:	490a      	ldr	r1, [pc, #40]	@ (800ed54 <netconn_write_vectors_partly+0x16c>)
 800ed2c:	4806      	ldr	r0, [pc, #24]	@ (800ed48 <netconn_write_vectors_partly+0x160>)
 800ed2e:	f00e fd2b 	bl	801d788 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ed32:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3748      	adds	r7, #72	@ 0x48
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	0801fed8 	.word	0x0801fed8
 800ed44:	080201b0 	.word	0x080201b0
 800ed48:	0801ff30 	.word	0x0801ff30
 800ed4c:	080201cc 	.word	0x080201cc
 800ed50:	0801041d 	.word	0x0801041d
 800ed54:	080201f0 	.word	0x080201f0

0800ed58 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08c      	sub	sp, #48	@ 0x30
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d109      	bne.n	800ed7e <netconn_close_shutdown+0x26>
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eda8 <netconn_close_shutdown+0x50>)
 800ed6c:	f240 4247 	movw	r2, #1095	@ 0x447
 800ed70:	490e      	ldr	r1, [pc, #56]	@ (800edac <netconn_close_shutdown+0x54>)
 800ed72:	480f      	ldr	r0, [pc, #60]	@ (800edb0 <netconn_close_shutdown+0x58>)
 800ed74:	f00e fd08 	bl	801d788 <iprintf>
 800ed78:	f06f 030f 	mvn.w	r3, #15
 800ed7c:	e010      	b.n	800eda0 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ed82:	78fb      	ldrb	r3, [r7, #3]
 800ed84:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ed86:	2329      	movs	r3, #41	@ 0x29
 800ed88:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ed8a:	f107 030c 	add.w	r3, r7, #12
 800ed8e:	4619      	mov	r1, r3
 800ed90:	4808      	ldr	r0, [pc, #32]	@ (800edb4 <netconn_close_shutdown+0x5c>)
 800ed92:	f7ff fb23 	bl	800e3dc <netconn_apimsg>
 800ed96:	4603      	mov	r3, r0
 800ed98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ed9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3730      	adds	r7, #48	@ 0x30
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	0801fed8 	.word	0x0801fed8
 800edac:	08020214 	.word	0x08020214
 800edb0:	0801ff30 	.word	0x0801ff30
 800edb4:	08010535 	.word	0x08010535

0800edb8 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800edc0:	2103      	movs	r1, #3
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f7ff ffc8 	bl	800ed58 <netconn_close_shutdown>
 800edc8:	4603      	mov	r3, r0
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3708      	adds	r7, #8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d101      	bne.n	800ede4 <netconn_err+0x12>
    return ERR_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e00d      	b.n	800ee00 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ede4:	f00d ff5a 	bl	801cc9c <sys_arch_protect>
 800ede8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	7a1b      	ldrb	r3, [r3, #8]
 800edee:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f00d ff5e 	bl	801ccb8 <sys_arch_unprotect>
  return err;
 800edfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4603      	mov	r3, r0
 800ee10:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ee12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee16:	f113 0f0d 	cmn.w	r3, #13
 800ee1a:	d009      	beq.n	800ee30 <lwip_netconn_err_to_msg+0x28>
 800ee1c:	f113 0f0d 	cmn.w	r3, #13
 800ee20:	dc0c      	bgt.n	800ee3c <lwip_netconn_err_to_msg+0x34>
 800ee22:	f113 0f0f 	cmn.w	r3, #15
 800ee26:	d007      	beq.n	800ee38 <lwip_netconn_err_to_msg+0x30>
 800ee28:	f113 0f0e 	cmn.w	r3, #14
 800ee2c:	d002      	beq.n	800ee34 <lwip_netconn_err_to_msg+0x2c>
 800ee2e:	e005      	b.n	800ee3c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ee30:	4b0a      	ldr	r3, [pc, #40]	@ (800ee5c <lwip_netconn_err_to_msg+0x54>)
 800ee32:	e00e      	b.n	800ee52 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ee34:	4b0a      	ldr	r3, [pc, #40]	@ (800ee60 <lwip_netconn_err_to_msg+0x58>)
 800ee36:	e00c      	b.n	800ee52 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ee38:	4b0a      	ldr	r3, [pc, #40]	@ (800ee64 <lwip_netconn_err_to_msg+0x5c>)
 800ee3a:	e00a      	b.n	800ee52 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ee3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d005      	beq.n	800ee50 <lwip_netconn_err_to_msg+0x48>
 800ee44:	4b08      	ldr	r3, [pc, #32]	@ (800ee68 <lwip_netconn_err_to_msg+0x60>)
 800ee46:	227d      	movs	r2, #125	@ 0x7d
 800ee48:	4908      	ldr	r1, [pc, #32]	@ (800ee6c <lwip_netconn_err_to_msg+0x64>)
 800ee4a:	4809      	ldr	r0, [pc, #36]	@ (800ee70 <lwip_netconn_err_to_msg+0x68>)
 800ee4c:	f00e fc9c 	bl	801d788 <iprintf>
      return NULL;
 800ee50:	2300      	movs	r3, #0
  }
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	080235ec 	.word	0x080235ec
 800ee60:	080235ed 	.word	0x080235ed
 800ee64:	080235ee 	.word	0x080235ee
 800ee68:	08020230 	.word	0x08020230
 800ee6c:	08020264 	.word	0x08020264
 800ee70:	08020274 	.word	0x08020274

0800ee74 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d105      	bne.n	800ee90 <lwip_netconn_is_err_msg+0x1c>
 800ee84:	4b12      	ldr	r3, [pc, #72]	@ (800eed0 <lwip_netconn_is_err_msg+0x5c>)
 800ee86:	2285      	movs	r2, #133	@ 0x85
 800ee88:	4912      	ldr	r1, [pc, #72]	@ (800eed4 <lwip_netconn_is_err_msg+0x60>)
 800ee8a:	4813      	ldr	r0, [pc, #76]	@ (800eed8 <lwip_netconn_is_err_msg+0x64>)
 800ee8c:	f00e fc7c 	bl	801d788 <iprintf>

  if (msg == &netconn_aborted) {
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a12      	ldr	r2, [pc, #72]	@ (800eedc <lwip_netconn_is_err_msg+0x68>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d104      	bne.n	800eea2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	22f3      	movs	r2, #243	@ 0xf3
 800ee9c:	701a      	strb	r2, [r3, #0]
    return 1;
 800ee9e:	2301      	movs	r3, #1
 800eea0:	e012      	b.n	800eec8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a0e      	ldr	r2, [pc, #56]	@ (800eee0 <lwip_netconn_is_err_msg+0x6c>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d104      	bne.n	800eeb4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	22f2      	movs	r2, #242	@ 0xf2
 800eeae:	701a      	strb	r2, [r3, #0]
    return 1;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e009      	b.n	800eec8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a0b      	ldr	r2, [pc, #44]	@ (800eee4 <lwip_netconn_is_err_msg+0x70>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d104      	bne.n	800eec6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	22f1      	movs	r2, #241	@ 0xf1
 800eec0:	701a      	strb	r2, [r3, #0]
    return 1;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e000      	b.n	800eec8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	08020230 	.word	0x08020230
 800eed4:	0802029c 	.word	0x0802029c
 800eed8:	08020274 	.word	0x08020274
 800eedc:	080235ec 	.word	0x080235ec
 800eee0:	080235ed 	.word	0x080235ed
 800eee4:	080235ee 	.word	0x080235ee

0800eee8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b088      	sub	sp, #32
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d105      	bne.n	800ef08 <recv_udp+0x20>
 800eefc:	4b34      	ldr	r3, [pc, #208]	@ (800efd0 <recv_udp+0xe8>)
 800eefe:	22e5      	movs	r2, #229	@ 0xe5
 800ef00:	4934      	ldr	r1, [pc, #208]	@ (800efd4 <recv_udp+0xec>)
 800ef02:	4835      	ldr	r0, [pc, #212]	@ (800efd8 <recv_udp+0xf0>)
 800ef04:	f00e fc40 	bl	801d788 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d105      	bne.n	800ef1a <recv_udp+0x32>
 800ef0e:	4b30      	ldr	r3, [pc, #192]	@ (800efd0 <recv_udp+0xe8>)
 800ef10:	22e6      	movs	r2, #230	@ 0xe6
 800ef12:	4932      	ldr	r1, [pc, #200]	@ (800efdc <recv_udp+0xf4>)
 800ef14:	4830      	ldr	r0, [pc, #192]	@ (800efd8 <recv_udp+0xf0>)
 800ef16:	f00e fc37 	bl	801d788 <iprintf>
  conn = (struct netconn *)arg;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d103      	bne.n	800ef2c <recv_udp+0x44>
    pbuf_free(p);
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f004 f86f 	bl	8013008 <pbuf_free>
    return;
 800ef2a:	e04d      	b.n	800efc8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d005      	beq.n	800ef42 <recv_udp+0x5a>
 800ef36:	4b26      	ldr	r3, [pc, #152]	@ (800efd0 <recv_udp+0xe8>)
 800ef38:	22ee      	movs	r2, #238	@ 0xee
 800ef3a:	4929      	ldr	r1, [pc, #164]	@ (800efe0 <recv_udp+0xf8>)
 800ef3c:	4826      	ldr	r0, [pc, #152]	@ (800efd8 <recv_udp+0xf0>)
 800ef3e:	f00e fc23 	bl	801d788 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	3310      	adds	r3, #16
 800ef46:	4618      	mov	r0, r3
 800ef48:	f00d fd8d 	bl	801ca66 <sys_mbox_valid>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d103      	bne.n	800ef5a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f004 f858 	bl	8013008 <pbuf_free>
    return;
 800ef58:	e036      	b.n	800efc8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ef5a:	2006      	movs	r0, #6
 800ef5c:	f003 f93a 	bl	80121d4 <memp_malloc>
 800ef60:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d103      	bne.n	800ef70 <recv_udp+0x88>
    pbuf_free(p);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f004 f84d 	bl	8013008 <pbuf_free>
    return;
 800ef6e:	e02b      	b.n	800efc8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <recv_udp+0xa0>
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	e000      	b.n	800ef8a <recv_udp+0xa2>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	69ba      	ldr	r2, [r7, #24]
 800ef8c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ef92:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	891b      	ldrh	r3, [r3, #8]
 800ef98:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	3310      	adds	r3, #16
 800ef9e:	69b9      	ldr	r1, [r7, #24]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f00d fceb 	bl	801c97c <sys_mbox_trypost>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d003      	beq.n	800efb4 <recv_udp+0xcc>
    netbuf_delete(buf);
 800efac:	69b8      	ldr	r0, [r7, #24]
 800efae:	f001 fb4d 	bl	801064c <netbuf_delete>
    return;
 800efb2:	e009      	b.n	800efc8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d005      	beq.n	800efc8 <recv_udp+0xe0>
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc0:	8afa      	ldrh	r2, [r7, #22]
 800efc2:	2100      	movs	r1, #0
 800efc4:	69f8      	ldr	r0, [r7, #28]
 800efc6:	4798      	blx	r3
  }
}
 800efc8:	3720      	adds	r7, #32
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	08020230 	.word	0x08020230
 800efd4:	080202a8 	.word	0x080202a8
 800efd8:	08020274 	.word	0x08020274
 800efdc:	080202cc 	.word	0x080202cc
 800efe0:	080202ec 	.word	0x080202ec

0800efe4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
 800eff0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d106      	bne.n	800f006 <recv_tcp+0x22>
 800eff8:	4b36      	ldr	r3, [pc, #216]	@ (800f0d4 <recv_tcp+0xf0>)
 800effa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800effe:	4936      	ldr	r1, [pc, #216]	@ (800f0d8 <recv_tcp+0xf4>)
 800f000:	4836      	ldr	r0, [pc, #216]	@ (800f0dc <recv_tcp+0xf8>)
 800f002:	f00e fbc1 	bl	801d788 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d106      	bne.n	800f01a <recv_tcp+0x36>
 800f00c:	4b31      	ldr	r3, [pc, #196]	@ (800f0d4 <recv_tcp+0xf0>)
 800f00e:	f240 122d 	movw	r2, #301	@ 0x12d
 800f012:	4933      	ldr	r1, [pc, #204]	@ (800f0e0 <recv_tcp+0xfc>)
 800f014:	4831      	ldr	r0, [pc, #196]	@ (800f0dc <recv_tcp+0xf8>)
 800f016:	f00e fbb7 	bl	801d788 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f01a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d006      	beq.n	800f030 <recv_tcp+0x4c>
 800f022:	4b2c      	ldr	r3, [pc, #176]	@ (800f0d4 <recv_tcp+0xf0>)
 800f024:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800f028:	492e      	ldr	r1, [pc, #184]	@ (800f0e4 <recv_tcp+0x100>)
 800f02a:	482c      	ldr	r0, [pc, #176]	@ (800f0dc <recv_tcp+0xf8>)
 800f02c:	f00e fbac 	bl	801d788 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d102      	bne.n	800f040 <recv_tcp+0x5c>
    return ERR_VAL;
 800f03a:	f06f 0305 	mvn.w	r3, #5
 800f03e:	e045      	b.n	800f0cc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	429a      	cmp	r2, r3
 800f048:	d006      	beq.n	800f058 <recv_tcp+0x74>
 800f04a:	4b22      	ldr	r3, [pc, #136]	@ (800f0d4 <recv_tcp+0xf0>)
 800f04c:	f240 1235 	movw	r2, #309	@ 0x135
 800f050:	4925      	ldr	r1, [pc, #148]	@ (800f0e8 <recv_tcp+0x104>)
 800f052:	4822      	ldr	r0, [pc, #136]	@ (800f0dc <recv_tcp+0xf8>)
 800f054:	f00e fb98 	bl	801d788 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	3310      	adds	r3, #16
 800f05c:	4618      	mov	r0, r3
 800f05e:	f00d fd02 	bl	801ca66 <sys_mbox_valid>
 800f062:	4603      	mov	r3, r0
 800f064:	2b00      	cmp	r3, #0
 800f066:	d10d      	bne.n	800f084 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d008      	beq.n	800f080 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	891b      	ldrh	r3, [r3, #8]
 800f072:	4619      	mov	r1, r3
 800f074:	68b8      	ldr	r0, [r7, #8]
 800f076:	f004 ffa1 	bl	8013fbc <tcp_recved>
      pbuf_free(p);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f003 ffc4 	bl	8013008 <pbuf_free>
    }
    return ERR_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	e023      	b.n	800f0cc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d005      	beq.n	800f096 <recv_tcp+0xb2>
    msg = p;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	891b      	ldrh	r3, [r3, #8]
 800f092:	83fb      	strh	r3, [r7, #30]
 800f094:	e003      	b.n	800f09e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f096:	4b15      	ldr	r3, [pc, #84]	@ (800f0ec <recv_tcp+0x108>)
 800f098:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	3310      	adds	r3, #16
 800f0a2:	69b9      	ldr	r1, [r7, #24]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f00d fc69 	bl	801c97c <sys_mbox_trypost>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b4:	e00a      	b.n	800f0cc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d005      	beq.n	800f0ca <recv_tcp+0xe6>
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0c2:	8bfa      	ldrh	r2, [r7, #30]
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	6978      	ldr	r0, [r7, #20]
 800f0c8:	4798      	blx	r3
  }

  return ERR_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3720      	adds	r7, #32
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	08020230 	.word	0x08020230
 800f0d8:	0802030c 	.word	0x0802030c
 800f0dc:	08020274 	.word	0x08020274
 800f0e0:	08020330 	.word	0x08020330
 800f0e4:	08020350 	.word	0x08020350
 800f0e8:	08020368 	.word	0x08020368
 800f0ec:	080235ee 	.word	0x080235ee

0800f0f0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d106      	bne.n	800f112 <poll_tcp+0x22>
 800f104:	4b29      	ldr	r3, [pc, #164]	@ (800f1ac <poll_tcp+0xbc>)
 800f106:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800f10a:	4929      	ldr	r1, [pc, #164]	@ (800f1b0 <poll_tcp+0xc0>)
 800f10c:	4829      	ldr	r0, [pc, #164]	@ (800f1b4 <poll_tcp+0xc4>)
 800f10e:	f00e fb3b 	bl	801d788 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	785b      	ldrb	r3, [r3, #1]
 800f116:	2b01      	cmp	r3, #1
 800f118:	d104      	bne.n	800f124 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f11a:	2101      	movs	r1, #1
 800f11c:	68f8      	ldr	r0, [r7, #12]
 800f11e:	f000 ffb1 	bl	8010084 <lwip_netconn_do_writemore>
 800f122:	e016      	b.n	800f152 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	785b      	ldrb	r3, [r3, #1]
 800f128:	2b04      	cmp	r3, #4
 800f12a:	d112      	bne.n	800f152 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00a      	beq.n	800f14a <poll_tcp+0x5a>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a1b      	ldr	r3, [r3, #32]
 800f138:	7a5b      	ldrb	r3, [r3, #9]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d005      	beq.n	800f14a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	7a5a      	ldrb	r2, [r3, #9]
 800f144:	3a01      	subs	r2, #1
 800f146:	b2d2      	uxtb	r2, r2
 800f148:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f14a:	2101      	movs	r1, #1
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f000 fbf7 	bl	800f940 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	7f1b      	ldrb	r3, [r3, #28]
 800f156:	f003 0310 	and.w	r3, r3, #16
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d021      	beq.n	800f1a2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d01d      	beq.n	800f1a2 <poll_tcp+0xb2>
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f16e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800f172:	d316      	bcc.n	800f1a2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d810      	bhi.n	800f1a2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	7f1b      	ldrb	r3, [r3, #28]
 800f184:	f023 0310 	bic.w	r3, r3, #16
 800f188:	b2da      	uxtb	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f192:	2b00      	cmp	r3, #0
 800f194:	d005      	beq.n	800f1a2 <poll_tcp+0xb2>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f19a:	2200      	movs	r2, #0
 800f19c:	2102      	movs	r1, #2
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f1a2:	2300      	movs	r3, #0
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	08020230 	.word	0x08020230
 800f1b0:	08020388 	.word	0x08020388
 800f1b4:	08020274 	.word	0x08020274

0800f1b8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d106      	bne.n	800f1de <sent_tcp+0x26>
 800f1d0:	4b20      	ldr	r3, [pc, #128]	@ (800f254 <sent_tcp+0x9c>)
 800f1d2:	f240 1293 	movw	r2, #403	@ 0x193
 800f1d6:	4920      	ldr	r1, [pc, #128]	@ (800f258 <sent_tcp+0xa0>)
 800f1d8:	4820      	ldr	r0, [pc, #128]	@ (800f25c <sent_tcp+0xa4>)
 800f1da:	f00e fad5 	bl	801d788 <iprintf>

  if (conn) {
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d032      	beq.n	800f24a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	785b      	ldrb	r3, [r3, #1]
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d104      	bne.n	800f1f6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f1ec:	2101      	movs	r1, #1
 800f1ee:	6978      	ldr	r0, [r7, #20]
 800f1f0:	f000 ff48 	bl	8010084 <lwip_netconn_do_writemore>
 800f1f4:	e007      	b.n	800f206 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	785b      	ldrb	r3, [r3, #1]
 800f1fa:	2b04      	cmp	r3, #4
 800f1fc:	d103      	bne.n	800f206 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f1fe:	2101      	movs	r1, #1
 800f200:	6978      	ldr	r0, [r7, #20]
 800f202:	f000 fb9d 	bl	800f940 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d01d      	beq.n	800f24a <sent_tcp+0x92>
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f216:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800f21a:	d316      	bcc.n	800f24a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f224:	2b04      	cmp	r3, #4
 800f226:	d810      	bhi.n	800f24a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	7f1b      	ldrb	r3, [r3, #28]
 800f22c:	f023 0310 	bic.w	r3, r3, #16
 800f230:	b2da      	uxtb	r2, r3
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d005      	beq.n	800f24a <sent_tcp+0x92>
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f242:	88fa      	ldrh	r2, [r7, #6]
 800f244:	2102      	movs	r1, #2
 800f246:	6978      	ldr	r0, [r7, #20]
 800f248:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3718      	adds	r7, #24
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	08020230 	.word	0x08020230
 800f258:	08020388 	.word	0x08020388
 800f25c:	08020274 	.word	0x08020274

0800f260 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b088      	sub	sp, #32
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	460b      	mov	r3, r1
 800f26a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f270:	69fb      	ldr	r3, [r7, #28]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d106      	bne.n	800f284 <err_tcp+0x24>
 800f276:	4b5f      	ldr	r3, [pc, #380]	@ (800f3f4 <err_tcp+0x194>)
 800f278:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f27c:	495e      	ldr	r1, [pc, #376]	@ (800f3f8 <err_tcp+0x198>)
 800f27e:	485f      	ldr	r0, [pc, #380]	@ (800f3fc <err_tcp+0x19c>)
 800f280:	f00e fa82 	bl	801d788 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f284:	f00d fd0a 	bl	801cc9c <sys_arch_protect>
 800f288:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	2200      	movs	r2, #0
 800f28e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	78fa      	ldrb	r2, [r7, #3]
 800f294:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	7f1b      	ldrb	r3, [r3, #28]
 800f29a:	f043 0301 	orr.w	r3, r3, #1
 800f29e:	b2da      	uxtb	r2, r3
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	785b      	ldrb	r3, [r3, #1]
 800f2a8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f2b0:	69b8      	ldr	r0, [r7, #24]
 800f2b2:	f00d fd01 	bl	801ccb8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d005      	beq.n	800f2ca <err_tcp+0x6a>
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	2104      	movs	r1, #4
 800f2c6:	69f8      	ldr	r0, [r7, #28]
 800f2c8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d005      	beq.n	800f2de <err_tcp+0x7e>
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	2100      	movs	r1, #0
 800f2da:	69f8      	ldr	r0, [r7, #28]
 800f2dc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d005      	beq.n	800f2f2 <err_tcp+0x92>
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	2102      	movs	r1, #2
 800f2ee:	69f8      	ldr	r0, [r7, #28]
 800f2f0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f2f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7ff fd86 	bl	800ee08 <lwip_netconn_err_to_msg>
 800f2fc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	3310      	adds	r3, #16
 800f302:	4618      	mov	r0, r3
 800f304:	f00d fbaf 	bl	801ca66 <sys_mbox_valid>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d005      	beq.n	800f31a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	3310      	adds	r3, #16
 800f312:	6939      	ldr	r1, [r7, #16]
 800f314:	4618      	mov	r0, r3
 800f316:	f00d fb31 	bl	801c97c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	3314      	adds	r3, #20
 800f31e:	4618      	mov	r0, r3
 800f320:	f00d fba1 	bl	801ca66 <sys_mbox_valid>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d005      	beq.n	800f336 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	3314      	adds	r3, #20
 800f32e:	6939      	ldr	r1, [r7, #16]
 800f330:	4618      	mov	r0, r3
 800f332:	f00d fb23 	bl	801c97c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d005      	beq.n	800f348 <err_tcp+0xe8>
 800f33c:	7dfb      	ldrb	r3, [r7, #23]
 800f33e:	2b04      	cmp	r3, #4
 800f340:	d002      	beq.n	800f348 <err_tcp+0xe8>
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	2b03      	cmp	r3, #3
 800f346:	d143      	bne.n	800f3d0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	7f1b      	ldrb	r3, [r3, #28]
 800f34c:	f003 0304 	and.w	r3, r3, #4
 800f350:	2b00      	cmp	r3, #0
 800f352:	bf14      	ite	ne
 800f354:	2301      	movne	r3, #1
 800f356:	2300      	moveq	r3, #0
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	7f1b      	ldrb	r3, [r3, #28]
 800f360:	f023 0304 	bic.w	r3, r3, #4
 800f364:	b2da      	uxtb	r2, r3
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d13b      	bne.n	800f3e8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d106      	bne.n	800f386 <err_tcp+0x126>
 800f378:	4b1e      	ldr	r3, [pc, #120]	@ (800f3f4 <err_tcp+0x194>)
 800f37a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f37e:	4920      	ldr	r1, [pc, #128]	@ (800f400 <err_tcp+0x1a0>)
 800f380:	481e      	ldr	r0, [pc, #120]	@ (800f3fc <err_tcp+0x19c>)
 800f382:	f00e fa01 	bl	801d788 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f386:	7dfb      	ldrb	r3, [r7, #23]
 800f388:	2b04      	cmp	r3, #4
 800f38a:	d104      	bne.n	800f396 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	6a1b      	ldr	r3, [r3, #32]
 800f390:	2200      	movs	r2, #0
 800f392:	711a      	strb	r2, [r3, #4]
 800f394:	e003      	b.n	800f39e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	6a1b      	ldr	r3, [r3, #32]
 800f39a:	78fa      	ldrb	r2, [r7, #3]
 800f39c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	330c      	adds	r3, #12
 800f3a6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f3a8:	68b8      	ldr	r0, [r7, #8]
 800f3aa:	f00d fbed 	bl	801cb88 <sys_sem_valid>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d106      	bne.n	800f3c2 <err_tcp+0x162>
 800f3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800f3f4 <err_tcp+0x194>)
 800f3b6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800f3ba:	4912      	ldr	r1, [pc, #72]	@ (800f404 <err_tcp+0x1a4>)
 800f3bc:	480f      	ldr	r0, [pc, #60]	@ (800f3fc <err_tcp+0x19c>)
 800f3be:	f00e f9e3 	bl	801d788 <iprintf>
      conn->current_msg = NULL;
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f3c8:	68b8      	ldr	r0, [r7, #8]
 800f3ca:	f00d fbc3 	bl	801cb54 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f3ce:	e00b      	b.n	800f3e8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d008      	beq.n	800f3ea <err_tcp+0x18a>
 800f3d8:	4b06      	ldr	r3, [pc, #24]	@ (800f3f4 <err_tcp+0x194>)
 800f3da:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800f3de:	490a      	ldr	r1, [pc, #40]	@ (800f408 <err_tcp+0x1a8>)
 800f3e0:	4806      	ldr	r0, [pc, #24]	@ (800f3fc <err_tcp+0x19c>)
 800f3e2:	f00e f9d1 	bl	801d788 <iprintf>
  }
}
 800f3e6:	e000      	b.n	800f3ea <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f3e8:	bf00      	nop
}
 800f3ea:	bf00      	nop
 800f3ec:	3720      	adds	r7, #32
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	08020230 	.word	0x08020230
 800f3f8:	08020388 	.word	0x08020388
 800f3fc:	08020274 	.word	0x08020274
 800f400:	08020398 	.word	0x08020398
 800f404:	080203b4 	.word	0x080203b4
 800f408:	080203d0 	.word	0x080203d0

0800f40c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f41a:	6879      	ldr	r1, [r7, #4]
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f005 fcb3 	bl	8014d88 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f422:	490a      	ldr	r1, [pc, #40]	@ (800f44c <setup_tcp+0x40>)
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f005 fcc1 	bl	8014dac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f42a:	4909      	ldr	r1, [pc, #36]	@ (800f450 <setup_tcp+0x44>)
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f005 fcdf 	bl	8014df0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f432:	2202      	movs	r2, #2
 800f434:	4907      	ldr	r1, [pc, #28]	@ (800f454 <setup_tcp+0x48>)
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f005 fd36 	bl	8014ea8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f43c:	4906      	ldr	r1, [pc, #24]	@ (800f458 <setup_tcp+0x4c>)
 800f43e:	68f8      	ldr	r0, [r7, #12]
 800f440:	f005 fcf8 	bl	8014e34 <tcp_err>
}
 800f444:	bf00      	nop
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	0800efe5 	.word	0x0800efe5
 800f450:	0800f1b9 	.word	0x0800f1b9
 800f454:	0800f0f1 	.word	0x0800f0f1
 800f458:	0800f261 	.word	0x0800f261

0800f45c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f45c:	b590      	push	{r4, r7, lr}
 800f45e:	b089      	sub	sp, #36	@ 0x24
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	4613      	mov	r3, r2
 800f468:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d102      	bne.n	800f47a <accept_function+0x1e>
    return ERR_VAL;
 800f474:	f06f 0305 	mvn.w	r3, #5
 800f478:	e0a1      	b.n	800f5be <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	3314      	adds	r3, #20
 800f47e:	4618      	mov	r0, r3
 800f480:	f00d faf1 	bl	801ca66 <sys_mbox_valid>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d102      	bne.n	800f490 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f48a:	f06f 0305 	mvn.w	r3, #5
 800f48e:	e096      	b.n	800f5be <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d11b      	bne.n	800f4ce <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f103 0414 	add.w	r4, r3, #20
 800f49c:	f06f 000c 	mvn.w	r0, #12
 800f4a0:	f7ff fcb2 	bl	800ee08 <lwip_netconn_err_to_msg>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f00d fa67 	bl	801c97c <sys_mbox_trypost>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d109      	bne.n	800f4c8 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d005      	beq.n	800f4c8 <accept_function+0x6c>
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	69f8      	ldr	r0, [r7, #28]
 800f4c6:	4798      	blx	r3
    }
    return ERR_VAL;
 800f4c8:	f06f 0305 	mvn.w	r3, #5
 800f4cc:	e077      	b.n	800f5be <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d006      	beq.n	800f4e4 <accept_function+0x88>
 800f4d6:	4b3c      	ldr	r3, [pc, #240]	@ (800f5c8 <accept_function+0x16c>)
 800f4d8:	f240 222a 	movw	r2, #554	@ 0x22a
 800f4dc:	493b      	ldr	r1, [pc, #236]	@ (800f5cc <accept_function+0x170>)
 800f4de:	483c      	ldr	r0, [pc, #240]	@ (800f5d0 <accept_function+0x174>)
 800f4e0:	f00e f952 	bl	801d788 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	781a      	ldrb	r2, [r3, #0]
 800f4e8:	69fb      	ldr	r3, [r7, #28]
 800f4ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4610      	mov	r0, r2
 800f4f0:	f000 f8f0 	bl	800f6d4 <netconn_alloc>
 800f4f4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d11b      	bne.n	800f534 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	f103 0414 	add.w	r4, r3, #20
 800f502:	f06f 000c 	mvn.w	r0, #12
 800f506:	f7ff fc7f 	bl	800ee08 <lwip_netconn_err_to_msg>
 800f50a:	4603      	mov	r3, r0
 800f50c:	4619      	mov	r1, r3
 800f50e:	4620      	mov	r0, r4
 800f510:	f00d fa34 	bl	801c97c <sys_mbox_trypost>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d109      	bne.n	800f52e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d005      	beq.n	800f52e <accept_function+0xd2>
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f526:	2200      	movs	r2, #0
 800f528:	2100      	movs	r1, #0
 800f52a:	69f8      	ldr	r0, [r7, #28]
 800f52c:	4798      	blx	r3
    }
    return ERR_MEM;
 800f52e:	f04f 33ff 	mov.w	r3, #4294967295
 800f532:	e044      	b.n	800f5be <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	68ba      	ldr	r2, [r7, #8]
 800f538:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f53a:	69b8      	ldr	r0, [r7, #24]
 800f53c:	f7ff ff66 	bl	800f40c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	3314      	adds	r3, #20
 800f544:	69b9      	ldr	r1, [r7, #24]
 800f546:	4618      	mov	r0, r3
 800f548:	f00d fa18 	bl	801c97c <sys_mbox_trypost>
 800f54c:	4603      	mov	r3, r0
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d02a      	beq.n	800f5a8 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f558:	2100      	movs	r1, #0
 800f55a:	6978      	ldr	r0, [r7, #20]
 800f55c:	f005 fc14 	bl	8014d88 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f560:	2100      	movs	r1, #0
 800f562:	6978      	ldr	r0, [r7, #20]
 800f564:	f005 fc22 	bl	8014dac <tcp_recv>
    tcp_sent(pcb, NULL);
 800f568:	2100      	movs	r1, #0
 800f56a:	6978      	ldr	r0, [r7, #20]
 800f56c:	f005 fc40 	bl	8014df0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f570:	2200      	movs	r2, #0
 800f572:	2100      	movs	r1, #0
 800f574:	6978      	ldr	r0, [r7, #20]
 800f576:	f005 fc97 	bl	8014ea8 <tcp_poll>
    tcp_err(pcb, NULL);
 800f57a:	2100      	movs	r1, #0
 800f57c:	6978      	ldr	r0, [r7, #20]
 800f57e:	f005 fc59 	bl	8014e34 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	2200      	movs	r2, #0
 800f586:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	3310      	adds	r3, #16
 800f58c:	4618      	mov	r0, r3
 800f58e:	f00d f9e3 	bl	801c958 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	3310      	adds	r3, #16
 800f596:	4618      	mov	r0, r3
 800f598:	f00d fa76 	bl	801ca88 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f59c:	69b8      	ldr	r0, [r7, #24]
 800f59e:	f000 f907 	bl	800f7b0 <netconn_free>
    return ERR_MEM;
 800f5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a6:	e00a      	b.n	800f5be <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d005      	beq.n	800f5bc <accept_function+0x160>
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	2100      	movs	r1, #0
 800f5b8:	69f8      	ldr	r0, [r7, #28]
 800f5ba:	4798      	blx	r3
  }

  return ERR_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3724      	adds	r7, #36	@ 0x24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd90      	pop	{r4, r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	08020230 	.word	0x08020230
 800f5cc:	080203ec 	.word	0x080203ec
 800f5d0:	08020274 	.word	0x08020274

0800f5d4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <pcb_new+0x24>
 800f5ea:	4b2b      	ldr	r3, [pc, #172]	@ (800f698 <pcb_new+0xc4>)
 800f5ec:	f240 2265 	movw	r2, #613	@ 0x265
 800f5f0:	492a      	ldr	r1, [pc, #168]	@ (800f69c <pcb_new+0xc8>)
 800f5f2:	482b      	ldr	r0, [pc, #172]	@ (800f6a0 <pcb_new+0xcc>)
 800f5f4:	f00e f8c8 	bl	801d788 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f602:	2b10      	cmp	r3, #16
 800f604:	d022      	beq.n	800f64c <pcb_new+0x78>
 800f606:	2b20      	cmp	r3, #32
 800f608:	d133      	bne.n	800f672 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681c      	ldr	r4, [r3, #0]
 800f60e:	7bfb      	ldrb	r3, [r7, #15]
 800f610:	4618      	mov	r0, r3
 800f612:	f00a fe7c 	bl	801a30e <udp_new_ip_type>
 800f616:	4603      	mov	r3, r0
 800f618:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d02a      	beq.n	800f67a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b22      	cmp	r3, #34	@ 0x22
 800f62c:	d104      	bne.n	800f638 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	6858      	ldr	r0, [r3, #4]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	461a      	mov	r2, r3
 800f644:	4917      	ldr	r1, [pc, #92]	@ (800f6a4 <pcb_new+0xd0>)
 800f646:	f00a fde9 	bl	801a21c <udp_recv>
      }
      break;
 800f64a:	e016      	b.n	800f67a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681c      	ldr	r4, [r3, #0]
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	4618      	mov	r0, r3
 800f654:	f005 fb8a 	bl	8014d6c <tcp_new_ip_type>
 800f658:	4603      	mov	r3, r0
 800f65a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00b      	beq.n	800f67e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7ff fece 	bl	800f40c <setup_tcp>
      }
      break;
 800f670:	e005      	b.n	800f67e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	22fa      	movs	r2, #250	@ 0xfa
 800f676:	711a      	strb	r2, [r3, #4]
      return;
 800f678:	e00a      	b.n	800f690 <pcb_new+0xbc>
      break;
 800f67a:	bf00      	nop
 800f67c:	e000      	b.n	800f680 <pcb_new+0xac>
      break;
 800f67e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d102      	bne.n	800f690 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	22ff      	movs	r2, #255	@ 0xff
 800f68e:	711a      	strb	r2, [r3, #4]
  }
}
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	bd90      	pop	{r4, r7, pc}
 800f696:	bf00      	nop
 800f698:	08020230 	.word	0x08020230
 800f69c:	08020414 	.word	0x08020414
 800f6a0:	08020274 	.word	0x08020274
 800f6a4:	0800eee9 	.word	0x0800eee9

0800f6a8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d102      	bne.n	800f6ca <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7ff ff85 	bl	800f5d4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f6ca:	bf00      	nop
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	4603      	mov	r3, r0
 800f6dc:	6039      	str	r1, [r7, #0]
 800f6de:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f6e4:	2007      	movs	r0, #7
 800f6e6:	f002 fd75 	bl	80121d4 <memp_malloc>
 800f6ea:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d101      	bne.n	800f6f6 <netconn_alloc+0x22>
    return NULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e052      	b.n	800f79c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	79fa      	ldrb	r2, [r7, #7]
 800f700:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2200      	movs	r2, #0
 800f706:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f708:	79fb      	ldrb	r3, [r7, #7]
 800f70a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f70e:	2b10      	cmp	r3, #16
 800f710:	d004      	beq.n	800f71c <netconn_alloc+0x48>
 800f712:	2b20      	cmp	r3, #32
 800f714:	d105      	bne.n	800f722 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f716:	2306      	movs	r3, #6
 800f718:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f71a:	e00a      	b.n	800f732 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f71c:	2306      	movs	r3, #6
 800f71e:	617b      	str	r3, [r7, #20]
      break;
 800f720:	e007      	b.n	800f732 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f722:	4b20      	ldr	r3, [pc, #128]	@ (800f7a4 <netconn_alloc+0xd0>)
 800f724:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800f728:	491f      	ldr	r1, [pc, #124]	@ (800f7a8 <netconn_alloc+0xd4>)
 800f72a:	4820      	ldr	r0, [pc, #128]	@ (800f7ac <netconn_alloc+0xd8>)
 800f72c:	f00e f82c 	bl	801d788 <iprintf>
      goto free_and_return;
 800f730:	e02f      	b.n	800f792 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3310      	adds	r3, #16
 800f736:	6979      	ldr	r1, [r7, #20]
 800f738:	4618      	mov	r0, r3
 800f73a:	f00d f8eb 	bl	801c914 <sys_mbox_new>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d125      	bne.n	800f790 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	330c      	adds	r3, #12
 800f748:	2100      	movs	r1, #0
 800f74a:	4618      	mov	r0, r3
 800f74c:	f00d f9a9 	bl	801caa2 <sys_sem_new>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d005      	beq.n	800f762 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3310      	adds	r3, #16
 800f75a:	4618      	mov	r0, r3
 800f75c:	f00d f8fc 	bl	801c958 <sys_mbox_free>
    goto free_and_return;
 800f760:	e017      	b.n	800f792 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	3314      	adds	r3, #20
 800f766:	4618      	mov	r0, r3
 800f768:	f00d f98e 	bl	801ca88 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2200      	movs	r2, #0
 800f770:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	683a      	ldr	r2, [r7, #0]
 800f77e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2200      	movs	r2, #0
 800f784:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	7cfa      	ldrb	r2, [r7, #19]
 800f78a:	771a      	strb	r2, [r3, #28]
  return conn;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	e005      	b.n	800f79c <netconn_alloc+0xc8>
    goto free_and_return;
 800f790:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f792:	68f9      	ldr	r1, [r7, #12]
 800f794:	2007      	movs	r0, #7
 800f796:	f002 fd93 	bl	80122c0 <memp_free>
  return NULL;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	08020230 	.word	0x08020230
 800f7a8:	08020434 	.word	0x08020434
 800f7ac:	08020274 	.word	0x08020274

0800f7b0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d006      	beq.n	800f7ce <netconn_free+0x1e>
 800f7c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f830 <netconn_free+0x80>)
 800f7c2:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f7c6:	491b      	ldr	r1, [pc, #108]	@ (800f834 <netconn_free+0x84>)
 800f7c8:	481b      	ldr	r0, [pc, #108]	@ (800f838 <netconn_free+0x88>)
 800f7ca:	f00d ffdd 	bl	801d788 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3310      	adds	r3, #16
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f00d f947 	bl	801ca66 <sys_mbox_valid>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d006      	beq.n	800f7ec <netconn_free+0x3c>
 800f7de:	4b14      	ldr	r3, [pc, #80]	@ (800f830 <netconn_free+0x80>)
 800f7e0:	f240 3223 	movw	r2, #803	@ 0x323
 800f7e4:	4915      	ldr	r1, [pc, #84]	@ (800f83c <netconn_free+0x8c>)
 800f7e6:	4814      	ldr	r0, [pc, #80]	@ (800f838 <netconn_free+0x88>)
 800f7e8:	f00d ffce 	bl	801d788 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	3314      	adds	r3, #20
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f00d f938 	bl	801ca66 <sys_mbox_valid>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d006      	beq.n	800f80a <netconn_free+0x5a>
 800f7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800f830 <netconn_free+0x80>)
 800f7fe:	f240 3226 	movw	r2, #806	@ 0x326
 800f802:	490f      	ldr	r1, [pc, #60]	@ (800f840 <netconn_free+0x90>)
 800f804:	480c      	ldr	r0, [pc, #48]	@ (800f838 <netconn_free+0x88>)
 800f806:	f00d ffbf 	bl	801d788 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	330c      	adds	r3, #12
 800f80e:	4618      	mov	r0, r3
 800f810:	f00d f9ad 	bl	801cb6e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	330c      	adds	r3, #12
 800f818:	4618      	mov	r0, r3
 800f81a:	f00d f9c6 	bl	801cbaa <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	2007      	movs	r0, #7
 800f822:	f002 fd4d 	bl	80122c0 <memp_free>
}
 800f826:	bf00      	nop
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop
 800f830:	08020230 	.word	0x08020230
 800f834:	0802045c 	.word	0x0802045c
 800f838:	08020274 	.word	0x08020274
 800f83c:	0802048c 	.word	0x0802048c
 800f840:	080204c8 	.word	0x080204c8

0800f844 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	3310      	adds	r3, #16
 800f850:	4618      	mov	r0, r3
 800f852:	f00d f908 	bl	801ca66 <sys_mbox_valid>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d02f      	beq.n	800f8bc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f85c:	e018      	b.n	800f890 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f866:	2b10      	cmp	r3, #16
 800f868:	d10e      	bne.n	800f888 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	f107 020f 	add.w	r2, r7, #15
 800f870:	4611      	mov	r1, r2
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff fafe 	bl	800ee74 <lwip_netconn_is_err_msg>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d108      	bne.n	800f890 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	4618      	mov	r0, r3
 800f882:	f003 fbc1 	bl	8013008 <pbuf_free>
 800f886:	e003      	b.n	800f890 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 fede 	bl	801064c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3310      	adds	r3, #16
 800f894:	f107 0210 	add.w	r2, r7, #16
 800f898:	4611      	mov	r1, r2
 800f89a:	4618      	mov	r0, r3
 800f89c:	f00d f8c7 	bl	801ca2e <sys_arch_mbox_tryfetch>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a6:	d1da      	bne.n	800f85e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3310      	adds	r3, #16
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f00d f853 	bl	801c958 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	3310      	adds	r3, #16
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f00d f8e6 	bl	801ca88 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	3314      	adds	r3, #20
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f00d f8d0 	bl	801ca66 <sys_mbox_valid>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d034      	beq.n	800f936 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f8cc:	e01d      	b.n	800f90a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f107 020e 	add.w	r2, r7, #14
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff facc 	bl	800ee74 <lwip_netconn_is_err_msg>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d113      	bne.n	800f90a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f8e6:	6978      	ldr	r0, [r7, #20]
 800f8e8:	f7ff ffac 	bl	800f844 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d007      	beq.n	800f904 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f004 f985 	bl	8013c08 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2200      	movs	r2, #0
 800f902:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f904:	6978      	ldr	r0, [r7, #20]
 800f906:	f7ff ff53 	bl	800f7b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3314      	adds	r3, #20
 800f90e:	f107 0210 	add.w	r2, r7, #16
 800f912:	4611      	mov	r1, r2
 800f914:	4618      	mov	r0, r3
 800f916:	f00d f88a 	bl	801ca2e <sys_arch_mbox_tryfetch>
 800f91a:	4603      	mov	r3, r0
 800f91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f920:	d1d5      	bne.n	800f8ce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	3314      	adds	r3, #20
 800f926:	4618      	mov	r0, r3
 800f928:	f00d f816 	bl	801c958 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	3314      	adds	r3, #20
 800f930:	4618      	mov	r0, r3
 800f932:	f00d f8a9 	bl	801ca88 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f936:	bf00      	nop
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
	...

0800f940 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f94c:	2300      	movs	r3, #0
 800f94e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <lwip_netconn_do_close_internal+0x24>
 800f956:	4b87      	ldr	r3, [pc, #540]	@ (800fb74 <lwip_netconn_do_close_internal+0x234>)
 800f958:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f95c:	4986      	ldr	r1, [pc, #536]	@ (800fb78 <lwip_netconn_do_close_internal+0x238>)
 800f95e:	4887      	ldr	r0, [pc, #540]	@ (800fb7c <lwip_netconn_do_close_internal+0x23c>)
 800f960:	f00d ff12 	bl	801d788 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f96c:	2b10      	cmp	r3, #16
 800f96e:	d006      	beq.n	800f97e <lwip_netconn_do_close_internal+0x3e>
 800f970:	4b80      	ldr	r3, [pc, #512]	@ (800fb74 <lwip_netconn_do_close_internal+0x234>)
 800f972:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f976:	4982      	ldr	r1, [pc, #520]	@ (800fb80 <lwip_netconn_do_close_internal+0x240>)
 800f978:	4880      	ldr	r0, [pc, #512]	@ (800fb7c <lwip_netconn_do_close_internal+0x23c>)
 800f97a:	f00d ff05 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	785b      	ldrb	r3, [r3, #1]
 800f982:	2b04      	cmp	r3, #4
 800f984:	d006      	beq.n	800f994 <lwip_netconn_do_close_internal+0x54>
 800f986:	4b7b      	ldr	r3, [pc, #492]	@ (800fb74 <lwip_netconn_do_close_internal+0x234>)
 800f988:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f98c:	497d      	ldr	r1, [pc, #500]	@ (800fb84 <lwip_netconn_do_close_internal+0x244>)
 800f98e:	487b      	ldr	r0, [pc, #492]	@ (800fb7c <lwip_netconn_do_close_internal+0x23c>)
 800f990:	f00d fefa 	bl	801d788 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d106      	bne.n	800f9aa <lwip_netconn_do_close_internal+0x6a>
 800f99c:	4b75      	ldr	r3, [pc, #468]	@ (800fb74 <lwip_netconn_do_close_internal+0x234>)
 800f99e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f9a2:	4979      	ldr	r1, [pc, #484]	@ (800fb88 <lwip_netconn_do_close_internal+0x248>)
 800f9a4:	4875      	ldr	r0, [pc, #468]	@ (800fb7c <lwip_netconn_do_close_internal+0x23c>)
 800f9a6:	f00d feef 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <lwip_netconn_do_close_internal+0x80>
 800f9b2:	4b70      	ldr	r3, [pc, #448]	@ (800fb74 <lwip_netconn_do_close_internal+0x234>)
 800f9b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f9b8:	4974      	ldr	r1, [pc, #464]	@ (800fb8c <lwip_netconn_do_close_internal+0x24c>)
 800f9ba:	4870      	ldr	r0, [pc, #448]	@ (800fb7c <lwip_netconn_do_close_internal+0x23c>)
 800f9bc:	f00d fee4 	bl	801d788 <iprintf>

  tpcb = conn->pcb.tcp;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	7a1b      	ldrb	r3, [r3, #8]
 800f9cc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f9ce:	7bfb      	ldrb	r3, [r7, #15]
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
 800f9d8:	f003 0302 	and.w	r3, r3, #2
 800f9dc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	d102      	bne.n	800f9ea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	75bb      	strb	r3, [r7, #22]
 800f9e8:	e01f      	b.n	800fa2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f9ea:	7bbb      	ldrb	r3, [r7, #14]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00e      	beq.n	800fa0e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f9f4:	2b05      	cmp	r3, #5
 800f9f6:	d007      	beq.n	800fa08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f9fc:	2b06      	cmp	r3, #6
 800f9fe:	d003      	beq.n	800fa08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fa04:	2b08      	cmp	r3, #8
 800fa06:	d102      	bne.n	800fa0e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	75bb      	strb	r3, [r7, #22]
 800fa0c:	e00d      	b.n	800fa2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fa0e:	7b7b      	ldrb	r3, [r7, #13]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d008      	beq.n	800fa26 <lwip_netconn_do_close_internal+0xe6>
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	8b5b      	ldrh	r3, [r3, #26]
 800fa18:	f003 0310 	and.w	r3, r3, #16
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fa20:	2301      	movs	r3, #1
 800fa22:	75bb      	strb	r3, [r7, #22]
 800fa24:	e001      	b.n	800fa2a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fa2a:	7dbb      	ldrb	r3, [r7, #22]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fa30:	2100      	movs	r1, #0
 800fa32:	6938      	ldr	r0, [r7, #16]
 800fa34:	f005 f9a8 	bl	8014d88 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	7d1b      	ldrb	r3, [r3, #20]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d104      	bne.n	800fa4a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fa40:	2100      	movs	r1, #0
 800fa42:	6938      	ldr	r0, [r7, #16]
 800fa44:	f005 fa18 	bl	8014e78 <tcp_accept>
 800fa48:	e01d      	b.n	800fa86 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fa4a:	7bbb      	ldrb	r3, [r7, #14]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d007      	beq.n	800fa60 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fa50:	2100      	movs	r1, #0
 800fa52:	6938      	ldr	r0, [r7, #16]
 800fa54:	f005 f9aa 	bl	8014dac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fa58:	2100      	movs	r1, #0
 800fa5a:	6938      	ldr	r0, [r7, #16]
 800fa5c:	f005 fa0c 	bl	8014e78 <tcp_accept>
    }
    if (shut_tx) {
 800fa60:	7b7b      	ldrb	r3, [r7, #13]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d003      	beq.n	800fa6e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fa66:	2100      	movs	r1, #0
 800fa68:	6938      	ldr	r0, [r7, #16]
 800fa6a:	f005 f9c1 	bl	8014df0 <tcp_sent>
    }
    if (shut_close) {
 800fa6e:	7dbb      	ldrb	r3, [r7, #22]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d008      	beq.n	800fa86 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fa74:	2200      	movs	r2, #0
 800fa76:	2100      	movs	r1, #0
 800fa78:	6938      	ldr	r0, [r7, #16]
 800fa7a:	f005 fa15 	bl	8014ea8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800fa7e:	2100      	movs	r1, #0
 800fa80:	6938      	ldr	r0, [r7, #16]
 800fa82:	f005 f9d7 	bl	8014e34 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fa86:	7dbb      	ldrb	r3, [r7, #22]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d005      	beq.n	800fa98 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fa8c:	6938      	ldr	r0, [r7, #16]
 800fa8e:	f003 ff75 	bl	801397c <tcp_close>
 800fa92:	4603      	mov	r3, r0
 800fa94:	75fb      	strb	r3, [r7, #23]
 800fa96:	e007      	b.n	800faa8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	7b7a      	ldrb	r2, [r7, #13]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	6938      	ldr	r0, [r7, #16]
 800faa0:	f003 ff98 	bl	80139d4 <tcp_shutdown>
 800faa4:	4603      	mov	r3, r0
 800faa6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800faa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d102      	bne.n	800fab6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800fab0:	2301      	movs	r3, #1
 800fab2:	757b      	strb	r3, [r7, #21]
 800fab4:	e016      	b.n	800fae4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800fab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800faba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fabe:	d10f      	bne.n	800fae0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a1b      	ldr	r3, [r3, #32]
 800fac4:	7a5b      	ldrb	r3, [r3, #9]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d10c      	bne.n	800fae4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800faca:	2301      	movs	r3, #1
 800facc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800face:	7dbb      	ldrb	r3, [r7, #22]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d007      	beq.n	800fae4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fad4:	6938      	ldr	r0, [r7, #16]
 800fad6:	f004 f897 	bl	8013c08 <tcp_abort>
          err = ERR_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	75fb      	strb	r3, [r7, #23]
 800fade:	e001      	b.n	800fae4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fae0:	2301      	movs	r3, #1
 800fae2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fae4:	7d7b      	ldrb	r3, [r7, #21]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d052      	beq.n	800fb90 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a1b      	ldr	r3, [r3, #32]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	330c      	adds	r3, #12
 800faf2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a1b      	ldr	r3, [r3, #32]
 800faf8:	7dfa      	ldrb	r2, [r7, #23]
 800fafa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2200      	movs	r2, #0
 800fb00:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800fb08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d129      	bne.n	800fb64 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800fb10:	7dbb      	ldrb	r3, [r7, #22]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00c      	beq.n	800fb30 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d005      	beq.n	800fb30 <lwip_netconn_do_close_internal+0x1f0>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb28:	2200      	movs	r2, #0
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	4798      	blx	r3
      }
      if (shut_rx) {
 800fb30:	7bbb      	ldrb	r3, [r7, #14]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d009      	beq.n	800fb4a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d005      	beq.n	800fb4a <lwip_netconn_do_close_internal+0x20a>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb42:	2200      	movs	r2, #0
 800fb44:	2100      	movs	r1, #0
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	4798      	blx	r3
      }
      if (shut_tx) {
 800fb4a:	7b7b      	ldrb	r3, [r7, #13]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d009      	beq.n	800fb64 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d005      	beq.n	800fb64 <lwip_netconn_do_close_internal+0x224>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	2102      	movs	r1, #2
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fb64:	78fb      	ldrb	r3, [r7, #3]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d002      	beq.n	800fb70 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fb6a:	68b8      	ldr	r0, [r7, #8]
 800fb6c:	f00c fff2 	bl	801cb54 <sys_sem_signal>
    }
    return ERR_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	e03c      	b.n	800fbee <lwip_netconn_do_close_internal+0x2ae>
 800fb74:	08020230 	.word	0x08020230
 800fb78:	08020504 	.word	0x08020504
 800fb7c:	08020274 	.word	0x08020274
 800fb80:	08020514 	.word	0x08020514
 800fb84:	08020534 	.word	0x08020534
 800fb88:	08020558 	.word	0x08020558
 800fb8c:	08020398 	.word	0x08020398
  }
  if (!close_finished) {
 800fb90:	7d7b      	ldrb	r3, [r7, #21]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d11e      	bne.n	800fbd4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	7d1b      	ldrb	r3, [r3, #20]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d106      	bne.n	800fbac <lwip_netconn_do_close_internal+0x26c>
 800fb9e:	4b16      	ldr	r3, [pc, #88]	@ (800fbf8 <lwip_netconn_do_close_internal+0x2b8>)
 800fba0:	f240 4241 	movw	r2, #1089	@ 0x441
 800fba4:	4915      	ldr	r1, [pc, #84]	@ (800fbfc <lwip_netconn_do_close_internal+0x2bc>)
 800fba6:	4816      	ldr	r0, [pc, #88]	@ (800fc00 <lwip_netconn_do_close_internal+0x2c0>)
 800fba8:	f00d fdee 	bl	801d788 <iprintf>
    if (shut_tx) {
 800fbac:	7b7b      	ldrb	r3, [r7, #13]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d003      	beq.n	800fbba <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800fbb2:	4914      	ldr	r1, [pc, #80]	@ (800fc04 <lwip_netconn_do_close_internal+0x2c4>)
 800fbb4:	6938      	ldr	r0, [r7, #16]
 800fbb6:	f005 f91b 	bl	8014df0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fbba:	2201      	movs	r2, #1
 800fbbc:	4912      	ldr	r1, [pc, #72]	@ (800fc08 <lwip_netconn_do_close_internal+0x2c8>)
 800fbbe:	6938      	ldr	r0, [r7, #16]
 800fbc0:	f005 f972 	bl	8014ea8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800fbc4:	4911      	ldr	r1, [pc, #68]	@ (800fc0c <lwip_netconn_do_close_internal+0x2cc>)
 800fbc6:	6938      	ldr	r0, [r7, #16]
 800fbc8:	f005 f934 	bl	8014e34 <tcp_err>
    tcp_arg(tpcb, conn);
 800fbcc:	6879      	ldr	r1, [r7, #4]
 800fbce:	6938      	ldr	r0, [r7, #16]
 800fbd0:	f005 f8da 	bl	8014d88 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800fbd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d106      	bne.n	800fbea <lwip_netconn_do_close_internal+0x2aa>
 800fbdc:	4b06      	ldr	r3, [pc, #24]	@ (800fbf8 <lwip_netconn_do_close_internal+0x2b8>)
 800fbde:	f240 424d 	movw	r2, #1101	@ 0x44d
 800fbe2:	490b      	ldr	r1, [pc, #44]	@ (800fc10 <lwip_netconn_do_close_internal+0x2d0>)
 800fbe4:	4806      	ldr	r0, [pc, #24]	@ (800fc00 <lwip_netconn_do_close_internal+0x2c0>)
 800fbe6:	f00d fdcf 	bl	801d788 <iprintf>
  return err;
 800fbea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3718      	adds	r7, #24
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	08020230 	.word	0x08020230
 800fbfc:	0802056c 	.word	0x0802056c
 800fc00:	08020274 	.word	0x08020274
 800fc04:	0800f1b9 	.word	0x0800f1b9
 800fc08:	0800f0f1 	.word	0x0800f0f1
 800fc0c:	0800f261 	.word	0x0800f261
 800fc10:	08020590 	.word	0x08020590

0800fc14 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	785b      	ldrb	r3, [r3, #1]
 800fc26:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800fc28:	7afb      	ldrb	r3, [r7, #11]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00d      	beq.n	800fc4a <lwip_netconn_do_delconn+0x36>
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fc38:	2b10      	cmp	r3, #16
 800fc3a:	d006      	beq.n	800fc4a <lwip_netconn_do_delconn+0x36>
 800fc3c:	4b60      	ldr	r3, [pc, #384]	@ (800fdc0 <lwip_netconn_do_delconn+0x1ac>)
 800fc3e:	f240 425e 	movw	r2, #1118	@ 0x45e
 800fc42:	4960      	ldr	r1, [pc, #384]	@ (800fdc4 <lwip_netconn_do_delconn+0x1b0>)
 800fc44:	4860      	ldr	r0, [pc, #384]	@ (800fdc8 <lwip_netconn_do_delconn+0x1b4>)
 800fc46:	f00d fd9f 	bl	801d788 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800fc4a:	7afb      	ldrb	r3, [r7, #11]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d005      	beq.n	800fc5c <lwip_netconn_do_delconn+0x48>
 800fc50:	7afb      	ldrb	r3, [r7, #11]
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d002      	beq.n	800fc5c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800fc56:	7afb      	ldrb	r3, [r7, #11]
 800fc58:	2b03      	cmp	r3, #3
 800fc5a:	d109      	bne.n	800fc70 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800fc5c:	7afb      	ldrb	r3, [r7, #11]
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d10a      	bne.n	800fc78 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	7f1b      	ldrb	r3, [r3, #28]
 800fc68:	f003 0304 	and.w	r3, r3, #4
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d103      	bne.n	800fc78 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	22fb      	movs	r2, #251	@ 0xfb
 800fc74:	711a      	strb	r2, [r3, #4]
 800fc76:	e097      	b.n	800fda8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fc78:	7afb      	ldrb	r3, [r7, #11]
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	d10d      	bne.n	800fc9a <lwip_netconn_do_delconn+0x86>
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	7f1b      	ldrb	r3, [r3, #28]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d106      	bne.n	800fc9a <lwip_netconn_do_delconn+0x86>
 800fc8c:	4b4c      	ldr	r3, [pc, #304]	@ (800fdc0 <lwip_netconn_do_delconn+0x1ac>)
 800fc8e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800fc92:	494e      	ldr	r1, [pc, #312]	@ (800fdcc <lwip_netconn_do_delconn+0x1b8>)
 800fc94:	484c      	ldr	r0, [pc, #304]	@ (800fdc8 <lwip_netconn_do_delconn+0x1b4>)
 800fc96:	f00d fd77 	bl	801d788 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7ff fdcd 	bl	800f844 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	685b      	ldr	r3, [r3, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d05f      	beq.n	800fd74 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fcbe:	2b10      	cmp	r3, #16
 800fcc0:	d00d      	beq.n	800fcde <lwip_netconn_do_delconn+0xca>
 800fcc2:	2b20      	cmp	r3, #32
 800fcc4:	d151      	bne.n	800fd6a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f00a fac0 	bl	801a25c <udp_remove>
          break;
 800fcdc:	e046      	b.n	800fd6c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d006      	beq.n	800fcf6 <lwip_netconn_do_delconn+0xe2>
 800fce8:	4b35      	ldr	r3, [pc, #212]	@ (800fdc0 <lwip_netconn_do_delconn+0x1ac>)
 800fcea:	f240 4294 	movw	r2, #1172	@ 0x494
 800fcee:	4938      	ldr	r1, [pc, #224]	@ (800fdd0 <lwip_netconn_do_delconn+0x1bc>)
 800fcf0:	4835      	ldr	r0, [pc, #212]	@ (800fdc8 <lwip_netconn_do_delconn+0x1b4>)
 800fcf2:	f00d fd49 	bl	801d788 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	2204      	movs	r2, #4
 800fcfc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2203      	movs	r2, #3
 800fd02:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68fa      	ldr	r2, [r7, #12]
 800fd0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2100      	movs	r1, #0
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff fe14 	bl	800f940 <lwip_netconn_do_close_internal>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d04b      	beq.n	800fdb6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	785b      	ldrb	r3, [r3, #1]
 800fd24:	2b04      	cmp	r3, #4
 800fd26:	d006      	beq.n	800fd36 <lwip_netconn_do_delconn+0x122>
 800fd28:	4b25      	ldr	r3, [pc, #148]	@ (800fdc0 <lwip_netconn_do_delconn+0x1ac>)
 800fd2a:	f240 429a 	movw	r2, #1178	@ 0x49a
 800fd2e:	4929      	ldr	r1, [pc, #164]	@ (800fdd4 <lwip_netconn_do_delconn+0x1c0>)
 800fd30:	4825      	ldr	r0, [pc, #148]	@ (800fdc8 <lwip_netconn_do_delconn+0x1b4>)
 800fd32:	f00d fd29 	bl	801d788 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fd36:	4828      	ldr	r0, [pc, #160]	@ (800fdd8 <lwip_netconn_do_delconn+0x1c4>)
 800fd38:	f00c ff7d 	bl	801cc36 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	330c      	adds	r3, #12
 800fd42:	2100      	movs	r1, #0
 800fd44:	4618      	mov	r0, r3
 800fd46:	f00c fed4 	bl	801caf2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800fd4a:	4823      	ldr	r0, [pc, #140]	@ (800fdd8 <lwip_netconn_do_delconn+0x1c4>)
 800fd4c:	f00c ff64 	bl	801cc18 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	785b      	ldrb	r3, [r3, #1]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d02d      	beq.n	800fdb6 <lwip_netconn_do_delconn+0x1a2>
 800fd5a:	4b19      	ldr	r3, [pc, #100]	@ (800fdc0 <lwip_netconn_do_delconn+0x1ac>)
 800fd5c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800fd60:	491c      	ldr	r1, [pc, #112]	@ (800fdd4 <lwip_netconn_do_delconn+0x1c0>)
 800fd62:	4819      	ldr	r0, [pc, #100]	@ (800fdc8 <lwip_netconn_do_delconn+0x1b4>)
 800fd64:	f00d fd10 	bl	801d788 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fd68:	e025      	b.n	800fdb6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800fd6a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2200      	movs	r2, #0
 800fd72:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <lwip_netconn_do_delconn+0x17a>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	6810      	ldr	r0, [r2, #0]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d007      	beq.n	800fda8 <lwip_netconn_do_delconn+0x194>
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd9e:	68fa      	ldr	r2, [r7, #12]
 800fda0:	6810      	ldr	r0, [r2, #0]
 800fda2:	2200      	movs	r2, #0
 800fda4:	2102      	movs	r1, #2
 800fda6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	330c      	adds	r3, #12
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f00c feea 	bl	801cb88 <sys_sem_valid>
 800fdb4:	e000      	b.n	800fdb8 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fdb6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	08020230 	.word	0x08020230
 800fdc4:	080205a0 	.word	0x080205a0
 800fdc8:	08020274 	.word	0x08020274
 800fdcc:	080205b4 	.word	0x080205b4
 800fdd0:	080205d4 	.word	0x080205d4
 800fdd4:	080205f0 	.word	0x080205f0
 800fdd8:	2000b844 	.word	0x2000b844

0800fddc <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d025      	beq.n	800fe3e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fdfc:	2b10      	cmp	r3, #16
 800fdfe:	d00e      	beq.n	800fe1e <lwip_netconn_do_bind+0x42>
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d119      	bne.n	800fe38 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	6858      	ldr	r0, [r3, #4]
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	6899      	ldr	r1, [r3, #8]
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	899b      	ldrh	r3, [r3, #12]
 800fe12:	461a      	mov	r2, r3
 800fe14:	f00a f97a 	bl	801a10c <udp_bind>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	73fb      	strb	r3, [r7, #15]
        break;
 800fe1c:	e011      	b.n	800fe42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6858      	ldr	r0, [r3, #4]
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	6899      	ldr	r1, [r3, #8]
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	899b      	ldrh	r3, [r3, #12]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	f003 fef7 	bl	8013c20 <tcp_bind>
 800fe32:	4603      	mov	r3, r0
 800fe34:	73fb      	strb	r3, [r7, #15]
        break;
 800fe36:	e004      	b.n	800fe42 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fe38:	23fa      	movs	r3, #250	@ 0xfa
 800fe3a:	73fb      	strb	r3, [r7, #15]
        break;
 800fe3c:	e001      	b.n	800fe42 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fe3e:	23fa      	movs	r3, #250	@ 0xfa
 800fe40:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	7bfa      	ldrb	r2, [r7, #15]
 800fe46:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fe48:	bf00      	nop
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d07f      	beq.n	800ff66 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe70:	2b10      	cmp	r3, #16
 800fe72:	d175      	bne.n	800ff60 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	785b      	ldrb	r3, [r3, #1]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d165      	bne.n	800ff4a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	7d1b      	ldrb	r3, [r3, #20]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d002      	beq.n	800fe90 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fe8a:	23fa      	movs	r3, #250	@ 0xfa
 800fe8c:	72fb      	strb	r3, [r7, #11]
 800fe8e:	e06c      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fe90:	23ff      	movs	r3, #255	@ 0xff
 800fe92:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f107 020b 	add.w	r2, r7, #11
 800fe9e:	7cf9      	ldrb	r1, [r7, #19]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f003 ff87 	bl	8013db4 <tcp_listen_with_backlog_and_err>
 800fea6:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d05d      	beq.n	800ff6a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3310      	adds	r3, #16
 800feb4:	4618      	mov	r0, r3
 800feb6:	f00c fdd6 	bl	801ca66 <sys_mbox_valid>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	d00b      	beq.n	800fed8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3310      	adds	r3, #16
 800fec6:	4618      	mov	r0, r3
 800fec8:	f00c fd46 	bl	801c958 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3310      	adds	r3, #16
 800fed2:	4618      	mov	r0, r3
 800fed4:	f00c fdd8 	bl	801ca88 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800fed8:	2300      	movs	r3, #0
 800feda:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	3314      	adds	r3, #20
 800fee2:	4618      	mov	r0, r3
 800fee4:	f00c fdbf 	bl	801ca66 <sys_mbox_valid>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d108      	bne.n	800ff00 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	3314      	adds	r3, #20
 800fef4:	2106      	movs	r1, #6
 800fef6:	4618      	mov	r0, r3
 800fef8:	f00c fd0c 	bl	801c914 <sys_mbox_new>
 800fefc:	4603      	mov	r3, r0
 800fefe:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ff00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d118      	bne.n	800ff3a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2202      	movs	r2, #2
 800ff0e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	685a      	ldr	r2, [r3, #4]
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4619      	mov	r1, r3
 800ff24:	4610      	mov	r0, r2
 800ff26:	f004 ff2f 	bl	8014d88 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	4912      	ldr	r1, [pc, #72]	@ (800ff7c <lwip_netconn_do_listen+0x12c>)
 800ff32:	4618      	mov	r0, r3
 800ff34:	f004 ffa0 	bl	8014e78 <tcp_accept>
 800ff38:	e017      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	f003 fd1e 	bl	801397c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2200      	movs	r2, #0
 800ff46:	605a      	str	r2, [r3, #4]
 800ff48:	e00f      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	785b      	ldrb	r3, [r3, #1]
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	d102      	bne.n	800ff5a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	72fb      	strb	r3, [r7, #11]
 800ff58:	e007      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ff5a:	23f5      	movs	r3, #245	@ 0xf5
 800ff5c:	72fb      	strb	r3, [r7, #11]
 800ff5e:	e004      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ff60:	23f0      	movs	r3, #240	@ 0xf0
 800ff62:	72fb      	strb	r3, [r7, #11]
 800ff64:	e001      	b.n	800ff6a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ff66:	23f5      	movs	r3, #245	@ 0xf5
 800ff68:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ff6a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ff72:	bf00      	nop
 800ff74:	3718      	adds	r7, #24
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	0800f45d 	.word	0x0800f45d

0800ff80 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe ff1e 	bl	800edd2 <netconn_err>
 800ff96:	4603      	mov	r3, r0
 800ff98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ff9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d134      	bne.n	801000c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d02d      	beq.n	8010008 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ffb6:	2b20      	cmp	r3, #32
 800ffb8:	d123      	bne.n	8010002 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10c      	bne.n	800ffde <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	685a      	ldr	r2, [r3, #4]
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	4610      	mov	r0, r2
 800ffd4:	f009 feb0 	bl	8019d38 <udp_send>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ffdc:	e016      	b.n	801000c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6858      	ldr	r0, [r3, #4]
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	6819      	ldr	r1, [r3, #0]
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	f103 0208 	add.w	r2, r3, #8
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	f009 fed2 	bl	8019da0 <udp_sendto>
 800fffc:	4603      	mov	r3, r0
 800fffe:	73fb      	strb	r3, [r7, #15]
          break;
 8010000:	e004      	b.n	801000c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8010002:	23f5      	movs	r3, #245	@ 0xf5
 8010004:	73fb      	strb	r3, [r7, #15]
          break;
 8010006:	e001      	b.n	801000c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8010008:	23f5      	movs	r3, #245	@ 0xf5
 801000a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	7bfa      	ldrb	r2, [r7, #15]
 8010010:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010012:	bf00      	nop
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}

0801001a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801001a:	b580      	push	{r7, lr}
 801001c:	b086      	sub	sp, #24
 801001e:	af00      	add	r7, sp, #0
 8010020:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	2200      	movs	r2, #0
 801002a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d022      	beq.n	801007c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010040:	2b10      	cmp	r3, #16
 8010042:	d11b      	bne.n	801007c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010050:	d202      	bcs.n	8010058 <lwip_netconn_do_recv+0x3e>
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	b29b      	uxth	r3, r3
 8010056:	e001      	b.n	801005c <lwip_netconn_do_recv+0x42>
 8010058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801005c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	89fa      	ldrh	r2, [r7, #14]
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f003 ffa7 	bl	8013fbc <tcp_recved>
        remaining -= recved;
 801006e:	89fb      	ldrh	r3, [r7, #14]
 8010070:	697a      	ldr	r2, [r7, #20]
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1e6      	bne.n	801004a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801007c:	bf00      	nop
 801007e:	3718      	adds	r7, #24
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b088      	sub	sp, #32
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	460b      	mov	r3, r1
 801008e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010090:	2300      	movs	r3, #0
 8010092:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d106      	bne.n	80100a8 <lwip_netconn_do_writemore+0x24>
 801009a:	4b96      	ldr	r3, [pc, #600]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 801009c:	f240 6273 	movw	r2, #1651	@ 0x673
 80100a0:	4995      	ldr	r1, [pc, #596]	@ (80102f8 <lwip_netconn_do_writemore+0x274>)
 80100a2:	4896      	ldr	r0, [pc, #600]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 80100a4:	f00d fb70 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	785b      	ldrb	r3, [r3, #1]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d006      	beq.n	80100be <lwip_netconn_do_writemore+0x3a>
 80100b0:	4b90      	ldr	r3, [pc, #576]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 80100b2:	f240 6274 	movw	r2, #1652	@ 0x674
 80100b6:	4992      	ldr	r1, [pc, #584]	@ (8010300 <lwip_netconn_do_writemore+0x27c>)
 80100b8:	4890      	ldr	r0, [pc, #576]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 80100ba:	f00d fb65 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6a1b      	ldr	r3, [r3, #32]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <lwip_netconn_do_writemore+0x50>
 80100c6:	4b8b      	ldr	r3, [pc, #556]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 80100c8:	f240 6275 	movw	r2, #1653	@ 0x675
 80100cc:	498d      	ldr	r1, [pc, #564]	@ (8010304 <lwip_netconn_do_writemore+0x280>)
 80100ce:	488b      	ldr	r0, [pc, #556]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 80100d0:	f00d fb5a 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d106      	bne.n	80100ea <lwip_netconn_do_writemore+0x66>
 80100dc:	4b85      	ldr	r3, [pc, #532]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 80100de:	f240 6276 	movw	r2, #1654	@ 0x676
 80100e2:	4989      	ldr	r1, [pc, #548]	@ (8010308 <lwip_netconn_do_writemore+0x284>)
 80100e4:	4885      	ldr	r0, [pc, #532]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 80100e6:	f00d fb4f 	bl	801d788 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6a1b      	ldr	r3, [r3, #32]
 80100ee:	699a      	ldr	r2, [r3, #24]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a1b      	ldr	r3, [r3, #32]
 80100f4:	695b      	ldr	r3, [r3, #20]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d306      	bcc.n	8010108 <lwip_netconn_do_writemore+0x84>
 80100fa:	4b7e      	ldr	r3, [pc, #504]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 80100fc:	f240 6277 	movw	r2, #1655	@ 0x677
 8010100:	4982      	ldr	r1, [pc, #520]	@ (801030c <lwip_netconn_do_writemore+0x288>)
 8010102:	487e      	ldr	r0, [pc, #504]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 8010104:	f00d fb40 	bl	801d788 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d106      	bne.n	8010120 <lwip_netconn_do_writemore+0x9c>
 8010112:	4b78      	ldr	r3, [pc, #480]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 8010114:	f240 6279 	movw	r2, #1657	@ 0x679
 8010118:	497d      	ldr	r1, [pc, #500]	@ (8010310 <lwip_netconn_do_writemore+0x28c>)
 801011a:	4878      	ldr	r0, [pc, #480]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 801011c:	f00d fb34 	bl	801d788 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6a1b      	ldr	r3, [r3, #32]
 8010124:	7f1b      	ldrb	r3, [r3, #28]
 8010126:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	7f1b      	ldrb	r3, [r3, #28]
 801012c:	f003 0302 	and.w	r3, r3, #2
 8010130:	2b00      	cmp	r3, #0
 8010132:	d104      	bne.n	801013e <lwip_netconn_do_writemore+0xba>
 8010134:	7ebb      	ldrb	r3, [r7, #26]
 8010136:	f003 0304 	and.w	r3, r3, #4
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <lwip_netconn_do_writemore+0xbe>
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <lwip_netconn_do_writemore+0xc0>
 8010142:	2300      	movs	r3, #0
 8010144:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6a1b      	ldr	r3, [r3, #32]
 801014a:	689b      	ldr	r3, [r3, #8]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	4413      	add	r3, r2
 8010156:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a1b      	ldr	r3, [r3, #32]
 8010164:	691b      	ldr	r3, [r3, #16]
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010170:	d307      	bcc.n	8010182 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010172:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010176:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010178:	7ebb      	ldrb	r3, [r7, #26]
 801017a:	f043 0302 	orr.w	r3, r3, #2
 801017e:	76bb      	strb	r3, [r7, #26]
 8010180:	e001      	b.n	8010186 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801018e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010190:	89fa      	ldrh	r2, [r7, #14]
 8010192:	8bbb      	ldrh	r3, [r7, #28]
 8010194:	429a      	cmp	r2, r3
 8010196:	d216      	bcs.n	80101c6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010198:	89fb      	ldrh	r3, [r7, #14]
 801019a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801019c:	7e3b      	ldrb	r3, [r7, #24]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00d      	beq.n	80101be <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80101a2:	8bbb      	ldrh	r3, [r7, #28]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d10e      	bne.n	80101c6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a1b      	ldr	r3, [r3, #32]
 80101ac:	699b      	ldr	r3, [r3, #24]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d102      	bne.n	80101b8 <lwip_netconn_do_writemore+0x134>
 80101b2:	f06f 0306 	mvn.w	r3, #6
 80101b6:	e000      	b.n	80101ba <lwip_netconn_do_writemore+0x136>
 80101b8:	2300      	movs	r3, #0
 80101ba:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80101bc:	e07d      	b.n	80102ba <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80101be:	7ebb      	ldrb	r3, [r7, #26]
 80101c0:	f043 0302 	orr.w	r3, r3, #2
 80101c4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	691a      	ldr	r2, [r3, #16]
 80101cc:	8bbb      	ldrh	r3, [r7, #28]
 80101ce:	441a      	add	r2, r3
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a1b      	ldr	r3, [r3, #32]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d906      	bls.n	80101ea <lwip_netconn_do_writemore+0x166>
 80101dc:	4b45      	ldr	r3, [pc, #276]	@ (80102f4 <lwip_netconn_do_writemore+0x270>)
 80101de:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80101e2:	494c      	ldr	r1, [pc, #304]	@ (8010314 <lwip_netconn_do_writemore+0x290>)
 80101e4:	4845      	ldr	r0, [pc, #276]	@ (80102fc <lwip_netconn_do_writemore+0x278>)
 80101e6:	f00d facf 	bl	801d788 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80101ea:	8bbb      	ldrh	r3, [r7, #28]
 80101ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d103      	bne.n	80101fc <lwip_netconn_do_writemore+0x178>
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101fa:	d209      	bcs.n	8010210 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010200:	8bba      	ldrh	r2, [r7, #28]
 8010202:	429a      	cmp	r2, r3
 8010204:	d10b      	bne.n	801021e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6a1b      	ldr	r3, [r3, #32]
 801020a:	899b      	ldrh	r3, [r3, #12]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d906      	bls.n	801021e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010210:	2301      	movs	r3, #1
 8010212:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010214:	7ebb      	ldrb	r3, [r7, #26]
 8010216:	f043 0302 	orr.w	r3, r3, #2
 801021a:	76bb      	strb	r3, [r7, #26]
 801021c:	e001      	b.n	8010222 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801021e:	2300      	movs	r3, #0
 8010220:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6858      	ldr	r0, [r3, #4]
 8010226:	7ebb      	ldrb	r3, [r7, #26]
 8010228:	8bba      	ldrh	r2, [r7, #28]
 801022a:	6979      	ldr	r1, [r7, #20]
 801022c:	f007 fce8 	bl	8017c00 <tcp_write>
 8010230:	4603      	mov	r3, r0
 8010232:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d12c      	bne.n	8010296 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6a1b      	ldr	r3, [r3, #32]
 8010240:	6999      	ldr	r1, [r3, #24]
 8010242:	8bba      	ldrh	r2, [r7, #28]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	440a      	add	r2, r1
 801024a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a1b      	ldr	r3, [r3, #32]
 8010250:	6919      	ldr	r1, [r3, #16]
 8010252:	8bba      	ldrh	r2, [r7, #28]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6a1b      	ldr	r3, [r3, #32]
 8010258:	440a      	add	r2, r1
 801025a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a1b      	ldr	r3, [r3, #32]
 8010260:	691a      	ldr	r2, [r3, #16]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6a1b      	ldr	r3, [r3, #32]
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	429a      	cmp	r2, r3
 801026c:	d113      	bne.n	8010296 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a1b      	ldr	r3, [r3, #32]
 8010272:	899a      	ldrh	r2, [r3, #12]
 8010274:	3a01      	subs	r2, #1
 8010276:	b292      	uxth	r2, r2
 8010278:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	899b      	ldrh	r3, [r3, #12]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d008      	beq.n	8010296 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6a1b      	ldr	r3, [r3, #32]
 8010288:	689a      	ldr	r2, [r3, #8]
 801028a:	3208      	adds	r2, #8
 801028c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	6a1b      	ldr	r3, [r3, #32]
 8010292:	2200      	movs	r2, #0
 8010294:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010296:	7e7b      	ldrb	r3, [r7, #25]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d004      	beq.n	80102a6 <lwip_netconn_do_writemore+0x222>
 801029c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f43f af50 	beq.w	8010146 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80102a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d004      	beq.n	80102b8 <lwip_netconn_do_writemore+0x234>
 80102ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b6:	d146      	bne.n	8010346 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80102b8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80102ba:	7e3b      	ldrb	r3, [r7, #24]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d02b      	beq.n	8010318 <lwip_netconn_do_writemore+0x294>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a1b      	ldr	r3, [r3, #32]
 80102c4:	699a      	ldr	r2, [r3, #24]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a1b      	ldr	r3, [r3, #32]
 80102ca:	695b      	ldr	r3, [r3, #20]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d223      	bcs.n	8010318 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d005      	beq.n	80102e4 <lwip_netconn_do_writemore+0x260>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102dc:	2200      	movs	r2, #0
 80102de:	2103      	movs	r1, #3
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	7f1b      	ldrb	r3, [r3, #28]
 80102e8:	f043 0310 	orr.w	r3, r3, #16
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	771a      	strb	r2, [r3, #28]
 80102f2:	e028      	b.n	8010346 <lwip_netconn_do_writemore+0x2c2>
 80102f4:	08020230 	.word	0x08020230
 80102f8:	08020388 	.word	0x08020388
 80102fc:	08020274 	.word	0x08020274
 8010300:	08020690 	.word	0x08020690
 8010304:	08020398 	.word	0x08020398
 8010308:	080206b0 	.word	0x080206b0
 801030c:	080206c8 	.word	0x080206c8
 8010310:	08020708 	.word	0x08020708
 8010314:	08020730 	.word	0x08020730
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010320:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8010324:	d305      	bcc.n	8010332 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801032e:	2b04      	cmp	r3, #4
 8010330:	d909      	bls.n	8010346 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010336:	2b00      	cmp	r3, #0
 8010338:	d005      	beq.n	8010346 <lwip_netconn_do_writemore+0x2c2>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801033e:	2200      	movs	r2, #0
 8010340:	2103      	movs	r1, #3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010346:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d11d      	bne.n	801038a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	699a      	ldr	r2, [r3, #24]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a1b      	ldr	r3, [r3, #32]
 8010358:	695b      	ldr	r3, [r3, #20]
 801035a:	429a      	cmp	r2, r3
 801035c:	d002      	beq.n	8010364 <lwip_netconn_do_writemore+0x2e0>
 801035e:	7e3b      	ldrb	r3, [r7, #24]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d001      	beq.n	8010368 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010364:	2301      	movs	r3, #1
 8010366:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	4618      	mov	r0, r3
 801036e:	f008 fa31 	bl	80187d4 <tcp_output>
 8010372:	4603      	mov	r3, r0
 8010374:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010376:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801037a:	f113 0f04 	cmn.w	r3, #4
 801037e:	d12c      	bne.n	80103da <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010380:	7b3b      	ldrb	r3, [r7, #12]
 8010382:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010384:	2301      	movs	r3, #1
 8010386:	76fb      	strb	r3, [r7, #27]
 8010388:	e027      	b.n	80103da <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801038a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801038e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010392:	d120      	bne.n	80103d6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	4618      	mov	r0, r3
 801039a:	f008 fa1b 	bl	80187d4 <tcp_output>
 801039e:	4603      	mov	r3, r0
 80103a0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80103a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80103a6:	f113 0f04 	cmn.w	r3, #4
 80103aa:	d104      	bne.n	80103b6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80103ac:	7b7b      	ldrb	r3, [r7, #13]
 80103ae:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80103b0:	2301      	movs	r3, #1
 80103b2:	76fb      	strb	r3, [r7, #27]
 80103b4:	e011      	b.n	80103da <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80103b6:	7e3b      	ldrb	r3, [r7, #24]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d00e      	beq.n	80103da <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a1b      	ldr	r3, [r3, #32]
 80103c0:	699b      	ldr	r3, [r3, #24]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d102      	bne.n	80103cc <lwip_netconn_do_writemore+0x348>
 80103c6:	f06f 0306 	mvn.w	r3, #6
 80103ca:	e000      	b.n	80103ce <lwip_netconn_do_writemore+0x34a>
 80103cc:	2300      	movs	r3, #0
 80103ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80103d0:	2301      	movs	r3, #1
 80103d2:	76fb      	strb	r3, [r7, #27]
 80103d4:	e001      	b.n	80103da <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80103d6:	2301      	movs	r3, #1
 80103d8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80103da:	7efb      	ldrb	r3, [r7, #27]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d015      	beq.n	801040c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6a1b      	ldr	r3, [r3, #32]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	330c      	adds	r3, #12
 80103e8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6a1b      	ldr	r3, [r3, #32]
 80103ee:	7ffa      	ldrb	r2, [r7, #31]
 80103f0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2200      	movs	r2, #0
 80103f6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2200      	movs	r2, #0
 80103fc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80103fe:	78fb      	ldrb	r3, [r7, #3]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d006      	beq.n	8010412 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010404:	68b8      	ldr	r0, [r7, #8]
 8010406:	f00c fba5 	bl	801cb54 <sys_sem_signal>
 801040a:	e002      	b.n	8010412 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801040c:	f04f 33ff 	mov.w	r3, #4294967295
 8010410:	e000      	b.n	8010414 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010412:	2300      	movs	r3, #0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3720      	adds	r7, #32
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4618      	mov	r0, r3
 801042e:	f7fe fcd0 	bl	800edd2 <netconn_err>
 8010432:	4603      	mov	r3, r0
 8010434:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d166      	bne.n	801050c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010448:	2b10      	cmp	r3, #16
 801044a:	d15d      	bne.n	8010508 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	785b      	ldrb	r3, [r3, #1]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d002      	beq.n	801045c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010456:	23fb      	movs	r3, #251	@ 0xfb
 8010458:	73fb      	strb	r3, [r7, #15]
 801045a:	e057      	b.n	801050c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d04d      	beq.n	8010502 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2201      	movs	r2, #1
 801046c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	6a1b      	ldr	r3, [r3, #32]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d006      	beq.n	8010486 <lwip_netconn_do_write+0x6a>
 8010478:	4b28      	ldr	r3, [pc, #160]	@ (801051c <lwip_netconn_do_write+0x100>)
 801047a:	f240 7223 	movw	r2, #1827	@ 0x723
 801047e:	4928      	ldr	r1, [pc, #160]	@ (8010520 <lwip_netconn_do_write+0x104>)
 8010480:	4828      	ldr	r0, [pc, #160]	@ (8010524 <lwip_netconn_do_write+0x108>)
 8010482:	f00d f981 	bl	801d788 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d106      	bne.n	801049c <lwip_netconn_do_write+0x80>
 801048e:	4b23      	ldr	r3, [pc, #140]	@ (801051c <lwip_netconn_do_write+0x100>)
 8010490:	f240 7224 	movw	r2, #1828	@ 0x724
 8010494:	4924      	ldr	r1, [pc, #144]	@ (8010528 <lwip_netconn_do_write+0x10c>)
 8010496:	4823      	ldr	r0, [pc, #140]	@ (8010524 <lwip_netconn_do_write+0x108>)
 8010498:	f00d f976 	bl	801d788 <iprintf>
        msg->conn->current_msg = msg;
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68ba      	ldr	r2, [r7, #8]
 80104a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2100      	movs	r1, #0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fdea 	bl	8010084 <lwip_netconn_do_writemore>
 80104b0:	4603      	mov	r3, r0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d02e      	beq.n	8010514 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	785b      	ldrb	r3, [r3, #1]
 80104bc:	2b01      	cmp	r3, #1
 80104be:	d006      	beq.n	80104ce <lwip_netconn_do_write+0xb2>
 80104c0:	4b16      	ldr	r3, [pc, #88]	@ (801051c <lwip_netconn_do_write+0x100>)
 80104c2:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 80104c6:	4919      	ldr	r1, [pc, #100]	@ (801052c <lwip_netconn_do_write+0x110>)
 80104c8:	4816      	ldr	r0, [pc, #88]	@ (8010524 <lwip_netconn_do_write+0x108>)
 80104ca:	f00d f95d 	bl	801d788 <iprintf>
          UNLOCK_TCPIP_CORE();
 80104ce:	4818      	ldr	r0, [pc, #96]	@ (8010530 <lwip_netconn_do_write+0x114>)
 80104d0:	f00c fbb1 	bl	801cc36 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	330c      	adds	r3, #12
 80104da:	2100      	movs	r1, #0
 80104dc:	4618      	mov	r0, r3
 80104de:	f00c fb08 	bl	801caf2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80104e2:	4813      	ldr	r0, [pc, #76]	@ (8010530 <lwip_netconn_do_write+0x114>)
 80104e4:	f00c fb98 	bl	801cc18 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	785b      	ldrb	r3, [r3, #1]
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d110      	bne.n	8010514 <lwip_netconn_do_write+0xf8>
 80104f2:	4b0a      	ldr	r3, [pc, #40]	@ (801051c <lwip_netconn_do_write+0x100>)
 80104f4:	f240 722c 	movw	r2, #1836	@ 0x72c
 80104f8:	490c      	ldr	r1, [pc, #48]	@ (801052c <lwip_netconn_do_write+0x110>)
 80104fa:	480a      	ldr	r0, [pc, #40]	@ (8010524 <lwip_netconn_do_write+0x108>)
 80104fc:	f00d f944 	bl	801d788 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010500:	e008      	b.n	8010514 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010502:	23f5      	movs	r3, #245	@ 0xf5
 8010504:	73fb      	strb	r3, [r7, #15]
 8010506:	e001      	b.n	801050c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010508:	23fa      	movs	r3, #250	@ 0xfa
 801050a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	7bfa      	ldrb	r2, [r7, #15]
 8010510:	711a      	strb	r2, [r3, #4]
 8010512:	e000      	b.n	8010516 <lwip_netconn_do_write+0xfa>
        return;
 8010514:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010516:	3710      	adds	r7, #16
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	08020230 	.word	0x08020230
 8010520:	080205d4 	.word	0x080205d4
 8010524:	08020274 	.word	0x08020274
 8010528:	0802075c 	.word	0x0802075c
 801052c:	080205f0 	.word	0x080205f0
 8010530:	2000b844 	.word	0x2000b844

08010534 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	785b      	ldrb	r3, [r3, #1]
 8010546:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d069      	beq.n	8010626 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801055c:	2b10      	cmp	r3, #16
 801055e:	d162      	bne.n	8010626 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010564:	2b03      	cmp	r3, #3
 8010566:	d002      	beq.n	801056e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010568:	7afb      	ldrb	r3, [r7, #11]
 801056a:	2b02      	cmp	r3, #2
 801056c:	d05b      	beq.n	8010626 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801056e:	7afb      	ldrb	r3, [r7, #11]
 8010570:	2b03      	cmp	r3, #3
 8010572:	d103      	bne.n	801057c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	22f5      	movs	r2, #245	@ 0xf5
 8010578:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801057a:	e059      	b.n	8010630 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801057c:	7afb      	ldrb	r3, [r7, #11]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d103      	bne.n	801058a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	22fb      	movs	r2, #251	@ 0xfb
 8010586:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010588:	e052      	b.n	8010630 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	7a1b      	ldrb	r3, [r3, #8]
 801058e:	f003 0301 	and.w	r3, r3, #1
 8010592:	2b00      	cmp	r3, #0
 8010594:	d004      	beq.n	80105a0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff f952 	bl	800f844 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	6a1b      	ldr	r3, [r3, #32]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d006      	beq.n	80105b8 <lwip_netconn_do_close+0x84>
 80105aa:	4b23      	ldr	r3, [pc, #140]	@ (8010638 <lwip_netconn_do_close+0x104>)
 80105ac:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 80105b0:	4922      	ldr	r1, [pc, #136]	@ (801063c <lwip_netconn_do_close+0x108>)
 80105b2:	4823      	ldr	r0, [pc, #140]	@ (8010640 <lwip_netconn_do_close+0x10c>)
 80105b4:	f00d f8e8 	bl	801d788 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2204      	movs	r2, #4
 80105be:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2100      	movs	r1, #0
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7ff f9b6 	bl	800f940 <lwip_netconn_do_close_internal>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d029      	beq.n	801062e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	785b      	ldrb	r3, [r3, #1]
 80105e0:	2b04      	cmp	r3, #4
 80105e2:	d006      	beq.n	80105f2 <lwip_netconn_do_close+0xbe>
 80105e4:	4b14      	ldr	r3, [pc, #80]	@ (8010638 <lwip_netconn_do_close+0x104>)
 80105e6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80105ea:	4916      	ldr	r1, [pc, #88]	@ (8010644 <lwip_netconn_do_close+0x110>)
 80105ec:	4814      	ldr	r0, [pc, #80]	@ (8010640 <lwip_netconn_do_close+0x10c>)
 80105ee:	f00d f8cb 	bl	801d788 <iprintf>
        UNLOCK_TCPIP_CORE();
 80105f2:	4815      	ldr	r0, [pc, #84]	@ (8010648 <lwip_netconn_do_close+0x114>)
 80105f4:	f00c fb1f 	bl	801cc36 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	330c      	adds	r3, #12
 80105fe:	2100      	movs	r1, #0
 8010600:	4618      	mov	r0, r3
 8010602:	f00c fa76 	bl	801caf2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010606:	4810      	ldr	r0, [pc, #64]	@ (8010648 <lwip_netconn_do_close+0x114>)
 8010608:	f00c fb06 	bl	801cc18 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	785b      	ldrb	r3, [r3, #1]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00b      	beq.n	801062e <lwip_netconn_do_close+0xfa>
 8010616:	4b08      	ldr	r3, [pc, #32]	@ (8010638 <lwip_netconn_do_close+0x104>)
 8010618:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 801061c:	4909      	ldr	r1, [pc, #36]	@ (8010644 <lwip_netconn_do_close+0x110>)
 801061e:	4808      	ldr	r0, [pc, #32]	@ (8010640 <lwip_netconn_do_close+0x10c>)
 8010620:	f00d f8b2 	bl	801d788 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010624:	e003      	b.n	801062e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	22f5      	movs	r2, #245	@ 0xf5
 801062a:	711a      	strb	r2, [r3, #4]
 801062c:	e000      	b.n	8010630 <lwip_netconn_do_close+0xfc>
      return;
 801062e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	08020230 	.word	0x08020230
 801063c:	080205d4 	.word	0x080205d4
 8010640:	08020274 	.word	0x08020274
 8010644:	080205f0 	.word	0x080205f0
 8010648:	2000b844 	.word	0x2000b844

0801064c <netbuf_delete>:
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d013      	beq.n	8010682 <netbuf_delete+0x36>
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00b      	beq.n	801067a <netbuf_delete+0x2e>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4618      	mov	r0, r3
 8010668:	f002 fcce 	bl	8013008 <pbuf_free>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	2200      	movs	r2, #0
 8010670:	605a      	str	r2, [r3, #4]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	601a      	str	r2, [r3, #0]
 801067a:	6879      	ldr	r1, [r7, #4]
 801067c:	2006      	movs	r0, #6
 801067e:	f001 fe1f 	bl	80122c0 <memp_free>
 8010682:	bf00      	nop
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
	...

0801068c <netbuf_ref>:
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	4613      	mov	r3, r2
 8010698:	80fb      	strh	r3, [r7, #6]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d108      	bne.n	80106b2 <netbuf_ref+0x26>
 80106a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010714 <netbuf_ref+0x88>)
 80106a2:	2299      	movs	r2, #153	@ 0x99
 80106a4:	491c      	ldr	r1, [pc, #112]	@ (8010718 <netbuf_ref+0x8c>)
 80106a6:	481d      	ldr	r0, [pc, #116]	@ (801071c <netbuf_ref+0x90>)
 80106a8:	f00d f86e 	bl	801d788 <iprintf>
 80106ac:	f06f 030f 	mvn.w	r3, #15
 80106b0:	e02b      	b.n	801070a <netbuf_ref+0x7e>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d004      	beq.n	80106c4 <netbuf_ref+0x38>
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	4618      	mov	r0, r3
 80106c0:	f002 fca2 	bl	8013008 <pbuf_free>
 80106c4:	2241      	movs	r2, #65	@ 0x41
 80106c6:	2100      	movs	r1, #0
 80106c8:	2036      	movs	r0, #54	@ 0x36
 80106ca:	f002 f9b9 	bl	8012a40 <pbuf_alloc>
 80106ce:	4602      	mov	r2, r0
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	601a      	str	r2, [r3, #0]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d105      	bne.n	80106e8 <netbuf_ref+0x5c>
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	2200      	movs	r2, #0
 80106e0:	605a      	str	r2, [r3, #4]
 80106e2:	f04f 33ff 	mov.w	r3, #4294967295
 80106e6:	e010      	b.n	801070a <netbuf_ref+0x7e>
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	68ba      	ldr	r2, [r7, #8]
 80106ee:	605a      	str	r2, [r3, #4]
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	88fa      	ldrh	r2, [r7, #6]
 80106f6:	811a      	strh	r2, [r3, #8]
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	6812      	ldr	r2, [r2, #0]
 80106fc:	891b      	ldrh	r3, [r3, #8]
 80106fe:	8153      	strh	r3, [r2, #10]
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	605a      	str	r2, [r3, #4]
 8010708:	2300      	movs	r3, #0
 801070a:	4618      	mov	r0, r3
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	08020788 	.word	0x08020788
 8010718:	08020840 	.word	0x08020840
 801071c:	080207d8 	.word	0x080207d8

08010720 <netbuf_data>:
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d108      	bne.n	8010744 <netbuf_data+0x24>
 8010732:	4b1b      	ldr	r3, [pc, #108]	@ (80107a0 <netbuf_data+0x80>)
 8010734:	22c6      	movs	r2, #198	@ 0xc6
 8010736:	491b      	ldr	r1, [pc, #108]	@ (80107a4 <netbuf_data+0x84>)
 8010738:	481b      	ldr	r0, [pc, #108]	@ (80107a8 <netbuf_data+0x88>)
 801073a:	f00d f825 	bl	801d788 <iprintf>
 801073e:	f06f 030f 	mvn.w	r3, #15
 8010742:	e029      	b.n	8010798 <netbuf_data+0x78>
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d108      	bne.n	801075c <netbuf_data+0x3c>
 801074a:	4b15      	ldr	r3, [pc, #84]	@ (80107a0 <netbuf_data+0x80>)
 801074c:	22c7      	movs	r2, #199	@ 0xc7
 801074e:	4917      	ldr	r1, [pc, #92]	@ (80107ac <netbuf_data+0x8c>)
 8010750:	4815      	ldr	r0, [pc, #84]	@ (80107a8 <netbuf_data+0x88>)
 8010752:	f00d f819 	bl	801d788 <iprintf>
 8010756:	f06f 030f 	mvn.w	r3, #15
 801075a:	e01d      	b.n	8010798 <netbuf_data+0x78>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d108      	bne.n	8010774 <netbuf_data+0x54>
 8010762:	4b0f      	ldr	r3, [pc, #60]	@ (80107a0 <netbuf_data+0x80>)
 8010764:	22c8      	movs	r2, #200	@ 0xc8
 8010766:	4912      	ldr	r1, [pc, #72]	@ (80107b0 <netbuf_data+0x90>)
 8010768:	480f      	ldr	r0, [pc, #60]	@ (80107a8 <netbuf_data+0x88>)
 801076a:	f00d f80d 	bl	801d788 <iprintf>
 801076e:	f06f 030f 	mvn.w	r3, #15
 8010772:	e011      	b.n	8010798 <netbuf_data+0x78>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <netbuf_data+0x62>
 801077c:	f06f 0301 	mvn.w	r3, #1
 8010780:	e00a      	b.n	8010798 <netbuf_data+0x78>
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	685b      	ldr	r3, [r3, #4]
 8010786:	685a      	ldr	r2, [r3, #4]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	685b      	ldr	r3, [r3, #4]
 8010790:	895a      	ldrh	r2, [r3, #10]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	801a      	strh	r2, [r3, #0]
 8010796:	2300      	movs	r3, #0
 8010798:	4618      	mov	r0, r3
 801079a:	3710      	adds	r7, #16
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	08020788 	.word	0x08020788
 80107a4:	08020890 	.word	0x08020890
 80107a8:	080207d8 	.word	0x080207d8
 80107ac:	080208ac 	.word	0x080208ac
 80107b0:	080208cc 	.word	0x080208cc

080107b4 <netbuf_next>:
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d108      	bne.n	80107d4 <netbuf_next+0x20>
 80107c2:	4b11      	ldr	r3, [pc, #68]	@ (8010808 <netbuf_next+0x54>)
 80107c4:	22e0      	movs	r2, #224	@ 0xe0
 80107c6:	4911      	ldr	r1, [pc, #68]	@ (801080c <netbuf_next+0x58>)
 80107c8:	4811      	ldr	r0, [pc, #68]	@ (8010810 <netbuf_next+0x5c>)
 80107ca:	f00c ffdd 	bl	801d788 <iprintf>
 80107ce:	f04f 33ff 	mov.w	r3, #4294967295
 80107d2:	e014      	b.n	80107fe <netbuf_next+0x4a>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d102      	bne.n	80107e4 <netbuf_next+0x30>
 80107de:	f04f 33ff 	mov.w	r3, #4294967295
 80107e2:	e00c      	b.n	80107fe <netbuf_next+0x4a>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	685b      	ldr	r3, [r3, #4]
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	605a      	str	r2, [r3, #4]
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	685b      	ldr	r3, [r3, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <netbuf_next+0x48>
 80107f8:	2301      	movs	r3, #1
 80107fa:	e000      	b.n	80107fe <netbuf_next+0x4a>
 80107fc:	2300      	movs	r3, #0
 80107fe:	4618      	mov	r0, r3
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	08020788 	.word	0x08020788
 801080c:	080208e8 	.word	0x080208e8
 8010810:	080207d8 	.word	0x080207d8

08010814 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801081e:	f009 f891 	bl	8019944 <sys_timeouts_sleeptime>
 8010822:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082a:	d10b      	bne.n	8010844 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801082c:	4813      	ldr	r0, [pc, #76]	@ (801087c <tcpip_timeouts_mbox_fetch+0x68>)
 801082e:	f00c fa02 	bl	801cc36 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010832:	2200      	movs	r2, #0
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f00c f8ba 	bl	801c9b0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801083c:	480f      	ldr	r0, [pc, #60]	@ (801087c <tcpip_timeouts_mbox_fetch+0x68>)
 801083e:	f00c f9eb 	bl	801cc18 <sys_mutex_lock>
    return;
 8010842:	e018      	b.n	8010876 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d102      	bne.n	8010850 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801084a:	f009 f841 	bl	80198d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801084e:	e7e6      	b.n	801081e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010850:	480a      	ldr	r0, [pc, #40]	@ (801087c <tcpip_timeouts_mbox_fetch+0x68>)
 8010852:	f00c f9f0 	bl	801cc36 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	6839      	ldr	r1, [r7, #0]
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f00c f8a8 	bl	801c9b0 <sys_arch_mbox_fetch>
 8010860:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010862:	4806      	ldr	r0, [pc, #24]	@ (801087c <tcpip_timeouts_mbox_fetch+0x68>)
 8010864:	f00c f9d8 	bl	801cc18 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801086e:	d102      	bne.n	8010876 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010870:	f009 f82e 	bl	80198d0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010874:	e7d3      	b.n	801081e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	2000b844 	.word	0x2000b844

08010880 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010888:	4810      	ldr	r0, [pc, #64]	@ (80108cc <tcpip_thread+0x4c>)
 801088a:	f00c f9c5 	bl	801cc18 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801088e:	4b10      	ldr	r3, [pc, #64]	@ (80108d0 <tcpip_thread+0x50>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d005      	beq.n	80108a2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010896:	4b0e      	ldr	r3, [pc, #56]	@ (80108d0 <tcpip_thread+0x50>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a0e      	ldr	r2, [pc, #56]	@ (80108d4 <tcpip_thread+0x54>)
 801089c:	6812      	ldr	r2, [r2, #0]
 801089e:	4610      	mov	r0, r2
 80108a0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80108a2:	f107 030c 	add.w	r3, r7, #12
 80108a6:	4619      	mov	r1, r3
 80108a8:	480b      	ldr	r0, [pc, #44]	@ (80108d8 <tcpip_thread+0x58>)
 80108aa:	f7ff ffb3 	bl	8010814 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d106      	bne.n	80108c2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80108b4:	4b09      	ldr	r3, [pc, #36]	@ (80108dc <tcpip_thread+0x5c>)
 80108b6:	2291      	movs	r2, #145	@ 0x91
 80108b8:	4909      	ldr	r1, [pc, #36]	@ (80108e0 <tcpip_thread+0x60>)
 80108ba:	480a      	ldr	r0, [pc, #40]	@ (80108e4 <tcpip_thread+0x64>)
 80108bc:	f00c ff64 	bl	801d788 <iprintf>
      continue;
 80108c0:	e003      	b.n	80108ca <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f000 f80f 	bl	80108e8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80108ca:	e7ea      	b.n	80108a2 <tcpip_thread+0x22>
 80108cc:	2000b844 	.word	0x2000b844
 80108d0:	2000b838 	.word	0x2000b838
 80108d4:	2000b83c 	.word	0x2000b83c
 80108d8:	2000b840 	.word	0x2000b840
 80108dc:	08020920 	.word	0x08020920
 80108e0:	08020950 	.word	0x08020950
 80108e4:	08020970 	.word	0x08020970

080108e8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b082      	sub	sp, #8
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	d026      	beq.n	8010946 <tcpip_thread_handle_msg+0x5e>
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	dc2b      	bgt.n	8010954 <tcpip_thread_handle_msg+0x6c>
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <tcpip_thread_handle_msg+0x1e>
 8010900:	2b01      	cmp	r3, #1
 8010902:	d015      	beq.n	8010930 <tcpip_thread_handle_msg+0x48>
 8010904:	e026      	b.n	8010954 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	6850      	ldr	r0, [r2, #4]
 801090e:	687a      	ldr	r2, [r7, #4]
 8010910:	6892      	ldr	r2, [r2, #8]
 8010912:	4611      	mov	r1, r2
 8010914:	4798      	blx	r3
 8010916:	4603      	mov	r3, r0
 8010918:	2b00      	cmp	r3, #0
 801091a:	d004      	beq.n	8010926 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	4618      	mov	r0, r3
 8010922:	f002 fb71 	bl	8013008 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010926:	6879      	ldr	r1, [r7, #4]
 8010928:	2009      	movs	r0, #9
 801092a:	f001 fcc9 	bl	80122c0 <memp_free>
      break;
 801092e:	e018      	b.n	8010962 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	6892      	ldr	r2, [r2, #8]
 8010938:	4610      	mov	r0, r2
 801093a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801093c:	6879      	ldr	r1, [r7, #4]
 801093e:	2008      	movs	r0, #8
 8010940:	f001 fcbe 	bl	80122c0 <memp_free>
      break;
 8010944:	e00d      	b.n	8010962 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	6892      	ldr	r2, [r2, #8]
 801094e:	4610      	mov	r0, r2
 8010950:	4798      	blx	r3
      break;
 8010952:	e006      	b.n	8010962 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010954:	4b05      	ldr	r3, [pc, #20]	@ (801096c <tcpip_thread_handle_msg+0x84>)
 8010956:	22cf      	movs	r2, #207	@ 0xcf
 8010958:	4905      	ldr	r1, [pc, #20]	@ (8010970 <tcpip_thread_handle_msg+0x88>)
 801095a:	4806      	ldr	r0, [pc, #24]	@ (8010974 <tcpip_thread_handle_msg+0x8c>)
 801095c:	f00c ff14 	bl	801d788 <iprintf>
      break;
 8010960:	bf00      	nop
  }
}
 8010962:	bf00      	nop
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	08020920 	.word	0x08020920
 8010970:	08020950 	.word	0x08020950
 8010974:	08020970 	.word	0x08020970

08010978 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010984:	481a      	ldr	r0, [pc, #104]	@ (80109f0 <tcpip_inpkt+0x78>)
 8010986:	f00c f86e 	bl	801ca66 <sys_mbox_valid>
 801098a:	4603      	mov	r3, r0
 801098c:	2b00      	cmp	r3, #0
 801098e:	d105      	bne.n	801099c <tcpip_inpkt+0x24>
 8010990:	4b18      	ldr	r3, [pc, #96]	@ (80109f4 <tcpip_inpkt+0x7c>)
 8010992:	22fc      	movs	r2, #252	@ 0xfc
 8010994:	4918      	ldr	r1, [pc, #96]	@ (80109f8 <tcpip_inpkt+0x80>)
 8010996:	4819      	ldr	r0, [pc, #100]	@ (80109fc <tcpip_inpkt+0x84>)
 8010998:	f00c fef6 	bl	801d788 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801099c:	2009      	movs	r0, #9
 801099e:	f001 fc19 	bl	80121d4 <memp_malloc>
 80109a2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80109aa:	f04f 33ff 	mov.w	r3, #4294967295
 80109ae:	e01a      	b.n	80109e6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	2200      	movs	r2, #0
 80109b4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	68fa      	ldr	r2, [r7, #12]
 80109ba:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80109c8:	6979      	ldr	r1, [r7, #20]
 80109ca:	4809      	ldr	r0, [pc, #36]	@ (80109f0 <tcpip_inpkt+0x78>)
 80109cc:	f00b ffd6 	bl	801c97c <sys_mbox_trypost>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d006      	beq.n	80109e4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80109d6:	6979      	ldr	r1, [r7, #20]
 80109d8:	2009      	movs	r0, #9
 80109da:	f001 fc71 	bl	80122c0 <memp_free>
    return ERR_MEM;
 80109de:	f04f 33ff 	mov.w	r3, #4294967295
 80109e2:	e000      	b.n	80109e6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80109e4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	2000b840 	.word	0x2000b840
 80109f4:	08020920 	.word	0x08020920
 80109f8:	08020998 	.word	0x08020998
 80109fc:	08020970 	.word	0x08020970

08010a00 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010a10:	f003 0318 	and.w	r3, r3, #24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d006      	beq.n	8010a26 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010a18:	4a08      	ldr	r2, [pc, #32]	@ (8010a3c <tcpip_input+0x3c>)
 8010a1a:	6839      	ldr	r1, [r7, #0]
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff ffab 	bl	8010978 <tcpip_inpkt>
 8010a22:	4603      	mov	r3, r0
 8010a24:	e005      	b.n	8010a32 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010a26:	4a06      	ldr	r2, [pc, #24]	@ (8010a40 <tcpip_input+0x40>)
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff ffa4 	bl	8010978 <tcpip_inpkt>
 8010a30:	4603      	mov	r3, r0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	0801c769 	.word	0x0801c769
 8010a40:	0801b671 	.word	0x0801b671

08010a44 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010a4e:	4819      	ldr	r0, [pc, #100]	@ (8010ab4 <tcpip_try_callback+0x70>)
 8010a50:	f00c f809 	bl	801ca66 <sys_mbox_valid>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d106      	bne.n	8010a68 <tcpip_try_callback+0x24>
 8010a5a:	4b17      	ldr	r3, [pc, #92]	@ (8010ab8 <tcpip_try_callback+0x74>)
 8010a5c:	f240 125d 	movw	r2, #349	@ 0x15d
 8010a60:	4916      	ldr	r1, [pc, #88]	@ (8010abc <tcpip_try_callback+0x78>)
 8010a62:	4817      	ldr	r0, [pc, #92]	@ (8010ac0 <tcpip_try_callback+0x7c>)
 8010a64:	f00c fe90 	bl	801d788 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010a68:	2008      	movs	r0, #8
 8010a6a:	f001 fbb3 	bl	80121d4 <memp_malloc>
 8010a6e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d102      	bne.n	8010a7c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010a76:	f04f 33ff 	mov.w	r3, #4294967295
 8010a7a:	e017      	b.n	8010aac <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010a8e:	68f9      	ldr	r1, [r7, #12]
 8010a90:	4808      	ldr	r0, [pc, #32]	@ (8010ab4 <tcpip_try_callback+0x70>)
 8010a92:	f00b ff73 	bl	801c97c <sys_mbox_trypost>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010a9c:	68f9      	ldr	r1, [r7, #12]
 8010a9e:	2008      	movs	r0, #8
 8010aa0:	f001 fc0e 	bl	80122c0 <memp_free>
    return ERR_MEM;
 8010aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa8:	e000      	b.n	8010aac <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3710      	adds	r7, #16
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	2000b840 	.word	0x2000b840
 8010ab8:	08020920 	.word	0x08020920
 8010abc:	08020998 	.word	0x08020998
 8010ac0:	08020970 	.word	0x08020970

08010ac4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010ad0:	4806      	ldr	r0, [pc, #24]	@ (8010aec <tcpip_send_msg_wait_sem+0x28>)
 8010ad2:	f00c f8a1 	bl	801cc18 <sys_mutex_lock>
  fn(apimsg);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	68b8      	ldr	r0, [r7, #8]
 8010ada:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010adc:	4803      	ldr	r0, [pc, #12]	@ (8010aec <tcpip_send_msg_wait_sem+0x28>)
 8010ade:	f00c f8aa 	bl	801cc36 <sys_mutex_unlock>
  return ERR_OK;
 8010ae2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3710      	adds	r7, #16
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	2000b844 	.word	0x2000b844

08010af0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af02      	add	r7, sp, #8
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010afa:	f000 fec1 	bl	8011880 <lwip_init>

  tcpip_init_done = initfunc;
 8010afe:	4a17      	ldr	r2, [pc, #92]	@ (8010b5c <tcpip_init+0x6c>)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010b04:	4a16      	ldr	r2, [pc, #88]	@ (8010b60 <tcpip_init+0x70>)
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010b0a:	2106      	movs	r1, #6
 8010b0c:	4815      	ldr	r0, [pc, #84]	@ (8010b64 <tcpip_init+0x74>)
 8010b0e:	f00b ff01 	bl	801c914 <sys_mbox_new>
 8010b12:	4603      	mov	r3, r0
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d006      	beq.n	8010b26 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010b18:	4b13      	ldr	r3, [pc, #76]	@ (8010b68 <tcpip_init+0x78>)
 8010b1a:	f240 2261 	movw	r2, #609	@ 0x261
 8010b1e:	4913      	ldr	r1, [pc, #76]	@ (8010b6c <tcpip_init+0x7c>)
 8010b20:	4813      	ldr	r0, [pc, #76]	@ (8010b70 <tcpip_init+0x80>)
 8010b22:	f00c fe31 	bl	801d788 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010b26:	4813      	ldr	r0, [pc, #76]	@ (8010b74 <tcpip_init+0x84>)
 8010b28:	f00c f85a 	bl	801cbe0 <sys_mutex_new>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d006      	beq.n	8010b40 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010b32:	4b0d      	ldr	r3, [pc, #52]	@ (8010b68 <tcpip_init+0x78>)
 8010b34:	f240 2265 	movw	r2, #613	@ 0x265
 8010b38:	490f      	ldr	r1, [pc, #60]	@ (8010b78 <tcpip_init+0x88>)
 8010b3a:	480d      	ldr	r0, [pc, #52]	@ (8010b70 <tcpip_init+0x80>)
 8010b3c:	f00c fe24 	bl	801d788 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010b40:	2300      	movs	r3, #0
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b48:	2200      	movs	r2, #0
 8010b4a:	490c      	ldr	r1, [pc, #48]	@ (8010b7c <tcpip_init+0x8c>)
 8010b4c:	480c      	ldr	r0, [pc, #48]	@ (8010b80 <tcpip_init+0x90>)
 8010b4e:	f00c f87f 	bl	801cc50 <sys_thread_new>
}
 8010b52:	bf00      	nop
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	2000b838 	.word	0x2000b838
 8010b60:	2000b83c 	.word	0x2000b83c
 8010b64:	2000b840 	.word	0x2000b840
 8010b68:	08020920 	.word	0x08020920
 8010b6c:	080209a8 	.word	0x080209a8
 8010b70:	08020970 	.word	0x08020970
 8010b74:	2000b844 	.word	0x2000b844
 8010b78:	080209cc 	.word	0x080209cc
 8010b7c:	08010881 	.word	0x08010881
 8010b80:	080209f0 	.word	0x080209f0

08010b84 <fs_open>:
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b084      	sub	sp, #16
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <fs_open+0x16>
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d102      	bne.n	8010ba0 <fs_open+0x1c>
 8010b9a:	f06f 030f 	mvn.w	r3, #15
 8010b9e:	e028      	b.n	8010bf2 <fs_open+0x6e>
 8010ba0:	4b16      	ldr	r3, [pc, #88]	@ (8010bfc <fs_open+0x78>)
 8010ba2:	60fb      	str	r3, [r7, #12]
 8010ba4:	e020      	b.n	8010be8 <fs_open+0x64>
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	4619      	mov	r1, r3
 8010bac:	6838      	ldr	r0, [r7, #0]
 8010bae:	f7ef fb2f 	bl	8000210 <strcmp>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d114      	bne.n	8010be2 <fs_open+0x5e>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	689a      	ldr	r2, [r3, #8]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	601a      	str	r2, [r3, #0]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	68da      	ldr	r2, [r3, #12]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	605a      	str	r2, [r3, #4]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	68da      	ldr	r2, [r3, #12]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	609a      	str	r2, [r3, #8]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	60da      	str	r2, [r3, #12]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	7c1a      	ldrb	r2, [r3, #16]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	741a      	strb	r2, [r3, #16]
 8010bde:	2300      	movs	r3, #0
 8010be0:	e007      	b.n	8010bf2 <fs_open+0x6e>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	60fb      	str	r3, [r7, #12]
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1db      	bne.n	8010ba6 <fs_open+0x22>
 8010bee:	f06f 0305 	mvn.w	r3, #5
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	08024274 	.word	0x08024274

08010c00 <fs_close>:
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	bf00      	nop
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <fs_bytes_left>:
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	685a      	ldr	r2, [r3, #4]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	4618      	mov	r0, r3
 8010c28:	370c      	adds	r7, #12
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr

08010c32 <http_state_init>:
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b082      	sub	sp, #8
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	222c      	movs	r2, #44	@ 0x2c
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f00c ff34 	bl	801daac <memset>
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <http_state_alloc>:
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	202c      	movs	r0, #44	@ 0x2c
 8010c54:	f001 f91a 	bl	8011e8c <mem_malloc>
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <http_state_alloc+0x1a>
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffe6 	bl	8010c32 <http_state_init>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <http_state_eof>:
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	695b      	ldr	r3, [r3, #20]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d007      	beq.n	8010c90 <http_state_eof+0x20>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	695b      	ldr	r3, [r3, #20]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7ff ffbb 	bl	8010c00 <fs_close>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	615a      	str	r2, [r3, #20]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6a1b      	ldr	r3, [r3, #32]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d007      	beq.n	8010ca8 <http_state_eof+0x38>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f002 f9b3 	bl	8013008 <pbuf_free>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	621a      	str	r2, [r3, #32]
 8010ca8:	bf00      	nop
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <http_state_free>:
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d005      	beq.n	8010cca <http_state_free+0x1a>
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff ffd6 	bl	8010c70 <http_state_eof>
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 ff47 	bl	8011b58 <mem_free>
 8010cca:	bf00      	nop
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
	...

08010cd4 <http_write>:
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b086      	sub	sp, #24
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	70fb      	strb	r3, [r7, #3]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d106      	bne.n	8010cf6 <http_write+0x22>
 8010ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8010d9c <http_write+0xc8>)
 8010cea:	f240 2219 	movw	r2, #537	@ 0x219
 8010cee:	492c      	ldr	r1, [pc, #176]	@ (8010da0 <http_write+0xcc>)
 8010cf0:	482c      	ldr	r0, [pc, #176]	@ (8010da4 <http_write+0xd0>)
 8010cf2:	f00c fd49 	bl	801d788 <iprintf>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	82fb      	strh	r3, [r7, #22]
 8010cfc:	8afb      	ldrh	r3, [r7, #22]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d101      	bne.n	8010d06 <http_write+0x32>
 8010d02:	2300      	movs	r3, #0
 8010d04:	e045      	b.n	8010d92 <http_write+0xbe>
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d0c:	82bb      	strh	r3, [r7, #20]
 8010d0e:	8aba      	ldrh	r2, [r7, #20]
 8010d10:	8afb      	ldrh	r3, [r7, #22]
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d201      	bcs.n	8010d1a <http_write+0x46>
 8010d16:	8abb      	ldrh	r3, [r7, #20]
 8010d18:	82fb      	strh	r3, [r7, #22]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d1e:	005b      	lsls	r3, r3, #1
 8010d20:	82bb      	strh	r3, [r7, #20]
 8010d22:	8afa      	ldrh	r2, [r7, #22]
 8010d24:	8abb      	ldrh	r3, [r7, #20]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d901      	bls.n	8010d2e <http_write+0x5a>
 8010d2a:	8abb      	ldrh	r3, [r7, #20]
 8010d2c:	82fb      	strh	r3, [r7, #22]
 8010d2e:	78fb      	ldrb	r3, [r7, #3]
 8010d30:	8afa      	ldrh	r2, [r7, #22]
 8010d32:	68b9      	ldr	r1, [r7, #8]
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f006 ff63 	bl	8017c00 <tcp_write>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	74fb      	strb	r3, [r7, #19]
 8010d3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d46:	d10f      	bne.n	8010d68 <http_write+0x94>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d004      	beq.n	8010d5c <http_write+0x88>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d58:	2b08      	cmp	r3, #8
 8010d5a:	d902      	bls.n	8010d62 <http_write+0x8e>
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	82fb      	strh	r3, [r7, #22]
 8010d60:	e002      	b.n	8010d68 <http_write+0x94>
 8010d62:	8afb      	ldrh	r3, [r7, #22]
 8010d64:	085b      	lsrs	r3, r3, #1
 8010d66:	82fb      	strh	r3, [r7, #22]
 8010d68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d70:	d102      	bne.n	8010d78 <http_write+0xa4>
 8010d72:	8afb      	ldrh	r3, [r7, #22]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d8da      	bhi.n	8010d2e <http_write+0x5a>
 8010d78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d103      	bne.n	8010d88 <http_write+0xb4>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	8afa      	ldrh	r2, [r7, #22]
 8010d84:	801a      	strh	r2, [r3, #0]
 8010d86:	e002      	b.n	8010d8e <http_write+0xba>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	801a      	strh	r2, [r3, #0]
 8010d8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08020a40 	.word	0x08020a40
 8010da0:	08020a78 	.word	0x08020a78
 8010da4:	08020a88 	.word	0x08020a88

08010da8 <http_close_or_abort_conn>:
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b086      	sub	sp, #24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	4613      	mov	r3, r2
 8010db4:	71fb      	strb	r3, [r7, #7]
 8010db6:	2100      	movs	r1, #0
 8010db8:	68f8      	ldr	r0, [r7, #12]
 8010dba:	f003 ffe5 	bl	8014d88 <tcp_arg>
 8010dbe:	2100      	movs	r1, #0
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f003 fff3 	bl	8014dac <tcp_recv>
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f004 f833 	bl	8014e34 <tcp_err>
 8010dce:	2200      	movs	r2, #0
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f004 f868 	bl	8014ea8 <tcp_poll>
 8010dd8:	2100      	movs	r1, #0
 8010dda:	68f8      	ldr	r0, [r7, #12]
 8010ddc:	f004 f808 	bl	8014df0 <tcp_sent>
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d002      	beq.n	8010dec <http_close_or_abort_conn+0x44>
 8010de6:	68b8      	ldr	r0, [r7, #8]
 8010de8:	f7ff ff62 	bl	8010cb0 <http_state_free>
 8010dec:	79fb      	ldrb	r3, [r7, #7]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d004      	beq.n	8010dfc <http_close_or_abort_conn+0x54>
 8010df2:	68f8      	ldr	r0, [r7, #12]
 8010df4:	f002 ff08 	bl	8013c08 <tcp_abort>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	e00f      	b.n	8010e1c <http_close_or_abort_conn+0x74>
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f002 fdbd 	bl	801397c <tcp_close>
 8010e02:	4603      	mov	r3, r0
 8010e04:	75fb      	strb	r3, [r7, #23]
 8010e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d004      	beq.n	8010e18 <http_close_or_abort_conn+0x70>
 8010e0e:	2204      	movs	r2, #4
 8010e10:	4904      	ldr	r1, [pc, #16]	@ (8010e24 <http_close_or_abort_conn+0x7c>)
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f004 f848 	bl	8014ea8 <tcp_poll>
 8010e18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3718      	adds	r7, #24
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}
 8010e24:	080114eb 	.word	0x080114eb

08010e28 <http_close_conn>:
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
 8010e32:	2200      	movs	r2, #0
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f7ff ffb6 	bl	8010da8 <http_close_or_abort_conn>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <http_eof>:
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b082      	sub	sp, #8
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	6039      	str	r1, [r7, #0]
 8010e50:	6839      	ldr	r1, [r7, #0]
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f7ff ffe8 	bl	8010e28 <http_close_conn>
 8010e58:	bf00      	nop
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <http_check_eof>:
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	695b      	ldr	r3, [r3, #20]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d105      	bne.n	8010e7e <http_check_eof+0x1e>
 8010e72:	6839      	ldr	r1, [r7, #0]
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7ff ffe6 	bl	8010e46 <http_eof>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	e016      	b.n	8010eac <http_check_eof+0x4c>
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	695b      	ldr	r3, [r3, #20]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7ff fec6 	bl	8010c14 <fs_bytes_left>
 8010e88:	60f8      	str	r0, [r7, #12]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dc05      	bgt.n	8010e9c <http_check_eof+0x3c>
 8010e90:	6839      	ldr	r1, [r7, #0]
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	f7ff ffd7 	bl	8010e46 <http_eof>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	e007      	b.n	8010eac <http_check_eof+0x4c>
 8010e9c:	4b05      	ldr	r3, [pc, #20]	@ (8010eb4 <http_check_eof+0x54>)
 8010e9e:	f240 429d 	movw	r2, #1181	@ 0x49d
 8010ea2:	4905      	ldr	r1, [pc, #20]	@ (8010eb8 <http_check_eof+0x58>)
 8010ea4:	4805      	ldr	r0, [pc, #20]	@ (8010ebc <http_check_eof+0x5c>)
 8010ea6:	f00c fc6f 	bl	801d788 <iprintf>
 8010eaa:	2301      	movs	r3, #1
 8010eac:	4618      	mov	r0, r3
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	08020a40 	.word	0x08020a40
 8010eb8:	08020ab0 	.word	0x08020ab0
 8010ebc:	08020a88 	.word	0x08020a88

08010ec0 <http_send_data_nonssi>:
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
 8010eca:	2300      	movs	r3, #0
 8010ecc:	73fb      	strb	r3, [r7, #15]
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ed2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d803      	bhi.n	8010ee2 <http_send_data_nonssi+0x22>
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	e001      	b.n	8010ee6 <http_send_data_nonssi+0x26>
 8010ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ee6:	81bb      	strh	r3, [r7, #12]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	6999      	ldr	r1, [r3, #24]
 8010eec:	f107 020c 	add.w	r2, r7, #12
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f7ff feee 	bl	8010cd4 <http_write>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	73bb      	strb	r3, [r7, #14]
 8010efc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10d      	bne.n	8010f20 <http_send_data_nonssi+0x60>
 8010f04:	2301      	movs	r3, #1
 8010f06:	73fb      	strb	r3, [r7, #15]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	699b      	ldr	r3, [r3, #24]
 8010f0c:	89ba      	ldrh	r2, [r7, #12]
 8010f0e:	441a      	add	r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	619a      	str	r2, [r3, #24]
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f18:	89ba      	ldrh	r2, [r7, #12]
 8010f1a:	1a9a      	subs	r2, r3, r2
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <http_send>:
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b084      	sub	sp, #16
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	6039      	str	r1, [r7, #0]
 8010f34:	2300      	movs	r3, #0
 8010f36:	73fb      	strb	r3, [r7, #15]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d101      	bne.n	8010f42 <http_send+0x18>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e025      	b.n	8010f8e <http_send+0x64>
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d108      	bne.n	8010f5c <http_send+0x32>
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7ff ff87 	bl	8010e60 <http_check_eof>
 8010f52:	4603      	mov	r3, r0
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d101      	bne.n	8010f5c <http_send+0x32>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e018      	b.n	8010f8e <http_send+0x64>
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7ff ffae 	bl	8010ec0 <http_send_data_nonssi>
 8010f64:	4603      	mov	r3, r0
 8010f66:	73fb      	strb	r3, [r7, #15]
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10d      	bne.n	8010f8c <http_send+0x62>
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	695b      	ldr	r3, [r3, #20]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7ff fe4d 	bl	8010c14 <fs_bytes_left>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	dc05      	bgt.n	8010f8c <http_send+0x62>
 8010f80:	6839      	ldr	r1, [r7, #0]
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff ff5f 	bl	8010e46 <http_eof>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	e000      	b.n	8010f8e <http_send+0x64>
 8010f8c:	7bfb      	ldrb	r3, [r7, #15]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
	...

08010f98 <http_get_404_file>:
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8011018 <http_get_404_file+0x80>)
 8010fa6:	601a      	str	r2, [r3, #0]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7ff fde7 	bl	8010b84 <fs_open>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	73fb      	strb	r3, [r7, #15]
 8010fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d024      	beq.n	801100c <http_get_404_file+0x74>
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	4a15      	ldr	r2, [pc, #84]	@ (801101c <http_get_404_file+0x84>)
 8010fc6:	601a      	str	r2, [r3, #0]
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	f7ff fdd7 	bl	8010b84 <fs_open>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	73fb      	strb	r3, [r7, #15]
 8010fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d014      	beq.n	801100c <http_get_404_file+0x74>
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8011020 <http_get_404_file+0x88>)
 8010fe6:	601a      	str	r2, [r3, #0]
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4619      	mov	r1, r3
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	f7ff fdc7 	bl	8010b84 <fs_open>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	73fb      	strb	r3, [r7, #15]
 8010ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d004      	beq.n	801100c <http_get_404_file+0x74>
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	2200      	movs	r2, #0
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	2300      	movs	r3, #0
 801100a:	e000      	b.n	801100e <http_get_404_file+0x76>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	4618      	mov	r0, r3
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	08020ae8 	.word	0x08020ae8
 801101c:	08020af4 	.word	0x08020af4
 8011020:	08020b00 	.word	0x08020b00

08011024 <http_parse_request>:
 8011024:	b580      	push	{r7, lr}
 8011026:	b08e      	sub	sp, #56	@ 0x38
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	627b      	str	r3, [r7, #36]	@ 0x24
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <http_parse_request+0x24>
 801103a:	4b65      	ldr	r3, [pc, #404]	@ (80111d0 <http_parse_request+0x1ac>)
 801103c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8011040:	4964      	ldr	r1, [pc, #400]	@ (80111d4 <http_parse_request+0x1b0>)
 8011042:	4865      	ldr	r0, [pc, #404]	@ (80111d8 <http_parse_request+0x1b4>)
 8011044:	f00c fba0 	bl	801d788 <iprintf>
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d106      	bne.n	801105c <http_parse_request+0x38>
 801104e:	4b60      	ldr	r3, [pc, #384]	@ (80111d0 <http_parse_request+0x1ac>)
 8011050:	f240 72af 	movw	r2, #1967	@ 0x7af
 8011054:	4961      	ldr	r1, [pc, #388]	@ (80111dc <http_parse_request+0x1b8>)
 8011056:	4860      	ldr	r0, [pc, #384]	@ (80111d8 <http_parse_request+0x1b4>)
 8011058:	f00c fb96 	bl	801d788 <iprintf>
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	695b      	ldr	r3, [r3, #20]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d103      	bne.n	801106c <http_parse_request+0x48>
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	699b      	ldr	r3, [r3, #24]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <http_parse_request+0x4e>
 801106c:	f06f 0307 	mvn.w	r3, #7
 8011070:	e0a9      	b.n	80111c6 <http_parse_request+0x1a2>
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	6a1b      	ldr	r3, [r3, #32]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d103      	bne.n	8011082 <http_parse_request+0x5e>
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801107e:	621a      	str	r2, [r3, #32]
 8011080:	e005      	b.n	801108e <http_parse_request+0x6a>
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	6a1b      	ldr	r3, [r3, #32]
 8011086:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011088:	4618      	mov	r0, r3
 801108a:	f002 f88b 	bl	80131a4 <pbuf_cat>
 801108e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011090:	f002 f860 	bl	8013154 <pbuf_ref>
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	6a1b      	ldr	r3, [r3, #32]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d012      	beq.n	80110c4 <http_parse_request+0xa0>
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	6a1b      	ldr	r3, [r3, #32]
 80110a2:	891b      	ldrh	r3, [r3, #8]
 80110a4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80110a8:	4293      	cmp	r3, r2
 80110aa:	bf28      	it	cs
 80110ac:	4613      	movcs	r3, r2
 80110ae:	867b      	strh	r3, [r7, #50]	@ 0x32
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	6a18      	ldr	r0, [r3, #32]
 80110b4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80110b6:	2300      	movs	r3, #0
 80110b8:	4949      	ldr	r1, [pc, #292]	@ (80111e0 <http_parse_request+0x1bc>)
 80110ba:	f002 f9ab 	bl	8013414 <pbuf_copy_partial>
 80110be:	4b48      	ldr	r3, [pc, #288]	@ (80111e0 <http_parse_request+0x1bc>)
 80110c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80110c2:	e005      	b.n	80110d0 <http_parse_request+0xac>
 80110c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	895b      	ldrh	r3, [r3, #10]
 80110ce:	867b      	strh	r3, [r7, #50]	@ 0x32
 80110d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80110d2:	2b06      	cmp	r3, #6
 80110d4:	d962      	bls.n	801119c <http_parse_request+0x178>
 80110d6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80110d8:	461a      	mov	r2, r3
 80110da:	4942      	ldr	r1, [pc, #264]	@ (80111e4 <http_parse_request+0x1c0>)
 80110dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80110de:	f000 fb99 	bl	8011814 <lwip_strnstr>
 80110e2:	6238      	str	r0, [r7, #32]
 80110e4:	6a3b      	ldr	r3, [r7, #32]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d058      	beq.n	801119c <http_parse_request+0x178>
 80110ea:	2300      	movs	r3, #0
 80110ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110ee:	2204      	movs	r2, #4
 80110f0:	493d      	ldr	r1, [pc, #244]	@ (80111e8 <http_parse_request+0x1c4>)
 80110f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80110f4:	f00c fcef 	bl	801dad6 <strncmp>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d116      	bne.n	801112c <http_parse_request+0x108>
 80110fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011100:	3303      	adds	r3, #3
 8011102:	61fb      	str	r3, [r7, #28]
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	1c5a      	adds	r2, r3, #1
 8011108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	b29b      	uxth	r3, r3
 801110e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011110:	1ad3      	subs	r3, r2, r3
 8011112:	837b      	strh	r3, [r7, #26]
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	3301      	adds	r3, #1
 8011118:	8b7a      	ldrh	r2, [r7, #26]
 801111a:	4934      	ldr	r1, [pc, #208]	@ (80111ec <http_parse_request+0x1c8>)
 801111c:	4618      	mov	r0, r3
 801111e:	f000 fb79 	bl	8011814 <lwip_strnstr>
 8011122:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011126:	2b00      	cmp	r3, #0
 8011128:	d111      	bne.n	801114e <http_parse_request+0x12a>
 801112a:	e006      	b.n	801113a <http_parse_request+0x116>
 801112c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801112e:	3304      	adds	r3, #4
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
 8011134:	f06f 030f 	mvn.w	r3, #15
 8011138:	e045      	b.n	80111c6 <http_parse_request+0x1a2>
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	3301      	adds	r3, #1
 801113e:	8b7a      	ldrh	r2, [r7, #26]
 8011140:	4928      	ldr	r1, [pc, #160]	@ (80111e4 <http_parse_request+0x1c0>)
 8011142:	4618      	mov	r0, r3
 8011144:	f000 fb66 	bl	8011814 <lwip_strnstr>
 8011148:	62b8      	str	r0, [r7, #40]	@ 0x28
 801114a:	2301      	movs	r3, #1
 801114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	3301      	adds	r3, #1
 8011152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	833b      	strh	r3, [r7, #24]
 8011158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115a:	2b00      	cmp	r3, #0
 801115c:	d01e      	beq.n	801119c <http_parse_request+0x178>
 801115e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	429a      	cmp	r2, r3
 8011164:	d91a      	bls.n	801119c <http_parse_request+0x178>
 8011166:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011168:	461a      	mov	r2, r3
 801116a:	4921      	ldr	r1, [pc, #132]	@ (80111f0 <http_parse_request+0x1cc>)
 801116c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801116e:	f000 fb51 	bl	8011814 <lwip_strnstr>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d011      	beq.n	801119c <http_parse_request+0x178>
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	3301      	adds	r3, #1
 801117c:	617b      	str	r3, [r7, #20]
 801117e:	69fb      	ldr	r3, [r7, #28]
 8011180:	2200      	movs	r2, #0
 8011182:	701a      	strb	r2, [r3, #0]
 8011184:	8b3b      	ldrh	r3, [r7, #24]
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	4413      	add	r3, r2
 801118a:	2200      	movs	r2, #0
 801118c:	701a      	strb	r2, [r3, #0]
 801118e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011190:	6979      	ldr	r1, [r7, #20]
 8011192:	68b8      	ldr	r0, [r7, #8]
 8011194:	f000 f82e 	bl	80111f4 <http_find_file>
 8011198:	4603      	mov	r3, r0
 801119a:	e014      	b.n	80111c6 <http_parse_request+0x1a2>
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	6a1b      	ldr	r3, [r3, #32]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f001 ffbf 	bl	8013124 <pbuf_clen>
 80111a6:	4603      	mov	r3, r0
 80111a8:	827b      	strh	r3, [r7, #18]
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	891b      	ldrh	r3, [r3, #8]
 80111b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80111b4:	d205      	bcs.n	80111c2 <http_parse_request+0x19e>
 80111b6:	8a7b      	ldrh	r3, [r7, #18]
 80111b8:	2b05      	cmp	r3, #5
 80111ba:	d802      	bhi.n	80111c2 <http_parse_request+0x19e>
 80111bc:	f06f 0304 	mvn.w	r3, #4
 80111c0:	e001      	b.n	80111c6 <http_parse_request+0x1a2>
 80111c2:	f06f 030f 	mvn.w	r3, #15
 80111c6:	4618      	mov	r0, r3
 80111c8:	3738      	adds	r7, #56	@ 0x38
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	08020a40 	.word	0x08020a40
 80111d4:	08020b0c 	.word	0x08020b0c
 80111d8:	08020a88 	.word	0x08020a88
 80111dc:	08020b18 	.word	0x08020b18
 80111e0:	2000b848 	.word	0x2000b848
 80111e4:	08020b24 	.word	0x08020b24
 80111e8:	08020b28 	.word	0x08020b28
 80111ec:	08020b30 	.word	0x08020b30
 80111f0:	08020b34 	.word	0x08020b34

080111f4 <http_find_file>:
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b092      	sub	sp, #72	@ 0x48
 80111f8:	af02      	add	r7, sp, #8
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
 8011200:	2300      	movs	r3, #0
 8011202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011204:	2300      	movs	r3, #0
 8011206:	637b      	str	r3, [r7, #52]	@ 0x34
 8011208:	2300      	movs	r3, #0
 801120a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	4618      	mov	r0, r3
 8011212:	f7ef f85d 	bl	80002d0 <strlen>
 8011216:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801121a:	2b00      	cmp	r3, #0
 801121c:	d06b      	beq.n	80112f6 <http_find_file+0x102>
 801121e:	68ba      	ldr	r2, [r7, #8]
 8011220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011222:	3b01      	subs	r3, #1
 8011224:	4413      	add	r3, r2
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	2b2f      	cmp	r3, #47	@ 0x2f
 801122a:	d164      	bne.n	80112f6 <http_find_file+0x102>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	4a53      	ldr	r2, [pc, #332]	@ (801137c <http_find_file+0x188>)
 8011230:	4293      	cmp	r3, r2
 8011232:	d102      	bne.n	801123a <http_find_file+0x46>
 8011234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011236:	2b01      	cmp	r3, #1
 8011238:	d15d      	bne.n	80112f6 <http_find_file+0x102>
 801123a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123c:	3b01      	subs	r3, #1
 801123e:	2b3f      	cmp	r3, #63	@ 0x3f
 8011240:	bf28      	it	cs
 8011242:	233f      	movcs	r3, #63	@ 0x3f
 8011244:	627b      	str	r3, [r7, #36]	@ 0x24
 8011246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011248:	2b00      	cmp	r3, #0
 801124a:	d00a      	beq.n	8011262 <http_find_file+0x6e>
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011250:	4619      	mov	r1, r3
 8011252:	484a      	ldr	r0, [pc, #296]	@ (801137c <http_find_file+0x188>)
 8011254:	f00c fd19 	bl	801dc8a <memcpy>
 8011258:	4a48      	ldr	r2, [pc, #288]	@ (801137c <http_find_file+0x188>)
 801125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801125c:	4413      	add	r3, r2
 801125e:	2200      	movs	r2, #0
 8011260:	701a      	strb	r2, [r3, #0]
 8011262:	2300      	movs	r3, #0
 8011264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011266:	e043      	b.n	80112f0 <http_find_file+0xfc>
 8011268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801126a:	2b00      	cmp	r3, #0
 801126c:	d028      	beq.n	80112c0 <http_find_file+0xcc>
 801126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011270:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8011274:	623b      	str	r3, [r7, #32]
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d01e      	beq.n	80112ba <http_find_file+0xc6>
 801127c:	4a40      	ldr	r2, [pc, #256]	@ (8011380 <http_find_file+0x18c>)
 801127e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011284:	4618      	mov	r0, r3
 8011286:	f7ef f823 	bl	80002d0 <strlen>
 801128a:	61f8      	str	r0, [r7, #28]
 801128c:	69fa      	ldr	r2, [r7, #28]
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	4293      	cmp	r3, r2
 8011292:	bf28      	it	cs
 8011294:	4613      	movcs	r3, r2
 8011296:	61bb      	str	r3, [r7, #24]
 8011298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801129a:	4a38      	ldr	r2, [pc, #224]	@ (801137c <http_find_file+0x188>)
 801129c:	1898      	adds	r0, r3, r2
 801129e:	4a38      	ldr	r2, [pc, #224]	@ (8011380 <http_find_file+0x18c>)
 80112a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112a6:	69ba      	ldr	r2, [r7, #24]
 80112a8:	4619      	mov	r1, r3
 80112aa:	f00c fcee 	bl	801dc8a <memcpy>
 80112ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	4413      	add	r3, r2
 80112b4:	4a31      	ldr	r2, [pc, #196]	@ (801137c <http_find_file+0x188>)
 80112b6:	2100      	movs	r1, #0
 80112b8:	54d1      	strb	r1, [r2, r3]
 80112ba:	4b30      	ldr	r3, [pc, #192]	@ (801137c <http_find_file+0x188>)
 80112bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80112be:	e004      	b.n	80112ca <http_find_file+0xd6>
 80112c0:	4a2f      	ldr	r2, [pc, #188]	@ (8011380 <http_find_file+0x18c>)
 80112c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff fc58 	bl	8010b84 <fs_open>
 80112d4:	4603      	mov	r3, r0
 80112d6:	75fb      	strb	r3, [r7, #23]
 80112d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d104      	bne.n	80112ea <http_find_file+0xf6>
 80112e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112e2:	60bb      	str	r3, [r7, #8]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112e8:	e005      	b.n	80112f6 <http_find_file+0x102>
 80112ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ec:	3301      	adds	r3, #1
 80112ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112f2:	2b04      	cmp	r3, #4
 80112f4:	d9b8      	bls.n	8011268 <http_find_file+0x74>
 80112f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d124      	bne.n	8011346 <http_find_file+0x152>
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	213f      	movs	r1, #63	@ 0x3f
 8011300:	4618      	mov	r0, r3
 8011302:	f00c fbdb 	bl	801dabc <strchr>
 8011306:	6378      	str	r0, [r7, #52]	@ 0x34
 8011308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801130a:	2b00      	cmp	r3, #0
 801130c:	d005      	beq.n	801131a <http_find_file+0x126>
 801130e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011310:	2200      	movs	r2, #0
 8011312:	701a      	strb	r2, [r3, #0]
 8011314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011316:	3301      	adds	r3, #1
 8011318:	637b      	str	r3, [r7, #52]	@ 0x34
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	4611      	mov	r1, r2
 8011320:	4618      	mov	r0, r3
 8011322:	f7ff fc2f 	bl	8010b84 <fs_open>
 8011326:	4603      	mov	r3, r0
 8011328:	75fb      	strb	r3, [r7, #23]
 801132a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <http_find_file+0x144>
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011336:	e006      	b.n	8011346 <http_find_file+0x152>
 8011338:	f107 0308 	add.w	r3, r7, #8
 801133c:	4619      	mov	r1, r3
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	f7ff fe2a 	bl	8010f98 <http_get_404_file>
 8011344:	63b8      	str	r0, [r7, #56]	@ 0x38
 8011346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011348:	2b00      	cmp	r3, #0
 801134a:	d106      	bne.n	801135a <http_find_file+0x166>
 801134c:	f107 0308 	add.w	r3, r7, #8
 8011350:	4619      	mov	r1, r3
 8011352:	68f8      	ldr	r0, [r7, #12]
 8011354:	f7ff fe20 	bl	8010f98 <http_get_404_file>
 8011358:	63b8      	str	r0, [r7, #56]	@ 0x38
 801135a:	68ba      	ldr	r2, [r7, #8]
 801135c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801135e:	9301      	str	r3, [sp, #4]
 8011360:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	4613      	mov	r3, r2
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	f000 f809 	bl	8011384 <http_init_file>
 8011372:	4603      	mov	r3, r0
 8011374:	4618      	mov	r0, r3
 8011376:	3740      	adds	r7, #64	@ 0x40
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	2000bc48 	.word	0x2000bc48
 8011380:	08024288 	.word	0x08024288

08011384 <http_init_file>:
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
 8011390:	603b      	str	r3, [r7, #0]
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d05c      	beq.n	8011452 <http_init_file+0xce>
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d106      	bne.n	80113ae <http_init_file+0x2a>
 80113a0:	4b35      	ldr	r3, [pc, #212]	@ (8011478 <http_init_file+0xf4>)
 80113a2:	f640 120b 	movw	r2, #2315	@ 0x90b
 80113a6:	4935      	ldr	r1, [pc, #212]	@ (801147c <http_init_file+0xf8>)
 80113a8:	4835      	ldr	r0, [pc, #212]	@ (8011480 <http_init_file+0xfc>)
 80113aa:	f00c f9ed 	bl	801d788 <iprintf>
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	615a      	str	r2, [r3, #20]
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	619a      	str	r2, [r3, #24]
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	da06      	bge.n	80113d2 <http_init_file+0x4e>
 80113c4:	4b2c      	ldr	r3, [pc, #176]	@ (8011478 <http_init_file+0xf4>)
 80113c6:	f640 1234 	movw	r2, #2356	@ 0x934
 80113ca:	492e      	ldr	r1, [pc, #184]	@ (8011484 <http_init_file+0x100>)
 80113cc:	482c      	ldr	r0, [pc, #176]	@ (8011480 <http_init_file+0xfc>)
 80113ce:	f00c f9db 	bl	801d788 <iprintf>
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	461a      	mov	r2, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	625a      	str	r2, [r3, #36]	@ 0x24
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2200      	movs	r2, #0
 80113e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	695b      	ldr	r3, [r3, #20]
 80113e8:	7c1b      	ldrb	r3, [r3, #16]
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d106      	bne.n	8011400 <http_init_file+0x7c>
 80113f2:	4b21      	ldr	r3, [pc, #132]	@ (8011478 <http_init_file+0xf4>)
 80113f4:	f640 1243 	movw	r2, #2371	@ 0x943
 80113f8:	4923      	ldr	r1, [pc, #140]	@ (8011488 <http_init_file+0x104>)
 80113fa:	4821      	ldr	r0, [pc, #132]	@ (8011480 <http_init_file+0xfc>)
 80113fc:	f00c f9c4 	bl	801d788 <iprintf>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d032      	beq.n	801146c <http_init_file+0xe8>
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	695b      	ldr	r3, [r3, #20]
 801140a:	7c1b      	ldrb	r3, [r3, #16]
 801140c:	f003 0301 	and.w	r3, r3, #1
 8011410:	2b00      	cmp	r3, #0
 8011412:	d02b      	beq.n	801146c <http_init_file+0xe8>
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	6998      	ldr	r0, [r3, #24]
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801141c:	461a      	mov	r2, r3
 801141e:	491b      	ldr	r1, [pc, #108]	@ (801148c <http_init_file+0x108>)
 8011420:	f000 f9f8 	bl	8011814 <lwip_strnstr>
 8011424:	6178      	str	r0, [r7, #20]
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d01f      	beq.n	801146c <http_init_file+0xe8>
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	1d1a      	adds	r2, r3, #4
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	699b      	ldr	r3, [r3, #24]
 8011434:	1ad3      	subs	r3, r2, r3
 8011436:	613b      	str	r3, [r7, #16]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	699a      	ldr	r2, [r3, #24]
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	441a      	add	r2, r3
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	619a      	str	r2, [r3, #24]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011448:	693b      	ldr	r3, [r7, #16]
 801144a:	1ad2      	subs	r2, r2, r3
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	625a      	str	r2, [r3, #36]	@ 0x24
 8011450:	e00c      	b.n	801146c <http_init_file+0xe8>
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	2200      	movs	r2, #0
 8011456:	615a      	str	r2, [r3, #20]
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	619a      	str	r2, [r3, #24]
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2200      	movs	r2, #0
 8011462:	625a      	str	r2, [r3, #36]	@ 0x24
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	2200      	movs	r2, #0
 8011468:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801146c:	2300      	movs	r3, #0
 801146e:	4618      	mov	r0, r3
 8011470:	3718      	adds	r7, #24
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	08020a40 	.word	0x08020a40
 801147c:	08020b3c 	.word	0x08020b3c
 8011480:	08020a88 	.word	0x08020a88
 8011484:	08020b50 	.word	0x08020b50
 8011488:	08020b70 	.word	0x08020b70
 801148c:	08020b34 	.word	0x08020b34

08011490 <http_err>:
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	70fb      	strb	r3, [r7, #3]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d002      	beq.n	80114ac <http_err+0x1c>
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f7ff fc02 	bl	8010cb0 <http_state_free>
 80114ac:	bf00      	nop
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <http_sent>:
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	4613      	mov	r3, r2
 80114c0:	80fb      	strh	r3, [r7, #6]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	617b      	str	r3, [r7, #20]
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <http_sent+0x1c>
 80114cc:	2300      	movs	r3, #0
 80114ce:	e008      	b.n	80114e2 <http_sent+0x2e>
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	2200      	movs	r2, #0
 80114d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80114d8:	6979      	ldr	r1, [r7, #20]
 80114da:	68b8      	ldr	r0, [r7, #8]
 80114dc:	f7ff fd25 	bl	8010f2a <http_send>
 80114e0:	2300      	movs	r3, #0
 80114e2:	4618      	mov	r0, r3
 80114e4:	3718      	adds	r7, #24
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <http_poll>:
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b084      	sub	sp, #16
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
 80114f2:	6039      	str	r1, [r7, #0]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	60fb      	str	r3, [r7, #12]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d107      	bne.n	801150e <http_poll+0x24>
 80114fe:	2100      	movs	r1, #0
 8011500:	6838      	ldr	r0, [r7, #0]
 8011502:	f7ff fc91 	bl	8010e28 <http_close_conn>
 8011506:	4603      	mov	r3, r0
 8011508:	72fb      	strb	r3, [r7, #11]
 801150a:	2300      	movs	r3, #0
 801150c:	e021      	b.n	8011552 <http_poll+0x68>
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011514:	3301      	adds	r3, #1
 8011516:	b2da      	uxtb	r2, r3
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011524:	2b04      	cmp	r3, #4
 8011526:	d105      	bne.n	8011534 <http_poll+0x4a>
 8011528:	68f9      	ldr	r1, [r7, #12]
 801152a:	6838      	ldr	r0, [r7, #0]
 801152c:	f7ff fc7c 	bl	8010e28 <http_close_conn>
 8011530:	2300      	movs	r3, #0
 8011532:	e00e      	b.n	8011552 <http_poll+0x68>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	695b      	ldr	r3, [r3, #20]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d009      	beq.n	8011550 <http_poll+0x66>
 801153c:	68f9      	ldr	r1, [r7, #12]
 801153e:	6838      	ldr	r0, [r7, #0]
 8011540:	f7ff fcf3 	bl	8010f2a <http_send>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <http_poll+0x66>
 801154a:	6838      	ldr	r0, [r7, #0]
 801154c:	f007 f942 	bl	80187d4 <tcp_output>
 8011550:	2300      	movs	r3, #0
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
	...

0801155c <http_recv>:
 801155c:	b580      	push	{r7, lr}
 801155e:	b086      	sub	sp, #24
 8011560:	af00      	add	r7, sp, #0
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	70fb      	strb	r3, [r7, #3]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	617b      	str	r3, [r7, #20]
 801156e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d105      	bne.n	8011582 <http_recv+0x26>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <http_recv+0x26>
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d111      	bne.n	80115a6 <http_recv+0x4a>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d008      	beq.n	801159a <http_recv+0x3e>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	891b      	ldrh	r3, [r3, #8]
 801158c:	4619      	mov	r1, r3
 801158e:	68b8      	ldr	r0, [r7, #8]
 8011590:	f002 fd14 	bl	8013fbc <tcp_recved>
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f001 fd37 	bl	8013008 <pbuf_free>
 801159a:	6979      	ldr	r1, [r7, #20]
 801159c:	68b8      	ldr	r0, [r7, #8]
 801159e:	f7ff fc43 	bl	8010e28 <http_close_conn>
 80115a2:	2300      	movs	r3, #0
 80115a4:	e055      	b.n	8011652 <http_recv+0xf6>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	891b      	ldrh	r3, [r3, #8]
 80115aa:	4619      	mov	r1, r3
 80115ac:	68b8      	ldr	r0, [r7, #8]
 80115ae:	f002 fd05 	bl	8013fbc <tcp_recved>
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	695b      	ldr	r3, [r3, #20]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d147      	bne.n	801164a <http_recv+0xee>
 80115ba:	68ba      	ldr	r2, [r7, #8]
 80115bc:	6979      	ldr	r1, [r7, #20]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff fd30 	bl	8011024 <http_parse_request>
 80115c4:	4603      	mov	r3, r0
 80115c6:	74fb      	strb	r3, [r7, #19]
 80115c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d015      	beq.n	80115fc <http_recv+0xa0>
 80115d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115d4:	f113 0f05 	cmn.w	r3, #5
 80115d8:	d010      	beq.n	80115fc <http_recv+0xa0>
 80115da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115de:	f113 0f10 	cmn.w	r3, #16
 80115e2:	d00b      	beq.n	80115fc <http_recv+0xa0>
 80115e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115e8:	f113 0f08 	cmn.w	r3, #8
 80115ec:	d006      	beq.n	80115fc <http_recv+0xa0>
 80115ee:	4b1b      	ldr	r3, [pc, #108]	@ (801165c <http_recv+0x100>)
 80115f0:	f640 2204 	movw	r2, #2564	@ 0xa04
 80115f4:	491a      	ldr	r1, [pc, #104]	@ (8011660 <http_recv+0x104>)
 80115f6:	481b      	ldr	r0, [pc, #108]	@ (8011664 <http_recv+0x108>)
 80115f8:	f00c f8c6 	bl	801d788 <iprintf>
 80115fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011600:	f113 0f05 	cmn.w	r3, #5
 8011604:	d00b      	beq.n	801161e <http_recv+0xc2>
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	6a1b      	ldr	r3, [r3, #32]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d007      	beq.n	801161e <http_recv+0xc2>
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	4618      	mov	r0, r3
 8011614:	f001 fcf8 	bl	8013008 <pbuf_free>
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	2200      	movs	r2, #0
 801161c:	621a      	str	r2, [r3, #32]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f001 fcf2 	bl	8013008 <pbuf_free>
 8011624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d104      	bne.n	8011636 <http_recv+0xda>
 801162c:	6979      	ldr	r1, [r7, #20]
 801162e:	68b8      	ldr	r0, [r7, #8]
 8011630:	f7ff fc7b 	bl	8010f2a <http_send>
 8011634:	e00c      	b.n	8011650 <http_recv+0xf4>
 8011636:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801163a:	f113 0f10 	cmn.w	r3, #16
 801163e:	d107      	bne.n	8011650 <http_recv+0xf4>
 8011640:	6979      	ldr	r1, [r7, #20]
 8011642:	68b8      	ldr	r0, [r7, #8]
 8011644:	f7ff fbf0 	bl	8010e28 <http_close_conn>
 8011648:	e002      	b.n	8011650 <http_recv+0xf4>
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f001 fcdc 	bl	8013008 <pbuf_free>
 8011650:	2300      	movs	r3, #0
 8011652:	4618      	mov	r0, r3
 8011654:	3718      	adds	r7, #24
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	08020a40 	.word	0x08020a40
 8011660:	08020b9c 	.word	0x08020b9c
 8011664:	08020a88 	.word	0x08020a88

08011668 <http_accept>:
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	4613      	mov	r3, r2
 8011674:	71fb      	strb	r3, [r7, #7]
 8011676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d102      	bne.n	8011684 <http_accept+0x1c>
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <http_accept+0x22>
 8011684:	f06f 0305 	mvn.w	r3, #5
 8011688:	e025      	b.n	80116d6 <http_accept+0x6e>
 801168a:	2101      	movs	r1, #1
 801168c:	68b8      	ldr	r0, [r7, #8]
 801168e:	f003 f97b 	bl	8014988 <tcp_setprio>
 8011692:	f7ff fadb 	bl	8010c4c <http_state_alloc>
 8011696:	6178      	str	r0, [r7, #20]
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <http_accept+0x3c>
 801169e:	f04f 33ff 	mov.w	r3, #4294967295
 80116a2:	e018      	b.n	80116d6 <http_accept+0x6e>
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	68ba      	ldr	r2, [r7, #8]
 80116a8:	61da      	str	r2, [r3, #28]
 80116aa:	6979      	ldr	r1, [r7, #20]
 80116ac:	68b8      	ldr	r0, [r7, #8]
 80116ae:	f003 fb6b 	bl	8014d88 <tcp_arg>
 80116b2:	490b      	ldr	r1, [pc, #44]	@ (80116e0 <http_accept+0x78>)
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f003 fb79 	bl	8014dac <tcp_recv>
 80116ba:	490a      	ldr	r1, [pc, #40]	@ (80116e4 <http_accept+0x7c>)
 80116bc:	68b8      	ldr	r0, [r7, #8]
 80116be:	f003 fbb9 	bl	8014e34 <tcp_err>
 80116c2:	2204      	movs	r2, #4
 80116c4:	4908      	ldr	r1, [pc, #32]	@ (80116e8 <http_accept+0x80>)
 80116c6:	68b8      	ldr	r0, [r7, #8]
 80116c8:	f003 fbee 	bl	8014ea8 <tcp_poll>
 80116cc:	4907      	ldr	r1, [pc, #28]	@ (80116ec <http_accept+0x84>)
 80116ce:	68b8      	ldr	r0, [r7, #8]
 80116d0:	f003 fb8e 	bl	8014df0 <tcp_sent>
 80116d4:	2300      	movs	r3, #0
 80116d6:	4618      	mov	r0, r3
 80116d8:	3718      	adds	r7, #24
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	0801155d 	.word	0x0801155d
 80116e4:	08011491 	.word	0x08011491
 80116e8:	080114eb 	.word	0x080114eb
 80116ec:	080114b5 	.word	0x080114b5

080116f0 <httpd_init_pcb>:
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	460b      	mov	r3, r1
 80116fa:	807b      	strh	r3, [r7, #2]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d029      	beq.n	8011756 <httpd_init_pcb+0x66>
 8011702:	2101      	movs	r1, #1
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f003 f93f 	bl	8014988 <tcp_setprio>
 801170a:	887b      	ldrh	r3, [r7, #2]
 801170c:	461a      	mov	r2, r3
 801170e:	4914      	ldr	r1, [pc, #80]	@ (8011760 <httpd_init_pcb+0x70>)
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f002 fa85 	bl	8013c20 <tcp_bind>
 8011716:	4603      	mov	r3, r0
 8011718:	73fb      	strb	r3, [r7, #15]
 801171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d006      	beq.n	8011730 <httpd_init_pcb+0x40>
 8011722:	4b10      	ldr	r3, [pc, #64]	@ (8011764 <httpd_init_pcb+0x74>)
 8011724:	f640 2257 	movw	r2, #2647	@ 0xa57
 8011728:	490f      	ldr	r1, [pc, #60]	@ (8011768 <httpd_init_pcb+0x78>)
 801172a:	4810      	ldr	r0, [pc, #64]	@ (801176c <httpd_init_pcb+0x7c>)
 801172c:	f00c f82c 	bl	801d788 <iprintf>
 8011730:	21ff      	movs	r1, #255	@ 0xff
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f002 fb2c 	bl	8013d90 <tcp_listen_with_backlog>
 8011738:	6078      	str	r0, [r7, #4]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d106      	bne.n	801174e <httpd_init_pcb+0x5e>
 8011740:	4b08      	ldr	r3, [pc, #32]	@ (8011764 <httpd_init_pcb+0x74>)
 8011742:	f640 2259 	movw	r2, #2649	@ 0xa59
 8011746:	490a      	ldr	r1, [pc, #40]	@ (8011770 <httpd_init_pcb+0x80>)
 8011748:	4808      	ldr	r0, [pc, #32]	@ (801176c <httpd_init_pcb+0x7c>)
 801174a:	f00c f81d 	bl	801d788 <iprintf>
 801174e:	4909      	ldr	r1, [pc, #36]	@ (8011774 <httpd_init_pcb+0x84>)
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f003 fb91 	bl	8014e78 <tcp_accept>
 8011756:	bf00      	nop
 8011758:	3710      	adds	r7, #16
 801175a:	46bd      	mov	sp, r7
 801175c:	bd80      	pop	{r7, pc}
 801175e:	bf00      	nop
 8011760:	080243c0 	.word	0x080243c0
 8011764:	08020a40 	.word	0x08020a40
 8011768:	08020bc8 	.word	0x08020bc8
 801176c:	08020a88 	.word	0x08020a88
 8011770:	08020be4 	.word	0x08020be4
 8011774:	08011669 	.word	0x08011669

08011778 <httpd_init>:
 8011778:	b580      	push	{r7, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	af00      	add	r7, sp, #0
 801177e:	202e      	movs	r0, #46	@ 0x2e
 8011780:	f003 faf4 	bl	8014d6c <tcp_new_ip_type>
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d106      	bne.n	801179a <httpd_init+0x22>
 801178c:	4b07      	ldr	r3, [pc, #28]	@ (80117ac <httpd_init+0x34>)
 801178e:	f640 2272 	movw	r2, #2674	@ 0xa72
 8011792:	4907      	ldr	r1, [pc, #28]	@ (80117b0 <httpd_init+0x38>)
 8011794:	4807      	ldr	r0, [pc, #28]	@ (80117b4 <httpd_init+0x3c>)
 8011796:	f00b fff7 	bl	801d788 <iprintf>
 801179a:	2150      	movs	r1, #80	@ 0x50
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f7ff ffa7 	bl	80116f0 <httpd_init_pcb>
 80117a2:	bf00      	nop
 80117a4:	3708      	adds	r7, #8
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	08020a40 	.word	0x08020a40
 80117b0:	08020c04 	.word	0x08020c04
 80117b4:	08020a88 	.word	0x08020a88

080117b8 <lwip_htons>:
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	4603      	mov	r3, r0
 80117c0:	80fb      	strh	r3, [r7, #6]
 80117c2:	88fb      	ldrh	r3, [r7, #6]
 80117c4:	021b      	lsls	r3, r3, #8
 80117c6:	b21a      	sxth	r2, r3
 80117c8:	88fb      	ldrh	r3, [r7, #6]
 80117ca:	0a1b      	lsrs	r3, r3, #8
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	b21b      	sxth	r3, r3
 80117d0:	4313      	orrs	r3, r2
 80117d2:	b21b      	sxth	r3, r3
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4618      	mov	r0, r3
 80117d8:	370c      	adds	r7, #12
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <lwip_htonl>:
 80117e2:	b480      	push	{r7}
 80117e4:	b083      	sub	sp, #12
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	061a      	lsls	r2, r3, #24
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	021b      	lsls	r3, r3, #8
 80117f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80117f6:	431a      	orrs	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	0a1b      	lsrs	r3, r3, #8
 80117fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011800:	431a      	orrs	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	0e1b      	lsrs	r3, r3, #24
 8011806:	4313      	orrs	r3, r2
 8011808:	4618      	mov	r0, r3
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <lwip_strnstr>:
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	68b8      	ldr	r0, [r7, #8]
 8011822:	f7ee fd55 	bl	80002d0 <strlen>
 8011826:	6138      	str	r0, [r7, #16]
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d101      	bne.n	8011832 <lwip_strnstr+0x1e>
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	e022      	b.n	8011878 <lwip_strnstr+0x64>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	617b      	str	r3, [r7, #20]
 8011836:	e012      	b.n	801185e <lwip_strnstr+0x4a>
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	781a      	ldrb	r2, [r3, #0]
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	d109      	bne.n	8011858 <lwip_strnstr+0x44>
 8011844:	693a      	ldr	r2, [r7, #16]
 8011846:	68b9      	ldr	r1, [r7, #8]
 8011848:	6978      	ldr	r0, [r7, #20]
 801184a:	f00c f944 	bl	801dad6 <strncmp>
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d101      	bne.n	8011858 <lwip_strnstr+0x44>
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	e00f      	b.n	8011878 <lwip_strnstr+0x64>
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	3301      	adds	r3, #1
 801185c:	617b      	str	r3, [r7, #20]
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d007      	beq.n	8011876 <lwip_strnstr+0x62>
 8011866:	697a      	ldr	r2, [r7, #20]
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	441a      	add	r2, r3
 801186c:	68f9      	ldr	r1, [r7, #12]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	440b      	add	r3, r1
 8011872:	429a      	cmp	r2, r3
 8011874:	d9e0      	bls.n	8011838 <lwip_strnstr+0x24>
 8011876:	2300      	movs	r3, #0
 8011878:	4618      	mov	r0, r3
 801187a:	3718      	adds	r7, #24
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011886:	2300      	movs	r3, #0
 8011888:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801188a:	f00b f99b 	bl	801cbc4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801188e:	f000 f8d5 	bl	8011a3c <mem_init>
  memp_init();
 8011892:	f000 fc31 	bl	80120f8 <memp_init>
  pbuf_init();
  netif_init();
 8011896:	f000 fd3d 	bl	8012314 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801189a:	f008 f88b 	bl	80199b4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801189e:	f001 fe5d 	bl	801355c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80118a2:	f007 ffcd 	bl	8019840 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80118ba:	4b05      	ldr	r3, [pc, #20]	@ (80118d0 <ptr_to_mem+0x20>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	88fb      	ldrh	r3, [r7, #6]
 80118c0:	4413      	add	r3, r2
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	2000c2f4 	.word	0x2000c2f4

080118d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80118dc:	4b05      	ldr	r3, [pc, #20]	@ (80118f4 <mem_to_ptr+0x20>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	b29b      	uxth	r3, r3
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	370c      	adds	r7, #12
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	2000c2f4 	.word	0x2000c2f4

080118f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80118f8:	b590      	push	{r4, r7, lr}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011900:	4b45      	ldr	r3, [pc, #276]	@ (8011a18 <plug_holes+0x120>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	429a      	cmp	r2, r3
 8011908:	d206      	bcs.n	8011918 <plug_holes+0x20>
 801190a:	4b44      	ldr	r3, [pc, #272]	@ (8011a1c <plug_holes+0x124>)
 801190c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011910:	4943      	ldr	r1, [pc, #268]	@ (8011a20 <plug_holes+0x128>)
 8011912:	4844      	ldr	r0, [pc, #272]	@ (8011a24 <plug_holes+0x12c>)
 8011914:	f00b ff38 	bl	801d788 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011918:	4b43      	ldr	r3, [pc, #268]	@ (8011a28 <plug_holes+0x130>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	429a      	cmp	r2, r3
 8011920:	d306      	bcc.n	8011930 <plug_holes+0x38>
 8011922:	4b3e      	ldr	r3, [pc, #248]	@ (8011a1c <plug_holes+0x124>)
 8011924:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011928:	4940      	ldr	r1, [pc, #256]	@ (8011a2c <plug_holes+0x134>)
 801192a:	483e      	ldr	r0, [pc, #248]	@ (8011a24 <plug_holes+0x12c>)
 801192c:	f00b ff2c 	bl	801d788 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	791b      	ldrb	r3, [r3, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d006      	beq.n	8011946 <plug_holes+0x4e>
 8011938:	4b38      	ldr	r3, [pc, #224]	@ (8011a1c <plug_holes+0x124>)
 801193a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 801193e:	493c      	ldr	r1, [pc, #240]	@ (8011a30 <plug_holes+0x138>)
 8011940:	4838      	ldr	r0, [pc, #224]	@ (8011a24 <plug_holes+0x12c>)
 8011942:	f00b ff21 	bl	801d788 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	881b      	ldrh	r3, [r3, #0]
 801194a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801194e:	d906      	bls.n	801195e <plug_holes+0x66>
 8011950:	4b32      	ldr	r3, [pc, #200]	@ (8011a1c <plug_holes+0x124>)
 8011952:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011956:	4937      	ldr	r1, [pc, #220]	@ (8011a34 <plug_holes+0x13c>)
 8011958:	4832      	ldr	r0, [pc, #200]	@ (8011a24 <plug_holes+0x12c>)
 801195a:	f00b ff15 	bl	801d788 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff ffa4 	bl	80118b0 <ptr_to_mem>
 8011968:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	429a      	cmp	r2, r3
 8011970:	d024      	beq.n	80119bc <plug_holes+0xc4>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	791b      	ldrb	r3, [r3, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d120      	bne.n	80119bc <plug_holes+0xc4>
 801197a:	4b2b      	ldr	r3, [pc, #172]	@ (8011a28 <plug_holes+0x130>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	429a      	cmp	r2, r3
 8011982:	d01b      	beq.n	80119bc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011984:	4b2c      	ldr	r3, [pc, #176]	@ (8011a38 <plug_holes+0x140>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	429a      	cmp	r2, r3
 801198c:	d102      	bne.n	8011994 <plug_holes+0x9c>
      lfree = mem;
 801198e:	4a2a      	ldr	r2, [pc, #168]	@ (8011a38 <plug_holes+0x140>)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	881a      	ldrh	r2, [r3, #0]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80119a4:	d00a      	beq.n	80119bc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7ff ff80 	bl	80118b0 <ptr_to_mem>
 80119b0:	4604      	mov	r4, r0
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7ff ff8e 	bl	80118d4 <mem_to_ptr>
 80119b8:	4603      	mov	r3, r0
 80119ba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	885b      	ldrh	r3, [r3, #2]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7ff ff75 	bl	80118b0 <ptr_to_mem>
 80119c6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80119c8:	68ba      	ldr	r2, [r7, #8]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d01f      	beq.n	8011a10 <plug_holes+0x118>
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	791b      	ldrb	r3, [r3, #4]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d11b      	bne.n	8011a10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80119d8:	4b17      	ldr	r3, [pc, #92]	@ (8011a38 <plug_holes+0x140>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	687a      	ldr	r2, [r7, #4]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d102      	bne.n	80119e8 <plug_holes+0xf0>
      lfree = pmem;
 80119e2:	4a15      	ldr	r2, [pc, #84]	@ (8011a38 <plug_holes+0x140>)
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	881a      	ldrh	r2, [r3, #0]
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80119f8:	d00a      	beq.n	8011a10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	881b      	ldrh	r3, [r3, #0]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7ff ff56 	bl	80118b0 <ptr_to_mem>
 8011a04:	4604      	mov	r4, r0
 8011a06:	68b8      	ldr	r0, [r7, #8]
 8011a08:	f7ff ff64 	bl	80118d4 <mem_to_ptr>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011a10:	bf00      	nop
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd90      	pop	{r4, r7, pc}
 8011a18:	2000c2f4 	.word	0x2000c2f4
 8011a1c:	08020c20 	.word	0x08020c20
 8011a20:	08020c50 	.word	0x08020c50
 8011a24:	08020c68 	.word	0x08020c68
 8011a28:	2000c2f8 	.word	0x2000c2f8
 8011a2c:	08020c90 	.word	0x08020c90
 8011a30:	08020cac 	.word	0x08020cac
 8011a34:	08020cc8 	.word	0x08020cc8
 8011a38:	2000c300 	.word	0x2000c300

08011a3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011a42:	4b1f      	ldr	r3, [pc, #124]	@ (8011ac0 <mem_init+0x84>)
 8011a44:	3303      	adds	r3, #3
 8011a46:	f023 0303 	bic.w	r3, r3, #3
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8011ac4 <mem_init+0x88>)
 8011a4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011a50:	4b1c      	ldr	r3, [pc, #112]	@ (8011ac4 <mem_init+0x88>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011a5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011a6a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8011a6e:	f7ff ff1f 	bl	80118b0 <ptr_to_mem>
 8011a72:	4603      	mov	r3, r0
 8011a74:	4a14      	ldr	r2, [pc, #80]	@ (8011ac8 <mem_init+0x8c>)
 8011a76:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011a78:	4b13      	ldr	r3, [pc, #76]	@ (8011ac8 <mem_init+0x8c>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011a80:	4b11      	ldr	r3, [pc, #68]	@ (8011ac8 <mem_init+0x8c>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011a88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8011ac8 <mem_init+0x8c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011a92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011a94:	4b0b      	ldr	r3, [pc, #44]	@ (8011ac4 <mem_init+0x88>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4a0c      	ldr	r2, [pc, #48]	@ (8011acc <mem_init+0x90>)
 8011a9a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011a9c:	480c      	ldr	r0, [pc, #48]	@ (8011ad0 <mem_init+0x94>)
 8011a9e:	f00b f89f 	bl	801cbe0 <sys_mutex_new>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d006      	beq.n	8011ab6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8011ad4 <mem_init+0x98>)
 8011aaa:	f240 221f 	movw	r2, #543	@ 0x21f
 8011aae:	490a      	ldr	r1, [pc, #40]	@ (8011ad8 <mem_init+0x9c>)
 8011ab0:	480a      	ldr	r0, [pc, #40]	@ (8011adc <mem_init+0xa0>)
 8011ab2:	f00b fe69 	bl	801d788 <iprintf>
  }
}
 8011ab6:	bf00      	nop
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	2000bca0 	.word	0x2000bca0
 8011ac4:	2000c2f4 	.word	0x2000c2f4
 8011ac8:	2000c2f8 	.word	0x2000c2f8
 8011acc:	2000c300 	.word	0x2000c300
 8011ad0:	2000c2fc 	.word	0x2000c2fc
 8011ad4:	08020c20 	.word	0x08020c20
 8011ad8:	08020cf4 	.word	0x08020cf4
 8011adc:	08020c68 	.word	0x08020c68

08011ae0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b086      	sub	sp, #24
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f7ff fef3 	bl	80118d4 <mem_to_ptr>
 8011aee:	4603      	mov	r3, r0
 8011af0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7ff feda 	bl	80118b0 <ptr_to_mem>
 8011afc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	885b      	ldrh	r3, [r3, #2]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7ff fed4 	bl	80118b0 <ptr_to_mem>
 8011b08:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b12:	d818      	bhi.n	8011b46 <mem_link_valid+0x66>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	885b      	ldrh	r3, [r3, #2]
 8011b18:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b1c:	d813      	bhi.n	8011b46 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011b22:	8afa      	ldrh	r2, [r7, #22]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d004      	beq.n	8011b32 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	8afa      	ldrh	r2, [r7, #22]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d109      	bne.n	8011b46 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011b32:	4b08      	ldr	r3, [pc, #32]	@ (8011b54 <mem_link_valid+0x74>)
 8011b34:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011b36:	693a      	ldr	r2, [r7, #16]
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d006      	beq.n	8011b4a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	885b      	ldrh	r3, [r3, #2]
 8011b40:	8afa      	ldrh	r2, [r7, #22]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d001      	beq.n	8011b4a <mem_link_valid+0x6a>
    return 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	e000      	b.n	8011b4c <mem_link_valid+0x6c>
  }
  return 1;
 8011b4a:	2301      	movs	r3, #1
}
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	3718      	adds	r7, #24
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	2000c2f8 	.word	0x2000c2f8

08011b58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b088      	sub	sp, #32
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d070      	beq.n	8011c48 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f003 0303 	and.w	r3, r3, #3
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00d      	beq.n	8011b8c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011b70:	4b37      	ldr	r3, [pc, #220]	@ (8011c50 <mem_free+0xf8>)
 8011b72:	f240 2273 	movw	r2, #627	@ 0x273
 8011b76:	4937      	ldr	r1, [pc, #220]	@ (8011c54 <mem_free+0xfc>)
 8011b78:	4837      	ldr	r0, [pc, #220]	@ (8011c58 <mem_free+0x100>)
 8011b7a:	f00b fe05 	bl	801d788 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011b7e:	f00b f88d 	bl	801cc9c <sys_arch_protect>
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f00b f897 	bl	801ccb8 <sys_arch_unprotect>
    return;
 8011b8a:	e05e      	b.n	8011c4a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	3b08      	subs	r3, #8
 8011b90:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011b92:	4b32      	ldr	r3, [pc, #200]	@ (8011c5c <mem_free+0x104>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	69fa      	ldr	r2, [r7, #28]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d306      	bcc.n	8011baa <mem_free+0x52>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f103 020c 	add.w	r2, r3, #12
 8011ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8011c60 <mem_free+0x108>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d90d      	bls.n	8011bc6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011baa:	4b29      	ldr	r3, [pc, #164]	@ (8011c50 <mem_free+0xf8>)
 8011bac:	f240 227f 	movw	r2, #639	@ 0x27f
 8011bb0:	492c      	ldr	r1, [pc, #176]	@ (8011c64 <mem_free+0x10c>)
 8011bb2:	4829      	ldr	r0, [pc, #164]	@ (8011c58 <mem_free+0x100>)
 8011bb4:	f00b fde8 	bl	801d788 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011bb8:	f00b f870 	bl	801cc9c <sys_arch_protect>
 8011bbc:	6138      	str	r0, [r7, #16]
 8011bbe:	6938      	ldr	r0, [r7, #16]
 8011bc0:	f00b f87a 	bl	801ccb8 <sys_arch_unprotect>
    return;
 8011bc4:	e041      	b.n	8011c4a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011bc6:	4828      	ldr	r0, [pc, #160]	@ (8011c68 <mem_free+0x110>)
 8011bc8:	f00b f826 	bl	801cc18 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	791b      	ldrb	r3, [r3, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d110      	bne.n	8011bf6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8011c50 <mem_free+0xf8>)
 8011bd6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8011bda:	4924      	ldr	r1, [pc, #144]	@ (8011c6c <mem_free+0x114>)
 8011bdc:	481e      	ldr	r0, [pc, #120]	@ (8011c58 <mem_free+0x100>)
 8011bde:	f00b fdd3 	bl	801d788 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011be2:	4821      	ldr	r0, [pc, #132]	@ (8011c68 <mem_free+0x110>)
 8011be4:	f00b f827 	bl	801cc36 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011be8:	f00b f858 	bl	801cc9c <sys_arch_protect>
 8011bec:	6178      	str	r0, [r7, #20]
 8011bee:	6978      	ldr	r0, [r7, #20]
 8011bf0:	f00b f862 	bl	801ccb8 <sys_arch_unprotect>
    return;
 8011bf4:	e029      	b.n	8011c4a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011bf6:	69f8      	ldr	r0, [r7, #28]
 8011bf8:	f7ff ff72 	bl	8011ae0 <mem_link_valid>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d110      	bne.n	8011c24 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011c02:	4b13      	ldr	r3, [pc, #76]	@ (8011c50 <mem_free+0xf8>)
 8011c04:	f240 2295 	movw	r2, #661	@ 0x295
 8011c08:	4919      	ldr	r1, [pc, #100]	@ (8011c70 <mem_free+0x118>)
 8011c0a:	4813      	ldr	r0, [pc, #76]	@ (8011c58 <mem_free+0x100>)
 8011c0c:	f00b fdbc 	bl	801d788 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011c10:	4815      	ldr	r0, [pc, #84]	@ (8011c68 <mem_free+0x110>)
 8011c12:	f00b f810 	bl	801cc36 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c16:	f00b f841 	bl	801cc9c <sys_arch_protect>
 8011c1a:	61b8      	str	r0, [r7, #24]
 8011c1c:	69b8      	ldr	r0, [r7, #24]
 8011c1e:	f00b f84b 	bl	801ccb8 <sys_arch_unprotect>
    return;
 8011c22:	e012      	b.n	8011c4a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011c24:	69fb      	ldr	r3, [r7, #28]
 8011c26:	2200      	movs	r2, #0
 8011c28:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011c2a:	4b12      	ldr	r3, [pc, #72]	@ (8011c74 <mem_free+0x11c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	69fa      	ldr	r2, [r7, #28]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d202      	bcs.n	8011c3a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011c34:	4a0f      	ldr	r2, [pc, #60]	@ (8011c74 <mem_free+0x11c>)
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011c3a:	69f8      	ldr	r0, [r7, #28]
 8011c3c:	f7ff fe5c 	bl	80118f8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011c40:	4809      	ldr	r0, [pc, #36]	@ (8011c68 <mem_free+0x110>)
 8011c42:	f00a fff8 	bl	801cc36 <sys_mutex_unlock>
 8011c46:	e000      	b.n	8011c4a <mem_free+0xf2>
    return;
 8011c48:	bf00      	nop
}
 8011c4a:	3720      	adds	r7, #32
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	08020c20 	.word	0x08020c20
 8011c54:	08020d10 	.word	0x08020d10
 8011c58:	08020c68 	.word	0x08020c68
 8011c5c:	2000c2f4 	.word	0x2000c2f4
 8011c60:	2000c2f8 	.word	0x2000c2f8
 8011c64:	08020d34 	.word	0x08020d34
 8011c68:	2000c2fc 	.word	0x2000c2fc
 8011c6c:	08020d50 	.word	0x08020d50
 8011c70:	08020d78 	.word	0x08020d78
 8011c74:	2000c300 	.word	0x2000c300

08011c78 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b088      	sub	sp, #32
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011c84:	887b      	ldrh	r3, [r7, #2]
 8011c86:	3303      	adds	r3, #3
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	f023 0303 	bic.w	r3, r3, #3
 8011c8e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011c90:	8bfb      	ldrh	r3, [r7, #30]
 8011c92:	2b0b      	cmp	r3, #11
 8011c94:	d801      	bhi.n	8011c9a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011c96:	230c      	movs	r3, #12
 8011c98:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011c9a:	8bfb      	ldrh	r3, [r7, #30]
 8011c9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011ca0:	d803      	bhi.n	8011caa <mem_trim+0x32>
 8011ca2:	8bfa      	ldrh	r2, [r7, #30]
 8011ca4:	887b      	ldrh	r3, [r7, #2]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d201      	bcs.n	8011cae <mem_trim+0x36>
    return NULL;
 8011caa:	2300      	movs	r3, #0
 8011cac:	e0d8      	b.n	8011e60 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011cae:	4b6e      	ldr	r3, [pc, #440]	@ (8011e68 <mem_trim+0x1f0>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	687a      	ldr	r2, [r7, #4]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d304      	bcc.n	8011cc2 <mem_trim+0x4a>
 8011cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8011e6c <mem_trim+0x1f4>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d306      	bcc.n	8011cd0 <mem_trim+0x58>
 8011cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8011e70 <mem_trim+0x1f8>)
 8011cc4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011cc8:	496a      	ldr	r1, [pc, #424]	@ (8011e74 <mem_trim+0x1fc>)
 8011cca:	486b      	ldr	r0, [pc, #428]	@ (8011e78 <mem_trim+0x200>)
 8011ccc:	f00b fd5c 	bl	801d788 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011cd0:	4b65      	ldr	r3, [pc, #404]	@ (8011e68 <mem_trim+0x1f0>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d304      	bcc.n	8011ce4 <mem_trim+0x6c>
 8011cda:	4b64      	ldr	r3, [pc, #400]	@ (8011e6c <mem_trim+0x1f4>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	687a      	ldr	r2, [r7, #4]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d307      	bcc.n	8011cf4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ce4:	f00a ffda 	bl	801cc9c <sys_arch_protect>
 8011ce8:	60b8      	str	r0, [r7, #8]
 8011cea:	68b8      	ldr	r0, [r7, #8]
 8011cec:	f00a ffe4 	bl	801ccb8 <sys_arch_unprotect>
    return rmem;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	e0b5      	b.n	8011e60 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	3b08      	subs	r3, #8
 8011cf8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011cfa:	69b8      	ldr	r0, [r7, #24]
 8011cfc:	f7ff fdea 	bl	80118d4 <mem_to_ptr>
 8011d00:	4603      	mov	r3, r0
 8011d02:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011d04:	69bb      	ldr	r3, [r7, #24]
 8011d06:	881a      	ldrh	r2, [r3, #0]
 8011d08:	8afb      	ldrh	r3, [r7, #22]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	3b08      	subs	r3, #8
 8011d10:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011d12:	8bfa      	ldrh	r2, [r7, #30]
 8011d14:	8abb      	ldrh	r3, [r7, #20]
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d906      	bls.n	8011d28 <mem_trim+0xb0>
 8011d1a:	4b55      	ldr	r3, [pc, #340]	@ (8011e70 <mem_trim+0x1f8>)
 8011d1c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011d20:	4956      	ldr	r1, [pc, #344]	@ (8011e7c <mem_trim+0x204>)
 8011d22:	4855      	ldr	r0, [pc, #340]	@ (8011e78 <mem_trim+0x200>)
 8011d24:	f00b fd30 	bl	801d788 <iprintf>
  if (newsize > size) {
 8011d28:	8bfa      	ldrh	r2, [r7, #30]
 8011d2a:	8abb      	ldrh	r3, [r7, #20]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d901      	bls.n	8011d34 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011d30:	2300      	movs	r3, #0
 8011d32:	e095      	b.n	8011e60 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011d34:	8bfa      	ldrh	r2, [r7, #30]
 8011d36:	8abb      	ldrh	r3, [r7, #20]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d101      	bne.n	8011d40 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	e08f      	b.n	8011e60 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011d40:	484f      	ldr	r0, [pc, #316]	@ (8011e80 <mem_trim+0x208>)
 8011d42:	f00a ff69 	bl	801cc18 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011d46:	69bb      	ldr	r3, [r7, #24]
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	f7ff fdb0 	bl	80118b0 <ptr_to_mem>
 8011d50:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	791b      	ldrb	r3, [r3, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d13f      	bne.n	8011dda <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011d5a:	69bb      	ldr	r3, [r7, #24]
 8011d5c:	881b      	ldrh	r3, [r3, #0]
 8011d5e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011d62:	d106      	bne.n	8011d72 <mem_trim+0xfa>
 8011d64:	4b42      	ldr	r3, [pc, #264]	@ (8011e70 <mem_trim+0x1f8>)
 8011d66:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011d6a:	4946      	ldr	r1, [pc, #280]	@ (8011e84 <mem_trim+0x20c>)
 8011d6c:	4842      	ldr	r0, [pc, #264]	@ (8011e78 <mem_trim+0x200>)
 8011d6e:	f00b fd0b 	bl	801d788 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011d72:	693b      	ldr	r3, [r7, #16]
 8011d74:	881b      	ldrh	r3, [r3, #0]
 8011d76:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011d78:	8afa      	ldrh	r2, [r7, #22]
 8011d7a:	8bfb      	ldrh	r3, [r7, #30]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	3308      	adds	r3, #8
 8011d82:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011d84:	4b40      	ldr	r3, [pc, #256]	@ (8011e88 <mem_trim+0x210>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	693a      	ldr	r2, [r7, #16]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d106      	bne.n	8011d9c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011d8e:	89fb      	ldrh	r3, [r7, #14]
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7ff fd8d 	bl	80118b0 <ptr_to_mem>
 8011d96:	4603      	mov	r3, r0
 8011d98:	4a3b      	ldr	r2, [pc, #236]	@ (8011e88 <mem_trim+0x210>)
 8011d9a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011d9c:	89fb      	ldrh	r3, [r7, #14]
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff fd86 	bl	80118b0 <ptr_to_mem>
 8011da4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	2200      	movs	r2, #0
 8011daa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	89ba      	ldrh	r2, [r7, #12]
 8011db0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	8afa      	ldrh	r2, [r7, #22]
 8011db6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	89fa      	ldrh	r2, [r7, #14]
 8011dbc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011dc6:	d047      	beq.n	8011e58 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7ff fd6f 	bl	80118b0 <ptr_to_mem>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	89fb      	ldrh	r3, [r7, #14]
 8011dd6:	8053      	strh	r3, [r2, #2]
 8011dd8:	e03e      	b.n	8011e58 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011dda:	8bfb      	ldrh	r3, [r7, #30]
 8011ddc:	f103 0214 	add.w	r2, r3, #20
 8011de0:	8abb      	ldrh	r3, [r7, #20]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d838      	bhi.n	8011e58 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011de6:	8afa      	ldrh	r2, [r7, #22]
 8011de8:	8bfb      	ldrh	r3, [r7, #30]
 8011dea:	4413      	add	r3, r2
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	3308      	adds	r3, #8
 8011df0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011dfa:	d106      	bne.n	8011e0a <mem_trim+0x192>
 8011dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8011e70 <mem_trim+0x1f8>)
 8011dfe:	f240 3216 	movw	r2, #790	@ 0x316
 8011e02:	4920      	ldr	r1, [pc, #128]	@ (8011e84 <mem_trim+0x20c>)
 8011e04:	481c      	ldr	r0, [pc, #112]	@ (8011e78 <mem_trim+0x200>)
 8011e06:	f00b fcbf 	bl	801d788 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011e0a:	89fb      	ldrh	r3, [r7, #14]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff fd4f 	bl	80118b0 <ptr_to_mem>
 8011e12:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011e14:	4b1c      	ldr	r3, [pc, #112]	@ (8011e88 <mem_trim+0x210>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	693a      	ldr	r2, [r7, #16]
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d202      	bcs.n	8011e24 <mem_trim+0x1ac>
      lfree = mem2;
 8011e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8011e88 <mem_trim+0x210>)
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	2200      	movs	r2, #0
 8011e28:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	881a      	ldrh	r2, [r3, #0]
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	8afa      	ldrh	r2, [r7, #22]
 8011e36:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011e38:	69bb      	ldr	r3, [r7, #24]
 8011e3a:	89fa      	ldrh	r2, [r7, #14]
 8011e3c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011e46:	d007      	beq.n	8011e58 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f7ff fd2f 	bl	80118b0 <ptr_to_mem>
 8011e52:	4602      	mov	r2, r0
 8011e54:	89fb      	ldrh	r3, [r7, #14]
 8011e56:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011e58:	4809      	ldr	r0, [pc, #36]	@ (8011e80 <mem_trim+0x208>)
 8011e5a:	f00a feec 	bl	801cc36 <sys_mutex_unlock>
  return rmem;
 8011e5e:	687b      	ldr	r3, [r7, #4]
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3720      	adds	r7, #32
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	2000c2f4 	.word	0x2000c2f4
 8011e6c:	2000c2f8 	.word	0x2000c2f8
 8011e70:	08020c20 	.word	0x08020c20
 8011e74:	08020dac 	.word	0x08020dac
 8011e78:	08020c68 	.word	0x08020c68
 8011e7c:	08020dc4 	.word	0x08020dc4
 8011e80:	2000c2fc 	.word	0x2000c2fc
 8011e84:	08020de4 	.word	0x08020de4
 8011e88:	2000c300 	.word	0x2000c300

08011e8c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b088      	sub	sp, #32
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	4603      	mov	r3, r0
 8011e94:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011e96:	88fb      	ldrh	r3, [r7, #6]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d101      	bne.n	8011ea0 <mem_malloc+0x14>
    return NULL;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	e0e2      	b.n	8012066 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011ea0:	88fb      	ldrh	r3, [r7, #6]
 8011ea2:	3303      	adds	r3, #3
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	f023 0303 	bic.w	r3, r3, #3
 8011eaa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011eac:	8bbb      	ldrh	r3, [r7, #28]
 8011eae:	2b0b      	cmp	r3, #11
 8011eb0:	d801      	bhi.n	8011eb6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011eb2:	230c      	movs	r3, #12
 8011eb4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011eb6:	8bbb      	ldrh	r3, [r7, #28]
 8011eb8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011ebc:	d803      	bhi.n	8011ec6 <mem_malloc+0x3a>
 8011ebe:	8bba      	ldrh	r2, [r7, #28]
 8011ec0:	88fb      	ldrh	r3, [r7, #6]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d201      	bcs.n	8011eca <mem_malloc+0x3e>
    return NULL;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	e0cd      	b.n	8012066 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011eca:	4869      	ldr	r0, [pc, #420]	@ (8012070 <mem_malloc+0x1e4>)
 8011ecc:	f00a fea4 	bl	801cc18 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011ed0:	4b68      	ldr	r3, [pc, #416]	@ (8012074 <mem_malloc+0x1e8>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7ff fcfd 	bl	80118d4 <mem_to_ptr>
 8011eda:	4603      	mov	r3, r0
 8011edc:	83fb      	strh	r3, [r7, #30]
 8011ede:	e0b7      	b.n	8012050 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011ee0:	8bfb      	ldrh	r3, [r7, #30]
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ff fce4 	bl	80118b0 <ptr_to_mem>
 8011ee8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	791b      	ldrb	r3, [r3, #4]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f040 80a7 	bne.w	8012042 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	8bfb      	ldrh	r3, [r7, #30]
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	f1a3 0208 	sub.w	r2, r3, #8
 8011f02:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011f04:	429a      	cmp	r2, r3
 8011f06:	f0c0 809c 	bcc.w	8012042 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	881b      	ldrh	r3, [r3, #0]
 8011f0e:	461a      	mov	r2, r3
 8011f10:	8bfb      	ldrh	r3, [r7, #30]
 8011f12:	1ad3      	subs	r3, r2, r3
 8011f14:	f1a3 0208 	sub.w	r2, r3, #8
 8011f18:	8bbb      	ldrh	r3, [r7, #28]
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d333      	bcc.n	8011f88 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011f20:	8bfa      	ldrh	r2, [r7, #30]
 8011f22:	8bbb      	ldrh	r3, [r7, #28]
 8011f24:	4413      	add	r3, r2
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	3308      	adds	r3, #8
 8011f2a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011f2c:	8a7b      	ldrh	r3, [r7, #18]
 8011f2e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011f32:	d106      	bne.n	8011f42 <mem_malloc+0xb6>
 8011f34:	4b50      	ldr	r3, [pc, #320]	@ (8012078 <mem_malloc+0x1ec>)
 8011f36:	f240 3287 	movw	r2, #903	@ 0x387
 8011f3a:	4950      	ldr	r1, [pc, #320]	@ (801207c <mem_malloc+0x1f0>)
 8011f3c:	4850      	ldr	r0, [pc, #320]	@ (8012080 <mem_malloc+0x1f4>)
 8011f3e:	f00b fc23 	bl	801d788 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011f42:	8a7b      	ldrh	r3, [r7, #18]
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7ff fcb3 	bl	80118b0 <ptr_to_mem>
 8011f4a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011f52:	697b      	ldr	r3, [r7, #20]
 8011f54:	881a      	ldrh	r2, [r3, #0]
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	8bfa      	ldrh	r2, [r7, #30]
 8011f5e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	8a7a      	ldrh	r2, [r7, #18]
 8011f64:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	2201      	movs	r2, #1
 8011f6a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	881b      	ldrh	r3, [r3, #0]
 8011f70:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011f74:	d00b      	beq.n	8011f8e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	881b      	ldrh	r3, [r3, #0]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7ff fc98 	bl	80118b0 <ptr_to_mem>
 8011f80:	4602      	mov	r2, r0
 8011f82:	8a7b      	ldrh	r3, [r7, #18]
 8011f84:	8053      	strh	r3, [r2, #2]
 8011f86:	e002      	b.n	8011f8e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011f8e:	4b39      	ldr	r3, [pc, #228]	@ (8012074 <mem_malloc+0x1e8>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	697a      	ldr	r2, [r7, #20]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d127      	bne.n	8011fe8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011f98:	4b36      	ldr	r3, [pc, #216]	@ (8012074 <mem_malloc+0x1e8>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011f9e:	e005      	b.n	8011fac <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011fa0:	69bb      	ldr	r3, [r7, #24]
 8011fa2:	881b      	ldrh	r3, [r3, #0]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff fc83 	bl	80118b0 <ptr_to_mem>
 8011faa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	791b      	ldrb	r3, [r3, #4]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d004      	beq.n	8011fbe <mem_malloc+0x132>
 8011fb4:	4b33      	ldr	r3, [pc, #204]	@ (8012084 <mem_malloc+0x1f8>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	69ba      	ldr	r2, [r7, #24]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d1f0      	bne.n	8011fa0 <mem_malloc+0x114>
          }
          lfree = cur;
 8011fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8012074 <mem_malloc+0x1e8>)
 8011fc0:	69bb      	ldr	r3, [r7, #24]
 8011fc2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8012074 <mem_malloc+0x1e8>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8012084 <mem_malloc+0x1f8>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d00b      	beq.n	8011fe8 <mem_malloc+0x15c>
 8011fd0:	4b28      	ldr	r3, [pc, #160]	@ (8012074 <mem_malloc+0x1e8>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	791b      	ldrb	r3, [r3, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d006      	beq.n	8011fe8 <mem_malloc+0x15c>
 8011fda:	4b27      	ldr	r3, [pc, #156]	@ (8012078 <mem_malloc+0x1ec>)
 8011fdc:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011fe0:	4929      	ldr	r1, [pc, #164]	@ (8012088 <mem_malloc+0x1fc>)
 8011fe2:	4827      	ldr	r0, [pc, #156]	@ (8012080 <mem_malloc+0x1f4>)
 8011fe4:	f00b fbd0 	bl	801d788 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011fe8:	4821      	ldr	r0, [pc, #132]	@ (8012070 <mem_malloc+0x1e4>)
 8011fea:	f00a fe24 	bl	801cc36 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011fee:	8bba      	ldrh	r2, [r7, #28]
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	4413      	add	r3, r2
 8011ff4:	3308      	adds	r3, #8
 8011ff6:	4a23      	ldr	r2, [pc, #140]	@ (8012084 <mem_malloc+0x1f8>)
 8011ff8:	6812      	ldr	r2, [r2, #0]
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d906      	bls.n	801200c <mem_malloc+0x180>
 8011ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8012078 <mem_malloc+0x1ec>)
 8012000:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8012004:	4921      	ldr	r1, [pc, #132]	@ (801208c <mem_malloc+0x200>)
 8012006:	481e      	ldr	r0, [pc, #120]	@ (8012080 <mem_malloc+0x1f4>)
 8012008:	f00b fbbe 	bl	801d788 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	f003 0303 	and.w	r3, r3, #3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d006      	beq.n	8012024 <mem_malloc+0x198>
 8012016:	4b18      	ldr	r3, [pc, #96]	@ (8012078 <mem_malloc+0x1ec>)
 8012018:	f240 32bb 	movw	r2, #955	@ 0x3bb
 801201c:	491c      	ldr	r1, [pc, #112]	@ (8012090 <mem_malloc+0x204>)
 801201e:	4818      	ldr	r0, [pc, #96]	@ (8012080 <mem_malloc+0x1f4>)
 8012020:	f00b fbb2 	bl	801d788 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	f003 0303 	and.w	r3, r3, #3
 801202a:	2b00      	cmp	r3, #0
 801202c:	d006      	beq.n	801203c <mem_malloc+0x1b0>
 801202e:	4b12      	ldr	r3, [pc, #72]	@ (8012078 <mem_malloc+0x1ec>)
 8012030:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8012034:	4917      	ldr	r1, [pc, #92]	@ (8012094 <mem_malloc+0x208>)
 8012036:	4812      	ldr	r0, [pc, #72]	@ (8012080 <mem_malloc+0x1f4>)
 8012038:	f00b fba6 	bl	801d788 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	3308      	adds	r3, #8
 8012040:	e011      	b.n	8012066 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8012042:	8bfb      	ldrh	r3, [r7, #30]
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff fc33 	bl	80118b0 <ptr_to_mem>
 801204a:	4603      	mov	r3, r0
 801204c:	881b      	ldrh	r3, [r3, #0]
 801204e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012050:	8bfa      	ldrh	r2, [r7, #30]
 8012052:	8bbb      	ldrh	r3, [r7, #28]
 8012054:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8012058:	429a      	cmp	r2, r3
 801205a:	f4ff af41 	bcc.w	8011ee0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801205e:	4804      	ldr	r0, [pc, #16]	@ (8012070 <mem_malloc+0x1e4>)
 8012060:	f00a fde9 	bl	801cc36 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012064:	2300      	movs	r3, #0
}
 8012066:	4618      	mov	r0, r3
 8012068:	3720      	adds	r7, #32
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	2000c2fc 	.word	0x2000c2fc
 8012074:	2000c300 	.word	0x2000c300
 8012078:	08020c20 	.word	0x08020c20
 801207c:	08020de4 	.word	0x08020de4
 8012080:	08020c68 	.word	0x08020c68
 8012084:	2000c2f8 	.word	0x2000c2f8
 8012088:	08020df8 	.word	0x08020df8
 801208c:	08020e14 	.word	0x08020e14
 8012090:	08020e44 	.word	0x08020e44
 8012094:	08020e74 	.word	0x08020e74

08012098 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	689b      	ldr	r3, [r3, #8]
 80120a4:	2200      	movs	r2, #0
 80120a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	3303      	adds	r3, #3
 80120ae:	f023 0303 	bic.w	r3, r3, #3
 80120b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]
 80120b8:	e011      	b.n	80120de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	681a      	ldr	r2, [r3, #0]
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	68ba      	ldr	r2, [r7, #8]
 80120ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	881b      	ldrh	r3, [r3, #0]
 80120d0:	461a      	mov	r2, r3
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	4413      	add	r3, r2
 80120d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	3301      	adds	r3, #1
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	885b      	ldrh	r3, [r3, #2]
 80120e2:	461a      	mov	r2, r3
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	4293      	cmp	r3, r2
 80120e8:	dbe7      	blt.n	80120ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80120ea:	bf00      	nop
 80120ec:	bf00      	nop
 80120ee:	3714      	adds	r7, #20
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80120fe:	2300      	movs	r3, #0
 8012100:	80fb      	strh	r3, [r7, #6]
 8012102:	e009      	b.n	8012118 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012104:	88fb      	ldrh	r3, [r7, #6]
 8012106:	4a08      	ldr	r2, [pc, #32]	@ (8012128 <memp_init+0x30>)
 8012108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801210c:	4618      	mov	r0, r3
 801210e:	f7ff ffc3 	bl	8012098 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012112:	88fb      	ldrh	r3, [r7, #6]
 8012114:	3301      	adds	r3, #1
 8012116:	80fb      	strh	r3, [r7, #6]
 8012118:	88fb      	ldrh	r3, [r7, #6]
 801211a:	2b0c      	cmp	r3, #12
 801211c:	d9f2      	bls.n	8012104 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801211e:	bf00      	nop
 8012120:	bf00      	nop
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	0802434c 	.word	0x0802434c

0801212c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012134:	f00a fdb2 	bl	801cc9c <sys_arch_protect>
 8012138:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d015      	beq.n	8012174 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	68ba      	ldr	r2, [r7, #8]
 801214e:	6812      	ldr	r2, [r2, #0]
 8012150:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	f003 0303 	and.w	r3, r3, #3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d006      	beq.n	801216a <do_memp_malloc_pool+0x3e>
 801215c:	4b09      	ldr	r3, [pc, #36]	@ (8012184 <do_memp_malloc_pool+0x58>)
 801215e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012162:	4909      	ldr	r1, [pc, #36]	@ (8012188 <do_memp_malloc_pool+0x5c>)
 8012164:	4809      	ldr	r0, [pc, #36]	@ (801218c <do_memp_malloc_pool+0x60>)
 8012166:	f00b fb0f 	bl	801d788 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f00a fda4 	bl	801ccb8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	e003      	b.n	801217c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f00a fd9f 	bl	801ccb8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3710      	adds	r7, #16
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	08020e98 	.word	0x08020e98
 8012188:	08020ec8 	.word	0x08020ec8
 801218c:	08020eec 	.word	0x08020eec

08012190 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d106      	bne.n	80121ac <memp_malloc_pool+0x1c>
 801219e:	4b0a      	ldr	r3, [pc, #40]	@ (80121c8 <memp_malloc_pool+0x38>)
 80121a0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80121a4:	4909      	ldr	r1, [pc, #36]	@ (80121cc <memp_malloc_pool+0x3c>)
 80121a6:	480a      	ldr	r0, [pc, #40]	@ (80121d0 <memp_malloc_pool+0x40>)
 80121a8:	f00b faee 	bl	801d788 <iprintf>
  if (desc == NULL) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d101      	bne.n	80121b6 <memp_malloc_pool+0x26>
    return NULL;
 80121b2:	2300      	movs	r3, #0
 80121b4:	e003      	b.n	80121be <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7ff ffb8 	bl	801212c <do_memp_malloc_pool>
 80121bc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	08020e98 	.word	0x08020e98
 80121cc:	08020f14 	.word	0x08020f14
 80121d0:	08020eec 	.word	0x08020eec

080121d4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	4603      	mov	r3, r0
 80121dc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80121de:	79fb      	ldrb	r3, [r7, #7]
 80121e0:	2b0c      	cmp	r3, #12
 80121e2:	d908      	bls.n	80121f6 <memp_malloc+0x22>
 80121e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012210 <memp_malloc+0x3c>)
 80121e6:	f240 1257 	movw	r2, #343	@ 0x157
 80121ea:	490a      	ldr	r1, [pc, #40]	@ (8012214 <memp_malloc+0x40>)
 80121ec:	480a      	ldr	r0, [pc, #40]	@ (8012218 <memp_malloc+0x44>)
 80121ee:	f00b facb 	bl	801d788 <iprintf>
 80121f2:	2300      	movs	r3, #0
 80121f4:	e008      	b.n	8012208 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80121f6:	79fb      	ldrb	r3, [r7, #7]
 80121f8:	4a08      	ldr	r2, [pc, #32]	@ (801221c <memp_malloc+0x48>)
 80121fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff ff94 	bl	801212c <do_memp_malloc_pool>
 8012204:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012206:	68fb      	ldr	r3, [r7, #12]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	08020e98 	.word	0x08020e98
 8012214:	08020f28 	.word	0x08020f28
 8012218:	08020eec 	.word	0x08020eec
 801221c:	0802434c 	.word	0x0802434c

08012220 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b084      	sub	sp, #16
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	f003 0303 	and.w	r3, r3, #3
 8012230:	2b00      	cmp	r3, #0
 8012232:	d006      	beq.n	8012242 <do_memp_free_pool+0x22>
 8012234:	4b0d      	ldr	r3, [pc, #52]	@ (801226c <do_memp_free_pool+0x4c>)
 8012236:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801223a:	490d      	ldr	r1, [pc, #52]	@ (8012270 <do_memp_free_pool+0x50>)
 801223c:	480d      	ldr	r0, [pc, #52]	@ (8012274 <do_memp_free_pool+0x54>)
 801223e:	f00b faa3 	bl	801d788 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012246:	f00a fd29 	bl	801cc9c <sys_arch_protect>
 801224a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	689b      	ldr	r3, [r3, #8]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	68fa      	ldr	r2, [r7, #12]
 801225c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801225e:	68b8      	ldr	r0, [r7, #8]
 8012260:	f00a fd2a 	bl	801ccb8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012264:	bf00      	nop
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}
 801226c:	08020e98 	.word	0x08020e98
 8012270:	08020f48 	.word	0x08020f48
 8012274:	08020eec 	.word	0x08020eec

08012278 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
 8012280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <memp_free_pool+0x1e>
 8012288:	4b0a      	ldr	r3, [pc, #40]	@ (80122b4 <memp_free_pool+0x3c>)
 801228a:	f240 1295 	movw	r2, #405	@ 0x195
 801228e:	490a      	ldr	r1, [pc, #40]	@ (80122b8 <memp_free_pool+0x40>)
 8012290:	480a      	ldr	r0, [pc, #40]	@ (80122bc <memp_free_pool+0x44>)
 8012292:	f00b fa79 	bl	801d788 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d007      	beq.n	80122ac <memp_free_pool+0x34>
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d004      	beq.n	80122ac <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80122a2:	6839      	ldr	r1, [r7, #0]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f7ff ffbb 	bl	8012220 <do_memp_free_pool>
 80122aa:	e000      	b.n	80122ae <memp_free_pool+0x36>
    return;
 80122ac:	bf00      	nop
}
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	08020e98 	.word	0x08020e98
 80122b8:	08020f14 	.word	0x08020f14
 80122bc:	08020eec 	.word	0x08020eec

080122c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b082      	sub	sp, #8
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	4603      	mov	r3, r0
 80122c8:	6039      	str	r1, [r7, #0]
 80122ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80122cc:	79fb      	ldrb	r3, [r7, #7]
 80122ce:	2b0c      	cmp	r3, #12
 80122d0:	d907      	bls.n	80122e2 <memp_free+0x22>
 80122d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012304 <memp_free+0x44>)
 80122d4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80122d8:	490b      	ldr	r1, [pc, #44]	@ (8012308 <memp_free+0x48>)
 80122da:	480c      	ldr	r0, [pc, #48]	@ (801230c <memp_free+0x4c>)
 80122dc:	f00b fa54 	bl	801d788 <iprintf>
 80122e0:	e00c      	b.n	80122fc <memp_free+0x3c>

  if (mem == NULL) {
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d008      	beq.n	80122fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80122e8:	79fb      	ldrb	r3, [r7, #7]
 80122ea:	4a09      	ldr	r2, [pc, #36]	@ (8012310 <memp_free+0x50>)
 80122ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122f0:	6839      	ldr	r1, [r7, #0]
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7ff ff94 	bl	8012220 <do_memp_free_pool>
 80122f8:	e000      	b.n	80122fc <memp_free+0x3c>
    return;
 80122fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80122fc:	3708      	adds	r7, #8
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	08020e98 	.word	0x08020e98
 8012308:	08020f68 	.word	0x08020f68
 801230c:	08020eec 	.word	0x08020eec
 8012310:	0802434c 	.word	0x0802434c

08012314 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012314:	b480      	push	{r7}
 8012316:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012318:	bf00      	nop
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr
	...

08012324 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d108      	bne.n	801234a <netif_add+0x26>
 8012338:	4b57      	ldr	r3, [pc, #348]	@ (8012498 <netif_add+0x174>)
 801233a:	f240 1227 	movw	r2, #295	@ 0x127
 801233e:	4957      	ldr	r1, [pc, #348]	@ (801249c <netif_add+0x178>)
 8012340:	4857      	ldr	r0, [pc, #348]	@ (80124a0 <netif_add+0x17c>)
 8012342:	f00b fa21 	bl	801d788 <iprintf>
 8012346:	2300      	movs	r3, #0
 8012348:	e0a2      	b.n	8012490 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234c:	2b00      	cmp	r3, #0
 801234e:	d108      	bne.n	8012362 <netif_add+0x3e>
 8012350:	4b51      	ldr	r3, [pc, #324]	@ (8012498 <netif_add+0x174>)
 8012352:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012356:	4953      	ldr	r1, [pc, #332]	@ (80124a4 <netif_add+0x180>)
 8012358:	4851      	ldr	r0, [pc, #324]	@ (80124a0 <netif_add+0x17c>)
 801235a:	f00b fa15 	bl	801d788 <iprintf>
 801235e:	2300      	movs	r3, #0
 8012360:	e096      	b.n	8012490 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d101      	bne.n	801236c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012368:	4b4f      	ldr	r3, [pc, #316]	@ (80124a8 <netif_add+0x184>)
 801236a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d101      	bne.n	8012376 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012372:	4b4d      	ldr	r3, [pc, #308]	@ (80124a8 <netif_add+0x184>)
 8012374:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d101      	bne.n	8012380 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801237c:	4b4a      	ldr	r3, [pc, #296]	@ (80124a8 <netif_add+0x184>)
 801237e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	2200      	movs	r2, #0
 8012384:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2200      	movs	r2, #0
 801238a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2200      	movs	r2, #0
 8012390:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	4a45      	ldr	r2, [pc, #276]	@ (80124ac <netif_add+0x188>)
 8012396:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2200      	movs	r2, #0
 80123aa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	6a3a      	ldr	r2, [r7, #32]
 80123b0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80123b2:	4b3f      	ldr	r3, [pc, #252]	@ (80124b0 <netif_add+0x18c>)
 80123b4:	781a      	ldrb	r2, [r3, #0]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123c0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	68b9      	ldr	r1, [r7, #8]
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f000 f913 	bl	80125f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80123ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	4798      	blx	r3
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d001      	beq.n	80123de <netif_add+0xba>
    return NULL;
 80123da:	2300      	movs	r3, #0
 80123dc:	e058      	b.n	8012490 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80123e4:	2bff      	cmp	r3, #255	@ 0xff
 80123e6:	d103      	bne.n	80123f0 <netif_add+0xcc>
        netif->num = 0;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2200      	movs	r2, #0
 80123ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80123f4:	4b2f      	ldr	r3, [pc, #188]	@ (80124b4 <netif_add+0x190>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	e02b      	b.n	8012454 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80123fc:	697a      	ldr	r2, [r7, #20]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	429a      	cmp	r2, r3
 8012402:	d106      	bne.n	8012412 <netif_add+0xee>
 8012404:	4b24      	ldr	r3, [pc, #144]	@ (8012498 <netif_add+0x174>)
 8012406:	f240 128b 	movw	r2, #395	@ 0x18b
 801240a:	492b      	ldr	r1, [pc, #172]	@ (80124b8 <netif_add+0x194>)
 801240c:	4824      	ldr	r0, [pc, #144]	@ (80124a0 <netif_add+0x17c>)
 801240e:	f00b f9bb 	bl	801d788 <iprintf>
        num_netifs++;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	3301      	adds	r3, #1
 8012416:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	2bff      	cmp	r3, #255	@ 0xff
 801241c:	dd06      	ble.n	801242c <netif_add+0x108>
 801241e:	4b1e      	ldr	r3, [pc, #120]	@ (8012498 <netif_add+0x174>)
 8012420:	f240 128d 	movw	r2, #397	@ 0x18d
 8012424:	4925      	ldr	r1, [pc, #148]	@ (80124bc <netif_add+0x198>)
 8012426:	481e      	ldr	r0, [pc, #120]	@ (80124a0 <netif_add+0x17c>)
 8012428:	f00b f9ae 	bl	801d788 <iprintf>
        if (netif2->num == netif->num) {
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012438:	429a      	cmp	r2, r3
 801243a:	d108      	bne.n	801244e <netif_add+0x12a>
          netif->num++;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012442:	3301      	adds	r3, #1
 8012444:	b2da      	uxtb	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801244c:	e005      	b.n	801245a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	617b      	str	r3, [r7, #20]
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d1d0      	bne.n	80123fc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d1be      	bne.n	80123de <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012466:	2bfe      	cmp	r3, #254	@ 0xfe
 8012468:	d103      	bne.n	8012472 <netif_add+0x14e>
    netif_num = 0;
 801246a:	4b11      	ldr	r3, [pc, #68]	@ (80124b0 <netif_add+0x18c>)
 801246c:	2200      	movs	r2, #0
 801246e:	701a      	strb	r2, [r3, #0]
 8012470:	e006      	b.n	8012480 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012478:	3301      	adds	r3, #1
 801247a:	b2da      	uxtb	r2, r3
 801247c:	4b0c      	ldr	r3, [pc, #48]	@ (80124b0 <netif_add+0x18c>)
 801247e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012480:	4b0c      	ldr	r3, [pc, #48]	@ (80124b4 <netif_add+0x190>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012488:	4a0a      	ldr	r2, [pc, #40]	@ (80124b4 <netif_add+0x190>)
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801248e:	68fb      	ldr	r3, [r7, #12]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3718      	adds	r7, #24
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	08020f84 	.word	0x08020f84
 801249c:	08021018 	.word	0x08021018
 80124a0:	08020fd4 	.word	0x08020fd4
 80124a4:	08021034 	.word	0x08021034
 80124a8:	080243c0 	.word	0x080243c0
 80124ac:	080128cf 	.word	0x080128cf
 80124b0:	2000f3d8 	.word	0x2000f3d8
 80124b4:	2000f3d0 	.word	0x2000f3d0
 80124b8:	08021058 	.word	0x08021058
 80124bc:	0802106c 	.word	0x0802106c

080124c0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f002 fe91 	bl	80151f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80124d2:	6839      	ldr	r1, [r7, #0]
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f007 ff27 	bl	801a328 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80124da:	bf00      	nop
 80124dc:	3708      	adds	r7, #8
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b086      	sub	sp, #24
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d106      	bne.n	8012504 <netif_do_set_ipaddr+0x20>
 80124f6:	4b1d      	ldr	r3, [pc, #116]	@ (801256c <netif_do_set_ipaddr+0x88>)
 80124f8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80124fc:	491c      	ldr	r1, [pc, #112]	@ (8012570 <netif_do_set_ipaddr+0x8c>)
 80124fe:	481d      	ldr	r0, [pc, #116]	@ (8012574 <netif_do_set_ipaddr+0x90>)
 8012500:	f00b f942 	bl	801d788 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <netif_do_set_ipaddr+0x34>
 801250a:	4b18      	ldr	r3, [pc, #96]	@ (801256c <netif_do_set_ipaddr+0x88>)
 801250c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012510:	4917      	ldr	r1, [pc, #92]	@ (8012570 <netif_do_set_ipaddr+0x8c>)
 8012512:	4818      	ldr	r0, [pc, #96]	@ (8012574 <netif_do_set_ipaddr+0x90>)
 8012514:	f00b f938 	bl	801d788 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012518:	68bb      	ldr	r3, [r7, #8]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	3304      	adds	r3, #4
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	429a      	cmp	r2, r3
 8012524:	d01c      	beq.n	8012560 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	3304      	adds	r3, #4
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012536:	f107 0314 	add.w	r3, r7, #20
 801253a:	4619      	mov	r1, r3
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f7ff ffbf 	bl	80124c0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d002      	beq.n	801254e <netif_do_set_ipaddr+0x6a>
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	e000      	b.n	8012550 <netif_do_set_ipaddr+0x6c>
 801254e:	2300      	movs	r3, #0
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012554:	2101      	movs	r1, #1
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f000 f8d2 	bl	8012700 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801255c:	2301      	movs	r3, #1
 801255e:	e000      	b.n	8012562 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3718      	adds	r7, #24
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	08020f84 	.word	0x08020f84
 8012570:	0802109c 	.word	0x0802109c
 8012574:	08020fd4 	.word	0x08020fd4

08012578 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012578:	b480      	push	{r7}
 801257a:	b085      	sub	sp, #20
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	3308      	adds	r3, #8
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	429a      	cmp	r2, r3
 8012590:	d00a      	beq.n	80125a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <netif_do_set_netmask+0x26>
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	e000      	b.n	80125a0 <netif_do_set_netmask+0x28>
 801259e:	2300      	movs	r3, #0
 80125a0:	68fa      	ldr	r2, [r7, #12]
 80125a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80125a4:	2301      	movs	r3, #1
 80125a6:	e000      	b.n	80125aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80125a8:	2300      	movs	r3, #0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr

080125b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80125b6:	b480      	push	{r7}
 80125b8:	b085      	sub	sp, #20
 80125ba:	af00      	add	r7, sp, #0
 80125bc:	60f8      	str	r0, [r7, #12]
 80125be:	60b9      	str	r1, [r7, #8]
 80125c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	330c      	adds	r3, #12
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d00a      	beq.n	80125e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <netif_do_set_gw+0x26>
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	e000      	b.n	80125de <netif_do_set_gw+0x28>
 80125dc:	2300      	movs	r3, #0
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80125e2:	2301      	movs	r3, #1
 80125e4:	e000      	b.n	80125e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80125e6:	2300      	movs	r3, #0
}
 80125e8:	4618      	mov	r0, r3
 80125ea:	3714      	adds	r7, #20
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr

080125f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b088      	sub	sp, #32
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
 8012600:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012602:	2300      	movs	r3, #0
 8012604:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012606:	2300      	movs	r3, #0
 8012608:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d101      	bne.n	8012614 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012610:	4b1c      	ldr	r3, [pc, #112]	@ (8012684 <netif_set_addr+0x90>)
 8012612:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d101      	bne.n	801261e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801261a:	4b1a      	ldr	r3, [pc, #104]	@ (8012684 <netif_set_addr+0x90>)
 801261c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d101      	bne.n	8012628 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012624:	4b17      	ldr	r3, [pc, #92]	@ (8012684 <netif_set_addr+0x90>)
 8012626:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d003      	beq.n	8012636 <netif_set_addr+0x42>
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d101      	bne.n	801263a <netif_set_addr+0x46>
 8012636:	2301      	movs	r3, #1
 8012638:	e000      	b.n	801263c <netif_set_addr+0x48>
 801263a:	2300      	movs	r3, #0
 801263c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801263e:	697b      	ldr	r3, [r7, #20]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d006      	beq.n	8012652 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012644:	f107 0310 	add.w	r3, r7, #16
 8012648:	461a      	mov	r2, r3
 801264a:	68b9      	ldr	r1, [r7, #8]
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7ff ff49 	bl	80124e4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012652:	69fa      	ldr	r2, [r7, #28]
 8012654:	6879      	ldr	r1, [r7, #4]
 8012656:	68f8      	ldr	r0, [r7, #12]
 8012658:	f7ff ff8e 	bl	8012578 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801265c:	69ba      	ldr	r2, [r7, #24]
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f7ff ffa8 	bl	80125b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d106      	bne.n	801267a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801266c:	f107 0310 	add.w	r3, r7, #16
 8012670:	461a      	mov	r2, r3
 8012672:	68b9      	ldr	r1, [r7, #8]
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f7ff ff35 	bl	80124e4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801267a:	bf00      	nop
 801267c:	3720      	adds	r7, #32
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	080243c0 	.word	0x080243c0

08012688 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012690:	4a04      	ldr	r2, [pc, #16]	@ (80126a4 <netif_set_default+0x1c>)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012696:	bf00      	nop
 8012698:	370c      	adds	r7, #12
 801269a:	46bd      	mov	sp, r7
 801269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a0:	4770      	bx	lr
 80126a2:	bf00      	nop
 80126a4:	2000f3d4 	.word	0x2000f3d4

080126a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d107      	bne.n	80126c6 <netif_set_up+0x1e>
 80126b6:	4b0f      	ldr	r3, [pc, #60]	@ (80126f4 <netif_set_up+0x4c>)
 80126b8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80126bc:	490e      	ldr	r1, [pc, #56]	@ (80126f8 <netif_set_up+0x50>)
 80126be:	480f      	ldr	r0, [pc, #60]	@ (80126fc <netif_set_up+0x54>)
 80126c0:	f00b f862 	bl	801d788 <iprintf>
 80126c4:	e013      	b.n	80126ee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80126cc:	f003 0301 	and.w	r3, r3, #1
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10c      	bne.n	80126ee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80126da:	f043 0301 	orr.w	r3, r3, #1
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80126e6:	2103      	movs	r1, #3
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f000 f809 	bl	8012700 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	08020f84 	.word	0x08020f84
 80126f8:	0802110c 	.word	0x0802110c
 80126fc:	08020fd4 	.word	0x08020fd4

08012700 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	460b      	mov	r3, r1
 801270a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <netif_issue_reports+0x20>
 8012712:	4b18      	ldr	r3, [pc, #96]	@ (8012774 <netif_issue_reports+0x74>)
 8012714:	f240 326d 	movw	r2, #877	@ 0x36d
 8012718:	4917      	ldr	r1, [pc, #92]	@ (8012778 <netif_issue_reports+0x78>)
 801271a:	4818      	ldr	r0, [pc, #96]	@ (801277c <netif_issue_reports+0x7c>)
 801271c:	f00b f834 	bl	801d788 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012726:	f003 0304 	and.w	r3, r3, #4
 801272a:	2b00      	cmp	r3, #0
 801272c:	d01e      	beq.n	801276c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012734:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012738:	2b00      	cmp	r3, #0
 801273a:	d017      	beq.n	801276c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801273c:	78fb      	ldrb	r3, [r7, #3]
 801273e:	f003 0301 	and.w	r3, r3, #1
 8012742:	2b00      	cmp	r3, #0
 8012744:	d013      	beq.n	801276e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	3304      	adds	r3, #4
 801274a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00e      	beq.n	801276e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012756:	f003 0308 	and.w	r3, r3, #8
 801275a:	2b00      	cmp	r3, #0
 801275c:	d007      	beq.n	801276e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3304      	adds	r3, #4
 8012762:	4619      	mov	r1, r3
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f008 fd49 	bl	801b1fc <etharp_request>
 801276a:	e000      	b.n	801276e <netif_issue_reports+0x6e>
    return;
 801276c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	08020f84 	.word	0x08020f84
 8012778:	08021128 	.word	0x08021128
 801277c:	08020fd4 	.word	0x08020fd4

08012780 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d107      	bne.n	801279e <netif_set_down+0x1e>
 801278e:	4b12      	ldr	r3, [pc, #72]	@ (80127d8 <netif_set_down+0x58>)
 8012790:	f240 329b 	movw	r2, #923	@ 0x39b
 8012794:	4911      	ldr	r1, [pc, #68]	@ (80127dc <netif_set_down+0x5c>)
 8012796:	4812      	ldr	r0, [pc, #72]	@ (80127e0 <netif_set_down+0x60>)
 8012798:	f00a fff6 	bl	801d788 <iprintf>
 801279c:	e019      	b.n	80127d2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127a4:	f003 0301 	and.w	r3, r3, #1
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d012      	beq.n	80127d2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127b2:	f023 0301 	bic.w	r3, r3, #1
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127c4:	f003 0308 	and.w	r3, r3, #8
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d002      	beq.n	80127d2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f008 f8d3 	bl	801a978 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	08020f84 	.word	0x08020f84
 80127dc:	0802114c 	.word	0x0802114c
 80127e0:	08020fd4 	.word	0x08020fd4

080127e4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d107      	bne.n	8012802 <netif_set_link_up+0x1e>
 80127f2:	4b13      	ldr	r3, [pc, #76]	@ (8012840 <netif_set_link_up+0x5c>)
 80127f4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80127f8:	4912      	ldr	r1, [pc, #72]	@ (8012844 <netif_set_link_up+0x60>)
 80127fa:	4813      	ldr	r0, [pc, #76]	@ (8012848 <netif_set_link_up+0x64>)
 80127fc:	f00a ffc4 	bl	801d788 <iprintf>
 8012800:	e01b      	b.n	801283a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012808:	f003 0304 	and.w	r3, r3, #4
 801280c:	2b00      	cmp	r3, #0
 801280e:	d114      	bne.n	801283a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012816:	f043 0304 	orr.w	r3, r3, #4
 801281a:	b2da      	uxtb	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012822:	2103      	movs	r1, #3
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7ff ff6b 	bl	8012700 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	69db      	ldr	r3, [r3, #28]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d003      	beq.n	801283a <netif_set_link_up+0x56>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	69db      	ldr	r3, [r3, #28]
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	08020f84 	.word	0x08020f84
 8012844:	0802116c 	.word	0x0802116c
 8012848:	08020fd4 	.word	0x08020fd4

0801284c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d107      	bne.n	801286a <netif_set_link_down+0x1e>
 801285a:	4b11      	ldr	r3, [pc, #68]	@ (80128a0 <netif_set_link_down+0x54>)
 801285c:	f240 4206 	movw	r2, #1030	@ 0x406
 8012860:	4910      	ldr	r1, [pc, #64]	@ (80128a4 <netif_set_link_down+0x58>)
 8012862:	4811      	ldr	r0, [pc, #68]	@ (80128a8 <netif_set_link_down+0x5c>)
 8012864:	f00a ff90 	bl	801d788 <iprintf>
 8012868:	e017      	b.n	801289a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012870:	f003 0304 	and.w	r3, r3, #4
 8012874:	2b00      	cmp	r3, #0
 8012876:	d010      	beq.n	801289a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801287e:	f023 0304 	bic.w	r3, r3, #4
 8012882:	b2da      	uxtb	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	69db      	ldr	r3, [r3, #28]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d003      	beq.n	801289a <netif_set_link_down+0x4e>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	69db      	ldr	r3, [r3, #28]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	08020f84 	.word	0x08020f84
 80128a4:	08021190 	.word	0x08021190
 80128a8:	08020fd4 	.word	0x08020fd4

080128ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d002      	beq.n	80128c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	61da      	str	r2, [r3, #28]
  }
}
 80128c2:	bf00      	nop
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80128ce:	b480      	push	{r7}
 80128d0:	b085      	sub	sp, #20
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	60f8      	str	r0, [r7, #12]
 80128d6:	60b9      	str	r1, [r7, #8]
 80128d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80128da:	f06f 030b 	mvn.w	r3, #11
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3714      	adds	r7, #20
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr
	...

080128ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80128ec:	b480      	push	{r7}
 80128ee:	b085      	sub	sp, #20
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	4603      	mov	r3, r0
 80128f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80128f6:	79fb      	ldrb	r3, [r7, #7]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d013      	beq.n	8012924 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80128fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012934 <netif_get_by_index+0x48>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	60fb      	str	r3, [r7, #12]
 8012902:	e00c      	b.n	801291e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801290a:	3301      	adds	r3, #1
 801290c:	b2db      	uxtb	r3, r3
 801290e:	79fa      	ldrb	r2, [r7, #7]
 8012910:	429a      	cmp	r2, r3
 8012912:	d101      	bne.n	8012918 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	e006      	b.n	8012926 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	60fb      	str	r3, [r7, #12]
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d1ef      	bne.n	8012904 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3714      	adds	r7, #20
 801292a:	46bd      	mov	sp, r7
 801292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012930:	4770      	bx	lr
 8012932:	bf00      	nop
 8012934:	2000f3d0 	.word	0x2000f3d0

08012938 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801293e:	f00a f9ad 	bl	801cc9c <sys_arch_protect>
 8012942:	6038      	str	r0, [r7, #0]
 8012944:	4b0d      	ldr	r3, [pc, #52]	@ (801297c <pbuf_free_ooseq+0x44>)
 8012946:	2200      	movs	r2, #0
 8012948:	701a      	strb	r2, [r3, #0]
 801294a:	6838      	ldr	r0, [r7, #0]
 801294c:	f00a f9b4 	bl	801ccb8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012950:	4b0b      	ldr	r3, [pc, #44]	@ (8012980 <pbuf_free_ooseq+0x48>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	607b      	str	r3, [r7, #4]
 8012956:	e00a      	b.n	801296e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801295c:	2b00      	cmp	r3, #0
 801295e:	d003      	beq.n	8012968 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f002 fc85 	bl	8015270 <tcp_free_ooseq>
      return;
 8012966:	e005      	b.n	8012974 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	607b      	str	r3, [r7, #4]
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d1f1      	bne.n	8012958 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012974:	3708      	adds	r7, #8
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
 801297a:	bf00      	nop
 801297c:	2000f3d9 	.word	0x2000f3d9
 8012980:	2000f3e8 	.word	0x2000f3e8

08012984 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801298c:	f7ff ffd4 	bl	8012938 <pbuf_free_ooseq>
}
 8012990:	bf00      	nop
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801299e:	f00a f97d 	bl	801cc9c <sys_arch_protect>
 80129a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80129a4:	4b0f      	ldr	r3, [pc, #60]	@ (80129e4 <pbuf_pool_is_empty+0x4c>)
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80129aa:	4b0e      	ldr	r3, [pc, #56]	@ (80129e4 <pbuf_pool_is_empty+0x4c>)
 80129ac:	2201      	movs	r2, #1
 80129ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f00a f981 	bl	801ccb8 <sys_arch_unprotect>

  if (!queued) {
 80129b6:	78fb      	ldrb	r3, [r7, #3]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d10f      	bne.n	80129dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80129bc:	2100      	movs	r1, #0
 80129be:	480a      	ldr	r0, [pc, #40]	@ (80129e8 <pbuf_pool_is_empty+0x50>)
 80129c0:	f7fe f840 	bl	8010a44 <tcpip_try_callback>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d008      	beq.n	80129dc <pbuf_pool_is_empty+0x44>
 80129ca:	f00a f967 	bl	801cc9c <sys_arch_protect>
 80129ce:	6078      	str	r0, [r7, #4]
 80129d0:	4b04      	ldr	r3, [pc, #16]	@ (80129e4 <pbuf_pool_is_empty+0x4c>)
 80129d2:	2200      	movs	r2, #0
 80129d4:	701a      	strb	r2, [r3, #0]
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f00a f96e 	bl	801ccb8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80129dc:	bf00      	nop
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	2000f3d9 	.word	0x2000f3d9
 80129e8:	08012985 	.word	0x08012985

080129ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b085      	sub	sp, #20
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	4611      	mov	r1, r2
 80129f8:	461a      	mov	r2, r3
 80129fa:	460b      	mov	r3, r1
 80129fc:	80fb      	strh	r3, [r7, #6]
 80129fe:	4613      	mov	r3, r2
 8012a00:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2200      	movs	r2, #0
 8012a06:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	68ba      	ldr	r2, [r7, #8]
 8012a0c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	88fa      	ldrh	r2, [r7, #6]
 8012a12:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	88ba      	ldrh	r2, [r7, #4]
 8012a18:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012a1a:	8b3b      	ldrh	r3, [r7, #24]
 8012a1c:	b2da      	uxtb	r2, r3
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	7f3a      	ldrb	r2, [r7, #28]
 8012a26:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2200      	movs	r2, #0
 8012a32:	73da      	strb	r2, [r3, #15]
}
 8012a34:	bf00      	nop
 8012a36:	3714      	adds	r7, #20
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3e:	4770      	bx	lr

08012a40 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b08c      	sub	sp, #48	@ 0x30
 8012a44:	af02      	add	r7, sp, #8
 8012a46:	4603      	mov	r3, r0
 8012a48:	71fb      	strb	r3, [r7, #7]
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	80bb      	strh	r3, [r7, #4]
 8012a4e:	4613      	mov	r3, r2
 8012a50:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012a52:	79fb      	ldrb	r3, [r7, #7]
 8012a54:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012a56:	887b      	ldrh	r3, [r7, #2]
 8012a58:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012a5c:	d07f      	beq.n	8012b5e <pbuf_alloc+0x11e>
 8012a5e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012a62:	f300 80c8 	bgt.w	8012bf6 <pbuf_alloc+0x1b6>
 8012a66:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012a6a:	d010      	beq.n	8012a8e <pbuf_alloc+0x4e>
 8012a6c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012a70:	f300 80c1 	bgt.w	8012bf6 <pbuf_alloc+0x1b6>
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d002      	beq.n	8012a7e <pbuf_alloc+0x3e>
 8012a78:	2b41      	cmp	r3, #65	@ 0x41
 8012a7a:	f040 80bc 	bne.w	8012bf6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012a7e:	887a      	ldrh	r2, [r7, #2]
 8012a80:	88bb      	ldrh	r3, [r7, #4]
 8012a82:	4619      	mov	r1, r3
 8012a84:	2000      	movs	r0, #0
 8012a86:	f000 f8d1 	bl	8012c2c <pbuf_alloc_reference>
 8012a8a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8012a8c:	e0bd      	b.n	8012c0a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012a92:	2300      	movs	r3, #0
 8012a94:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012a96:	88bb      	ldrh	r3, [r7, #4]
 8012a98:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012a9a:	200c      	movs	r0, #12
 8012a9c:	f7ff fb9a 	bl	80121d4 <memp_malloc>
 8012aa0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d109      	bne.n	8012abc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012aa8:	f7ff ff76 	bl	8012998 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d002      	beq.n	8012ab8 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012ab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ab4:	f000 faa8 	bl	8013008 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	e0a7      	b.n	8012c0c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012abc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012abe:	3303      	adds	r3, #3
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	f023 0303 	bic.w	r3, r3, #3
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	8b7a      	ldrh	r2, [r7, #26]
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	bf28      	it	cs
 8012ad4:	4613      	movcs	r3, r2
 8012ad6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012ad8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ada:	3310      	adds	r3, #16
 8012adc:	693a      	ldr	r2, [r7, #16]
 8012ade:	4413      	add	r3, r2
 8012ae0:	3303      	adds	r3, #3
 8012ae2:	f023 0303 	bic.w	r3, r3, #3
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	89f9      	ldrh	r1, [r7, #14]
 8012aea:	8b7a      	ldrh	r2, [r7, #26]
 8012aec:	2300      	movs	r3, #0
 8012aee:	9301      	str	r3, [sp, #4]
 8012af0:	887b      	ldrh	r3, [r7, #2]
 8012af2:	9300      	str	r3, [sp, #0]
 8012af4:	460b      	mov	r3, r1
 8012af6:	4601      	mov	r1, r0
 8012af8:	6938      	ldr	r0, [r7, #16]
 8012afa:	f7ff ff77 	bl	80129ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	685b      	ldr	r3, [r3, #4]
 8012b02:	f003 0303 	and.w	r3, r3, #3
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d006      	beq.n	8012b18 <pbuf_alloc+0xd8>
 8012b0a:	4b42      	ldr	r3, [pc, #264]	@ (8012c14 <pbuf_alloc+0x1d4>)
 8012b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012b10:	4941      	ldr	r1, [pc, #260]	@ (8012c18 <pbuf_alloc+0x1d8>)
 8012b12:	4842      	ldr	r0, [pc, #264]	@ (8012c1c <pbuf_alloc+0x1dc>)
 8012b14:	f00a fe38 	bl	801d788 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012b18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b1a:	3303      	adds	r3, #3
 8012b1c:	f023 0303 	bic.w	r3, r3, #3
 8012b20:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012b24:	d106      	bne.n	8012b34 <pbuf_alloc+0xf4>
 8012b26:	4b3b      	ldr	r3, [pc, #236]	@ (8012c14 <pbuf_alloc+0x1d4>)
 8012b28:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012b2c:	493c      	ldr	r1, [pc, #240]	@ (8012c20 <pbuf_alloc+0x1e0>)
 8012b2e:	483b      	ldr	r0, [pc, #236]	@ (8012c1c <pbuf_alloc+0x1dc>)
 8012b30:	f00a fe2a 	bl	801d788 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d102      	bne.n	8012b40 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b3e:	e002      	b.n	8012b46 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	693a      	ldr	r2, [r7, #16]
 8012b44:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012b4a:	8b7a      	ldrh	r2, [r7, #26]
 8012b4c:	89fb      	ldrh	r3, [r7, #14]
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012b52:	2300      	movs	r3, #0
 8012b54:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012b56:	8b7b      	ldrh	r3, [r7, #26]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d19e      	bne.n	8012a9a <pbuf_alloc+0x5a>
      break;
 8012b5c:	e055      	b.n	8012c0a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012b5e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b60:	3303      	adds	r3, #3
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	f023 0303 	bic.w	r3, r3, #3
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	88bb      	ldrh	r3, [r7, #4]
 8012b6c:	3303      	adds	r3, #3
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	f023 0303 	bic.w	r3, r3, #3
 8012b74:	b29b      	uxth	r3, r3
 8012b76:	4413      	add	r3, r2
 8012b78:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012b7a:	8b3b      	ldrh	r3, [r7, #24]
 8012b7c:	3310      	adds	r3, #16
 8012b7e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012b80:	8b3a      	ldrh	r2, [r7, #24]
 8012b82:	88bb      	ldrh	r3, [r7, #4]
 8012b84:	3303      	adds	r3, #3
 8012b86:	f023 0303 	bic.w	r3, r3, #3
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d306      	bcc.n	8012b9c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012b8e:	8afa      	ldrh	r2, [r7, #22]
 8012b90:	88bb      	ldrh	r3, [r7, #4]
 8012b92:	3303      	adds	r3, #3
 8012b94:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d201      	bcs.n	8012ba0 <pbuf_alloc+0x160>
        return NULL;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	e035      	b.n	8012c0c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012ba0:	8afb      	ldrh	r3, [r7, #22]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7ff f972 	bl	8011e8c <mem_malloc>
 8012ba8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d101      	bne.n	8012bb4 <pbuf_alloc+0x174>
        return NULL;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	e02b      	b.n	8012c0c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012bb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012bb6:	3310      	adds	r3, #16
 8012bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bba:	4413      	add	r3, r2
 8012bbc:	3303      	adds	r3, #3
 8012bbe:	f023 0303 	bic.w	r3, r3, #3
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	88b9      	ldrh	r1, [r7, #4]
 8012bc6:	88ba      	ldrh	r2, [r7, #4]
 8012bc8:	2300      	movs	r3, #0
 8012bca:	9301      	str	r3, [sp, #4]
 8012bcc:	887b      	ldrh	r3, [r7, #2]
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4601      	mov	r1, r0
 8012bd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012bd6:	f7ff ff09 	bl	80129ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d010      	beq.n	8012c08 <pbuf_alloc+0x1c8>
 8012be6:	4b0b      	ldr	r3, [pc, #44]	@ (8012c14 <pbuf_alloc+0x1d4>)
 8012be8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012bec:	490d      	ldr	r1, [pc, #52]	@ (8012c24 <pbuf_alloc+0x1e4>)
 8012bee:	480b      	ldr	r0, [pc, #44]	@ (8012c1c <pbuf_alloc+0x1dc>)
 8012bf0:	f00a fdca 	bl	801d788 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012bf4:	e008      	b.n	8012c08 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012bf6:	4b07      	ldr	r3, [pc, #28]	@ (8012c14 <pbuf_alloc+0x1d4>)
 8012bf8:	f240 1227 	movw	r2, #295	@ 0x127
 8012bfc:	490a      	ldr	r1, [pc, #40]	@ (8012c28 <pbuf_alloc+0x1e8>)
 8012bfe:	4807      	ldr	r0, [pc, #28]	@ (8012c1c <pbuf_alloc+0x1dc>)
 8012c00:	f00a fdc2 	bl	801d788 <iprintf>
      return NULL;
 8012c04:	2300      	movs	r3, #0
 8012c06:	e001      	b.n	8012c0c <pbuf_alloc+0x1cc>
      break;
 8012c08:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3728      	adds	r7, #40	@ 0x28
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	080211b4 	.word	0x080211b4
 8012c18:	080211e4 	.word	0x080211e4
 8012c1c:	08021214 	.word	0x08021214
 8012c20:	0802123c 	.word	0x0802123c
 8012c24:	08021270 	.word	0x08021270
 8012c28:	0802129c 	.word	0x0802129c

08012c2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af02      	add	r7, sp, #8
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	807b      	strh	r3, [r7, #2]
 8012c38:	4613      	mov	r3, r2
 8012c3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012c3c:	883b      	ldrh	r3, [r7, #0]
 8012c3e:	2b41      	cmp	r3, #65	@ 0x41
 8012c40:	d009      	beq.n	8012c56 <pbuf_alloc_reference+0x2a>
 8012c42:	883b      	ldrh	r3, [r7, #0]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d006      	beq.n	8012c56 <pbuf_alloc_reference+0x2a>
 8012c48:	4b0f      	ldr	r3, [pc, #60]	@ (8012c88 <pbuf_alloc_reference+0x5c>)
 8012c4a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012c4e:	490f      	ldr	r1, [pc, #60]	@ (8012c8c <pbuf_alloc_reference+0x60>)
 8012c50:	480f      	ldr	r0, [pc, #60]	@ (8012c90 <pbuf_alloc_reference+0x64>)
 8012c52:	f00a fd99 	bl	801d788 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012c56:	200b      	movs	r0, #11
 8012c58:	f7ff fabc 	bl	80121d4 <memp_malloc>
 8012c5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d101      	bne.n	8012c68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012c64:	2300      	movs	r3, #0
 8012c66:	e00b      	b.n	8012c80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012c68:	8879      	ldrh	r1, [r7, #2]
 8012c6a:	887a      	ldrh	r2, [r7, #2]
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	883b      	ldrh	r3, [r7, #0]
 8012c72:	9300      	str	r3, [sp, #0]
 8012c74:	460b      	mov	r3, r1
 8012c76:	6879      	ldr	r1, [r7, #4]
 8012c78:	68f8      	ldr	r0, [r7, #12]
 8012c7a:	f7ff feb7 	bl	80129ec <pbuf_init_alloced_pbuf>
  return p;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3710      	adds	r7, #16
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	080211b4 	.word	0x080211b4
 8012c8c:	080212b8 	.word	0x080212b8
 8012c90:	08021214 	.word	0x08021214

08012c94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b088      	sub	sp, #32
 8012c98:	af02      	add	r7, sp, #8
 8012c9a:	607b      	str	r3, [r7, #4]
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	73fb      	strb	r3, [r7, #15]
 8012ca0:	460b      	mov	r3, r1
 8012ca2:	81bb      	strh	r3, [r7, #12]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012cac:	8a7b      	ldrh	r3, [r7, #18]
 8012cae:	3303      	adds	r3, #3
 8012cb0:	f023 0203 	bic.w	r2, r3, #3
 8012cb4:	89bb      	ldrh	r3, [r7, #12]
 8012cb6:	441a      	add	r2, r3
 8012cb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d901      	bls.n	8012cc2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e018      	b.n	8012cf4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012cc2:	6a3b      	ldr	r3, [r7, #32]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d007      	beq.n	8012cd8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012cc8:	8a7b      	ldrh	r3, [r7, #18]
 8012cca:	3303      	adds	r3, #3
 8012ccc:	f023 0303 	bic.w	r3, r3, #3
 8012cd0:	6a3a      	ldr	r2, [r7, #32]
 8012cd2:	4413      	add	r3, r2
 8012cd4:	617b      	str	r3, [r7, #20]
 8012cd6:	e001      	b.n	8012cdc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012cd8:	2300      	movs	r3, #0
 8012cda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	89b9      	ldrh	r1, [r7, #12]
 8012ce0:	89ba      	ldrh	r2, [r7, #12]
 8012ce2:	2302      	movs	r3, #2
 8012ce4:	9301      	str	r3, [sp, #4]
 8012ce6:	897b      	ldrh	r3, [r7, #10]
 8012ce8:	9300      	str	r3, [sp, #0]
 8012cea:	460b      	mov	r3, r1
 8012cec:	6979      	ldr	r1, [r7, #20]
 8012cee:	f7ff fe7d 	bl	80129ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012cf2:	687b      	ldr	r3, [r7, #4]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3718      	adds	r7, #24
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	460b      	mov	r3, r1
 8012d06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d106      	bne.n	8012d1c <pbuf_realloc+0x20>
 8012d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8012df8 <pbuf_realloc+0xfc>)
 8012d10:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012d14:	4939      	ldr	r1, [pc, #228]	@ (8012dfc <pbuf_realloc+0x100>)
 8012d16:	483a      	ldr	r0, [pc, #232]	@ (8012e00 <pbuf_realloc+0x104>)
 8012d18:	f00a fd36 	bl	801d788 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	891b      	ldrh	r3, [r3, #8]
 8012d20:	887a      	ldrh	r2, [r7, #2]
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d263      	bcs.n	8012dee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	891a      	ldrh	r2, [r3, #8]
 8012d2a:	887b      	ldrh	r3, [r7, #2]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012d30:	887b      	ldrh	r3, [r7, #2]
 8012d32:	817b      	strh	r3, [r7, #10]
  q = p;
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012d38:	e018      	b.n	8012d6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	895b      	ldrh	r3, [r3, #10]
 8012d3e:	897a      	ldrh	r2, [r7, #10]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	891a      	ldrh	r2, [r3, #8]
 8012d48:	893b      	ldrh	r3, [r7, #8]
 8012d4a:	1ad3      	subs	r3, r2, r3
 8012d4c:	b29a      	uxth	r2, r3
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d106      	bne.n	8012d6c <pbuf_realloc+0x70>
 8012d5e:	4b26      	ldr	r3, [pc, #152]	@ (8012df8 <pbuf_realloc+0xfc>)
 8012d60:	f240 12af 	movw	r2, #431	@ 0x1af
 8012d64:	4927      	ldr	r1, [pc, #156]	@ (8012e04 <pbuf_realloc+0x108>)
 8012d66:	4826      	ldr	r0, [pc, #152]	@ (8012e00 <pbuf_realloc+0x104>)
 8012d68:	f00a fd0e 	bl	801d788 <iprintf>
  while (rem_len > q->len) {
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	895b      	ldrh	r3, [r3, #10]
 8012d70:	897a      	ldrh	r2, [r7, #10]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d8e1      	bhi.n	8012d3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	7b1b      	ldrb	r3, [r3, #12]
 8012d7a:	f003 030f 	and.w	r3, r3, #15
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d121      	bne.n	8012dc6 <pbuf_realloc+0xca>
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	895b      	ldrh	r3, [r3, #10]
 8012d86:	897a      	ldrh	r2, [r7, #10]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d01c      	beq.n	8012dc6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	7b5b      	ldrb	r3, [r3, #13]
 8012d90:	f003 0302 	and.w	r3, r3, #2
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d116      	bne.n	8012dc6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	685a      	ldr	r2, [r3, #4]
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	897b      	ldrh	r3, [r7, #10]
 8012da4:	4413      	add	r3, r2
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	4619      	mov	r1, r3
 8012daa:	68f8      	ldr	r0, [r7, #12]
 8012dac:	f7fe ff64 	bl	8011c78 <mem_trim>
 8012db0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d106      	bne.n	8012dc6 <pbuf_realloc+0xca>
 8012db8:	4b0f      	ldr	r3, [pc, #60]	@ (8012df8 <pbuf_realloc+0xfc>)
 8012dba:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012dbe:	4912      	ldr	r1, [pc, #72]	@ (8012e08 <pbuf_realloc+0x10c>)
 8012dc0:	480f      	ldr	r0, [pc, #60]	@ (8012e00 <pbuf_realloc+0x104>)
 8012dc2:	f00a fce1 	bl	801d788 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	897a      	ldrh	r2, [r7, #10]
 8012dca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	895a      	ldrh	r2, [r3, #10]
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d004      	beq.n	8012de6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	4618      	mov	r0, r3
 8012de2:	f000 f911 	bl	8013008 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2200      	movs	r2, #0
 8012dea:	601a      	str	r2, [r3, #0]
 8012dec:	e000      	b.n	8012df0 <pbuf_realloc+0xf4>
    return;
 8012dee:	bf00      	nop

}
 8012df0:	3710      	adds	r7, #16
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	080211b4 	.word	0x080211b4
 8012dfc:	080212cc 	.word	0x080212cc
 8012e00:	08021214 	.word	0x08021214
 8012e04:	080212e4 	.word	0x080212e4
 8012e08:	080212fc 	.word	0x080212fc

08012e0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b086      	sub	sp, #24
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	60b9      	str	r1, [r7, #8]
 8012e16:	4613      	mov	r3, r2
 8012e18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d106      	bne.n	8012e2e <pbuf_add_header_impl+0x22>
 8012e20:	4b2b      	ldr	r3, [pc, #172]	@ (8012ed0 <pbuf_add_header_impl+0xc4>)
 8012e22:	f240 12df 	movw	r2, #479	@ 0x1df
 8012e26:	492b      	ldr	r1, [pc, #172]	@ (8012ed4 <pbuf_add_header_impl+0xc8>)
 8012e28:	482b      	ldr	r0, [pc, #172]	@ (8012ed8 <pbuf_add_header_impl+0xcc>)
 8012e2a:	f00a fcad 	bl	801d788 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d003      	beq.n	8012e3c <pbuf_add_header_impl+0x30>
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e3a:	d301      	bcc.n	8012e40 <pbuf_add_header_impl+0x34>
    return 1;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e043      	b.n	8012ec8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d101      	bne.n	8012e4a <pbuf_add_header_impl+0x3e>
    return 0;
 8012e46:	2300      	movs	r3, #0
 8012e48:	e03e      	b.n	8012ec8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	891a      	ldrh	r2, [r3, #8]
 8012e52:	8a7b      	ldrh	r3, [r7, #18]
 8012e54:	4413      	add	r3, r2
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	8a7a      	ldrh	r2, [r7, #18]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d901      	bls.n	8012e62 <pbuf_add_header_impl+0x56>
    return 1;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e032      	b.n	8012ec8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	7b1b      	ldrb	r3, [r3, #12]
 8012e66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012e68:	8a3b      	ldrh	r3, [r7, #16]
 8012e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00c      	beq.n	8012e8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685a      	ldr	r2, [r3, #4]
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	425b      	negs	r3, r3
 8012e7a:	4413      	add	r3, r2
 8012e7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	3310      	adds	r3, #16
 8012e82:	697a      	ldr	r2, [r7, #20]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d20d      	bcs.n	8012ea4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012e88:	2301      	movs	r3, #1
 8012e8a:	e01d      	b.n	8012ec8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012e8c:	79fb      	ldrb	r3, [r7, #7]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d006      	beq.n	8012ea0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	425b      	negs	r3, r3
 8012e9a:	4413      	add	r3, r2
 8012e9c:	617b      	str	r3, [r7, #20]
 8012e9e:	e001      	b.n	8012ea4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	e011      	b.n	8012ec8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	697a      	ldr	r2, [r7, #20]
 8012ea8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	895a      	ldrh	r2, [r3, #10]
 8012eae:	8a7b      	ldrh	r3, [r7, #18]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	b29a      	uxth	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	891a      	ldrh	r2, [r3, #8]
 8012ebc:	8a7b      	ldrh	r3, [r7, #18]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	811a      	strh	r2, [r3, #8]


  return 0;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3718      	adds	r7, #24
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	080211b4 	.word	0x080211b4
 8012ed4:	08021318 	.word	0x08021318
 8012ed8:	08021214 	.word	0x08021214

08012edc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff ff8e 	bl	8012e0c <pbuf_add_header_impl>
 8012ef0:	4603      	mov	r3, r0
}
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	3708      	adds	r7, #8
 8012ef6:	46bd      	mov	sp, r7
 8012ef8:	bd80      	pop	{r7, pc}
	...

08012efc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
 8012f04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d106      	bne.n	8012f1a <pbuf_remove_header+0x1e>
 8012f0c:	4b20      	ldr	r3, [pc, #128]	@ (8012f90 <pbuf_remove_header+0x94>)
 8012f0e:	f240 224b 	movw	r2, #587	@ 0x24b
 8012f12:	4920      	ldr	r1, [pc, #128]	@ (8012f94 <pbuf_remove_header+0x98>)
 8012f14:	4820      	ldr	r0, [pc, #128]	@ (8012f98 <pbuf_remove_header+0x9c>)
 8012f16:	f00a fc37 	bl	801d788 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d003      	beq.n	8012f28 <pbuf_remove_header+0x2c>
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012f26:	d301      	bcc.n	8012f2c <pbuf_remove_header+0x30>
    return 1;
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e02c      	b.n	8012f86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d101      	bne.n	8012f36 <pbuf_remove_header+0x3a>
    return 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	e027      	b.n	8012f86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	895b      	ldrh	r3, [r3, #10]
 8012f3e:	89fa      	ldrh	r2, [r7, #14]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d908      	bls.n	8012f56 <pbuf_remove_header+0x5a>
 8012f44:	4b12      	ldr	r3, [pc, #72]	@ (8012f90 <pbuf_remove_header+0x94>)
 8012f46:	f240 2255 	movw	r2, #597	@ 0x255
 8012f4a:	4914      	ldr	r1, [pc, #80]	@ (8012f9c <pbuf_remove_header+0xa0>)
 8012f4c:	4812      	ldr	r0, [pc, #72]	@ (8012f98 <pbuf_remove_header+0x9c>)
 8012f4e:	f00a fc1b 	bl	801d788 <iprintf>
 8012f52:	2301      	movs	r3, #1
 8012f54:	e017      	b.n	8012f86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	685a      	ldr	r2, [r3, #4]
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	441a      	add	r2, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	895a      	ldrh	r2, [r3, #10]
 8012f6c:	89fb      	ldrh	r3, [r7, #14]
 8012f6e:	1ad3      	subs	r3, r2, r3
 8012f70:	b29a      	uxth	r2, r3
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	891a      	ldrh	r2, [r3, #8]
 8012f7a:	89fb      	ldrh	r3, [r7, #14]
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	b29a      	uxth	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	080211b4 	.word	0x080211b4
 8012f94:	08021318 	.word	0x08021318
 8012f98:	08021214 	.word	0x08021214
 8012f9c:	08021324 	.word	0x08021324

08012fa0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	807b      	strh	r3, [r7, #2]
 8012fac:	4613      	mov	r3, r2
 8012fae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	da08      	bge.n	8012fca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fbc:	425b      	negs	r3, r3
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7ff ff9b 	bl	8012efc <pbuf_remove_header>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	e007      	b.n	8012fda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fce:	787a      	ldrb	r2, [r7, #1]
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7ff ff1a 	bl	8012e0c <pbuf_add_header_impl>
 8012fd8:	4603      	mov	r3, r0
  }
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3708      	adds	r7, #8
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012fe2:	b580      	push	{r7, lr}
 8012fe4:	b082      	sub	sp, #8
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
 8012fea:	460b      	mov	r3, r1
 8012fec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	4619      	mov	r1, r3
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7ff ffd2 	bl	8012fa0 <pbuf_header_impl>
 8012ffc:	4603      	mov	r3, r0
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3708      	adds	r7, #8
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
	...

08013008 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b088      	sub	sp, #32
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d10b      	bne.n	801302e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d106      	bne.n	801302a <pbuf_free+0x22>
 801301c:	4b3b      	ldr	r3, [pc, #236]	@ (801310c <pbuf_free+0x104>)
 801301e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8013022:	493b      	ldr	r1, [pc, #236]	@ (8013110 <pbuf_free+0x108>)
 8013024:	483b      	ldr	r0, [pc, #236]	@ (8013114 <pbuf_free+0x10c>)
 8013026:	f00a fbaf 	bl	801d788 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801302a:	2300      	movs	r3, #0
 801302c:	e069      	b.n	8013102 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013032:	e062      	b.n	80130fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013034:	f009 fe32 	bl	801cc9c <sys_arch_protect>
 8013038:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	7b9b      	ldrb	r3, [r3, #14]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d106      	bne.n	8013050 <pbuf_free+0x48>
 8013042:	4b32      	ldr	r3, [pc, #200]	@ (801310c <pbuf_free+0x104>)
 8013044:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8013048:	4933      	ldr	r1, [pc, #204]	@ (8013118 <pbuf_free+0x110>)
 801304a:	4832      	ldr	r0, [pc, #200]	@ (8013114 <pbuf_free+0x10c>)
 801304c:	f00a fb9c 	bl	801d788 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	7b9b      	ldrb	r3, [r3, #14]
 8013054:	3b01      	subs	r3, #1
 8013056:	b2da      	uxtb	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	739a      	strb	r2, [r3, #14]
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	7b9b      	ldrb	r3, [r3, #14]
 8013060:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013062:	69b8      	ldr	r0, [r7, #24]
 8013064:	f009 fe28 	bl	801ccb8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013068:	7dfb      	ldrb	r3, [r7, #23]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d143      	bne.n	80130f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	7b1b      	ldrb	r3, [r3, #12]
 8013078:	f003 030f 	and.w	r3, r3, #15
 801307c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	7b5b      	ldrb	r3, [r3, #13]
 8013082:	f003 0302 	and.w	r3, r3, #2
 8013086:	2b00      	cmp	r3, #0
 8013088:	d011      	beq.n	80130ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <pbuf_free+0x9c>
 8013096:	4b1d      	ldr	r3, [pc, #116]	@ (801310c <pbuf_free+0x104>)
 8013098:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801309c:	491f      	ldr	r1, [pc, #124]	@ (801311c <pbuf_free+0x114>)
 801309e:	481d      	ldr	r0, [pc, #116]	@ (8013114 <pbuf_free+0x10c>)
 80130a0:	f00a fb72 	bl	801d788 <iprintf>
        pc->custom_free_function(p);
 80130a4:	68bb      	ldr	r3, [r7, #8]
 80130a6:	691b      	ldr	r3, [r3, #16]
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	4798      	blx	r3
 80130ac:	e01d      	b.n	80130ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80130ae:	7bfb      	ldrb	r3, [r7, #15]
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	d104      	bne.n	80130be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80130b4:	6879      	ldr	r1, [r7, #4]
 80130b6:	200c      	movs	r0, #12
 80130b8:	f7ff f902 	bl	80122c0 <memp_free>
 80130bc:	e015      	b.n	80130ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80130be:	7bfb      	ldrb	r3, [r7, #15]
 80130c0:	2b01      	cmp	r3, #1
 80130c2:	d104      	bne.n	80130ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80130c4:	6879      	ldr	r1, [r7, #4]
 80130c6:	200b      	movs	r0, #11
 80130c8:	f7ff f8fa 	bl	80122c0 <memp_free>
 80130cc:	e00d      	b.n	80130ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80130ce:	7bfb      	ldrb	r3, [r7, #15]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d103      	bne.n	80130dc <pbuf_free+0xd4>
          mem_free(p);
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	f7fe fd3f 	bl	8011b58 <mem_free>
 80130da:	e006      	b.n	80130ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80130dc:	4b0b      	ldr	r3, [pc, #44]	@ (801310c <pbuf_free+0x104>)
 80130de:	f240 320f 	movw	r2, #783	@ 0x30f
 80130e2:	490f      	ldr	r1, [pc, #60]	@ (8013120 <pbuf_free+0x118>)
 80130e4:	480b      	ldr	r0, [pc, #44]	@ (8013114 <pbuf_free+0x10c>)
 80130e6:	f00a fb4f 	bl	801d788 <iprintf>
        }
      }
      count++;
 80130ea:	7ffb      	ldrb	r3, [r7, #31]
 80130ec:	3301      	adds	r3, #1
 80130ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	607b      	str	r3, [r7, #4]
 80130f4:	e001      	b.n	80130fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80130f6:	2300      	movs	r3, #0
 80130f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d199      	bne.n	8013034 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013100:	7ffb      	ldrb	r3, [r7, #31]
}
 8013102:	4618      	mov	r0, r3
 8013104:	3720      	adds	r7, #32
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
 801310a:	bf00      	nop
 801310c:	080211b4 	.word	0x080211b4
 8013110:	08021318 	.word	0x08021318
 8013114:	08021214 	.word	0x08021214
 8013118:	08021344 	.word	0x08021344
 801311c:	0802135c 	.word	0x0802135c
 8013120:	08021380 	.word	0x08021380

08013124 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013124:	b480      	push	{r7}
 8013126:	b085      	sub	sp, #20
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801312c:	2300      	movs	r3, #0
 801312e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013130:	e005      	b.n	801313e <pbuf_clen+0x1a>
    ++len;
 8013132:	89fb      	ldrh	r3, [r7, #14]
 8013134:	3301      	adds	r3, #1
 8013136:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d1f6      	bne.n	8013132 <pbuf_clen+0xe>
  }
  return len;
 8013144:	89fb      	ldrh	r3, [r7, #14]
}
 8013146:	4618      	mov	r0, r3
 8013148:	3714      	adds	r7, #20
 801314a:	46bd      	mov	sp, r7
 801314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013150:	4770      	bx	lr
	...

08013154 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b084      	sub	sp, #16
 8013158:	af00      	add	r7, sp, #0
 801315a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d016      	beq.n	8013190 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013162:	f009 fd9b 	bl	801cc9c <sys_arch_protect>
 8013166:	60f8      	str	r0, [r7, #12]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	7b9b      	ldrb	r3, [r3, #14]
 801316c:	3301      	adds	r3, #1
 801316e:	b2da      	uxtb	r2, r3
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	739a      	strb	r2, [r3, #14]
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f009 fd9f 	bl	801ccb8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	7b9b      	ldrb	r3, [r3, #14]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d106      	bne.n	8013190 <pbuf_ref+0x3c>
 8013182:	4b05      	ldr	r3, [pc, #20]	@ (8013198 <pbuf_ref+0x44>)
 8013184:	f240 3242 	movw	r2, #834	@ 0x342
 8013188:	4904      	ldr	r1, [pc, #16]	@ (801319c <pbuf_ref+0x48>)
 801318a:	4805      	ldr	r0, [pc, #20]	@ (80131a0 <pbuf_ref+0x4c>)
 801318c:	f00a fafc 	bl	801d788 <iprintf>
  }
}
 8013190:	bf00      	nop
 8013192:	3710      	adds	r7, #16
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}
 8013198:	080211b4 	.word	0x080211b4
 801319c:	08021394 	.word	0x08021394
 80131a0:	08021214 	.word	0x08021214

080131a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d002      	beq.n	80131ba <pbuf_cat+0x16>
 80131b4:	683b      	ldr	r3, [r7, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d107      	bne.n	80131ca <pbuf_cat+0x26>
 80131ba:	4b20      	ldr	r3, [pc, #128]	@ (801323c <pbuf_cat+0x98>)
 80131bc:	f240 3259 	movw	r2, #857	@ 0x359
 80131c0:	491f      	ldr	r1, [pc, #124]	@ (8013240 <pbuf_cat+0x9c>)
 80131c2:	4820      	ldr	r0, [pc, #128]	@ (8013244 <pbuf_cat+0xa0>)
 80131c4:	f00a fae0 	bl	801d788 <iprintf>
 80131c8:	e034      	b.n	8013234 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	60fb      	str	r3, [r7, #12]
 80131ce:	e00a      	b.n	80131e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	891a      	ldrh	r2, [r3, #8]
 80131d4:	683b      	ldr	r3, [r7, #0]
 80131d6:	891b      	ldrh	r3, [r3, #8]
 80131d8:	4413      	add	r3, r2
 80131da:	b29a      	uxth	r2, r3
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	60fb      	str	r3, [r7, #12]
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d1f0      	bne.n	80131d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	891a      	ldrh	r2, [r3, #8]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	895b      	ldrh	r3, [r3, #10]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d006      	beq.n	8013208 <pbuf_cat+0x64>
 80131fa:	4b10      	ldr	r3, [pc, #64]	@ (801323c <pbuf_cat+0x98>)
 80131fc:	f240 3262 	movw	r2, #866	@ 0x362
 8013200:	4911      	ldr	r1, [pc, #68]	@ (8013248 <pbuf_cat+0xa4>)
 8013202:	4810      	ldr	r0, [pc, #64]	@ (8013244 <pbuf_cat+0xa0>)
 8013204:	f00a fac0 	bl	801d788 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d006      	beq.n	801321e <pbuf_cat+0x7a>
 8013210:	4b0a      	ldr	r3, [pc, #40]	@ (801323c <pbuf_cat+0x98>)
 8013212:	f240 3263 	movw	r2, #867	@ 0x363
 8013216:	490d      	ldr	r1, [pc, #52]	@ (801324c <pbuf_cat+0xa8>)
 8013218:	480a      	ldr	r0, [pc, #40]	@ (8013244 <pbuf_cat+0xa0>)
 801321a:	f00a fab5 	bl	801d788 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	891a      	ldrh	r2, [r3, #8]
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	891b      	ldrh	r3, [r3, #8]
 8013226:	4413      	add	r3, r2
 8013228:	b29a      	uxth	r2, r3
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	683a      	ldr	r2, [r7, #0]
 8013232:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	080211b4 	.word	0x080211b4
 8013240:	080213a8 	.word	0x080213a8
 8013244:	08021214 	.word	0x08021214
 8013248:	080213e0 	.word	0x080213e0
 801324c:	08021410 	.word	0x08021410

08013250 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801325a:	6839      	ldr	r1, [r7, #0]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f7ff ffa1 	bl	80131a4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013262:	6838      	ldr	r0, [r7, #0]
 8013264:	f7ff ff76 	bl	8013154 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013268:	bf00      	nop
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b086      	sub	sp, #24
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801327a:	2300      	movs	r3, #0
 801327c:	617b      	str	r3, [r7, #20]
 801327e:	2300      	movs	r3, #0
 8013280:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d008      	beq.n	801329a <pbuf_copy+0x2a>
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d005      	beq.n	801329a <pbuf_copy+0x2a>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	891a      	ldrh	r2, [r3, #8]
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	891b      	ldrh	r3, [r3, #8]
 8013296:	429a      	cmp	r2, r3
 8013298:	d209      	bcs.n	80132ae <pbuf_copy+0x3e>
 801329a:	4b57      	ldr	r3, [pc, #348]	@ (80133f8 <pbuf_copy+0x188>)
 801329c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80132a0:	4956      	ldr	r1, [pc, #344]	@ (80133fc <pbuf_copy+0x18c>)
 80132a2:	4857      	ldr	r0, [pc, #348]	@ (8013400 <pbuf_copy+0x190>)
 80132a4:	f00a fa70 	bl	801d788 <iprintf>
 80132a8:	f06f 030f 	mvn.w	r3, #15
 80132ac:	e09f      	b.n	80133ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	895b      	ldrh	r3, [r3, #10]
 80132b2:	461a      	mov	r2, r3
 80132b4:	697b      	ldr	r3, [r7, #20]
 80132b6:	1ad2      	subs	r2, r2, r3
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	895b      	ldrh	r3, [r3, #10]
 80132bc:	4619      	mov	r1, r3
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	1acb      	subs	r3, r1, r3
 80132c2:	429a      	cmp	r2, r3
 80132c4:	d306      	bcc.n	80132d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	895b      	ldrh	r3, [r3, #10]
 80132ca:	461a      	mov	r2, r3
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	60fb      	str	r3, [r7, #12]
 80132d2:	e005      	b.n	80132e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	895b      	ldrh	r3, [r3, #10]
 80132d8:	461a      	mov	r2, r3
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	1ad3      	subs	r3, r2, r3
 80132de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	685a      	ldr	r2, [r3, #4]
 80132e4:	697b      	ldr	r3, [r7, #20]
 80132e6:	18d0      	adds	r0, r2, r3
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	685a      	ldr	r2, [r3, #4]
 80132ec:	693b      	ldr	r3, [r7, #16]
 80132ee:	4413      	add	r3, r2
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	4619      	mov	r1, r3
 80132f4:	f00a fcc9 	bl	801dc8a <memcpy>
    offset_to += len;
 80132f8:	697a      	ldr	r2, [r7, #20]
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	4413      	add	r3, r2
 80132fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013300:	693a      	ldr	r2, [r7, #16]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	4413      	add	r3, r2
 8013306:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	895b      	ldrh	r3, [r3, #10]
 801330c:	461a      	mov	r2, r3
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	4293      	cmp	r3, r2
 8013312:	d906      	bls.n	8013322 <pbuf_copy+0xb2>
 8013314:	4b38      	ldr	r3, [pc, #224]	@ (80133f8 <pbuf_copy+0x188>)
 8013316:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801331a:	493a      	ldr	r1, [pc, #232]	@ (8013404 <pbuf_copy+0x194>)
 801331c:	4838      	ldr	r0, [pc, #224]	@ (8013400 <pbuf_copy+0x190>)
 801331e:	f00a fa33 	bl	801d788 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	895b      	ldrh	r3, [r3, #10]
 8013326:	461a      	mov	r2, r3
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	4293      	cmp	r3, r2
 801332c:	d906      	bls.n	801333c <pbuf_copy+0xcc>
 801332e:	4b32      	ldr	r3, [pc, #200]	@ (80133f8 <pbuf_copy+0x188>)
 8013330:	f240 32da 	movw	r2, #986	@ 0x3da
 8013334:	4934      	ldr	r1, [pc, #208]	@ (8013408 <pbuf_copy+0x198>)
 8013336:	4832      	ldr	r0, [pc, #200]	@ (8013400 <pbuf_copy+0x190>)
 8013338:	f00a fa26 	bl	801d788 <iprintf>
    if (offset_from >= p_from->len) {
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	895b      	ldrh	r3, [r3, #10]
 8013340:	461a      	mov	r2, r3
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	4293      	cmp	r3, r2
 8013346:	d304      	bcc.n	8013352 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013348:	2300      	movs	r3, #0
 801334a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	895b      	ldrh	r3, [r3, #10]
 8013356:	461a      	mov	r2, r3
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	4293      	cmp	r3, r2
 801335c:	d114      	bne.n	8013388 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801335e:	2300      	movs	r3, #0
 8013360:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d10c      	bne.n	8013388 <pbuf_copy+0x118>
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d009      	beq.n	8013388 <pbuf_copy+0x118>
 8013374:	4b20      	ldr	r3, [pc, #128]	@ (80133f8 <pbuf_copy+0x188>)
 8013376:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801337a:	4924      	ldr	r1, [pc, #144]	@ (801340c <pbuf_copy+0x19c>)
 801337c:	4820      	ldr	r0, [pc, #128]	@ (8013400 <pbuf_copy+0x190>)
 801337e:	f00a fa03 	bl	801d788 <iprintf>
 8013382:	f06f 030f 	mvn.w	r3, #15
 8013386:	e032      	b.n	80133ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d013      	beq.n	80133b6 <pbuf_copy+0x146>
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	895a      	ldrh	r2, [r3, #10]
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	891b      	ldrh	r3, [r3, #8]
 8013396:	429a      	cmp	r2, r3
 8013398:	d10d      	bne.n	80133b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d009      	beq.n	80133b6 <pbuf_copy+0x146>
 80133a2:	4b15      	ldr	r3, [pc, #84]	@ (80133f8 <pbuf_copy+0x188>)
 80133a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80133a8:	4919      	ldr	r1, [pc, #100]	@ (8013410 <pbuf_copy+0x1a0>)
 80133aa:	4815      	ldr	r0, [pc, #84]	@ (8013400 <pbuf_copy+0x190>)
 80133ac:	f00a f9ec 	bl	801d788 <iprintf>
 80133b0:	f06f 0305 	mvn.w	r3, #5
 80133b4:	e01b      	b.n	80133ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d013      	beq.n	80133e4 <pbuf_copy+0x174>
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	895a      	ldrh	r2, [r3, #10]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	891b      	ldrh	r3, [r3, #8]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d10d      	bne.n	80133e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d009      	beq.n	80133e4 <pbuf_copy+0x174>
 80133d0:	4b09      	ldr	r3, [pc, #36]	@ (80133f8 <pbuf_copy+0x188>)
 80133d2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80133d6:	490e      	ldr	r1, [pc, #56]	@ (8013410 <pbuf_copy+0x1a0>)
 80133d8:	4809      	ldr	r0, [pc, #36]	@ (8013400 <pbuf_copy+0x190>)
 80133da:	f00a f9d5 	bl	801d788 <iprintf>
 80133de:	f06f 0305 	mvn.w	r3, #5
 80133e2:	e004      	b.n	80133ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	f47f af61 	bne.w	80132ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3718      	adds	r7, #24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	080211b4 	.word	0x080211b4
 80133fc:	0802145c 	.word	0x0802145c
 8013400:	08021214 	.word	0x08021214
 8013404:	0802148c 	.word	0x0802148c
 8013408:	080214a4 	.word	0x080214a4
 801340c:	080214c0 	.word	0x080214c0
 8013410:	080214d0 	.word	0x080214d0

08013414 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b088      	sub	sp, #32
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	4611      	mov	r1, r2
 8013420:	461a      	mov	r2, r3
 8013422:	460b      	mov	r3, r1
 8013424:	80fb      	strh	r3, [r7, #6]
 8013426:	4613      	mov	r3, r2
 8013428:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801342a:	2300      	movs	r3, #0
 801342c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801342e:	2300      	movs	r3, #0
 8013430:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d108      	bne.n	801344a <pbuf_copy_partial+0x36>
 8013438:	4b2b      	ldr	r3, [pc, #172]	@ (80134e8 <pbuf_copy_partial+0xd4>)
 801343a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801343e:	492b      	ldr	r1, [pc, #172]	@ (80134ec <pbuf_copy_partial+0xd8>)
 8013440:	482b      	ldr	r0, [pc, #172]	@ (80134f0 <pbuf_copy_partial+0xdc>)
 8013442:	f00a f9a1 	bl	801d788 <iprintf>
 8013446:	2300      	movs	r3, #0
 8013448:	e04a      	b.n	80134e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d108      	bne.n	8013462 <pbuf_copy_partial+0x4e>
 8013450:	4b25      	ldr	r3, [pc, #148]	@ (80134e8 <pbuf_copy_partial+0xd4>)
 8013452:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013456:	4927      	ldr	r1, [pc, #156]	@ (80134f4 <pbuf_copy_partial+0xe0>)
 8013458:	4825      	ldr	r0, [pc, #148]	@ (80134f0 <pbuf_copy_partial+0xdc>)
 801345a:	f00a f995 	bl	801d788 <iprintf>
 801345e:	2300      	movs	r3, #0
 8013460:	e03e      	b.n	80134e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	61fb      	str	r3, [r7, #28]
 8013466:	e034      	b.n	80134d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013468:	88bb      	ldrh	r3, [r7, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d00a      	beq.n	8013484 <pbuf_copy_partial+0x70>
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	895b      	ldrh	r3, [r3, #10]
 8013472:	88ba      	ldrh	r2, [r7, #4]
 8013474:	429a      	cmp	r2, r3
 8013476:	d305      	bcc.n	8013484 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	895b      	ldrh	r3, [r3, #10]
 801347c:	88ba      	ldrh	r2, [r7, #4]
 801347e:	1ad3      	subs	r3, r2, r3
 8013480:	80bb      	strh	r3, [r7, #4]
 8013482:	e023      	b.n	80134cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	895a      	ldrh	r2, [r3, #10]
 8013488:	88bb      	ldrh	r3, [r7, #4]
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801348e:	8b3a      	ldrh	r2, [r7, #24]
 8013490:	88fb      	ldrh	r3, [r7, #6]
 8013492:	429a      	cmp	r2, r3
 8013494:	d901      	bls.n	801349a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013496:	88fb      	ldrh	r3, [r7, #6]
 8013498:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801349a:	8b7b      	ldrh	r3, [r7, #26]
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	18d0      	adds	r0, r2, r3
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	685a      	ldr	r2, [r3, #4]
 80134a4:	88bb      	ldrh	r3, [r7, #4]
 80134a6:	4413      	add	r3, r2
 80134a8:	8b3a      	ldrh	r2, [r7, #24]
 80134aa:	4619      	mov	r1, r3
 80134ac:	f00a fbed 	bl	801dc8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80134b0:	8afa      	ldrh	r2, [r7, #22]
 80134b2:	8b3b      	ldrh	r3, [r7, #24]
 80134b4:	4413      	add	r3, r2
 80134b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80134b8:	8b7a      	ldrh	r2, [r7, #26]
 80134ba:	8b3b      	ldrh	r3, [r7, #24]
 80134bc:	4413      	add	r3, r2
 80134be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80134c0:	88fa      	ldrh	r2, [r7, #6]
 80134c2:	8b3b      	ldrh	r3, [r7, #24]
 80134c4:	1ad3      	subs	r3, r2, r3
 80134c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80134c8:	2300      	movs	r3, #0
 80134ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80134cc:	69fb      	ldr	r3, [r7, #28]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	61fb      	str	r3, [r7, #28]
 80134d2:	88fb      	ldrh	r3, [r7, #6]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <pbuf_copy_partial+0xca>
 80134d8:	69fb      	ldr	r3, [r7, #28]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d1c4      	bne.n	8013468 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80134de:	8afb      	ldrh	r3, [r7, #22]
}
 80134e0:	4618      	mov	r0, r3
 80134e2:	3720      	adds	r7, #32
 80134e4:	46bd      	mov	sp, r7
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	080211b4 	.word	0x080211b4
 80134ec:	080214fc 	.word	0x080214fc
 80134f0:	08021214 	.word	0x08021214
 80134f4:	0802151c 	.word	0x0802151c

080134f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	4603      	mov	r3, r0
 8013500:	603a      	str	r2, [r7, #0]
 8013502:	71fb      	strb	r3, [r7, #7]
 8013504:	460b      	mov	r3, r1
 8013506:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	8919      	ldrh	r1, [r3, #8]
 801350c:	88ba      	ldrh	r2, [r7, #4]
 801350e:	79fb      	ldrb	r3, [r7, #7]
 8013510:	4618      	mov	r0, r3
 8013512:	f7ff fa95 	bl	8012a40 <pbuf_alloc>
 8013516:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d101      	bne.n	8013522 <pbuf_clone+0x2a>
    return NULL;
 801351e:	2300      	movs	r3, #0
 8013520:	e011      	b.n	8013546 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013522:	6839      	ldr	r1, [r7, #0]
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f7ff fea3 	bl	8013270 <pbuf_copy>
 801352a:	4603      	mov	r3, r0
 801352c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801352e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d006      	beq.n	8013544 <pbuf_clone+0x4c>
 8013536:	4b06      	ldr	r3, [pc, #24]	@ (8013550 <pbuf_clone+0x58>)
 8013538:	f240 5224 	movw	r2, #1316	@ 0x524
 801353c:	4905      	ldr	r1, [pc, #20]	@ (8013554 <pbuf_clone+0x5c>)
 801353e:	4806      	ldr	r0, [pc, #24]	@ (8013558 <pbuf_clone+0x60>)
 8013540:	f00a f922 	bl	801d788 <iprintf>
  return q;
 8013544:	68fb      	ldr	r3, [r7, #12]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	080211b4 	.word	0x080211b4
 8013554:	08021628 	.word	0x08021628
 8013558:	08021214 	.word	0x08021214

0801355c <tcp_init>:
 801355c:	b580      	push	{r7, lr}
 801355e:	af00      	add	r7, sp, #0
 8013560:	f009 fbba 	bl	801ccd8 <rand>
 8013564:	4603      	mov	r3, r0
 8013566:	b29b      	uxth	r3, r3
 8013568:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801356c:	b29b      	uxth	r3, r3
 801356e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013572:	b29a      	uxth	r2, r3
 8013574:	4b01      	ldr	r3, [pc, #4]	@ (801357c <tcp_init+0x20>)
 8013576:	801a      	strh	r2, [r3, #0]
 8013578:	bf00      	nop
 801357a:	bd80      	pop	{r7, pc}
 801357c:	2000007c 	.word	0x2000007c

08013580 <tcp_free>:
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	7d1b      	ldrb	r3, [r3, #20]
 801358c:	2b01      	cmp	r3, #1
 801358e:	d105      	bne.n	801359c <tcp_free+0x1c>
 8013590:	4b06      	ldr	r3, [pc, #24]	@ (80135ac <tcp_free+0x2c>)
 8013592:	22d4      	movs	r2, #212	@ 0xd4
 8013594:	4906      	ldr	r1, [pc, #24]	@ (80135b0 <tcp_free+0x30>)
 8013596:	4807      	ldr	r0, [pc, #28]	@ (80135b4 <tcp_free+0x34>)
 8013598:	f00a f8f6 	bl	801d788 <iprintf>
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	2001      	movs	r0, #1
 80135a0:	f7fe fe8e 	bl	80122c0 <memp_free>
 80135a4:	bf00      	nop
 80135a6:	3708      	adds	r7, #8
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	080216b4 	.word	0x080216b4
 80135b0:	080216e4 	.word	0x080216e4
 80135b4:	080216f8 	.word	0x080216f8

080135b8 <tcp_free_listen>:
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	7d1b      	ldrb	r3, [r3, #20]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d105      	bne.n	80135d4 <tcp_free_listen+0x1c>
 80135c8:	4b06      	ldr	r3, [pc, #24]	@ (80135e4 <tcp_free_listen+0x2c>)
 80135ca:	22df      	movs	r2, #223	@ 0xdf
 80135cc:	4906      	ldr	r1, [pc, #24]	@ (80135e8 <tcp_free_listen+0x30>)
 80135ce:	4807      	ldr	r0, [pc, #28]	@ (80135ec <tcp_free_listen+0x34>)
 80135d0:	f00a f8da 	bl	801d788 <iprintf>
 80135d4:	6879      	ldr	r1, [r7, #4]
 80135d6:	2002      	movs	r0, #2
 80135d8:	f7fe fe72 	bl	80122c0 <memp_free>
 80135dc:	bf00      	nop
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	080216b4 	.word	0x080216b4
 80135e8:	08021720 	.word	0x08021720
 80135ec:	080216f8 	.word	0x080216f8

080135f0 <tcp_tmr>:
 80135f0:	b580      	push	{r7, lr}
 80135f2:	af00      	add	r7, sp, #0
 80135f4:	f001 f8ba 	bl	801476c <tcp_fasttmr>
 80135f8:	4b07      	ldr	r3, [pc, #28]	@ (8013618 <tcp_tmr+0x28>)
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	3301      	adds	r3, #1
 80135fe:	b2da      	uxtb	r2, r3
 8013600:	4b05      	ldr	r3, [pc, #20]	@ (8013618 <tcp_tmr+0x28>)
 8013602:	701a      	strb	r2, [r3, #0]
 8013604:	4b04      	ldr	r3, [pc, #16]	@ (8013618 <tcp_tmr+0x28>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	f003 0301 	and.w	r3, r3, #1
 801360c:	2b00      	cmp	r3, #0
 801360e:	d001      	beq.n	8013614 <tcp_tmr+0x24>
 8013610:	f000 fd6a 	bl	80140e8 <tcp_slowtmr>
 8013614:	bf00      	nop
 8013616:	bd80      	pop	{r7, pc}
 8013618:	2000f3f1 	.word	0x2000f3f1

0801361c <tcp_remove_listener>:
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d105      	bne.n	8013638 <tcp_remove_listener+0x1c>
 801362c:	4b0d      	ldr	r3, [pc, #52]	@ (8013664 <tcp_remove_listener+0x48>)
 801362e:	22ff      	movs	r2, #255	@ 0xff
 8013630:	490d      	ldr	r1, [pc, #52]	@ (8013668 <tcp_remove_listener+0x4c>)
 8013632:	480e      	ldr	r0, [pc, #56]	@ (801366c <tcp_remove_listener+0x50>)
 8013634:	f00a f8a8 	bl	801d788 <iprintf>
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	60fb      	str	r3, [r7, #12]
 801363c:	e00a      	b.n	8013654 <tcp_remove_listener+0x38>
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013642:	683a      	ldr	r2, [r7, #0]
 8013644:	429a      	cmp	r2, r3
 8013646:	d102      	bne.n	801364e <tcp_remove_listener+0x32>
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	67da      	str	r2, [r3, #124]	@ 0x7c
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	60fb      	str	r3, [r7, #12]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d1f1      	bne.n	801363e <tcp_remove_listener+0x22>
 801365a:	bf00      	nop
 801365c:	bf00      	nop
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	080216b4 	.word	0x080216b4
 8013668:	0802173c 	.word	0x0802173c
 801366c:	080216f8 	.word	0x080216f8

08013670 <tcp_listen_closed>:
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d106      	bne.n	801368c <tcp_listen_closed+0x1c>
 801367e:	4b14      	ldr	r3, [pc, #80]	@ (80136d0 <tcp_listen_closed+0x60>)
 8013680:	f240 1211 	movw	r2, #273	@ 0x111
 8013684:	4913      	ldr	r1, [pc, #76]	@ (80136d4 <tcp_listen_closed+0x64>)
 8013686:	4814      	ldr	r0, [pc, #80]	@ (80136d8 <tcp_listen_closed+0x68>)
 8013688:	f00a f87e 	bl	801d788 <iprintf>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	7d1b      	ldrb	r3, [r3, #20]
 8013690:	2b01      	cmp	r3, #1
 8013692:	d006      	beq.n	80136a2 <tcp_listen_closed+0x32>
 8013694:	4b0e      	ldr	r3, [pc, #56]	@ (80136d0 <tcp_listen_closed+0x60>)
 8013696:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801369a:	4910      	ldr	r1, [pc, #64]	@ (80136dc <tcp_listen_closed+0x6c>)
 801369c:	480e      	ldr	r0, [pc, #56]	@ (80136d8 <tcp_listen_closed+0x68>)
 801369e:	f00a f873 	bl	801d788 <iprintf>
 80136a2:	2301      	movs	r3, #1
 80136a4:	60fb      	str	r3, [r7, #12]
 80136a6:	e00b      	b.n	80136c0 <tcp_listen_closed+0x50>
 80136a8:	4a0d      	ldr	r2, [pc, #52]	@ (80136e0 <tcp_listen_closed+0x70>)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	6879      	ldr	r1, [r7, #4]
 80136b4:	4618      	mov	r0, r3
 80136b6:	f7ff ffb1 	bl	801361c <tcp_remove_listener>
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	3301      	adds	r3, #1
 80136be:	60fb      	str	r3, [r7, #12]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2b03      	cmp	r3, #3
 80136c4:	d9f0      	bls.n	80136a8 <tcp_listen_closed+0x38>
 80136c6:	bf00      	nop
 80136c8:	bf00      	nop
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}
 80136d0:	080216b4 	.word	0x080216b4
 80136d4:	08021764 	.word	0x08021764
 80136d8:	080216f8 	.word	0x080216f8
 80136dc:	08021770 	.word	0x08021770
 80136e0:	08024398 	.word	0x08024398

080136e4 <tcp_close_shutdown>:
 80136e4:	b5b0      	push	{r4, r5, r7, lr}
 80136e6:	b088      	sub	sp, #32
 80136e8:	af04      	add	r7, sp, #16
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	460b      	mov	r3, r1
 80136ee:	70fb      	strb	r3, [r7, #3]
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <tcp_close_shutdown+0x20>
 80136f6:	4b63      	ldr	r3, [pc, #396]	@ (8013884 <tcp_close_shutdown+0x1a0>)
 80136f8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80136fc:	4962      	ldr	r1, [pc, #392]	@ (8013888 <tcp_close_shutdown+0x1a4>)
 80136fe:	4863      	ldr	r0, [pc, #396]	@ (801388c <tcp_close_shutdown+0x1a8>)
 8013700:	f00a f842 	bl	801d788 <iprintf>
 8013704:	78fb      	ldrb	r3, [r7, #3]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d066      	beq.n	80137d8 <tcp_close_shutdown+0xf4>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	7d1b      	ldrb	r3, [r3, #20]
 801370e:	2b04      	cmp	r3, #4
 8013710:	d003      	beq.n	801371a <tcp_close_shutdown+0x36>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	7d1b      	ldrb	r3, [r3, #20]
 8013716:	2b07      	cmp	r3, #7
 8013718:	d15e      	bne.n	80137d8 <tcp_close_shutdown+0xf4>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801371e:	2b00      	cmp	r3, #0
 8013720:	d104      	bne.n	801372c <tcp_close_shutdown+0x48>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013726:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801372a:	d055      	beq.n	80137d8 <tcp_close_shutdown+0xf4>
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	8b5b      	ldrh	r3, [r3, #26]
 8013730:	f003 0310 	and.w	r3, r3, #16
 8013734:	2b00      	cmp	r3, #0
 8013736:	d106      	bne.n	8013746 <tcp_close_shutdown+0x62>
 8013738:	4b52      	ldr	r3, [pc, #328]	@ (8013884 <tcp_close_shutdown+0x1a0>)
 801373a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801373e:	4954      	ldr	r1, [pc, #336]	@ (8013890 <tcp_close_shutdown+0x1ac>)
 8013740:	4852      	ldr	r0, [pc, #328]	@ (801388c <tcp_close_shutdown+0x1a8>)
 8013742:	f00a f821 	bl	801d788 <iprintf>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801374e:	687d      	ldr	r5, [r7, #4]
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	3304      	adds	r3, #4
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	8ad2      	ldrh	r2, [r2, #22]
 8013758:	6879      	ldr	r1, [r7, #4]
 801375a:	8b09      	ldrh	r1, [r1, #24]
 801375c:	9102      	str	r1, [sp, #8]
 801375e:	9201      	str	r2, [sp, #4]
 8013760:	9300      	str	r3, [sp, #0]
 8013762:	462b      	mov	r3, r5
 8013764:	4622      	mov	r2, r4
 8013766:	4601      	mov	r1, r0
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f005 fde7 	bl	801933c <tcp_rst>
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f001 fbca 	bl	8014f08 <tcp_pcb_purge>
 8013774:	4b47      	ldr	r3, [pc, #284]	@ (8013894 <tcp_close_shutdown+0x1b0>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	687a      	ldr	r2, [r7, #4]
 801377a:	429a      	cmp	r2, r3
 801377c:	d105      	bne.n	801378a <tcp_close_shutdown+0xa6>
 801377e:	4b45      	ldr	r3, [pc, #276]	@ (8013894 <tcp_close_shutdown+0x1b0>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	4a43      	ldr	r2, [pc, #268]	@ (8013894 <tcp_close_shutdown+0x1b0>)
 8013786:	6013      	str	r3, [r2, #0]
 8013788:	e013      	b.n	80137b2 <tcp_close_shutdown+0xce>
 801378a:	4b42      	ldr	r3, [pc, #264]	@ (8013894 <tcp_close_shutdown+0x1b0>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	60fb      	str	r3, [r7, #12]
 8013790:	e00c      	b.n	80137ac <tcp_close_shutdown+0xc8>
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	429a      	cmp	r2, r3
 801379a:	d104      	bne.n	80137a6 <tcp_close_shutdown+0xc2>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	68da      	ldr	r2, [r3, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	60da      	str	r2, [r3, #12]
 80137a4:	e005      	b.n	80137b2 <tcp_close_shutdown+0xce>
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	60fb      	str	r3, [r7, #12]
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d1ef      	bne.n	8013792 <tcp_close_shutdown+0xae>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2200      	movs	r2, #0
 80137b6:	60da      	str	r2, [r3, #12]
 80137b8:	4b37      	ldr	r3, [pc, #220]	@ (8013898 <tcp_close_shutdown+0x1b4>)
 80137ba:	2201      	movs	r2, #1
 80137bc:	701a      	strb	r2, [r3, #0]
 80137be:	4b37      	ldr	r3, [pc, #220]	@ (801389c <tcp_close_shutdown+0x1b8>)
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	687a      	ldr	r2, [r7, #4]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d102      	bne.n	80137ce <tcp_close_shutdown+0xea>
 80137c8:	f004 f85e 	bl	8017888 <tcp_trigger_input_pcb_close>
 80137cc:	e002      	b.n	80137d4 <tcp_close_shutdown+0xf0>
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7ff fed6 	bl	8013580 <tcp_free>
 80137d4:	2300      	movs	r3, #0
 80137d6:	e050      	b.n	801387a <tcp_close_shutdown+0x196>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	7d1b      	ldrb	r3, [r3, #20]
 80137dc:	2b02      	cmp	r3, #2
 80137de:	d03b      	beq.n	8013858 <tcp_close_shutdown+0x174>
 80137e0:	2b02      	cmp	r3, #2
 80137e2:	dc44      	bgt.n	801386e <tcp_close_shutdown+0x18a>
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d002      	beq.n	80137ee <tcp_close_shutdown+0x10a>
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d02a      	beq.n	8013842 <tcp_close_shutdown+0x15e>
 80137ec:	e03f      	b.n	801386e <tcp_close_shutdown+0x18a>
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	8adb      	ldrh	r3, [r3, #22]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d021      	beq.n	801383a <tcp_close_shutdown+0x156>
 80137f6:	4b2a      	ldr	r3, [pc, #168]	@ (80138a0 <tcp_close_shutdown+0x1bc>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d105      	bne.n	801380c <tcp_close_shutdown+0x128>
 8013800:	4b27      	ldr	r3, [pc, #156]	@ (80138a0 <tcp_close_shutdown+0x1bc>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	68db      	ldr	r3, [r3, #12]
 8013806:	4a26      	ldr	r2, [pc, #152]	@ (80138a0 <tcp_close_shutdown+0x1bc>)
 8013808:	6013      	str	r3, [r2, #0]
 801380a:	e013      	b.n	8013834 <tcp_close_shutdown+0x150>
 801380c:	4b24      	ldr	r3, [pc, #144]	@ (80138a0 <tcp_close_shutdown+0x1bc>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	60bb      	str	r3, [r7, #8]
 8013812:	e00c      	b.n	801382e <tcp_close_shutdown+0x14a>
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	68db      	ldr	r3, [r3, #12]
 8013818:	687a      	ldr	r2, [r7, #4]
 801381a:	429a      	cmp	r2, r3
 801381c:	d104      	bne.n	8013828 <tcp_close_shutdown+0x144>
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	68da      	ldr	r2, [r3, #12]
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	60da      	str	r2, [r3, #12]
 8013826:	e005      	b.n	8013834 <tcp_close_shutdown+0x150>
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	60bb      	str	r3, [r7, #8]
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1ef      	bne.n	8013814 <tcp_close_shutdown+0x130>
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	60da      	str	r2, [r3, #12]
 801383a:	6878      	ldr	r0, [r7, #4]
 801383c:	f7ff fea0 	bl	8013580 <tcp_free>
 8013840:	e01a      	b.n	8013878 <tcp_close_shutdown+0x194>
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff ff14 	bl	8013670 <tcp_listen_closed>
 8013848:	6879      	ldr	r1, [r7, #4]
 801384a:	4816      	ldr	r0, [pc, #88]	@ (80138a4 <tcp_close_shutdown+0x1c0>)
 801384c:	f001 fbac 	bl	8014fa8 <tcp_pcb_remove>
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff feb1 	bl	80135b8 <tcp_free_listen>
 8013856:	e00f      	b.n	8013878 <tcp_close_shutdown+0x194>
 8013858:	6879      	ldr	r1, [r7, #4]
 801385a:	480e      	ldr	r0, [pc, #56]	@ (8013894 <tcp_close_shutdown+0x1b0>)
 801385c:	f001 fba4 	bl	8014fa8 <tcp_pcb_remove>
 8013860:	4b0d      	ldr	r3, [pc, #52]	@ (8013898 <tcp_close_shutdown+0x1b4>)
 8013862:	2201      	movs	r2, #1
 8013864:	701a      	strb	r2, [r3, #0]
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff fe8a 	bl	8013580 <tcp_free>
 801386c:	e004      	b.n	8013878 <tcp_close_shutdown+0x194>
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f000 f81a 	bl	80138a8 <tcp_close_shutdown_fin>
 8013874:	4603      	mov	r3, r0
 8013876:	e000      	b.n	801387a <tcp_close_shutdown+0x196>
 8013878:	2300      	movs	r3, #0
 801387a:	4618      	mov	r0, r3
 801387c:	3710      	adds	r7, #16
 801387e:	46bd      	mov	sp, r7
 8013880:	bdb0      	pop	{r4, r5, r7, pc}
 8013882:	bf00      	nop
 8013884:	080216b4 	.word	0x080216b4
 8013888:	08021788 	.word	0x08021788
 801388c:	080216f8 	.word	0x080216f8
 8013890:	080217a8 	.word	0x080217a8
 8013894:	2000f3e8 	.word	0x2000f3e8
 8013898:	2000f3f0 	.word	0x2000f3f0
 801389c:	2000f428 	.word	0x2000f428
 80138a0:	2000f3e0 	.word	0x2000f3e0
 80138a4:	2000f3e4 	.word	0x2000f3e4

080138a8 <tcp_close_shutdown_fin>:
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b084      	sub	sp, #16
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d106      	bne.n	80138c4 <tcp_close_shutdown_fin+0x1c>
 80138b6:	4b2e      	ldr	r3, [pc, #184]	@ (8013970 <tcp_close_shutdown_fin+0xc8>)
 80138b8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80138bc:	492d      	ldr	r1, [pc, #180]	@ (8013974 <tcp_close_shutdown_fin+0xcc>)
 80138be:	482e      	ldr	r0, [pc, #184]	@ (8013978 <tcp_close_shutdown_fin+0xd0>)
 80138c0:	f009 ff62 	bl	801d788 <iprintf>
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	7d1b      	ldrb	r3, [r3, #20]
 80138c8:	2b07      	cmp	r3, #7
 80138ca:	d020      	beq.n	801390e <tcp_close_shutdown_fin+0x66>
 80138cc:	2b07      	cmp	r3, #7
 80138ce:	dc2b      	bgt.n	8013928 <tcp_close_shutdown_fin+0x80>
 80138d0:	2b03      	cmp	r3, #3
 80138d2:	d002      	beq.n	80138da <tcp_close_shutdown_fin+0x32>
 80138d4:	2b04      	cmp	r3, #4
 80138d6:	d00d      	beq.n	80138f4 <tcp_close_shutdown_fin+0x4c>
 80138d8:	e026      	b.n	8013928 <tcp_close_shutdown_fin+0x80>
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f004 fe3c 	bl	8018558 <tcp_send_fin>
 80138e0:	4603      	mov	r3, r0
 80138e2:	73fb      	strb	r3, [r7, #15]
 80138e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d11f      	bne.n	801392c <tcp_close_shutdown_fin+0x84>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2205      	movs	r2, #5
 80138f0:	751a      	strb	r2, [r3, #20]
 80138f2:	e01b      	b.n	801392c <tcp_close_shutdown_fin+0x84>
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f004 fe2f 	bl	8018558 <tcp_send_fin>
 80138fa:	4603      	mov	r3, r0
 80138fc:	73fb      	strb	r3, [r7, #15]
 80138fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d114      	bne.n	8013930 <tcp_close_shutdown_fin+0x88>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2205      	movs	r2, #5
 801390a:	751a      	strb	r2, [r3, #20]
 801390c:	e010      	b.n	8013930 <tcp_close_shutdown_fin+0x88>
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f004 fe22 	bl	8018558 <tcp_send_fin>
 8013914:	4603      	mov	r3, r0
 8013916:	73fb      	strb	r3, [r7, #15]
 8013918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d109      	bne.n	8013934 <tcp_close_shutdown_fin+0x8c>
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2209      	movs	r2, #9
 8013924:	751a      	strb	r2, [r3, #20]
 8013926:	e005      	b.n	8013934 <tcp_close_shutdown_fin+0x8c>
 8013928:	2300      	movs	r3, #0
 801392a:	e01c      	b.n	8013966 <tcp_close_shutdown_fin+0xbe>
 801392c:	bf00      	nop
 801392e:	e002      	b.n	8013936 <tcp_close_shutdown_fin+0x8e>
 8013930:	bf00      	nop
 8013932:	e000      	b.n	8013936 <tcp_close_shutdown_fin+0x8e>
 8013934:	bf00      	nop
 8013936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d103      	bne.n	8013946 <tcp_close_shutdown_fin+0x9e>
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f004 ff48 	bl	80187d4 <tcp_output>
 8013944:	e00d      	b.n	8013962 <tcp_close_shutdown_fin+0xba>
 8013946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801394e:	d108      	bne.n	8013962 <tcp_close_shutdown_fin+0xba>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	8b5b      	ldrh	r3, [r3, #26]
 8013954:	f043 0308 	orr.w	r3, r3, #8
 8013958:	b29a      	uxth	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	835a      	strh	r2, [r3, #26]
 801395e:	2300      	movs	r3, #0
 8013960:	e001      	b.n	8013966 <tcp_close_shutdown_fin+0xbe>
 8013962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	080216b4 	.word	0x080216b4
 8013974:	08021764 	.word	0x08021764
 8013978:	080216f8 	.word	0x080216f8

0801397c <tcp_close>:
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d109      	bne.n	801399e <tcp_close+0x22>
 801398a:	4b0f      	ldr	r3, [pc, #60]	@ (80139c8 <tcp_close+0x4c>)
 801398c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013990:	490e      	ldr	r1, [pc, #56]	@ (80139cc <tcp_close+0x50>)
 8013992:	480f      	ldr	r0, [pc, #60]	@ (80139d0 <tcp_close+0x54>)
 8013994:	f009 fef8 	bl	801d788 <iprintf>
 8013998:	f06f 030f 	mvn.w	r3, #15
 801399c:	e00f      	b.n	80139be <tcp_close+0x42>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	7d1b      	ldrb	r3, [r3, #20]
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d006      	beq.n	80139b4 <tcp_close+0x38>
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	8b5b      	ldrh	r3, [r3, #26]
 80139aa:	f043 0310 	orr.w	r3, r3, #16
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	835a      	strh	r2, [r3, #26]
 80139b4:	2101      	movs	r1, #1
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7ff fe94 	bl	80136e4 <tcp_close_shutdown>
 80139bc:	4603      	mov	r3, r0
 80139be:	4618      	mov	r0, r3
 80139c0:	3708      	adds	r7, #8
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bd80      	pop	{r7, pc}
 80139c6:	bf00      	nop
 80139c8:	080216b4 	.word	0x080216b4
 80139cc:	080217c4 	.word	0x080217c4
 80139d0:	080216f8 	.word	0x080216f8

080139d4 <tcp_shutdown>:
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d109      	bne.n	80139fa <tcp_shutdown+0x26>
 80139e6:	4b26      	ldr	r3, [pc, #152]	@ (8013a80 <tcp_shutdown+0xac>)
 80139e8:	f240 2207 	movw	r2, #519	@ 0x207
 80139ec:	4925      	ldr	r1, [pc, #148]	@ (8013a84 <tcp_shutdown+0xb0>)
 80139ee:	4826      	ldr	r0, [pc, #152]	@ (8013a88 <tcp_shutdown+0xb4>)
 80139f0:	f009 feca 	bl	801d788 <iprintf>
 80139f4:	f06f 030f 	mvn.w	r3, #15
 80139f8:	e03d      	b.n	8013a76 <tcp_shutdown+0xa2>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	7d1b      	ldrb	r3, [r3, #20]
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d102      	bne.n	8013a08 <tcp_shutdown+0x34>
 8013a02:	f06f 030a 	mvn.w	r3, #10
 8013a06:	e036      	b.n	8013a76 <tcp_shutdown+0xa2>
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d01b      	beq.n	8013a46 <tcp_shutdown+0x72>
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	8b5b      	ldrh	r3, [r3, #26]
 8013a12:	f043 0310 	orr.w	r3, r3, #16
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	835a      	strh	r2, [r3, #26]
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d005      	beq.n	8013a2e <tcp_shutdown+0x5a>
 8013a22:	2101      	movs	r1, #1
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7ff fe5d 	bl	80136e4 <tcp_close_shutdown>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	e023      	b.n	8013a76 <tcp_shutdown+0xa2>
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d007      	beq.n	8013a46 <tcp_shutdown+0x72>
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7ff fae4 	bl	8013008 <pbuf_free>
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	2200      	movs	r2, #0
 8013a44:	679a      	str	r2, [r3, #120]	@ 0x78
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d013      	beq.n	8013a74 <tcp_shutdown+0xa0>
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	7d1b      	ldrb	r3, [r3, #20]
 8013a50:	2b04      	cmp	r3, #4
 8013a52:	dc02      	bgt.n	8013a5a <tcp_shutdown+0x86>
 8013a54:	2b03      	cmp	r3, #3
 8013a56:	da02      	bge.n	8013a5e <tcp_shutdown+0x8a>
 8013a58:	e009      	b.n	8013a6e <tcp_shutdown+0x9a>
 8013a5a:	2b07      	cmp	r3, #7
 8013a5c:	d107      	bne.n	8013a6e <tcp_shutdown+0x9a>
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	4619      	mov	r1, r3
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7ff fe3d 	bl	80136e4 <tcp_close_shutdown>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	e003      	b.n	8013a76 <tcp_shutdown+0xa2>
 8013a6e:	f06f 030a 	mvn.w	r3, #10
 8013a72:	e000      	b.n	8013a76 <tcp_shutdown+0xa2>
 8013a74:	2300      	movs	r3, #0
 8013a76:	4618      	mov	r0, r3
 8013a78:	3710      	adds	r7, #16
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	080216b4 	.word	0x080216b4
 8013a84:	080217dc 	.word	0x080217dc
 8013a88:	080216f8 	.word	0x080216f8

08013a8c <tcp_abandon>:
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b08e      	sub	sp, #56	@ 0x38
 8013a90:	af04      	add	r7, sp, #16
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d107      	bne.n	8013aac <tcp_abandon+0x20>
 8013a9c:	4b52      	ldr	r3, [pc, #328]	@ (8013be8 <tcp_abandon+0x15c>)
 8013a9e:	f240 223d 	movw	r2, #573	@ 0x23d
 8013aa2:	4952      	ldr	r1, [pc, #328]	@ (8013bec <tcp_abandon+0x160>)
 8013aa4:	4852      	ldr	r0, [pc, #328]	@ (8013bf0 <tcp_abandon+0x164>)
 8013aa6:	f009 fe6f 	bl	801d788 <iprintf>
 8013aaa:	e099      	b.n	8013be0 <tcp_abandon+0x154>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	7d1b      	ldrb	r3, [r3, #20]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d106      	bne.n	8013ac2 <tcp_abandon+0x36>
 8013ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8013be8 <tcp_abandon+0x15c>)
 8013ab6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013aba:	494e      	ldr	r1, [pc, #312]	@ (8013bf4 <tcp_abandon+0x168>)
 8013abc:	484c      	ldr	r0, [pc, #304]	@ (8013bf0 <tcp_abandon+0x164>)
 8013abe:	f009 fe63 	bl	801d788 <iprintf>
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	7d1b      	ldrb	r3, [r3, #20]
 8013ac6:	2b0a      	cmp	r3, #10
 8013ac8:	d107      	bne.n	8013ada <tcp_abandon+0x4e>
 8013aca:	6879      	ldr	r1, [r7, #4]
 8013acc:	484a      	ldr	r0, [pc, #296]	@ (8013bf8 <tcp_abandon+0x16c>)
 8013ace:	f001 fa6b 	bl	8014fa8 <tcp_pcb_remove>
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff fd54 	bl	8013580 <tcp_free>
 8013ad8:	e082      	b.n	8013be0 <tcp_abandon+0x154>
 8013ada:	2300      	movs	r3, #0
 8013adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ade:	2300      	movs	r3, #0
 8013ae0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ae6:	61bb      	str	r3, [r7, #24]
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013af4:	613b      	str	r3, [r7, #16]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	691b      	ldr	r3, [r3, #16]
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	7d1b      	ldrb	r3, [r3, #20]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d126      	bne.n	8013b52 <tcp_abandon+0xc6>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	8adb      	ldrh	r3, [r3, #22]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d02e      	beq.n	8013b6a <tcp_abandon+0xde>
 8013b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8013bfc <tcp_abandon+0x170>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d105      	bne.n	8013b22 <tcp_abandon+0x96>
 8013b16:	4b39      	ldr	r3, [pc, #228]	@ (8013bfc <tcp_abandon+0x170>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	68db      	ldr	r3, [r3, #12]
 8013b1c:	4a37      	ldr	r2, [pc, #220]	@ (8013bfc <tcp_abandon+0x170>)
 8013b1e:	6013      	str	r3, [r2, #0]
 8013b20:	e013      	b.n	8013b4a <tcp_abandon+0xbe>
 8013b22:	4b36      	ldr	r3, [pc, #216]	@ (8013bfc <tcp_abandon+0x170>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	61fb      	str	r3, [r7, #28]
 8013b28:	e00c      	b.n	8013b44 <tcp_abandon+0xb8>
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d104      	bne.n	8013b3e <tcp_abandon+0xb2>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	68da      	ldr	r2, [r3, #12]
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	60da      	str	r2, [r3, #12]
 8013b3c:	e005      	b.n	8013b4a <tcp_abandon+0xbe>
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	61fb      	str	r3, [r7, #28]
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d1ef      	bne.n	8013b2a <tcp_abandon+0x9e>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	60da      	str	r2, [r3, #12]
 8013b50:	e00b      	b.n	8013b6a <tcp_abandon+0xde>
 8013b52:	683b      	ldr	r3, [r7, #0]
 8013b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	8adb      	ldrh	r3, [r3, #22]
 8013b5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013b5c:	6879      	ldr	r1, [r7, #4]
 8013b5e:	4828      	ldr	r0, [pc, #160]	@ (8013c00 <tcp_abandon+0x174>)
 8013b60:	f001 fa22 	bl	8014fa8 <tcp_pcb_remove>
 8013b64:	4b27      	ldr	r3, [pc, #156]	@ (8013c04 <tcp_abandon+0x178>)
 8013b66:	2201      	movs	r2, #1
 8013b68:	701a      	strb	r2, [r3, #0]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d004      	beq.n	8013b7c <tcp_abandon+0xf0>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b76:	4618      	mov	r0, r3
 8013b78:	f000 fed8 	bl	801492c <tcp_segs_free>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d004      	beq.n	8013b8e <tcp_abandon+0x102>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f000 fecf 	bl	801492c <tcp_segs_free>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d004      	beq.n	8013ba0 <tcp_abandon+0x114>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f000 fec6 	bl	801492c <tcp_segs_free>
 8013ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d00e      	beq.n	8013bc4 <tcp_abandon+0x138>
 8013ba6:	6879      	ldr	r1, [r7, #4]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	3304      	adds	r3, #4
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	8b12      	ldrh	r2, [r2, #24]
 8013bb0:	9202      	str	r2, [sp, #8]
 8013bb2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013bb4:	9201      	str	r2, [sp, #4]
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	69b9      	ldr	r1, [r7, #24]
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f005 fbbc 	bl	801933c <tcp_rst>
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	72fb      	strb	r3, [r7, #11]
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7ff fcd8 	bl	8013580 <tcp_free>
 8013bd0:	693b      	ldr	r3, [r7, #16]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d004      	beq.n	8013be0 <tcp_abandon+0x154>
 8013bd6:	693b      	ldr	r3, [r7, #16]
 8013bd8:	f06f 010c 	mvn.w	r1, #12
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	4798      	blx	r3
 8013be0:	3728      	adds	r7, #40	@ 0x28
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	080216b4 	.word	0x080216b4
 8013bec:	080217f8 	.word	0x080217f8
 8013bf0:	080216f8 	.word	0x080216f8
 8013bf4:	08021814 	.word	0x08021814
 8013bf8:	2000f3ec 	.word	0x2000f3ec
 8013bfc:	2000f3e0 	.word	0x2000f3e0
 8013c00:	2000f3e8 	.word	0x2000f3e8
 8013c04:	2000f3f0 	.word	0x2000f3f0

08013c08 <tcp_abort>:
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	2101      	movs	r1, #1
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f7ff ff3a 	bl	8013a8c <tcp_abandon>
 8013c18:	bf00      	nop
 8013c1a:	3708      	adds	r7, #8
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bd80      	pop	{r7, pc}

08013c20 <tcp_bind>:
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b088      	sub	sp, #32
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	80fb      	strh	r3, [r7, #6]
 8013c2e:	2304      	movs	r3, #4
 8013c30:	617b      	str	r3, [r7, #20]
 8013c32:	68bb      	ldr	r3, [r7, #8]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d101      	bne.n	8013c3c <tcp_bind+0x1c>
 8013c38:	4b3e      	ldr	r3, [pc, #248]	@ (8013d34 <tcp_bind+0x114>)
 8013c3a:	60bb      	str	r3, [r7, #8]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d109      	bne.n	8013c56 <tcp_bind+0x36>
 8013c42:	4b3d      	ldr	r3, [pc, #244]	@ (8013d38 <tcp_bind+0x118>)
 8013c44:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8013c48:	493c      	ldr	r1, [pc, #240]	@ (8013d3c <tcp_bind+0x11c>)
 8013c4a:	483d      	ldr	r0, [pc, #244]	@ (8013d40 <tcp_bind+0x120>)
 8013c4c:	f009 fd9c 	bl	801d788 <iprintf>
 8013c50:	f06f 030f 	mvn.w	r3, #15
 8013c54:	e06a      	b.n	8013d2c <tcp_bind+0x10c>
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	7d1b      	ldrb	r3, [r3, #20]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <tcp_bind+0x52>
 8013c5e:	4b36      	ldr	r3, [pc, #216]	@ (8013d38 <tcp_bind+0x118>)
 8013c60:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013c64:	4937      	ldr	r1, [pc, #220]	@ (8013d44 <tcp_bind+0x124>)
 8013c66:	4836      	ldr	r0, [pc, #216]	@ (8013d40 <tcp_bind+0x120>)
 8013c68:	f009 fd8e 	bl	801d788 <iprintf>
 8013c6c:	f06f 0305 	mvn.w	r3, #5
 8013c70:	e05c      	b.n	8013d2c <tcp_bind+0x10c>
 8013c72:	88fb      	ldrh	r3, [r7, #6]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d109      	bne.n	8013c8c <tcp_bind+0x6c>
 8013c78:	f000 f9f0 	bl	801405c <tcp_new_port>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	80fb      	strh	r3, [r7, #6]
 8013c80:	88fb      	ldrh	r3, [r7, #6]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d135      	bne.n	8013cf2 <tcp_bind+0xd2>
 8013c86:	f06f 0301 	mvn.w	r3, #1
 8013c8a:	e04f      	b.n	8013d2c <tcp_bind+0x10c>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	61fb      	str	r3, [r7, #28]
 8013c90:	e02b      	b.n	8013cea <tcp_bind+0xca>
 8013c92:	4a2d      	ldr	r2, [pc, #180]	@ (8013d48 <tcp_bind+0x128>)
 8013c94:	69fb      	ldr	r3, [r7, #28]
 8013c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	61bb      	str	r3, [r7, #24]
 8013c9e:	e01e      	b.n	8013cde <tcp_bind+0xbe>
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	8adb      	ldrh	r3, [r3, #22]
 8013ca4:	88fa      	ldrh	r2, [r7, #6]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d116      	bne.n	8013cd8 <tcp_bind+0xb8>
 8013caa:	69bb      	ldr	r3, [r7, #24]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d010      	beq.n	8013cd2 <tcp_bind+0xb2>
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d00c      	beq.n	8013cd2 <tcp_bind+0xb2>
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d009      	beq.n	8013cd2 <tcp_bind+0xb2>
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d005      	beq.n	8013cd2 <tcp_bind+0xb2>
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d102      	bne.n	8013cd8 <tcp_bind+0xb8>
 8013cd2:	f06f 0307 	mvn.w	r3, #7
 8013cd6:	e029      	b.n	8013d2c <tcp_bind+0x10c>
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	61bb      	str	r3, [r7, #24]
 8013cde:	69bb      	ldr	r3, [r7, #24]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1dd      	bne.n	8013ca0 <tcp_bind+0x80>
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	61fb      	str	r3, [r7, #28]
 8013cea:	69fa      	ldr	r2, [r7, #28]
 8013cec:	697b      	ldr	r3, [r7, #20]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	dbcf      	blt.n	8013c92 <tcp_bind+0x72>
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00c      	beq.n	8013d12 <tcp_bind+0xf2>
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d008      	beq.n	8013d12 <tcp_bind+0xf2>
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d002      	beq.n	8013d0c <tcp_bind+0xec>
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	e000      	b.n	8013d0e <tcp_bind+0xee>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	68fa      	ldr	r2, [r7, #12]
 8013d10:	6013      	str	r3, [r2, #0]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	88fa      	ldrh	r2, [r7, #6]
 8013d16:	82da      	strh	r2, [r3, #22]
 8013d18:	4b0c      	ldr	r3, [pc, #48]	@ (8013d4c <tcp_bind+0x12c>)
 8013d1a:	681a      	ldr	r2, [r3, #0]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	60da      	str	r2, [r3, #12]
 8013d20:	4a0a      	ldr	r2, [pc, #40]	@ (8013d4c <tcp_bind+0x12c>)
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	6013      	str	r3, [r2, #0]
 8013d26:	f005 fccb 	bl	80196c0 <tcp_timer_needed>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	3720      	adds	r7, #32
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	080243c0 	.word	0x080243c0
 8013d38:	080216b4 	.word	0x080216b4
 8013d3c:	08021848 	.word	0x08021848
 8013d40:	080216f8 	.word	0x080216f8
 8013d44:	08021860 	.word	0x08021860
 8013d48:	08024398 	.word	0x08024398
 8013d4c:	2000f3e0 	.word	0x2000f3e0

08013d50 <tcp_accept_null>:
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b084      	sub	sp, #16
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	4613      	mov	r3, r2
 8013d5c:	71fb      	strb	r3, [r7, #7]
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d106      	bne.n	8013d72 <tcp_accept_null+0x22>
 8013d64:	4b07      	ldr	r3, [pc, #28]	@ (8013d84 <tcp_accept_null+0x34>)
 8013d66:	f240 320f 	movw	r2, #783	@ 0x30f
 8013d6a:	4907      	ldr	r1, [pc, #28]	@ (8013d88 <tcp_accept_null+0x38>)
 8013d6c:	4807      	ldr	r0, [pc, #28]	@ (8013d8c <tcp_accept_null+0x3c>)
 8013d6e:	f009 fd0b 	bl	801d788 <iprintf>
 8013d72:	68b8      	ldr	r0, [r7, #8]
 8013d74:	f7ff ff48 	bl	8013c08 <tcp_abort>
 8013d78:	f06f 030c 	mvn.w	r3, #12
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3710      	adds	r7, #16
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	080216b4 	.word	0x080216b4
 8013d88:	08021888 	.word	0x08021888
 8013d8c:	080216f8 	.word	0x080216f8

08013d90 <tcp_listen_with_backlog>:
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b082      	sub	sp, #8
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	460b      	mov	r3, r1
 8013d9a:	70fb      	strb	r3, [r7, #3]
 8013d9c:	78fb      	ldrb	r3, [r7, #3]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	4619      	mov	r1, r3
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 f806 	bl	8013db4 <tcp_listen_with_backlog_and_err>
 8013da8:	4603      	mov	r3, r0
 8013daa:	4618      	mov	r0, r3
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
	...

08013db4 <tcp_listen_with_backlog_and_err>:
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b088      	sub	sp, #32
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	607a      	str	r2, [r7, #4]
 8013dc0:	72fb      	strb	r3, [r7, #11]
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	61fb      	str	r3, [r7, #28]
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d109      	bne.n	8013de0 <tcp_listen_with_backlog_and_err+0x2c>
 8013dcc:	4b47      	ldr	r3, [pc, #284]	@ (8013eec <tcp_listen_with_backlog_and_err+0x138>)
 8013dce:	f240 3259 	movw	r2, #857	@ 0x359
 8013dd2:	4947      	ldr	r1, [pc, #284]	@ (8013ef0 <tcp_listen_with_backlog_and_err+0x13c>)
 8013dd4:	4847      	ldr	r0, [pc, #284]	@ (8013ef4 <tcp_listen_with_backlog_and_err+0x140>)
 8013dd6:	f009 fcd7 	bl	801d788 <iprintf>
 8013dda:	23f0      	movs	r3, #240	@ 0xf0
 8013ddc:	76fb      	strb	r3, [r7, #27]
 8013dde:	e079      	b.n	8013ed4 <tcp_listen_with_backlog_and_err+0x120>
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	7d1b      	ldrb	r3, [r3, #20]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d009      	beq.n	8013dfc <tcp_listen_with_backlog_and_err+0x48>
 8013de8:	4b40      	ldr	r3, [pc, #256]	@ (8013eec <tcp_listen_with_backlog_and_err+0x138>)
 8013dea:	f240 325a 	movw	r2, #858	@ 0x35a
 8013dee:	4942      	ldr	r1, [pc, #264]	@ (8013ef8 <tcp_listen_with_backlog_and_err+0x144>)
 8013df0:	4840      	ldr	r0, [pc, #256]	@ (8013ef4 <tcp_listen_with_backlog_and_err+0x140>)
 8013df2:	f009 fcc9 	bl	801d788 <iprintf>
 8013df6:	23f1      	movs	r3, #241	@ 0xf1
 8013df8:	76fb      	strb	r3, [r7, #27]
 8013dfa:	e06b      	b.n	8013ed4 <tcp_listen_with_backlog_and_err+0x120>
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	7d1b      	ldrb	r3, [r3, #20]
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d104      	bne.n	8013e0e <tcp_listen_with_backlog_and_err+0x5a>
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	61fb      	str	r3, [r7, #28]
 8013e08:	23f7      	movs	r3, #247	@ 0xf7
 8013e0a:	76fb      	strb	r3, [r7, #27]
 8013e0c:	e062      	b.n	8013ed4 <tcp_listen_with_backlog_and_err+0x120>
 8013e0e:	2002      	movs	r0, #2
 8013e10:	f7fe f9e0 	bl	80121d4 <memp_malloc>
 8013e14:	61f8      	str	r0, [r7, #28]
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d102      	bne.n	8013e22 <tcp_listen_with_backlog_and_err+0x6e>
 8013e1c:	23ff      	movs	r3, #255	@ 0xff
 8013e1e:	76fb      	strb	r3, [r7, #27]
 8013e20:	e058      	b.n	8013ed4 <tcp_listen_with_backlog_and_err+0x120>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	691a      	ldr	r2, [r3, #16]
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	611a      	str	r2, [r3, #16]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	8ada      	ldrh	r2, [r3, #22]
 8013e2e:	69fb      	ldr	r3, [r7, #28]
 8013e30:	82da      	strh	r2, [r3, #22]
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	2201      	movs	r2, #1
 8013e36:	751a      	strb	r2, [r3, #20]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	7d5a      	ldrb	r2, [r3, #21]
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	755a      	strb	r2, [r3, #21]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	7a5a      	ldrb	r2, [r3, #9]
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	725a      	strb	r2, [r3, #9]
 8013e48:	69fb      	ldr	r3, [r7, #28]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	721a      	strb	r2, [r3, #8]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	7ada      	ldrb	r2, [r3, #11]
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	72da      	strb	r2, [r3, #11]
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	7a9a      	ldrb	r2, [r3, #10]
 8013e5a:	69fb      	ldr	r3, [r7, #28]
 8013e5c:	729a      	strb	r2, [r3, #10]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	69fb      	ldr	r3, [r7, #28]
 8013e64:	601a      	str	r2, [r3, #0]
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	8adb      	ldrh	r3, [r3, #22]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d021      	beq.n	8013eb2 <tcp_listen_with_backlog_and_err+0xfe>
 8013e6e:	4b23      	ldr	r3, [pc, #140]	@ (8013efc <tcp_listen_with_backlog_and_err+0x148>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	68fa      	ldr	r2, [r7, #12]
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d105      	bne.n	8013e84 <tcp_listen_with_backlog_and_err+0xd0>
 8013e78:	4b20      	ldr	r3, [pc, #128]	@ (8013efc <tcp_listen_with_backlog_and_err+0x148>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8013efc <tcp_listen_with_backlog_and_err+0x148>)
 8013e80:	6013      	str	r3, [r2, #0]
 8013e82:	e013      	b.n	8013eac <tcp_listen_with_backlog_and_err+0xf8>
 8013e84:	4b1d      	ldr	r3, [pc, #116]	@ (8013efc <tcp_listen_with_backlog_and_err+0x148>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	617b      	str	r3, [r7, #20]
 8013e8a:	e00c      	b.n	8013ea6 <tcp_listen_with_backlog_and_err+0xf2>
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	68db      	ldr	r3, [r3, #12]
 8013e90:	68fa      	ldr	r2, [r7, #12]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d104      	bne.n	8013ea0 <tcp_listen_with_backlog_and_err+0xec>
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	68da      	ldr	r2, [r3, #12]
 8013e9a:	697b      	ldr	r3, [r7, #20]
 8013e9c:	60da      	str	r2, [r3, #12]
 8013e9e:	e005      	b.n	8013eac <tcp_listen_with_backlog_and_err+0xf8>
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	617b      	str	r3, [r7, #20]
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d1ef      	bne.n	8013e8c <tcp_listen_with_backlog_and_err+0xd8>
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2200      	movs	r2, #0
 8013eb0:	60da      	str	r2, [r3, #12]
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f7ff fb64 	bl	8013580 <tcp_free>
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	4a11      	ldr	r2, [pc, #68]	@ (8013f00 <tcp_listen_with_backlog_and_err+0x14c>)
 8013ebc:	619a      	str	r2, [r3, #24]
 8013ebe:	4b11      	ldr	r3, [pc, #68]	@ (8013f04 <tcp_listen_with_backlog_and_err+0x150>)
 8013ec0:	681a      	ldr	r2, [r3, #0]
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	60da      	str	r2, [r3, #12]
 8013ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8013f04 <tcp_listen_with_backlog_and_err+0x150>)
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	f005 fbf8 	bl	80196c0 <tcp_timer_needed>
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	76fb      	strb	r3, [r7, #27]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d002      	beq.n	8013ee0 <tcp_listen_with_backlog_and_err+0x12c>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	7efa      	ldrb	r2, [r7, #27]
 8013ede:	701a      	strb	r2, [r3, #0]
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3720      	adds	r7, #32
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}
 8013eea:	bf00      	nop
 8013eec:	080216b4 	.word	0x080216b4
 8013ef0:	080218a8 	.word	0x080218a8
 8013ef4:	080216f8 	.word	0x080216f8
 8013ef8:	080218d8 	.word	0x080218d8
 8013efc:	2000f3e0 	.word	0x2000f3e0
 8013f00:	08013d51 	.word	0x08013d51
 8013f04:	2000f3e4 	.word	0x2000f3e4

08013f08 <tcp_update_rcv_ann_wnd>:
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b084      	sub	sp, #16
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	6078      	str	r0, [r7, #4]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d106      	bne.n	8013f24 <tcp_update_rcv_ann_wnd+0x1c>
 8013f16:	4b25      	ldr	r3, [pc, #148]	@ (8013fac <tcp_update_rcv_ann_wnd+0xa4>)
 8013f18:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013f1c:	4924      	ldr	r1, [pc, #144]	@ (8013fb0 <tcp_update_rcv_ann_wnd+0xa8>)
 8013f1e:	4825      	ldr	r0, [pc, #148]	@ (8013fb4 <tcp_update_rcv_ann_wnd+0xac>)
 8013f20:	f009 fc32 	bl	801d788 <iprintf>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013f2c:	4413      	add	r3, r2
 8013f2e:	60fb      	str	r3, [r7, #12]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013f38:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013f3c:	bf28      	it	cs
 8013f3e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013f42:	b292      	uxth	r2, r2
 8013f44:	4413      	add	r3, r2
 8013f46:	68fa      	ldr	r2, [r7, #12]
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	db08      	blt.n	8013f60 <tcp_update_rcv_ann_wnd+0x58>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f5a:	68fa      	ldr	r2, [r7, #12]
 8013f5c:	1ad3      	subs	r3, r2, r3
 8013f5e:	e020      	b.n	8013fa2 <tcp_update_rcv_ann_wnd+0x9a>
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f68:	1ad3      	subs	r3, r2, r3
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	dd03      	ble.n	8013f76 <tcp_update_rcv_ann_wnd+0x6e>
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013f74:	e014      	b.n	8013fa0 <tcp_update_rcv_ann_wnd+0x98>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	60bb      	str	r3, [r7, #8]
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f88:	d306      	bcc.n	8013f98 <tcp_update_rcv_ann_wnd+0x90>
 8013f8a:	4b08      	ldr	r3, [pc, #32]	@ (8013fac <tcp_update_rcv_ann_wnd+0xa4>)
 8013f8c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013f90:	4909      	ldr	r1, [pc, #36]	@ (8013fb8 <tcp_update_rcv_ann_wnd+0xb0>)
 8013f92:	4808      	ldr	r0, [pc, #32]	@ (8013fb4 <tcp_update_rcv_ann_wnd+0xac>)
 8013f94:	f009 fbf8 	bl	801d788 <iprintf>
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	b29a      	uxth	r2, r3
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3710      	adds	r7, #16
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}
 8013faa:	bf00      	nop
 8013fac:	080216b4 	.word	0x080216b4
 8013fb0:	08021910 	.word	0x08021910
 8013fb4:	080216f8 	.word	0x080216f8
 8013fb8:	08021934 	.word	0x08021934

08013fbc <tcp_recved>:
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	807b      	strh	r3, [r7, #2]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d107      	bne.n	8013fde <tcp_recved+0x22>
 8013fce:	4b1f      	ldr	r3, [pc, #124]	@ (801404c <tcp_recved+0x90>)
 8013fd0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013fd4:	491e      	ldr	r1, [pc, #120]	@ (8014050 <tcp_recved+0x94>)
 8013fd6:	481f      	ldr	r0, [pc, #124]	@ (8014054 <tcp_recved+0x98>)
 8013fd8:	f009 fbd6 	bl	801d788 <iprintf>
 8013fdc:	e032      	b.n	8014044 <tcp_recved+0x88>
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	7d1b      	ldrb	r3, [r3, #20]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d106      	bne.n	8013ff4 <tcp_recved+0x38>
 8013fe6:	4b19      	ldr	r3, [pc, #100]	@ (801404c <tcp_recved+0x90>)
 8013fe8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013fec:	491a      	ldr	r1, [pc, #104]	@ (8014058 <tcp_recved+0x9c>)
 8013fee:	4819      	ldr	r0, [pc, #100]	@ (8014054 <tcp_recved+0x98>)
 8013ff0:	f009 fbca 	bl	801d788 <iprintf>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013ff8:	887b      	ldrh	r3, [r7, #2]
 8013ffa:	4413      	add	r3, r2
 8013ffc:	81fb      	strh	r3, [r7, #14]
 8013ffe:	89fb      	ldrh	r3, [r7, #14]
 8014000:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014004:	d804      	bhi.n	8014010 <tcp_recved+0x54>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801400a:	89fa      	ldrh	r2, [r7, #14]
 801400c:	429a      	cmp	r2, r3
 801400e:	d204      	bcs.n	801401a <tcp_recved+0x5e>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014016:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014018:	e002      	b.n	8014020 <tcp_recved+0x64>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	89fa      	ldrh	r2, [r7, #14]
 801401e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff ff71 	bl	8013f08 <tcp_update_rcv_ann_wnd>
 8014026:	60b8      	str	r0, [r7, #8]
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801402e:	d309      	bcc.n	8014044 <tcp_recved+0x88>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	8b5b      	ldrh	r3, [r3, #26]
 8014034:	f043 0302 	orr.w	r3, r3, #2
 8014038:	b29a      	uxth	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	835a      	strh	r2, [r3, #26]
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f004 fbc8 	bl	80187d4 <tcp_output>
 8014044:	3710      	adds	r7, #16
 8014046:	46bd      	mov	sp, r7
 8014048:	bd80      	pop	{r7, pc}
 801404a:	bf00      	nop
 801404c:	080216b4 	.word	0x080216b4
 8014050:	08021950 	.word	0x08021950
 8014054:	080216f8 	.word	0x080216f8
 8014058:	08021968 	.word	0x08021968

0801405c <tcp_new_port>:
 801405c:	b480      	push	{r7}
 801405e:	b083      	sub	sp, #12
 8014060:	af00      	add	r7, sp, #0
 8014062:	2300      	movs	r3, #0
 8014064:	80bb      	strh	r3, [r7, #4]
 8014066:	4b1e      	ldr	r3, [pc, #120]	@ (80140e0 <tcp_new_port+0x84>)
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	3301      	adds	r3, #1
 801406c:	b29a      	uxth	r2, r3
 801406e:	4b1c      	ldr	r3, [pc, #112]	@ (80140e0 <tcp_new_port+0x84>)
 8014070:	801a      	strh	r2, [r3, #0]
 8014072:	4b1b      	ldr	r3, [pc, #108]	@ (80140e0 <tcp_new_port+0x84>)
 8014074:	881b      	ldrh	r3, [r3, #0]
 8014076:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801407a:	4293      	cmp	r3, r2
 801407c:	d103      	bne.n	8014086 <tcp_new_port+0x2a>
 801407e:	4b18      	ldr	r3, [pc, #96]	@ (80140e0 <tcp_new_port+0x84>)
 8014080:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014084:	801a      	strh	r2, [r3, #0]
 8014086:	2300      	movs	r3, #0
 8014088:	71fb      	strb	r3, [r7, #7]
 801408a:	e01e      	b.n	80140ca <tcp_new_port+0x6e>
 801408c:	79fb      	ldrb	r3, [r7, #7]
 801408e:	4a15      	ldr	r2, [pc, #84]	@ (80140e4 <tcp_new_port+0x88>)
 8014090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	603b      	str	r3, [r7, #0]
 8014098:	e011      	b.n	80140be <tcp_new_port+0x62>
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	8ada      	ldrh	r2, [r3, #22]
 801409e:	4b10      	ldr	r3, [pc, #64]	@ (80140e0 <tcp_new_port+0x84>)
 80140a0:	881b      	ldrh	r3, [r3, #0]
 80140a2:	429a      	cmp	r2, r3
 80140a4:	d108      	bne.n	80140b8 <tcp_new_port+0x5c>
 80140a6:	88bb      	ldrh	r3, [r7, #4]
 80140a8:	3301      	adds	r3, #1
 80140aa:	80bb      	strh	r3, [r7, #4]
 80140ac:	88bb      	ldrh	r3, [r7, #4]
 80140ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80140b2:	d3d8      	bcc.n	8014066 <tcp_new_port+0xa>
 80140b4:	2300      	movs	r3, #0
 80140b6:	e00d      	b.n	80140d4 <tcp_new_port+0x78>
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	603b      	str	r3, [r7, #0]
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d1ea      	bne.n	801409a <tcp_new_port+0x3e>
 80140c4:	79fb      	ldrb	r3, [r7, #7]
 80140c6:	3301      	adds	r3, #1
 80140c8:	71fb      	strb	r3, [r7, #7]
 80140ca:	79fb      	ldrb	r3, [r7, #7]
 80140cc:	2b03      	cmp	r3, #3
 80140ce:	d9dd      	bls.n	801408c <tcp_new_port+0x30>
 80140d0:	4b03      	ldr	r3, [pc, #12]	@ (80140e0 <tcp_new_port+0x84>)
 80140d2:	881b      	ldrh	r3, [r3, #0]
 80140d4:	4618      	mov	r0, r3
 80140d6:	370c      	adds	r7, #12
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr
 80140e0:	2000007c 	.word	0x2000007c
 80140e4:	08024398 	.word	0x08024398

080140e8 <tcp_slowtmr>:
 80140e8:	b5b0      	push	{r4, r5, r7, lr}
 80140ea:	b090      	sub	sp, #64	@ 0x40
 80140ec:	af04      	add	r7, sp, #16
 80140ee:	2300      	movs	r3, #0
 80140f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80140f4:	4b95      	ldr	r3, [pc, #596]	@ (801434c <tcp_slowtmr+0x264>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	3301      	adds	r3, #1
 80140fa:	4a94      	ldr	r2, [pc, #592]	@ (801434c <tcp_slowtmr+0x264>)
 80140fc:	6013      	str	r3, [r2, #0]
 80140fe:	4b94      	ldr	r3, [pc, #592]	@ (8014350 <tcp_slowtmr+0x268>)
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	3301      	adds	r3, #1
 8014104:	b2da      	uxtb	r2, r3
 8014106:	4b92      	ldr	r3, [pc, #584]	@ (8014350 <tcp_slowtmr+0x268>)
 8014108:	701a      	strb	r2, [r3, #0]
 801410a:	e000      	b.n	801410e <tcp_slowtmr+0x26>
 801410c:	bf00      	nop
 801410e:	2300      	movs	r3, #0
 8014110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014112:	4b90      	ldr	r3, [pc, #576]	@ (8014354 <tcp_slowtmr+0x26c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014118:	e29d      	b.n	8014656 <tcp_slowtmr+0x56e>
 801411a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801411c:	7d1b      	ldrb	r3, [r3, #20]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d106      	bne.n	8014130 <tcp_slowtmr+0x48>
 8014122:	4b8d      	ldr	r3, [pc, #564]	@ (8014358 <tcp_slowtmr+0x270>)
 8014124:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014128:	498c      	ldr	r1, [pc, #560]	@ (801435c <tcp_slowtmr+0x274>)
 801412a:	488d      	ldr	r0, [pc, #564]	@ (8014360 <tcp_slowtmr+0x278>)
 801412c:	f009 fb2c 	bl	801d788 <iprintf>
 8014130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014132:	7d1b      	ldrb	r3, [r3, #20]
 8014134:	2b01      	cmp	r3, #1
 8014136:	d106      	bne.n	8014146 <tcp_slowtmr+0x5e>
 8014138:	4b87      	ldr	r3, [pc, #540]	@ (8014358 <tcp_slowtmr+0x270>)
 801413a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801413e:	4989      	ldr	r1, [pc, #548]	@ (8014364 <tcp_slowtmr+0x27c>)
 8014140:	4887      	ldr	r0, [pc, #540]	@ (8014360 <tcp_slowtmr+0x278>)
 8014142:	f009 fb21 	bl	801d788 <iprintf>
 8014146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014148:	7d1b      	ldrb	r3, [r3, #20]
 801414a:	2b0a      	cmp	r3, #10
 801414c:	d106      	bne.n	801415c <tcp_slowtmr+0x74>
 801414e:	4b82      	ldr	r3, [pc, #520]	@ (8014358 <tcp_slowtmr+0x270>)
 8014150:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014154:	4984      	ldr	r1, [pc, #528]	@ (8014368 <tcp_slowtmr+0x280>)
 8014156:	4882      	ldr	r0, [pc, #520]	@ (8014360 <tcp_slowtmr+0x278>)
 8014158:	f009 fb16 	bl	801d788 <iprintf>
 801415c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801415e:	7f9a      	ldrb	r2, [r3, #30]
 8014160:	4b7b      	ldr	r3, [pc, #492]	@ (8014350 <tcp_slowtmr+0x268>)
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	429a      	cmp	r2, r3
 8014166:	d105      	bne.n	8014174 <tcp_slowtmr+0x8c>
 8014168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014172:	e270      	b.n	8014656 <tcp_slowtmr+0x56e>
 8014174:	4b76      	ldr	r3, [pc, #472]	@ (8014350 <tcp_slowtmr+0x268>)
 8014176:	781a      	ldrb	r2, [r3, #0]
 8014178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801417a:	779a      	strb	r2, [r3, #30]
 801417c:	2300      	movs	r3, #0
 801417e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014182:	2300      	movs	r3, #0
 8014184:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418a:	7d1b      	ldrb	r3, [r3, #20]
 801418c:	2b02      	cmp	r3, #2
 801418e:	d10a      	bne.n	80141a6 <tcp_slowtmr+0xbe>
 8014190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014196:	2b05      	cmp	r3, #5
 8014198:	d905      	bls.n	80141a6 <tcp_slowtmr+0xbe>
 801419a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801419e:	3301      	adds	r3, #1
 80141a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80141a4:	e11e      	b.n	80143e4 <tcp_slowtmr+0x2fc>
 80141a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80141ac:	2b0b      	cmp	r3, #11
 80141ae:	d905      	bls.n	80141bc <tcp_slowtmr+0xd4>
 80141b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141b4:	3301      	adds	r3, #1
 80141b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80141ba:	e113      	b.n	80143e4 <tcp_slowtmr+0x2fc>
 80141bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d075      	beq.n	80142b2 <tcp_slowtmr+0x1ca>
 80141c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d006      	beq.n	80141dc <tcp_slowtmr+0xf4>
 80141ce:	4b62      	ldr	r3, [pc, #392]	@ (8014358 <tcp_slowtmr+0x270>)
 80141d0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80141d4:	4965      	ldr	r1, [pc, #404]	@ (801436c <tcp_slowtmr+0x284>)
 80141d6:	4862      	ldr	r0, [pc, #392]	@ (8014360 <tcp_slowtmr+0x278>)
 80141d8:	f009 fad6 	bl	801d788 <iprintf>
 80141dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d106      	bne.n	80141f2 <tcp_slowtmr+0x10a>
 80141e4:	4b5c      	ldr	r3, [pc, #368]	@ (8014358 <tcp_slowtmr+0x270>)
 80141e6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80141ea:	4961      	ldr	r1, [pc, #388]	@ (8014370 <tcp_slowtmr+0x288>)
 80141ec:	485c      	ldr	r0, [pc, #368]	@ (8014360 <tcp_slowtmr+0x278>)
 80141ee:	f009 facb 	bl	801d788 <iprintf>
 80141f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141f4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80141f8:	2b0b      	cmp	r3, #11
 80141fa:	d905      	bls.n	8014208 <tcp_slowtmr+0x120>
 80141fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014200:	3301      	adds	r3, #1
 8014202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014206:	e0ed      	b.n	80143e4 <tcp_slowtmr+0x2fc>
 8014208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801420a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801420e:	3b01      	subs	r3, #1
 8014210:	4a58      	ldr	r2, [pc, #352]	@ (8014374 <tcp_slowtmr+0x28c>)
 8014212:	5cd3      	ldrb	r3, [r2, r3]
 8014214:	747b      	strb	r3, [r7, #17]
 8014216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014218:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801421c:	7c7a      	ldrb	r2, [r7, #17]
 801421e:	429a      	cmp	r2, r3
 8014220:	d907      	bls.n	8014232 <tcp_slowtmr+0x14a>
 8014222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014224:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014228:	3301      	adds	r3, #1
 801422a:	b2da      	uxtb	r2, r3
 801422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801422e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8014232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014234:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014238:	7c7a      	ldrb	r2, [r7, #17]
 801423a:	429a      	cmp	r2, r3
 801423c:	f200 80d2 	bhi.w	80143e4 <tcp_slowtmr+0x2fc>
 8014240:	2301      	movs	r3, #1
 8014242:	623b      	str	r3, [r7, #32]
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801424a:	2b00      	cmp	r3, #0
 801424c:	d108      	bne.n	8014260 <tcp_slowtmr+0x178>
 801424e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014250:	f005 f968 	bl	8019524 <tcp_zero_window_probe>
 8014254:	4603      	mov	r3, r0
 8014256:	2b00      	cmp	r3, #0
 8014258:	d014      	beq.n	8014284 <tcp_slowtmr+0x19c>
 801425a:	2300      	movs	r3, #0
 801425c:	623b      	str	r3, [r7, #32]
 801425e:	e011      	b.n	8014284 <tcp_slowtmr+0x19c>
 8014260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014266:	4619      	mov	r1, r3
 8014268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801426a:	f004 f82d 	bl	80182c8 <tcp_split_unsent_seg>
 801426e:	4603      	mov	r3, r0
 8014270:	2b00      	cmp	r3, #0
 8014272:	d107      	bne.n	8014284 <tcp_slowtmr+0x19c>
 8014274:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014276:	f004 faad 	bl	80187d4 <tcp_output>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d101      	bne.n	8014284 <tcp_slowtmr+0x19c>
 8014280:	2300      	movs	r3, #0
 8014282:	623b      	str	r3, [r7, #32]
 8014284:	6a3b      	ldr	r3, [r7, #32]
 8014286:	2b00      	cmp	r3, #0
 8014288:	f000 80ac 	beq.w	80143e4 <tcp_slowtmr+0x2fc>
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	2200      	movs	r2, #0
 8014290:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 8014294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014296:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801429a:	2b06      	cmp	r3, #6
 801429c:	f200 80a2 	bhi.w	80143e4 <tcp_slowtmr+0x2fc>
 80142a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80142a6:	3301      	adds	r3, #1
 80142a8:	b2da      	uxtb	r2, r3
 80142aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80142b0:	e098      	b.n	80143e4 <tcp_slowtmr+0x2fc>
 80142b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	db0f      	blt.n	80142dc <tcp_slowtmr+0x1f4>
 80142bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80142c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d008      	beq.n	80142dc <tcp_slowtmr+0x1f4>
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	3301      	adds	r3, #1
 80142d4:	b29b      	uxth	r3, r3
 80142d6:	b21a      	sxth	r2, r3
 80142d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142da:	861a      	strh	r2, [r3, #48]	@ 0x30
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80142e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80142e8:	429a      	cmp	r2, r3
 80142ea:	db7b      	blt.n	80143e4 <tcp_slowtmr+0x2fc>
 80142ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142ee:	f004 fd65 	bl	8018dbc <tcp_rexmit_rto_prepare>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d007      	beq.n	8014308 <tcp_slowtmr+0x220>
 80142f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d171      	bne.n	80143e4 <tcp_slowtmr+0x2fc>
 8014300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014304:	2b00      	cmp	r3, #0
 8014306:	d06d      	beq.n	80143e4 <tcp_slowtmr+0x2fc>
 8014308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430a:	7d1b      	ldrb	r3, [r3, #20]
 801430c:	2b02      	cmp	r3, #2
 801430e:	d03a      	beq.n	8014386 <tcp_slowtmr+0x29e>
 8014310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014316:	2b0c      	cmp	r3, #12
 8014318:	bf28      	it	cs
 801431a:	230c      	movcs	r3, #12
 801431c:	76fb      	strb	r3, [r7, #27]
 801431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014324:	10db      	asrs	r3, r3, #3
 8014326:	b21b      	sxth	r3, r3
 8014328:	461a      	mov	r2, r3
 801432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014330:	4413      	add	r3, r2
 8014332:	7efa      	ldrb	r2, [r7, #27]
 8014334:	4910      	ldr	r1, [pc, #64]	@ (8014378 <tcp_slowtmr+0x290>)
 8014336:	5c8a      	ldrb	r2, [r1, r2]
 8014338:	4093      	lsls	r3, r2
 801433a:	617b      	str	r3, [r7, #20]
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014342:	4293      	cmp	r3, r2
 8014344:	dc1a      	bgt.n	801437c <tcp_slowtmr+0x294>
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	b21a      	sxth	r2, r3
 801434a:	e019      	b.n	8014380 <tcp_slowtmr+0x298>
 801434c:	2000f3dc 	.word	0x2000f3dc
 8014350:	2000f3f2 	.word	0x2000f3f2
 8014354:	2000f3e8 	.word	0x2000f3e8
 8014358:	080216b4 	.word	0x080216b4
 801435c:	080219f8 	.word	0x080219f8
 8014360:	080216f8 	.word	0x080216f8
 8014364:	08021a24 	.word	0x08021a24
 8014368:	08021a50 	.word	0x08021a50
 801436c:	08021a80 	.word	0x08021a80
 8014370:	08021ab4 	.word	0x08021ab4
 8014374:	08024390 	.word	0x08024390
 8014378:	08024380 	.word	0x08024380
 801437c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014382:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8014386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014388:	2200      	movs	r2, #0
 801438a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801438e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014394:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014398:	4293      	cmp	r3, r2
 801439a:	bf28      	it	cs
 801439c:	4613      	movcs	r3, r2
 801439e:	827b      	strh	r3, [r7, #18]
 80143a0:	8a7b      	ldrh	r3, [r7, #18]
 80143a2:	085b      	lsrs	r3, r3, #1
 80143a4:	b29a      	uxth	r2, r3
 80143a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 80143ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80143b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	b29b      	uxth	r3, r3
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d206      	bcs.n	80143cc <tcp_slowtmr+0x2e4>
 80143be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143c2:	005b      	lsls	r3, r3, #1
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 80143cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ce:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80143d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80143d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d8:	2200      	movs	r2, #0
 80143da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80143de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143e0:	f004 fd5c 	bl	8018e9c <tcp_rexmit_rto_commit>
 80143e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143e6:	7d1b      	ldrb	r3, [r3, #20]
 80143e8:	2b06      	cmp	r3, #6
 80143ea:	d111      	bne.n	8014410 <tcp_slowtmr+0x328>
 80143ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ee:	8b5b      	ldrh	r3, [r3, #26]
 80143f0:	f003 0310 	and.w	r3, r3, #16
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d00b      	beq.n	8014410 <tcp_slowtmr+0x328>
 80143f8:	4b9c      	ldr	r3, [pc, #624]	@ (801466c <tcp_slowtmr+0x584>)
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fe:	6a1b      	ldr	r3, [r3, #32]
 8014400:	1ad3      	subs	r3, r2, r3
 8014402:	2b28      	cmp	r3, #40	@ 0x28
 8014404:	d904      	bls.n	8014410 <tcp_slowtmr+0x328>
 8014406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801440a:	3301      	adds	r3, #1
 801440c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014412:	7a5b      	ldrb	r3, [r3, #9]
 8014414:	f003 0308 	and.w	r3, r3, #8
 8014418:	2b00      	cmp	r3, #0
 801441a:	d04a      	beq.n	80144b2 <tcp_slowtmr+0x3ca>
 801441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441e:	7d1b      	ldrb	r3, [r3, #20]
 8014420:	2b04      	cmp	r3, #4
 8014422:	d003      	beq.n	801442c <tcp_slowtmr+0x344>
 8014424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014426:	7d1b      	ldrb	r3, [r3, #20]
 8014428:	2b07      	cmp	r3, #7
 801442a:	d142      	bne.n	80144b2 <tcp_slowtmr+0x3ca>
 801442c:	4b8f      	ldr	r3, [pc, #572]	@ (801466c <tcp_slowtmr+0x584>)
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014432:	6a1b      	ldr	r3, [r3, #32]
 8014434:	1ad2      	subs	r2, r2, r3
 8014436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014438:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801443c:	4b8c      	ldr	r3, [pc, #560]	@ (8014670 <tcp_slowtmr+0x588>)
 801443e:	440b      	add	r3, r1
 8014440:	498c      	ldr	r1, [pc, #560]	@ (8014674 <tcp_slowtmr+0x58c>)
 8014442:	fba1 1303 	umull	r1, r3, r1, r3
 8014446:	095b      	lsrs	r3, r3, #5
 8014448:	429a      	cmp	r2, r3
 801444a:	d90a      	bls.n	8014462 <tcp_slowtmr+0x37a>
 801444c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014450:	3301      	adds	r3, #1
 8014452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014456:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801445a:	3301      	adds	r3, #1
 801445c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014460:	e027      	b.n	80144b2 <tcp_slowtmr+0x3ca>
 8014462:	4b82      	ldr	r3, [pc, #520]	@ (801466c <tcp_slowtmr+0x584>)
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014468:	6a1b      	ldr	r3, [r3, #32]
 801446a:	1ad2      	subs	r2, r2, r3
 801446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014474:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014478:	4618      	mov	r0, r3
 801447a:	4b7f      	ldr	r3, [pc, #508]	@ (8014678 <tcp_slowtmr+0x590>)
 801447c:	fb00 f303 	mul.w	r3, r0, r3
 8014480:	440b      	add	r3, r1
 8014482:	497c      	ldr	r1, [pc, #496]	@ (8014674 <tcp_slowtmr+0x58c>)
 8014484:	fba1 1303 	umull	r1, r3, r1, r3
 8014488:	095b      	lsrs	r3, r3, #5
 801448a:	429a      	cmp	r2, r3
 801448c:	d911      	bls.n	80144b2 <tcp_slowtmr+0x3ca>
 801448e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014490:	f005 f808 	bl	80194a4 <tcp_keepalive>
 8014494:	4603      	mov	r3, r0
 8014496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801449a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d107      	bne.n	80144b2 <tcp_slowtmr+0x3ca>
 80144a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80144a8:	3301      	adds	r3, #1
 80144aa:	b2da      	uxtb	r2, r3
 80144ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
 80144b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d011      	beq.n	80144de <tcp_slowtmr+0x3f6>
 80144ba:	4b6c      	ldr	r3, [pc, #432]	@ (801466c <tcp_slowtmr+0x584>)
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c0:	6a1b      	ldr	r3, [r3, #32]
 80144c2:	1ad2      	subs	r2, r2, r3
 80144c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80144ca:	4619      	mov	r1, r3
 80144cc:	460b      	mov	r3, r1
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	440b      	add	r3, r1
 80144d2:	005b      	lsls	r3, r3, #1
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d302      	bcc.n	80144de <tcp_slowtmr+0x3f6>
 80144d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80144da:	f000 fec9 	bl	8015270 <tcp_free_ooseq>
 80144de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e0:	7d1b      	ldrb	r3, [r3, #20]
 80144e2:	2b03      	cmp	r3, #3
 80144e4:	d10b      	bne.n	80144fe <tcp_slowtmr+0x416>
 80144e6:	4b61      	ldr	r3, [pc, #388]	@ (801466c <tcp_slowtmr+0x584>)
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ec:	6a1b      	ldr	r3, [r3, #32]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	2b28      	cmp	r3, #40	@ 0x28
 80144f2:	d904      	bls.n	80144fe <tcp_slowtmr+0x416>
 80144f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144f8:	3301      	adds	r3, #1
 80144fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80144fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014500:	7d1b      	ldrb	r3, [r3, #20]
 8014502:	2b09      	cmp	r3, #9
 8014504:	d10b      	bne.n	801451e <tcp_slowtmr+0x436>
 8014506:	4b59      	ldr	r3, [pc, #356]	@ (801466c <tcp_slowtmr+0x584>)
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450c:	6a1b      	ldr	r3, [r3, #32]
 801450e:	1ad3      	subs	r3, r2, r3
 8014510:	2bf0      	cmp	r3, #240	@ 0xf0
 8014512:	d904      	bls.n	801451e <tcp_slowtmr+0x436>
 8014514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014518:	3301      	adds	r3, #1
 801451a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801451e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014522:	2b00      	cmp	r3, #0
 8014524:	d060      	beq.n	80145e8 <tcp_slowtmr+0x500>
 8014526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801452c:	60fb      	str	r3, [r7, #12]
 801452e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014530:	f000 fcea 	bl	8014f08 <tcp_pcb_purge>
 8014534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014536:	2b00      	cmp	r3, #0
 8014538:	d010      	beq.n	801455c <tcp_slowtmr+0x474>
 801453a:	4b50      	ldr	r3, [pc, #320]	@ (801467c <tcp_slowtmr+0x594>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014540:	429a      	cmp	r2, r3
 8014542:	d106      	bne.n	8014552 <tcp_slowtmr+0x46a>
 8014544:	4b4e      	ldr	r3, [pc, #312]	@ (8014680 <tcp_slowtmr+0x598>)
 8014546:	f240 526d 	movw	r2, #1389	@ 0x56d
 801454a:	494e      	ldr	r1, [pc, #312]	@ (8014684 <tcp_slowtmr+0x59c>)
 801454c:	484e      	ldr	r0, [pc, #312]	@ (8014688 <tcp_slowtmr+0x5a0>)
 801454e:	f009 f91b 	bl	801d788 <iprintf>
 8014552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014554:	68da      	ldr	r2, [r3, #12]
 8014556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014558:	60da      	str	r2, [r3, #12]
 801455a:	e00f      	b.n	801457c <tcp_slowtmr+0x494>
 801455c:	4b47      	ldr	r3, [pc, #284]	@ (801467c <tcp_slowtmr+0x594>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014562:	429a      	cmp	r2, r3
 8014564:	d006      	beq.n	8014574 <tcp_slowtmr+0x48c>
 8014566:	4b46      	ldr	r3, [pc, #280]	@ (8014680 <tcp_slowtmr+0x598>)
 8014568:	f240 5271 	movw	r2, #1393	@ 0x571
 801456c:	4947      	ldr	r1, [pc, #284]	@ (801468c <tcp_slowtmr+0x5a4>)
 801456e:	4846      	ldr	r0, [pc, #280]	@ (8014688 <tcp_slowtmr+0x5a0>)
 8014570:	f009 f90a 	bl	801d788 <iprintf>
 8014574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014576:	68db      	ldr	r3, [r3, #12]
 8014578:	4a40      	ldr	r2, [pc, #256]	@ (801467c <tcp_slowtmr+0x594>)
 801457a:	6013      	str	r3, [r2, #0]
 801457c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014580:	2b00      	cmp	r3, #0
 8014582:	d013      	beq.n	80145ac <tcp_slowtmr+0x4c4>
 8014584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014586:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801458a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801458c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014590:	3304      	adds	r3, #4
 8014592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014594:	8ad2      	ldrh	r2, [r2, #22]
 8014596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014598:	8b09      	ldrh	r1, [r1, #24]
 801459a:	9102      	str	r1, [sp, #8]
 801459c:	9201      	str	r2, [sp, #4]
 801459e:	9300      	str	r3, [sp, #0]
 80145a0:	462b      	mov	r3, r5
 80145a2:	4622      	mov	r2, r4
 80145a4:	4601      	mov	r1, r0
 80145a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145a8:	f004 fec8 	bl	801933c <tcp_rst>
 80145ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ae:	691b      	ldr	r3, [r3, #16]
 80145b0:	60bb      	str	r3, [r7, #8]
 80145b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145b4:	7d1b      	ldrb	r3, [r3, #20]
 80145b6:	71fb      	strb	r3, [r7, #7]
 80145b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ba:	603b      	str	r3, [r7, #0]
 80145bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145be:	68db      	ldr	r3, [r3, #12]
 80145c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145c2:	6838      	ldr	r0, [r7, #0]
 80145c4:	f7fe ffdc 	bl	8013580 <tcp_free>
 80145c8:	4b31      	ldr	r3, [pc, #196]	@ (8014690 <tcp_slowtmr+0x5a8>)
 80145ca:	2200      	movs	r2, #0
 80145cc:	701a      	strb	r2, [r3, #0]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d004      	beq.n	80145de <tcp_slowtmr+0x4f6>
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f06f 010c 	mvn.w	r1, #12
 80145da:	68b8      	ldr	r0, [r7, #8]
 80145dc:	4798      	blx	r3
 80145de:	4b2c      	ldr	r3, [pc, #176]	@ (8014690 <tcp_slowtmr+0x5a8>)
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d037      	beq.n	8014656 <tcp_slowtmr+0x56e>
 80145e6:	e592      	b.n	801410e <tcp_slowtmr+0x26>
 80145e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80145ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ee:	68db      	ldr	r3, [r3, #12]
 80145f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f4:	7f1b      	ldrb	r3, [r3, #28]
 80145f6:	3301      	adds	r3, #1
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145fc:	771a      	strb	r2, [r3, #28]
 80145fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014600:	7f1a      	ldrb	r2, [r3, #28]
 8014602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014604:	7f5b      	ldrb	r3, [r3, #29]
 8014606:	429a      	cmp	r2, r3
 8014608:	d325      	bcc.n	8014656 <tcp_slowtmr+0x56e>
 801460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801460c:	2200      	movs	r2, #0
 801460e:	771a      	strb	r2, [r3, #28]
 8014610:	4b1f      	ldr	r3, [pc, #124]	@ (8014690 <tcp_slowtmr+0x5a8>)
 8014612:	2200      	movs	r2, #0
 8014614:	701a      	strb	r2, [r3, #0]
 8014616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801461c:	2b00      	cmp	r3, #0
 801461e:	d00b      	beq.n	8014638 <tcp_slowtmr+0x550>
 8014620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014628:	6912      	ldr	r2, [r2, #16]
 801462a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801462c:	4610      	mov	r0, r2
 801462e:	4798      	blx	r3
 8014630:	4603      	mov	r3, r0
 8014632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014636:	e002      	b.n	801463e <tcp_slowtmr+0x556>
 8014638:	2300      	movs	r3, #0
 801463a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801463e:	4b14      	ldr	r3, [pc, #80]	@ (8014690 <tcp_slowtmr+0x5a8>)
 8014640:	781b      	ldrb	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	f47f ad62 	bne.w	801410c <tcp_slowtmr+0x24>
 8014648:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801464c:	2b00      	cmp	r3, #0
 801464e:	d102      	bne.n	8014656 <tcp_slowtmr+0x56e>
 8014650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014652:	f004 f8bf 	bl	80187d4 <tcp_output>
 8014656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014658:	2b00      	cmp	r3, #0
 801465a:	f47f ad5e 	bne.w	801411a <tcp_slowtmr+0x32>
 801465e:	2300      	movs	r3, #0
 8014660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014662:	4b0c      	ldr	r3, [pc, #48]	@ (8014694 <tcp_slowtmr+0x5ac>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014668:	e069      	b.n	801473e <tcp_slowtmr+0x656>
 801466a:	bf00      	nop
 801466c:	2000f3dc 	.word	0x2000f3dc
 8014670:	000a4cb8 	.word	0x000a4cb8
 8014674:	10624dd3 	.word	0x10624dd3
 8014678:	000124f8 	.word	0x000124f8
 801467c:	2000f3e8 	.word	0x2000f3e8
 8014680:	080216b4 	.word	0x080216b4
 8014684:	08021aec 	.word	0x08021aec
 8014688:	080216f8 	.word	0x080216f8
 801468c:	08021b18 	.word	0x08021b18
 8014690:	2000f3f0 	.word	0x2000f3f0
 8014694:	2000f3ec 	.word	0x2000f3ec
 8014698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801469a:	7d1b      	ldrb	r3, [r3, #20]
 801469c:	2b0a      	cmp	r3, #10
 801469e:	d006      	beq.n	80146ae <tcp_slowtmr+0x5c6>
 80146a0:	4b2b      	ldr	r3, [pc, #172]	@ (8014750 <tcp_slowtmr+0x668>)
 80146a2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80146a6:	492b      	ldr	r1, [pc, #172]	@ (8014754 <tcp_slowtmr+0x66c>)
 80146a8:	482b      	ldr	r0, [pc, #172]	@ (8014758 <tcp_slowtmr+0x670>)
 80146aa:	f009 f86d 	bl	801d788 <iprintf>
 80146ae:	2300      	movs	r3, #0
 80146b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146b4:	4b29      	ldr	r3, [pc, #164]	@ (801475c <tcp_slowtmr+0x674>)
 80146b6:	681a      	ldr	r2, [r3, #0]
 80146b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ba:	6a1b      	ldr	r3, [r3, #32]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	2bf0      	cmp	r3, #240	@ 0xf0
 80146c0:	d904      	bls.n	80146cc <tcp_slowtmr+0x5e4>
 80146c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146c6:	3301      	adds	r3, #1
 80146c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d02f      	beq.n	8014734 <tcp_slowtmr+0x64c>
 80146d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80146d6:	f000 fc17 	bl	8014f08 <tcp_pcb_purge>
 80146da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d010      	beq.n	8014702 <tcp_slowtmr+0x61a>
 80146e0:	4b1f      	ldr	r3, [pc, #124]	@ (8014760 <tcp_slowtmr+0x678>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d106      	bne.n	80146f8 <tcp_slowtmr+0x610>
 80146ea:	4b19      	ldr	r3, [pc, #100]	@ (8014750 <tcp_slowtmr+0x668>)
 80146ec:	f240 52af 	movw	r2, #1455	@ 0x5af
 80146f0:	491c      	ldr	r1, [pc, #112]	@ (8014764 <tcp_slowtmr+0x67c>)
 80146f2:	4819      	ldr	r0, [pc, #100]	@ (8014758 <tcp_slowtmr+0x670>)
 80146f4:	f009 f848 	bl	801d788 <iprintf>
 80146f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146fa:	68da      	ldr	r2, [r3, #12]
 80146fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fe:	60da      	str	r2, [r3, #12]
 8014700:	e00f      	b.n	8014722 <tcp_slowtmr+0x63a>
 8014702:	4b17      	ldr	r3, [pc, #92]	@ (8014760 <tcp_slowtmr+0x678>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014708:	429a      	cmp	r2, r3
 801470a:	d006      	beq.n	801471a <tcp_slowtmr+0x632>
 801470c:	4b10      	ldr	r3, [pc, #64]	@ (8014750 <tcp_slowtmr+0x668>)
 801470e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8014712:	4915      	ldr	r1, [pc, #84]	@ (8014768 <tcp_slowtmr+0x680>)
 8014714:	4810      	ldr	r0, [pc, #64]	@ (8014758 <tcp_slowtmr+0x670>)
 8014716:	f009 f837 	bl	801d788 <iprintf>
 801471a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	4a10      	ldr	r2, [pc, #64]	@ (8014760 <tcp_slowtmr+0x678>)
 8014720:	6013      	str	r3, [r2, #0]
 8014722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014724:	61fb      	str	r3, [r7, #28]
 8014726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014728:	68db      	ldr	r3, [r3, #12]
 801472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801472c:	69f8      	ldr	r0, [r7, #28]
 801472e:	f7fe ff27 	bl	8013580 <tcp_free>
 8014732:	e004      	b.n	801473e <tcp_slowtmr+0x656>
 8014734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014740:	2b00      	cmp	r3, #0
 8014742:	d1a9      	bne.n	8014698 <tcp_slowtmr+0x5b0>
 8014744:	bf00      	nop
 8014746:	bf00      	nop
 8014748:	3730      	adds	r7, #48	@ 0x30
 801474a:	46bd      	mov	sp, r7
 801474c:	bdb0      	pop	{r4, r5, r7, pc}
 801474e:	bf00      	nop
 8014750:	080216b4 	.word	0x080216b4
 8014754:	08021b44 	.word	0x08021b44
 8014758:	080216f8 	.word	0x080216f8
 801475c:	2000f3dc 	.word	0x2000f3dc
 8014760:	2000f3ec 	.word	0x2000f3ec
 8014764:	08021b74 	.word	0x08021b74
 8014768:	08021b9c 	.word	0x08021b9c

0801476c <tcp_fasttmr>:
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	4b2d      	ldr	r3, [pc, #180]	@ (8014828 <tcp_fasttmr+0xbc>)
 8014774:	781b      	ldrb	r3, [r3, #0]
 8014776:	3301      	adds	r3, #1
 8014778:	b2da      	uxtb	r2, r3
 801477a:	4b2b      	ldr	r3, [pc, #172]	@ (8014828 <tcp_fasttmr+0xbc>)
 801477c:	701a      	strb	r2, [r3, #0]
 801477e:	4b2b      	ldr	r3, [pc, #172]	@ (801482c <tcp_fasttmr+0xc0>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	607b      	str	r3, [r7, #4]
 8014784:	e048      	b.n	8014818 <tcp_fasttmr+0xac>
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	7f9a      	ldrb	r2, [r3, #30]
 801478a:	4b27      	ldr	r3, [pc, #156]	@ (8014828 <tcp_fasttmr+0xbc>)
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	429a      	cmp	r2, r3
 8014790:	d03f      	beq.n	8014812 <tcp_fasttmr+0xa6>
 8014792:	4b25      	ldr	r3, [pc, #148]	@ (8014828 <tcp_fasttmr+0xbc>)
 8014794:	781a      	ldrb	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	779a      	strb	r2, [r3, #30]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	8b5b      	ldrh	r3, [r3, #26]
 801479e:	f003 0301 	and.w	r3, r3, #1
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d010      	beq.n	80147c8 <tcp_fasttmr+0x5c>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	8b5b      	ldrh	r3, [r3, #26]
 80147aa:	f043 0302 	orr.w	r3, r3, #2
 80147ae:	b29a      	uxth	r2, r3
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	835a      	strh	r2, [r3, #26]
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f004 f80d 	bl	80187d4 <tcp_output>
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	8b5b      	ldrh	r3, [r3, #26]
 80147be:	f023 0303 	bic.w	r3, r3, #3
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	835a      	strh	r2, [r3, #26]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	8b5b      	ldrh	r3, [r3, #26]
 80147cc:	f003 0308 	and.w	r3, r3, #8
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d009      	beq.n	80147e8 <tcp_fasttmr+0x7c>
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	8b5b      	ldrh	r3, [r3, #26]
 80147d8:	f023 0308 	bic.w	r3, r3, #8
 80147dc:	b29a      	uxth	r2, r3
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	835a      	strh	r2, [r3, #26]
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7ff f860 	bl	80138a8 <tcp_close_shutdown_fin>
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	68db      	ldr	r3, [r3, #12]
 80147ec:	603b      	str	r3, [r7, #0]
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <tcp_fasttmr+0xa0>
 80147f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014830 <tcp_fasttmr+0xc4>)
 80147f8:	2200      	movs	r2, #0
 80147fa:	701a      	strb	r2, [r3, #0]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 f819 	bl	8014834 <tcp_process_refused_data>
 8014802:	4b0b      	ldr	r3, [pc, #44]	@ (8014830 <tcp_fasttmr+0xc4>)
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d000      	beq.n	801480c <tcp_fasttmr+0xa0>
 801480a:	e7b8      	b.n	801477e <tcp_fasttmr+0x12>
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	607b      	str	r3, [r7, #4]
 8014810:	e002      	b.n	8014818 <tcp_fasttmr+0xac>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	607b      	str	r3, [r7, #4]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1b3      	bne.n	8014786 <tcp_fasttmr+0x1a>
 801481e:	bf00      	nop
 8014820:	bf00      	nop
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	2000f3f2 	.word	0x2000f3f2
 801482c:	2000f3e8 	.word	0x2000f3e8
 8014830:	2000f3f0 	.word	0x2000f3f0

08014834 <tcp_process_refused_data>:
 8014834:	b590      	push	{r4, r7, lr}
 8014836:	b085      	sub	sp, #20
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d109      	bne.n	8014856 <tcp_process_refused_data+0x22>
 8014842:	4b37      	ldr	r3, [pc, #220]	@ (8014920 <tcp_process_refused_data+0xec>)
 8014844:	f240 6209 	movw	r2, #1545	@ 0x609
 8014848:	4936      	ldr	r1, [pc, #216]	@ (8014924 <tcp_process_refused_data+0xf0>)
 801484a:	4837      	ldr	r0, [pc, #220]	@ (8014928 <tcp_process_refused_data+0xf4>)
 801484c:	f008 ff9c 	bl	801d788 <iprintf>
 8014850:	f06f 030f 	mvn.w	r3, #15
 8014854:	e060      	b.n	8014918 <tcp_process_refused_data+0xe4>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801485a:	7b5b      	ldrb	r3, [r3, #13]
 801485c:	73bb      	strb	r3, [r7, #14]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014862:	60bb      	str	r3, [r7, #8]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	679a      	str	r2, [r3, #120]	@ 0x78
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014870:	2b00      	cmp	r3, #0
 8014872:	d00b      	beq.n	801488c <tcp_process_refused_data+0x58>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	6918      	ldr	r0, [r3, #16]
 801487e:	2300      	movs	r3, #0
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	6879      	ldr	r1, [r7, #4]
 8014884:	47a0      	blx	r4
 8014886:	4603      	mov	r3, r0
 8014888:	73fb      	strb	r3, [r7, #15]
 801488a:	e007      	b.n	801489c <tcp_process_refused_data+0x68>
 801488c:	2300      	movs	r3, #0
 801488e:	68ba      	ldr	r2, [r7, #8]
 8014890:	6879      	ldr	r1, [r7, #4]
 8014892:	2000      	movs	r0, #0
 8014894:	f000 f8c2 	bl	8014a1c <tcp_recv_null>
 8014898:	4603      	mov	r3, r0
 801489a:	73fb      	strb	r3, [r7, #15]
 801489c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d12a      	bne.n	80148fa <tcp_process_refused_data+0xc6>
 80148a4:	7bbb      	ldrb	r3, [r7, #14]
 80148a6:	f003 0320 	and.w	r3, r3, #32
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d033      	beq.n	8014916 <tcp_process_refused_data+0xe2>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148b2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80148b6:	d005      	beq.n	80148c4 <tcp_process_refused_data+0x90>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80148bc:	3301      	adds	r3, #1
 80148be:	b29a      	uxth	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d00b      	beq.n	80148e6 <tcp_process_refused_data+0xb2>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6918      	ldr	r0, [r3, #16]
 80148d8:	2300      	movs	r3, #0
 80148da:	2200      	movs	r2, #0
 80148dc:	6879      	ldr	r1, [r7, #4]
 80148de:	47a0      	blx	r4
 80148e0:	4603      	mov	r3, r0
 80148e2:	73fb      	strb	r3, [r7, #15]
 80148e4:	e001      	b.n	80148ea <tcp_process_refused_data+0xb6>
 80148e6:	2300      	movs	r3, #0
 80148e8:	73fb      	strb	r3, [r7, #15]
 80148ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148ee:	f113 0f0d 	cmn.w	r3, #13
 80148f2:	d110      	bne.n	8014916 <tcp_process_refused_data+0xe2>
 80148f4:	f06f 030c 	mvn.w	r3, #12
 80148f8:	e00e      	b.n	8014918 <tcp_process_refused_data+0xe4>
 80148fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148fe:	f113 0f0d 	cmn.w	r3, #13
 8014902:	d102      	bne.n	801490a <tcp_process_refused_data+0xd6>
 8014904:	f06f 030c 	mvn.w	r3, #12
 8014908:	e006      	b.n	8014918 <tcp_process_refused_data+0xe4>
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	68ba      	ldr	r2, [r7, #8]
 801490e:	679a      	str	r2, [r3, #120]	@ 0x78
 8014910:	f06f 0304 	mvn.w	r3, #4
 8014914:	e000      	b.n	8014918 <tcp_process_refused_data+0xe4>
 8014916:	2300      	movs	r3, #0
 8014918:	4618      	mov	r0, r3
 801491a:	3714      	adds	r7, #20
 801491c:	46bd      	mov	sp, r7
 801491e:	bd90      	pop	{r4, r7, pc}
 8014920:	080216b4 	.word	0x080216b4
 8014924:	08021bc4 	.word	0x08021bc4
 8014928:	080216f8 	.word	0x080216f8

0801492c <tcp_segs_free>:
 801492c:	b580      	push	{r7, lr}
 801492e:	b084      	sub	sp, #16
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	e007      	b.n	8014946 <tcp_segs_free+0x1a>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	60fb      	str	r3, [r7, #12]
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f000 f80a 	bl	8014956 <tcp_seg_free>
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	607b      	str	r3, [r7, #4]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1f4      	bne.n	8014936 <tcp_segs_free+0xa>
 801494c:	bf00      	nop
 801494e:	bf00      	nop
 8014950:	3710      	adds	r7, #16
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}

08014956 <tcp_seg_free>:
 8014956:	b580      	push	{r7, lr}
 8014958:	b082      	sub	sp, #8
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d00c      	beq.n	801497e <tcp_seg_free+0x28>
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d004      	beq.n	8014976 <tcp_seg_free+0x20>
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	4618      	mov	r0, r3
 8014972:	f7fe fb49 	bl	8013008 <pbuf_free>
 8014976:	6879      	ldr	r1, [r7, #4]
 8014978:	2003      	movs	r0, #3
 801497a:	f7fd fca1 	bl	80122c0 <memp_free>
 801497e:	bf00      	nop
 8014980:	3708      	adds	r7, #8
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}
	...

08014988 <tcp_setprio>:
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	460b      	mov	r3, r1
 8014992:	70fb      	strb	r3, [r7, #3]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d107      	bne.n	80149aa <tcp_setprio+0x22>
 801499a:	4b07      	ldr	r3, [pc, #28]	@ (80149b8 <tcp_setprio+0x30>)
 801499c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 80149a0:	4906      	ldr	r1, [pc, #24]	@ (80149bc <tcp_setprio+0x34>)
 80149a2:	4807      	ldr	r0, [pc, #28]	@ (80149c0 <tcp_setprio+0x38>)
 80149a4:	f008 fef0 	bl	801d788 <iprintf>
 80149a8:	e002      	b.n	80149b0 <tcp_setprio+0x28>
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	78fa      	ldrb	r2, [r7, #3]
 80149ae:	755a      	strb	r2, [r3, #21]
 80149b0:	3708      	adds	r7, #8
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	080216b4 	.word	0x080216b4
 80149bc:	08021bec 	.word	0x08021bec
 80149c0:	080216f8 	.word	0x080216f8

080149c4 <tcp_seg_copy>:
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d106      	bne.n	80149e0 <tcp_seg_copy+0x1c>
 80149d2:	4b0f      	ldr	r3, [pc, #60]	@ (8014a10 <tcp_seg_copy+0x4c>)
 80149d4:	f240 6282 	movw	r2, #1666	@ 0x682
 80149d8:	490e      	ldr	r1, [pc, #56]	@ (8014a14 <tcp_seg_copy+0x50>)
 80149da:	480f      	ldr	r0, [pc, #60]	@ (8014a18 <tcp_seg_copy+0x54>)
 80149dc:	f008 fed4 	bl	801d788 <iprintf>
 80149e0:	2003      	movs	r0, #3
 80149e2:	f7fd fbf7 	bl	80121d4 <memp_malloc>
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d101      	bne.n	80149f2 <tcp_seg_copy+0x2e>
 80149ee:	2300      	movs	r3, #0
 80149f0:	e00a      	b.n	8014a08 <tcp_seg_copy+0x44>
 80149f2:	2210      	movs	r2, #16
 80149f4:	6879      	ldr	r1, [r7, #4]
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f009 f947 	bl	801dc8a <memcpy>
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7fe fba7 	bl	8013154 <pbuf_ref>
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3710      	adds	r7, #16
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	080216b4 	.word	0x080216b4
 8014a14:	08021c08 	.word	0x08021c08
 8014a18:	080216f8 	.word	0x080216f8

08014a1c <tcp_recv_null>:
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	607a      	str	r2, [r7, #4]
 8014a28:	70fb      	strb	r3, [r7, #3]
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d109      	bne.n	8014a44 <tcp_recv_null+0x28>
 8014a30:	4b12      	ldr	r3, [pc, #72]	@ (8014a7c <tcp_recv_null+0x60>)
 8014a32:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014a36:	4912      	ldr	r1, [pc, #72]	@ (8014a80 <tcp_recv_null+0x64>)
 8014a38:	4812      	ldr	r0, [pc, #72]	@ (8014a84 <tcp_recv_null+0x68>)
 8014a3a:	f008 fea5 	bl	801d788 <iprintf>
 8014a3e:	f06f 030f 	mvn.w	r3, #15
 8014a42:	e016      	b.n	8014a72 <tcp_recv_null+0x56>
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d009      	beq.n	8014a5e <tcp_recv_null+0x42>
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	891b      	ldrh	r3, [r3, #8]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	68b8      	ldr	r0, [r7, #8]
 8014a52:	f7ff fab3 	bl	8013fbc <tcp_recved>
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f7fe fad6 	bl	8013008 <pbuf_free>
 8014a5c:	e008      	b.n	8014a70 <tcp_recv_null+0x54>
 8014a5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d104      	bne.n	8014a70 <tcp_recv_null+0x54>
 8014a66:	68b8      	ldr	r0, [r7, #8]
 8014a68:	f7fe ff88 	bl	801397c <tcp_close>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	e000      	b.n	8014a72 <tcp_recv_null+0x56>
 8014a70:	2300      	movs	r3, #0
 8014a72:	4618      	mov	r0, r3
 8014a74:	3710      	adds	r7, #16
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	080216b4 	.word	0x080216b4
 8014a80:	08021c24 	.word	0x08021c24
 8014a84:	080216f8 	.word	0x080216f8

08014a88 <tcp_kill_prio>:
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b086      	sub	sp, #24
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	4603      	mov	r3, r0
 8014a90:	71fb      	strb	r3, [r7, #7]
 8014a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	db01      	blt.n	8014a9e <tcp_kill_prio+0x16>
 8014a9a:	79fb      	ldrb	r3, [r7, #7]
 8014a9c:	e000      	b.n	8014aa0 <tcp_kill_prio+0x18>
 8014a9e:	237f      	movs	r3, #127	@ 0x7f
 8014aa0:	72fb      	strb	r3, [r7, #11]
 8014aa2:	7afb      	ldrb	r3, [r7, #11]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d034      	beq.n	8014b12 <tcp_kill_prio+0x8a>
 8014aa8:	7afb      	ldrb	r3, [r7, #11]
 8014aaa:	3b01      	subs	r3, #1
 8014aac:	72fb      	strb	r3, [r7, #11]
 8014aae:	2300      	movs	r3, #0
 8014ab0:	60fb      	str	r3, [r7, #12]
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	613b      	str	r3, [r7, #16]
 8014ab6:	4b19      	ldr	r3, [pc, #100]	@ (8014b1c <tcp_kill_prio+0x94>)
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	617b      	str	r3, [r7, #20]
 8014abc:	e01f      	b.n	8014afe <tcp_kill_prio+0x76>
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	7d5b      	ldrb	r3, [r3, #21]
 8014ac2:	7afa      	ldrb	r2, [r7, #11]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d80c      	bhi.n	8014ae2 <tcp_kill_prio+0x5a>
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	7d5b      	ldrb	r3, [r3, #21]
 8014acc:	7afa      	ldrb	r2, [r7, #11]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d112      	bne.n	8014af8 <tcp_kill_prio+0x70>
 8014ad2:	4b13      	ldr	r3, [pc, #76]	@ (8014b20 <tcp_kill_prio+0x98>)
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	697b      	ldr	r3, [r7, #20]
 8014ad8:	6a1b      	ldr	r3, [r3, #32]
 8014ada:	1ad3      	subs	r3, r2, r3
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d80a      	bhi.n	8014af8 <tcp_kill_prio+0x70>
 8014ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8014b20 <tcp_kill_prio+0x98>)
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	6a1b      	ldr	r3, [r3, #32]
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	60fb      	str	r3, [r7, #12]
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	613b      	str	r3, [r7, #16]
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	7d5b      	ldrb	r3, [r3, #21]
 8014af6:	72fb      	strb	r3, [r7, #11]
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	68db      	ldr	r3, [r3, #12]
 8014afc:	617b      	str	r3, [r7, #20]
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d1dc      	bne.n	8014abe <tcp_kill_prio+0x36>
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d004      	beq.n	8014b14 <tcp_kill_prio+0x8c>
 8014b0a:	6938      	ldr	r0, [r7, #16]
 8014b0c:	f7ff f87c 	bl	8013c08 <tcp_abort>
 8014b10:	e000      	b.n	8014b14 <tcp_kill_prio+0x8c>
 8014b12:	bf00      	nop
 8014b14:	3718      	adds	r7, #24
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	2000f3e8 	.word	0x2000f3e8
 8014b20:	2000f3dc 	.word	0x2000f3dc

08014b24 <tcp_kill_state>:
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b086      	sub	sp, #24
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	71fb      	strb	r3, [r7, #7]
 8014b2e:	79fb      	ldrb	r3, [r7, #7]
 8014b30:	2b08      	cmp	r3, #8
 8014b32:	d009      	beq.n	8014b48 <tcp_kill_state+0x24>
 8014b34:	79fb      	ldrb	r3, [r7, #7]
 8014b36:	2b09      	cmp	r3, #9
 8014b38:	d006      	beq.n	8014b48 <tcp_kill_state+0x24>
 8014b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8014ba4 <tcp_kill_state+0x80>)
 8014b3c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014b40:	4919      	ldr	r1, [pc, #100]	@ (8014ba8 <tcp_kill_state+0x84>)
 8014b42:	481a      	ldr	r0, [pc, #104]	@ (8014bac <tcp_kill_state+0x88>)
 8014b44:	f008 fe20 	bl	801d788 <iprintf>
 8014b48:	2300      	movs	r3, #0
 8014b4a:	60fb      	str	r3, [r7, #12]
 8014b4c:	2300      	movs	r3, #0
 8014b4e:	613b      	str	r3, [r7, #16]
 8014b50:	4b17      	ldr	r3, [pc, #92]	@ (8014bb0 <tcp_kill_state+0x8c>)
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	617b      	str	r3, [r7, #20]
 8014b56:	e017      	b.n	8014b88 <tcp_kill_state+0x64>
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	7d1b      	ldrb	r3, [r3, #20]
 8014b5c:	79fa      	ldrb	r2, [r7, #7]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d10f      	bne.n	8014b82 <tcp_kill_state+0x5e>
 8014b62:	4b14      	ldr	r3, [pc, #80]	@ (8014bb4 <tcp_kill_state+0x90>)
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	6a1b      	ldr	r3, [r3, #32]
 8014b6a:	1ad3      	subs	r3, r2, r3
 8014b6c:	68fa      	ldr	r2, [r7, #12]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d807      	bhi.n	8014b82 <tcp_kill_state+0x5e>
 8014b72:	4b10      	ldr	r3, [pc, #64]	@ (8014bb4 <tcp_kill_state+0x90>)
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	6a1b      	ldr	r3, [r3, #32]
 8014b7a:	1ad3      	subs	r3, r2, r3
 8014b7c:	60fb      	str	r3, [r7, #12]
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	613b      	str	r3, [r7, #16]
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	617b      	str	r3, [r7, #20]
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1e4      	bne.n	8014b58 <tcp_kill_state+0x34>
 8014b8e:	693b      	ldr	r3, [r7, #16]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d003      	beq.n	8014b9c <tcp_kill_state+0x78>
 8014b94:	2100      	movs	r1, #0
 8014b96:	6938      	ldr	r0, [r7, #16]
 8014b98:	f7fe ff78 	bl	8013a8c <tcp_abandon>
 8014b9c:	bf00      	nop
 8014b9e:	3718      	adds	r7, #24
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	080216b4 	.word	0x080216b4
 8014ba8:	08021c40 	.word	0x08021c40
 8014bac:	080216f8 	.word	0x080216f8
 8014bb0:	2000f3e8 	.word	0x2000f3e8
 8014bb4:	2000f3dc 	.word	0x2000f3dc

08014bb8 <tcp_kill_timewait>:
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b084      	sub	sp, #16
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	607b      	str	r3, [r7, #4]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	60bb      	str	r3, [r7, #8]
 8014bc6:	4b12      	ldr	r3, [pc, #72]	@ (8014c10 <tcp_kill_timewait+0x58>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	60fb      	str	r3, [r7, #12]
 8014bcc:	e012      	b.n	8014bf4 <tcp_kill_timewait+0x3c>
 8014bce:	4b11      	ldr	r3, [pc, #68]	@ (8014c14 <tcp_kill_timewait+0x5c>)
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	6a1b      	ldr	r3, [r3, #32]
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d807      	bhi.n	8014bee <tcp_kill_timewait+0x36>
 8014bde:	4b0d      	ldr	r3, [pc, #52]	@ (8014c14 <tcp_kill_timewait+0x5c>)
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6a1b      	ldr	r3, [r3, #32]
 8014be6:	1ad3      	subs	r3, r2, r3
 8014be8:	607b      	str	r3, [r7, #4]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	60bb      	str	r3, [r7, #8]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	68db      	ldr	r3, [r3, #12]
 8014bf2:	60fb      	str	r3, [r7, #12]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d1e9      	bne.n	8014bce <tcp_kill_timewait+0x16>
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d002      	beq.n	8014c06 <tcp_kill_timewait+0x4e>
 8014c00:	68b8      	ldr	r0, [r7, #8]
 8014c02:	f7ff f801 	bl	8013c08 <tcp_abort>
 8014c06:	bf00      	nop
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	2000f3ec 	.word	0x2000f3ec
 8014c14:	2000f3dc 	.word	0x2000f3dc

08014c18 <tcp_handle_closepend>:
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b082      	sub	sp, #8
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	4b10      	ldr	r3, [pc, #64]	@ (8014c60 <tcp_handle_closepend+0x48>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	607b      	str	r3, [r7, #4]
 8014c24:	e014      	b.n	8014c50 <tcp_handle_closepend+0x38>
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	68db      	ldr	r3, [r3, #12]
 8014c2a:	603b      	str	r3, [r7, #0]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	8b5b      	ldrh	r3, [r3, #26]
 8014c30:	f003 0308 	and.w	r3, r3, #8
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d009      	beq.n	8014c4c <tcp_handle_closepend+0x34>
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	8b5b      	ldrh	r3, [r3, #26]
 8014c3c:	f023 0308 	bic.w	r3, r3, #8
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	835a      	strh	r2, [r3, #26]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f7fe fe2e 	bl	80138a8 <tcp_close_shutdown_fin>
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	607b      	str	r3, [r7, #4]
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d1e7      	bne.n	8014c26 <tcp_handle_closepend+0xe>
 8014c56:	bf00      	nop
 8014c58:	bf00      	nop
 8014c5a:	3708      	adds	r7, #8
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}
 8014c60:	2000f3e8 	.word	0x2000f3e8

08014c64 <tcp_alloc>:
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b084      	sub	sp, #16
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	71fb      	strb	r3, [r7, #7]
 8014c6e:	2001      	movs	r0, #1
 8014c70:	f7fd fab0 	bl	80121d4 <memp_malloc>
 8014c74:	60f8      	str	r0, [r7, #12]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d126      	bne.n	8014cca <tcp_alloc+0x66>
 8014c7c:	f7ff ffcc 	bl	8014c18 <tcp_handle_closepend>
 8014c80:	f7ff ff9a 	bl	8014bb8 <tcp_kill_timewait>
 8014c84:	2001      	movs	r0, #1
 8014c86:	f7fd faa5 	bl	80121d4 <memp_malloc>
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d11b      	bne.n	8014cca <tcp_alloc+0x66>
 8014c92:	2009      	movs	r0, #9
 8014c94:	f7ff ff46 	bl	8014b24 <tcp_kill_state>
 8014c98:	2001      	movs	r0, #1
 8014c9a:	f7fd fa9b 	bl	80121d4 <memp_malloc>
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d111      	bne.n	8014cca <tcp_alloc+0x66>
 8014ca6:	2008      	movs	r0, #8
 8014ca8:	f7ff ff3c 	bl	8014b24 <tcp_kill_state>
 8014cac:	2001      	movs	r0, #1
 8014cae:	f7fd fa91 	bl	80121d4 <memp_malloc>
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d107      	bne.n	8014cca <tcp_alloc+0x66>
 8014cba:	79fb      	ldrb	r3, [r7, #7]
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f7ff fee3 	bl	8014a88 <tcp_kill_prio>
 8014cc2:	2001      	movs	r0, #1
 8014cc4:	f7fd fa86 	bl	80121d4 <memp_malloc>
 8014cc8:	60f8      	str	r0, [r7, #12]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d03f      	beq.n	8014d50 <tcp_alloc+0xec>
 8014cd0:	229c      	movs	r2, #156	@ 0x9c
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f008 fee9 	bl	801daac <memset>
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	79fa      	ldrb	r2, [r7, #7]
 8014cde:	755a      	strb	r2, [r3, #21]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014ce6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	22ff      	movs	r2, #255	@ 0xff
 8014cfe:	72da      	strb	r2, [r3, #11]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014d06:	865a      	strh	r2, [r3, #50]	@ 0x32
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2206      	movs	r2, #6
 8014d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2206      	movs	r2, #6
 8014d14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d1c:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2201      	movs	r2, #1
 8014d22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014d26:	4b0d      	ldr	r3, [pc, #52]	@ (8014d5c <tcp_alloc+0xf8>)
 8014d28:	681a      	ldr	r2, [r3, #0]
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	621a      	str	r2, [r3, #32]
 8014d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8014d60 <tcp_alloc+0xfc>)
 8014d30:	781a      	ldrb	r2, [r3, #0]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	779a      	strb	r2, [r3, #30]
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014d3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	4a08      	ldr	r2, [pc, #32]	@ (8014d64 <tcp_alloc+0x100>)
 8014d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	4a07      	ldr	r2, [pc, #28]	@ (8014d68 <tcp_alloc+0x104>)
 8014d4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	4618      	mov	r0, r3
 8014d54:	3710      	adds	r7, #16
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	2000f3dc 	.word	0x2000f3dc
 8014d60:	2000f3f2 	.word	0x2000f3f2
 8014d64:	08014a1d 	.word	0x08014a1d
 8014d68:	006ddd00 	.word	0x006ddd00

08014d6c <tcp_new_ip_type>:
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	4603      	mov	r3, r0
 8014d74:	71fb      	strb	r3, [r7, #7]
 8014d76:	2040      	movs	r0, #64	@ 0x40
 8014d78:	f7ff ff74 	bl	8014c64 <tcp_alloc>
 8014d7c:	60f8      	str	r0, [r7, #12]
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	4618      	mov	r0, r3
 8014d82:	3710      	adds	r7, #16
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}

08014d88 <tcp_arg>:
 8014d88:	b480      	push	{r7}
 8014d8a:	b083      	sub	sp, #12
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6039      	str	r1, [r7, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <tcp_arg+0x16>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	683a      	ldr	r2, [r7, #0]
 8014d9c:	611a      	str	r2, [r3, #16]
 8014d9e:	bf00      	nop
 8014da0:	370c      	adds	r7, #12
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
	...

08014dac <tcp_recv>:
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d00e      	beq.n	8014dda <tcp_recv+0x2e>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7d1b      	ldrb	r3, [r3, #20]
 8014dc0:	2b01      	cmp	r3, #1
 8014dc2:	d106      	bne.n	8014dd2 <tcp_recv+0x26>
 8014dc4:	4b07      	ldr	r3, [pc, #28]	@ (8014de4 <tcp_recv+0x38>)
 8014dc6:	f240 72df 	movw	r2, #2015	@ 0x7df
 8014dca:	4907      	ldr	r1, [pc, #28]	@ (8014de8 <tcp_recv+0x3c>)
 8014dcc:	4807      	ldr	r0, [pc, #28]	@ (8014dec <tcp_recv+0x40>)
 8014dce:	f008 fcdb 	bl	801d788 <iprintf>
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	683a      	ldr	r2, [r7, #0]
 8014dd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8014dda:	bf00      	nop
 8014ddc:	3708      	adds	r7, #8
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	080216b4 	.word	0x080216b4
 8014de8:	08021c50 	.word	0x08021c50
 8014dec:	080216f8 	.word	0x080216f8

08014df0 <tcp_sent>:
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	6039      	str	r1, [r7, #0]
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00e      	beq.n	8014e1e <tcp_sent+0x2e>
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	7d1b      	ldrb	r3, [r3, #20]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d106      	bne.n	8014e16 <tcp_sent+0x26>
 8014e08:	4b07      	ldr	r3, [pc, #28]	@ (8014e28 <tcp_sent+0x38>)
 8014e0a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8014e0e:	4907      	ldr	r1, [pc, #28]	@ (8014e2c <tcp_sent+0x3c>)
 8014e10:	4807      	ldr	r0, [pc, #28]	@ (8014e30 <tcp_sent+0x40>)
 8014e12:	f008 fcb9 	bl	801d788 <iprintf>
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	683a      	ldr	r2, [r7, #0]
 8014e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8014e1e:	bf00      	nop
 8014e20:	3708      	adds	r7, #8
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	080216b4 	.word	0x080216b4
 8014e2c:	08021c78 	.word	0x08021c78
 8014e30:	080216f8 	.word	0x080216f8

08014e34 <tcp_err>:
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00e      	beq.n	8014e62 <tcp_err+0x2e>
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	7d1b      	ldrb	r3, [r3, #20]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d106      	bne.n	8014e5a <tcp_err+0x26>
 8014e4c:	4b07      	ldr	r3, [pc, #28]	@ (8014e6c <tcp_err+0x38>)
 8014e4e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014e52:	4907      	ldr	r1, [pc, #28]	@ (8014e70 <tcp_err+0x3c>)
 8014e54:	4807      	ldr	r0, [pc, #28]	@ (8014e74 <tcp_err+0x40>)
 8014e56:	f008 fc97 	bl	801d788 <iprintf>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	683a      	ldr	r2, [r7, #0]
 8014e5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8014e62:	bf00      	nop
 8014e64:	3708      	adds	r7, #8
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	080216b4 	.word	0x080216b4
 8014e70:	08021ca0 	.word	0x08021ca0
 8014e74:	080216f8 	.word	0x080216f8

08014e78 <tcp_accept>:
 8014e78:	b480      	push	{r7}
 8014e7a:	b085      	sub	sp, #20
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
 8014e80:	6039      	str	r1, [r7, #0]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d008      	beq.n	8014e9a <tcp_accept+0x22>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	7d1b      	ldrb	r3, [r3, #20]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d104      	bne.n	8014e9a <tcp_accept+0x22>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	60fb      	str	r3, [r7, #12]
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	619a      	str	r2, [r3, #24]
 8014e9a:	bf00      	nop
 8014e9c:	3714      	adds	r7, #20
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr
	...

08014ea8 <tcp_poll>:
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	71fb      	strb	r3, [r7, #7]
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d107      	bne.n	8014ecc <tcp_poll+0x24>
 8014ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8014ef8 <tcp_poll+0x50>)
 8014ebe:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014ec2:	490e      	ldr	r1, [pc, #56]	@ (8014efc <tcp_poll+0x54>)
 8014ec4:	480e      	ldr	r0, [pc, #56]	@ (8014f00 <tcp_poll+0x58>)
 8014ec6:	f008 fc5f 	bl	801d788 <iprintf>
 8014eca:	e011      	b.n	8014ef0 <tcp_poll+0x48>
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	7d1b      	ldrb	r3, [r3, #20]
 8014ed0:	2b01      	cmp	r3, #1
 8014ed2:	d106      	bne.n	8014ee2 <tcp_poll+0x3a>
 8014ed4:	4b08      	ldr	r3, [pc, #32]	@ (8014ef8 <tcp_poll+0x50>)
 8014ed6:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014eda:	490a      	ldr	r1, [pc, #40]	@ (8014f04 <tcp_poll+0x5c>)
 8014edc:	4808      	ldr	r0, [pc, #32]	@ (8014f00 <tcp_poll+0x58>)
 8014ede:	f008 fc53 	bl	801d788 <iprintf>
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	79fa      	ldrb	r2, [r7, #7]
 8014eee:	775a      	strb	r2, [r3, #29]
 8014ef0:	3710      	adds	r7, #16
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}
 8014ef6:	bf00      	nop
 8014ef8:	080216b4 	.word	0x080216b4
 8014efc:	08021cc8 	.word	0x08021cc8
 8014f00:	080216f8 	.word	0x080216f8
 8014f04:	08021ce0 	.word	0x08021ce0

08014f08 <tcp_pcb_purge>:
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d107      	bne.n	8014f26 <tcp_pcb_purge+0x1e>
 8014f16:	4b21      	ldr	r3, [pc, #132]	@ (8014f9c <tcp_pcb_purge+0x94>)
 8014f18:	f640 0251 	movw	r2, #2129	@ 0x851
 8014f1c:	4920      	ldr	r1, [pc, #128]	@ (8014fa0 <tcp_pcb_purge+0x98>)
 8014f1e:	4821      	ldr	r0, [pc, #132]	@ (8014fa4 <tcp_pcb_purge+0x9c>)
 8014f20:	f008 fc32 	bl	801d788 <iprintf>
 8014f24:	e037      	b.n	8014f96 <tcp_pcb_purge+0x8e>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	7d1b      	ldrb	r3, [r3, #20]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d033      	beq.n	8014f96 <tcp_pcb_purge+0x8e>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	7d1b      	ldrb	r3, [r3, #20]
 8014f32:	2b0a      	cmp	r3, #10
 8014f34:	d02f      	beq.n	8014f96 <tcp_pcb_purge+0x8e>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	7d1b      	ldrb	r3, [r3, #20]
 8014f3a:	2b01      	cmp	r3, #1
 8014f3c:	d02b      	beq.n	8014f96 <tcp_pcb_purge+0x8e>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d007      	beq.n	8014f56 <tcp_pcb_purge+0x4e>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fe f85c 	bl	8013008 <pbuf_free>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	679a      	str	r2, [r3, #120]	@ 0x78
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d002      	beq.n	8014f64 <tcp_pcb_purge+0x5c>
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 f986 	bl	8015270 <tcp_free_ooseq>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f6a:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7ff fcdb 	bl	801492c <tcp_segs_free>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7ff fcd6 	bl	801492c <tcp_segs_free>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2200      	movs	r2, #0
 8014f84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	671a      	str	r2, [r3, #112]	@ 0x70
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2200      	movs	r2, #0
 8014f92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014f96:	3708      	adds	r7, #8
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	080216b4 	.word	0x080216b4
 8014fa0:	08021d00 	.word	0x08021d00
 8014fa4:	080216f8 	.word	0x080216f8

08014fa8 <tcp_pcb_remove>:
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
 8014fb0:	6039      	str	r1, [r7, #0]
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d106      	bne.n	8014fc6 <tcp_pcb_remove+0x1e>
 8014fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80150b4 <tcp_pcb_remove+0x10c>)
 8014fba:	f640 0283 	movw	r2, #2179	@ 0x883
 8014fbe:	493e      	ldr	r1, [pc, #248]	@ (80150b8 <tcp_pcb_remove+0x110>)
 8014fc0:	483e      	ldr	r0, [pc, #248]	@ (80150bc <tcp_pcb_remove+0x114>)
 8014fc2:	f008 fbe1 	bl	801d788 <iprintf>
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d106      	bne.n	8014fda <tcp_pcb_remove+0x32>
 8014fcc:	4b39      	ldr	r3, [pc, #228]	@ (80150b4 <tcp_pcb_remove+0x10c>)
 8014fce:	f640 0284 	movw	r2, #2180	@ 0x884
 8014fd2:	493b      	ldr	r1, [pc, #236]	@ (80150c0 <tcp_pcb_remove+0x118>)
 8014fd4:	4839      	ldr	r0, [pc, #228]	@ (80150bc <tcp_pcb_remove+0x114>)
 8014fd6:	f008 fbd7 	bl	801d788 <iprintf>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	683a      	ldr	r2, [r7, #0]
 8014fe0:	429a      	cmp	r2, r3
 8014fe2:	d105      	bne.n	8014ff0 <tcp_pcb_remove+0x48>
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	68da      	ldr	r2, [r3, #12]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	601a      	str	r2, [r3, #0]
 8014fee:	e013      	b.n	8015018 <tcp_pcb_remove+0x70>
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	60fb      	str	r3, [r7, #12]
 8014ff6:	e00c      	b.n	8015012 <tcp_pcb_remove+0x6a>
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	683a      	ldr	r2, [r7, #0]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d104      	bne.n	801500c <tcp_pcb_remove+0x64>
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	68da      	ldr	r2, [r3, #12]
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	60da      	str	r2, [r3, #12]
 801500a:	e005      	b.n	8015018 <tcp_pcb_remove+0x70>
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	60fb      	str	r3, [r7, #12]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1ef      	bne.n	8014ff8 <tcp_pcb_remove+0x50>
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2200      	movs	r2, #0
 801501c:	60da      	str	r2, [r3, #12]
 801501e:	6838      	ldr	r0, [r7, #0]
 8015020:	f7ff ff72 	bl	8014f08 <tcp_pcb_purge>
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	7d1b      	ldrb	r3, [r3, #20]
 8015028:	2b0a      	cmp	r3, #10
 801502a:	d013      	beq.n	8015054 <tcp_pcb_remove+0xac>
 801502c:	683b      	ldr	r3, [r7, #0]
 801502e:	7d1b      	ldrb	r3, [r3, #20]
 8015030:	2b01      	cmp	r3, #1
 8015032:	d00f      	beq.n	8015054 <tcp_pcb_remove+0xac>
 8015034:	683b      	ldr	r3, [r7, #0]
 8015036:	8b5b      	ldrh	r3, [r3, #26]
 8015038:	f003 0301 	and.w	r3, r3, #1
 801503c:	2b00      	cmp	r3, #0
 801503e:	d009      	beq.n	8015054 <tcp_pcb_remove+0xac>
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	8b5b      	ldrh	r3, [r3, #26]
 8015044:	f043 0302 	orr.w	r3, r3, #2
 8015048:	b29a      	uxth	r2, r3
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	835a      	strh	r2, [r3, #26]
 801504e:	6838      	ldr	r0, [r7, #0]
 8015050:	f003 fbc0 	bl	80187d4 <tcp_output>
 8015054:	683b      	ldr	r3, [r7, #0]
 8015056:	7d1b      	ldrb	r3, [r3, #20]
 8015058:	2b01      	cmp	r3, #1
 801505a:	d020      	beq.n	801509e <tcp_pcb_remove+0xf6>
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015060:	2b00      	cmp	r3, #0
 8015062:	d006      	beq.n	8015072 <tcp_pcb_remove+0xca>
 8015064:	4b13      	ldr	r3, [pc, #76]	@ (80150b4 <tcp_pcb_remove+0x10c>)
 8015066:	f640 0293 	movw	r2, #2195	@ 0x893
 801506a:	4916      	ldr	r1, [pc, #88]	@ (80150c4 <tcp_pcb_remove+0x11c>)
 801506c:	4813      	ldr	r0, [pc, #76]	@ (80150bc <tcp_pcb_remove+0x114>)
 801506e:	f008 fb8b 	bl	801d788 <iprintf>
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015076:	2b00      	cmp	r3, #0
 8015078:	d006      	beq.n	8015088 <tcp_pcb_remove+0xe0>
 801507a:	4b0e      	ldr	r3, [pc, #56]	@ (80150b4 <tcp_pcb_remove+0x10c>)
 801507c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015080:	4911      	ldr	r1, [pc, #68]	@ (80150c8 <tcp_pcb_remove+0x120>)
 8015082:	480e      	ldr	r0, [pc, #56]	@ (80150bc <tcp_pcb_remove+0x114>)
 8015084:	f008 fb80 	bl	801d788 <iprintf>
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801508c:	2b00      	cmp	r3, #0
 801508e:	d006      	beq.n	801509e <tcp_pcb_remove+0xf6>
 8015090:	4b08      	ldr	r3, [pc, #32]	@ (80150b4 <tcp_pcb_remove+0x10c>)
 8015092:	f640 0296 	movw	r2, #2198	@ 0x896
 8015096:	490d      	ldr	r1, [pc, #52]	@ (80150cc <tcp_pcb_remove+0x124>)
 8015098:	4808      	ldr	r0, [pc, #32]	@ (80150bc <tcp_pcb_remove+0x114>)
 801509a:	f008 fb75 	bl	801d788 <iprintf>
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	2200      	movs	r2, #0
 80150a2:	751a      	strb	r2, [r3, #20]
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	2200      	movs	r2, #0
 80150a8:	82da      	strh	r2, [r3, #22]
 80150aa:	bf00      	nop
 80150ac:	3710      	adds	r7, #16
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	080216b4 	.word	0x080216b4
 80150b8:	08021d1c 	.word	0x08021d1c
 80150bc:	080216f8 	.word	0x080216f8
 80150c0:	08021d38 	.word	0x08021d38
 80150c4:	08021d58 	.word	0x08021d58
 80150c8:	08021d70 	.word	0x08021d70
 80150cc:	08021d8c 	.word	0x08021d8c

080150d0 <tcp_next_iss>:
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d106      	bne.n	80150ec <tcp_next_iss+0x1c>
 80150de:	4b0a      	ldr	r3, [pc, #40]	@ (8015108 <tcp_next_iss+0x38>)
 80150e0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80150e4:	4909      	ldr	r1, [pc, #36]	@ (801510c <tcp_next_iss+0x3c>)
 80150e6:	480a      	ldr	r0, [pc, #40]	@ (8015110 <tcp_next_iss+0x40>)
 80150e8:	f008 fb4e 	bl	801d788 <iprintf>
 80150ec:	4b09      	ldr	r3, [pc, #36]	@ (8015114 <tcp_next_iss+0x44>)
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	4b09      	ldr	r3, [pc, #36]	@ (8015118 <tcp_next_iss+0x48>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4413      	add	r3, r2
 80150f6:	4a07      	ldr	r2, [pc, #28]	@ (8015114 <tcp_next_iss+0x44>)
 80150f8:	6013      	str	r3, [r2, #0]
 80150fa:	4b06      	ldr	r3, [pc, #24]	@ (8015114 <tcp_next_iss+0x44>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	4618      	mov	r0, r3
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	080216b4 	.word	0x080216b4
 801510c:	08021da4 	.word	0x08021da4
 8015110:	080216f8 	.word	0x080216f8
 8015114:	20000080 	.word	0x20000080
 8015118:	2000f3dc 	.word	0x2000f3dc

0801511c <tcp_eff_send_mss_netif>:
 801511c:	b580      	push	{r7, lr}
 801511e:	b086      	sub	sp, #24
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	60b9      	str	r1, [r7, #8]
 8015126:	607a      	str	r2, [r7, #4]
 8015128:	81fb      	strh	r3, [r7, #14]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d106      	bne.n	801513e <tcp_eff_send_mss_netif+0x22>
 8015130:	4b14      	ldr	r3, [pc, #80]	@ (8015184 <tcp_eff_send_mss_netif+0x68>)
 8015132:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015136:	4914      	ldr	r1, [pc, #80]	@ (8015188 <tcp_eff_send_mss_netif+0x6c>)
 8015138:	4814      	ldr	r0, [pc, #80]	@ (801518c <tcp_eff_send_mss_netif+0x70>)
 801513a:	f008 fb25 	bl	801d788 <iprintf>
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d101      	bne.n	8015148 <tcp_eff_send_mss_netif+0x2c>
 8015144:	89fb      	ldrh	r3, [r7, #14]
 8015146:	e019      	b.n	801517c <tcp_eff_send_mss_netif+0x60>
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801514c:	82fb      	strh	r3, [r7, #22]
 801514e:	8afb      	ldrh	r3, [r7, #22]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d012      	beq.n	801517a <tcp_eff_send_mss_netif+0x5e>
 8015154:	2328      	movs	r3, #40	@ 0x28
 8015156:	82bb      	strh	r3, [r7, #20]
 8015158:	8afa      	ldrh	r2, [r7, #22]
 801515a:	8abb      	ldrh	r3, [r7, #20]
 801515c:	429a      	cmp	r2, r3
 801515e:	d904      	bls.n	801516a <tcp_eff_send_mss_netif+0x4e>
 8015160:	8afa      	ldrh	r2, [r7, #22]
 8015162:	8abb      	ldrh	r3, [r7, #20]
 8015164:	1ad3      	subs	r3, r2, r3
 8015166:	b29b      	uxth	r3, r3
 8015168:	e000      	b.n	801516c <tcp_eff_send_mss_netif+0x50>
 801516a:	2300      	movs	r3, #0
 801516c:	827b      	strh	r3, [r7, #18]
 801516e:	8a7a      	ldrh	r2, [r7, #18]
 8015170:	89fb      	ldrh	r3, [r7, #14]
 8015172:	4293      	cmp	r3, r2
 8015174:	bf28      	it	cs
 8015176:	4613      	movcs	r3, r2
 8015178:	81fb      	strh	r3, [r7, #14]
 801517a:	89fb      	ldrh	r3, [r7, #14]
 801517c:	4618      	mov	r0, r3
 801517e:	3718      	adds	r7, #24
 8015180:	46bd      	mov	sp, r7
 8015182:	bd80      	pop	{r7, pc}
 8015184:	080216b4 	.word	0x080216b4
 8015188:	08021dc0 	.word	0x08021dc0
 801518c:	080216f8 	.word	0x080216f8

08015190 <tcp_netif_ip_addr_changed_pcblist>:
 8015190:	b580      	push	{r7, lr}
 8015192:	b084      	sub	sp, #16
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	6039      	str	r1, [r7, #0]
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	60fb      	str	r3, [r7, #12]
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d119      	bne.n	80151d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80151a4:	4b10      	ldr	r3, [pc, #64]	@ (80151e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80151a6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80151aa:	4910      	ldr	r1, [pc, #64]	@ (80151ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80151ac:	4810      	ldr	r0, [pc, #64]	@ (80151f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80151ae:	f008 faeb 	bl	801d788 <iprintf>
 80151b2:	e011      	b.n	80151d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	429a      	cmp	r2, r3
 80151be:	d108      	bne.n	80151d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	60bb      	str	r3, [r7, #8]
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f7fe fd1e 	bl	8013c08 <tcp_abort>
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	60fb      	str	r3, [r7, #12]
 80151d0:	e002      	b.n	80151d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	60fb      	str	r3, [r7, #12]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d1ea      	bne.n	80151b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
 80151de:	bf00      	nop
 80151e0:	bf00      	nop
 80151e2:	3710      	adds	r7, #16
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	080216b4 	.word	0x080216b4
 80151ec:	08021de8 	.word	0x08021de8
 80151f0:	080216f8 	.word	0x080216f8

080151f4 <tcp_netif_ip_addr_changed>:
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d02a      	beq.n	801525a <tcp_netif_ip_addr_changed+0x66>
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d026      	beq.n	801525a <tcp_netif_ip_addr_changed+0x66>
 801520c:	4b15      	ldr	r3, [pc, #84]	@ (8015264 <tcp_netif_ip_addr_changed+0x70>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4619      	mov	r1, r3
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7ff ffbc 	bl	8015190 <tcp_netif_ip_addr_changed_pcblist>
 8015218:	4b13      	ldr	r3, [pc, #76]	@ (8015268 <tcp_netif_ip_addr_changed+0x74>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	4619      	mov	r1, r3
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff ffb6 	bl	8015190 <tcp_netif_ip_addr_changed_pcblist>
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d017      	beq.n	801525a <tcp_netif_ip_addr_changed+0x66>
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d013      	beq.n	801525a <tcp_netif_ip_addr_changed+0x66>
 8015232:	4b0e      	ldr	r3, [pc, #56]	@ (801526c <tcp_netif_ip_addr_changed+0x78>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	60fb      	str	r3, [r7, #12]
 8015238:	e00c      	b.n	8015254 <tcp_netif_ip_addr_changed+0x60>
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	429a      	cmp	r2, r3
 8015244:	d103      	bne.n	801524e <tcp_netif_ip_addr_changed+0x5a>
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	601a      	str	r2, [r3, #0]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	60fb      	str	r3, [r7, #12]
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d1ef      	bne.n	801523a <tcp_netif_ip_addr_changed+0x46>
 801525a:	bf00      	nop
 801525c:	3710      	adds	r7, #16
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}
 8015262:	bf00      	nop
 8015264:	2000f3e8 	.word	0x2000f3e8
 8015268:	2000f3e0 	.word	0x2000f3e0
 801526c:	2000f3e4 	.word	0x2000f3e4

08015270 <tcp_free_ooseq>:
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801527c:	2b00      	cmp	r3, #0
 801527e:	d007      	beq.n	8015290 <tcp_free_ooseq+0x20>
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015284:	4618      	mov	r0, r3
 8015286:	f7ff fb51 	bl	801492c <tcp_segs_free>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2200      	movs	r2, #0
 801528e:	675a      	str	r2, [r3, #116]	@ 0x74
 8015290:	bf00      	nop
 8015292:	3708      	adds	r7, #8
 8015294:	46bd      	mov	sp, r7
 8015296:	bd80      	pop	{r7, pc}

08015298 <tcp_input>:
 8015298:	b590      	push	{r4, r7, lr}
 801529a:	b08d      	sub	sp, #52	@ 0x34
 801529c:	af04      	add	r7, sp, #16
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d105      	bne.n	80152b4 <tcp_input+0x1c>
 80152a8:	4b9b      	ldr	r3, [pc, #620]	@ (8015518 <tcp_input+0x280>)
 80152aa:	2283      	movs	r2, #131	@ 0x83
 80152ac:	499b      	ldr	r1, [pc, #620]	@ (801551c <tcp_input+0x284>)
 80152ae:	489c      	ldr	r0, [pc, #624]	@ (8015520 <tcp_input+0x288>)
 80152b0:	f008 fa6a 	bl	801d788 <iprintf>
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	4a9a      	ldr	r2, [pc, #616]	@ (8015524 <tcp_input+0x28c>)
 80152ba:	6013      	str	r3, [r2, #0]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	895b      	ldrh	r3, [r3, #10]
 80152c0:	2b13      	cmp	r3, #19
 80152c2:	f240 83d1 	bls.w	8015a68 <tcp_input+0x7d0>
 80152c6:	4b98      	ldr	r3, [pc, #608]	@ (8015528 <tcp_input+0x290>)
 80152c8:	695b      	ldr	r3, [r3, #20]
 80152ca:	4a97      	ldr	r2, [pc, #604]	@ (8015528 <tcp_input+0x290>)
 80152cc:	6812      	ldr	r2, [r2, #0]
 80152ce:	4611      	mov	r1, r2
 80152d0:	4618      	mov	r0, r3
 80152d2:	f006 fbc9 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 80152d6:	4603      	mov	r3, r0
 80152d8:	2b00      	cmp	r3, #0
 80152da:	f040 83c7 	bne.w	8015a6c <tcp_input+0x7d4>
 80152de:	4b92      	ldr	r3, [pc, #584]	@ (8015528 <tcp_input+0x290>)
 80152e0:	695b      	ldr	r3, [r3, #20]
 80152e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80152e6:	2be0      	cmp	r3, #224	@ 0xe0
 80152e8:	f000 83c0 	beq.w	8015a6c <tcp_input+0x7d4>
 80152ec:	4b8d      	ldr	r3, [pc, #564]	@ (8015524 <tcp_input+0x28c>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	899b      	ldrh	r3, [r3, #12]
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7fc fa5f 	bl	80117b8 <lwip_htons>
 80152fa:	4603      	mov	r3, r0
 80152fc:	0b1b      	lsrs	r3, r3, #12
 80152fe:	b29b      	uxth	r3, r3
 8015300:	b2db      	uxtb	r3, r3
 8015302:	009b      	lsls	r3, r3, #2
 8015304:	74bb      	strb	r3, [r7, #18]
 8015306:	7cbb      	ldrb	r3, [r7, #18]
 8015308:	2b13      	cmp	r3, #19
 801530a:	f240 83b1 	bls.w	8015a70 <tcp_input+0x7d8>
 801530e:	7cbb      	ldrb	r3, [r7, #18]
 8015310:	b29a      	uxth	r2, r3
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	891b      	ldrh	r3, [r3, #8]
 8015316:	429a      	cmp	r2, r3
 8015318:	f200 83aa 	bhi.w	8015a70 <tcp_input+0x7d8>
 801531c:	7cbb      	ldrb	r3, [r7, #18]
 801531e:	b29b      	uxth	r3, r3
 8015320:	3b14      	subs	r3, #20
 8015322:	b29a      	uxth	r2, r3
 8015324:	4b81      	ldr	r3, [pc, #516]	@ (801552c <tcp_input+0x294>)
 8015326:	801a      	strh	r2, [r3, #0]
 8015328:	4b81      	ldr	r3, [pc, #516]	@ (8015530 <tcp_input+0x298>)
 801532a:	2200      	movs	r2, #0
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	895a      	ldrh	r2, [r3, #10]
 8015332:	7cbb      	ldrb	r3, [r7, #18]
 8015334:	b29b      	uxth	r3, r3
 8015336:	429a      	cmp	r2, r3
 8015338:	d309      	bcc.n	801534e <tcp_input+0xb6>
 801533a:	4b7c      	ldr	r3, [pc, #496]	@ (801552c <tcp_input+0x294>)
 801533c:	881a      	ldrh	r2, [r3, #0]
 801533e:	4b7d      	ldr	r3, [pc, #500]	@ (8015534 <tcp_input+0x29c>)
 8015340:	801a      	strh	r2, [r3, #0]
 8015342:	7cbb      	ldrb	r3, [r7, #18]
 8015344:	4619      	mov	r1, r3
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7fd fdd8 	bl	8012efc <pbuf_remove_header>
 801534c:	e04e      	b.n	80153ec <tcp_input+0x154>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d105      	bne.n	8015362 <tcp_input+0xca>
 8015356:	4b70      	ldr	r3, [pc, #448]	@ (8015518 <tcp_input+0x280>)
 8015358:	22c2      	movs	r2, #194	@ 0xc2
 801535a:	4977      	ldr	r1, [pc, #476]	@ (8015538 <tcp_input+0x2a0>)
 801535c:	4870      	ldr	r0, [pc, #448]	@ (8015520 <tcp_input+0x288>)
 801535e:	f008 fa13 	bl	801d788 <iprintf>
 8015362:	2114      	movs	r1, #20
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f7fd fdc9 	bl	8012efc <pbuf_remove_header>
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	895a      	ldrh	r2, [r3, #10]
 801536e:	4b71      	ldr	r3, [pc, #452]	@ (8015534 <tcp_input+0x29c>)
 8015370:	801a      	strh	r2, [r3, #0]
 8015372:	4b6e      	ldr	r3, [pc, #440]	@ (801552c <tcp_input+0x294>)
 8015374:	881a      	ldrh	r2, [r3, #0]
 8015376:	4b6f      	ldr	r3, [pc, #444]	@ (8015534 <tcp_input+0x29c>)
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	823b      	strh	r3, [r7, #16]
 801537e:	4b6d      	ldr	r3, [pc, #436]	@ (8015534 <tcp_input+0x29c>)
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	4619      	mov	r1, r3
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f7fd fdb9 	bl	8012efc <pbuf_remove_header>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	895b      	ldrh	r3, [r3, #10]
 8015390:	8a3a      	ldrh	r2, [r7, #16]
 8015392:	429a      	cmp	r2, r3
 8015394:	f200 836e 	bhi.w	8015a74 <tcp_input+0x7dc>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	4a64      	ldr	r2, [pc, #400]	@ (8015530 <tcp_input+0x298>)
 80153a0:	6013      	str	r3, [r2, #0]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	8a3a      	ldrh	r2, [r7, #16]
 80153a8:	4611      	mov	r1, r2
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fd fda6 	bl	8012efc <pbuf_remove_header>
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	891a      	ldrh	r2, [r3, #8]
 80153b4:	8a3b      	ldrh	r3, [r7, #16]
 80153b6:	1ad3      	subs	r3, r2, r3
 80153b8:	b29a      	uxth	r2, r3
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	811a      	strh	r2, [r3, #8]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	895b      	ldrh	r3, [r3, #10]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d005      	beq.n	80153d2 <tcp_input+0x13a>
 80153c6:	4b54      	ldr	r3, [pc, #336]	@ (8015518 <tcp_input+0x280>)
 80153c8:	22df      	movs	r2, #223	@ 0xdf
 80153ca:	495c      	ldr	r1, [pc, #368]	@ (801553c <tcp_input+0x2a4>)
 80153cc:	4854      	ldr	r0, [pc, #336]	@ (8015520 <tcp_input+0x288>)
 80153ce:	f008 f9db 	bl	801d788 <iprintf>
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	891a      	ldrh	r2, [r3, #8]
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	891b      	ldrh	r3, [r3, #8]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d005      	beq.n	80153ec <tcp_input+0x154>
 80153e0:	4b4d      	ldr	r3, [pc, #308]	@ (8015518 <tcp_input+0x280>)
 80153e2:	22e0      	movs	r2, #224	@ 0xe0
 80153e4:	4956      	ldr	r1, [pc, #344]	@ (8015540 <tcp_input+0x2a8>)
 80153e6:	484e      	ldr	r0, [pc, #312]	@ (8015520 <tcp_input+0x288>)
 80153e8:	f008 f9ce 	bl	801d788 <iprintf>
 80153ec:	4b4d      	ldr	r3, [pc, #308]	@ (8015524 <tcp_input+0x28c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	4a4b      	ldr	r2, [pc, #300]	@ (8015524 <tcp_input+0x28c>)
 80153f6:	6814      	ldr	r4, [r2, #0]
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7fc f9dd 	bl	80117b8 <lwip_htons>
 80153fe:	4603      	mov	r3, r0
 8015400:	8023      	strh	r3, [r4, #0]
 8015402:	4b48      	ldr	r3, [pc, #288]	@ (8015524 <tcp_input+0x28c>)
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	885b      	ldrh	r3, [r3, #2]
 8015408:	b29b      	uxth	r3, r3
 801540a:	4a46      	ldr	r2, [pc, #280]	@ (8015524 <tcp_input+0x28c>)
 801540c:	6814      	ldr	r4, [r2, #0]
 801540e:	4618      	mov	r0, r3
 8015410:	f7fc f9d2 	bl	80117b8 <lwip_htons>
 8015414:	4603      	mov	r3, r0
 8015416:	8063      	strh	r3, [r4, #2]
 8015418:	4b42      	ldr	r3, [pc, #264]	@ (8015524 <tcp_input+0x28c>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	4a41      	ldr	r2, [pc, #260]	@ (8015524 <tcp_input+0x28c>)
 8015420:	6814      	ldr	r4, [r2, #0]
 8015422:	4618      	mov	r0, r3
 8015424:	f7fc f9dd 	bl	80117e2 <lwip_htonl>
 8015428:	4603      	mov	r3, r0
 801542a:	6063      	str	r3, [r4, #4]
 801542c:	6863      	ldr	r3, [r4, #4]
 801542e:	4a45      	ldr	r2, [pc, #276]	@ (8015544 <tcp_input+0x2ac>)
 8015430:	6013      	str	r3, [r2, #0]
 8015432:	4b3c      	ldr	r3, [pc, #240]	@ (8015524 <tcp_input+0x28c>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	689b      	ldr	r3, [r3, #8]
 8015438:	4a3a      	ldr	r2, [pc, #232]	@ (8015524 <tcp_input+0x28c>)
 801543a:	6814      	ldr	r4, [r2, #0]
 801543c:	4618      	mov	r0, r3
 801543e:	f7fc f9d0 	bl	80117e2 <lwip_htonl>
 8015442:	4603      	mov	r3, r0
 8015444:	60a3      	str	r3, [r4, #8]
 8015446:	68a3      	ldr	r3, [r4, #8]
 8015448:	4a3f      	ldr	r2, [pc, #252]	@ (8015548 <tcp_input+0x2b0>)
 801544a:	6013      	str	r3, [r2, #0]
 801544c:	4b35      	ldr	r3, [pc, #212]	@ (8015524 <tcp_input+0x28c>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	89db      	ldrh	r3, [r3, #14]
 8015452:	b29b      	uxth	r3, r3
 8015454:	4a33      	ldr	r2, [pc, #204]	@ (8015524 <tcp_input+0x28c>)
 8015456:	6814      	ldr	r4, [r2, #0]
 8015458:	4618      	mov	r0, r3
 801545a:	f7fc f9ad 	bl	80117b8 <lwip_htons>
 801545e:	4603      	mov	r3, r0
 8015460:	81e3      	strh	r3, [r4, #14]
 8015462:	4b30      	ldr	r3, [pc, #192]	@ (8015524 <tcp_input+0x28c>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	899b      	ldrh	r3, [r3, #12]
 8015468:	b29b      	uxth	r3, r3
 801546a:	4618      	mov	r0, r3
 801546c:	f7fc f9a4 	bl	80117b8 <lwip_htons>
 8015470:	4603      	mov	r3, r0
 8015472:	b2db      	uxtb	r3, r3
 8015474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015478:	b2da      	uxtb	r2, r3
 801547a:	4b34      	ldr	r3, [pc, #208]	@ (801554c <tcp_input+0x2b4>)
 801547c:	701a      	strb	r2, [r3, #0]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	891a      	ldrh	r2, [r3, #8]
 8015482:	4b33      	ldr	r3, [pc, #204]	@ (8015550 <tcp_input+0x2b8>)
 8015484:	801a      	strh	r2, [r3, #0]
 8015486:	4b31      	ldr	r3, [pc, #196]	@ (801554c <tcp_input+0x2b4>)
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	f003 0303 	and.w	r3, r3, #3
 801548e:	2b00      	cmp	r3, #0
 8015490:	d00c      	beq.n	80154ac <tcp_input+0x214>
 8015492:	4b2f      	ldr	r3, [pc, #188]	@ (8015550 <tcp_input+0x2b8>)
 8015494:	881b      	ldrh	r3, [r3, #0]
 8015496:	3301      	adds	r3, #1
 8015498:	b29a      	uxth	r2, r3
 801549a:	4b2d      	ldr	r3, [pc, #180]	@ (8015550 <tcp_input+0x2b8>)
 801549c:	801a      	strh	r2, [r3, #0]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	891a      	ldrh	r2, [r3, #8]
 80154a2:	4b2b      	ldr	r3, [pc, #172]	@ (8015550 <tcp_input+0x2b8>)
 80154a4:	881b      	ldrh	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	f200 82e6 	bhi.w	8015a78 <tcp_input+0x7e0>
 80154ac:	2300      	movs	r3, #0
 80154ae:	61bb      	str	r3, [r7, #24]
 80154b0:	4b28      	ldr	r3, [pc, #160]	@ (8015554 <tcp_input+0x2bc>)
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	61fb      	str	r3, [r7, #28]
 80154b6:	e09d      	b.n	80155f4 <tcp_input+0x35c>
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	7d1b      	ldrb	r3, [r3, #20]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d105      	bne.n	80154cc <tcp_input+0x234>
 80154c0:	4b15      	ldr	r3, [pc, #84]	@ (8015518 <tcp_input+0x280>)
 80154c2:	22fb      	movs	r2, #251	@ 0xfb
 80154c4:	4924      	ldr	r1, [pc, #144]	@ (8015558 <tcp_input+0x2c0>)
 80154c6:	4816      	ldr	r0, [pc, #88]	@ (8015520 <tcp_input+0x288>)
 80154c8:	f008 f95e 	bl	801d788 <iprintf>
 80154cc:	69fb      	ldr	r3, [r7, #28]
 80154ce:	7d1b      	ldrb	r3, [r3, #20]
 80154d0:	2b0a      	cmp	r3, #10
 80154d2:	d105      	bne.n	80154e0 <tcp_input+0x248>
 80154d4:	4b10      	ldr	r3, [pc, #64]	@ (8015518 <tcp_input+0x280>)
 80154d6:	22fc      	movs	r2, #252	@ 0xfc
 80154d8:	4920      	ldr	r1, [pc, #128]	@ (801555c <tcp_input+0x2c4>)
 80154da:	4811      	ldr	r0, [pc, #68]	@ (8015520 <tcp_input+0x288>)
 80154dc:	f008 f954 	bl	801d788 <iprintf>
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	7d1b      	ldrb	r3, [r3, #20]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	d105      	bne.n	80154f4 <tcp_input+0x25c>
 80154e8:	4b0b      	ldr	r3, [pc, #44]	@ (8015518 <tcp_input+0x280>)
 80154ea:	22fd      	movs	r2, #253	@ 0xfd
 80154ec:	491c      	ldr	r1, [pc, #112]	@ (8015560 <tcp_input+0x2c8>)
 80154ee:	480c      	ldr	r0, [pc, #48]	@ (8015520 <tcp_input+0x288>)
 80154f0:	f008 f94a 	bl	801d788 <iprintf>
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	7a1b      	ldrb	r3, [r3, #8]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d033      	beq.n	8015564 <tcp_input+0x2cc>
 80154fc:	69fb      	ldr	r3, [r7, #28]
 80154fe:	7a1a      	ldrb	r2, [r3, #8]
 8015500:	4b09      	ldr	r3, [pc, #36]	@ (8015528 <tcp_input+0x290>)
 8015502:	685b      	ldr	r3, [r3, #4]
 8015504:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015508:	3301      	adds	r3, #1
 801550a:	b2db      	uxtb	r3, r3
 801550c:	429a      	cmp	r2, r3
 801550e:	d029      	beq.n	8015564 <tcp_input+0x2cc>
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	61bb      	str	r3, [r7, #24]
 8015514:	e06b      	b.n	80155ee <tcp_input+0x356>
 8015516:	bf00      	nop
 8015518:	08021e1c 	.word	0x08021e1c
 801551c:	08021e50 	.word	0x08021e50
 8015520:	08021e68 	.word	0x08021e68
 8015524:	2000f404 	.word	0x2000f404
 8015528:	2000bc88 	.word	0x2000bc88
 801552c:	2000f408 	.word	0x2000f408
 8015530:	2000f40c 	.word	0x2000f40c
 8015534:	2000f40a 	.word	0x2000f40a
 8015538:	08021e90 	.word	0x08021e90
 801553c:	08021ea0 	.word	0x08021ea0
 8015540:	08021eac 	.word	0x08021eac
 8015544:	2000f414 	.word	0x2000f414
 8015548:	2000f418 	.word	0x2000f418
 801554c:	2000f420 	.word	0x2000f420
 8015550:	2000f41e 	.word	0x2000f41e
 8015554:	2000f3e8 	.word	0x2000f3e8
 8015558:	08021ecc 	.word	0x08021ecc
 801555c:	08021ef4 	.word	0x08021ef4
 8015560:	08021f20 	.word	0x08021f20
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	8b1a      	ldrh	r2, [r3, #24]
 8015568:	4b72      	ldr	r3, [pc, #456]	@ (8015734 <tcp_input+0x49c>)
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	881b      	ldrh	r3, [r3, #0]
 801556e:	b29b      	uxth	r3, r3
 8015570:	429a      	cmp	r2, r3
 8015572:	d13a      	bne.n	80155ea <tcp_input+0x352>
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	8ada      	ldrh	r2, [r3, #22]
 8015578:	4b6e      	ldr	r3, [pc, #440]	@ (8015734 <tcp_input+0x49c>)
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	885b      	ldrh	r3, [r3, #2]
 801557e:	b29b      	uxth	r3, r3
 8015580:	429a      	cmp	r2, r3
 8015582:	d132      	bne.n	80155ea <tcp_input+0x352>
 8015584:	69fb      	ldr	r3, [r7, #28]
 8015586:	685a      	ldr	r2, [r3, #4]
 8015588:	4b6b      	ldr	r3, [pc, #428]	@ (8015738 <tcp_input+0x4a0>)
 801558a:	691b      	ldr	r3, [r3, #16]
 801558c:	429a      	cmp	r2, r3
 801558e:	d12c      	bne.n	80155ea <tcp_input+0x352>
 8015590:	69fb      	ldr	r3, [r7, #28]
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	4b68      	ldr	r3, [pc, #416]	@ (8015738 <tcp_input+0x4a0>)
 8015596:	695b      	ldr	r3, [r3, #20]
 8015598:	429a      	cmp	r2, r3
 801559a:	d126      	bne.n	80155ea <tcp_input+0x352>
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	69fa      	ldr	r2, [r7, #28]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d106      	bne.n	80155b4 <tcp_input+0x31c>
 80155a6:	4b65      	ldr	r3, [pc, #404]	@ (801573c <tcp_input+0x4a4>)
 80155a8:	f240 120d 	movw	r2, #269	@ 0x10d
 80155ac:	4964      	ldr	r1, [pc, #400]	@ (8015740 <tcp_input+0x4a8>)
 80155ae:	4865      	ldr	r0, [pc, #404]	@ (8015744 <tcp_input+0x4ac>)
 80155b0:	f008 f8ea 	bl	801d788 <iprintf>
 80155b4:	69bb      	ldr	r3, [r7, #24]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d00a      	beq.n	80155d0 <tcp_input+0x338>
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	68da      	ldr	r2, [r3, #12]
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	60da      	str	r2, [r3, #12]
 80155c2:	4b61      	ldr	r3, [pc, #388]	@ (8015748 <tcp_input+0x4b0>)
 80155c4:	681a      	ldr	r2, [r3, #0]
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	60da      	str	r2, [r3, #12]
 80155ca:	4a5f      	ldr	r2, [pc, #380]	@ (8015748 <tcp_input+0x4b0>)
 80155cc:	69fb      	ldr	r3, [r7, #28]
 80155ce:	6013      	str	r3, [r2, #0]
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	69fa      	ldr	r2, [r7, #28]
 80155d6:	429a      	cmp	r2, r3
 80155d8:	d111      	bne.n	80155fe <tcp_input+0x366>
 80155da:	4b58      	ldr	r3, [pc, #352]	@ (801573c <tcp_input+0x4a4>)
 80155dc:	f240 1215 	movw	r2, #277	@ 0x115
 80155e0:	495a      	ldr	r1, [pc, #360]	@ (801574c <tcp_input+0x4b4>)
 80155e2:	4858      	ldr	r0, [pc, #352]	@ (8015744 <tcp_input+0x4ac>)
 80155e4:	f008 f8d0 	bl	801d788 <iprintf>
 80155e8:	e009      	b.n	80155fe <tcp_input+0x366>
 80155ea:	69fb      	ldr	r3, [r7, #28]
 80155ec:	61bb      	str	r3, [r7, #24]
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	68db      	ldr	r3, [r3, #12]
 80155f2:	61fb      	str	r3, [r7, #28]
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	f47f af5e 	bne.w	80154b8 <tcp_input+0x220>
 80155fc:	e000      	b.n	8015600 <tcp_input+0x368>
 80155fe:	bf00      	nop
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	2b00      	cmp	r3, #0
 8015604:	f040 80aa 	bne.w	801575c <tcp_input+0x4c4>
 8015608:	4b51      	ldr	r3, [pc, #324]	@ (8015750 <tcp_input+0x4b8>)
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	61fb      	str	r3, [r7, #28]
 801560e:	e03f      	b.n	8015690 <tcp_input+0x3f8>
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	7d1b      	ldrb	r3, [r3, #20]
 8015614:	2b0a      	cmp	r3, #10
 8015616:	d006      	beq.n	8015626 <tcp_input+0x38e>
 8015618:	4b48      	ldr	r3, [pc, #288]	@ (801573c <tcp_input+0x4a4>)
 801561a:	f240 121f 	movw	r2, #287	@ 0x11f
 801561e:	494d      	ldr	r1, [pc, #308]	@ (8015754 <tcp_input+0x4bc>)
 8015620:	4848      	ldr	r0, [pc, #288]	@ (8015744 <tcp_input+0x4ac>)
 8015622:	f008 f8b1 	bl	801d788 <iprintf>
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	7a1b      	ldrb	r3, [r3, #8]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d009      	beq.n	8015642 <tcp_input+0x3aa>
 801562e:	69fb      	ldr	r3, [r7, #28]
 8015630:	7a1a      	ldrb	r2, [r3, #8]
 8015632:	4b41      	ldr	r3, [pc, #260]	@ (8015738 <tcp_input+0x4a0>)
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801563a:	3301      	adds	r3, #1
 801563c:	b2db      	uxtb	r3, r3
 801563e:	429a      	cmp	r2, r3
 8015640:	d122      	bne.n	8015688 <tcp_input+0x3f0>
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	8b1a      	ldrh	r2, [r3, #24]
 8015646:	4b3b      	ldr	r3, [pc, #236]	@ (8015734 <tcp_input+0x49c>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	881b      	ldrh	r3, [r3, #0]
 801564c:	b29b      	uxth	r3, r3
 801564e:	429a      	cmp	r2, r3
 8015650:	d11b      	bne.n	801568a <tcp_input+0x3f2>
 8015652:	69fb      	ldr	r3, [r7, #28]
 8015654:	8ada      	ldrh	r2, [r3, #22]
 8015656:	4b37      	ldr	r3, [pc, #220]	@ (8015734 <tcp_input+0x49c>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	885b      	ldrh	r3, [r3, #2]
 801565c:	b29b      	uxth	r3, r3
 801565e:	429a      	cmp	r2, r3
 8015660:	d113      	bne.n	801568a <tcp_input+0x3f2>
 8015662:	69fb      	ldr	r3, [r7, #28]
 8015664:	685a      	ldr	r2, [r3, #4]
 8015666:	4b34      	ldr	r3, [pc, #208]	@ (8015738 <tcp_input+0x4a0>)
 8015668:	691b      	ldr	r3, [r3, #16]
 801566a:	429a      	cmp	r2, r3
 801566c:	d10d      	bne.n	801568a <tcp_input+0x3f2>
 801566e:	69fb      	ldr	r3, [r7, #28]
 8015670:	681a      	ldr	r2, [r3, #0]
 8015672:	4b31      	ldr	r3, [pc, #196]	@ (8015738 <tcp_input+0x4a0>)
 8015674:	695b      	ldr	r3, [r3, #20]
 8015676:	429a      	cmp	r2, r3
 8015678:	d107      	bne.n	801568a <tcp_input+0x3f2>
 801567a:	69f8      	ldr	r0, [r7, #28]
 801567c:	f000 fb56 	bl	8015d2c <tcp_timewait_input>
 8015680:	6878      	ldr	r0, [r7, #4]
 8015682:	f7fd fcc1 	bl	8013008 <pbuf_free>
 8015686:	e1fd      	b.n	8015a84 <tcp_input+0x7ec>
 8015688:	bf00      	nop
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	61fb      	str	r3, [r7, #28]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d1bc      	bne.n	8015610 <tcp_input+0x378>
 8015696:	2300      	movs	r3, #0
 8015698:	61bb      	str	r3, [r7, #24]
 801569a:	4b2f      	ldr	r3, [pc, #188]	@ (8015758 <tcp_input+0x4c0>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	617b      	str	r3, [r7, #20]
 80156a0:	e02a      	b.n	80156f8 <tcp_input+0x460>
 80156a2:	697b      	ldr	r3, [r7, #20]
 80156a4:	7a1b      	ldrb	r3, [r3, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d00c      	beq.n	80156c4 <tcp_input+0x42c>
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	7a1a      	ldrb	r2, [r3, #8]
 80156ae:	4b22      	ldr	r3, [pc, #136]	@ (8015738 <tcp_input+0x4a0>)
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80156b6:	3301      	adds	r3, #1
 80156b8:	b2db      	uxtb	r3, r3
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d002      	beq.n	80156c4 <tcp_input+0x42c>
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	61bb      	str	r3, [r7, #24]
 80156c2:	e016      	b.n	80156f2 <tcp_input+0x45a>
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	8ada      	ldrh	r2, [r3, #22]
 80156c8:	4b1a      	ldr	r3, [pc, #104]	@ (8015734 <tcp_input+0x49c>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	885b      	ldrh	r3, [r3, #2]
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d10c      	bne.n	80156ee <tcp_input+0x456>
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	681a      	ldr	r2, [r3, #0]
 80156d8:	4b17      	ldr	r3, [pc, #92]	@ (8015738 <tcp_input+0x4a0>)
 80156da:	695b      	ldr	r3, [r3, #20]
 80156dc:	429a      	cmp	r2, r3
 80156de:	d00f      	beq.n	8015700 <tcp_input+0x468>
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00d      	beq.n	8015702 <tcp_input+0x46a>
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d009      	beq.n	8015702 <tcp_input+0x46a>
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	61bb      	str	r3, [r7, #24]
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	617b      	str	r3, [r7, #20]
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d1d1      	bne.n	80156a2 <tcp_input+0x40a>
 80156fe:	e000      	b.n	8015702 <tcp_input+0x46a>
 8015700:	bf00      	nop
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d029      	beq.n	801575c <tcp_input+0x4c4>
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d00a      	beq.n	8015724 <tcp_input+0x48c>
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	68da      	ldr	r2, [r3, #12]
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	60da      	str	r2, [r3, #12]
 8015716:	4b10      	ldr	r3, [pc, #64]	@ (8015758 <tcp_input+0x4c0>)
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	60da      	str	r2, [r3, #12]
 801571e:	4a0e      	ldr	r2, [pc, #56]	@ (8015758 <tcp_input+0x4c0>)
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	6013      	str	r3, [r2, #0]
 8015724:	6978      	ldr	r0, [r7, #20]
 8015726:	f000 fa03 	bl	8015b30 <tcp_listen_input>
 801572a:	6878      	ldr	r0, [r7, #4]
 801572c:	f7fd fc6c 	bl	8013008 <pbuf_free>
 8015730:	e1a8      	b.n	8015a84 <tcp_input+0x7ec>
 8015732:	bf00      	nop
 8015734:	2000f404 	.word	0x2000f404
 8015738:	2000bc88 	.word	0x2000bc88
 801573c:	08021e1c 	.word	0x08021e1c
 8015740:	08021f48 	.word	0x08021f48
 8015744:	08021e68 	.word	0x08021e68
 8015748:	2000f3e8 	.word	0x2000f3e8
 801574c:	08021f74 	.word	0x08021f74
 8015750:	2000f3ec 	.word	0x2000f3ec
 8015754:	08021fa0 	.word	0x08021fa0
 8015758:	2000f3e4 	.word	0x2000f3e4
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	2b00      	cmp	r3, #0
 8015760:	f000 8158 	beq.w	8015a14 <tcp_input+0x77c>
 8015764:	4b95      	ldr	r3, [pc, #596]	@ (80159bc <tcp_input+0x724>)
 8015766:	2200      	movs	r2, #0
 8015768:	601a      	str	r2, [r3, #0]
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	891a      	ldrh	r2, [r3, #8]
 801576e:	4b93      	ldr	r3, [pc, #588]	@ (80159bc <tcp_input+0x724>)
 8015770:	811a      	strh	r2, [r3, #8]
 8015772:	4a92      	ldr	r2, [pc, #584]	@ (80159bc <tcp_input+0x724>)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	6053      	str	r3, [r2, #4]
 8015778:	4b91      	ldr	r3, [pc, #580]	@ (80159c0 <tcp_input+0x728>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a8f      	ldr	r2, [pc, #572]	@ (80159bc <tcp_input+0x724>)
 801577e:	60d3      	str	r3, [r2, #12]
 8015780:	4b90      	ldr	r3, [pc, #576]	@ (80159c4 <tcp_input+0x72c>)
 8015782:	2200      	movs	r2, #0
 8015784:	601a      	str	r2, [r3, #0]
 8015786:	4b90      	ldr	r3, [pc, #576]	@ (80159c8 <tcp_input+0x730>)
 8015788:	2200      	movs	r2, #0
 801578a:	701a      	strb	r2, [r3, #0]
 801578c:	4b8f      	ldr	r3, [pc, #572]	@ (80159cc <tcp_input+0x734>)
 801578e:	2200      	movs	r2, #0
 8015790:	801a      	strh	r2, [r3, #0]
 8015792:	4b8f      	ldr	r3, [pc, #572]	@ (80159d0 <tcp_input+0x738>)
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	f003 0308 	and.w	r3, r3, #8
 801579a:	2b00      	cmp	r3, #0
 801579c:	d006      	beq.n	80157ac <tcp_input+0x514>
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	7b5b      	ldrb	r3, [r3, #13]
 80157a2:	f043 0301 	orr.w	r3, r3, #1
 80157a6:	b2da      	uxtb	r2, r3
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	735a      	strb	r2, [r3, #13]
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d017      	beq.n	80157e4 <tcp_input+0x54c>
 80157b4:	69f8      	ldr	r0, [r7, #28]
 80157b6:	f7ff f83d 	bl	8014834 <tcp_process_refused_data>
 80157ba:	4603      	mov	r3, r0
 80157bc:	f113 0f0d 	cmn.w	r3, #13
 80157c0:	d007      	beq.n	80157d2 <tcp_input+0x53a>
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00c      	beq.n	80157e4 <tcp_input+0x54c>
 80157ca:	4b82      	ldr	r3, [pc, #520]	@ (80159d4 <tcp_input+0x73c>)
 80157cc:	881b      	ldrh	r3, [r3, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d008      	beq.n	80157e4 <tcp_input+0x54c>
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	f040 80e3 	bne.w	80159a2 <tcp_input+0x70a>
 80157dc:	69f8      	ldr	r0, [r7, #28]
 80157de:	f003 fdff 	bl	80193e0 <tcp_send_empty_ack>
 80157e2:	e0de      	b.n	80159a2 <tcp_input+0x70a>
 80157e4:	4a7c      	ldr	r2, [pc, #496]	@ (80159d8 <tcp_input+0x740>)
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	6013      	str	r3, [r2, #0]
 80157ea:	69f8      	ldr	r0, [r7, #28]
 80157ec:	f000 fb18 	bl	8015e20 <tcp_process>
 80157f0:	4603      	mov	r3, r0
 80157f2:	74fb      	strb	r3, [r7, #19]
 80157f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157f8:	f113 0f0d 	cmn.w	r3, #13
 80157fc:	f000 80d3 	beq.w	80159a6 <tcp_input+0x70e>
 8015800:	4b71      	ldr	r3, [pc, #452]	@ (80159c8 <tcp_input+0x730>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	f003 0308 	and.w	r3, r3, #8
 8015808:	2b00      	cmp	r3, #0
 801580a:	d015      	beq.n	8015838 <tcp_input+0x5a0>
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015812:	2b00      	cmp	r3, #0
 8015814:	d008      	beq.n	8015828 <tcp_input+0x590>
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801581c:	69fa      	ldr	r2, [r7, #28]
 801581e:	6912      	ldr	r2, [r2, #16]
 8015820:	f06f 010d 	mvn.w	r1, #13
 8015824:	4610      	mov	r0, r2
 8015826:	4798      	blx	r3
 8015828:	69f9      	ldr	r1, [r7, #28]
 801582a:	486c      	ldr	r0, [pc, #432]	@ (80159dc <tcp_input+0x744>)
 801582c:	f7ff fbbc 	bl	8014fa8 <tcp_pcb_remove>
 8015830:	69f8      	ldr	r0, [r7, #28]
 8015832:	f7fd fea5 	bl	8013580 <tcp_free>
 8015836:	e0da      	b.n	80159ee <tcp_input+0x756>
 8015838:	2300      	movs	r3, #0
 801583a:	74fb      	strb	r3, [r7, #19]
 801583c:	4b63      	ldr	r3, [pc, #396]	@ (80159cc <tcp_input+0x734>)
 801583e:	881b      	ldrh	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d01d      	beq.n	8015880 <tcp_input+0x5e8>
 8015844:	4b61      	ldr	r3, [pc, #388]	@ (80159cc <tcp_input+0x734>)
 8015846:	881b      	ldrh	r3, [r3, #0]
 8015848:	81fb      	strh	r3, [r7, #14]
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015850:	2b00      	cmp	r3, #0
 8015852:	d00a      	beq.n	801586a <tcp_input+0x5d2>
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801585a:	69fa      	ldr	r2, [r7, #28]
 801585c:	6910      	ldr	r0, [r2, #16]
 801585e:	89fa      	ldrh	r2, [r7, #14]
 8015860:	69f9      	ldr	r1, [r7, #28]
 8015862:	4798      	blx	r3
 8015864:	4603      	mov	r3, r0
 8015866:	74fb      	strb	r3, [r7, #19]
 8015868:	e001      	b.n	801586e <tcp_input+0x5d6>
 801586a:	2300      	movs	r3, #0
 801586c:	74fb      	strb	r3, [r7, #19]
 801586e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015872:	f113 0f0d 	cmn.w	r3, #13
 8015876:	f000 8098 	beq.w	80159aa <tcp_input+0x712>
 801587a:	4b54      	ldr	r3, [pc, #336]	@ (80159cc <tcp_input+0x734>)
 801587c:	2200      	movs	r2, #0
 801587e:	801a      	strh	r2, [r3, #0]
 8015880:	69f8      	ldr	r0, [r7, #28]
 8015882:	f000 f915 	bl	8015ab0 <tcp_input_delayed_close>
 8015886:	4603      	mov	r3, r0
 8015888:	2b00      	cmp	r3, #0
 801588a:	f040 8090 	bne.w	80159ae <tcp_input+0x716>
 801588e:	4b4d      	ldr	r3, [pc, #308]	@ (80159c4 <tcp_input+0x72c>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d041      	beq.n	801591a <tcp_input+0x682>
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801589a:	2b00      	cmp	r3, #0
 801589c:	d006      	beq.n	80158ac <tcp_input+0x614>
 801589e:	4b50      	ldr	r3, [pc, #320]	@ (80159e0 <tcp_input+0x748>)
 80158a0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80158a4:	494f      	ldr	r1, [pc, #316]	@ (80159e4 <tcp_input+0x74c>)
 80158a6:	4850      	ldr	r0, [pc, #320]	@ (80159e8 <tcp_input+0x750>)
 80158a8:	f007 ff6e 	bl	801d788 <iprintf>
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	8b5b      	ldrh	r3, [r3, #26]
 80158b0:	f003 0310 	and.w	r3, r3, #16
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d008      	beq.n	80158ca <tcp_input+0x632>
 80158b8:	4b42      	ldr	r3, [pc, #264]	@ (80159c4 <tcp_input+0x72c>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4618      	mov	r0, r3
 80158be:	f7fd fba3 	bl	8013008 <pbuf_free>
 80158c2:	69f8      	ldr	r0, [r7, #28]
 80158c4:	f7fe f9a0 	bl	8013c08 <tcp_abort>
 80158c8:	e091      	b.n	80159ee <tcp_input+0x756>
 80158ca:	69fb      	ldr	r3, [r7, #28]
 80158cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d00c      	beq.n	80158ee <tcp_input+0x656>
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	6918      	ldr	r0, [r3, #16]
 80158de:	4b39      	ldr	r3, [pc, #228]	@ (80159c4 <tcp_input+0x72c>)
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	2300      	movs	r3, #0
 80158e4:	69f9      	ldr	r1, [r7, #28]
 80158e6:	47a0      	blx	r4
 80158e8:	4603      	mov	r3, r0
 80158ea:	74fb      	strb	r3, [r7, #19]
 80158ec:	e008      	b.n	8015900 <tcp_input+0x668>
 80158ee:	4b35      	ldr	r3, [pc, #212]	@ (80159c4 <tcp_input+0x72c>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	2300      	movs	r3, #0
 80158f4:	69f9      	ldr	r1, [r7, #28]
 80158f6:	2000      	movs	r0, #0
 80158f8:	f7ff f890 	bl	8014a1c <tcp_recv_null>
 80158fc:	4603      	mov	r3, r0
 80158fe:	74fb      	strb	r3, [r7, #19]
 8015900:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015904:	f113 0f0d 	cmn.w	r3, #13
 8015908:	d053      	beq.n	80159b2 <tcp_input+0x71a>
 801590a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d003      	beq.n	801591a <tcp_input+0x682>
 8015912:	4b2c      	ldr	r3, [pc, #176]	@ (80159c4 <tcp_input+0x72c>)
 8015914:	681a      	ldr	r2, [r3, #0]
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	679a      	str	r2, [r3, #120]	@ 0x78
 801591a:	4b2b      	ldr	r3, [pc, #172]	@ (80159c8 <tcp_input+0x730>)
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	f003 0320 	and.w	r3, r3, #32
 8015922:	2b00      	cmp	r3, #0
 8015924:	d030      	beq.n	8015988 <tcp_input+0x6f0>
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801592a:	2b00      	cmp	r3, #0
 801592c:	d009      	beq.n	8015942 <tcp_input+0x6aa>
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015932:	7b5a      	ldrb	r2, [r3, #13]
 8015934:	69fb      	ldr	r3, [r7, #28]
 8015936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015938:	f042 0220 	orr.w	r2, r2, #32
 801593c:	b2d2      	uxtb	r2, r2
 801593e:	735a      	strb	r2, [r3, #13]
 8015940:	e022      	b.n	8015988 <tcp_input+0x6f0>
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015946:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801594a:	d005      	beq.n	8015958 <tcp_input+0x6c0>
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015950:	3301      	adds	r3, #1
 8015952:	b29a      	uxth	r2, r3
 8015954:	69fb      	ldr	r3, [r7, #28]
 8015956:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015958:	69fb      	ldr	r3, [r7, #28]
 801595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00b      	beq.n	801597a <tcp_input+0x6e2>
 8015962:	69fb      	ldr	r3, [r7, #28]
 8015964:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015968:	69fb      	ldr	r3, [r7, #28]
 801596a:	6918      	ldr	r0, [r3, #16]
 801596c:	2300      	movs	r3, #0
 801596e:	2200      	movs	r2, #0
 8015970:	69f9      	ldr	r1, [r7, #28]
 8015972:	47a0      	blx	r4
 8015974:	4603      	mov	r3, r0
 8015976:	74fb      	strb	r3, [r7, #19]
 8015978:	e001      	b.n	801597e <tcp_input+0x6e6>
 801597a:	2300      	movs	r3, #0
 801597c:	74fb      	strb	r3, [r7, #19]
 801597e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015982:	f113 0f0d 	cmn.w	r3, #13
 8015986:	d016      	beq.n	80159b6 <tcp_input+0x71e>
 8015988:	4b13      	ldr	r3, [pc, #76]	@ (80159d8 <tcp_input+0x740>)
 801598a:	2200      	movs	r2, #0
 801598c:	601a      	str	r2, [r3, #0]
 801598e:	69f8      	ldr	r0, [r7, #28]
 8015990:	f000 f88e 	bl	8015ab0 <tcp_input_delayed_close>
 8015994:	4603      	mov	r3, r0
 8015996:	2b00      	cmp	r3, #0
 8015998:	d128      	bne.n	80159ec <tcp_input+0x754>
 801599a:	69f8      	ldr	r0, [r7, #28]
 801599c:	f002 ff1a 	bl	80187d4 <tcp_output>
 80159a0:	e025      	b.n	80159ee <tcp_input+0x756>
 80159a2:	bf00      	nop
 80159a4:	e023      	b.n	80159ee <tcp_input+0x756>
 80159a6:	bf00      	nop
 80159a8:	e021      	b.n	80159ee <tcp_input+0x756>
 80159aa:	bf00      	nop
 80159ac:	e01f      	b.n	80159ee <tcp_input+0x756>
 80159ae:	bf00      	nop
 80159b0:	e01d      	b.n	80159ee <tcp_input+0x756>
 80159b2:	bf00      	nop
 80159b4:	e01b      	b.n	80159ee <tcp_input+0x756>
 80159b6:	bf00      	nop
 80159b8:	e019      	b.n	80159ee <tcp_input+0x756>
 80159ba:	bf00      	nop
 80159bc:	2000f3f4 	.word	0x2000f3f4
 80159c0:	2000f404 	.word	0x2000f404
 80159c4:	2000f424 	.word	0x2000f424
 80159c8:	2000f421 	.word	0x2000f421
 80159cc:	2000f41c 	.word	0x2000f41c
 80159d0:	2000f420 	.word	0x2000f420
 80159d4:	2000f41e 	.word	0x2000f41e
 80159d8:	2000f428 	.word	0x2000f428
 80159dc:	2000f3e8 	.word	0x2000f3e8
 80159e0:	08021e1c 	.word	0x08021e1c
 80159e4:	08021fd0 	.word	0x08021fd0
 80159e8:	08021e68 	.word	0x08021e68
 80159ec:	bf00      	nop
 80159ee:	4b27      	ldr	r3, [pc, #156]	@ (8015a8c <tcp_input+0x7f4>)
 80159f0:	2200      	movs	r2, #0
 80159f2:	601a      	str	r2, [r3, #0]
 80159f4:	4b26      	ldr	r3, [pc, #152]	@ (8015a90 <tcp_input+0x7f8>)
 80159f6:	2200      	movs	r2, #0
 80159f8:	601a      	str	r2, [r3, #0]
 80159fa:	4b26      	ldr	r3, [pc, #152]	@ (8015a94 <tcp_input+0x7fc>)
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d03f      	beq.n	8015a82 <tcp_input+0x7ea>
 8015a02:	4b24      	ldr	r3, [pc, #144]	@ (8015a94 <tcp_input+0x7fc>)
 8015a04:	685b      	ldr	r3, [r3, #4]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7fd fafe 	bl	8013008 <pbuf_free>
 8015a0c:	4b21      	ldr	r3, [pc, #132]	@ (8015a94 <tcp_input+0x7fc>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	605a      	str	r2, [r3, #4]
 8015a12:	e036      	b.n	8015a82 <tcp_input+0x7ea>
 8015a14:	4b20      	ldr	r3, [pc, #128]	@ (8015a98 <tcp_input+0x800>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	899b      	ldrh	r3, [r3, #12]
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	f7fb fecb 	bl	80117b8 <lwip_htons>
 8015a22:	4603      	mov	r3, r0
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	f003 0304 	and.w	r3, r3, #4
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d118      	bne.n	8015a60 <tcp_input+0x7c8>
 8015a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8015a9c <tcp_input+0x804>)
 8015a30:	6819      	ldr	r1, [r3, #0]
 8015a32:	4b1b      	ldr	r3, [pc, #108]	@ (8015aa0 <tcp_input+0x808>)
 8015a34:	881b      	ldrh	r3, [r3, #0]
 8015a36:	461a      	mov	r2, r3
 8015a38:	4b1a      	ldr	r3, [pc, #104]	@ (8015aa4 <tcp_input+0x80c>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	18d0      	adds	r0, r2, r3
 8015a3e:	4b16      	ldr	r3, [pc, #88]	@ (8015a98 <tcp_input+0x800>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	885b      	ldrh	r3, [r3, #2]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	4a14      	ldr	r2, [pc, #80]	@ (8015a98 <tcp_input+0x800>)
 8015a48:	6812      	ldr	r2, [r2, #0]
 8015a4a:	8812      	ldrh	r2, [r2, #0]
 8015a4c:	b292      	uxth	r2, r2
 8015a4e:	9202      	str	r2, [sp, #8]
 8015a50:	9301      	str	r3, [sp, #4]
 8015a52:	4b15      	ldr	r3, [pc, #84]	@ (8015aa8 <tcp_input+0x810>)
 8015a54:	9300      	str	r3, [sp, #0]
 8015a56:	4b15      	ldr	r3, [pc, #84]	@ (8015aac <tcp_input+0x814>)
 8015a58:	4602      	mov	r2, r0
 8015a5a:	2000      	movs	r0, #0
 8015a5c:	f003 fc6e 	bl	801933c <tcp_rst>
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f7fd fad1 	bl	8013008 <pbuf_free>
 8015a66:	e00c      	b.n	8015a82 <tcp_input+0x7ea>
 8015a68:	bf00      	nop
 8015a6a:	e006      	b.n	8015a7a <tcp_input+0x7e2>
 8015a6c:	bf00      	nop
 8015a6e:	e004      	b.n	8015a7a <tcp_input+0x7e2>
 8015a70:	bf00      	nop
 8015a72:	e002      	b.n	8015a7a <tcp_input+0x7e2>
 8015a74:	bf00      	nop
 8015a76:	e000      	b.n	8015a7a <tcp_input+0x7e2>
 8015a78:	bf00      	nop
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f7fd fac4 	bl	8013008 <pbuf_free>
 8015a80:	e000      	b.n	8015a84 <tcp_input+0x7ec>
 8015a82:	bf00      	nop
 8015a84:	3724      	adds	r7, #36	@ 0x24
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd90      	pop	{r4, r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	2000f428 	.word	0x2000f428
 8015a90:	2000f424 	.word	0x2000f424
 8015a94:	2000f3f4 	.word	0x2000f3f4
 8015a98:	2000f404 	.word	0x2000f404
 8015a9c:	2000f418 	.word	0x2000f418
 8015aa0:	2000f41e 	.word	0x2000f41e
 8015aa4:	2000f414 	.word	0x2000f414
 8015aa8:	2000bc98 	.word	0x2000bc98
 8015aac:	2000bc9c 	.word	0x2000bc9c

08015ab0 <tcp_input_delayed_close>:
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d106      	bne.n	8015acc <tcp_input_delayed_close+0x1c>
 8015abe:	4b17      	ldr	r3, [pc, #92]	@ (8015b1c <tcp_input_delayed_close+0x6c>)
 8015ac0:	f240 225a 	movw	r2, #602	@ 0x25a
 8015ac4:	4916      	ldr	r1, [pc, #88]	@ (8015b20 <tcp_input_delayed_close+0x70>)
 8015ac6:	4817      	ldr	r0, [pc, #92]	@ (8015b24 <tcp_input_delayed_close+0x74>)
 8015ac8:	f007 fe5e 	bl	801d788 <iprintf>
 8015acc:	4b16      	ldr	r3, [pc, #88]	@ (8015b28 <tcp_input_delayed_close+0x78>)
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	f003 0310 	and.w	r3, r3, #16
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d01c      	beq.n	8015b12 <tcp_input_delayed_close+0x62>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	8b5b      	ldrh	r3, [r3, #26]
 8015adc:	f003 0310 	and.w	r3, r3, #16
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d10d      	bne.n	8015b00 <tcp_input_delayed_close+0x50>
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d008      	beq.n	8015b00 <tcp_input_delayed_close+0x50>
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	6912      	ldr	r2, [r2, #16]
 8015af8:	f06f 010e 	mvn.w	r1, #14
 8015afc:	4610      	mov	r0, r2
 8015afe:	4798      	blx	r3
 8015b00:	6879      	ldr	r1, [r7, #4]
 8015b02:	480a      	ldr	r0, [pc, #40]	@ (8015b2c <tcp_input_delayed_close+0x7c>)
 8015b04:	f7ff fa50 	bl	8014fa8 <tcp_pcb_remove>
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f7fd fd39 	bl	8013580 <tcp_free>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e000      	b.n	8015b14 <tcp_input_delayed_close+0x64>
 8015b12:	2300      	movs	r3, #0
 8015b14:	4618      	mov	r0, r3
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	08021e1c 	.word	0x08021e1c
 8015b20:	08021fec 	.word	0x08021fec
 8015b24:	08021e68 	.word	0x08021e68
 8015b28:	2000f421 	.word	0x2000f421
 8015b2c:	2000f3e8 	.word	0x2000f3e8

08015b30 <tcp_listen_input>:
 8015b30:	b590      	push	{r4, r7, lr}
 8015b32:	b08b      	sub	sp, #44	@ 0x2c
 8015b34:	af04      	add	r7, sp, #16
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	4b6f      	ldr	r3, [pc, #444]	@ (8015cf8 <tcp_listen_input+0x1c8>)
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	f003 0304 	and.w	r3, r3, #4
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	f040 80d2 	bne.w	8015cea <tcp_listen_input+0x1ba>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d106      	bne.n	8015b5a <tcp_listen_input+0x2a>
 8015b4c:	4b6b      	ldr	r3, [pc, #428]	@ (8015cfc <tcp_listen_input+0x1cc>)
 8015b4e:	f240 2281 	movw	r2, #641	@ 0x281
 8015b52:	496b      	ldr	r1, [pc, #428]	@ (8015d00 <tcp_listen_input+0x1d0>)
 8015b54:	486b      	ldr	r0, [pc, #428]	@ (8015d04 <tcp_listen_input+0x1d4>)
 8015b56:	f007 fe17 	bl	801d788 <iprintf>
 8015b5a:	4b67      	ldr	r3, [pc, #412]	@ (8015cf8 <tcp_listen_input+0x1c8>)
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	f003 0310 	and.w	r3, r3, #16
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d019      	beq.n	8015b9a <tcp_listen_input+0x6a>
 8015b66:	4b68      	ldr	r3, [pc, #416]	@ (8015d08 <tcp_listen_input+0x1d8>)
 8015b68:	6819      	ldr	r1, [r3, #0]
 8015b6a:	4b68      	ldr	r3, [pc, #416]	@ (8015d0c <tcp_listen_input+0x1dc>)
 8015b6c:	881b      	ldrh	r3, [r3, #0]
 8015b6e:	461a      	mov	r2, r3
 8015b70:	4b67      	ldr	r3, [pc, #412]	@ (8015d10 <tcp_listen_input+0x1e0>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	18d0      	adds	r0, r2, r3
 8015b76:	4b67      	ldr	r3, [pc, #412]	@ (8015d14 <tcp_listen_input+0x1e4>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	885b      	ldrh	r3, [r3, #2]
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	4a65      	ldr	r2, [pc, #404]	@ (8015d14 <tcp_listen_input+0x1e4>)
 8015b80:	6812      	ldr	r2, [r2, #0]
 8015b82:	8812      	ldrh	r2, [r2, #0]
 8015b84:	b292      	uxth	r2, r2
 8015b86:	9202      	str	r2, [sp, #8]
 8015b88:	9301      	str	r3, [sp, #4]
 8015b8a:	4b63      	ldr	r3, [pc, #396]	@ (8015d18 <tcp_listen_input+0x1e8>)
 8015b8c:	9300      	str	r3, [sp, #0]
 8015b8e:	4b63      	ldr	r3, [pc, #396]	@ (8015d1c <tcp_listen_input+0x1ec>)
 8015b90:	4602      	mov	r2, r0
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f003 fbd2 	bl	801933c <tcp_rst>
 8015b98:	e0a9      	b.n	8015cee <tcp_listen_input+0x1be>
 8015b9a:	4b57      	ldr	r3, [pc, #348]	@ (8015cf8 <tcp_listen_input+0x1c8>)
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	f003 0302 	and.w	r3, r3, #2
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f000 80a3 	beq.w	8015cee <tcp_listen_input+0x1be>
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	7d5b      	ldrb	r3, [r3, #21]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7ff f859 	bl	8014c64 <tcp_alloc>
 8015bb2:	6178      	str	r0, [r7, #20]
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d111      	bne.n	8015bde <tcp_listen_input+0xae>
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	699b      	ldr	r3, [r3, #24]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d00a      	beq.n	8015bd8 <tcp_listen_input+0xa8>
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	699b      	ldr	r3, [r3, #24]
 8015bc6:	687a      	ldr	r2, [r7, #4]
 8015bc8:	6910      	ldr	r0, [r2, #16]
 8015bca:	f04f 32ff 	mov.w	r2, #4294967295
 8015bce:	2100      	movs	r1, #0
 8015bd0:	4798      	blx	r3
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	73bb      	strb	r3, [r7, #14]
 8015bd6:	e08b      	b.n	8015cf0 <tcp_listen_input+0x1c0>
 8015bd8:	23f0      	movs	r3, #240	@ 0xf0
 8015bda:	73bb      	strb	r3, [r7, #14]
 8015bdc:	e088      	b.n	8015cf0 <tcp_listen_input+0x1c0>
 8015bde:	4b50      	ldr	r3, [pc, #320]	@ (8015d20 <tcp_listen_input+0x1f0>)
 8015be0:	695a      	ldr	r2, [r3, #20]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	601a      	str	r2, [r3, #0]
 8015be6:	4b4e      	ldr	r3, [pc, #312]	@ (8015d20 <tcp_listen_input+0x1f0>)
 8015be8:	691a      	ldr	r2, [r3, #16]
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	605a      	str	r2, [r3, #4]
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	8ada      	ldrh	r2, [r3, #22]
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	82da      	strh	r2, [r3, #22]
 8015bf6:	4b47      	ldr	r3, [pc, #284]	@ (8015d14 <tcp_listen_input+0x1e4>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	881b      	ldrh	r3, [r3, #0]
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	831a      	strh	r2, [r3, #24]
 8015c02:	697b      	ldr	r3, [r7, #20]
 8015c04:	2203      	movs	r2, #3
 8015c06:	751a      	strb	r2, [r3, #20]
 8015c08:	4b41      	ldr	r3, [pc, #260]	@ (8015d10 <tcp_listen_input+0x1e0>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	1c5a      	adds	r2, r3, #1
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	625a      	str	r2, [r3, #36]	@ 0x24
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015c1a:	6978      	ldr	r0, [r7, #20]
 8015c1c:	f7ff fa58 	bl	80150d0 <tcp_next_iss>
 8015c20:	6138      	str	r0, [r7, #16]
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	693a      	ldr	r2, [r7, #16]
 8015c26:	659a      	str	r2, [r3, #88]	@ 0x58
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	693a      	ldr	r2, [r7, #16]
 8015c2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	693a      	ldr	r2, [r7, #16]
 8015c32:	645a      	str	r2, [r3, #68]	@ 0x44
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	693a      	ldr	r2, [r7, #16]
 8015c38:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015c3a:	4b35      	ldr	r3, [pc, #212]	@ (8015d10 <tcp_listen_input+0x1e0>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	1e5a      	subs	r2, r3, #1
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	655a      	str	r2, [r3, #84]	@ 0x54
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	691a      	ldr	r2, [r3, #16]
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	611a      	str	r2, [r3, #16]
 8015c4c:	697b      	ldr	r3, [r7, #20]
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	7a5b      	ldrb	r3, [r3, #9]
 8015c56:	f003 030c 	and.w	r3, r3, #12
 8015c5a:	b2da      	uxtb	r2, r3
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	725a      	strb	r2, [r3, #9]
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	7a1a      	ldrb	r2, [r3, #8]
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	721a      	strb	r2, [r3, #8]
 8015c68:	4b2e      	ldr	r3, [pc, #184]	@ (8015d24 <tcp_listen_input+0x1f4>)
 8015c6a:	681a      	ldr	r2, [r3, #0]
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	60da      	str	r2, [r3, #12]
 8015c70:	4a2c      	ldr	r2, [pc, #176]	@ (8015d24 <tcp_listen_input+0x1f4>)
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	6013      	str	r3, [r2, #0]
 8015c76:	f003 fd23 	bl	80196c0 <tcp_timer_needed>
 8015c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8015d28 <tcp_listen_input+0x1f8>)
 8015c7c:	2201      	movs	r2, #1
 8015c7e:	701a      	strb	r2, [r3, #0]
 8015c80:	6978      	ldr	r0, [r7, #20]
 8015c82:	f001 fd8b 	bl	801779c <tcp_parseopt>
 8015c86:	4b23      	ldr	r3, [pc, #140]	@ (8015d14 <tcp_listen_input+0x1e4>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	89db      	ldrh	r3, [r3, #14]
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	3304      	adds	r3, #4
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f005 fc47 	bl	801b53c <ip4_route>
 8015cae:	4601      	mov	r1, r0
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	3304      	adds	r3, #4
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	f7ff fa30 	bl	801511c <tcp_eff_send_mss_netif>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	697b      	ldr	r3, [r7, #20]
 8015cc2:	865a      	strh	r2, [r3, #50]	@ 0x32
 8015cc4:	2112      	movs	r1, #18
 8015cc6:	6978      	ldr	r0, [r7, #20]
 8015cc8:	f002 fc96 	bl	80185f8 <tcp_enqueue_flags>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	73fb      	strb	r3, [r7, #15]
 8015cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d004      	beq.n	8015ce2 <tcp_listen_input+0x1b2>
 8015cd8:	2100      	movs	r1, #0
 8015cda:	6978      	ldr	r0, [r7, #20]
 8015cdc:	f7fd fed6 	bl	8013a8c <tcp_abandon>
 8015ce0:	e006      	b.n	8015cf0 <tcp_listen_input+0x1c0>
 8015ce2:	6978      	ldr	r0, [r7, #20]
 8015ce4:	f002 fd76 	bl	80187d4 <tcp_output>
 8015ce8:	e001      	b.n	8015cee <tcp_listen_input+0x1be>
 8015cea:	bf00      	nop
 8015cec:	e000      	b.n	8015cf0 <tcp_listen_input+0x1c0>
 8015cee:	bf00      	nop
 8015cf0:	371c      	adds	r7, #28
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd90      	pop	{r4, r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	2000f420 	.word	0x2000f420
 8015cfc:	08021e1c 	.word	0x08021e1c
 8015d00:	08022014 	.word	0x08022014
 8015d04:	08021e68 	.word	0x08021e68
 8015d08:	2000f418 	.word	0x2000f418
 8015d0c:	2000f41e 	.word	0x2000f41e
 8015d10:	2000f414 	.word	0x2000f414
 8015d14:	2000f404 	.word	0x2000f404
 8015d18:	2000bc98 	.word	0x2000bc98
 8015d1c:	2000bc9c 	.word	0x2000bc9c
 8015d20:	2000bc88 	.word	0x2000bc88
 8015d24:	2000f3e8 	.word	0x2000f3e8
 8015d28:	2000f3f0 	.word	0x2000f3f0

08015d2c <tcp_timewait_input>:
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b086      	sub	sp, #24
 8015d30:	af04      	add	r7, sp, #16
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	4b2f      	ldr	r3, [pc, #188]	@ (8015df4 <tcp_timewait_input+0xc8>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	f003 0304 	and.w	r3, r3, #4
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d153      	bne.n	8015de8 <tcp_timewait_input+0xbc>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d106      	bne.n	8015d54 <tcp_timewait_input+0x28>
 8015d46:	4b2c      	ldr	r3, [pc, #176]	@ (8015df8 <tcp_timewait_input+0xcc>)
 8015d48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015d4c:	492b      	ldr	r1, [pc, #172]	@ (8015dfc <tcp_timewait_input+0xd0>)
 8015d4e:	482c      	ldr	r0, [pc, #176]	@ (8015e00 <tcp_timewait_input+0xd4>)
 8015d50:	f007 fd1a 	bl	801d788 <iprintf>
 8015d54:	4b27      	ldr	r3, [pc, #156]	@ (8015df4 <tcp_timewait_input+0xc8>)
 8015d56:	781b      	ldrb	r3, [r3, #0]
 8015d58:	f003 0302 	and.w	r3, r3, #2
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d02a      	beq.n	8015db6 <tcp_timewait_input+0x8a>
 8015d60:	4b28      	ldr	r3, [pc, #160]	@ (8015e04 <tcp_timewait_input+0xd8>)
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d68:	1ad3      	subs	r3, r2, r3
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	db2d      	blt.n	8015dca <tcp_timewait_input+0x9e>
 8015d6e:	4b25      	ldr	r3, [pc, #148]	@ (8015e04 <tcp_timewait_input+0xd8>)
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d76:	6879      	ldr	r1, [r7, #4]
 8015d78:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d7a:	440b      	add	r3, r1
 8015d7c:	1ad3      	subs	r3, r2, r3
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	dc23      	bgt.n	8015dca <tcp_timewait_input+0x9e>
 8015d82:	4b21      	ldr	r3, [pc, #132]	@ (8015e08 <tcp_timewait_input+0xdc>)
 8015d84:	6819      	ldr	r1, [r3, #0]
 8015d86:	4b21      	ldr	r3, [pc, #132]	@ (8015e0c <tcp_timewait_input+0xe0>)
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8015e04 <tcp_timewait_input+0xd8>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	18d0      	adds	r0, r2, r3
 8015d92:	4b1f      	ldr	r3, [pc, #124]	@ (8015e10 <tcp_timewait_input+0xe4>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	885b      	ldrh	r3, [r3, #2]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8015e10 <tcp_timewait_input+0xe4>)
 8015d9c:	6812      	ldr	r2, [r2, #0]
 8015d9e:	8812      	ldrh	r2, [r2, #0]
 8015da0:	b292      	uxth	r2, r2
 8015da2:	9202      	str	r2, [sp, #8]
 8015da4:	9301      	str	r3, [sp, #4]
 8015da6:	4b1b      	ldr	r3, [pc, #108]	@ (8015e14 <tcp_timewait_input+0xe8>)
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	4b1b      	ldr	r3, [pc, #108]	@ (8015e18 <tcp_timewait_input+0xec>)
 8015dac:	4602      	mov	r2, r0
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f003 fac4 	bl	801933c <tcp_rst>
 8015db4:	e01b      	b.n	8015dee <tcp_timewait_input+0xc2>
 8015db6:	4b0f      	ldr	r3, [pc, #60]	@ (8015df4 <tcp_timewait_input+0xc8>)
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	f003 0301 	and.w	r3, r3, #1
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d003      	beq.n	8015dca <tcp_timewait_input+0x9e>
 8015dc2:	4b16      	ldr	r3, [pc, #88]	@ (8015e1c <tcp_timewait_input+0xf0>)
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	621a      	str	r2, [r3, #32]
 8015dca:	4b10      	ldr	r3, [pc, #64]	@ (8015e0c <tcp_timewait_input+0xe0>)
 8015dcc:	881b      	ldrh	r3, [r3, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d00c      	beq.n	8015dec <tcp_timewait_input+0xc0>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	8b5b      	ldrh	r3, [r3, #26]
 8015dd6:	f043 0302 	orr.w	r3, r3, #2
 8015dda:	b29a      	uxth	r2, r3
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	835a      	strh	r2, [r3, #26]
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f002 fcf7 	bl	80187d4 <tcp_output>
 8015de6:	e001      	b.n	8015dec <tcp_timewait_input+0xc0>
 8015de8:	bf00      	nop
 8015dea:	e000      	b.n	8015dee <tcp_timewait_input+0xc2>
 8015dec:	bf00      	nop
 8015dee:	3708      	adds	r7, #8
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	2000f420 	.word	0x2000f420
 8015df8:	08021e1c 	.word	0x08021e1c
 8015dfc:	08022034 	.word	0x08022034
 8015e00:	08021e68 	.word	0x08021e68
 8015e04:	2000f414 	.word	0x2000f414
 8015e08:	2000f418 	.word	0x2000f418
 8015e0c:	2000f41e 	.word	0x2000f41e
 8015e10:	2000f404 	.word	0x2000f404
 8015e14:	2000bc98 	.word	0x2000bc98
 8015e18:	2000bc9c 	.word	0x2000bc9c
 8015e1c:	2000f3dc 	.word	0x2000f3dc

08015e20 <tcp_process>:
 8015e20:	b590      	push	{r4, r7, lr}
 8015e22:	b08d      	sub	sp, #52	@ 0x34
 8015e24:	af04      	add	r7, sp, #16
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	2300      	movs	r3, #0
 8015e2a:	76fb      	strb	r3, [r7, #27]
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	76bb      	strb	r3, [r7, #26]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d106      	bne.n	8015e44 <tcp_process+0x24>
 8015e36:	4b9d      	ldr	r3, [pc, #628]	@ (80160ac <tcp_process+0x28c>)
 8015e38:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015e3c:	499c      	ldr	r1, [pc, #624]	@ (80160b0 <tcp_process+0x290>)
 8015e3e:	489d      	ldr	r0, [pc, #628]	@ (80160b4 <tcp_process+0x294>)
 8015e40:	f007 fca2 	bl	801d788 <iprintf>
 8015e44:	4b9c      	ldr	r3, [pc, #624]	@ (80160b8 <tcp_process+0x298>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	f003 0304 	and.w	r3, r3, #4
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d04e      	beq.n	8015eee <tcp_process+0xce>
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	7d1b      	ldrb	r3, [r3, #20]
 8015e54:	2b02      	cmp	r3, #2
 8015e56:	d108      	bne.n	8015e6a <tcp_process+0x4a>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e5c:	4b97      	ldr	r3, [pc, #604]	@ (80160bc <tcp_process+0x29c>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d123      	bne.n	8015eac <tcp_process+0x8c>
 8015e64:	2301      	movs	r3, #1
 8015e66:	76fb      	strb	r3, [r7, #27]
 8015e68:	e020      	b.n	8015eac <tcp_process+0x8c>
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e6e:	4b94      	ldr	r3, [pc, #592]	@ (80160c0 <tcp_process+0x2a0>)
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d102      	bne.n	8015e7c <tcp_process+0x5c>
 8015e76:	2301      	movs	r3, #1
 8015e78:	76fb      	strb	r3, [r7, #27]
 8015e7a:	e017      	b.n	8015eac <tcp_process+0x8c>
 8015e7c:	4b90      	ldr	r3, [pc, #576]	@ (80160c0 <tcp_process+0x2a0>)
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e84:	1ad3      	subs	r3, r2, r3
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	db10      	blt.n	8015eac <tcp_process+0x8c>
 8015e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80160c0 <tcp_process+0x2a0>)
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e92:	6879      	ldr	r1, [r7, #4]
 8015e94:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015e96:	440b      	add	r3, r1
 8015e98:	1ad3      	subs	r3, r2, r3
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dc06      	bgt.n	8015eac <tcp_process+0x8c>
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8b5b      	ldrh	r3, [r3, #26]
 8015ea2:	f043 0302 	orr.w	r3, r3, #2
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	835a      	strh	r2, [r3, #26]
 8015eac:	7efb      	ldrb	r3, [r7, #27]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d01b      	beq.n	8015eea <tcp_process+0xca>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	7d1b      	ldrb	r3, [r3, #20]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d106      	bne.n	8015ec8 <tcp_process+0xa8>
 8015eba:	4b7c      	ldr	r3, [pc, #496]	@ (80160ac <tcp_process+0x28c>)
 8015ebc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015ec0:	4980      	ldr	r1, [pc, #512]	@ (80160c4 <tcp_process+0x2a4>)
 8015ec2:	487c      	ldr	r0, [pc, #496]	@ (80160b4 <tcp_process+0x294>)
 8015ec4:	f007 fc60 	bl	801d788 <iprintf>
 8015ec8:	4b7f      	ldr	r3, [pc, #508]	@ (80160c8 <tcp_process+0x2a8>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	f043 0308 	orr.w	r3, r3, #8
 8015ed0:	b2da      	uxtb	r2, r3
 8015ed2:	4b7d      	ldr	r3, [pc, #500]	@ (80160c8 <tcp_process+0x2a8>)
 8015ed4:	701a      	strb	r2, [r3, #0]
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	8b5b      	ldrh	r3, [r3, #26]
 8015eda:	f023 0301 	bic.w	r3, r3, #1
 8015ede:	b29a      	uxth	r2, r3
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	835a      	strh	r2, [r3, #26]
 8015ee4:	f06f 030d 	mvn.w	r3, #13
 8015ee8:	e37a      	b.n	80165e0 <tcp_process+0x7c0>
 8015eea:	2300      	movs	r3, #0
 8015eec:	e378      	b.n	80165e0 <tcp_process+0x7c0>
 8015eee:	4b72      	ldr	r3, [pc, #456]	@ (80160b8 <tcp_process+0x298>)
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	f003 0302 	and.w	r3, r3, #2
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d010      	beq.n	8015f1c <tcp_process+0xfc>
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	7d1b      	ldrb	r3, [r3, #20]
 8015efe:	2b02      	cmp	r3, #2
 8015f00:	d00c      	beq.n	8015f1c <tcp_process+0xfc>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	7d1b      	ldrb	r3, [r3, #20]
 8015f06:	2b03      	cmp	r3, #3
 8015f08:	d008      	beq.n	8015f1c <tcp_process+0xfc>
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	8b5b      	ldrh	r3, [r3, #26]
 8015f0e:	f043 0302 	orr.w	r3, r3, #2
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	835a      	strh	r2, [r3, #26]
 8015f18:	2300      	movs	r3, #0
 8015f1a:	e361      	b.n	80165e0 <tcp_process+0x7c0>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	8b5b      	ldrh	r3, [r3, #26]
 8015f20:	f003 0310 	and.w	r3, r3, #16
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d103      	bne.n	8015f30 <tcp_process+0x110>
 8015f28:	4b68      	ldr	r3, [pc, #416]	@ (80160cc <tcp_process+0x2ac>)
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	621a      	str	r2, [r3, #32]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2200      	movs	r2, #0
 8015f34:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f001 fc2b 	bl	801779c <tcp_parseopt>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	7d1b      	ldrb	r3, [r3, #20]
 8015f4a:	3b02      	subs	r3, #2
 8015f4c:	2b07      	cmp	r3, #7
 8015f4e:	f200 8337 	bhi.w	80165c0 <tcp_process+0x7a0>
 8015f52:	a201      	add	r2, pc, #4	@ (adr r2, 8015f58 <tcp_process+0x138>)
 8015f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f58:	08015f79 	.word	0x08015f79
 8015f5c:	080161a9 	.word	0x080161a9
 8015f60:	08016321 	.word	0x08016321
 8015f64:	0801634b 	.word	0x0801634b
 8015f68:	0801646f 	.word	0x0801646f
 8015f6c:	08016321 	.word	0x08016321
 8015f70:	080164fb 	.word	0x080164fb
 8015f74:	0801658b 	.word	0x0801658b
 8015f78:	4b4f      	ldr	r3, [pc, #316]	@ (80160b8 <tcp_process+0x298>)
 8015f7a:	781b      	ldrb	r3, [r3, #0]
 8015f7c:	f003 0310 	and.w	r3, r3, #16
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	f000 80e4 	beq.w	801614e <tcp_process+0x32e>
 8015f86:	4b4c      	ldr	r3, [pc, #304]	@ (80160b8 <tcp_process+0x298>)
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	f003 0302 	and.w	r3, r3, #2
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	f000 80dd 	beq.w	801614e <tcp_process+0x32e>
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f98:	1c5a      	adds	r2, r3, #1
 8015f9a:	4b48      	ldr	r3, [pc, #288]	@ (80160bc <tcp_process+0x29c>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	f040 80d5 	bne.w	801614e <tcp_process+0x32e>
 8015fa4:	4b46      	ldr	r3, [pc, #280]	@ (80160c0 <tcp_process+0x2a0>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	1c5a      	adds	r2, r3, #1
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	625a      	str	r2, [r3, #36]	@ 0x24
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8015fb6:	4b41      	ldr	r3, [pc, #260]	@ (80160bc <tcp_process+0x29c>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	645a      	str	r2, [r3, #68]	@ 0x44
 8015fbe:	4b44      	ldr	r3, [pc, #272]	@ (80160d0 <tcp_process+0x2b0>)
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	89db      	ldrh	r3, [r3, #14]
 8015fc4:	b29a      	uxth	r2, r3
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8015fd8:	4b39      	ldr	r3, [pc, #228]	@ (80160c0 <tcp_process+0x2a0>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	1e5a      	subs	r2, r3, #1
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	655a      	str	r2, [r3, #84]	@ 0x54
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2204      	movs	r2, #4
 8015fe6:	751a      	strb	r2, [r3, #20]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3304      	adds	r3, #4
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f005 faa3 	bl	801b53c <ip4_route>
 8015ff6:	4601      	mov	r1, r0
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	4620      	mov	r0, r4
 8016000:	f7ff f88c 	bl	801511c <tcp_eff_send_mss_netif>
 8016004:	4603      	mov	r3, r0
 8016006:	461a      	mov	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	865a      	strh	r2, [r3, #50]	@ 0x32
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016010:	009a      	lsls	r2, r3, #2
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	f241 111c 	movw	r1, #4380	@ 0x111c
 801601c:	428b      	cmp	r3, r1
 801601e:	bf38      	it	cc
 8016020:	460b      	movcc	r3, r1
 8016022:	429a      	cmp	r2, r3
 8016024:	d204      	bcs.n	8016030 <tcp_process+0x210>
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	b29b      	uxth	r3, r3
 801602e:	e00d      	b.n	801604c <tcp_process+0x22c>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016034:	005b      	lsls	r3, r3, #1
 8016036:	f241 121c 	movw	r2, #4380	@ 0x111c
 801603a:	4293      	cmp	r3, r2
 801603c:	d904      	bls.n	8016048 <tcp_process+0x228>
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016042:	005b      	lsls	r3, r3, #1
 8016044:	b29b      	uxth	r3, r3
 8016046:	e001      	b.n	801604c <tcp_process+0x22c>
 8016048:	f241 131c 	movw	r3, #4380	@ 0x111c
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016058:	2b00      	cmp	r3, #0
 801605a:	d106      	bne.n	801606a <tcp_process+0x24a>
 801605c:	4b13      	ldr	r3, [pc, #76]	@ (80160ac <tcp_process+0x28c>)
 801605e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016062:	491c      	ldr	r1, [pc, #112]	@ (80160d4 <tcp_process+0x2b4>)
 8016064:	4813      	ldr	r0, [pc, #76]	@ (80160b4 <tcp_process+0x294>)
 8016066:	f007 fb8f 	bl	801d788 <iprintf>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016070:	3b01      	subs	r3, #1
 8016072:	b29a      	uxth	r2, r3
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801607e:	61fb      	str	r3, [r7, #28]
 8016080:	69fb      	ldr	r3, [r7, #28]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d12a      	bne.n	80160dc <tcp_process+0x2bc>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801608a:	61fb      	str	r3, [r7, #28]
 801608c:	69fb      	ldr	r3, [r7, #28]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d106      	bne.n	80160a0 <tcp_process+0x280>
 8016092:	4b06      	ldr	r3, [pc, #24]	@ (80160ac <tcp_process+0x28c>)
 8016094:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016098:	490f      	ldr	r1, [pc, #60]	@ (80160d8 <tcp_process+0x2b8>)
 801609a:	4806      	ldr	r0, [pc, #24]	@ (80160b4 <tcp_process+0x294>)
 801609c:	f007 fb74 	bl	801d788 <iprintf>
 80160a0:	69fb      	ldr	r3, [r7, #28]
 80160a2:	681a      	ldr	r2, [r3, #0]
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80160a8:	e01c      	b.n	80160e4 <tcp_process+0x2c4>
 80160aa:	bf00      	nop
 80160ac:	08021e1c 	.word	0x08021e1c
 80160b0:	08022054 	.word	0x08022054
 80160b4:	08021e68 	.word	0x08021e68
 80160b8:	2000f420 	.word	0x2000f420
 80160bc:	2000f418 	.word	0x2000f418
 80160c0:	2000f414 	.word	0x2000f414
 80160c4:	08022070 	.word	0x08022070
 80160c8:	2000f421 	.word	0x2000f421
 80160cc:	2000f3dc 	.word	0x2000f3dc
 80160d0:	2000f404 	.word	0x2000f404
 80160d4:	08022090 	.word	0x08022090
 80160d8:	080220a8 	.word	0x080220a8
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	671a      	str	r2, [r3, #112]	@ 0x70
 80160e4:	69f8      	ldr	r0, [r7, #28]
 80160e6:	f7fe fc36 	bl	8014956 <tcp_seg_free>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d104      	bne.n	80160fc <tcp_process+0x2dc>
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80160f8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80160fa:	e006      	b.n	801610a <tcp_process+0x2ea>
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2200      	movs	r2, #0
 8016100:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2200      	movs	r2, #0
 8016106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016110:	2b00      	cmp	r3, #0
 8016112:	d00a      	beq.n	801612a <tcp_process+0x30a>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801611a:	687a      	ldr	r2, [r7, #4]
 801611c:	6910      	ldr	r0, [r2, #16]
 801611e:	2200      	movs	r2, #0
 8016120:	6879      	ldr	r1, [r7, #4]
 8016122:	4798      	blx	r3
 8016124:	4603      	mov	r3, r0
 8016126:	76bb      	strb	r3, [r7, #26]
 8016128:	e001      	b.n	801612e <tcp_process+0x30e>
 801612a:	2300      	movs	r3, #0
 801612c:	76bb      	strb	r3, [r7, #26]
 801612e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016132:	f113 0f0d 	cmn.w	r3, #13
 8016136:	d102      	bne.n	801613e <tcp_process+0x31e>
 8016138:	f06f 030c 	mvn.w	r3, #12
 801613c:	e250      	b.n	80165e0 <tcp_process+0x7c0>
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	8b5b      	ldrh	r3, [r3, #26]
 8016142:	f043 0302 	orr.w	r3, r3, #2
 8016146:	b29a      	uxth	r2, r3
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	835a      	strh	r2, [r3, #26]
 801614c:	e23a      	b.n	80165c4 <tcp_process+0x7a4>
 801614e:	4b98      	ldr	r3, [pc, #608]	@ (80163b0 <tcp_process+0x590>)
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	f003 0310 	and.w	r3, r3, #16
 8016156:	2b00      	cmp	r3, #0
 8016158:	f000 8234 	beq.w	80165c4 <tcp_process+0x7a4>
 801615c:	4b95      	ldr	r3, [pc, #596]	@ (80163b4 <tcp_process+0x594>)
 801615e:	6819      	ldr	r1, [r3, #0]
 8016160:	4b95      	ldr	r3, [pc, #596]	@ (80163b8 <tcp_process+0x598>)
 8016162:	881b      	ldrh	r3, [r3, #0]
 8016164:	461a      	mov	r2, r3
 8016166:	4b95      	ldr	r3, [pc, #596]	@ (80163bc <tcp_process+0x59c>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	18d0      	adds	r0, r2, r3
 801616c:	4b94      	ldr	r3, [pc, #592]	@ (80163c0 <tcp_process+0x5a0>)
 801616e:	681b      	ldr	r3, [r3, #0]
 8016170:	885b      	ldrh	r3, [r3, #2]
 8016172:	b29b      	uxth	r3, r3
 8016174:	4a92      	ldr	r2, [pc, #584]	@ (80163c0 <tcp_process+0x5a0>)
 8016176:	6812      	ldr	r2, [r2, #0]
 8016178:	8812      	ldrh	r2, [r2, #0]
 801617a:	b292      	uxth	r2, r2
 801617c:	9202      	str	r2, [sp, #8]
 801617e:	9301      	str	r3, [sp, #4]
 8016180:	4b90      	ldr	r3, [pc, #576]	@ (80163c4 <tcp_process+0x5a4>)
 8016182:	9300      	str	r3, [sp, #0]
 8016184:	4b90      	ldr	r3, [pc, #576]	@ (80163c8 <tcp_process+0x5a8>)
 8016186:	4602      	mov	r2, r0
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f003 f8d7 	bl	801933c <tcp_rst>
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016194:	2b05      	cmp	r3, #5
 8016196:	f200 8215 	bhi.w	80165c4 <tcp_process+0x7a4>
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2200      	movs	r2, #0
 801619e:	861a      	strh	r2, [r3, #48]	@ 0x30
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f002 fea3 	bl	8018eec <tcp_rexmit_rto>
 80161a6:	e20d      	b.n	80165c4 <tcp_process+0x7a4>
 80161a8:	4b81      	ldr	r3, [pc, #516]	@ (80163b0 <tcp_process+0x590>)
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 0310 	and.w	r3, r3, #16
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	f000 80a1 	beq.w	80162f8 <tcp_process+0x4d8>
 80161b6:	4b7f      	ldr	r3, [pc, #508]	@ (80163b4 <tcp_process+0x594>)
 80161b8:	681a      	ldr	r2, [r3, #0]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80161be:	1ad3      	subs	r3, r2, r3
 80161c0:	3b01      	subs	r3, #1
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	db7e      	blt.n	80162c4 <tcp_process+0x4a4>
 80161c6:	4b7b      	ldr	r3, [pc, #492]	@ (80163b4 <tcp_process+0x594>)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80161ce:	1ad3      	subs	r3, r2, r3
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	dc77      	bgt.n	80162c4 <tcp_process+0x4a4>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	2204      	movs	r2, #4
 80161d8:	751a      	strb	r2, [r3, #20]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d102      	bne.n	80161e8 <tcp_process+0x3c8>
 80161e2:	23fa      	movs	r3, #250	@ 0xfa
 80161e4:	76bb      	strb	r3, [r7, #26]
 80161e6:	e01d      	b.n	8016224 <tcp_process+0x404>
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80161ec:	699b      	ldr	r3, [r3, #24]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d106      	bne.n	8016200 <tcp_process+0x3e0>
 80161f2:	4b76      	ldr	r3, [pc, #472]	@ (80163cc <tcp_process+0x5ac>)
 80161f4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80161f8:	4975      	ldr	r1, [pc, #468]	@ (80163d0 <tcp_process+0x5b0>)
 80161fa:	4876      	ldr	r0, [pc, #472]	@ (80163d4 <tcp_process+0x5b4>)
 80161fc:	f007 fac4 	bl	801d788 <iprintf>
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016204:	699b      	ldr	r3, [r3, #24]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00a      	beq.n	8016220 <tcp_process+0x400>
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801620e:	699b      	ldr	r3, [r3, #24]
 8016210:	687a      	ldr	r2, [r7, #4]
 8016212:	6910      	ldr	r0, [r2, #16]
 8016214:	2200      	movs	r2, #0
 8016216:	6879      	ldr	r1, [r7, #4]
 8016218:	4798      	blx	r3
 801621a:	4603      	mov	r3, r0
 801621c:	76bb      	strb	r3, [r7, #26]
 801621e:	e001      	b.n	8016224 <tcp_process+0x404>
 8016220:	23f0      	movs	r3, #240	@ 0xf0
 8016222:	76bb      	strb	r3, [r7, #26]
 8016224:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d00a      	beq.n	8016242 <tcp_process+0x422>
 801622c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016230:	f113 0f0d 	cmn.w	r3, #13
 8016234:	d002      	beq.n	801623c <tcp_process+0x41c>
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f7fd fce6 	bl	8013c08 <tcp_abort>
 801623c:	f06f 030c 	mvn.w	r3, #12
 8016240:	e1ce      	b.n	80165e0 <tcp_process+0x7c0>
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f000 fae0 	bl	8016808 <tcp_receive>
 8016248:	4b63      	ldr	r3, [pc, #396]	@ (80163d8 <tcp_process+0x5b8>)
 801624a:	881b      	ldrh	r3, [r3, #0]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d005      	beq.n	801625c <tcp_process+0x43c>
 8016250:	4b61      	ldr	r3, [pc, #388]	@ (80163d8 <tcp_process+0x5b8>)
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	3b01      	subs	r3, #1
 8016256:	b29a      	uxth	r2, r3
 8016258:	4b5f      	ldr	r3, [pc, #380]	@ (80163d8 <tcp_process+0x5b8>)
 801625a:	801a      	strh	r2, [r3, #0]
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016260:	009a      	lsls	r2, r3, #2
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016266:	005b      	lsls	r3, r3, #1
 8016268:	f241 111c 	movw	r1, #4380	@ 0x111c
 801626c:	428b      	cmp	r3, r1
 801626e:	bf38      	it	cc
 8016270:	460b      	movcc	r3, r1
 8016272:	429a      	cmp	r2, r3
 8016274:	d204      	bcs.n	8016280 <tcp_process+0x460>
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	b29b      	uxth	r3, r3
 801627e:	e00d      	b.n	801629c <tcp_process+0x47c>
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016284:	005b      	lsls	r3, r3, #1
 8016286:	f241 121c 	movw	r2, #4380	@ 0x111c
 801628a:	4293      	cmp	r3, r2
 801628c:	d904      	bls.n	8016298 <tcp_process+0x478>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016292:	005b      	lsls	r3, r3, #1
 8016294:	b29b      	uxth	r3, r3
 8016296:	e001      	b.n	801629c <tcp_process+0x47c>
 8016298:	f241 131c 	movw	r3, #4380	@ 0x111c
 801629c:	687a      	ldr	r2, [r7, #4]
 801629e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
 80162a2:	4b4e      	ldr	r3, [pc, #312]	@ (80163dc <tcp_process+0x5bc>)
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	f003 0320 	and.w	r3, r3, #32
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d037      	beq.n	801631e <tcp_process+0x4fe>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	8b5b      	ldrh	r3, [r3, #26]
 80162b2:	f043 0302 	orr.w	r3, r3, #2
 80162b6:	b29a      	uxth	r2, r3
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	835a      	strh	r2, [r3, #26]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2207      	movs	r2, #7
 80162c0:	751a      	strb	r2, [r3, #20]
 80162c2:	e02c      	b.n	801631e <tcp_process+0x4fe>
 80162c4:	4b3b      	ldr	r3, [pc, #236]	@ (80163b4 <tcp_process+0x594>)
 80162c6:	6819      	ldr	r1, [r3, #0]
 80162c8:	4b3b      	ldr	r3, [pc, #236]	@ (80163b8 <tcp_process+0x598>)
 80162ca:	881b      	ldrh	r3, [r3, #0]
 80162cc:	461a      	mov	r2, r3
 80162ce:	4b3b      	ldr	r3, [pc, #236]	@ (80163bc <tcp_process+0x59c>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	18d0      	adds	r0, r2, r3
 80162d4:	4b3a      	ldr	r3, [pc, #232]	@ (80163c0 <tcp_process+0x5a0>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	885b      	ldrh	r3, [r3, #2]
 80162da:	b29b      	uxth	r3, r3
 80162dc:	4a38      	ldr	r2, [pc, #224]	@ (80163c0 <tcp_process+0x5a0>)
 80162de:	6812      	ldr	r2, [r2, #0]
 80162e0:	8812      	ldrh	r2, [r2, #0]
 80162e2:	b292      	uxth	r2, r2
 80162e4:	9202      	str	r2, [sp, #8]
 80162e6:	9301      	str	r3, [sp, #4]
 80162e8:	4b36      	ldr	r3, [pc, #216]	@ (80163c4 <tcp_process+0x5a4>)
 80162ea:	9300      	str	r3, [sp, #0]
 80162ec:	4b36      	ldr	r3, [pc, #216]	@ (80163c8 <tcp_process+0x5a8>)
 80162ee:	4602      	mov	r2, r0
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f003 f823 	bl	801933c <tcp_rst>
 80162f6:	e167      	b.n	80165c8 <tcp_process+0x7a8>
 80162f8:	4b2d      	ldr	r3, [pc, #180]	@ (80163b0 <tcp_process+0x590>)
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	f003 0302 	and.w	r3, r3, #2
 8016300:	2b00      	cmp	r3, #0
 8016302:	f000 8161 	beq.w	80165c8 <tcp_process+0x7a8>
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801630a:	1e5a      	subs	r2, r3, #1
 801630c:	4b2b      	ldr	r3, [pc, #172]	@ (80163bc <tcp_process+0x59c>)
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	429a      	cmp	r2, r3
 8016312:	f040 8159 	bne.w	80165c8 <tcp_process+0x7a8>
 8016316:	6878      	ldr	r0, [r7, #4]
 8016318:	f002 fe0a 	bl	8018f30 <tcp_rexmit>
 801631c:	e154      	b.n	80165c8 <tcp_process+0x7a8>
 801631e:	e153      	b.n	80165c8 <tcp_process+0x7a8>
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 fa71 	bl	8016808 <tcp_receive>
 8016326:	4b2d      	ldr	r3, [pc, #180]	@ (80163dc <tcp_process+0x5bc>)
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	f003 0320 	and.w	r3, r3, #32
 801632e:	2b00      	cmp	r3, #0
 8016330:	f000 814c 	beq.w	80165cc <tcp_process+0x7ac>
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	8b5b      	ldrh	r3, [r3, #26]
 8016338:	f043 0302 	orr.w	r3, r3, #2
 801633c:	b29a      	uxth	r2, r3
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	835a      	strh	r2, [r3, #26]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2207      	movs	r2, #7
 8016346:	751a      	strb	r2, [r3, #20]
 8016348:	e140      	b.n	80165cc <tcp_process+0x7ac>
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 fa5c 	bl	8016808 <tcp_receive>
 8016350:	4b22      	ldr	r3, [pc, #136]	@ (80163dc <tcp_process+0x5bc>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	f003 0320 	and.w	r3, r3, #32
 8016358:	2b00      	cmp	r3, #0
 801635a:	d071      	beq.n	8016440 <tcp_process+0x620>
 801635c:	4b14      	ldr	r3, [pc, #80]	@ (80163b0 <tcp_process+0x590>)
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	f003 0310 	and.w	r3, r3, #16
 8016364:	2b00      	cmp	r3, #0
 8016366:	d060      	beq.n	801642a <tcp_process+0x60a>
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801636c:	4b11      	ldr	r3, [pc, #68]	@ (80163b4 <tcp_process+0x594>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	429a      	cmp	r2, r3
 8016372:	d15a      	bne.n	801642a <tcp_process+0x60a>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016378:	2b00      	cmp	r3, #0
 801637a:	d156      	bne.n	801642a <tcp_process+0x60a>
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	8b5b      	ldrh	r3, [r3, #26]
 8016380:	f043 0302 	orr.w	r3, r3, #2
 8016384:	b29a      	uxth	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	835a      	strh	r2, [r3, #26]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7fe fdbc 	bl	8014f08 <tcp_pcb_purge>
 8016390:	4b13      	ldr	r3, [pc, #76]	@ (80163e0 <tcp_process+0x5c0>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	687a      	ldr	r2, [r7, #4]
 8016396:	429a      	cmp	r2, r3
 8016398:	d105      	bne.n	80163a6 <tcp_process+0x586>
 801639a:	4b11      	ldr	r3, [pc, #68]	@ (80163e0 <tcp_process+0x5c0>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	68db      	ldr	r3, [r3, #12]
 80163a0:	4a0f      	ldr	r2, [pc, #60]	@ (80163e0 <tcp_process+0x5c0>)
 80163a2:	6013      	str	r3, [r2, #0]
 80163a4:	e02e      	b.n	8016404 <tcp_process+0x5e4>
 80163a6:	4b0e      	ldr	r3, [pc, #56]	@ (80163e0 <tcp_process+0x5c0>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	617b      	str	r3, [r7, #20]
 80163ac:	e027      	b.n	80163fe <tcp_process+0x5de>
 80163ae:	bf00      	nop
 80163b0:	2000f420 	.word	0x2000f420
 80163b4:	2000f418 	.word	0x2000f418
 80163b8:	2000f41e 	.word	0x2000f41e
 80163bc:	2000f414 	.word	0x2000f414
 80163c0:	2000f404 	.word	0x2000f404
 80163c4:	2000bc98 	.word	0x2000bc98
 80163c8:	2000bc9c 	.word	0x2000bc9c
 80163cc:	08021e1c 	.word	0x08021e1c
 80163d0:	080220bc 	.word	0x080220bc
 80163d4:	08021e68 	.word	0x08021e68
 80163d8:	2000f41c 	.word	0x2000f41c
 80163dc:	2000f421 	.word	0x2000f421
 80163e0:	2000f3e8 	.word	0x2000f3e8
 80163e4:	697b      	ldr	r3, [r7, #20]
 80163e6:	68db      	ldr	r3, [r3, #12]
 80163e8:	687a      	ldr	r2, [r7, #4]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d104      	bne.n	80163f8 <tcp_process+0x5d8>
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	68da      	ldr	r2, [r3, #12]
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	60da      	str	r2, [r3, #12]
 80163f6:	e005      	b.n	8016404 <tcp_process+0x5e4>
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	68db      	ldr	r3, [r3, #12]
 80163fc:	617b      	str	r3, [r7, #20]
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d1ef      	bne.n	80163e4 <tcp_process+0x5c4>
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	2200      	movs	r2, #0
 8016408:	60da      	str	r2, [r3, #12]
 801640a:	4b77      	ldr	r3, [pc, #476]	@ (80165e8 <tcp_process+0x7c8>)
 801640c:	2201      	movs	r2, #1
 801640e:	701a      	strb	r2, [r3, #0]
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	220a      	movs	r2, #10
 8016414:	751a      	strb	r2, [r3, #20]
 8016416:	4b75      	ldr	r3, [pc, #468]	@ (80165ec <tcp_process+0x7cc>)
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	60da      	str	r2, [r3, #12]
 801641e:	4a73      	ldr	r2, [pc, #460]	@ (80165ec <tcp_process+0x7cc>)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6013      	str	r3, [r2, #0]
 8016424:	f003 f94c 	bl	80196c0 <tcp_timer_needed>
 8016428:	e0d2      	b.n	80165d0 <tcp_process+0x7b0>
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	8b5b      	ldrh	r3, [r3, #26]
 801642e:	f043 0302 	orr.w	r3, r3, #2
 8016432:	b29a      	uxth	r2, r3
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	835a      	strh	r2, [r3, #26]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2208      	movs	r2, #8
 801643c:	751a      	strb	r2, [r3, #20]
 801643e:	e0c7      	b.n	80165d0 <tcp_process+0x7b0>
 8016440:	4b6b      	ldr	r3, [pc, #428]	@ (80165f0 <tcp_process+0x7d0>)
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	f003 0310 	and.w	r3, r3, #16
 8016448:	2b00      	cmp	r3, #0
 801644a:	f000 80c1 	beq.w	80165d0 <tcp_process+0x7b0>
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016452:	4b68      	ldr	r3, [pc, #416]	@ (80165f4 <tcp_process+0x7d4>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	429a      	cmp	r2, r3
 8016458:	f040 80ba 	bne.w	80165d0 <tcp_process+0x7b0>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016460:	2b00      	cmp	r3, #0
 8016462:	f040 80b5 	bne.w	80165d0 <tcp_process+0x7b0>
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2206      	movs	r2, #6
 801646a:	751a      	strb	r2, [r3, #20]
 801646c:	e0b0      	b.n	80165d0 <tcp_process+0x7b0>
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f9ca 	bl	8016808 <tcp_receive>
 8016474:	4b60      	ldr	r3, [pc, #384]	@ (80165f8 <tcp_process+0x7d8>)
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	f003 0320 	and.w	r3, r3, #32
 801647c:	2b00      	cmp	r3, #0
 801647e:	f000 80a9 	beq.w	80165d4 <tcp_process+0x7b4>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	8b5b      	ldrh	r3, [r3, #26]
 8016486:	f043 0302 	orr.w	r3, r3, #2
 801648a:	b29a      	uxth	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	835a      	strh	r2, [r3, #26]
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f7fe fd39 	bl	8014f08 <tcp_pcb_purge>
 8016496:	4b59      	ldr	r3, [pc, #356]	@ (80165fc <tcp_process+0x7dc>)
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	687a      	ldr	r2, [r7, #4]
 801649c:	429a      	cmp	r2, r3
 801649e:	d105      	bne.n	80164ac <tcp_process+0x68c>
 80164a0:	4b56      	ldr	r3, [pc, #344]	@ (80165fc <tcp_process+0x7dc>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	68db      	ldr	r3, [r3, #12]
 80164a6:	4a55      	ldr	r2, [pc, #340]	@ (80165fc <tcp_process+0x7dc>)
 80164a8:	6013      	str	r3, [r2, #0]
 80164aa:	e013      	b.n	80164d4 <tcp_process+0x6b4>
 80164ac:	4b53      	ldr	r3, [pc, #332]	@ (80165fc <tcp_process+0x7dc>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	613b      	str	r3, [r7, #16]
 80164b2:	e00c      	b.n	80164ce <tcp_process+0x6ae>
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	68db      	ldr	r3, [r3, #12]
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d104      	bne.n	80164c8 <tcp_process+0x6a8>
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	68da      	ldr	r2, [r3, #12]
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	60da      	str	r2, [r3, #12]
 80164c6:	e005      	b.n	80164d4 <tcp_process+0x6b4>
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	68db      	ldr	r3, [r3, #12]
 80164cc:	613b      	str	r3, [r7, #16]
 80164ce:	693b      	ldr	r3, [r7, #16]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d1ef      	bne.n	80164b4 <tcp_process+0x694>
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	2200      	movs	r2, #0
 80164d8:	60da      	str	r2, [r3, #12]
 80164da:	4b43      	ldr	r3, [pc, #268]	@ (80165e8 <tcp_process+0x7c8>)
 80164dc:	2201      	movs	r2, #1
 80164de:	701a      	strb	r2, [r3, #0]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	220a      	movs	r2, #10
 80164e4:	751a      	strb	r2, [r3, #20]
 80164e6:	4b41      	ldr	r3, [pc, #260]	@ (80165ec <tcp_process+0x7cc>)
 80164e8:	681a      	ldr	r2, [r3, #0]
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	60da      	str	r2, [r3, #12]
 80164ee:	4a3f      	ldr	r2, [pc, #252]	@ (80165ec <tcp_process+0x7cc>)
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6013      	str	r3, [r2, #0]
 80164f4:	f003 f8e4 	bl	80196c0 <tcp_timer_needed>
 80164f8:	e06c      	b.n	80165d4 <tcp_process+0x7b4>
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f000 f984 	bl	8016808 <tcp_receive>
 8016500:	4b3b      	ldr	r3, [pc, #236]	@ (80165f0 <tcp_process+0x7d0>)
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	f003 0310 	and.w	r3, r3, #16
 8016508:	2b00      	cmp	r3, #0
 801650a:	d065      	beq.n	80165d8 <tcp_process+0x7b8>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016510:	4b38      	ldr	r3, [pc, #224]	@ (80165f4 <tcp_process+0x7d4>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	429a      	cmp	r2, r3
 8016516:	d15f      	bne.n	80165d8 <tcp_process+0x7b8>
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801651c:	2b00      	cmp	r3, #0
 801651e:	d15b      	bne.n	80165d8 <tcp_process+0x7b8>
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f7fe fcf1 	bl	8014f08 <tcp_pcb_purge>
 8016526:	4b35      	ldr	r3, [pc, #212]	@ (80165fc <tcp_process+0x7dc>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	687a      	ldr	r2, [r7, #4]
 801652c:	429a      	cmp	r2, r3
 801652e:	d105      	bne.n	801653c <tcp_process+0x71c>
 8016530:	4b32      	ldr	r3, [pc, #200]	@ (80165fc <tcp_process+0x7dc>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	68db      	ldr	r3, [r3, #12]
 8016536:	4a31      	ldr	r2, [pc, #196]	@ (80165fc <tcp_process+0x7dc>)
 8016538:	6013      	str	r3, [r2, #0]
 801653a:	e013      	b.n	8016564 <tcp_process+0x744>
 801653c:	4b2f      	ldr	r3, [pc, #188]	@ (80165fc <tcp_process+0x7dc>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	60fb      	str	r3, [r7, #12]
 8016542:	e00c      	b.n	801655e <tcp_process+0x73e>
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	68db      	ldr	r3, [r3, #12]
 8016548:	687a      	ldr	r2, [r7, #4]
 801654a:	429a      	cmp	r2, r3
 801654c:	d104      	bne.n	8016558 <tcp_process+0x738>
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	68da      	ldr	r2, [r3, #12]
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	60da      	str	r2, [r3, #12]
 8016556:	e005      	b.n	8016564 <tcp_process+0x744>
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	60fb      	str	r3, [r7, #12]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d1ef      	bne.n	8016544 <tcp_process+0x724>
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2200      	movs	r2, #0
 8016568:	60da      	str	r2, [r3, #12]
 801656a:	4b1f      	ldr	r3, [pc, #124]	@ (80165e8 <tcp_process+0x7c8>)
 801656c:	2201      	movs	r2, #1
 801656e:	701a      	strb	r2, [r3, #0]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	220a      	movs	r2, #10
 8016574:	751a      	strb	r2, [r3, #20]
 8016576:	4b1d      	ldr	r3, [pc, #116]	@ (80165ec <tcp_process+0x7cc>)
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	60da      	str	r2, [r3, #12]
 801657e:	4a1b      	ldr	r2, [pc, #108]	@ (80165ec <tcp_process+0x7cc>)
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6013      	str	r3, [r2, #0]
 8016584:	f003 f89c 	bl	80196c0 <tcp_timer_needed>
 8016588:	e026      	b.n	80165d8 <tcp_process+0x7b8>
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f000 f93c 	bl	8016808 <tcp_receive>
 8016590:	4b17      	ldr	r3, [pc, #92]	@ (80165f0 <tcp_process+0x7d0>)
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	f003 0310 	and.w	r3, r3, #16
 8016598:	2b00      	cmp	r3, #0
 801659a:	d01f      	beq.n	80165dc <tcp_process+0x7bc>
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80165a0:	4b14      	ldr	r3, [pc, #80]	@ (80165f4 <tcp_process+0x7d4>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d119      	bne.n	80165dc <tcp_process+0x7bc>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d115      	bne.n	80165dc <tcp_process+0x7bc>
 80165b0:	4b11      	ldr	r3, [pc, #68]	@ (80165f8 <tcp_process+0x7d8>)
 80165b2:	781b      	ldrb	r3, [r3, #0]
 80165b4:	f043 0310 	orr.w	r3, r3, #16
 80165b8:	b2da      	uxtb	r2, r3
 80165ba:	4b0f      	ldr	r3, [pc, #60]	@ (80165f8 <tcp_process+0x7d8>)
 80165bc:	701a      	strb	r2, [r3, #0]
 80165be:	e00d      	b.n	80165dc <tcp_process+0x7bc>
 80165c0:	bf00      	nop
 80165c2:	e00c      	b.n	80165de <tcp_process+0x7be>
 80165c4:	bf00      	nop
 80165c6:	e00a      	b.n	80165de <tcp_process+0x7be>
 80165c8:	bf00      	nop
 80165ca:	e008      	b.n	80165de <tcp_process+0x7be>
 80165cc:	bf00      	nop
 80165ce:	e006      	b.n	80165de <tcp_process+0x7be>
 80165d0:	bf00      	nop
 80165d2:	e004      	b.n	80165de <tcp_process+0x7be>
 80165d4:	bf00      	nop
 80165d6:	e002      	b.n	80165de <tcp_process+0x7be>
 80165d8:	bf00      	nop
 80165da:	e000      	b.n	80165de <tcp_process+0x7be>
 80165dc:	bf00      	nop
 80165de:	2300      	movs	r3, #0
 80165e0:	4618      	mov	r0, r3
 80165e2:	3724      	adds	r7, #36	@ 0x24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd90      	pop	{r4, r7, pc}
 80165e8:	2000f3f0 	.word	0x2000f3f0
 80165ec:	2000f3ec 	.word	0x2000f3ec
 80165f0:	2000f420 	.word	0x2000f420
 80165f4:	2000f418 	.word	0x2000f418
 80165f8:	2000f421 	.word	0x2000f421
 80165fc:	2000f3e8 	.word	0x2000f3e8

08016600 <tcp_oos_insert_segment>:
 8016600:	b590      	push	{r4, r7, lr}
 8016602:	b085      	sub	sp, #20
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
 8016608:	6039      	str	r1, [r7, #0]
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d106      	bne.n	801661e <tcp_oos_insert_segment+0x1e>
 8016610:	4b3b      	ldr	r3, [pc, #236]	@ (8016700 <tcp_oos_insert_segment+0x100>)
 8016612:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016616:	493b      	ldr	r1, [pc, #236]	@ (8016704 <tcp_oos_insert_segment+0x104>)
 8016618:	483b      	ldr	r0, [pc, #236]	@ (8016708 <tcp_oos_insert_segment+0x108>)
 801661a:	f007 f8b5 	bl	801d788 <iprintf>
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	899b      	ldrh	r3, [r3, #12]
 8016624:	b29b      	uxth	r3, r3
 8016626:	4618      	mov	r0, r3
 8016628:	f7fb f8c6 	bl	80117b8 <lwip_htons>
 801662c:	4603      	mov	r3, r0
 801662e:	b2db      	uxtb	r3, r3
 8016630:	f003 0301 	and.w	r3, r3, #1
 8016634:	2b00      	cmp	r3, #0
 8016636:	d028      	beq.n	801668a <tcp_oos_insert_segment+0x8a>
 8016638:	6838      	ldr	r0, [r7, #0]
 801663a:	f7fe f977 	bl	801492c <tcp_segs_free>
 801663e:	2300      	movs	r3, #0
 8016640:	603b      	str	r3, [r7, #0]
 8016642:	e056      	b.n	80166f2 <tcp_oos_insert_segment+0xf2>
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	899b      	ldrh	r3, [r3, #12]
 801664a:	b29b      	uxth	r3, r3
 801664c:	4618      	mov	r0, r3
 801664e:	f7fb f8b3 	bl	80117b8 <lwip_htons>
 8016652:	4603      	mov	r3, r0
 8016654:	b2db      	uxtb	r3, r3
 8016656:	f003 0301 	and.w	r3, r3, #1
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00d      	beq.n	801667a <tcp_oos_insert_segment+0x7a>
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	899b      	ldrh	r3, [r3, #12]
 8016664:	b29c      	uxth	r4, r3
 8016666:	2001      	movs	r0, #1
 8016668:	f7fb f8a6 	bl	80117b8 <lwip_htons>
 801666c:	4603      	mov	r3, r0
 801666e:	461a      	mov	r2, r3
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	4322      	orrs	r2, r4
 8016676:	b292      	uxth	r2, r2
 8016678:	819a      	strh	r2, [r3, #12]
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	60fb      	str	r3, [r7, #12]
 801667e:	683b      	ldr	r3, [r7, #0]
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	603b      	str	r3, [r7, #0]
 8016684:	68f8      	ldr	r0, [r7, #12]
 8016686:	f7fe f966 	bl	8014956 <tcp_seg_free>
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d00e      	beq.n	80166ae <tcp_oos_insert_segment+0xae>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	891b      	ldrh	r3, [r3, #8]
 8016694:	461a      	mov	r2, r3
 8016696:	4b1d      	ldr	r3, [pc, #116]	@ (801670c <tcp_oos_insert_segment+0x10c>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	441a      	add	r2, r3
 801669c:	683b      	ldr	r3, [r7, #0]
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	6839      	ldr	r1, [r7, #0]
 80166a4:	8909      	ldrh	r1, [r1, #8]
 80166a6:	440b      	add	r3, r1
 80166a8:	1ad3      	subs	r3, r2, r3
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	daca      	bge.n	8016644 <tcp_oos_insert_segment+0x44>
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d01e      	beq.n	80166f2 <tcp_oos_insert_segment+0xf2>
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	891b      	ldrh	r3, [r3, #8]
 80166b8:	461a      	mov	r2, r3
 80166ba:	4b14      	ldr	r3, [pc, #80]	@ (801670c <tcp_oos_insert_segment+0x10c>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	441a      	add	r2, r3
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	685b      	ldr	r3, [r3, #4]
 80166c6:	1ad3      	subs	r3, r2, r3
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	dd12      	ble.n	80166f2 <tcp_oos_insert_segment+0xf2>
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	68db      	ldr	r3, [r3, #12]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	b29a      	uxth	r2, r3
 80166d4:	4b0d      	ldr	r3, [pc, #52]	@ (801670c <tcp_oos_insert_segment+0x10c>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	b29b      	uxth	r3, r3
 80166da:	1ad3      	subs	r3, r2, r3
 80166dc:	b29a      	uxth	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	811a      	strh	r2, [r3, #8]
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	685a      	ldr	r2, [r3, #4]
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	891b      	ldrh	r3, [r3, #8]
 80166ea:	4619      	mov	r1, r3
 80166ec:	4610      	mov	r0, r2
 80166ee:	f7fc fb05 	bl	8012cfc <pbuf_realloc>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	683a      	ldr	r2, [r7, #0]
 80166f6:	601a      	str	r2, [r3, #0]
 80166f8:	bf00      	nop
 80166fa:	3714      	adds	r7, #20
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd90      	pop	{r4, r7, pc}
 8016700:	08021e1c 	.word	0x08021e1c
 8016704:	080220dc 	.word	0x080220dc
 8016708:	08021e68 	.word	0x08021e68
 801670c:	2000f414 	.word	0x2000f414

08016710 <tcp_free_acked_segments>:
 8016710:	b5b0      	push	{r4, r5, r7, lr}
 8016712:	b086      	sub	sp, #24
 8016714:	af00      	add	r7, sp, #0
 8016716:	60f8      	str	r0, [r7, #12]
 8016718:	60b9      	str	r1, [r7, #8]
 801671a:	607a      	str	r2, [r7, #4]
 801671c:	603b      	str	r3, [r7, #0]
 801671e:	e03e      	b.n	801679e <tcp_free_acked_segments+0x8e>
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	617b      	str	r3, [r7, #20]
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	60bb      	str	r3, [r7, #8]
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	4618      	mov	r0, r3
 8016730:	f7fc fcf8 	bl	8013124 <pbuf_clen>
 8016734:	4603      	mov	r3, r0
 8016736:	827b      	strh	r3, [r7, #18]
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801673e:	8a7a      	ldrh	r2, [r7, #18]
 8016740:	429a      	cmp	r2, r3
 8016742:	d906      	bls.n	8016752 <tcp_free_acked_segments+0x42>
 8016744:	4b2a      	ldr	r3, [pc, #168]	@ (80167f0 <tcp_free_acked_segments+0xe0>)
 8016746:	f240 4257 	movw	r2, #1111	@ 0x457
 801674a:	492a      	ldr	r1, [pc, #168]	@ (80167f4 <tcp_free_acked_segments+0xe4>)
 801674c:	482a      	ldr	r0, [pc, #168]	@ (80167f8 <tcp_free_acked_segments+0xe8>)
 801674e:	f007 f81b 	bl	801d788 <iprintf>
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016758:	8a7b      	ldrh	r3, [r7, #18]
 801675a:	1ad3      	subs	r3, r2, r3
 801675c:	b29a      	uxth	r2, r3
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8016764:	697b      	ldr	r3, [r7, #20]
 8016766:	891a      	ldrh	r2, [r3, #8]
 8016768:	4b24      	ldr	r3, [pc, #144]	@ (80167fc <tcp_free_acked_segments+0xec>)
 801676a:	881b      	ldrh	r3, [r3, #0]
 801676c:	4413      	add	r3, r2
 801676e:	b29a      	uxth	r2, r3
 8016770:	4b22      	ldr	r3, [pc, #136]	@ (80167fc <tcp_free_acked_segments+0xec>)
 8016772:	801a      	strh	r2, [r3, #0]
 8016774:	6978      	ldr	r0, [r7, #20]
 8016776:	f7fe f8ee 	bl	8014956 <tcp_seg_free>
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016780:	2b00      	cmp	r3, #0
 8016782:	d00c      	beq.n	801679e <tcp_free_acked_segments+0x8e>
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d109      	bne.n	801679e <tcp_free_acked_segments+0x8e>
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d106      	bne.n	801679e <tcp_free_acked_segments+0x8e>
 8016790:	4b17      	ldr	r3, [pc, #92]	@ (80167f0 <tcp_free_acked_segments+0xe0>)
 8016792:	f240 4261 	movw	r2, #1121	@ 0x461
 8016796:	491a      	ldr	r1, [pc, #104]	@ (8016800 <tcp_free_acked_segments+0xf0>)
 8016798:	4817      	ldr	r0, [pc, #92]	@ (80167f8 <tcp_free_acked_segments+0xe8>)
 801679a:	f006 fff5 	bl	801d788 <iprintf>
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d020      	beq.n	80167e6 <tcp_free_acked_segments+0xd6>
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	68db      	ldr	r3, [r3, #12]
 80167a8:	685b      	ldr	r3, [r3, #4]
 80167aa:	4618      	mov	r0, r3
 80167ac:	f7fb f819 	bl	80117e2 <lwip_htonl>
 80167b0:	4604      	mov	r4, r0
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	891b      	ldrh	r3, [r3, #8]
 80167b6:	461d      	mov	r5, r3
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	68db      	ldr	r3, [r3, #12]
 80167bc:	899b      	ldrh	r3, [r3, #12]
 80167be:	b29b      	uxth	r3, r3
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7fa fff9 	bl	80117b8 <lwip_htons>
 80167c6:	4603      	mov	r3, r0
 80167c8:	b2db      	uxtb	r3, r3
 80167ca:	f003 0303 	and.w	r3, r3, #3
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d001      	beq.n	80167d6 <tcp_free_acked_segments+0xc6>
 80167d2:	2301      	movs	r3, #1
 80167d4:	e000      	b.n	80167d8 <tcp_free_acked_segments+0xc8>
 80167d6:	2300      	movs	r3, #0
 80167d8:	442b      	add	r3, r5
 80167da:	18e2      	adds	r2, r4, r3
 80167dc:	4b09      	ldr	r3, [pc, #36]	@ (8016804 <tcp_free_acked_segments+0xf4>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	1ad3      	subs	r3, r2, r3
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	dd9c      	ble.n	8016720 <tcp_free_acked_segments+0x10>
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	4618      	mov	r0, r3
 80167ea:	3718      	adds	r7, #24
 80167ec:	46bd      	mov	sp, r7
 80167ee:	bdb0      	pop	{r4, r5, r7, pc}
 80167f0:	08021e1c 	.word	0x08021e1c
 80167f4:	08022104 	.word	0x08022104
 80167f8:	08021e68 	.word	0x08021e68
 80167fc:	2000f41c 	.word	0x2000f41c
 8016800:	0802212c 	.word	0x0802212c
 8016804:	2000f418 	.word	0x2000f418

08016808 <tcp_receive>:
 8016808:	b5b0      	push	{r4, r5, r7, lr}
 801680a:	b094      	sub	sp, #80	@ 0x50
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
 8016810:	2300      	movs	r3, #0
 8016812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d106      	bne.n	8016828 <tcp_receive+0x20>
 801681a:	4b91      	ldr	r3, [pc, #580]	@ (8016a60 <tcp_receive+0x258>)
 801681c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016820:	4990      	ldr	r1, [pc, #576]	@ (8016a64 <tcp_receive+0x25c>)
 8016822:	4891      	ldr	r0, [pc, #580]	@ (8016a68 <tcp_receive+0x260>)
 8016824:	f006 ffb0 	bl	801d788 <iprintf>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	7d1b      	ldrb	r3, [r3, #20]
 801682c:	2b03      	cmp	r3, #3
 801682e:	d806      	bhi.n	801683e <tcp_receive+0x36>
 8016830:	4b8b      	ldr	r3, [pc, #556]	@ (8016a60 <tcp_receive+0x258>)
 8016832:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016836:	498d      	ldr	r1, [pc, #564]	@ (8016a6c <tcp_receive+0x264>)
 8016838:	488b      	ldr	r0, [pc, #556]	@ (8016a68 <tcp_receive+0x260>)
 801683a:	f006 ffa5 	bl	801d788 <iprintf>
 801683e:	4b8c      	ldr	r3, [pc, #560]	@ (8016a70 <tcp_receive+0x268>)
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	f003 0310 	and.w	r3, r3, #16
 8016846:	2b00      	cmp	r3, #0
 8016848:	f000 8264 	beq.w	8016d14 <tcp_receive+0x50c>
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016852:	461a      	mov	r2, r3
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016858:	4413      	add	r3, r2
 801685a:	633b      	str	r3, [r7, #48]	@ 0x30
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016860:	4b84      	ldr	r3, [pc, #528]	@ (8016a74 <tcp_receive+0x26c>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	db1b      	blt.n	80168a2 <tcp_receive+0x9a>
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801686e:	4b81      	ldr	r3, [pc, #516]	@ (8016a74 <tcp_receive+0x26c>)
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	429a      	cmp	r2, r3
 8016874:	d106      	bne.n	8016884 <tcp_receive+0x7c>
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801687a:	4b7f      	ldr	r3, [pc, #508]	@ (8016a78 <tcp_receive+0x270>)
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	1ad3      	subs	r3, r2, r3
 8016880:	2b00      	cmp	r3, #0
 8016882:	db0e      	blt.n	80168a2 <tcp_receive+0x9a>
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016888:	4b7b      	ldr	r3, [pc, #492]	@ (8016a78 <tcp_receive+0x270>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	429a      	cmp	r2, r3
 801688e:	d125      	bne.n	80168dc <tcp_receive+0xd4>
 8016890:	4b7a      	ldr	r3, [pc, #488]	@ (8016a7c <tcp_receive+0x274>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	89db      	ldrh	r3, [r3, #14]
 8016896:	b29a      	uxth	r2, r3
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801689e:	429a      	cmp	r2, r3
 80168a0:	d91c      	bls.n	80168dc <tcp_receive+0xd4>
 80168a2:	4b76      	ldr	r3, [pc, #472]	@ (8016a7c <tcp_receive+0x274>)
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	89db      	ldrh	r3, [r3, #14]
 80168a8:	b29a      	uxth	r2, r3
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80168bc:	429a      	cmp	r2, r3
 80168be:	d205      	bcs.n	80168cc <tcp_receive+0xc4>
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80168cc:	4b69      	ldr	r3, [pc, #420]	@ (8016a74 <tcp_receive+0x26c>)
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80168d4:	4b68      	ldr	r3, [pc, #416]	@ (8016a78 <tcp_receive+0x270>)
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	659a      	str	r2, [r3, #88]	@ 0x58
 80168dc:	4b66      	ldr	r3, [pc, #408]	@ (8016a78 <tcp_receive+0x270>)
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168e4:	1ad3      	subs	r3, r2, r3
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	dc58      	bgt.n	801699c <tcp_receive+0x194>
 80168ea:	4b65      	ldr	r3, [pc, #404]	@ (8016a80 <tcp_receive+0x278>)
 80168ec:	881b      	ldrh	r3, [r3, #0]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d14b      	bne.n	801698a <tcp_receive+0x182>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80168fc:	4413      	add	r3, r2
 80168fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016900:	429a      	cmp	r2, r3
 8016902:	d142      	bne.n	801698a <tcp_receive+0x182>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801690a:	2b00      	cmp	r3, #0
 801690c:	db3d      	blt.n	801698a <tcp_receive+0x182>
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016912:	4b59      	ldr	r3, [pc, #356]	@ (8016a78 <tcp_receive+0x270>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	429a      	cmp	r2, r3
 8016918:	d137      	bne.n	801698a <tcp_receive+0x182>
 801691a:	2301      	movs	r3, #1
 801691c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016924:	2bff      	cmp	r3, #255	@ 0xff
 8016926:	d007      	beq.n	8016938 <tcp_receive+0x130>
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801692e:	3301      	adds	r3, #1
 8016930:	b2da      	uxtb	r2, r3
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801693e:	2b03      	cmp	r3, #3
 8016940:	d91b      	bls.n	801697a <tcp_receive+0x172>
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801694c:	4413      	add	r3, r2
 801694e:	b29a      	uxth	r2, r3
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016956:	429a      	cmp	r2, r3
 8016958:	d30a      	bcc.n	8016970 <tcp_receive+0x168>
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016964:	4413      	add	r3, r2
 8016966:	b29a      	uxth	r2, r3
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801696e:	e004      	b.n	801697a <tcp_receive+0x172>
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016976:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016980:	2b02      	cmp	r3, #2
 8016982:	d902      	bls.n	801698a <tcp_receive+0x182>
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f002 fb3f 	bl	8019008 <tcp_rexmit_fast>
 801698a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801698c:	2b00      	cmp	r3, #0
 801698e:	f040 8161 	bne.w	8016c54 <tcp_receive+0x44c>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	2200      	movs	r2, #0
 8016996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801699a:	e15b      	b.n	8016c54 <tcp_receive+0x44c>
 801699c:	4b36      	ldr	r3, [pc, #216]	@ (8016a78 <tcp_receive+0x270>)
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	3b01      	subs	r3, #1
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	f2c0 814e 	blt.w	8016c4a <tcp_receive+0x442>
 80169ae:	4b32      	ldr	r3, [pc, #200]	@ (8016a78 <tcp_receive+0x270>)
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80169b6:	1ad3      	subs	r3, r2, r3
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	f300 8146 	bgt.w	8016c4a <tcp_receive+0x442>
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	8b5b      	ldrh	r3, [r3, #26]
 80169c2:	f003 0304 	and.w	r3, r3, #4
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d010      	beq.n	80169ec <tcp_receive+0x1e4>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	8b5b      	ldrh	r3, [r3, #26]
 80169ce:	f023 0304 	bic.w	r3, r3, #4
 80169d2:	b29a      	uxth	r2, r3
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	835a      	strh	r2, [r3, #26]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2200      	movs	r2, #0
 80169f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80169fa:	10db      	asrs	r3, r3, #3
 80169fc:	b21b      	sxth	r3, r3
 80169fe:	b29a      	uxth	r2, r3
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	4413      	add	r3, r2
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	b21a      	sxth	r2, r3
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8016a14:	4b18      	ldr	r3, [pc, #96]	@ (8016a78 <tcp_receive+0x270>)
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016a1e:	b29b      	uxth	r3, r3
 8016a20:	1ad3      	subs	r3, r2, r3
 8016a22:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2200      	movs	r2, #0
 8016a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016a2c:	4b12      	ldr	r3, [pc, #72]	@ (8016a78 <tcp_receive+0x270>)
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	645a      	str	r2, [r3, #68]	@ 0x44
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	7d1b      	ldrb	r3, [r3, #20]
 8016a38:	2b03      	cmp	r3, #3
 8016a3a:	f240 8097 	bls.w	8016b6c <tcp_receive+0x364>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d245      	bcs.n	8016ada <tcp_receive+0x2d2>
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	8b5b      	ldrh	r3, [r3, #26]
 8016a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d014      	beq.n	8016a84 <tcp_receive+0x27c>
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	e013      	b.n	8016a86 <tcp_receive+0x27e>
 8016a5e:	bf00      	nop
 8016a60:	08021e1c 	.word	0x08021e1c
 8016a64:	0802214c 	.word	0x0802214c
 8016a68:	08021e68 	.word	0x08021e68
 8016a6c:	08022168 	.word	0x08022168
 8016a70:	2000f420 	.word	0x2000f420
 8016a74:	2000f414 	.word	0x2000f414
 8016a78:	2000f418 	.word	0x2000f418
 8016a7c:	2000f404 	.word	0x2000f404
 8016a80:	2000f41e 	.word	0x2000f41e
 8016a84:	2302      	movs	r3, #2
 8016a86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8016a8a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a94:	fb12 f303 	smulbb	r3, r2, r3
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016a9c:	4293      	cmp	r3, r2
 8016a9e:	bf28      	it	cs
 8016aa0:	4613      	movcs	r3, r2
 8016aa2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016aaa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016aac:	4413      	add	r3, r2
 8016aae:	b29a      	uxth	r2, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d309      	bcc.n	8016ace <tcp_receive+0x2c6>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016ac0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016ac2:	4413      	add	r3, r2
 8016ac4:	b29a      	uxth	r2, r3
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016acc:	e04e      	b.n	8016b6c <tcp_receive+0x364>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ad4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016ad8:	e048      	b.n	8016b6c <tcp_receive+0x364>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016ae0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016ae2:	4413      	add	r3, r2
 8016ae4:	b29a      	uxth	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016aec:	429a      	cmp	r2, r3
 8016aee:	d309      	bcc.n	8016b04 <tcp_receive+0x2fc>
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016af6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016af8:	4413      	add	r3, r2
 8016afa:	b29a      	uxth	r2, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016b02:	e004      	b.n	8016b0e <tcp_receive+0x306>
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d326      	bcc.n	8016b6c <tcp_receive+0x364>
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	b29a      	uxth	r2, r3
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b3e:	4413      	add	r3, r2
 8016b40:	b29a      	uxth	r2, r3
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d30a      	bcc.n	8016b62 <tcp_receive+0x35a>
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016b56:	4413      	add	r3, r2
 8016b58:	b29a      	uxth	r2, r3
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016b60:	e004      	b.n	8016b6c <tcp_receive+0x364>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b68:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b74:	4a98      	ldr	r2, [pc, #608]	@ (8016dd8 <tcp_receive+0x5d0>)
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f7ff fdca 	bl	8016710 <tcp_free_acked_segments>
 8016b7c:	4602      	mov	r2, r0
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	671a      	str	r2, [r3, #112]	@ 0x70
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b8a:	4a94      	ldr	r2, [pc, #592]	@ (8016ddc <tcp_receive+0x5d4>)
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7ff fdbf 	bl	8016710 <tcp_free_acked_segments>
 8016b92:	4602      	mov	r2, r0
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d104      	bne.n	8016baa <tcp_receive+0x3a2>
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016ba8:	e002      	b.n	8016bb0 <tcp_receive+0x3a8>
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2200      	movs	r2, #0
 8016bae:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	771a      	strb	r2, [r3, #28]
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d103      	bne.n	8016bc6 <tcp_receive+0x3be>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	2200      	movs	r2, #0
 8016bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016bcc:	4b84      	ldr	r3, [pc, #528]	@ (8016de0 <tcp_receive+0x5d8>)
 8016bce:	881b      	ldrh	r3, [r3, #0]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	b29a      	uxth	r2, r3
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	8b5b      	ldrh	r3, [r3, #26]
 8016bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d035      	beq.n	8016c52 <tcp_receive+0x44a>
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d118      	bne.n	8016c20 <tcp_receive+0x418>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00c      	beq.n	8016c10 <tcp_receive+0x408>
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bfe:	68db      	ldr	r3, [r3, #12]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fa fded 	bl	80117e2 <lwip_htonl>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	1ae3      	subs	r3, r4, r3
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	dc20      	bgt.n	8016c52 <tcp_receive+0x44a>
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	8b5b      	ldrh	r3, [r3, #26]
 8016c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c18:	b29a      	uxth	r2, r3
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	835a      	strh	r2, [r3, #26]
 8016c1e:	e018      	b.n	8016c52 <tcp_receive+0x44a>
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c28:	68db      	ldr	r3, [r3, #12]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7fa fdd8 	bl	80117e2 <lwip_htonl>
 8016c32:	4603      	mov	r3, r0
 8016c34:	1ae3      	subs	r3, r4, r3
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	dc0b      	bgt.n	8016c52 <tcp_receive+0x44a>
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	8b5b      	ldrh	r3, [r3, #26]
 8016c3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016c42:	b29a      	uxth	r2, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	835a      	strh	r2, [r3, #26]
 8016c48:	e003      	b.n	8016c52 <tcp_receive+0x44a>
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f002 fbc8 	bl	80193e0 <tcp_send_empty_ack>
 8016c50:	e000      	b.n	8016c54 <tcp_receive+0x44c>
 8016c52:	bf00      	nop
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d05b      	beq.n	8016d14 <tcp_receive+0x50c>
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c60:	4b60      	ldr	r3, [pc, #384]	@ (8016de4 <tcp_receive+0x5dc>)
 8016c62:	681b      	ldr	r3, [r3, #0]
 8016c64:	1ad3      	subs	r3, r2, r3
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	da54      	bge.n	8016d14 <tcp_receive+0x50c>
 8016c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8016de8 <tcp_receive+0x5e0>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	b29a      	uxth	r2, r3
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	1ad3      	subs	r3, r2, r3
 8016c78:	b29b      	uxth	r3, r3
 8016c7a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016c7e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016c88:	10db      	asrs	r3, r3, #3
 8016c8a:	b21b      	sxth	r3, r3
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	1ad3      	subs	r3, r2, r3
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016c9c:	b29a      	uxth	r2, r3
 8016c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ca2:	4413      	add	r3, r2
 8016ca4:	b29b      	uxth	r3, r3
 8016ca6:	b21a      	sxth	r2, r3
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8016cac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	da05      	bge.n	8016cc0 <tcp_receive+0x4b8>
 8016cb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016cb8:	425b      	negs	r3, r3
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016cc0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016cca:	109b      	asrs	r3, r3, #2
 8016ccc:	b21b      	sxth	r3, r3
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	1ad3      	subs	r3, r2, r3
 8016cd2:	b29b      	uxth	r3, r3
 8016cd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016cde:	b29a      	uxth	r2, r3
 8016ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ce4:	4413      	add	r3, r2
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	b21a      	sxth	r2, r3
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016cf4:	10db      	asrs	r3, r3, #3
 8016cf6:	b21b      	sxth	r3, r3
 8016cf8:	b29a      	uxth	r2, r3
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016d00:	b29b      	uxth	r3, r3
 8016d02:	4413      	add	r3, r2
 8016d04:	b29b      	uxth	r3, r3
 8016d06:	b21a      	sxth	r2, r3
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2200      	movs	r2, #0
 8016d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8016d14:	4b35      	ldr	r3, [pc, #212]	@ (8016dec <tcp_receive+0x5e4>)
 8016d16:	881b      	ldrh	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	f000 84df 	beq.w	80176dc <tcp_receive+0xed4>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	7d1b      	ldrb	r3, [r3, #20]
 8016d22:	2b06      	cmp	r3, #6
 8016d24:	f200 84da 	bhi.w	80176dc <tcp_receive+0xed4>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d2c:	4b30      	ldr	r3, [pc, #192]	@ (8016df0 <tcp_receive+0x5e8>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	1ad3      	subs	r3, r2, r3
 8016d32:	3b01      	subs	r3, #1
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	f2c0 808f 	blt.w	8016e58 <tcp_receive+0x650>
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8016dec <tcp_receive+0x5e4>)
 8016d40:	881b      	ldrh	r3, [r3, #0]
 8016d42:	4619      	mov	r1, r3
 8016d44:	4b2a      	ldr	r3, [pc, #168]	@ (8016df0 <tcp_receive+0x5e8>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	440b      	add	r3, r1
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	f300 8082 	bgt.w	8016e58 <tcp_receive+0x650>
 8016d54:	4b27      	ldr	r3, [pc, #156]	@ (8016df4 <tcp_receive+0x5ec>)
 8016d56:	685b      	ldr	r3, [r3, #4]
 8016d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d5e:	4b24      	ldr	r3, [pc, #144]	@ (8016df0 <tcp_receive+0x5e8>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	1ad3      	subs	r3, r2, r3
 8016d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8016d66:	4b23      	ldr	r3, [pc, #140]	@ (8016df4 <tcp_receive+0x5ec>)
 8016d68:	685b      	ldr	r3, [r3, #4]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d106      	bne.n	8016d7c <tcp_receive+0x574>
 8016d6e:	4b22      	ldr	r3, [pc, #136]	@ (8016df8 <tcp_receive+0x5f0>)
 8016d70:	f240 5294 	movw	r2, #1428	@ 0x594
 8016d74:	4921      	ldr	r1, [pc, #132]	@ (8016dfc <tcp_receive+0x5f4>)
 8016d76:	4822      	ldr	r0, [pc, #136]	@ (8016e00 <tcp_receive+0x5f8>)
 8016d78:	f006 fd06 	bl	801d788 <iprintf>
 8016d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d7e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016d82:	4293      	cmp	r3, r2
 8016d84:	d906      	bls.n	8016d94 <tcp_receive+0x58c>
 8016d86:	4b1c      	ldr	r3, [pc, #112]	@ (8016df8 <tcp_receive+0x5f0>)
 8016d88:	f240 5295 	movw	r2, #1429	@ 0x595
 8016d8c:	491d      	ldr	r1, [pc, #116]	@ (8016e04 <tcp_receive+0x5fc>)
 8016d8e:	481c      	ldr	r0, [pc, #112]	@ (8016e00 <tcp_receive+0x5f8>)
 8016d90:	f006 fcfa 	bl	801d788 <iprintf>
 8016d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8016d9a:	4b16      	ldr	r3, [pc, #88]	@ (8016df4 <tcp_receive+0x5ec>)
 8016d9c:	685b      	ldr	r3, [r3, #4]
 8016d9e:	891b      	ldrh	r3, [r3, #8]
 8016da0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d906      	bls.n	8016db6 <tcp_receive+0x5ae>
 8016da8:	4b13      	ldr	r3, [pc, #76]	@ (8016df8 <tcp_receive+0x5f0>)
 8016daa:	f240 5297 	movw	r2, #1431	@ 0x597
 8016dae:	4916      	ldr	r1, [pc, #88]	@ (8016e08 <tcp_receive+0x600>)
 8016db0:	4813      	ldr	r0, [pc, #76]	@ (8016e00 <tcp_receive+0x5f8>)
 8016db2:	f006 fce9 	bl	801d788 <iprintf>
 8016db6:	4b0f      	ldr	r3, [pc, #60]	@ (8016df4 <tcp_receive+0x5ec>)
 8016db8:	891a      	ldrh	r2, [r3, #8]
 8016dba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016dbe:	1ad3      	subs	r3, r2, r3
 8016dc0:	b29a      	uxth	r2, r3
 8016dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8016df4 <tcp_receive+0x5ec>)
 8016dc4:	811a      	strh	r2, [r3, #8]
 8016dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8016df4 <tcp_receive+0x5ec>)
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	891a      	ldrh	r2, [r3, #8]
 8016dcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016dd0:	1ad3      	subs	r3, r2, r3
 8016dd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016dd4:	e02a      	b.n	8016e2c <tcp_receive+0x624>
 8016dd6:	bf00      	nop
 8016dd8:	08022184 	.word	0x08022184
 8016ddc:	0802218c 	.word	0x0802218c
 8016de0:	2000f41c 	.word	0x2000f41c
 8016de4:	2000f418 	.word	0x2000f418
 8016de8:	2000f3dc 	.word	0x2000f3dc
 8016dec:	2000f41e 	.word	0x2000f41e
 8016df0:	2000f414 	.word	0x2000f414
 8016df4:	2000f3f4 	.word	0x2000f3f4
 8016df8:	08021e1c 	.word	0x08021e1c
 8016dfc:	08022194 	.word	0x08022194
 8016e00:	08021e68 	.word	0x08021e68
 8016e04:	080221a4 	.word	0x080221a4
 8016e08:	080221b4 	.word	0x080221b4
 8016e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e0e:	895b      	ldrh	r3, [r3, #10]
 8016e10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016e14:	1ad3      	subs	r3, r2, r3
 8016e16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8016e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016e1e:	811a      	strh	r2, [r3, #8]
 8016e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e22:	2200      	movs	r2, #0
 8016e24:	815a      	strh	r2, [r3, #10]
 8016e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8016e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e2e:	895b      	ldrh	r3, [r3, #10]
 8016e30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d8e9      	bhi.n	8016e0c <tcp_receive+0x604>
 8016e38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016e40:	f7fc f85c 	bl	8012efc <pbuf_remove_header>
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e48:	4a90      	ldr	r2, [pc, #576]	@ (801708c <tcp_receive+0x884>)
 8016e4a:	6013      	str	r3, [r2, #0]
 8016e4c:	4b90      	ldr	r3, [pc, #576]	@ (8017090 <tcp_receive+0x888>)
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	4a8e      	ldr	r2, [pc, #568]	@ (801708c <tcp_receive+0x884>)
 8016e52:	6812      	ldr	r2, [r2, #0]
 8016e54:	605a      	str	r2, [r3, #4]
 8016e56:	e00d      	b.n	8016e74 <tcp_receive+0x66c>
 8016e58:	4b8c      	ldr	r3, [pc, #560]	@ (801708c <tcp_receive+0x884>)
 8016e5a:	681a      	ldr	r2, [r3, #0]
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e60:	1ad3      	subs	r3, r2, r3
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	da06      	bge.n	8016e74 <tcp_receive+0x66c>
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	8b5b      	ldrh	r3, [r3, #26]
 8016e6a:	f043 0302 	orr.w	r3, r3, #2
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	835a      	strh	r2, [r3, #26]
 8016e74:	4b85      	ldr	r3, [pc, #532]	@ (801708c <tcp_receive+0x884>)
 8016e76:	681a      	ldr	r2, [r3, #0]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	f2c0 8427 	blt.w	80176d2 <tcp_receive+0xeca>
 8016e84:	4b81      	ldr	r3, [pc, #516]	@ (801708c <tcp_receive+0x884>)
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e8c:	6879      	ldr	r1, [r7, #4]
 8016e8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016e90:	440b      	add	r3, r1
 8016e92:	1ad3      	subs	r3, r2, r3
 8016e94:	3301      	adds	r3, #1
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	f300 841b 	bgt.w	80176d2 <tcp_receive+0xeca>
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ea0:	4b7a      	ldr	r3, [pc, #488]	@ (801708c <tcp_receive+0x884>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	f040 8298 	bne.w	80173da <tcp_receive+0xbd2>
 8016eaa:	4b79      	ldr	r3, [pc, #484]	@ (8017090 <tcp_receive+0x888>)
 8016eac:	891c      	ldrh	r4, [r3, #8]
 8016eae:	4b78      	ldr	r3, [pc, #480]	@ (8017090 <tcp_receive+0x888>)
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	899b      	ldrh	r3, [r3, #12]
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fa fc7e 	bl	80117b8 <lwip_htons>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	b2db      	uxtb	r3, r3
 8016ec0:	f003 0303 	and.w	r3, r3, #3
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d001      	beq.n	8016ecc <tcp_receive+0x6c4>
 8016ec8:	2301      	movs	r3, #1
 8016eca:	e000      	b.n	8016ece <tcp_receive+0x6c6>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	4423      	add	r3, r4
 8016ed0:	b29a      	uxth	r2, r3
 8016ed2:	4b70      	ldr	r3, [pc, #448]	@ (8017094 <tcp_receive+0x88c>)
 8016ed4:	801a      	strh	r2, [r3, #0]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016eda:	4b6e      	ldr	r3, [pc, #440]	@ (8017094 <tcp_receive+0x88c>)
 8016edc:	881b      	ldrh	r3, [r3, #0]
 8016ede:	429a      	cmp	r2, r3
 8016ee0:	d274      	bcs.n	8016fcc <tcp_receive+0x7c4>
 8016ee2:	4b6b      	ldr	r3, [pc, #428]	@ (8017090 <tcp_receive+0x888>)
 8016ee4:	68db      	ldr	r3, [r3, #12]
 8016ee6:	899b      	ldrh	r3, [r3, #12]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7fa fc64 	bl	80117b8 <lwip_htons>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	b2db      	uxtb	r3, r3
 8016ef4:	f003 0301 	and.w	r3, r3, #1
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d01e      	beq.n	8016f3a <tcp_receive+0x732>
 8016efc:	4b64      	ldr	r3, [pc, #400]	@ (8017090 <tcp_receive+0x888>)
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	899b      	ldrh	r3, [r3, #12]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	b21b      	sxth	r3, r3
 8016f06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016f0a:	b21c      	sxth	r4, r3
 8016f0c:	4b60      	ldr	r3, [pc, #384]	@ (8017090 <tcp_receive+0x888>)
 8016f0e:	68db      	ldr	r3, [r3, #12]
 8016f10:	899b      	ldrh	r3, [r3, #12]
 8016f12:	b29b      	uxth	r3, r3
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7fa fc4f 	bl	80117b8 <lwip_htons>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	b2db      	uxtb	r3, r3
 8016f1e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7fa fc47 	bl	80117b8 <lwip_htons>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	b21b      	sxth	r3, r3
 8016f2e:	4323      	orrs	r3, r4
 8016f30:	b21a      	sxth	r2, r3
 8016f32:	4b57      	ldr	r3, [pc, #348]	@ (8017090 <tcp_receive+0x888>)
 8016f34:	68db      	ldr	r3, [r3, #12]
 8016f36:	b292      	uxth	r2, r2
 8016f38:	819a      	strh	r2, [r3, #12]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016f3e:	4b54      	ldr	r3, [pc, #336]	@ (8017090 <tcp_receive+0x888>)
 8016f40:	811a      	strh	r2, [r3, #8]
 8016f42:	4b53      	ldr	r3, [pc, #332]	@ (8017090 <tcp_receive+0x888>)
 8016f44:	68db      	ldr	r3, [r3, #12]
 8016f46:	899b      	ldrh	r3, [r3, #12]
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7fa fc34 	bl	80117b8 <lwip_htons>
 8016f50:	4603      	mov	r3, r0
 8016f52:	b2db      	uxtb	r3, r3
 8016f54:	f003 0302 	and.w	r3, r3, #2
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d005      	beq.n	8016f68 <tcp_receive+0x760>
 8016f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8017090 <tcp_receive+0x888>)
 8016f5e:	891b      	ldrh	r3, [r3, #8]
 8016f60:	3b01      	subs	r3, #1
 8016f62:	b29a      	uxth	r2, r3
 8016f64:	4b4a      	ldr	r3, [pc, #296]	@ (8017090 <tcp_receive+0x888>)
 8016f66:	811a      	strh	r2, [r3, #8]
 8016f68:	4b49      	ldr	r3, [pc, #292]	@ (8017090 <tcp_receive+0x888>)
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	4a48      	ldr	r2, [pc, #288]	@ (8017090 <tcp_receive+0x888>)
 8016f6e:	8912      	ldrh	r2, [r2, #8]
 8016f70:	4611      	mov	r1, r2
 8016f72:	4618      	mov	r0, r3
 8016f74:	f7fb fec2 	bl	8012cfc <pbuf_realloc>
 8016f78:	4b45      	ldr	r3, [pc, #276]	@ (8017090 <tcp_receive+0x888>)
 8016f7a:	891c      	ldrh	r4, [r3, #8]
 8016f7c:	4b44      	ldr	r3, [pc, #272]	@ (8017090 <tcp_receive+0x888>)
 8016f7e:	68db      	ldr	r3, [r3, #12]
 8016f80:	899b      	ldrh	r3, [r3, #12]
 8016f82:	b29b      	uxth	r3, r3
 8016f84:	4618      	mov	r0, r3
 8016f86:	f7fa fc17 	bl	80117b8 <lwip_htons>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	b2db      	uxtb	r3, r3
 8016f8e:	f003 0303 	and.w	r3, r3, #3
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d001      	beq.n	8016f9a <tcp_receive+0x792>
 8016f96:	2301      	movs	r3, #1
 8016f98:	e000      	b.n	8016f9c <tcp_receive+0x794>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	4423      	add	r3, r4
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8017094 <tcp_receive+0x88c>)
 8016fa2:	801a      	strh	r2, [r3, #0]
 8016fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8017094 <tcp_receive+0x88c>)
 8016fa6:	881b      	ldrh	r3, [r3, #0]
 8016fa8:	461a      	mov	r2, r3
 8016faa:	4b38      	ldr	r3, [pc, #224]	@ (801708c <tcp_receive+0x884>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	441a      	add	r2, r3
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb4:	6879      	ldr	r1, [r7, #4]
 8016fb6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016fb8:	440b      	add	r3, r1
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d006      	beq.n	8016fcc <tcp_receive+0x7c4>
 8016fbe:	4b36      	ldr	r3, [pc, #216]	@ (8017098 <tcp_receive+0x890>)
 8016fc0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016fc4:	4935      	ldr	r1, [pc, #212]	@ (801709c <tcp_receive+0x894>)
 8016fc6:	4836      	ldr	r0, [pc, #216]	@ (80170a0 <tcp_receive+0x898>)
 8016fc8:	f006 fbde 	bl	801d788 <iprintf>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f000 80e6 	beq.w	80171a2 <tcp_receive+0x99a>
 8016fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8017090 <tcp_receive+0x888>)
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fbea 	bl	80117b8 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0301 	and.w	r3, r3, #1
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d010      	beq.n	8017012 <tcp_receive+0x80a>
 8016ff0:	e00a      	b.n	8017008 <tcp_receive+0x800>
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ff6:	60fb      	str	r3, [r7, #12]
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ffc:	681a      	ldr	r2, [r3, #0]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	675a      	str	r2, [r3, #116]	@ 0x74
 8017002:	68f8      	ldr	r0, [r7, #12]
 8017004:	f7fd fca7 	bl	8014956 <tcp_seg_free>
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801700c:	2b00      	cmp	r3, #0
 801700e:	d1f0      	bne.n	8016ff2 <tcp_receive+0x7ea>
 8017010:	e0c7      	b.n	80171a2 <tcp_receive+0x99a>
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017018:	e051      	b.n	80170be <tcp_receive+0x8b6>
 801701a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	899b      	ldrh	r3, [r3, #12]
 8017020:	b29b      	uxth	r3, r3
 8017022:	4618      	mov	r0, r3
 8017024:	f7fa fbc8 	bl	80117b8 <lwip_htons>
 8017028:	4603      	mov	r3, r0
 801702a:	b2db      	uxtb	r3, r3
 801702c:	f003 0301 	and.w	r3, r3, #1
 8017030:	2b00      	cmp	r3, #0
 8017032:	d03c      	beq.n	80170ae <tcp_receive+0x8a6>
 8017034:	4b16      	ldr	r3, [pc, #88]	@ (8017090 <tcp_receive+0x888>)
 8017036:	68db      	ldr	r3, [r3, #12]
 8017038:	899b      	ldrh	r3, [r3, #12]
 801703a:	b29b      	uxth	r3, r3
 801703c:	4618      	mov	r0, r3
 801703e:	f7fa fbbb 	bl	80117b8 <lwip_htons>
 8017042:	4603      	mov	r3, r0
 8017044:	b2db      	uxtb	r3, r3
 8017046:	f003 0302 	and.w	r3, r3, #2
 801704a:	2b00      	cmp	r3, #0
 801704c:	d12f      	bne.n	80170ae <tcp_receive+0x8a6>
 801704e:	4b10      	ldr	r3, [pc, #64]	@ (8017090 <tcp_receive+0x888>)
 8017050:	68db      	ldr	r3, [r3, #12]
 8017052:	899b      	ldrh	r3, [r3, #12]
 8017054:	b29c      	uxth	r4, r3
 8017056:	2001      	movs	r0, #1
 8017058:	f7fa fbae 	bl	80117b8 <lwip_htons>
 801705c:	4603      	mov	r3, r0
 801705e:	461a      	mov	r2, r3
 8017060:	4b0b      	ldr	r3, [pc, #44]	@ (8017090 <tcp_receive+0x888>)
 8017062:	68db      	ldr	r3, [r3, #12]
 8017064:	4322      	orrs	r2, r4
 8017066:	b292      	uxth	r2, r2
 8017068:	819a      	strh	r2, [r3, #12]
 801706a:	4b09      	ldr	r3, [pc, #36]	@ (8017090 <tcp_receive+0x888>)
 801706c:	891c      	ldrh	r4, [r3, #8]
 801706e:	4b08      	ldr	r3, [pc, #32]	@ (8017090 <tcp_receive+0x888>)
 8017070:	68db      	ldr	r3, [r3, #12]
 8017072:	899b      	ldrh	r3, [r3, #12]
 8017074:	b29b      	uxth	r3, r3
 8017076:	4618      	mov	r0, r3
 8017078:	f7fa fb9e 	bl	80117b8 <lwip_htons>
 801707c:	4603      	mov	r3, r0
 801707e:	b2db      	uxtb	r3, r3
 8017080:	f003 0303 	and.w	r3, r3, #3
 8017084:	2b00      	cmp	r3, #0
 8017086:	d00d      	beq.n	80170a4 <tcp_receive+0x89c>
 8017088:	2301      	movs	r3, #1
 801708a:	e00c      	b.n	80170a6 <tcp_receive+0x89e>
 801708c:	2000f414 	.word	0x2000f414
 8017090:	2000f3f4 	.word	0x2000f3f4
 8017094:	2000f41e 	.word	0x2000f41e
 8017098:	08021e1c 	.word	0x08021e1c
 801709c:	080221c4 	.word	0x080221c4
 80170a0:	08021e68 	.word	0x08021e68
 80170a4:	2300      	movs	r3, #0
 80170a6:	4423      	add	r3, r4
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	4b98      	ldr	r3, [pc, #608]	@ (801730c <tcp_receive+0xb04>)
 80170ac:	801a      	strh	r2, [r3, #0]
 80170ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170b0:	613b      	str	r3, [r7, #16]
 80170b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80170b8:	6938      	ldr	r0, [r7, #16]
 80170ba:	f7fd fc4c 	bl	8014956 <tcp_seg_free>
 80170be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d00e      	beq.n	80170e2 <tcp_receive+0x8da>
 80170c4:	4b91      	ldr	r3, [pc, #580]	@ (801730c <tcp_receive+0xb04>)
 80170c6:	881b      	ldrh	r3, [r3, #0]
 80170c8:	461a      	mov	r2, r3
 80170ca:	4b91      	ldr	r3, [pc, #580]	@ (8017310 <tcp_receive+0xb08>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	441a      	add	r2, r3
 80170d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80170d8:	8909      	ldrh	r1, [r1, #8]
 80170da:	440b      	add	r3, r1
 80170dc:	1ad3      	subs	r3, r2, r3
 80170de:	2b00      	cmp	r3, #0
 80170e0:	da9b      	bge.n	801701a <tcp_receive+0x812>
 80170e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d059      	beq.n	801719c <tcp_receive+0x994>
 80170e8:	4b88      	ldr	r3, [pc, #544]	@ (801730c <tcp_receive+0xb04>)
 80170ea:	881b      	ldrh	r3, [r3, #0]
 80170ec:	461a      	mov	r2, r3
 80170ee:	4b88      	ldr	r3, [pc, #544]	@ (8017310 <tcp_receive+0xb08>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	441a      	add	r2, r3
 80170f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170f6:	68db      	ldr	r3, [r3, #12]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	1ad3      	subs	r3, r2, r3
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	dd4d      	ble.n	801719c <tcp_receive+0x994>
 8017100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017102:	68db      	ldr	r3, [r3, #12]
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	b29a      	uxth	r2, r3
 8017108:	4b81      	ldr	r3, [pc, #516]	@ (8017310 <tcp_receive+0xb08>)
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	b29b      	uxth	r3, r3
 801710e:	1ad3      	subs	r3, r2, r3
 8017110:	b29a      	uxth	r2, r3
 8017112:	4b80      	ldr	r3, [pc, #512]	@ (8017314 <tcp_receive+0xb0c>)
 8017114:	811a      	strh	r2, [r3, #8]
 8017116:	4b7f      	ldr	r3, [pc, #508]	@ (8017314 <tcp_receive+0xb0c>)
 8017118:	68db      	ldr	r3, [r3, #12]
 801711a:	899b      	ldrh	r3, [r3, #12]
 801711c:	b29b      	uxth	r3, r3
 801711e:	4618      	mov	r0, r3
 8017120:	f7fa fb4a 	bl	80117b8 <lwip_htons>
 8017124:	4603      	mov	r3, r0
 8017126:	b2db      	uxtb	r3, r3
 8017128:	f003 0302 	and.w	r3, r3, #2
 801712c:	2b00      	cmp	r3, #0
 801712e:	d005      	beq.n	801713c <tcp_receive+0x934>
 8017130:	4b78      	ldr	r3, [pc, #480]	@ (8017314 <tcp_receive+0xb0c>)
 8017132:	891b      	ldrh	r3, [r3, #8]
 8017134:	3b01      	subs	r3, #1
 8017136:	b29a      	uxth	r2, r3
 8017138:	4b76      	ldr	r3, [pc, #472]	@ (8017314 <tcp_receive+0xb0c>)
 801713a:	811a      	strh	r2, [r3, #8]
 801713c:	4b75      	ldr	r3, [pc, #468]	@ (8017314 <tcp_receive+0xb0c>)
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	4a74      	ldr	r2, [pc, #464]	@ (8017314 <tcp_receive+0xb0c>)
 8017142:	8912      	ldrh	r2, [r2, #8]
 8017144:	4611      	mov	r1, r2
 8017146:	4618      	mov	r0, r3
 8017148:	f7fb fdd8 	bl	8012cfc <pbuf_realloc>
 801714c:	4b71      	ldr	r3, [pc, #452]	@ (8017314 <tcp_receive+0xb0c>)
 801714e:	891c      	ldrh	r4, [r3, #8]
 8017150:	4b70      	ldr	r3, [pc, #448]	@ (8017314 <tcp_receive+0xb0c>)
 8017152:	68db      	ldr	r3, [r3, #12]
 8017154:	899b      	ldrh	r3, [r3, #12]
 8017156:	b29b      	uxth	r3, r3
 8017158:	4618      	mov	r0, r3
 801715a:	f7fa fb2d 	bl	80117b8 <lwip_htons>
 801715e:	4603      	mov	r3, r0
 8017160:	b2db      	uxtb	r3, r3
 8017162:	f003 0303 	and.w	r3, r3, #3
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <tcp_receive+0x966>
 801716a:	2301      	movs	r3, #1
 801716c:	e000      	b.n	8017170 <tcp_receive+0x968>
 801716e:	2300      	movs	r3, #0
 8017170:	4423      	add	r3, r4
 8017172:	b29a      	uxth	r2, r3
 8017174:	4b65      	ldr	r3, [pc, #404]	@ (801730c <tcp_receive+0xb04>)
 8017176:	801a      	strh	r2, [r3, #0]
 8017178:	4b64      	ldr	r3, [pc, #400]	@ (801730c <tcp_receive+0xb04>)
 801717a:	881b      	ldrh	r3, [r3, #0]
 801717c:	461a      	mov	r2, r3
 801717e:	4b64      	ldr	r3, [pc, #400]	@ (8017310 <tcp_receive+0xb08>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	441a      	add	r2, r3
 8017184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017186:	68db      	ldr	r3, [r3, #12]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	429a      	cmp	r2, r3
 801718c:	d006      	beq.n	801719c <tcp_receive+0x994>
 801718e:	4b62      	ldr	r3, [pc, #392]	@ (8017318 <tcp_receive+0xb10>)
 8017190:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017194:	4961      	ldr	r1, [pc, #388]	@ (801731c <tcp_receive+0xb14>)
 8017196:	4862      	ldr	r0, [pc, #392]	@ (8017320 <tcp_receive+0xb18>)
 8017198:	f006 faf6 	bl	801d788 <iprintf>
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80171a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80171a2:	4b5a      	ldr	r3, [pc, #360]	@ (801730c <tcp_receive+0xb04>)
 80171a4:	881b      	ldrh	r3, [r3, #0]
 80171a6:	461a      	mov	r2, r3
 80171a8:	4b59      	ldr	r3, [pc, #356]	@ (8017310 <tcp_receive+0xb08>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	441a      	add	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80171b6:	4b55      	ldr	r3, [pc, #340]	@ (801730c <tcp_receive+0xb04>)
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d206      	bcs.n	80171cc <tcp_receive+0x9c4>
 80171be:	4b56      	ldr	r3, [pc, #344]	@ (8017318 <tcp_receive+0xb10>)
 80171c0:	f240 6207 	movw	r2, #1543	@ 0x607
 80171c4:	4957      	ldr	r1, [pc, #348]	@ (8017324 <tcp_receive+0xb1c>)
 80171c6:	4856      	ldr	r0, [pc, #344]	@ (8017320 <tcp_receive+0xb18>)
 80171c8:	f006 fade 	bl	801d788 <iprintf>
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80171d0:	4b4e      	ldr	r3, [pc, #312]	@ (801730c <tcp_receive+0xb04>)
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	1ad3      	subs	r3, r2, r3
 80171d6:	b29a      	uxth	r2, r3
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f7fc fe93 	bl	8013f08 <tcp_update_rcv_ann_wnd>
 80171e2:	4b4c      	ldr	r3, [pc, #304]	@ (8017314 <tcp_receive+0xb0c>)
 80171e4:	685b      	ldr	r3, [r3, #4]
 80171e6:	891b      	ldrh	r3, [r3, #8]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d006      	beq.n	80171fa <tcp_receive+0x9f2>
 80171ec:	4b49      	ldr	r3, [pc, #292]	@ (8017314 <tcp_receive+0xb0c>)
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	4a4d      	ldr	r2, [pc, #308]	@ (8017328 <tcp_receive+0xb20>)
 80171f2:	6013      	str	r3, [r2, #0]
 80171f4:	4b47      	ldr	r3, [pc, #284]	@ (8017314 <tcp_receive+0xb0c>)
 80171f6:	2200      	movs	r2, #0
 80171f8:	605a      	str	r2, [r3, #4]
 80171fa:	4b46      	ldr	r3, [pc, #280]	@ (8017314 <tcp_receive+0xb0c>)
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	899b      	ldrh	r3, [r3, #12]
 8017200:	b29b      	uxth	r3, r3
 8017202:	4618      	mov	r0, r3
 8017204:	f7fa fad8 	bl	80117b8 <lwip_htons>
 8017208:	4603      	mov	r3, r0
 801720a:	b2db      	uxtb	r3, r3
 801720c:	f003 0301 	and.w	r3, r3, #1
 8017210:	2b00      	cmp	r3, #0
 8017212:	f000 80b8 	beq.w	8017386 <tcp_receive+0xb7e>
 8017216:	4b45      	ldr	r3, [pc, #276]	@ (801732c <tcp_receive+0xb24>)
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	f043 0320 	orr.w	r3, r3, #32
 801721e:	b2da      	uxtb	r2, r3
 8017220:	4b42      	ldr	r3, [pc, #264]	@ (801732c <tcp_receive+0xb24>)
 8017222:	701a      	strb	r2, [r3, #0]
 8017224:	e0af      	b.n	8017386 <tcp_receive+0xb7e>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801722a:	60bb      	str	r3, [r7, #8]
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017230:	68db      	ldr	r3, [r3, #12]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	4a36      	ldr	r2, [pc, #216]	@ (8017310 <tcp_receive+0xb08>)
 8017236:	6013      	str	r3, [r2, #0]
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	891b      	ldrh	r3, [r3, #8]
 801723c:	461c      	mov	r4, r3
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	899b      	ldrh	r3, [r3, #12]
 8017244:	b29b      	uxth	r3, r3
 8017246:	4618      	mov	r0, r3
 8017248:	f7fa fab6 	bl	80117b8 <lwip_htons>
 801724c:	4603      	mov	r3, r0
 801724e:	b2db      	uxtb	r3, r3
 8017250:	f003 0303 	and.w	r3, r3, #3
 8017254:	2b00      	cmp	r3, #0
 8017256:	d001      	beq.n	801725c <tcp_receive+0xa54>
 8017258:	2301      	movs	r3, #1
 801725a:	e000      	b.n	801725e <tcp_receive+0xa56>
 801725c:	2300      	movs	r3, #0
 801725e:	191a      	adds	r2, r3, r4
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017264:	441a      	add	r2, r3
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	625a      	str	r2, [r3, #36]	@ 0x24
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801726e:	461c      	mov	r4, r3
 8017270:	68bb      	ldr	r3, [r7, #8]
 8017272:	891b      	ldrh	r3, [r3, #8]
 8017274:	461d      	mov	r5, r3
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	899b      	ldrh	r3, [r3, #12]
 801727c:	b29b      	uxth	r3, r3
 801727e:	4618      	mov	r0, r3
 8017280:	f7fa fa9a 	bl	80117b8 <lwip_htons>
 8017284:	4603      	mov	r3, r0
 8017286:	b2db      	uxtb	r3, r3
 8017288:	f003 0303 	and.w	r3, r3, #3
 801728c:	2b00      	cmp	r3, #0
 801728e:	d001      	beq.n	8017294 <tcp_receive+0xa8c>
 8017290:	2301      	movs	r3, #1
 8017292:	e000      	b.n	8017296 <tcp_receive+0xa8e>
 8017294:	2300      	movs	r3, #0
 8017296:	442b      	add	r3, r5
 8017298:	429c      	cmp	r4, r3
 801729a:	d206      	bcs.n	80172aa <tcp_receive+0xaa2>
 801729c:	4b1e      	ldr	r3, [pc, #120]	@ (8017318 <tcp_receive+0xb10>)
 801729e:	f240 622b 	movw	r2, #1579	@ 0x62b
 80172a2:	4923      	ldr	r1, [pc, #140]	@ (8017330 <tcp_receive+0xb28>)
 80172a4:	481e      	ldr	r0, [pc, #120]	@ (8017320 <tcp_receive+0xb18>)
 80172a6:	f006 fa6f 	bl	801d788 <iprintf>
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	891b      	ldrh	r3, [r3, #8]
 80172ae:	461c      	mov	r4, r3
 80172b0:	68bb      	ldr	r3, [r7, #8]
 80172b2:	68db      	ldr	r3, [r3, #12]
 80172b4:	899b      	ldrh	r3, [r3, #12]
 80172b6:	b29b      	uxth	r3, r3
 80172b8:	4618      	mov	r0, r3
 80172ba:	f7fa fa7d 	bl	80117b8 <lwip_htons>
 80172be:	4603      	mov	r3, r0
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	f003 0303 	and.w	r3, r3, #3
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d001      	beq.n	80172ce <tcp_receive+0xac6>
 80172ca:	2301      	movs	r3, #1
 80172cc:	e000      	b.n	80172d0 <tcp_receive+0xac8>
 80172ce:	2300      	movs	r3, #0
 80172d0:	1919      	adds	r1, r3, r4
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80172d6:	b28b      	uxth	r3, r1
 80172d8:	1ad3      	subs	r3, r2, r3
 80172da:	b29a      	uxth	r2, r3
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	851a      	strh	r2, [r3, #40]	@ 0x28
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f7fc fe11 	bl	8013f08 <tcp_update_rcv_ann_wnd>
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	685b      	ldr	r3, [r3, #4]
 80172ea:	891b      	ldrh	r3, [r3, #8]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d028      	beq.n	8017342 <tcp_receive+0xb3a>
 80172f0:	4b0d      	ldr	r3, [pc, #52]	@ (8017328 <tcp_receive+0xb20>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d01d      	beq.n	8017334 <tcp_receive+0xb2c>
 80172f8:	4b0b      	ldr	r3, [pc, #44]	@ (8017328 <tcp_receive+0xb20>)
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	68bb      	ldr	r3, [r7, #8]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	4619      	mov	r1, r3
 8017302:	4610      	mov	r0, r2
 8017304:	f7fb ff4e 	bl	80131a4 <pbuf_cat>
 8017308:	e018      	b.n	801733c <tcp_receive+0xb34>
 801730a:	bf00      	nop
 801730c:	2000f41e 	.word	0x2000f41e
 8017310:	2000f414 	.word	0x2000f414
 8017314:	2000f3f4 	.word	0x2000f3f4
 8017318:	08021e1c 	.word	0x08021e1c
 801731c:	080221fc 	.word	0x080221fc
 8017320:	08021e68 	.word	0x08021e68
 8017324:	08022238 	.word	0x08022238
 8017328:	2000f424 	.word	0x2000f424
 801732c:	2000f421 	.word	0x2000f421
 8017330:	08022258 	.word	0x08022258
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	685b      	ldr	r3, [r3, #4]
 8017338:	4a70      	ldr	r2, [pc, #448]	@ (80174fc <tcp_receive+0xcf4>)
 801733a:	6013      	str	r3, [r2, #0]
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	2200      	movs	r2, #0
 8017340:	605a      	str	r2, [r3, #4]
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	68db      	ldr	r3, [r3, #12]
 8017346:	899b      	ldrh	r3, [r3, #12]
 8017348:	b29b      	uxth	r3, r3
 801734a:	4618      	mov	r0, r3
 801734c:	f7fa fa34 	bl	80117b8 <lwip_htons>
 8017350:	4603      	mov	r3, r0
 8017352:	b2db      	uxtb	r3, r3
 8017354:	f003 0301 	and.w	r3, r3, #1
 8017358:	2b00      	cmp	r3, #0
 801735a:	d00d      	beq.n	8017378 <tcp_receive+0xb70>
 801735c:	4b68      	ldr	r3, [pc, #416]	@ (8017500 <tcp_receive+0xcf8>)
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	f043 0320 	orr.w	r3, r3, #32
 8017364:	b2da      	uxtb	r2, r3
 8017366:	4b66      	ldr	r3, [pc, #408]	@ (8017500 <tcp_receive+0xcf8>)
 8017368:	701a      	strb	r2, [r3, #0]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	7d1b      	ldrb	r3, [r3, #20]
 801736e:	2b04      	cmp	r3, #4
 8017370:	d102      	bne.n	8017378 <tcp_receive+0xb70>
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	2207      	movs	r2, #7
 8017376:	751a      	strb	r2, [r3, #20]
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	675a      	str	r2, [r3, #116]	@ 0x74
 8017380:	68b8      	ldr	r0, [r7, #8]
 8017382:	f7fd fae8 	bl	8014956 <tcp_seg_free>
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801738a:	2b00      	cmp	r3, #0
 801738c:	d008      	beq.n	80173a0 <tcp_receive+0xb98>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685a      	ldr	r2, [r3, #4]
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801739a:	429a      	cmp	r2, r3
 801739c:	f43f af43 	beq.w	8017226 <tcp_receive+0xa1e>
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	8b5b      	ldrh	r3, [r3, #26]
 80173a4:	f003 0301 	and.w	r3, r3, #1
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d00e      	beq.n	80173ca <tcp_receive+0xbc2>
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	8b5b      	ldrh	r3, [r3, #26]
 80173b0:	f023 0301 	bic.w	r3, r3, #1
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	835a      	strh	r2, [r3, #26]
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	8b5b      	ldrh	r3, [r3, #26]
 80173be:	f043 0302 	orr.w	r3, r3, #2
 80173c2:	b29a      	uxth	r2, r3
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	835a      	strh	r2, [r3, #26]
 80173c8:	e187      	b.n	80176da <tcp_receive+0xed2>
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	8b5b      	ldrh	r3, [r3, #26]
 80173ce:	f043 0301 	orr.w	r3, r3, #1
 80173d2:	b29a      	uxth	r2, r3
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	835a      	strh	r2, [r3, #26]
 80173d8:	e17f      	b.n	80176da <tcp_receive+0xed2>
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d106      	bne.n	80173f0 <tcp_receive+0xbe8>
 80173e2:	4848      	ldr	r0, [pc, #288]	@ (8017504 <tcp_receive+0xcfc>)
 80173e4:	f7fd faee 	bl	80149c4 <tcp_seg_copy>
 80173e8:	4602      	mov	r2, r0
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	675a      	str	r2, [r3, #116]	@ 0x74
 80173ee:	e16c      	b.n	80176ca <tcp_receive+0xec2>
 80173f0:	2300      	movs	r3, #0
 80173f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80173f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80173fa:	e156      	b.n	80176aa <tcp_receive+0xea2>
 80173fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173fe:	68db      	ldr	r3, [r3, #12]
 8017400:	685a      	ldr	r2, [r3, #4]
 8017402:	4b41      	ldr	r3, [pc, #260]	@ (8017508 <tcp_receive+0xd00>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	429a      	cmp	r2, r3
 8017408:	d11d      	bne.n	8017446 <tcp_receive+0xc3e>
 801740a:	4b3e      	ldr	r3, [pc, #248]	@ (8017504 <tcp_receive+0xcfc>)
 801740c:	891a      	ldrh	r2, [r3, #8]
 801740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017410:	891b      	ldrh	r3, [r3, #8]
 8017412:	429a      	cmp	r2, r3
 8017414:	f240 814e 	bls.w	80176b4 <tcp_receive+0xeac>
 8017418:	483a      	ldr	r0, [pc, #232]	@ (8017504 <tcp_receive+0xcfc>)
 801741a:	f7fd fad3 	bl	80149c4 <tcp_seg_copy>
 801741e:	6178      	str	r0, [r7, #20]
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	2b00      	cmp	r3, #0
 8017424:	f000 8148 	beq.w	80176b8 <tcp_receive+0xeb0>
 8017428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801742a:	2b00      	cmp	r3, #0
 801742c:	d003      	beq.n	8017436 <tcp_receive+0xc2e>
 801742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017430:	697a      	ldr	r2, [r7, #20]
 8017432:	601a      	str	r2, [r3, #0]
 8017434:	e002      	b.n	801743c <tcp_receive+0xc34>
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	697a      	ldr	r2, [r7, #20]
 801743a:	675a      	str	r2, [r3, #116]	@ 0x74
 801743c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801743e:	6978      	ldr	r0, [r7, #20]
 8017440:	f7ff f8de 	bl	8016600 <tcp_oos_insert_segment>
 8017444:	e138      	b.n	80176b8 <tcp_receive+0xeb0>
 8017446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017448:	2b00      	cmp	r3, #0
 801744a:	d117      	bne.n	801747c <tcp_receive+0xc74>
 801744c:	4b2e      	ldr	r3, [pc, #184]	@ (8017508 <tcp_receive+0xd00>)
 801744e:	681a      	ldr	r2, [r3, #0]
 8017450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017452:	68db      	ldr	r3, [r3, #12]
 8017454:	685b      	ldr	r3, [r3, #4]
 8017456:	1ad3      	subs	r3, r2, r3
 8017458:	2b00      	cmp	r3, #0
 801745a:	da57      	bge.n	801750c <tcp_receive+0xd04>
 801745c:	4829      	ldr	r0, [pc, #164]	@ (8017504 <tcp_receive+0xcfc>)
 801745e:	f7fd fab1 	bl	80149c4 <tcp_seg_copy>
 8017462:	61b8      	str	r0, [r7, #24]
 8017464:	69bb      	ldr	r3, [r7, #24]
 8017466:	2b00      	cmp	r3, #0
 8017468:	f000 8128 	beq.w	80176bc <tcp_receive+0xeb4>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	69ba      	ldr	r2, [r7, #24]
 8017470:	675a      	str	r2, [r3, #116]	@ 0x74
 8017472:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017474:	69b8      	ldr	r0, [r7, #24]
 8017476:	f7ff f8c3 	bl	8016600 <tcp_oos_insert_segment>
 801747a:	e11f      	b.n	80176bc <tcp_receive+0xeb4>
 801747c:	4b22      	ldr	r3, [pc, #136]	@ (8017508 <tcp_receive+0xd00>)
 801747e:	681a      	ldr	r2, [r3, #0]
 8017480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017482:	68db      	ldr	r3, [r3, #12]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	3b01      	subs	r3, #1
 801748a:	2b00      	cmp	r3, #0
 801748c:	db3e      	blt.n	801750c <tcp_receive+0xd04>
 801748e:	4b1e      	ldr	r3, [pc, #120]	@ (8017508 <tcp_receive+0xd00>)
 8017490:	681a      	ldr	r2, [r3, #0]
 8017492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	3301      	adds	r3, #1
 801749c:	2b00      	cmp	r3, #0
 801749e:	dc35      	bgt.n	801750c <tcp_receive+0xd04>
 80174a0:	4818      	ldr	r0, [pc, #96]	@ (8017504 <tcp_receive+0xcfc>)
 80174a2:	f7fd fa8f 	bl	80149c4 <tcp_seg_copy>
 80174a6:	61f8      	str	r0, [r7, #28]
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	f000 8108 	beq.w	80176c0 <tcp_receive+0xeb8>
 80174b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174b2:	68db      	ldr	r3, [r3, #12]
 80174b4:	685b      	ldr	r3, [r3, #4]
 80174b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80174b8:	8912      	ldrh	r2, [r2, #8]
 80174ba:	441a      	add	r2, r3
 80174bc:	4b12      	ldr	r3, [pc, #72]	@ (8017508 <tcp_receive+0xd00>)
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	1ad3      	subs	r3, r2, r3
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	dd12      	ble.n	80174ec <tcp_receive+0xce4>
 80174c6:	4b10      	ldr	r3, [pc, #64]	@ (8017508 <tcp_receive+0xd00>)
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	b29a      	uxth	r2, r3
 80174cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174ce:	68db      	ldr	r3, [r3, #12]
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	1ad3      	subs	r3, r2, r3
 80174d6:	b29a      	uxth	r2, r3
 80174d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174da:	811a      	strh	r2, [r3, #8]
 80174dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174de:	685a      	ldr	r2, [r3, #4]
 80174e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174e2:	891b      	ldrh	r3, [r3, #8]
 80174e4:	4619      	mov	r1, r3
 80174e6:	4610      	mov	r0, r2
 80174e8:	f7fb fc08 	bl	8012cfc <pbuf_realloc>
 80174ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174ee:	69fa      	ldr	r2, [r7, #28]
 80174f0:	601a      	str	r2, [r3, #0]
 80174f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80174f4:	69f8      	ldr	r0, [r7, #28]
 80174f6:	f7ff f883 	bl	8016600 <tcp_oos_insert_segment>
 80174fa:	e0e1      	b.n	80176c0 <tcp_receive+0xeb8>
 80174fc:	2000f424 	.word	0x2000f424
 8017500:	2000f421 	.word	0x2000f421
 8017504:	2000f3f4 	.word	0x2000f3f4
 8017508:	2000f414 	.word	0x2000f414
 801750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801750e:	637b      	str	r3, [r7, #52]	@ 0x34
 8017510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	f040 80c5 	bne.w	80176a4 <tcp_receive+0xe9c>
 801751a:	4b7f      	ldr	r3, [pc, #508]	@ (8017718 <tcp_receive+0xf10>)
 801751c:	681a      	ldr	r2, [r3, #0]
 801751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	685b      	ldr	r3, [r3, #4]
 8017524:	1ad3      	subs	r3, r2, r3
 8017526:	2b00      	cmp	r3, #0
 8017528:	f340 80bc 	ble.w	80176a4 <tcp_receive+0xe9c>
 801752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	899b      	ldrh	r3, [r3, #12]
 8017532:	b29b      	uxth	r3, r3
 8017534:	4618      	mov	r0, r3
 8017536:	f7fa f93f 	bl	80117b8 <lwip_htons>
 801753a:	4603      	mov	r3, r0
 801753c:	b2db      	uxtb	r3, r3
 801753e:	f003 0301 	and.w	r3, r3, #1
 8017542:	2b00      	cmp	r3, #0
 8017544:	f040 80be 	bne.w	80176c4 <tcp_receive+0xebc>
 8017548:	4874      	ldr	r0, [pc, #464]	@ (801771c <tcp_receive+0xf14>)
 801754a:	f7fd fa3b 	bl	80149c4 <tcp_seg_copy>
 801754e:	4602      	mov	r2, r0
 8017550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017552:	601a      	str	r2, [r3, #0]
 8017554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	f000 80b5 	beq.w	80176c8 <tcp_receive+0xec0>
 801755e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017560:	68db      	ldr	r3, [r3, #12]
 8017562:	685b      	ldr	r3, [r3, #4]
 8017564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017566:	8912      	ldrh	r2, [r2, #8]
 8017568:	441a      	add	r2, r3
 801756a:	4b6b      	ldr	r3, [pc, #428]	@ (8017718 <tcp_receive+0xf10>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	1ad3      	subs	r3, r2, r3
 8017570:	2b00      	cmp	r3, #0
 8017572:	dd12      	ble.n	801759a <tcp_receive+0xd92>
 8017574:	4b68      	ldr	r3, [pc, #416]	@ (8017718 <tcp_receive+0xf10>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	b29a      	uxth	r2, r3
 801757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	b29b      	uxth	r3, r3
 8017582:	1ad3      	subs	r3, r2, r3
 8017584:	b29a      	uxth	r2, r3
 8017586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017588:	811a      	strh	r2, [r3, #8]
 801758a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017590:	891b      	ldrh	r3, [r3, #8]
 8017592:	4619      	mov	r1, r3
 8017594:	4610      	mov	r0, r2
 8017596:	f7fb fbb1 	bl	8012cfc <pbuf_realloc>
 801759a:	4b61      	ldr	r3, [pc, #388]	@ (8017720 <tcp_receive+0xf18>)
 801759c:	881b      	ldrh	r3, [r3, #0]
 801759e:	461a      	mov	r2, r3
 80175a0:	4b5d      	ldr	r3, [pc, #372]	@ (8017718 <tcp_receive+0xf10>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	441a      	add	r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175aa:	6879      	ldr	r1, [r7, #4]
 80175ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80175ae:	440b      	add	r3, r1
 80175b0:	1ad3      	subs	r3, r2, r3
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f340 8088 	ble.w	80176c8 <tcp_receive+0xec0>
 80175b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	899b      	ldrh	r3, [r3, #12]
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	4618      	mov	r0, r3
 80175c4:	f7fa f8f8 	bl	80117b8 <lwip_htons>
 80175c8:	4603      	mov	r3, r0
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	f003 0301 	and.w	r3, r3, #1
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d021      	beq.n	8017618 <tcp_receive+0xe10>
 80175d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	68db      	ldr	r3, [r3, #12]
 80175da:	899b      	ldrh	r3, [r3, #12]
 80175dc:	b29b      	uxth	r3, r3
 80175de:	b21b      	sxth	r3, r3
 80175e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80175e4:	b21c      	sxth	r4, r3
 80175e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	899b      	ldrh	r3, [r3, #12]
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7fa f8e1 	bl	80117b8 <lwip_htons>
 80175f6:	4603      	mov	r3, r0
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80175fe:	b29b      	uxth	r3, r3
 8017600:	4618      	mov	r0, r3
 8017602:	f7fa f8d9 	bl	80117b8 <lwip_htons>
 8017606:	4603      	mov	r3, r0
 8017608:	b21b      	sxth	r3, r3
 801760a:	4323      	orrs	r3, r4
 801760c:	b21a      	sxth	r2, r3
 801760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	b292      	uxth	r2, r2
 8017616:	819a      	strh	r2, [r3, #12]
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801761c:	b29a      	uxth	r2, r3
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017622:	4413      	add	r3, r2
 8017624:	b299      	uxth	r1, r3
 8017626:	4b3c      	ldr	r3, [pc, #240]	@ (8017718 <tcp_receive+0xf10>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	b29a      	uxth	r2, r3
 801762c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	1a8a      	subs	r2, r1, r2
 8017632:	b292      	uxth	r2, r2
 8017634:	811a      	strh	r2, [r3, #8]
 8017636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	685a      	ldr	r2, [r3, #4]
 801763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	891b      	ldrh	r3, [r3, #8]
 8017642:	4619      	mov	r1, r3
 8017644:	4610      	mov	r0, r2
 8017646:	f7fb fb59 	bl	8012cfc <pbuf_realloc>
 801764a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	891c      	ldrh	r4, [r3, #8]
 8017650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	68db      	ldr	r3, [r3, #12]
 8017656:	899b      	ldrh	r3, [r3, #12]
 8017658:	b29b      	uxth	r3, r3
 801765a:	4618      	mov	r0, r3
 801765c:	f7fa f8ac 	bl	80117b8 <lwip_htons>
 8017660:	4603      	mov	r3, r0
 8017662:	b2db      	uxtb	r3, r3
 8017664:	f003 0303 	and.w	r3, r3, #3
 8017668:	2b00      	cmp	r3, #0
 801766a:	d001      	beq.n	8017670 <tcp_receive+0xe68>
 801766c:	2301      	movs	r3, #1
 801766e:	e000      	b.n	8017672 <tcp_receive+0xe6a>
 8017670:	2300      	movs	r3, #0
 8017672:	4423      	add	r3, r4
 8017674:	b29a      	uxth	r2, r3
 8017676:	4b2a      	ldr	r3, [pc, #168]	@ (8017720 <tcp_receive+0xf18>)
 8017678:	801a      	strh	r2, [r3, #0]
 801767a:	4b29      	ldr	r3, [pc, #164]	@ (8017720 <tcp_receive+0xf18>)
 801767c:	881b      	ldrh	r3, [r3, #0]
 801767e:	461a      	mov	r2, r3
 8017680:	4b25      	ldr	r3, [pc, #148]	@ (8017718 <tcp_receive+0xf10>)
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	441a      	add	r2, r3
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801768a:	6879      	ldr	r1, [r7, #4]
 801768c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801768e:	440b      	add	r3, r1
 8017690:	429a      	cmp	r2, r3
 8017692:	d019      	beq.n	80176c8 <tcp_receive+0xec0>
 8017694:	4b23      	ldr	r3, [pc, #140]	@ (8017724 <tcp_receive+0xf1c>)
 8017696:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801769a:	4923      	ldr	r1, [pc, #140]	@ (8017728 <tcp_receive+0xf20>)
 801769c:	4823      	ldr	r0, [pc, #140]	@ (801772c <tcp_receive+0xf24>)
 801769e:	f006 f873 	bl	801d788 <iprintf>
 80176a2:	e011      	b.n	80176c8 <tcp_receive+0xec0>
 80176a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80176aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f47f aea5 	bne.w	80173fc <tcp_receive+0xbf4>
 80176b2:	e00a      	b.n	80176ca <tcp_receive+0xec2>
 80176b4:	bf00      	nop
 80176b6:	e008      	b.n	80176ca <tcp_receive+0xec2>
 80176b8:	bf00      	nop
 80176ba:	e006      	b.n	80176ca <tcp_receive+0xec2>
 80176bc:	bf00      	nop
 80176be:	e004      	b.n	80176ca <tcp_receive+0xec2>
 80176c0:	bf00      	nop
 80176c2:	e002      	b.n	80176ca <tcp_receive+0xec2>
 80176c4:	bf00      	nop
 80176c6:	e000      	b.n	80176ca <tcp_receive+0xec2>
 80176c8:	bf00      	nop
 80176ca:	6878      	ldr	r0, [r7, #4]
 80176cc:	f001 fe88 	bl	80193e0 <tcp_send_empty_ack>
 80176d0:	e003      	b.n	80176da <tcp_receive+0xed2>
 80176d2:	6878      	ldr	r0, [r7, #4]
 80176d4:	f001 fe84 	bl	80193e0 <tcp_send_empty_ack>
 80176d8:	e01a      	b.n	8017710 <tcp_receive+0xf08>
 80176da:	e019      	b.n	8017710 <tcp_receive+0xf08>
 80176dc:	4b0e      	ldr	r3, [pc, #56]	@ (8017718 <tcp_receive+0xf10>)
 80176de:	681a      	ldr	r2, [r3, #0]
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176e4:	1ad3      	subs	r3, r2, r3
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	db0a      	blt.n	8017700 <tcp_receive+0xef8>
 80176ea:	4b0b      	ldr	r3, [pc, #44]	@ (8017718 <tcp_receive+0xf10>)
 80176ec:	681a      	ldr	r2, [r3, #0]
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176f2:	6879      	ldr	r1, [r7, #4]
 80176f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80176f6:	440b      	add	r3, r1
 80176f8:	1ad3      	subs	r3, r2, r3
 80176fa:	3301      	adds	r3, #1
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	dd07      	ble.n	8017710 <tcp_receive+0xf08>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	8b5b      	ldrh	r3, [r3, #26]
 8017704:	f043 0302 	orr.w	r3, r3, #2
 8017708:	b29a      	uxth	r2, r3
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	835a      	strh	r2, [r3, #26]
 801770e:	e7ff      	b.n	8017710 <tcp_receive+0xf08>
 8017710:	bf00      	nop
 8017712:	3750      	adds	r7, #80	@ 0x50
 8017714:	46bd      	mov	sp, r7
 8017716:	bdb0      	pop	{r4, r5, r7, pc}
 8017718:	2000f414 	.word	0x2000f414
 801771c:	2000f3f4 	.word	0x2000f3f4
 8017720:	2000f41e 	.word	0x2000f41e
 8017724:	08021e1c 	.word	0x08021e1c
 8017728:	080221c4 	.word	0x080221c4
 801772c:	08021e68 	.word	0x08021e68

08017730 <tcp_get_next_optbyte>:
 8017730:	b480      	push	{r7}
 8017732:	b083      	sub	sp, #12
 8017734:	af00      	add	r7, sp, #0
 8017736:	4b15      	ldr	r3, [pc, #84]	@ (801778c <tcp_get_next_optbyte+0x5c>)
 8017738:	881b      	ldrh	r3, [r3, #0]
 801773a:	1c5a      	adds	r2, r3, #1
 801773c:	b291      	uxth	r1, r2
 801773e:	4a13      	ldr	r2, [pc, #76]	@ (801778c <tcp_get_next_optbyte+0x5c>)
 8017740:	8011      	strh	r1, [r2, #0]
 8017742:	80fb      	strh	r3, [r7, #6]
 8017744:	4b12      	ldr	r3, [pc, #72]	@ (8017790 <tcp_get_next_optbyte+0x60>)
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d004      	beq.n	8017756 <tcp_get_next_optbyte+0x26>
 801774c:	4b11      	ldr	r3, [pc, #68]	@ (8017794 <tcp_get_next_optbyte+0x64>)
 801774e:	881b      	ldrh	r3, [r3, #0]
 8017750:	88fa      	ldrh	r2, [r7, #6]
 8017752:	429a      	cmp	r2, r3
 8017754:	d208      	bcs.n	8017768 <tcp_get_next_optbyte+0x38>
 8017756:	4b10      	ldr	r3, [pc, #64]	@ (8017798 <tcp_get_next_optbyte+0x68>)
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	3314      	adds	r3, #20
 801775c:	603b      	str	r3, [r7, #0]
 801775e:	88fb      	ldrh	r3, [r7, #6]
 8017760:	683a      	ldr	r2, [r7, #0]
 8017762:	4413      	add	r3, r2
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	e00b      	b.n	8017780 <tcp_get_next_optbyte+0x50>
 8017768:	88fb      	ldrh	r3, [r7, #6]
 801776a:	b2da      	uxtb	r2, r3
 801776c:	4b09      	ldr	r3, [pc, #36]	@ (8017794 <tcp_get_next_optbyte+0x64>)
 801776e:	881b      	ldrh	r3, [r3, #0]
 8017770:	b2db      	uxtb	r3, r3
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	717b      	strb	r3, [r7, #5]
 8017776:	4b06      	ldr	r3, [pc, #24]	@ (8017790 <tcp_get_next_optbyte+0x60>)
 8017778:	681a      	ldr	r2, [r3, #0]
 801777a:	797b      	ldrb	r3, [r7, #5]
 801777c:	4413      	add	r3, r2
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	4618      	mov	r0, r3
 8017782:	370c      	adds	r7, #12
 8017784:	46bd      	mov	sp, r7
 8017786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778a:	4770      	bx	lr
 801778c:	2000f410 	.word	0x2000f410
 8017790:	2000f40c 	.word	0x2000f40c
 8017794:	2000f40a 	.word	0x2000f40a
 8017798:	2000f404 	.word	0x2000f404

0801779c <tcp_parseopt>:
 801779c:	b580      	push	{r7, lr}
 801779e:	b084      	sub	sp, #16
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d106      	bne.n	80177b8 <tcp_parseopt+0x1c>
 80177aa:	4b32      	ldr	r3, [pc, #200]	@ (8017874 <tcp_parseopt+0xd8>)
 80177ac:	f240 727d 	movw	r2, #1917	@ 0x77d
 80177b0:	4931      	ldr	r1, [pc, #196]	@ (8017878 <tcp_parseopt+0xdc>)
 80177b2:	4832      	ldr	r0, [pc, #200]	@ (801787c <tcp_parseopt+0xe0>)
 80177b4:	f005 ffe8 	bl	801d788 <iprintf>
 80177b8:	4b31      	ldr	r3, [pc, #196]	@ (8017880 <tcp_parseopt+0xe4>)
 80177ba:	881b      	ldrh	r3, [r3, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d056      	beq.n	801786e <tcp_parseopt+0xd2>
 80177c0:	4b30      	ldr	r3, [pc, #192]	@ (8017884 <tcp_parseopt+0xe8>)
 80177c2:	2200      	movs	r2, #0
 80177c4:	801a      	strh	r2, [r3, #0]
 80177c6:	e046      	b.n	8017856 <tcp_parseopt+0xba>
 80177c8:	f7ff ffb2 	bl	8017730 <tcp_get_next_optbyte>
 80177cc:	4603      	mov	r3, r0
 80177ce:	73fb      	strb	r3, [r7, #15]
 80177d0:	7bfb      	ldrb	r3, [r7, #15]
 80177d2:	2b02      	cmp	r3, #2
 80177d4:	d006      	beq.n	80177e4 <tcp_parseopt+0x48>
 80177d6:	2b02      	cmp	r3, #2
 80177d8:	dc2a      	bgt.n	8017830 <tcp_parseopt+0x94>
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d042      	beq.n	8017864 <tcp_parseopt+0xc8>
 80177de:	2b01      	cmp	r3, #1
 80177e0:	d038      	beq.n	8017854 <tcp_parseopt+0xb8>
 80177e2:	e025      	b.n	8017830 <tcp_parseopt+0x94>
 80177e4:	f7ff ffa4 	bl	8017730 <tcp_get_next_optbyte>
 80177e8:	4603      	mov	r3, r0
 80177ea:	2b04      	cmp	r3, #4
 80177ec:	d13c      	bne.n	8017868 <tcp_parseopt+0xcc>
 80177ee:	4b25      	ldr	r3, [pc, #148]	@ (8017884 <tcp_parseopt+0xe8>)
 80177f0:	881b      	ldrh	r3, [r3, #0]
 80177f2:	3301      	adds	r3, #1
 80177f4:	4a22      	ldr	r2, [pc, #136]	@ (8017880 <tcp_parseopt+0xe4>)
 80177f6:	8812      	ldrh	r2, [r2, #0]
 80177f8:	4293      	cmp	r3, r2
 80177fa:	da35      	bge.n	8017868 <tcp_parseopt+0xcc>
 80177fc:	f7ff ff98 	bl	8017730 <tcp_get_next_optbyte>
 8017800:	4603      	mov	r3, r0
 8017802:	021b      	lsls	r3, r3, #8
 8017804:	81bb      	strh	r3, [r7, #12]
 8017806:	f7ff ff93 	bl	8017730 <tcp_get_next_optbyte>
 801780a:	4603      	mov	r3, r0
 801780c:	461a      	mov	r2, r3
 801780e:	89bb      	ldrh	r3, [r7, #12]
 8017810:	4313      	orrs	r3, r2
 8017812:	81bb      	strh	r3, [r7, #12]
 8017814:	89bb      	ldrh	r3, [r7, #12]
 8017816:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801781a:	d804      	bhi.n	8017826 <tcp_parseopt+0x8a>
 801781c:	89bb      	ldrh	r3, [r7, #12]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d001      	beq.n	8017826 <tcp_parseopt+0x8a>
 8017822:	89ba      	ldrh	r2, [r7, #12]
 8017824:	e001      	b.n	801782a <tcp_parseopt+0x8e>
 8017826:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	865a      	strh	r2, [r3, #50]	@ 0x32
 801782e:	e012      	b.n	8017856 <tcp_parseopt+0xba>
 8017830:	f7ff ff7e 	bl	8017730 <tcp_get_next_optbyte>
 8017834:	4603      	mov	r3, r0
 8017836:	72fb      	strb	r3, [r7, #11]
 8017838:	7afb      	ldrb	r3, [r7, #11]
 801783a:	2b01      	cmp	r3, #1
 801783c:	d916      	bls.n	801786c <tcp_parseopt+0xd0>
 801783e:	7afb      	ldrb	r3, [r7, #11]
 8017840:	b29a      	uxth	r2, r3
 8017842:	4b10      	ldr	r3, [pc, #64]	@ (8017884 <tcp_parseopt+0xe8>)
 8017844:	881b      	ldrh	r3, [r3, #0]
 8017846:	4413      	add	r3, r2
 8017848:	b29b      	uxth	r3, r3
 801784a:	3b02      	subs	r3, #2
 801784c:	b29a      	uxth	r2, r3
 801784e:	4b0d      	ldr	r3, [pc, #52]	@ (8017884 <tcp_parseopt+0xe8>)
 8017850:	801a      	strh	r2, [r3, #0]
 8017852:	e000      	b.n	8017856 <tcp_parseopt+0xba>
 8017854:	bf00      	nop
 8017856:	4b0b      	ldr	r3, [pc, #44]	@ (8017884 <tcp_parseopt+0xe8>)
 8017858:	881a      	ldrh	r2, [r3, #0]
 801785a:	4b09      	ldr	r3, [pc, #36]	@ (8017880 <tcp_parseopt+0xe4>)
 801785c:	881b      	ldrh	r3, [r3, #0]
 801785e:	429a      	cmp	r2, r3
 8017860:	d3b2      	bcc.n	80177c8 <tcp_parseopt+0x2c>
 8017862:	e004      	b.n	801786e <tcp_parseopt+0xd2>
 8017864:	bf00      	nop
 8017866:	e002      	b.n	801786e <tcp_parseopt+0xd2>
 8017868:	bf00      	nop
 801786a:	e000      	b.n	801786e <tcp_parseopt+0xd2>
 801786c:	bf00      	nop
 801786e:	3710      	adds	r7, #16
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	08021e1c 	.word	0x08021e1c
 8017878:	08022280 	.word	0x08022280
 801787c:	08021e68 	.word	0x08021e68
 8017880:	2000f408 	.word	0x2000f408
 8017884:	2000f410 	.word	0x2000f410

08017888 <tcp_trigger_input_pcb_close>:
 8017888:	b480      	push	{r7}
 801788a:	af00      	add	r7, sp, #0
 801788c:	4b05      	ldr	r3, [pc, #20]	@ (80178a4 <tcp_trigger_input_pcb_close+0x1c>)
 801788e:	781b      	ldrb	r3, [r3, #0]
 8017890:	f043 0310 	orr.w	r3, r3, #16
 8017894:	b2da      	uxtb	r2, r3
 8017896:	4b03      	ldr	r3, [pc, #12]	@ (80178a4 <tcp_trigger_input_pcb_close+0x1c>)
 8017898:	701a      	strb	r2, [r3, #0]
 801789a:	bf00      	nop
 801789c:	46bd      	mov	sp, r7
 801789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a2:	4770      	bx	lr
 80178a4:	2000f421 	.word	0x2000f421

080178a8 <tcp_route>:
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	607a      	str	r2, [r7, #4]
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d00a      	beq.n	80178d0 <tcp_route+0x28>
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	7a1b      	ldrb	r3, [r3, #8]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d006      	beq.n	80178d0 <tcp_route+0x28>
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	7a1b      	ldrb	r3, [r3, #8]
 80178c6:	4618      	mov	r0, r3
 80178c8:	f7fb f810 	bl	80128ec <netif_get_by_index>
 80178cc:	4603      	mov	r3, r0
 80178ce:	e003      	b.n	80178d8 <tcp_route+0x30>
 80178d0:	6878      	ldr	r0, [r7, #4]
 80178d2:	f003 fe33 	bl	801b53c <ip4_route>
 80178d6:	4603      	mov	r3, r0
 80178d8:	4618      	mov	r0, r3
 80178da:	3710      	adds	r7, #16
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}

080178e0 <tcp_create_segment>:
 80178e0:	b590      	push	{r4, r7, lr}
 80178e2:	b087      	sub	sp, #28
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	603b      	str	r3, [r7, #0]
 80178ec:	4613      	mov	r3, r2
 80178ee:	71fb      	strb	r3, [r7, #7]
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d105      	bne.n	8017902 <tcp_create_segment+0x22>
 80178f6:	4b43      	ldr	r3, [pc, #268]	@ (8017a04 <tcp_create_segment+0x124>)
 80178f8:	22a3      	movs	r2, #163	@ 0xa3
 80178fa:	4943      	ldr	r1, [pc, #268]	@ (8017a08 <tcp_create_segment+0x128>)
 80178fc:	4843      	ldr	r0, [pc, #268]	@ (8017a0c <tcp_create_segment+0x12c>)
 80178fe:	f005 ff43 	bl	801d788 <iprintf>
 8017902:	68bb      	ldr	r3, [r7, #8]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d105      	bne.n	8017914 <tcp_create_segment+0x34>
 8017908:	4b3e      	ldr	r3, [pc, #248]	@ (8017a04 <tcp_create_segment+0x124>)
 801790a:	22a4      	movs	r2, #164	@ 0xa4
 801790c:	4940      	ldr	r1, [pc, #256]	@ (8017a10 <tcp_create_segment+0x130>)
 801790e:	483f      	ldr	r0, [pc, #252]	@ (8017a0c <tcp_create_segment+0x12c>)
 8017910:	f005 ff3a 	bl	801d788 <iprintf>
 8017914:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017918:	009b      	lsls	r3, r3, #2
 801791a:	b2db      	uxtb	r3, r3
 801791c:	f003 0304 	and.w	r3, r3, #4
 8017920:	75fb      	strb	r3, [r7, #23]
 8017922:	2003      	movs	r0, #3
 8017924:	f7fa fc56 	bl	80121d4 <memp_malloc>
 8017928:	6138      	str	r0, [r7, #16]
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d104      	bne.n	801793a <tcp_create_segment+0x5a>
 8017930:	68b8      	ldr	r0, [r7, #8]
 8017932:	f7fb fb69 	bl	8013008 <pbuf_free>
 8017936:	2300      	movs	r3, #0
 8017938:	e060      	b.n	80179fc <tcp_create_segment+0x11c>
 801793a:	693b      	ldr	r3, [r7, #16]
 801793c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017940:	729a      	strb	r2, [r3, #10]
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	2200      	movs	r2, #0
 8017946:	601a      	str	r2, [r3, #0]
 8017948:	693b      	ldr	r3, [r7, #16]
 801794a:	68ba      	ldr	r2, [r7, #8]
 801794c:	605a      	str	r2, [r3, #4]
 801794e:	68bb      	ldr	r3, [r7, #8]
 8017950:	891a      	ldrh	r2, [r3, #8]
 8017952:	7dfb      	ldrb	r3, [r7, #23]
 8017954:	b29b      	uxth	r3, r3
 8017956:	429a      	cmp	r2, r3
 8017958:	d205      	bcs.n	8017966 <tcp_create_segment+0x86>
 801795a:	4b2a      	ldr	r3, [pc, #168]	@ (8017a04 <tcp_create_segment+0x124>)
 801795c:	22b0      	movs	r2, #176	@ 0xb0
 801795e:	492d      	ldr	r1, [pc, #180]	@ (8017a14 <tcp_create_segment+0x134>)
 8017960:	482a      	ldr	r0, [pc, #168]	@ (8017a0c <tcp_create_segment+0x12c>)
 8017962:	f005 ff11 	bl	801d788 <iprintf>
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	891a      	ldrh	r2, [r3, #8]
 801796a:	7dfb      	ldrb	r3, [r7, #23]
 801796c:	b29b      	uxth	r3, r3
 801796e:	1ad3      	subs	r3, r2, r3
 8017970:	b29a      	uxth	r2, r3
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	811a      	strh	r2, [r3, #8]
 8017976:	2114      	movs	r1, #20
 8017978:	68b8      	ldr	r0, [r7, #8]
 801797a:	f7fb faaf 	bl	8012edc <pbuf_add_header>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d004      	beq.n	801798e <tcp_create_segment+0xae>
 8017984:	6938      	ldr	r0, [r7, #16]
 8017986:	f7fc ffe6 	bl	8014956 <tcp_seg_free>
 801798a:	2300      	movs	r3, #0
 801798c:	e036      	b.n	80179fc <tcp_create_segment+0x11c>
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	685b      	ldr	r3, [r3, #4]
 8017992:	685a      	ldr	r2, [r3, #4]
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	60da      	str	r2, [r3, #12]
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	8ada      	ldrh	r2, [r3, #22]
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	68dc      	ldr	r4, [r3, #12]
 80179a0:	4610      	mov	r0, r2
 80179a2:	f7f9 ff09 	bl	80117b8 <lwip_htons>
 80179a6:	4603      	mov	r3, r0
 80179a8:	8023      	strh	r3, [r4, #0]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	8b1a      	ldrh	r2, [r3, #24]
 80179ae:	693b      	ldr	r3, [r7, #16]
 80179b0:	68dc      	ldr	r4, [r3, #12]
 80179b2:	4610      	mov	r0, r2
 80179b4:	f7f9 ff00 	bl	80117b8 <lwip_htons>
 80179b8:	4603      	mov	r3, r0
 80179ba:	8063      	strh	r3, [r4, #2]
 80179bc:	693b      	ldr	r3, [r7, #16]
 80179be:	68dc      	ldr	r4, [r3, #12]
 80179c0:	6838      	ldr	r0, [r7, #0]
 80179c2:	f7f9 ff0e 	bl	80117e2 <lwip_htonl>
 80179c6:	4603      	mov	r3, r0
 80179c8:	6063      	str	r3, [r4, #4]
 80179ca:	7dfb      	ldrb	r3, [r7, #23]
 80179cc:	089b      	lsrs	r3, r3, #2
 80179ce:	b2db      	uxtb	r3, r3
 80179d0:	3305      	adds	r3, #5
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	031b      	lsls	r3, r3, #12
 80179d6:	b29a      	uxth	r2, r3
 80179d8:	79fb      	ldrb	r3, [r7, #7]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	4313      	orrs	r3, r2
 80179de:	b29a      	uxth	r2, r3
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	68dc      	ldr	r4, [r3, #12]
 80179e4:	4610      	mov	r0, r2
 80179e6:	f7f9 fee7 	bl	80117b8 <lwip_htons>
 80179ea:	4603      	mov	r3, r0
 80179ec:	81a3      	strh	r3, [r4, #12]
 80179ee:	693b      	ldr	r3, [r7, #16]
 80179f0:	68db      	ldr	r3, [r3, #12]
 80179f2:	2200      	movs	r2, #0
 80179f4:	749a      	strb	r2, [r3, #18]
 80179f6:	2200      	movs	r2, #0
 80179f8:	74da      	strb	r2, [r3, #19]
 80179fa:	693b      	ldr	r3, [r7, #16]
 80179fc:	4618      	mov	r0, r3
 80179fe:	371c      	adds	r7, #28
 8017a00:	46bd      	mov	sp, r7
 8017a02:	bd90      	pop	{r4, r7, pc}
 8017a04:	0802229c 	.word	0x0802229c
 8017a08:	080222d0 	.word	0x080222d0
 8017a0c:	080222f0 	.word	0x080222f0
 8017a10:	08022318 	.word	0x08022318
 8017a14:	0802233c 	.word	0x0802233c

08017a18 <tcp_pbuf_prealloc>:
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b086      	sub	sp, #24
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	607b      	str	r3, [r7, #4]
 8017a20:	4603      	mov	r3, r0
 8017a22:	73fb      	strb	r3, [r7, #15]
 8017a24:	460b      	mov	r3, r1
 8017a26:	81bb      	strh	r3, [r7, #12]
 8017a28:	4613      	mov	r3, r2
 8017a2a:	817b      	strh	r3, [r7, #10]
 8017a2c:	89bb      	ldrh	r3, [r7, #12]
 8017a2e:	82fb      	strh	r3, [r7, #22]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d105      	bne.n	8017a42 <tcp_pbuf_prealloc+0x2a>
 8017a36:	4b30      	ldr	r3, [pc, #192]	@ (8017af8 <tcp_pbuf_prealloc+0xe0>)
 8017a38:	22e8      	movs	r2, #232	@ 0xe8
 8017a3a:	4930      	ldr	r1, [pc, #192]	@ (8017afc <tcp_pbuf_prealloc+0xe4>)
 8017a3c:	4830      	ldr	r0, [pc, #192]	@ (8017b00 <tcp_pbuf_prealloc+0xe8>)
 8017a3e:	f005 fea3 	bl	801d788 <iprintf>
 8017a42:	6a3b      	ldr	r3, [r7, #32]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d105      	bne.n	8017a54 <tcp_pbuf_prealloc+0x3c>
 8017a48:	4b2b      	ldr	r3, [pc, #172]	@ (8017af8 <tcp_pbuf_prealloc+0xe0>)
 8017a4a:	22e9      	movs	r2, #233	@ 0xe9
 8017a4c:	492d      	ldr	r1, [pc, #180]	@ (8017b04 <tcp_pbuf_prealloc+0xec>)
 8017a4e:	482c      	ldr	r0, [pc, #176]	@ (8017b00 <tcp_pbuf_prealloc+0xe8>)
 8017a50:	f005 fe9a 	bl	801d788 <iprintf>
 8017a54:	89ba      	ldrh	r2, [r7, #12]
 8017a56:	897b      	ldrh	r3, [r7, #10]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d221      	bcs.n	8017aa0 <tcp_pbuf_prealloc+0x88>
 8017a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017a60:	f003 0302 	and.w	r3, r3, #2
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d111      	bne.n	8017a8c <tcp_pbuf_prealloc+0x74>
 8017a68:	6a3b      	ldr	r3, [r7, #32]
 8017a6a:	8b5b      	ldrh	r3, [r3, #26]
 8017a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d115      	bne.n	8017aa0 <tcp_pbuf_prealloc+0x88>
 8017a74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d007      	beq.n	8017a8c <tcp_pbuf_prealloc+0x74>
 8017a7c:	6a3b      	ldr	r3, [r7, #32]
 8017a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d103      	bne.n	8017a8c <tcp_pbuf_prealloc+0x74>
 8017a84:	6a3b      	ldr	r3, [r7, #32]
 8017a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d009      	beq.n	8017aa0 <tcp_pbuf_prealloc+0x88>
 8017a8c:	89bb      	ldrh	r3, [r7, #12]
 8017a8e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017a92:	f023 0203 	bic.w	r2, r3, #3
 8017a96:	897b      	ldrh	r3, [r7, #10]
 8017a98:	4293      	cmp	r3, r2
 8017a9a:	bf28      	it	cs
 8017a9c:	4613      	movcs	r3, r2
 8017a9e:	82fb      	strh	r3, [r7, #22]
 8017aa0:	8af9      	ldrh	r1, [r7, #22]
 8017aa2:	7bfb      	ldrb	r3, [r7, #15]
 8017aa4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7fa ffc9 	bl	8012a40 <pbuf_alloc>
 8017aae:	6138      	str	r0, [r7, #16]
 8017ab0:	693b      	ldr	r3, [r7, #16]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d101      	bne.n	8017aba <tcp_pbuf_prealloc+0xa2>
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	e019      	b.n	8017aee <tcp_pbuf_prealloc+0xd6>
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d006      	beq.n	8017ad0 <tcp_pbuf_prealloc+0xb8>
 8017ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8017af8 <tcp_pbuf_prealloc+0xe0>)
 8017ac4:	f240 120b 	movw	r2, #267	@ 0x10b
 8017ac8:	490f      	ldr	r1, [pc, #60]	@ (8017b08 <tcp_pbuf_prealloc+0xf0>)
 8017aca:	480d      	ldr	r0, [pc, #52]	@ (8017b00 <tcp_pbuf_prealloc+0xe8>)
 8017acc:	f005 fe5c 	bl	801d788 <iprintf>
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	895a      	ldrh	r2, [r3, #10]
 8017ad4:	89bb      	ldrh	r3, [r7, #12]
 8017ad6:	1ad3      	subs	r3, r2, r3
 8017ad8:	b29a      	uxth	r2, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	801a      	strh	r2, [r3, #0]
 8017ade:	693b      	ldr	r3, [r7, #16]
 8017ae0:	89ba      	ldrh	r2, [r7, #12]
 8017ae2:	811a      	strh	r2, [r3, #8]
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	891a      	ldrh	r2, [r3, #8]
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	815a      	strh	r2, [r3, #10]
 8017aec:	693b      	ldr	r3, [r7, #16]
 8017aee:	4618      	mov	r0, r3
 8017af0:	3718      	adds	r7, #24
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	0802229c 	.word	0x0802229c
 8017afc:	08022354 	.word	0x08022354
 8017b00:	080222f0 	.word	0x080222f0
 8017b04:	08022378 	.word	0x08022378
 8017b08:	08022398 	.word	0x08022398

08017b0c <tcp_write_checks>:
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b082      	sub	sp, #8
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	460b      	mov	r3, r1
 8017b16:	807b      	strh	r3, [r7, #2]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d106      	bne.n	8017b2c <tcp_write_checks+0x20>
 8017b1e:	4b33      	ldr	r3, [pc, #204]	@ (8017bec <tcp_write_checks+0xe0>)
 8017b20:	f240 1233 	movw	r2, #307	@ 0x133
 8017b24:	4932      	ldr	r1, [pc, #200]	@ (8017bf0 <tcp_write_checks+0xe4>)
 8017b26:	4833      	ldr	r0, [pc, #204]	@ (8017bf4 <tcp_write_checks+0xe8>)
 8017b28:	f005 fe2e 	bl	801d788 <iprintf>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	7d1b      	ldrb	r3, [r3, #20]
 8017b30:	2b04      	cmp	r3, #4
 8017b32:	d00e      	beq.n	8017b52 <tcp_write_checks+0x46>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	7d1b      	ldrb	r3, [r3, #20]
 8017b38:	2b07      	cmp	r3, #7
 8017b3a:	d00a      	beq.n	8017b52 <tcp_write_checks+0x46>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	7d1b      	ldrb	r3, [r3, #20]
 8017b40:	2b02      	cmp	r3, #2
 8017b42:	d006      	beq.n	8017b52 <tcp_write_checks+0x46>
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	7d1b      	ldrb	r3, [r3, #20]
 8017b48:	2b03      	cmp	r3, #3
 8017b4a:	d002      	beq.n	8017b52 <tcp_write_checks+0x46>
 8017b4c:	f06f 030a 	mvn.w	r3, #10
 8017b50:	e048      	b.n	8017be4 <tcp_write_checks+0xd8>
 8017b52:	887b      	ldrh	r3, [r7, #2]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d101      	bne.n	8017b5c <tcp_write_checks+0x50>
 8017b58:	2300      	movs	r3, #0
 8017b5a:	e043      	b.n	8017be4 <tcp_write_checks+0xd8>
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017b62:	887a      	ldrh	r2, [r7, #2]
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d909      	bls.n	8017b7c <tcp_write_checks+0x70>
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	8b5b      	ldrh	r3, [r3, #26]
 8017b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b70:	b29a      	uxth	r2, r3
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	835a      	strh	r2, [r3, #26]
 8017b76:	f04f 33ff 	mov.w	r3, #4294967295
 8017b7a:	e033      	b.n	8017be4 <tcp_write_checks+0xd8>
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b82:	2b08      	cmp	r3, #8
 8017b84:	d909      	bls.n	8017b9a <tcp_write_checks+0x8e>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	8b5b      	ldrh	r3, [r3, #26]
 8017b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	835a      	strh	r2, [r3, #26]
 8017b94:	f04f 33ff 	mov.w	r3, #4294967295
 8017b98:	e024      	b.n	8017be4 <tcp_write_checks+0xd8>
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d00f      	beq.n	8017bc4 <tcp_write_checks+0xb8>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d11a      	bne.n	8017be2 <tcp_write_checks+0xd6>
 8017bac:	687b      	ldr	r3, [r7, #4]
 8017bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d116      	bne.n	8017be2 <tcp_write_checks+0xd6>
 8017bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8017bec <tcp_write_checks+0xe0>)
 8017bb6:	f240 1255 	movw	r2, #341	@ 0x155
 8017bba:	490f      	ldr	r1, [pc, #60]	@ (8017bf8 <tcp_write_checks+0xec>)
 8017bbc:	480d      	ldr	r0, [pc, #52]	@ (8017bf4 <tcp_write_checks+0xe8>)
 8017bbe:	f005 fde3 	bl	801d788 <iprintf>
 8017bc2:	e00e      	b.n	8017be2 <tcp_write_checks+0xd6>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d103      	bne.n	8017bd4 <tcp_write_checks+0xc8>
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d006      	beq.n	8017be2 <tcp_write_checks+0xd6>
 8017bd4:	4b05      	ldr	r3, [pc, #20]	@ (8017bec <tcp_write_checks+0xe0>)
 8017bd6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8017bda:	4908      	ldr	r1, [pc, #32]	@ (8017bfc <tcp_write_checks+0xf0>)
 8017bdc:	4805      	ldr	r0, [pc, #20]	@ (8017bf4 <tcp_write_checks+0xe8>)
 8017bde:	f005 fdd3 	bl	801d788 <iprintf>
 8017be2:	2300      	movs	r3, #0
 8017be4:	4618      	mov	r0, r3
 8017be6:	3708      	adds	r7, #8
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}
 8017bec:	0802229c 	.word	0x0802229c
 8017bf0:	080223ac 	.word	0x080223ac
 8017bf4:	080222f0 	.word	0x080222f0
 8017bf8:	080223cc 	.word	0x080223cc
 8017bfc:	08022408 	.word	0x08022408

08017c00 <tcp_write>:
 8017c00:	b590      	push	{r4, r7, lr}
 8017c02:	b09b      	sub	sp, #108	@ 0x6c
 8017c04:	af04      	add	r7, sp, #16
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	4611      	mov	r1, r2
 8017c0c:	461a      	mov	r2, r3
 8017c0e:	460b      	mov	r3, r1
 8017c10:	80fb      	strh	r3, [r7, #6]
 8017c12:	4613      	mov	r3, r2
 8017c14:	717b      	strb	r3, [r7, #5]
 8017c16:	2300      	movs	r3, #0
 8017c18:	657b      	str	r3, [r7, #84]	@ 0x54
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8017c1e:	2300      	movs	r3, #0
 8017c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017c22:	2300      	movs	r3, #0
 8017c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017c26:	2300      	movs	r3, #0
 8017c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017c30:	2300      	movs	r3, #0
 8017c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017c36:	2300      	movs	r3, #0
 8017c38:	827b      	strh	r3, [r7, #18]
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017c3e:	2300      	movs	r3, #0
 8017c40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d109      	bne.n	8017c5c <tcp_write+0x5c>
 8017c48:	4ba4      	ldr	r3, [pc, #656]	@ (8017edc <tcp_write+0x2dc>)
 8017c4a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8017c4e:	49a4      	ldr	r1, [pc, #656]	@ (8017ee0 <tcp_write+0x2e0>)
 8017c50:	48a4      	ldr	r0, [pc, #656]	@ (8017ee4 <tcp_write+0x2e4>)
 8017c52:	f005 fd99 	bl	801d788 <iprintf>
 8017c56:	f06f 030f 	mvn.w	r3, #15
 8017c5a:	e32a      	b.n	80182b2 <tcp_write+0x6b2>
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017c62:	085b      	lsrs	r3, r3, #1
 8017c64:	b29a      	uxth	r2, r3
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	bf28      	it	cs
 8017c6e:	4613      	movcs	r3, r2
 8017c70:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017c72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d102      	bne.n	8017c7e <tcp_write+0x7e>
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c7c:	e000      	b.n	8017c80 <tcp_write+0x80>
 8017c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d109      	bne.n	8017c9c <tcp_write+0x9c>
 8017c88:	4b94      	ldr	r3, [pc, #592]	@ (8017edc <tcp_write+0x2dc>)
 8017c8a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8017c8e:	4996      	ldr	r1, [pc, #600]	@ (8017ee8 <tcp_write+0x2e8>)
 8017c90:	4894      	ldr	r0, [pc, #592]	@ (8017ee4 <tcp_write+0x2e4>)
 8017c92:	f005 fd79 	bl	801d788 <iprintf>
 8017c96:	f06f 030f 	mvn.w	r3, #15
 8017c9a:	e30a      	b.n	80182b2 <tcp_write+0x6b2>
 8017c9c:	88fb      	ldrh	r3, [r7, #6]
 8017c9e:	4619      	mov	r1, r3
 8017ca0:	68f8      	ldr	r0, [r7, #12]
 8017ca2:	f7ff ff33 	bl	8017b0c <tcp_write_checks>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8017cac:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d002      	beq.n	8017cba <tcp_write+0xba>
 8017cb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017cb8:	e2fb      	b.n	80182b2 <tcp_write+0x6b2>
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017cc0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	f000 80f6 	beq.w	8017ec0 <tcp_write+0x2c0>
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8017cda:	e002      	b.n	8017ce2 <tcp_write+0xe2>
 8017cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8017ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d1f8      	bne.n	8017cdc <tcp_write+0xdc>
 8017cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cec:	7a9b      	ldrb	r3, [r3, #10]
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	f003 0304 	and.w	r3, r3, #4
 8017cf6:	843b      	strh	r3, [r7, #32]
 8017cf8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cfc:	891b      	ldrh	r3, [r3, #8]
 8017cfe:	4619      	mov	r1, r3
 8017d00:	8c3b      	ldrh	r3, [r7, #32]
 8017d02:	440b      	add	r3, r1
 8017d04:	429a      	cmp	r2, r3
 8017d06:	da06      	bge.n	8017d16 <tcp_write+0x116>
 8017d08:	4b74      	ldr	r3, [pc, #464]	@ (8017edc <tcp_write+0x2dc>)
 8017d0a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017d0e:	4977      	ldr	r1, [pc, #476]	@ (8017eec <tcp_write+0x2ec>)
 8017d10:	4874      	ldr	r0, [pc, #464]	@ (8017ee4 <tcp_write+0x2e4>)
 8017d12:	f005 fd39 	bl	801d788 <iprintf>
 8017d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d18:	891a      	ldrh	r2, [r3, #8]
 8017d1a:	8c3b      	ldrh	r3, [r7, #32]
 8017d1c:	4413      	add	r3, r2
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017d22:	1ad3      	subs	r3, r2, r3
 8017d24:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017d2c:	827b      	strh	r3, [r7, #18]
 8017d2e:	8a7b      	ldrh	r3, [r7, #18]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d026      	beq.n	8017d82 <tcp_write+0x182>
 8017d34:	8a7b      	ldrh	r3, [r7, #18]
 8017d36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017d38:	429a      	cmp	r2, r3
 8017d3a:	d206      	bcs.n	8017d4a <tcp_write+0x14a>
 8017d3c:	4b67      	ldr	r3, [pc, #412]	@ (8017edc <tcp_write+0x2dc>)
 8017d3e:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017d42:	496b      	ldr	r1, [pc, #428]	@ (8017ef0 <tcp_write+0x2f0>)
 8017d44:	4867      	ldr	r0, [pc, #412]	@ (8017ee4 <tcp_write+0x2e4>)
 8017d46:	f005 fd1f 	bl	801d788 <iprintf>
 8017d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017d4e:	8a7b      	ldrh	r3, [r7, #18]
 8017d50:	88fa      	ldrh	r2, [r7, #6]
 8017d52:	4293      	cmp	r3, r2
 8017d54:	bf28      	it	cs
 8017d56:	4613      	movcs	r3, r2
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017d5c:	4293      	cmp	r3, r2
 8017d5e:	bf28      	it	cs
 8017d60:	4613      	movcs	r3, r2
 8017d62:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8017d64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d68:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d6a:	4413      	add	r3, r2
 8017d6c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017d70:	8a7a      	ldrh	r2, [r7, #18]
 8017d72:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	827b      	strh	r3, [r7, #18]
 8017d7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017d7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017d7e:	1ad3      	subs	r3, r2, r3
 8017d80:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017d82:	8a7b      	ldrh	r3, [r7, #18]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d00b      	beq.n	8017da0 <tcp_write+0x1a0>
 8017d88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d8c:	88fb      	ldrh	r3, [r7, #6]
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	d006      	beq.n	8017da0 <tcp_write+0x1a0>
 8017d92:	4b52      	ldr	r3, [pc, #328]	@ (8017edc <tcp_write+0x2dc>)
 8017d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017d98:	4956      	ldr	r1, [pc, #344]	@ (8017ef4 <tcp_write+0x2f4>)
 8017d9a:	4852      	ldr	r0, [pc, #328]	@ (8017ee4 <tcp_write+0x2e4>)
 8017d9c:	f005 fcf4 	bl	801d788 <iprintf>
 8017da0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017da4:	88fb      	ldrh	r3, [r7, #6]
 8017da6:	429a      	cmp	r2, r3
 8017da8:	f080 8167 	bcs.w	801807a <tcp_write+0x47a>
 8017dac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	f000 8163 	beq.w	801807a <tcp_write+0x47a>
 8017db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017db6:	891b      	ldrh	r3, [r3, #8]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	f000 815e 	beq.w	801807a <tcp_write+0x47a>
 8017dbe:	88fa      	ldrh	r2, [r7, #6]
 8017dc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017dc4:	1ad2      	subs	r2, r2, r3
 8017dc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	bfa8      	it	ge
 8017dcc:	4613      	movge	r3, r2
 8017dce:	83fb      	strh	r3, [r7, #30]
 8017dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017dd4:	797b      	ldrb	r3, [r7, #5]
 8017dd6:	f003 0301 	and.w	r3, r3, #1
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d027      	beq.n	8017e2e <tcp_write+0x22e>
 8017dde:	f107 0012 	add.w	r0, r7, #18
 8017de2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017de4:	8bf9      	ldrh	r1, [r7, #30]
 8017de6:	2301      	movs	r3, #1
 8017de8:	9302      	str	r3, [sp, #8]
 8017dea:	797b      	ldrb	r3, [r7, #5]
 8017dec:	9301      	str	r3, [sp, #4]
 8017dee:	68fb      	ldr	r3, [r7, #12]
 8017df0:	9300      	str	r3, [sp, #0]
 8017df2:	4603      	mov	r3, r0
 8017df4:	2000      	movs	r0, #0
 8017df6:	f7ff fe0f 	bl	8017a18 <tcp_pbuf_prealloc>
 8017dfa:	6578      	str	r0, [r7, #84]	@ 0x54
 8017dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	f000 8225 	beq.w	801824e <tcp_write+0x64e>
 8017e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e06:	6858      	ldr	r0, [r3, #4]
 8017e08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e0c:	68ba      	ldr	r2, [r7, #8]
 8017e0e:	4413      	add	r3, r2
 8017e10:	8bfa      	ldrh	r2, [r7, #30]
 8017e12:	4619      	mov	r1, r3
 8017e14:	f005 ff39 	bl	801dc8a <memcpy>
 8017e18:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017e1a:	f7fb f983 	bl	8013124 <pbuf_clen>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	461a      	mov	r2, r3
 8017e22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017e26:	4413      	add	r3, r2
 8017e28:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017e2c:	e041      	b.n	8017eb2 <tcp_write+0x2b2>
 8017e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e34:	e002      	b.n	8017e3c <tcp_write+0x23c>
 8017e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d1f8      	bne.n	8017e36 <tcp_write+0x236>
 8017e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e46:	7b1b      	ldrb	r3, [r3, #12]
 8017e48:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d115      	bne.n	8017e7c <tcp_write+0x27c>
 8017e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017e56:	8952      	ldrh	r2, [r2, #10]
 8017e58:	4413      	add	r3, r2
 8017e5a:	68ba      	ldr	r2, [r7, #8]
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d10d      	bne.n	8017e7c <tcp_write+0x27c>
 8017e60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d006      	beq.n	8017e76 <tcp_write+0x276>
 8017e68:	4b1c      	ldr	r3, [pc, #112]	@ (8017edc <tcp_write+0x2dc>)
 8017e6a:	f240 2231 	movw	r2, #561	@ 0x231
 8017e6e:	4922      	ldr	r1, [pc, #136]	@ (8017ef8 <tcp_write+0x2f8>)
 8017e70:	481c      	ldr	r0, [pc, #112]	@ (8017ee4 <tcp_write+0x2e4>)
 8017e72:	f005 fc89 	bl	801d788 <iprintf>
 8017e76:	8bfb      	ldrh	r3, [r7, #30]
 8017e78:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017e7a:	e01a      	b.n	8017eb2 <tcp_write+0x2b2>
 8017e7c:	8bfb      	ldrh	r3, [r7, #30]
 8017e7e:	2201      	movs	r2, #1
 8017e80:	4619      	mov	r1, r3
 8017e82:	2000      	movs	r0, #0
 8017e84:	f7fa fddc 	bl	8012a40 <pbuf_alloc>
 8017e88:	6578      	str	r0, [r7, #84]	@ 0x54
 8017e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f000 81e0 	beq.w	8018252 <tcp_write+0x652>
 8017e92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e96:	68ba      	ldr	r2, [r7, #8]
 8017e98:	441a      	add	r2, r3
 8017e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017e9c:	605a      	str	r2, [r3, #4]
 8017e9e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017ea0:	f7fb f940 	bl	8013124 <pbuf_clen>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	461a      	mov	r2, r3
 8017ea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017eac:	4413      	add	r3, r2
 8017eae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017eb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017eb6:	8bfb      	ldrh	r3, [r7, #30]
 8017eb8:	4413      	add	r3, r2
 8017eba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017ebe:	e0dc      	b.n	801807a <tcp_write+0x47a>
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	f000 80d7 	beq.w	801807a <tcp_write+0x47a>
 8017ecc:	4b03      	ldr	r3, [pc, #12]	@ (8017edc <tcp_write+0x2dc>)
 8017ece:	f240 224a 	movw	r2, #586	@ 0x24a
 8017ed2:	490a      	ldr	r1, [pc, #40]	@ (8017efc <tcp_write+0x2fc>)
 8017ed4:	4803      	ldr	r0, [pc, #12]	@ (8017ee4 <tcp_write+0x2e4>)
 8017ed6:	f005 fc57 	bl	801d788 <iprintf>
 8017eda:	e0ce      	b.n	801807a <tcp_write+0x47a>
 8017edc:	0802229c 	.word	0x0802229c
 8017ee0:	0802243c 	.word	0x0802243c
 8017ee4:	080222f0 	.word	0x080222f0
 8017ee8:	08022454 	.word	0x08022454
 8017eec:	08022488 	.word	0x08022488
 8017ef0:	080224a0 	.word	0x080224a0
 8017ef4:	080224c0 	.word	0x080224c0
 8017ef8:	080224e0 	.word	0x080224e0
 8017efc:	0802250c 	.word	0x0802250c
 8017f00:	88fa      	ldrh	r2, [r7, #6]
 8017f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017f06:	1ad3      	subs	r3, r2, r3
 8017f08:	83bb      	strh	r3, [r7, #28]
 8017f0a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017f0e:	b29b      	uxth	r3, r3
 8017f10:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f12:	1ad3      	subs	r3, r2, r3
 8017f14:	837b      	strh	r3, [r7, #26]
 8017f16:	8b7a      	ldrh	r2, [r7, #26]
 8017f18:	8bbb      	ldrh	r3, [r7, #28]
 8017f1a:	4293      	cmp	r3, r2
 8017f1c:	bf28      	it	cs
 8017f1e:	4613      	movcs	r3, r2
 8017f20:	833b      	strh	r3, [r7, #24]
 8017f22:	797b      	ldrb	r3, [r7, #5]
 8017f24:	f003 0301 	and.w	r3, r3, #1
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d036      	beq.n	8017f9a <tcp_write+0x39a>
 8017f2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	8b3b      	ldrh	r3, [r7, #24]
 8017f34:	4413      	add	r3, r2
 8017f36:	b299      	uxth	r1, r3
 8017f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	bf0c      	ite	eq
 8017f3e:	2301      	moveq	r3, #1
 8017f40:	2300      	movne	r3, #0
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	f107 0012 	add.w	r0, r7, #18
 8017f48:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017f4a:	9302      	str	r3, [sp, #8]
 8017f4c:	797b      	ldrb	r3, [r7, #5]
 8017f4e:	9301      	str	r3, [sp, #4]
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	9300      	str	r3, [sp, #0]
 8017f54:	4603      	mov	r3, r0
 8017f56:	2036      	movs	r0, #54	@ 0x36
 8017f58:	f7ff fd5e 	bl	8017a18 <tcp_pbuf_prealloc>
 8017f5c:	6338      	str	r0, [r7, #48]	@ 0x30
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	f000 8178 	beq.w	8018256 <tcp_write+0x656>
 8017f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f68:	895b      	ldrh	r3, [r3, #10]
 8017f6a:	8b3a      	ldrh	r2, [r7, #24]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	d906      	bls.n	8017f7e <tcp_write+0x37e>
 8017f70:	4b8c      	ldr	r3, [pc, #560]	@ (80181a4 <tcp_write+0x5a4>)
 8017f72:	f240 2266 	movw	r2, #614	@ 0x266
 8017f76:	498c      	ldr	r1, [pc, #560]	@ (80181a8 <tcp_write+0x5a8>)
 8017f78:	488c      	ldr	r0, [pc, #560]	@ (80181ac <tcp_write+0x5ac>)
 8017f7a:	f005 fc05 	bl	801d788 <iprintf>
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f80:	685a      	ldr	r2, [r3, #4]
 8017f82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017f86:	18d0      	adds	r0, r2, r3
 8017f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017f8c:	68ba      	ldr	r2, [r7, #8]
 8017f8e:	4413      	add	r3, r2
 8017f90:	8b3a      	ldrh	r2, [r7, #24]
 8017f92:	4619      	mov	r1, r3
 8017f94:	f005 fe79 	bl	801dc8a <memcpy>
 8017f98:	e02f      	b.n	8017ffa <tcp_write+0x3fa>
 8017f9a:	8a7b      	ldrh	r3, [r7, #18]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d006      	beq.n	8017fae <tcp_write+0x3ae>
 8017fa0:	4b80      	ldr	r3, [pc, #512]	@ (80181a4 <tcp_write+0x5a4>)
 8017fa2:	f240 2271 	movw	r2, #625	@ 0x271
 8017fa6:	4982      	ldr	r1, [pc, #520]	@ (80181b0 <tcp_write+0x5b0>)
 8017fa8:	4880      	ldr	r0, [pc, #512]	@ (80181ac <tcp_write+0x5ac>)
 8017faa:	f005 fbed 	bl	801d788 <iprintf>
 8017fae:	8b3b      	ldrh	r3, [r7, #24]
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	2036      	movs	r0, #54	@ 0x36
 8017fb6:	f7fa fd43 	bl	8012a40 <pbuf_alloc>
 8017fba:	6178      	str	r0, [r7, #20]
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f000 814b 	beq.w	801825a <tcp_write+0x65a>
 8017fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017fc8:	68ba      	ldr	r2, [r7, #8]
 8017fca:	441a      	add	r2, r3
 8017fcc:	697b      	ldr	r3, [r7, #20]
 8017fce:	605a      	str	r2, [r3, #4]
 8017fd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017fda:	4619      	mov	r1, r3
 8017fdc:	2036      	movs	r0, #54	@ 0x36
 8017fde:	f7fa fd2f 	bl	8012a40 <pbuf_alloc>
 8017fe2:	6338      	str	r0, [r7, #48]	@ 0x30
 8017fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d103      	bne.n	8017ff2 <tcp_write+0x3f2>
 8017fea:	6978      	ldr	r0, [r7, #20]
 8017fec:	f7fb f80c 	bl	8013008 <pbuf_free>
 8017ff0:	e136      	b.n	8018260 <tcp_write+0x660>
 8017ff2:	6979      	ldr	r1, [r7, #20]
 8017ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ff6:	f7fb f8d5 	bl	80131a4 <pbuf_cat>
 8017ffa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ffc:	f7fb f892 	bl	8013124 <pbuf_clen>
 8018000:	4603      	mov	r3, r0
 8018002:	461a      	mov	r2, r3
 8018004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018008:	4413      	add	r3, r2
 801800a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801800e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018012:	2b09      	cmp	r3, #9
 8018014:	d903      	bls.n	801801e <tcp_write+0x41e>
 8018016:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018018:	f7fa fff6 	bl	8013008 <pbuf_free>
 801801c:	e120      	b.n	8018260 <tcp_write+0x660>
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018022:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018026:	441a      	add	r2, r3
 8018028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801802c:	9300      	str	r3, [sp, #0]
 801802e:	4613      	mov	r3, r2
 8018030:	2200      	movs	r2, #0
 8018032:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018034:	68f8      	ldr	r0, [r7, #12]
 8018036:	f7ff fc53 	bl	80178e0 <tcp_create_segment>
 801803a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801803c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801803e:	2b00      	cmp	r3, #0
 8018040:	f000 810d 	beq.w	801825e <tcp_write+0x65e>
 8018044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018046:	2b00      	cmp	r3, #0
 8018048:	d102      	bne.n	8018050 <tcp_write+0x450>
 801804a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801804c:	647b      	str	r3, [r7, #68]	@ 0x44
 801804e:	e00c      	b.n	801806a <tcp_write+0x46a>
 8018050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018052:	2b00      	cmp	r3, #0
 8018054:	d106      	bne.n	8018064 <tcp_write+0x464>
 8018056:	4b53      	ldr	r3, [pc, #332]	@ (80181a4 <tcp_write+0x5a4>)
 8018058:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801805c:	4955      	ldr	r1, [pc, #340]	@ (80181b4 <tcp_write+0x5b4>)
 801805e:	4853      	ldr	r0, [pc, #332]	@ (80181ac <tcp_write+0x5ac>)
 8018060:	f005 fb92 	bl	801d788 <iprintf>
 8018064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018066:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018068:	601a      	str	r2, [r3, #0]
 801806a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801806c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801806e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018072:	8b3b      	ldrh	r3, [r7, #24]
 8018074:	4413      	add	r3, r2
 8018076:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801807a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801807e:	88fb      	ldrh	r3, [r7, #6]
 8018080:	429a      	cmp	r2, r3
 8018082:	f4ff af3d 	bcc.w	8017f00 <tcp_write+0x300>
 8018086:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018088:	2b00      	cmp	r3, #0
 801808a:	d02c      	beq.n	80180e6 <tcp_write+0x4e6>
 801808c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018092:	e01e      	b.n	80180d2 <tcp_write+0x4d2>
 8018094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018096:	891a      	ldrh	r2, [r3, #8]
 8018098:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801809a:	4413      	add	r3, r2
 801809c:	b29a      	uxth	r2, r3
 801809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a0:	811a      	strh	r2, [r3, #8]
 80180a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d110      	bne.n	80180cc <tcp_write+0x4cc>
 80180aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80180b0:	8952      	ldrh	r2, [r2, #10]
 80180b2:	4413      	add	r3, r2
 80180b4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80180b6:	68b9      	ldr	r1, [r7, #8]
 80180b8:	4618      	mov	r0, r3
 80180ba:	f005 fde6 	bl	801dc8a <memcpy>
 80180be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180c0:	895a      	ldrh	r2, [r3, #10]
 80180c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80180c4:	4413      	add	r3, r2
 80180c6:	b29a      	uxth	r2, r3
 80180c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ca:	815a      	strh	r2, [r3, #10]
 80180cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80180d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d1dd      	bne.n	8018094 <tcp_write+0x494>
 80180d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180da:	891a      	ldrh	r2, [r3, #8]
 80180dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80180de:	4413      	add	r3, r2
 80180e0:	b29a      	uxth	r2, r3
 80180e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180e4:	811a      	strh	r2, [r3, #8]
 80180e6:	8a7a      	ldrh	r2, [r7, #18]
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80180ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d018      	beq.n	8018126 <tcp_write+0x526>
 80180f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	d106      	bne.n	8018108 <tcp_write+0x508>
 80180fa:	4b2a      	ldr	r3, [pc, #168]	@ (80181a4 <tcp_write+0x5a4>)
 80180fc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8018100:	492d      	ldr	r1, [pc, #180]	@ (80181b8 <tcp_write+0x5b8>)
 8018102:	482a      	ldr	r0, [pc, #168]	@ (80181ac <tcp_write+0x5ac>)
 8018104:	f005 fb40 	bl	801d788 <iprintf>
 8018108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801810e:	4618      	mov	r0, r3
 8018110:	f7fb f848 	bl	80131a4 <pbuf_cat>
 8018114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018116:	891a      	ldrh	r2, [r3, #8]
 8018118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801811a:	891b      	ldrh	r3, [r3, #8]
 801811c:	4413      	add	r3, r2
 801811e:	b29a      	uxth	r2, r3
 8018120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018122:	811a      	strh	r2, [r3, #8]
 8018124:	e037      	b.n	8018196 <tcp_write+0x596>
 8018126:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018128:	2b00      	cmp	r3, #0
 801812a:	d034      	beq.n	8018196 <tcp_write+0x596>
 801812c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801812e:	2b00      	cmp	r3, #0
 8018130:	d003      	beq.n	801813a <tcp_write+0x53a>
 8018132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d106      	bne.n	8018148 <tcp_write+0x548>
 801813a:	4b1a      	ldr	r3, [pc, #104]	@ (80181a4 <tcp_write+0x5a4>)
 801813c:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018140:	491e      	ldr	r1, [pc, #120]	@ (80181bc <tcp_write+0x5bc>)
 8018142:	481a      	ldr	r0, [pc, #104]	@ (80181ac <tcp_write+0x5ac>)
 8018144:	f005 fb20 	bl	801d788 <iprintf>
 8018148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801814a:	685b      	ldr	r3, [r3, #4]
 801814c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801814e:	e009      	b.n	8018164 <tcp_write+0x564>
 8018150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018152:	891a      	ldrh	r2, [r3, #8]
 8018154:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018156:	4413      	add	r3, r2
 8018158:	b29a      	uxth	r2, r3
 801815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801815c:	811a      	strh	r2, [r3, #8]
 801815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d1f1      	bne.n	8018150 <tcp_write+0x550>
 801816c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801816e:	891a      	ldrh	r2, [r3, #8]
 8018170:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018172:	4413      	add	r3, r2
 8018174:	b29a      	uxth	r2, r3
 8018176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018178:	811a      	strh	r2, [r3, #8]
 801817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801817c:	895a      	ldrh	r2, [r3, #10]
 801817e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018180:	4413      	add	r3, r2
 8018182:	b29a      	uxth	r2, r3
 8018184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018186:	815a      	strh	r2, [r3, #10]
 8018188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801818a:	891a      	ldrh	r2, [r3, #8]
 801818c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801818e:	4413      	add	r3, r2
 8018190:	b29a      	uxth	r2, r3
 8018192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018194:	811a      	strh	r2, [r3, #8]
 8018196:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018198:	2b00      	cmp	r3, #0
 801819a:	d111      	bne.n	80181c0 <tcp_write+0x5c0>
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80181a2:	e010      	b.n	80181c6 <tcp_write+0x5c6>
 80181a4:	0802229c 	.word	0x0802229c
 80181a8:	0802253c 	.word	0x0802253c
 80181ac:	080222f0 	.word	0x080222f0
 80181b0:	0802257c 	.word	0x0802257c
 80181b4:	0802258c 	.word	0x0802258c
 80181b8:	080225a0 	.word	0x080225a0
 80181bc:	080225d8 	.word	0x080225d8
 80181c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80181c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181c4:	601a      	str	r2, [r3, #0]
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80181ca:	88fb      	ldrh	r3, [r7, #6]
 80181cc:	441a      	add	r2, r3
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80181d8:	88fb      	ldrh	r3, [r7, #6]
 80181da:	1ad3      	subs	r3, r2, r3
 80181dc:	b29a      	uxth	r2, r3
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80181ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d00e      	beq.n	8018216 <tcp_write+0x616>
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d10a      	bne.n	8018216 <tcp_write+0x616>
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018204:	2b00      	cmp	r3, #0
 8018206:	d106      	bne.n	8018216 <tcp_write+0x616>
 8018208:	4b2c      	ldr	r3, [pc, #176]	@ (80182bc <tcp_write+0x6bc>)
 801820a:	f240 3212 	movw	r2, #786	@ 0x312
 801820e:	492c      	ldr	r1, [pc, #176]	@ (80182c0 <tcp_write+0x6c0>)
 8018210:	482c      	ldr	r0, [pc, #176]	@ (80182c4 <tcp_write+0x6c4>)
 8018212:	f005 fab9 	bl	801d788 <iprintf>
 8018216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018218:	2b00      	cmp	r3, #0
 801821a:	d016      	beq.n	801824a <tcp_write+0x64a>
 801821c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801821e:	68db      	ldr	r3, [r3, #12]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d012      	beq.n	801824a <tcp_write+0x64a>
 8018224:	797b      	ldrb	r3, [r7, #5]
 8018226:	f003 0302 	and.w	r3, r3, #2
 801822a:	2b00      	cmp	r3, #0
 801822c:	d10d      	bne.n	801824a <tcp_write+0x64a>
 801822e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018230:	68db      	ldr	r3, [r3, #12]
 8018232:	899b      	ldrh	r3, [r3, #12]
 8018234:	b29c      	uxth	r4, r3
 8018236:	2008      	movs	r0, #8
 8018238:	f7f9 fabe 	bl	80117b8 <lwip_htons>
 801823c:	4603      	mov	r3, r0
 801823e:	461a      	mov	r2, r3
 8018240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	4322      	orrs	r2, r4
 8018246:	b292      	uxth	r2, r2
 8018248:	819a      	strh	r2, [r3, #12]
 801824a:	2300      	movs	r3, #0
 801824c:	e031      	b.n	80182b2 <tcp_write+0x6b2>
 801824e:	bf00      	nop
 8018250:	e006      	b.n	8018260 <tcp_write+0x660>
 8018252:	bf00      	nop
 8018254:	e004      	b.n	8018260 <tcp_write+0x660>
 8018256:	bf00      	nop
 8018258:	e002      	b.n	8018260 <tcp_write+0x660>
 801825a:	bf00      	nop
 801825c:	e000      	b.n	8018260 <tcp_write+0x660>
 801825e:	bf00      	nop
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	8b5b      	ldrh	r3, [r3, #26]
 8018264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018268:	b29a      	uxth	r2, r3
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	835a      	strh	r2, [r3, #26]
 801826e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018270:	2b00      	cmp	r3, #0
 8018272:	d002      	beq.n	801827a <tcp_write+0x67a>
 8018274:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018276:	f7fa fec7 	bl	8013008 <pbuf_free>
 801827a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801827c:	2b00      	cmp	r3, #0
 801827e:	d002      	beq.n	8018286 <tcp_write+0x686>
 8018280:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018282:	f7fc fb53 	bl	801492c <tcp_segs_free>
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801828c:	2b00      	cmp	r3, #0
 801828e:	d00e      	beq.n	80182ae <tcp_write+0x6ae>
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018294:	2b00      	cmp	r3, #0
 8018296:	d10a      	bne.n	80182ae <tcp_write+0x6ae>
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801829c:	2b00      	cmp	r3, #0
 801829e:	d106      	bne.n	80182ae <tcp_write+0x6ae>
 80182a0:	4b06      	ldr	r3, [pc, #24]	@ (80182bc <tcp_write+0x6bc>)
 80182a2:	f240 3227 	movw	r2, #807	@ 0x327
 80182a6:	4906      	ldr	r1, [pc, #24]	@ (80182c0 <tcp_write+0x6c0>)
 80182a8:	4806      	ldr	r0, [pc, #24]	@ (80182c4 <tcp_write+0x6c4>)
 80182aa:	f005 fa6d 	bl	801d788 <iprintf>
 80182ae:	f04f 33ff 	mov.w	r3, #4294967295
 80182b2:	4618      	mov	r0, r3
 80182b4:	375c      	adds	r7, #92	@ 0x5c
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd90      	pop	{r4, r7, pc}
 80182ba:	bf00      	nop
 80182bc:	0802229c 	.word	0x0802229c
 80182c0:	08022610 	.word	0x08022610
 80182c4:	080222f0 	.word	0x080222f0

080182c8 <tcp_split_unsent_seg>:
 80182c8:	b590      	push	{r4, r7, lr}
 80182ca:	b08b      	sub	sp, #44	@ 0x2c
 80182cc:	af02      	add	r7, sp, #8
 80182ce:	6078      	str	r0, [r7, #4]
 80182d0:	460b      	mov	r3, r1
 80182d2:	807b      	strh	r3, [r7, #2]
 80182d4:	2300      	movs	r3, #0
 80182d6:	61fb      	str	r3, [r7, #28]
 80182d8:	2300      	movs	r3, #0
 80182da:	617b      	str	r3, [r7, #20]
 80182dc:	2300      	movs	r3, #0
 80182de:	613b      	str	r3, [r7, #16]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d106      	bne.n	80182f4 <tcp_split_unsent_seg+0x2c>
 80182e6:	4b95      	ldr	r3, [pc, #596]	@ (801853c <tcp_split_unsent_seg+0x274>)
 80182e8:	f240 324b 	movw	r2, #843	@ 0x34b
 80182ec:	4994      	ldr	r1, [pc, #592]	@ (8018540 <tcp_split_unsent_seg+0x278>)
 80182ee:	4895      	ldr	r0, [pc, #596]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 80182f0:	f005 fa4a 	bl	801d788 <iprintf>
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80182f8:	617b      	str	r3, [r7, #20]
 80182fa:	697b      	ldr	r3, [r7, #20]
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d102      	bne.n	8018306 <tcp_split_unsent_seg+0x3e>
 8018300:	f04f 33ff 	mov.w	r3, #4294967295
 8018304:	e116      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
 8018306:	887b      	ldrh	r3, [r7, #2]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d109      	bne.n	8018320 <tcp_split_unsent_seg+0x58>
 801830c:	4b8b      	ldr	r3, [pc, #556]	@ (801853c <tcp_split_unsent_seg+0x274>)
 801830e:	f240 3253 	movw	r2, #851	@ 0x353
 8018312:	498d      	ldr	r1, [pc, #564]	@ (8018548 <tcp_split_unsent_seg+0x280>)
 8018314:	488b      	ldr	r0, [pc, #556]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018316:	f005 fa37 	bl	801d788 <iprintf>
 801831a:	f06f 0305 	mvn.w	r3, #5
 801831e:	e109      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
 8018320:	697b      	ldr	r3, [r7, #20]
 8018322:	891b      	ldrh	r3, [r3, #8]
 8018324:	887a      	ldrh	r2, [r7, #2]
 8018326:	429a      	cmp	r2, r3
 8018328:	d301      	bcc.n	801832e <tcp_split_unsent_seg+0x66>
 801832a:	2300      	movs	r3, #0
 801832c:	e102      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018332:	887a      	ldrh	r2, [r7, #2]
 8018334:	429a      	cmp	r2, r3
 8018336:	d906      	bls.n	8018346 <tcp_split_unsent_seg+0x7e>
 8018338:	4b80      	ldr	r3, [pc, #512]	@ (801853c <tcp_split_unsent_seg+0x274>)
 801833a:	f240 325b 	movw	r2, #859	@ 0x35b
 801833e:	4983      	ldr	r1, [pc, #524]	@ (801854c <tcp_split_unsent_seg+0x284>)
 8018340:	4880      	ldr	r0, [pc, #512]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018342:	f005 fa21 	bl	801d788 <iprintf>
 8018346:	697b      	ldr	r3, [r7, #20]
 8018348:	891b      	ldrh	r3, [r3, #8]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d106      	bne.n	801835c <tcp_split_unsent_seg+0x94>
 801834e:	4b7b      	ldr	r3, [pc, #492]	@ (801853c <tcp_split_unsent_seg+0x274>)
 8018350:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018354:	497e      	ldr	r1, [pc, #504]	@ (8018550 <tcp_split_unsent_seg+0x288>)
 8018356:	487b      	ldr	r0, [pc, #492]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018358:	f005 fa16 	bl	801d788 <iprintf>
 801835c:	697b      	ldr	r3, [r7, #20]
 801835e:	7a9b      	ldrb	r3, [r3, #10]
 8018360:	73fb      	strb	r3, [r7, #15]
 8018362:	7bfb      	ldrb	r3, [r7, #15]
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	b2db      	uxtb	r3, r3
 8018368:	f003 0304 	and.w	r3, r3, #4
 801836c:	73bb      	strb	r3, [r7, #14]
 801836e:	697b      	ldr	r3, [r7, #20]
 8018370:	891a      	ldrh	r2, [r3, #8]
 8018372:	887b      	ldrh	r3, [r7, #2]
 8018374:	1ad3      	subs	r3, r2, r3
 8018376:	81bb      	strh	r3, [r7, #12]
 8018378:	7bbb      	ldrb	r3, [r7, #14]
 801837a:	b29a      	uxth	r2, r3
 801837c:	89bb      	ldrh	r3, [r7, #12]
 801837e:	4413      	add	r3, r2
 8018380:	b29b      	uxth	r3, r3
 8018382:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018386:	4619      	mov	r1, r3
 8018388:	2036      	movs	r0, #54	@ 0x36
 801838a:	f7fa fb59 	bl	8012a40 <pbuf_alloc>
 801838e:	6138      	str	r0, [r7, #16]
 8018390:	693b      	ldr	r3, [r7, #16]
 8018392:	2b00      	cmp	r3, #0
 8018394:	f000 80b7 	beq.w	8018506 <tcp_split_unsent_seg+0x23e>
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	891a      	ldrh	r2, [r3, #8]
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	891b      	ldrh	r3, [r3, #8]
 80183a2:	1ad3      	subs	r3, r2, r3
 80183a4:	b29a      	uxth	r2, r3
 80183a6:	887b      	ldrh	r3, [r7, #2]
 80183a8:	4413      	add	r3, r2
 80183aa:	817b      	strh	r3, [r7, #10]
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	6858      	ldr	r0, [r3, #4]
 80183b0:	693b      	ldr	r3, [r7, #16]
 80183b2:	685a      	ldr	r2, [r3, #4]
 80183b4:	7bbb      	ldrb	r3, [r7, #14]
 80183b6:	18d1      	adds	r1, r2, r3
 80183b8:	897b      	ldrh	r3, [r7, #10]
 80183ba:	89ba      	ldrh	r2, [r7, #12]
 80183bc:	f7fb f82a 	bl	8013414 <pbuf_copy_partial>
 80183c0:	4603      	mov	r3, r0
 80183c2:	461a      	mov	r2, r3
 80183c4:	89bb      	ldrh	r3, [r7, #12]
 80183c6:	4293      	cmp	r3, r2
 80183c8:	f040 809f 	bne.w	801850a <tcp_split_unsent_seg+0x242>
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	899b      	ldrh	r3, [r3, #12]
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7f9 f9ef 	bl	80117b8 <lwip_htons>
 80183da:	4603      	mov	r3, r0
 80183dc:	b2db      	uxtb	r3, r3
 80183de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80183e2:	76fb      	strb	r3, [r7, #27]
 80183e4:	2300      	movs	r3, #0
 80183e6:	76bb      	strb	r3, [r7, #26]
 80183e8:	7efb      	ldrb	r3, [r7, #27]
 80183ea:	f003 0308 	and.w	r3, r3, #8
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d007      	beq.n	8018402 <tcp_split_unsent_seg+0x13a>
 80183f2:	7efb      	ldrb	r3, [r7, #27]
 80183f4:	f023 0308 	bic.w	r3, r3, #8
 80183f8:	76fb      	strb	r3, [r7, #27]
 80183fa:	7ebb      	ldrb	r3, [r7, #26]
 80183fc:	f043 0308 	orr.w	r3, r3, #8
 8018400:	76bb      	strb	r3, [r7, #26]
 8018402:	7efb      	ldrb	r3, [r7, #27]
 8018404:	f003 0301 	and.w	r3, r3, #1
 8018408:	2b00      	cmp	r3, #0
 801840a:	d007      	beq.n	801841c <tcp_split_unsent_seg+0x154>
 801840c:	7efb      	ldrb	r3, [r7, #27]
 801840e:	f023 0301 	bic.w	r3, r3, #1
 8018412:	76fb      	strb	r3, [r7, #27]
 8018414:	7ebb      	ldrb	r3, [r7, #26]
 8018416:	f043 0301 	orr.w	r3, r3, #1
 801841a:	76bb      	strb	r3, [r7, #26]
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	68db      	ldr	r3, [r3, #12]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	4618      	mov	r0, r3
 8018424:	f7f9 f9dd 	bl	80117e2 <lwip_htonl>
 8018428:	4602      	mov	r2, r0
 801842a:	887b      	ldrh	r3, [r7, #2]
 801842c:	18d1      	adds	r1, r2, r3
 801842e:	7eba      	ldrb	r2, [r7, #26]
 8018430:	7bfb      	ldrb	r3, [r7, #15]
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	460b      	mov	r3, r1
 8018436:	6939      	ldr	r1, [r7, #16]
 8018438:	6878      	ldr	r0, [r7, #4]
 801843a:	f7ff fa51 	bl	80178e0 <tcp_create_segment>
 801843e:	61f8      	str	r0, [r7, #28]
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d063      	beq.n	801850e <tcp_split_unsent_seg+0x246>
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	4618      	mov	r0, r3
 801844c:	f7fa fe6a 	bl	8013124 <pbuf_clen>
 8018450:	4603      	mov	r3, r0
 8018452:	461a      	mov	r2, r3
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801845a:	1a9b      	subs	r3, r3, r2
 801845c:	b29a      	uxth	r2, r3
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8018464:	697b      	ldr	r3, [r7, #20]
 8018466:	6858      	ldr	r0, [r3, #4]
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	685b      	ldr	r3, [r3, #4]
 801846c:	891a      	ldrh	r2, [r3, #8]
 801846e:	89bb      	ldrh	r3, [r7, #12]
 8018470:	1ad3      	subs	r3, r2, r3
 8018472:	b29b      	uxth	r3, r3
 8018474:	4619      	mov	r1, r3
 8018476:	f7fa fc41 	bl	8012cfc <pbuf_realloc>
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	891a      	ldrh	r2, [r3, #8]
 801847e:	89bb      	ldrh	r3, [r7, #12]
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	b29a      	uxth	r2, r3
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	811a      	strh	r2, [r3, #8]
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	68db      	ldr	r3, [r3, #12]
 801848c:	899b      	ldrh	r3, [r3, #12]
 801848e:	b29c      	uxth	r4, r3
 8018490:	7efb      	ldrb	r3, [r7, #27]
 8018492:	b29b      	uxth	r3, r3
 8018494:	4618      	mov	r0, r3
 8018496:	f7f9 f98f 	bl	80117b8 <lwip_htons>
 801849a:	4603      	mov	r3, r0
 801849c:	461a      	mov	r2, r3
 801849e:	697b      	ldr	r3, [r7, #20]
 80184a0:	68db      	ldr	r3, [r3, #12]
 80184a2:	4322      	orrs	r2, r4
 80184a4:	b292      	uxth	r2, r2
 80184a6:	819a      	strh	r2, [r3, #12]
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	685b      	ldr	r3, [r3, #4]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7fa fe39 	bl	8013124 <pbuf_clen>
 80184b2:	4603      	mov	r3, r0
 80184b4:	461a      	mov	r2, r3
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184bc:	4413      	add	r3, r2
 80184be:	b29a      	uxth	r2, r3
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 80184c6:	69fb      	ldr	r3, [r7, #28]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	4618      	mov	r0, r3
 80184cc:	f7fa fe2a 	bl	8013124 <pbuf_clen>
 80184d0:	4603      	mov	r3, r0
 80184d2:	461a      	mov	r2, r3
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80184da:	4413      	add	r3, r2
 80184dc:	b29a      	uxth	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 80184e4:	697b      	ldr	r3, [r7, #20]
 80184e6:	681a      	ldr	r2, [r3, #0]
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	601a      	str	r2, [r3, #0]
 80184ec:	697b      	ldr	r3, [r7, #20]
 80184ee:	69fa      	ldr	r2, [r7, #28]
 80184f0:	601a      	str	r2, [r3, #0]
 80184f2:	69fb      	ldr	r3, [r7, #28]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d103      	bne.n	8018502 <tcp_split_unsent_seg+0x23a>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	2200      	movs	r2, #0
 80184fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018502:	2300      	movs	r3, #0
 8018504:	e016      	b.n	8018534 <tcp_split_unsent_seg+0x26c>
 8018506:	bf00      	nop
 8018508:	e002      	b.n	8018510 <tcp_split_unsent_seg+0x248>
 801850a:	bf00      	nop
 801850c:	e000      	b.n	8018510 <tcp_split_unsent_seg+0x248>
 801850e:	bf00      	nop
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d006      	beq.n	8018524 <tcp_split_unsent_seg+0x25c>
 8018516:	4b09      	ldr	r3, [pc, #36]	@ (801853c <tcp_split_unsent_seg+0x274>)
 8018518:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801851c:	490d      	ldr	r1, [pc, #52]	@ (8018554 <tcp_split_unsent_seg+0x28c>)
 801851e:	4809      	ldr	r0, [pc, #36]	@ (8018544 <tcp_split_unsent_seg+0x27c>)
 8018520:	f005 f932 	bl	801d788 <iprintf>
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d002      	beq.n	8018530 <tcp_split_unsent_seg+0x268>
 801852a:	6938      	ldr	r0, [r7, #16]
 801852c:	f7fa fd6c 	bl	8013008 <pbuf_free>
 8018530:	f04f 33ff 	mov.w	r3, #4294967295
 8018534:	4618      	mov	r0, r3
 8018536:	3724      	adds	r7, #36	@ 0x24
 8018538:	46bd      	mov	sp, r7
 801853a:	bd90      	pop	{r4, r7, pc}
 801853c:	0802229c 	.word	0x0802229c
 8018540:	08022630 	.word	0x08022630
 8018544:	080222f0 	.word	0x080222f0
 8018548:	08022654 	.word	0x08022654
 801854c:	08022678 	.word	0x08022678
 8018550:	08022688 	.word	0x08022688
 8018554:	08022698 	.word	0x08022698

08018558 <tcp_send_fin>:
 8018558:	b590      	push	{r4, r7, lr}
 801855a:	b085      	sub	sp, #20
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d106      	bne.n	8018574 <tcp_send_fin+0x1c>
 8018566:	4b21      	ldr	r3, [pc, #132]	@ (80185ec <tcp_send_fin+0x94>)
 8018568:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801856c:	4920      	ldr	r1, [pc, #128]	@ (80185f0 <tcp_send_fin+0x98>)
 801856e:	4821      	ldr	r0, [pc, #132]	@ (80185f4 <tcp_send_fin+0x9c>)
 8018570:	f005 f90a 	bl	801d788 <iprintf>
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018578:	2b00      	cmp	r3, #0
 801857a:	d02e      	beq.n	80185da <tcp_send_fin+0x82>
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018580:	60fb      	str	r3, [r7, #12]
 8018582:	e002      	b.n	801858a <tcp_send_fin+0x32>
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	60fb      	str	r3, [r7, #12]
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d1f8      	bne.n	8018584 <tcp_send_fin+0x2c>
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	68db      	ldr	r3, [r3, #12]
 8018596:	899b      	ldrh	r3, [r3, #12]
 8018598:	b29b      	uxth	r3, r3
 801859a:	4618      	mov	r0, r3
 801859c:	f7f9 f90c 	bl	80117b8 <lwip_htons>
 80185a0:	4603      	mov	r3, r0
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	f003 0307 	and.w	r3, r3, #7
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d116      	bne.n	80185da <tcp_send_fin+0x82>
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	68db      	ldr	r3, [r3, #12]
 80185b0:	899b      	ldrh	r3, [r3, #12]
 80185b2:	b29c      	uxth	r4, r3
 80185b4:	2001      	movs	r0, #1
 80185b6:	f7f9 f8ff 	bl	80117b8 <lwip_htons>
 80185ba:	4603      	mov	r3, r0
 80185bc:	461a      	mov	r2, r3
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	68db      	ldr	r3, [r3, #12]
 80185c2:	4322      	orrs	r2, r4
 80185c4:	b292      	uxth	r2, r2
 80185c6:	819a      	strh	r2, [r3, #12]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	8b5b      	ldrh	r3, [r3, #26]
 80185cc:	f043 0320 	orr.w	r3, r3, #32
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	835a      	strh	r2, [r3, #26]
 80185d6:	2300      	movs	r3, #0
 80185d8:	e004      	b.n	80185e4 <tcp_send_fin+0x8c>
 80185da:	2101      	movs	r1, #1
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f000 f80b 	bl	80185f8 <tcp_enqueue_flags>
 80185e2:	4603      	mov	r3, r0
 80185e4:	4618      	mov	r0, r3
 80185e6:	3714      	adds	r7, #20
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd90      	pop	{r4, r7, pc}
 80185ec:	0802229c 	.word	0x0802229c
 80185f0:	080226a4 	.word	0x080226a4
 80185f4:	080222f0 	.word	0x080222f0

080185f8 <tcp_enqueue_flags>:
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b08a      	sub	sp, #40	@ 0x28
 80185fc:	af02      	add	r7, sp, #8
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	460b      	mov	r3, r1
 8018602:	70fb      	strb	r3, [r7, #3]
 8018604:	2300      	movs	r3, #0
 8018606:	77fb      	strb	r3, [r7, #31]
 8018608:	2300      	movs	r3, #0
 801860a:	75fb      	strb	r3, [r7, #23]
 801860c:	78fb      	ldrb	r3, [r7, #3]
 801860e:	f003 0303 	and.w	r3, r3, #3
 8018612:	2b00      	cmp	r3, #0
 8018614:	d106      	bne.n	8018624 <tcp_enqueue_flags+0x2c>
 8018616:	4b67      	ldr	r3, [pc, #412]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 8018618:	f240 4211 	movw	r2, #1041	@ 0x411
 801861c:	4966      	ldr	r1, [pc, #408]	@ (80187b8 <tcp_enqueue_flags+0x1c0>)
 801861e:	4867      	ldr	r0, [pc, #412]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018620:	f005 f8b2 	bl	801d788 <iprintf>
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <tcp_enqueue_flags+0x40>
 801862a:	4b62      	ldr	r3, [pc, #392]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801862c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018630:	4963      	ldr	r1, [pc, #396]	@ (80187c0 <tcp_enqueue_flags+0x1c8>)
 8018632:	4862      	ldr	r0, [pc, #392]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018634:	f005 f8a8 	bl	801d788 <iprintf>
 8018638:	78fb      	ldrb	r3, [r7, #3]
 801863a:	f003 0302 	and.w	r3, r3, #2
 801863e:	2b00      	cmp	r3, #0
 8018640:	d001      	beq.n	8018646 <tcp_enqueue_flags+0x4e>
 8018642:	2301      	movs	r3, #1
 8018644:	77fb      	strb	r3, [r7, #31]
 8018646:	7ffb      	ldrb	r3, [r7, #31]
 8018648:	009b      	lsls	r3, r3, #2
 801864a:	b2db      	uxtb	r3, r3
 801864c:	f003 0304 	and.w	r3, r3, #4
 8018650:	75fb      	strb	r3, [r7, #23]
 8018652:	7dfb      	ldrb	r3, [r7, #23]
 8018654:	b29b      	uxth	r3, r3
 8018656:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801865a:	4619      	mov	r1, r3
 801865c:	2036      	movs	r0, #54	@ 0x36
 801865e:	f7fa f9ef 	bl	8012a40 <pbuf_alloc>
 8018662:	6138      	str	r0, [r7, #16]
 8018664:	693b      	ldr	r3, [r7, #16]
 8018666:	2b00      	cmp	r3, #0
 8018668:	d109      	bne.n	801867e <tcp_enqueue_flags+0x86>
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	8b5b      	ldrh	r3, [r3, #26]
 801866e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018672:	b29a      	uxth	r2, r3
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	835a      	strh	r2, [r3, #26]
 8018678:	f04f 33ff 	mov.w	r3, #4294967295
 801867c:	e095      	b.n	80187aa <tcp_enqueue_flags+0x1b2>
 801867e:	693b      	ldr	r3, [r7, #16]
 8018680:	895a      	ldrh	r2, [r3, #10]
 8018682:	7dfb      	ldrb	r3, [r7, #23]
 8018684:	b29b      	uxth	r3, r3
 8018686:	429a      	cmp	r2, r3
 8018688:	d206      	bcs.n	8018698 <tcp_enqueue_flags+0xa0>
 801868a:	4b4a      	ldr	r3, [pc, #296]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801868c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018690:	494c      	ldr	r1, [pc, #304]	@ (80187c4 <tcp_enqueue_flags+0x1cc>)
 8018692:	484a      	ldr	r0, [pc, #296]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 8018694:	f005 f878 	bl	801d788 <iprintf>
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801869c:	78fa      	ldrb	r2, [r7, #3]
 801869e:	7ffb      	ldrb	r3, [r7, #31]
 80186a0:	9300      	str	r3, [sp, #0]
 80186a2:	460b      	mov	r3, r1
 80186a4:	6939      	ldr	r1, [r7, #16]
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f7ff f91a 	bl	80178e0 <tcp_create_segment>
 80186ac:	60f8      	str	r0, [r7, #12]
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d109      	bne.n	80186c8 <tcp_enqueue_flags+0xd0>
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	8b5b      	ldrh	r3, [r3, #26]
 80186b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186bc:	b29a      	uxth	r2, r3
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	835a      	strh	r2, [r3, #26]
 80186c2:	f04f 33ff 	mov.w	r3, #4294967295
 80186c6:	e070      	b.n	80187aa <tcp_enqueue_flags+0x1b2>
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	f003 0303 	and.w	r3, r3, #3
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d006      	beq.n	80186e2 <tcp_enqueue_flags+0xea>
 80186d4:	4b37      	ldr	r3, [pc, #220]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 80186d6:	f240 4242 	movw	r2, #1090	@ 0x442
 80186da:	493b      	ldr	r1, [pc, #236]	@ (80187c8 <tcp_enqueue_flags+0x1d0>)
 80186dc:	4837      	ldr	r0, [pc, #220]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80186de:	f005 f853 	bl	801d788 <iprintf>
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	891b      	ldrh	r3, [r3, #8]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d006      	beq.n	80186f8 <tcp_enqueue_flags+0x100>
 80186ea:	4b32      	ldr	r3, [pc, #200]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 80186ec:	f240 4243 	movw	r2, #1091	@ 0x443
 80186f0:	4936      	ldr	r1, [pc, #216]	@ (80187cc <tcp_enqueue_flags+0x1d4>)
 80186f2:	4832      	ldr	r0, [pc, #200]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80186f4:	f005 f848 	bl	801d788 <iprintf>
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d103      	bne.n	8018708 <tcp_enqueue_flags+0x110>
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	68fa      	ldr	r2, [r7, #12]
 8018704:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018706:	e00d      	b.n	8018724 <tcp_enqueue_flags+0x12c>
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801870c:	61bb      	str	r3, [r7, #24]
 801870e:	e002      	b.n	8018716 <tcp_enqueue_flags+0x11e>
 8018710:	69bb      	ldr	r3, [r7, #24]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	61bb      	str	r3, [r7, #24]
 8018716:	69bb      	ldr	r3, [r7, #24]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d1f8      	bne.n	8018710 <tcp_enqueue_flags+0x118>
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	68fa      	ldr	r2, [r7, #12]
 8018722:	601a      	str	r2, [r3, #0]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2200      	movs	r2, #0
 8018728:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801872c:	78fb      	ldrb	r3, [r7, #3]
 801872e:	f003 0302 	and.w	r3, r3, #2
 8018732:	2b00      	cmp	r3, #0
 8018734:	d104      	bne.n	8018740 <tcp_enqueue_flags+0x148>
 8018736:	78fb      	ldrb	r3, [r7, #3]
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	2b00      	cmp	r3, #0
 801873e:	d004      	beq.n	801874a <tcp_enqueue_flags+0x152>
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018744:	1c5a      	adds	r2, r3, #1
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	65da      	str	r2, [r3, #92]	@ 0x5c
 801874a:	78fb      	ldrb	r3, [r7, #3]
 801874c:	f003 0301 	and.w	r3, r3, #1
 8018750:	2b00      	cmp	r3, #0
 8018752:	d006      	beq.n	8018762 <tcp_enqueue_flags+0x16a>
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	8b5b      	ldrh	r3, [r3, #26]
 8018758:	f043 0320 	orr.w	r3, r3, #32
 801875c:	b29a      	uxth	r2, r3
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	835a      	strh	r2, [r3, #26]
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	4618      	mov	r0, r3
 8018768:	f7fa fcdc 	bl	8013124 <pbuf_clen>
 801876c:	4603      	mov	r3, r0
 801876e:	461a      	mov	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018776:	4413      	add	r3, r2
 8018778:	b29a      	uxth	r2, r3
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018786:	2b00      	cmp	r3, #0
 8018788:	d00e      	beq.n	80187a8 <tcp_enqueue_flags+0x1b0>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801878e:	2b00      	cmp	r3, #0
 8018790:	d10a      	bne.n	80187a8 <tcp_enqueue_flags+0x1b0>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018796:	2b00      	cmp	r3, #0
 8018798:	d106      	bne.n	80187a8 <tcp_enqueue_flags+0x1b0>
 801879a:	4b06      	ldr	r3, [pc, #24]	@ (80187b4 <tcp_enqueue_flags+0x1bc>)
 801879c:	f240 4265 	movw	r2, #1125	@ 0x465
 80187a0:	490b      	ldr	r1, [pc, #44]	@ (80187d0 <tcp_enqueue_flags+0x1d8>)
 80187a2:	4806      	ldr	r0, [pc, #24]	@ (80187bc <tcp_enqueue_flags+0x1c4>)
 80187a4:	f004 fff0 	bl	801d788 <iprintf>
 80187a8:	2300      	movs	r3, #0
 80187aa:	4618      	mov	r0, r3
 80187ac:	3720      	adds	r7, #32
 80187ae:	46bd      	mov	sp, r7
 80187b0:	bd80      	pop	{r7, pc}
 80187b2:	bf00      	nop
 80187b4:	0802229c 	.word	0x0802229c
 80187b8:	080226c0 	.word	0x080226c0
 80187bc:	080222f0 	.word	0x080222f0
 80187c0:	08022718 	.word	0x08022718
 80187c4:	08022738 	.word	0x08022738
 80187c8:	08022774 	.word	0x08022774
 80187cc:	0802278c 	.word	0x0802278c
 80187d0:	080227b8 	.word	0x080227b8

080187d4 <tcp_output>:
 80187d4:	b5b0      	push	{r4, r5, r7, lr}
 80187d6:	b08a      	sub	sp, #40	@ 0x28
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d106      	bne.n	80187f0 <tcp_output+0x1c>
 80187e2:	4b8a      	ldr	r3, [pc, #552]	@ (8018a0c <tcp_output+0x238>)
 80187e4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80187e8:	4989      	ldr	r1, [pc, #548]	@ (8018a10 <tcp_output+0x23c>)
 80187ea:	488a      	ldr	r0, [pc, #552]	@ (8018a14 <tcp_output+0x240>)
 80187ec:	f004 ffcc 	bl	801d788 <iprintf>
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	7d1b      	ldrb	r3, [r3, #20]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d106      	bne.n	8018806 <tcp_output+0x32>
 80187f8:	4b84      	ldr	r3, [pc, #528]	@ (8018a0c <tcp_output+0x238>)
 80187fa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80187fe:	4986      	ldr	r1, [pc, #536]	@ (8018a18 <tcp_output+0x244>)
 8018800:	4884      	ldr	r0, [pc, #528]	@ (8018a14 <tcp_output+0x240>)
 8018802:	f004 ffc1 	bl	801d788 <iprintf>
 8018806:	4b85      	ldr	r3, [pc, #532]	@ (8018a1c <tcp_output+0x248>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	687a      	ldr	r2, [r7, #4]
 801880c:	429a      	cmp	r2, r3
 801880e:	d101      	bne.n	8018814 <tcp_output+0x40>
 8018810:	2300      	movs	r3, #0
 8018812:	e1ce      	b.n	8018bb2 <tcp_output+0x3de>
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018820:	4293      	cmp	r3, r2
 8018822:	bf28      	it	cs
 8018824:	4613      	movcs	r3, r2
 8018826:	b29b      	uxth	r3, r3
 8018828:	61bb      	str	r3, [r7, #24]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801882e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018832:	2b00      	cmp	r3, #0
 8018834:	d10b      	bne.n	801884e <tcp_output+0x7a>
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	8b5b      	ldrh	r3, [r3, #26]
 801883a:	f003 0302 	and.w	r3, r3, #2
 801883e:	2b00      	cmp	r3, #0
 8018840:	f000 81aa 	beq.w	8018b98 <tcp_output+0x3c4>
 8018844:	6878      	ldr	r0, [r7, #4]
 8018846:	f000 fdcb 	bl	80193e0 <tcp_send_empty_ack>
 801884a:	4603      	mov	r3, r0
 801884c:	e1b1      	b.n	8018bb2 <tcp_output+0x3de>
 801884e:	6879      	ldr	r1, [r7, #4]
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	3304      	adds	r3, #4
 8018854:	461a      	mov	r2, r3
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f7ff f826 	bl	80178a8 <tcp_route>
 801885c:	6178      	str	r0, [r7, #20]
 801885e:	697b      	ldr	r3, [r7, #20]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d102      	bne.n	801886a <tcp_output+0x96>
 8018864:	f06f 0303 	mvn.w	r3, #3
 8018868:	e1a3      	b.n	8018bb2 <tcp_output+0x3de>
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d003      	beq.n	8018878 <tcp_output+0xa4>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d111      	bne.n	801889c <tcp_output+0xc8>
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d002      	beq.n	8018884 <tcp_output+0xb0>
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	3304      	adds	r3, #4
 8018882:	e000      	b.n	8018886 <tcp_output+0xb2>
 8018884:	2300      	movs	r3, #0
 8018886:	613b      	str	r3, [r7, #16]
 8018888:	693b      	ldr	r3, [r7, #16]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d102      	bne.n	8018894 <tcp_output+0xc0>
 801888e:	f06f 0303 	mvn.w	r3, #3
 8018892:	e18e      	b.n	8018bb2 <tcp_output+0x3de>
 8018894:	693b      	ldr	r3, [r7, #16]
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	601a      	str	r2, [r3, #0]
 801889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801889e:	68db      	ldr	r3, [r3, #12]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7f8 ff9d 	bl	80117e2 <lwip_htonl>
 80188a8:	4602      	mov	r2, r0
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80188ae:	1ad3      	subs	r3, r2, r3
 80188b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80188b2:	8912      	ldrh	r2, [r2, #8]
 80188b4:	4413      	add	r3, r2
 80188b6:	69ba      	ldr	r2, [r7, #24]
 80188b8:	429a      	cmp	r2, r3
 80188ba:	d227      	bcs.n	801890c <tcp_output+0x138>
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80188c2:	461a      	mov	r2, r3
 80188c4:	69bb      	ldr	r3, [r7, #24]
 80188c6:	4293      	cmp	r3, r2
 80188c8:	d114      	bne.n	80188f4 <tcp_output+0x120>
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d110      	bne.n	80188f4 <tcp_output+0x120>
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d10b      	bne.n	80188f4 <tcp_output+0x120>
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2200      	movs	r2, #0
 80188e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2201      	movs	r2, #1
 80188e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	2200      	movs	r2, #0
 80188f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	8b5b      	ldrh	r3, [r3, #26]
 80188f8:	f003 0302 	and.w	r3, r3, #2
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	f000 814d 	beq.w	8018b9c <tcp_output+0x3c8>
 8018902:	6878      	ldr	r0, [r7, #4]
 8018904:	f000 fd6c 	bl	80193e0 <tcp_send_empty_ack>
 8018908:	4603      	mov	r3, r0
 801890a:	e152      	b.n	8018bb2 <tcp_output+0x3de>
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2200      	movs	r2, #0
 8018910:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018918:	623b      	str	r3, [r7, #32]
 801891a:	6a3b      	ldr	r3, [r7, #32]
 801891c:	2b00      	cmp	r3, #0
 801891e:	f000 811c 	beq.w	8018b5a <tcp_output+0x386>
 8018922:	e002      	b.n	801892a <tcp_output+0x156>
 8018924:	6a3b      	ldr	r3, [r7, #32]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	623b      	str	r3, [r7, #32]
 801892a:	6a3b      	ldr	r3, [r7, #32]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d1f8      	bne.n	8018924 <tcp_output+0x150>
 8018932:	e112      	b.n	8018b5a <tcp_output+0x386>
 8018934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018936:	68db      	ldr	r3, [r3, #12]
 8018938:	899b      	ldrh	r3, [r3, #12]
 801893a:	b29b      	uxth	r3, r3
 801893c:	4618      	mov	r0, r3
 801893e:	f7f8 ff3b 	bl	80117b8 <lwip_htons>
 8018942:	4603      	mov	r3, r0
 8018944:	b2db      	uxtb	r3, r3
 8018946:	f003 0304 	and.w	r3, r3, #4
 801894a:	2b00      	cmp	r3, #0
 801894c:	d006      	beq.n	801895c <tcp_output+0x188>
 801894e:	4b2f      	ldr	r3, [pc, #188]	@ (8018a0c <tcp_output+0x238>)
 8018950:	f240 5236 	movw	r2, #1334	@ 0x536
 8018954:	4932      	ldr	r1, [pc, #200]	@ (8018a20 <tcp_output+0x24c>)
 8018956:	482f      	ldr	r0, [pc, #188]	@ (8018a14 <tcp_output+0x240>)
 8018958:	f004 ff16 	bl	801d788 <iprintf>
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018960:	2b00      	cmp	r3, #0
 8018962:	d01f      	beq.n	80189a4 <tcp_output+0x1d0>
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	8b5b      	ldrh	r3, [r3, #26]
 8018968:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801896c:	2b00      	cmp	r3, #0
 801896e:	d119      	bne.n	80189a4 <tcp_output+0x1d0>
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018974:	2b00      	cmp	r3, #0
 8018976:	d00b      	beq.n	8018990 <tcp_output+0x1bc>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d110      	bne.n	80189a4 <tcp_output+0x1d0>
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018986:	891a      	ldrh	r2, [r3, #8]
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801898c:	429a      	cmp	r2, r3
 801898e:	d209      	bcs.n	80189a4 <tcp_output+0x1d0>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018996:	2b00      	cmp	r3, #0
 8018998:	d004      	beq.n	80189a4 <tcp_output+0x1d0>
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80189a0:	2b08      	cmp	r3, #8
 80189a2:	d901      	bls.n	80189a8 <tcp_output+0x1d4>
 80189a4:	2301      	movs	r3, #1
 80189a6:	e000      	b.n	80189aa <tcp_output+0x1d6>
 80189a8:	2300      	movs	r3, #0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d106      	bne.n	80189bc <tcp_output+0x1e8>
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	8b5b      	ldrh	r3, [r3, #26]
 80189b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f000 80e4 	beq.w	8018b84 <tcp_output+0x3b0>
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	7d1b      	ldrb	r3, [r3, #20]
 80189c0:	2b02      	cmp	r3, #2
 80189c2:	d00d      	beq.n	80189e0 <tcp_output+0x20c>
 80189c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	899b      	ldrh	r3, [r3, #12]
 80189ca:	b29c      	uxth	r4, r3
 80189cc:	2010      	movs	r0, #16
 80189ce:	f7f8 fef3 	bl	80117b8 <lwip_htons>
 80189d2:	4603      	mov	r3, r0
 80189d4:	461a      	mov	r2, r3
 80189d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d8:	68db      	ldr	r3, [r3, #12]
 80189da:	4322      	orrs	r2, r4
 80189dc:	b292      	uxth	r2, r2
 80189de:	819a      	strh	r2, [r3, #12]
 80189e0:	697a      	ldr	r2, [r7, #20]
 80189e2:	6879      	ldr	r1, [r7, #4]
 80189e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80189e6:	f000 f909 	bl	8018bfc <tcp_output_segment>
 80189ea:	4603      	mov	r3, r0
 80189ec:	73fb      	strb	r3, [r7, #15]
 80189ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d016      	beq.n	8018a24 <tcp_output+0x250>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	8b5b      	ldrh	r3, [r3, #26]
 80189fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	835a      	strh	r2, [r3, #26]
 8018a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a08:	e0d3      	b.n	8018bb2 <tcp_output+0x3de>
 8018a0a:	bf00      	nop
 8018a0c:	0802229c 	.word	0x0802229c
 8018a10:	080227e0 	.word	0x080227e0
 8018a14:	080222f0 	.word	0x080222f0
 8018a18:	080227f8 	.word	0x080227f8
 8018a1c:	2000f428 	.word	0x2000f428
 8018a20:	08022820 	.word	0x08022820
 8018a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a26:	681a      	ldr	r2, [r3, #0]
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	7d1b      	ldrb	r3, [r3, #20]
 8018a30:	2b02      	cmp	r3, #2
 8018a32:	d006      	beq.n	8018a42 <tcp_output+0x26e>
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	8b5b      	ldrh	r3, [r3, #26]
 8018a38:	f023 0303 	bic.w	r3, r3, #3
 8018a3c:	b29a      	uxth	r2, r3
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	835a      	strh	r2, [r3, #26]
 8018a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a44:	68db      	ldr	r3, [r3, #12]
 8018a46:	685b      	ldr	r3, [r3, #4]
 8018a48:	4618      	mov	r0, r3
 8018a4a:	f7f8 feca 	bl	80117e2 <lwip_htonl>
 8018a4e:	4604      	mov	r4, r0
 8018a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a52:	891b      	ldrh	r3, [r3, #8]
 8018a54:	461d      	mov	r5, r3
 8018a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a58:	68db      	ldr	r3, [r3, #12]
 8018a5a:	899b      	ldrh	r3, [r3, #12]
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	4618      	mov	r0, r3
 8018a60:	f7f8 feaa 	bl	80117b8 <lwip_htons>
 8018a64:	4603      	mov	r3, r0
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	f003 0303 	and.w	r3, r3, #3
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d001      	beq.n	8018a74 <tcp_output+0x2a0>
 8018a70:	2301      	movs	r3, #1
 8018a72:	e000      	b.n	8018a76 <tcp_output+0x2a2>
 8018a74:	2300      	movs	r3, #0
 8018a76:	442b      	add	r3, r5
 8018a78:	4423      	add	r3, r4
 8018a7a:	60bb      	str	r3, [r7, #8]
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	da02      	bge.n	8018a8e <tcp_output+0x2ba>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	68ba      	ldr	r2, [r7, #8]
 8018a8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8018a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a90:	891b      	ldrh	r3, [r3, #8]
 8018a92:	461c      	mov	r4, r3
 8018a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a96:	68db      	ldr	r3, [r3, #12]
 8018a98:	899b      	ldrh	r3, [r3, #12]
 8018a9a:	b29b      	uxth	r3, r3
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7f8 fe8b 	bl	80117b8 <lwip_htons>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	b2db      	uxtb	r3, r3
 8018aa6:	f003 0303 	and.w	r3, r3, #3
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d001      	beq.n	8018ab2 <tcp_output+0x2de>
 8018aae:	2301      	movs	r3, #1
 8018ab0:	e000      	b.n	8018ab4 <tcp_output+0x2e0>
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	4423      	add	r3, r4
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d049      	beq.n	8018b4e <tcp_output+0x37a>
 8018aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018abc:	2200      	movs	r2, #0
 8018abe:	601a      	str	r2, [r3, #0]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d105      	bne.n	8018ad4 <tcp_output+0x300>
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018acc:	671a      	str	r2, [r3, #112]	@ 0x70
 8018ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad0:	623b      	str	r3, [r7, #32]
 8018ad2:	e03f      	b.n	8018b54 <tcp_output+0x380>
 8018ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ad6:	68db      	ldr	r3, [r3, #12]
 8018ad8:	685b      	ldr	r3, [r3, #4]
 8018ada:	4618      	mov	r0, r3
 8018adc:	f7f8 fe81 	bl	80117e2 <lwip_htonl>
 8018ae0:	4604      	mov	r4, r0
 8018ae2:	6a3b      	ldr	r3, [r7, #32]
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7f8 fe7a 	bl	80117e2 <lwip_htonl>
 8018aee:	4603      	mov	r3, r0
 8018af0:	1ae3      	subs	r3, r4, r3
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	da24      	bge.n	8018b40 <tcp_output+0x36c>
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	3370      	adds	r3, #112	@ 0x70
 8018afa:	61fb      	str	r3, [r7, #28]
 8018afc:	e002      	b.n	8018b04 <tcp_output+0x330>
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	61fb      	str	r3, [r7, #28]
 8018b04:	69fb      	ldr	r3, [r7, #28]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d011      	beq.n	8018b30 <tcp_output+0x35c>
 8018b0c:	69fb      	ldr	r3, [r7, #28]
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	68db      	ldr	r3, [r3, #12]
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7f8 fe64 	bl	80117e2 <lwip_htonl>
 8018b1a:	4604      	mov	r4, r0
 8018b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b1e:	68db      	ldr	r3, [r3, #12]
 8018b20:	685b      	ldr	r3, [r3, #4]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f7f8 fe5d 	bl	80117e2 <lwip_htonl>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	1ae3      	subs	r3, r4, r3
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	dbe6      	blt.n	8018afe <tcp_output+0x32a>
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b36:	601a      	str	r2, [r3, #0]
 8018b38:	69fb      	ldr	r3, [r7, #28]
 8018b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b3c:	601a      	str	r2, [r3, #0]
 8018b3e:	e009      	b.n	8018b54 <tcp_output+0x380>
 8018b40:	6a3b      	ldr	r3, [r7, #32]
 8018b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b44:	601a      	str	r2, [r3, #0]
 8018b46:	6a3b      	ldr	r3, [r7, #32]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	623b      	str	r3, [r7, #32]
 8018b4c:	e002      	b.n	8018b54 <tcp_output+0x380>
 8018b4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018b50:	f7fb ff01 	bl	8014956 <tcp_seg_free>
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d012      	beq.n	8018b86 <tcp_output+0x3b2>
 8018b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	685b      	ldr	r3, [r3, #4]
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7f8 fe3b 	bl	80117e2 <lwip_htonl>
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b72:	1ad3      	subs	r3, r2, r3
 8018b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018b76:	8912      	ldrh	r2, [r2, #8]
 8018b78:	4413      	add	r3, r2
 8018b7a:	69ba      	ldr	r2, [r7, #24]
 8018b7c:	429a      	cmp	r2, r3
 8018b7e:	f4bf aed9 	bcs.w	8018934 <tcp_output+0x160>
 8018b82:	e000      	b.n	8018b86 <tcp_output+0x3b2>
 8018b84:	bf00      	nop
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d108      	bne.n	8018ba0 <tcp_output+0x3cc>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018b96:	e004      	b.n	8018ba2 <tcp_output+0x3ce>
 8018b98:	bf00      	nop
 8018b9a:	e002      	b.n	8018ba2 <tcp_output+0x3ce>
 8018b9c:	bf00      	nop
 8018b9e:	e000      	b.n	8018ba2 <tcp_output+0x3ce>
 8018ba0:	bf00      	nop
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	8b5b      	ldrh	r3, [r3, #26]
 8018ba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018baa:	b29a      	uxth	r2, r3
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	835a      	strh	r2, [r3, #26]
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3728      	adds	r7, #40	@ 0x28
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8018bba:	bf00      	nop

08018bbc <tcp_output_segment_busy>:
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	b082      	sub	sp, #8
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d106      	bne.n	8018bd8 <tcp_output_segment_busy+0x1c>
 8018bca:	4b09      	ldr	r3, [pc, #36]	@ (8018bf0 <tcp_output_segment_busy+0x34>)
 8018bcc:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018bd0:	4908      	ldr	r1, [pc, #32]	@ (8018bf4 <tcp_output_segment_busy+0x38>)
 8018bd2:	4809      	ldr	r0, [pc, #36]	@ (8018bf8 <tcp_output_segment_busy+0x3c>)
 8018bd4:	f004 fdd8 	bl	801d788 <iprintf>
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	7b9b      	ldrb	r3, [r3, #14]
 8018bde:	2b01      	cmp	r3, #1
 8018be0:	d001      	beq.n	8018be6 <tcp_output_segment_busy+0x2a>
 8018be2:	2301      	movs	r3, #1
 8018be4:	e000      	b.n	8018be8 <tcp_output_segment_busy+0x2c>
 8018be6:	2300      	movs	r3, #0
 8018be8:	4618      	mov	r0, r3
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	0802229c 	.word	0x0802229c
 8018bf4:	08022838 	.word	0x08022838
 8018bf8:	080222f0 	.word	0x080222f0

08018bfc <tcp_output_segment>:
 8018bfc:	b5b0      	push	{r4, r5, r7, lr}
 8018bfe:	b08c      	sub	sp, #48	@ 0x30
 8018c00:	af04      	add	r7, sp, #16
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d106      	bne.n	8018c1c <tcp_output_segment+0x20>
 8018c0e:	4b64      	ldr	r3, [pc, #400]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c10:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018c14:	4963      	ldr	r1, [pc, #396]	@ (8018da4 <tcp_output_segment+0x1a8>)
 8018c16:	4864      	ldr	r0, [pc, #400]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c18:	f004 fdb6 	bl	801d788 <iprintf>
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d106      	bne.n	8018c30 <tcp_output_segment+0x34>
 8018c22:	4b5f      	ldr	r3, [pc, #380]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c24:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018c28:	4960      	ldr	r1, [pc, #384]	@ (8018dac <tcp_output_segment+0x1b0>)
 8018c2a:	485f      	ldr	r0, [pc, #380]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c2c:	f004 fdac 	bl	801d788 <iprintf>
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d106      	bne.n	8018c44 <tcp_output_segment+0x48>
 8018c36:	4b5a      	ldr	r3, [pc, #360]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018c38:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8018c3c:	495c      	ldr	r1, [pc, #368]	@ (8018db0 <tcp_output_segment+0x1b4>)
 8018c3e:	485a      	ldr	r0, [pc, #360]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018c40:	f004 fda2 	bl	801d788 <iprintf>
 8018c44:	68f8      	ldr	r0, [r7, #12]
 8018c46:	f7ff ffb9 	bl	8018bbc <tcp_output_segment_busy>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d001      	beq.n	8018c54 <tcp_output_segment+0x58>
 8018c50:	2300      	movs	r3, #0
 8018c52:	e0a1      	b.n	8018d98 <tcp_output_segment+0x19c>
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	68dc      	ldr	r4, [r3, #12]
 8018c5c:	4610      	mov	r0, r2
 8018c5e:	f7f8 fdc0 	bl	80117e2 <lwip_htonl>
 8018c62:	4603      	mov	r3, r0
 8018c64:	60a3      	str	r3, [r4, #8]
 8018c66:	68bb      	ldr	r3, [r7, #8]
 8018c68:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	68dc      	ldr	r4, [r3, #12]
 8018c6e:	4610      	mov	r0, r2
 8018c70:	f7f8 fda2 	bl	80117b8 <lwip_htons>
 8018c74:	4603      	mov	r3, r0
 8018c76:	81e3      	strh	r3, [r4, #14]
 8018c78:	68bb      	ldr	r3, [r7, #8]
 8018c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c7c:	68ba      	ldr	r2, [r7, #8]
 8018c7e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018c80:	441a      	add	r2, r3
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	68db      	ldr	r3, [r3, #12]
 8018c8a:	3314      	adds	r3, #20
 8018c8c:	61fb      	str	r3, [r7, #28]
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	7a9b      	ldrb	r3, [r3, #10]
 8018c92:	f003 0301 	and.w	r3, r3, #1
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d015      	beq.n	8018cc6 <tcp_output_segment+0xca>
 8018c9a:	68bb      	ldr	r3, [r7, #8]
 8018c9c:	3304      	adds	r3, #4
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	6879      	ldr	r1, [r7, #4]
 8018ca2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018ca6:	f7fc fa39 	bl	801511c <tcp_eff_send_mss_netif>
 8018caa:	4603      	mov	r3, r0
 8018cac:	837b      	strh	r3, [r7, #26]
 8018cae:	8b7b      	ldrh	r3, [r7, #26]
 8018cb0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	f7f8 fd94 	bl	80117e2 <lwip_htonl>
 8018cba:	4602      	mov	r2, r0
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	601a      	str	r2, [r3, #0]
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	3304      	adds	r3, #4
 8018cc4:	61fb      	str	r3, [r7, #28]
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	da02      	bge.n	8018cd6 <tcp_output_segment+0xda>
 8018cd0:	68bb      	ldr	r3, [r7, #8]
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d10c      	bne.n	8018cf8 <tcp_output_segment+0xfc>
 8018cde:	4b35      	ldr	r3, [pc, #212]	@ (8018db4 <tcp_output_segment+0x1b8>)
 8018ce0:	681a      	ldr	r2, [r3, #0]
 8018ce2:	68bb      	ldr	r3, [r7, #8]
 8018ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	68db      	ldr	r3, [r3, #12]
 8018cea:	685b      	ldr	r3, [r3, #4]
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7f8 fd78 	bl	80117e2 <lwip_htonl>
 8018cf2:	4602      	mov	r2, r0
 8018cf4:	68bb      	ldr	r3, [r7, #8]
 8018cf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	68da      	ldr	r2, [r3, #12]
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	685b      	ldr	r3, [r3, #4]
 8018d00:	685b      	ldr	r3, [r3, #4]
 8018d02:	1ad3      	subs	r3, r2, r3
 8018d04:	833b      	strh	r3, [r7, #24]
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	8959      	ldrh	r1, [r3, #10]
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	685b      	ldr	r3, [r3, #4]
 8018d10:	8b3a      	ldrh	r2, [r7, #24]
 8018d12:	1a8a      	subs	r2, r1, r2
 8018d14:	b292      	uxth	r2, r2
 8018d16:	815a      	strh	r2, [r3, #10]
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	8919      	ldrh	r1, [r3, #8]
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	685b      	ldr	r3, [r3, #4]
 8018d22:	8b3a      	ldrh	r2, [r7, #24]
 8018d24:	1a8a      	subs	r2, r1, r2
 8018d26:	b292      	uxth	r2, r2
 8018d28:	811a      	strh	r2, [r3, #8]
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	68fa      	ldr	r2, [r7, #12]
 8018d30:	68d2      	ldr	r2, [r2, #12]
 8018d32:	605a      	str	r2, [r3, #4]
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	68db      	ldr	r3, [r3, #12]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	741a      	strb	r2, [r3, #16]
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	745a      	strb	r2, [r3, #17]
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	68da      	ldr	r2, [r3, #12]
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	7a9b      	ldrb	r3, [r3, #10]
 8018d48:	f003 0301 	and.w	r3, r3, #1
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d001      	beq.n	8018d54 <tcp_output_segment+0x158>
 8018d50:	2318      	movs	r3, #24
 8018d52:	e000      	b.n	8018d56 <tcp_output_segment+0x15a>
 8018d54:	2314      	movs	r3, #20
 8018d56:	4413      	add	r3, r2
 8018d58:	69fa      	ldr	r2, [r7, #28]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d006      	beq.n	8018d6c <tcp_output_segment+0x170>
 8018d5e:	4b10      	ldr	r3, [pc, #64]	@ (8018da0 <tcp_output_segment+0x1a4>)
 8018d60:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018d64:	4914      	ldr	r1, [pc, #80]	@ (8018db8 <tcp_output_segment+0x1bc>)
 8018d66:	4810      	ldr	r0, [pc, #64]	@ (8018da8 <tcp_output_segment+0x1ac>)
 8018d68:	f004 fd0e 	bl	801d788 <iprintf>
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	6858      	ldr	r0, [r3, #4]
 8018d70:	68b9      	ldr	r1, [r7, #8]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	1d1c      	adds	r4, r3, #4
 8018d76:	68bb      	ldr	r3, [r7, #8]
 8018d78:	7add      	ldrb	r5, [r3, #11]
 8018d7a:	68bb      	ldr	r3, [r7, #8]
 8018d7c:	7a9b      	ldrb	r3, [r3, #10]
 8018d7e:	687a      	ldr	r2, [r7, #4]
 8018d80:	9202      	str	r2, [sp, #8]
 8018d82:	2206      	movs	r2, #6
 8018d84:	9201      	str	r2, [sp, #4]
 8018d86:	9300      	str	r3, [sp, #0]
 8018d88:	462b      	mov	r3, r5
 8018d8a:	4622      	mov	r2, r4
 8018d8c:	f002 fd94 	bl	801b8b8 <ip4_output_if>
 8018d90:	4603      	mov	r3, r0
 8018d92:	75fb      	strb	r3, [r7, #23]
 8018d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3720      	adds	r7, #32
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8018da0:	0802229c 	.word	0x0802229c
 8018da4:	08022860 	.word	0x08022860
 8018da8:	080222f0 	.word	0x080222f0
 8018dac:	08022880 	.word	0x08022880
 8018db0:	080228a0 	.word	0x080228a0
 8018db4:	2000f3dc 	.word	0x2000f3dc
 8018db8:	080228c4 	.word	0x080228c4

08018dbc <tcp_rexmit_rto_prepare>:
 8018dbc:	b5b0      	push	{r4, r5, r7, lr}
 8018dbe:	b084      	sub	sp, #16
 8018dc0:	af00      	add	r7, sp, #0
 8018dc2:	6078      	str	r0, [r7, #4]
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d106      	bne.n	8018dd8 <tcp_rexmit_rto_prepare+0x1c>
 8018dca:	4b31      	ldr	r3, [pc, #196]	@ (8018e90 <tcp_rexmit_rto_prepare+0xd4>)
 8018dcc:	f240 6263 	movw	r2, #1635	@ 0x663
 8018dd0:	4930      	ldr	r1, [pc, #192]	@ (8018e94 <tcp_rexmit_rto_prepare+0xd8>)
 8018dd2:	4831      	ldr	r0, [pc, #196]	@ (8018e98 <tcp_rexmit_rto_prepare+0xdc>)
 8018dd4:	f004 fcd8 	bl	801d788 <iprintf>
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d102      	bne.n	8018de6 <tcp_rexmit_rto_prepare+0x2a>
 8018de0:	f06f 0305 	mvn.w	r3, #5
 8018de4:	e050      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018dea:	60fb      	str	r3, [r7, #12]
 8018dec:	e00b      	b.n	8018e06 <tcp_rexmit_rto_prepare+0x4a>
 8018dee:	68f8      	ldr	r0, [r7, #12]
 8018df0:	f7ff fee4 	bl	8018bbc <tcp_output_segment_busy>
 8018df4:	4603      	mov	r3, r0
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d002      	beq.n	8018e00 <tcp_rexmit_rto_prepare+0x44>
 8018dfa:	f06f 0305 	mvn.w	r3, #5
 8018dfe:	e043      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	60fb      	str	r3, [r7, #12]
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d1ef      	bne.n	8018dee <tcp_rexmit_rto_prepare+0x32>
 8018e0e:	68f8      	ldr	r0, [r7, #12]
 8018e10:	f7ff fed4 	bl	8018bbc <tcp_output_segment_busy>
 8018e14:	4603      	mov	r3, r0
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d002      	beq.n	8018e20 <tcp_rexmit_rto_prepare+0x64>
 8018e1a:	f06f 0305 	mvn.w	r3, #5
 8018e1e:	e033      	b.n	8018e88 <tcp_rexmit_rto_prepare+0xcc>
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	601a      	str	r2, [r3, #0]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2200      	movs	r2, #0
 8018e34:	671a      	str	r2, [r3, #112]	@ 0x70
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	8b5b      	ldrh	r3, [r3, #26]
 8018e3a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	835a      	strh	r2, [r3, #26]
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	68db      	ldr	r3, [r3, #12]
 8018e48:	685b      	ldr	r3, [r3, #4]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f8 fcc9 	bl	80117e2 <lwip_htonl>
 8018e50:	4604      	mov	r4, r0
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	891b      	ldrh	r3, [r3, #8]
 8018e56:	461d      	mov	r5, r3
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	68db      	ldr	r3, [r3, #12]
 8018e5c:	899b      	ldrh	r3, [r3, #12]
 8018e5e:	b29b      	uxth	r3, r3
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7f8 fca9 	bl	80117b8 <lwip_htons>
 8018e66:	4603      	mov	r3, r0
 8018e68:	b2db      	uxtb	r3, r3
 8018e6a:	f003 0303 	and.w	r3, r3, #3
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d001      	beq.n	8018e76 <tcp_rexmit_rto_prepare+0xba>
 8018e72:	2301      	movs	r3, #1
 8018e74:	e000      	b.n	8018e78 <tcp_rexmit_rto_prepare+0xbc>
 8018e76:	2300      	movs	r3, #0
 8018e78:	442b      	add	r3, r5
 8018e7a:	18e2      	adds	r2, r4, r3
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2200      	movs	r2, #0
 8018e84:	635a      	str	r2, [r3, #52]	@ 0x34
 8018e86:	2300      	movs	r3, #0
 8018e88:	4618      	mov	r0, r3
 8018e8a:	3710      	adds	r7, #16
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8018e90:	0802229c 	.word	0x0802229c
 8018e94:	080228d8 	.word	0x080228d8
 8018e98:	080222f0 	.word	0x080222f0

08018e9c <tcp_rexmit_rto_commit>:
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b082      	sub	sp, #8
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d106      	bne.n	8018eb8 <tcp_rexmit_rto_commit+0x1c>
 8018eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8018ee0 <tcp_rexmit_rto_commit+0x44>)
 8018eac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018eb0:	490c      	ldr	r1, [pc, #48]	@ (8018ee4 <tcp_rexmit_rto_commit+0x48>)
 8018eb2:	480d      	ldr	r0, [pc, #52]	@ (8018ee8 <tcp_rexmit_rto_commit+0x4c>)
 8018eb4:	f004 fc68 	bl	801d788 <iprintf>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ebe:	2bff      	cmp	r3, #255	@ 0xff
 8018ec0:	d007      	beq.n	8018ed2 <tcp_rexmit_rto_commit+0x36>
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ec8:	3301      	adds	r3, #1
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8018ed2:	6878      	ldr	r0, [r7, #4]
 8018ed4:	f7ff fc7e 	bl	80187d4 <tcp_output>
 8018ed8:	bf00      	nop
 8018eda:	3708      	adds	r7, #8
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	0802229c 	.word	0x0802229c
 8018ee4:	080228fc 	.word	0x080228fc
 8018ee8:	080222f0 	.word	0x080222f0

08018eec <tcp_rexmit_rto>:
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b082      	sub	sp, #8
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	6078      	str	r0, [r7, #4]
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d106      	bne.n	8018f08 <tcp_rexmit_rto+0x1c>
 8018efa:	4b0a      	ldr	r3, [pc, #40]	@ (8018f24 <tcp_rexmit_rto+0x38>)
 8018efc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018f00:	4909      	ldr	r1, [pc, #36]	@ (8018f28 <tcp_rexmit_rto+0x3c>)
 8018f02:	480a      	ldr	r0, [pc, #40]	@ (8018f2c <tcp_rexmit_rto+0x40>)
 8018f04:	f004 fc40 	bl	801d788 <iprintf>
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f7ff ff57 	bl	8018dbc <tcp_rexmit_rto_prepare>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	d102      	bne.n	8018f1a <tcp_rexmit_rto+0x2e>
 8018f14:	6878      	ldr	r0, [r7, #4]
 8018f16:	f7ff ffc1 	bl	8018e9c <tcp_rexmit_rto_commit>
 8018f1a:	bf00      	nop
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	0802229c 	.word	0x0802229c
 8018f28:	08022920 	.word	0x08022920
 8018f2c:	080222f0 	.word	0x080222f0

08018f30 <tcp_rexmit>:
 8018f30:	b590      	push	{r4, r7, lr}
 8018f32:	b085      	sub	sp, #20
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d106      	bne.n	8018f4c <tcp_rexmit+0x1c>
 8018f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8018ffc <tcp_rexmit+0xcc>)
 8018f40:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018f44:	492e      	ldr	r1, [pc, #184]	@ (8019000 <tcp_rexmit+0xd0>)
 8018f46:	482f      	ldr	r0, [pc, #188]	@ (8019004 <tcp_rexmit+0xd4>)
 8018f48:	f004 fc1e 	bl	801d788 <iprintf>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d102      	bne.n	8018f5a <tcp_rexmit+0x2a>
 8018f54:	f06f 0305 	mvn.w	r3, #5
 8018f58:	e04c      	b.n	8018ff4 <tcp_rexmit+0xc4>
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f5e:	60bb      	str	r3, [r7, #8]
 8018f60:	68b8      	ldr	r0, [r7, #8]
 8018f62:	f7ff fe2b 	bl	8018bbc <tcp_output_segment_busy>
 8018f66:	4603      	mov	r3, r0
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d002      	beq.n	8018f72 <tcp_rexmit+0x42>
 8018f6c:	f06f 0305 	mvn.w	r3, #5
 8018f70:	e040      	b.n	8018ff4 <tcp_rexmit+0xc4>
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	671a      	str	r2, [r3, #112]	@ 0x70
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	336c      	adds	r3, #108	@ 0x6c
 8018f7e:	60fb      	str	r3, [r7, #12]
 8018f80:	e002      	b.n	8018f88 <tcp_rexmit+0x58>
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	60fb      	str	r3, [r7, #12]
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d011      	beq.n	8018fb4 <tcp_rexmit+0x84>
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	68db      	ldr	r3, [r3, #12]
 8018f96:	685b      	ldr	r3, [r3, #4]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7f8 fc22 	bl	80117e2 <lwip_htonl>
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	68db      	ldr	r3, [r3, #12]
 8018fa4:	685b      	ldr	r3, [r3, #4]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7f8 fc1b 	bl	80117e2 <lwip_htonl>
 8018fac:	4603      	mov	r3, r0
 8018fae:	1ae3      	subs	r3, r4, r3
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	dbe6      	blt.n	8018f82 <tcp_rexmit+0x52>
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681a      	ldr	r2, [r3, #0]
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	601a      	str	r2, [r3, #0]
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	68ba      	ldr	r2, [r7, #8]
 8018fc0:	601a      	str	r2, [r3, #0]
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d103      	bne.n	8018fd2 <tcp_rexmit+0xa2>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018fd8:	2bff      	cmp	r3, #255	@ 0xff
 8018fda:	d007      	beq.n	8018fec <tcp_rexmit+0xbc>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018fe2:	3301      	adds	r3, #1
 8018fe4:	b2da      	uxtb	r2, r3
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	2200      	movs	r2, #0
 8018ff0:	635a      	str	r2, [r3, #52]	@ 0x34
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3714      	adds	r7, #20
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd90      	pop	{r4, r7, pc}
 8018ffc:	0802229c 	.word	0x0802229c
 8019000:	0802293c 	.word	0x0802293c
 8019004:	080222f0 	.word	0x080222f0

08019008 <tcp_rexmit_fast>:
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d106      	bne.n	8019024 <tcp_rexmit_fast+0x1c>
 8019016:	4b2a      	ldr	r3, [pc, #168]	@ (80190c0 <tcp_rexmit_fast+0xb8>)
 8019018:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801901c:	4929      	ldr	r1, [pc, #164]	@ (80190c4 <tcp_rexmit_fast+0xbc>)
 801901e:	482a      	ldr	r0, [pc, #168]	@ (80190c8 <tcp_rexmit_fast+0xc0>)
 8019020:	f004 fbb2 	bl	801d788 <iprintf>
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019028:	2b00      	cmp	r3, #0
 801902a:	d045      	beq.n	80190b8 <tcp_rexmit_fast+0xb0>
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8b5b      	ldrh	r3, [r3, #26]
 8019030:	f003 0304 	and.w	r3, r3, #4
 8019034:	2b00      	cmp	r3, #0
 8019036:	d13f      	bne.n	80190b8 <tcp_rexmit_fast+0xb0>
 8019038:	6878      	ldr	r0, [r7, #4]
 801903a:	f7ff ff79 	bl	8018f30 <tcp_rexmit>
 801903e:	4603      	mov	r3, r0
 8019040:	2b00      	cmp	r3, #0
 8019042:	d139      	bne.n	80190b8 <tcp_rexmit_fast+0xb0>
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019050:	4293      	cmp	r3, r2
 8019052:	bf28      	it	cs
 8019054:	4613      	movcs	r3, r2
 8019056:	b29b      	uxth	r3, r3
 8019058:	2b00      	cmp	r3, #0
 801905a:	da00      	bge.n	801905e <tcp_rexmit_fast+0x56>
 801905c:	3301      	adds	r3, #1
 801905e:	105b      	asrs	r3, r3, #1
 8019060:	b29a      	uxth	r2, r3
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801906e:	461a      	mov	r2, r3
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019074:	005b      	lsls	r3, r3, #1
 8019076:	429a      	cmp	r2, r3
 8019078:	d206      	bcs.n	8019088 <tcp_rexmit_fast+0x80>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801907e:	005b      	lsls	r3, r3, #1
 8019080:	b29a      	uxth	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019092:	4619      	mov	r1, r3
 8019094:	0049      	lsls	r1, r1, #1
 8019096:	440b      	add	r3, r1
 8019098:	b29b      	uxth	r3, r3
 801909a:	4413      	add	r3, r2
 801909c:	b29a      	uxth	r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	8b5b      	ldrh	r3, [r3, #26]
 80190a8:	f043 0304 	orr.w	r3, r3, #4
 80190ac:	b29a      	uxth	r2, r3
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	835a      	strh	r2, [r3, #26]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	2200      	movs	r2, #0
 80190b6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80190b8:	bf00      	nop
 80190ba:	3708      	adds	r7, #8
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	0802229c 	.word	0x0802229c
 80190c4:	08022954 	.word	0x08022954
 80190c8:	080222f0 	.word	0x080222f0

080190cc <tcp_output_alloc_header_common>:
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b086      	sub	sp, #24
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	607b      	str	r3, [r7, #4]
 80190d6:	460b      	mov	r3, r1
 80190d8:	817b      	strh	r3, [r7, #10]
 80190da:	4613      	mov	r3, r2
 80190dc:	813b      	strh	r3, [r7, #8]
 80190de:	897a      	ldrh	r2, [r7, #10]
 80190e0:	893b      	ldrh	r3, [r7, #8]
 80190e2:	4413      	add	r3, r2
 80190e4:	b29b      	uxth	r3, r3
 80190e6:	3314      	adds	r3, #20
 80190e8:	b29b      	uxth	r3, r3
 80190ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80190ee:	4619      	mov	r1, r3
 80190f0:	2022      	movs	r0, #34	@ 0x22
 80190f2:	f7f9 fca5 	bl	8012a40 <pbuf_alloc>
 80190f6:	6178      	str	r0, [r7, #20]
 80190f8:	697b      	ldr	r3, [r7, #20]
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d04d      	beq.n	801919a <tcp_output_alloc_header_common+0xce>
 80190fe:	897b      	ldrh	r3, [r7, #10]
 8019100:	3313      	adds	r3, #19
 8019102:	697a      	ldr	r2, [r7, #20]
 8019104:	8952      	ldrh	r2, [r2, #10]
 8019106:	4293      	cmp	r3, r2
 8019108:	db06      	blt.n	8019118 <tcp_output_alloc_header_common+0x4c>
 801910a:	4b26      	ldr	r3, [pc, #152]	@ (80191a4 <tcp_output_alloc_header_common+0xd8>)
 801910c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019110:	4925      	ldr	r1, [pc, #148]	@ (80191a8 <tcp_output_alloc_header_common+0xdc>)
 8019112:	4826      	ldr	r0, [pc, #152]	@ (80191ac <tcp_output_alloc_header_common+0xe0>)
 8019114:	f004 fb38 	bl	801d788 <iprintf>
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	613b      	str	r3, [r7, #16]
 801911e:	8c3b      	ldrh	r3, [r7, #32]
 8019120:	4618      	mov	r0, r3
 8019122:	f7f8 fb49 	bl	80117b8 <lwip_htons>
 8019126:	4603      	mov	r3, r0
 8019128:	461a      	mov	r2, r3
 801912a:	693b      	ldr	r3, [r7, #16]
 801912c:	801a      	strh	r2, [r3, #0]
 801912e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019130:	4618      	mov	r0, r3
 8019132:	f7f8 fb41 	bl	80117b8 <lwip_htons>
 8019136:	4603      	mov	r3, r0
 8019138:	461a      	mov	r2, r3
 801913a:	693b      	ldr	r3, [r7, #16]
 801913c:	805a      	strh	r2, [r3, #2]
 801913e:	693b      	ldr	r3, [r7, #16]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	605a      	str	r2, [r3, #4]
 8019144:	68f8      	ldr	r0, [r7, #12]
 8019146:	f7f8 fb4c 	bl	80117e2 <lwip_htonl>
 801914a:	4602      	mov	r2, r0
 801914c:	693b      	ldr	r3, [r7, #16]
 801914e:	609a      	str	r2, [r3, #8]
 8019150:	897b      	ldrh	r3, [r7, #10]
 8019152:	089b      	lsrs	r3, r3, #2
 8019154:	b29b      	uxth	r3, r3
 8019156:	3305      	adds	r3, #5
 8019158:	b29b      	uxth	r3, r3
 801915a:	031b      	lsls	r3, r3, #12
 801915c:	b29a      	uxth	r2, r3
 801915e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019162:	b29b      	uxth	r3, r3
 8019164:	4313      	orrs	r3, r2
 8019166:	b29b      	uxth	r3, r3
 8019168:	4618      	mov	r0, r3
 801916a:	f7f8 fb25 	bl	80117b8 <lwip_htons>
 801916e:	4603      	mov	r3, r0
 8019170:	461a      	mov	r2, r3
 8019172:	693b      	ldr	r3, [r7, #16]
 8019174:	819a      	strh	r2, [r3, #12]
 8019176:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019178:	4618      	mov	r0, r3
 801917a:	f7f8 fb1d 	bl	80117b8 <lwip_htons>
 801917e:	4603      	mov	r3, r0
 8019180:	461a      	mov	r2, r3
 8019182:	693b      	ldr	r3, [r7, #16]
 8019184:	81da      	strh	r2, [r3, #14]
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	2200      	movs	r2, #0
 801918a:	741a      	strb	r2, [r3, #16]
 801918c:	2200      	movs	r2, #0
 801918e:	745a      	strb	r2, [r3, #17]
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	2200      	movs	r2, #0
 8019194:	749a      	strb	r2, [r3, #18]
 8019196:	2200      	movs	r2, #0
 8019198:	74da      	strb	r2, [r3, #19]
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	4618      	mov	r0, r3
 801919e:	3718      	adds	r7, #24
 80191a0:	46bd      	mov	sp, r7
 80191a2:	bd80      	pop	{r7, pc}
 80191a4:	0802229c 	.word	0x0802229c
 80191a8:	08022974 	.word	0x08022974
 80191ac:	080222f0 	.word	0x080222f0

080191b0 <tcp_output_alloc_header>:
 80191b0:	b5b0      	push	{r4, r5, r7, lr}
 80191b2:	b08a      	sub	sp, #40	@ 0x28
 80191b4:	af04      	add	r7, sp, #16
 80191b6:	60f8      	str	r0, [r7, #12]
 80191b8:	607b      	str	r3, [r7, #4]
 80191ba:	460b      	mov	r3, r1
 80191bc:	817b      	strh	r3, [r7, #10]
 80191be:	4613      	mov	r3, r2
 80191c0:	813b      	strh	r3, [r7, #8]
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d106      	bne.n	80191d6 <tcp_output_alloc_header+0x26>
 80191c8:	4b15      	ldr	r3, [pc, #84]	@ (8019220 <tcp_output_alloc_header+0x70>)
 80191ca:	f240 7242 	movw	r2, #1858	@ 0x742
 80191ce:	4915      	ldr	r1, [pc, #84]	@ (8019224 <tcp_output_alloc_header+0x74>)
 80191d0:	4815      	ldr	r0, [pc, #84]	@ (8019228 <tcp_output_alloc_header+0x78>)
 80191d2:	f004 fad9 	bl	801d788 <iprintf>
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	8adb      	ldrh	r3, [r3, #22]
 80191de:	68fa      	ldr	r2, [r7, #12]
 80191e0:	8b12      	ldrh	r2, [r2, #24]
 80191e2:	68f9      	ldr	r1, [r7, #12]
 80191e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80191e6:	893d      	ldrh	r5, [r7, #8]
 80191e8:	897c      	ldrh	r4, [r7, #10]
 80191ea:	9103      	str	r1, [sp, #12]
 80191ec:	2110      	movs	r1, #16
 80191ee:	9102      	str	r1, [sp, #8]
 80191f0:	9201      	str	r2, [sp, #4]
 80191f2:	9300      	str	r3, [sp, #0]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	462a      	mov	r2, r5
 80191f8:	4621      	mov	r1, r4
 80191fa:	f7ff ff67 	bl	80190cc <tcp_output_alloc_header_common>
 80191fe:	6178      	str	r0, [r7, #20]
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d006      	beq.n	8019214 <tcp_output_alloc_header+0x64>
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801920a:	68fa      	ldr	r2, [r7, #12]
 801920c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801920e:	441a      	add	r2, r3
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019214:	697b      	ldr	r3, [r7, #20]
 8019216:	4618      	mov	r0, r3
 8019218:	3718      	adds	r7, #24
 801921a:	46bd      	mov	sp, r7
 801921c:	bdb0      	pop	{r4, r5, r7, pc}
 801921e:	bf00      	nop
 8019220:	0802229c 	.word	0x0802229c
 8019224:	080229a4 	.word	0x080229a4
 8019228:	080222f0 	.word	0x080222f0

0801922c <tcp_output_fill_options>:
 801922c:	b580      	push	{r7, lr}
 801922e:	b088      	sub	sp, #32
 8019230:	af00      	add	r7, sp, #0
 8019232:	60f8      	str	r0, [r7, #12]
 8019234:	60b9      	str	r1, [r7, #8]
 8019236:	4611      	mov	r1, r2
 8019238:	461a      	mov	r2, r3
 801923a:	460b      	mov	r3, r1
 801923c:	71fb      	strb	r3, [r7, #7]
 801923e:	4613      	mov	r3, r2
 8019240:	71bb      	strb	r3, [r7, #6]
 8019242:	2300      	movs	r3, #0
 8019244:	83fb      	strh	r3, [r7, #30]
 8019246:	68bb      	ldr	r3, [r7, #8]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d106      	bne.n	801925a <tcp_output_fill_options+0x2e>
 801924c:	4b12      	ldr	r3, [pc, #72]	@ (8019298 <tcp_output_fill_options+0x6c>)
 801924e:	f240 7256 	movw	r2, #1878	@ 0x756
 8019252:	4912      	ldr	r1, [pc, #72]	@ (801929c <tcp_output_fill_options+0x70>)
 8019254:	4812      	ldr	r0, [pc, #72]	@ (80192a0 <tcp_output_fill_options+0x74>)
 8019256:	f004 fa97 	bl	801d788 <iprintf>
 801925a:	68bb      	ldr	r3, [r7, #8]
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	61bb      	str	r3, [r7, #24]
 8019260:	69bb      	ldr	r3, [r7, #24]
 8019262:	3314      	adds	r3, #20
 8019264:	617b      	str	r3, [r7, #20]
 8019266:	8bfb      	ldrh	r3, [r7, #30]
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	461a      	mov	r2, r3
 801926c:	79fb      	ldrb	r3, [r7, #7]
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	f003 0304 	and.w	r3, r3, #4
 8019274:	4413      	add	r3, r2
 8019276:	3314      	adds	r3, #20
 8019278:	69ba      	ldr	r2, [r7, #24]
 801927a:	4413      	add	r3, r2
 801927c:	697a      	ldr	r2, [r7, #20]
 801927e:	429a      	cmp	r2, r3
 8019280:	d006      	beq.n	8019290 <tcp_output_fill_options+0x64>
 8019282:	4b05      	ldr	r3, [pc, #20]	@ (8019298 <tcp_output_fill_options+0x6c>)
 8019284:	f240 7275 	movw	r2, #1909	@ 0x775
 8019288:	4906      	ldr	r1, [pc, #24]	@ (80192a4 <tcp_output_fill_options+0x78>)
 801928a:	4805      	ldr	r0, [pc, #20]	@ (80192a0 <tcp_output_fill_options+0x74>)
 801928c:	f004 fa7c 	bl	801d788 <iprintf>
 8019290:	bf00      	nop
 8019292:	3720      	adds	r7, #32
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}
 8019298:	0802229c 	.word	0x0802229c
 801929c:	080229cc 	.word	0x080229cc
 80192a0:	080222f0 	.word	0x080222f0
 80192a4:	080228c4 	.word	0x080228c4

080192a8 <tcp_output_control_segment>:
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b08a      	sub	sp, #40	@ 0x28
 80192ac:	af04      	add	r7, sp, #16
 80192ae:	60f8      	str	r0, [r7, #12]
 80192b0:	60b9      	str	r1, [r7, #8]
 80192b2:	607a      	str	r2, [r7, #4]
 80192b4:	603b      	str	r3, [r7, #0]
 80192b6:	68bb      	ldr	r3, [r7, #8]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d106      	bne.n	80192ca <tcp_output_control_segment+0x22>
 80192bc:	4b1c      	ldr	r3, [pc, #112]	@ (8019330 <tcp_output_control_segment+0x88>)
 80192be:	f240 7287 	movw	r2, #1927	@ 0x787
 80192c2:	491c      	ldr	r1, [pc, #112]	@ (8019334 <tcp_output_control_segment+0x8c>)
 80192c4:	481c      	ldr	r0, [pc, #112]	@ (8019338 <tcp_output_control_segment+0x90>)
 80192c6:	f004 fa5f 	bl	801d788 <iprintf>
 80192ca:	683a      	ldr	r2, [r7, #0]
 80192cc:	6879      	ldr	r1, [r7, #4]
 80192ce:	68f8      	ldr	r0, [r7, #12]
 80192d0:	f7fe faea 	bl	80178a8 <tcp_route>
 80192d4:	6138      	str	r0, [r7, #16]
 80192d6:	693b      	ldr	r3, [r7, #16]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d102      	bne.n	80192e2 <tcp_output_control_segment+0x3a>
 80192dc:	23fc      	movs	r3, #252	@ 0xfc
 80192de:	75fb      	strb	r3, [r7, #23]
 80192e0:	e01c      	b.n	801931c <tcp_output_control_segment+0x74>
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d006      	beq.n	80192f6 <tcp_output_control_segment+0x4e>
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	7adb      	ldrb	r3, [r3, #11]
 80192ec:	75bb      	strb	r3, [r7, #22]
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	7a9b      	ldrb	r3, [r3, #10]
 80192f2:	757b      	strb	r3, [r7, #21]
 80192f4:	e003      	b.n	80192fe <tcp_output_control_segment+0x56>
 80192f6:	23ff      	movs	r3, #255	@ 0xff
 80192f8:	75bb      	strb	r3, [r7, #22]
 80192fa:	2300      	movs	r3, #0
 80192fc:	757b      	strb	r3, [r7, #21]
 80192fe:	7dba      	ldrb	r2, [r7, #22]
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	9302      	str	r3, [sp, #8]
 8019304:	2306      	movs	r3, #6
 8019306:	9301      	str	r3, [sp, #4]
 8019308:	7d7b      	ldrb	r3, [r7, #21]
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	4613      	mov	r3, r2
 801930e:	683a      	ldr	r2, [r7, #0]
 8019310:	6879      	ldr	r1, [r7, #4]
 8019312:	68b8      	ldr	r0, [r7, #8]
 8019314:	f002 fad0 	bl	801b8b8 <ip4_output_if>
 8019318:	4603      	mov	r3, r0
 801931a:	75fb      	strb	r3, [r7, #23]
 801931c:	68b8      	ldr	r0, [r7, #8]
 801931e:	f7f9 fe73 	bl	8013008 <pbuf_free>
 8019322:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019326:	4618      	mov	r0, r3
 8019328:	3718      	adds	r7, #24
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
 801932e:	bf00      	nop
 8019330:	0802229c 	.word	0x0802229c
 8019334:	080229f4 	.word	0x080229f4
 8019338:	080222f0 	.word	0x080222f0

0801933c <tcp_rst>:
 801933c:	b590      	push	{r4, r7, lr}
 801933e:	b08b      	sub	sp, #44	@ 0x2c
 8019340:	af04      	add	r7, sp, #16
 8019342:	60f8      	str	r0, [r7, #12]
 8019344:	60b9      	str	r1, [r7, #8]
 8019346:	607a      	str	r2, [r7, #4]
 8019348:	603b      	str	r3, [r7, #0]
 801934a:	683b      	ldr	r3, [r7, #0]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d106      	bne.n	801935e <tcp_rst+0x22>
 8019350:	4b1f      	ldr	r3, [pc, #124]	@ (80193d0 <tcp_rst+0x94>)
 8019352:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019356:	491f      	ldr	r1, [pc, #124]	@ (80193d4 <tcp_rst+0x98>)
 8019358:	481f      	ldr	r0, [pc, #124]	@ (80193d8 <tcp_rst+0x9c>)
 801935a:	f004 fa15 	bl	801d788 <iprintf>
 801935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019360:	2b00      	cmp	r3, #0
 8019362:	d106      	bne.n	8019372 <tcp_rst+0x36>
 8019364:	4b1a      	ldr	r3, [pc, #104]	@ (80193d0 <tcp_rst+0x94>)
 8019366:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801936a:	491c      	ldr	r1, [pc, #112]	@ (80193dc <tcp_rst+0xa0>)
 801936c:	481a      	ldr	r0, [pc, #104]	@ (80193d8 <tcp_rst+0x9c>)
 801936e:	f004 fa0b 	bl	801d788 <iprintf>
 8019372:	2300      	movs	r3, #0
 8019374:	75fb      	strb	r3, [r7, #23]
 8019376:	f246 0308 	movw	r3, #24584	@ 0x6008
 801937a:	82bb      	strh	r3, [r7, #20]
 801937c:	7dfb      	ldrb	r3, [r7, #23]
 801937e:	b29c      	uxth	r4, r3
 8019380:	68b8      	ldr	r0, [r7, #8]
 8019382:	f7f8 fa2e 	bl	80117e2 <lwip_htonl>
 8019386:	4602      	mov	r2, r0
 8019388:	8abb      	ldrh	r3, [r7, #20]
 801938a:	9303      	str	r3, [sp, #12]
 801938c:	2314      	movs	r3, #20
 801938e:	9302      	str	r3, [sp, #8]
 8019390:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019392:	9301      	str	r3, [sp, #4]
 8019394:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019396:	9300      	str	r3, [sp, #0]
 8019398:	4613      	mov	r3, r2
 801939a:	2200      	movs	r2, #0
 801939c:	4621      	mov	r1, r4
 801939e:	6878      	ldr	r0, [r7, #4]
 80193a0:	f7ff fe94 	bl	80190cc <tcp_output_alloc_header_common>
 80193a4:	6138      	str	r0, [r7, #16]
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d00c      	beq.n	80193c6 <tcp_rst+0x8a>
 80193ac:	7dfb      	ldrb	r3, [r7, #23]
 80193ae:	2200      	movs	r2, #0
 80193b0:	6939      	ldr	r1, [r7, #16]
 80193b2:	68f8      	ldr	r0, [r7, #12]
 80193b4:	f7ff ff3a 	bl	801922c <tcp_output_fill_options>
 80193b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80193ba:	683a      	ldr	r2, [r7, #0]
 80193bc:	6939      	ldr	r1, [r7, #16]
 80193be:	68f8      	ldr	r0, [r7, #12]
 80193c0:	f7ff ff72 	bl	80192a8 <tcp_output_control_segment>
 80193c4:	e000      	b.n	80193c8 <tcp_rst+0x8c>
 80193c6:	bf00      	nop
 80193c8:	371c      	adds	r7, #28
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd90      	pop	{r4, r7, pc}
 80193ce:	bf00      	nop
 80193d0:	0802229c 	.word	0x0802229c
 80193d4:	08022a20 	.word	0x08022a20
 80193d8:	080222f0 	.word	0x080222f0
 80193dc:	08022a3c 	.word	0x08022a3c

080193e0 <tcp_send_empty_ack>:
 80193e0:	b590      	push	{r4, r7, lr}
 80193e2:	b087      	sub	sp, #28
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
 80193e8:	2300      	movs	r3, #0
 80193ea:	75fb      	strb	r3, [r7, #23]
 80193ec:	2300      	movs	r3, #0
 80193ee:	75bb      	strb	r3, [r7, #22]
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d106      	bne.n	8019404 <tcp_send_empty_ack+0x24>
 80193f6:	4b28      	ldr	r3, [pc, #160]	@ (8019498 <tcp_send_empty_ack+0xb8>)
 80193f8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80193fc:	4927      	ldr	r1, [pc, #156]	@ (801949c <tcp_send_empty_ack+0xbc>)
 80193fe:	4828      	ldr	r0, [pc, #160]	@ (80194a0 <tcp_send_empty_ack+0xc0>)
 8019400:	f004 f9c2 	bl	801d788 <iprintf>
 8019404:	7dfb      	ldrb	r3, [r7, #23]
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	b2db      	uxtb	r3, r3
 801940a:	f003 0304 	and.w	r3, r3, #4
 801940e:	757b      	strb	r3, [r7, #21]
 8019410:	7d7b      	ldrb	r3, [r7, #21]
 8019412:	b29c      	uxth	r4, r3
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019418:	4618      	mov	r0, r3
 801941a:	f7f8 f9e2 	bl	80117e2 <lwip_htonl>
 801941e:	4603      	mov	r3, r0
 8019420:	2200      	movs	r2, #0
 8019422:	4621      	mov	r1, r4
 8019424:	6878      	ldr	r0, [r7, #4]
 8019426:	f7ff fec3 	bl	80191b0 <tcp_output_alloc_header>
 801942a:	6138      	str	r0, [r7, #16]
 801942c:	693b      	ldr	r3, [r7, #16]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d109      	bne.n	8019446 <tcp_send_empty_ack+0x66>
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	8b5b      	ldrh	r3, [r3, #26]
 8019436:	f043 0303 	orr.w	r3, r3, #3
 801943a:	b29a      	uxth	r2, r3
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	835a      	strh	r2, [r3, #26]
 8019440:	f06f 0301 	mvn.w	r3, #1
 8019444:	e023      	b.n	801948e <tcp_send_empty_ack+0xae>
 8019446:	7dbb      	ldrb	r3, [r7, #22]
 8019448:	7dfa      	ldrb	r2, [r7, #23]
 801944a:	6939      	ldr	r1, [r7, #16]
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7ff feed 	bl	801922c <tcp_output_fill_options>
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	3304      	adds	r3, #4
 8019458:	6939      	ldr	r1, [r7, #16]
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff ff24 	bl	80192a8 <tcp_output_control_segment>
 8019460:	4603      	mov	r3, r0
 8019462:	73fb      	strb	r3, [r7, #15]
 8019464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d007      	beq.n	801947c <tcp_send_empty_ack+0x9c>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	8b5b      	ldrh	r3, [r3, #26]
 8019470:	f043 0303 	orr.w	r3, r3, #3
 8019474:	b29a      	uxth	r2, r3
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	835a      	strh	r2, [r3, #26]
 801947a:	e006      	b.n	801948a <tcp_send_empty_ack+0xaa>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	8b5b      	ldrh	r3, [r3, #26]
 8019480:	f023 0303 	bic.w	r3, r3, #3
 8019484:	b29a      	uxth	r2, r3
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	835a      	strh	r2, [r3, #26]
 801948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801948e:	4618      	mov	r0, r3
 8019490:	371c      	adds	r7, #28
 8019492:	46bd      	mov	sp, r7
 8019494:	bd90      	pop	{r4, r7, pc}
 8019496:	bf00      	nop
 8019498:	0802229c 	.word	0x0802229c
 801949c:	08022a58 	.word	0x08022a58
 80194a0:	080222f0 	.word	0x080222f0

080194a4 <tcp_keepalive>:
 80194a4:	b590      	push	{r4, r7, lr}
 80194a6:	b087      	sub	sp, #28
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	2300      	movs	r3, #0
 80194ae:	75fb      	strb	r3, [r7, #23]
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d106      	bne.n	80194c4 <tcp_keepalive+0x20>
 80194b6:	4b18      	ldr	r3, [pc, #96]	@ (8019518 <tcp_keepalive+0x74>)
 80194b8:	f640 0224 	movw	r2, #2084	@ 0x824
 80194bc:	4917      	ldr	r1, [pc, #92]	@ (801951c <tcp_keepalive+0x78>)
 80194be:	4818      	ldr	r0, [pc, #96]	@ (8019520 <tcp_keepalive+0x7c>)
 80194c0:	f004 f962 	bl	801d788 <iprintf>
 80194c4:	7dfb      	ldrb	r3, [r7, #23]
 80194c6:	b29c      	uxth	r4, r3
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194cc:	3b01      	subs	r3, #1
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7f8 f987 	bl	80117e2 <lwip_htonl>
 80194d4:	4603      	mov	r3, r0
 80194d6:	2200      	movs	r2, #0
 80194d8:	4621      	mov	r1, r4
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f7ff fe68 	bl	80191b0 <tcp_output_alloc_header>
 80194e0:	6138      	str	r0, [r7, #16]
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d102      	bne.n	80194ee <tcp_keepalive+0x4a>
 80194e8:	f04f 33ff 	mov.w	r3, #4294967295
 80194ec:	e010      	b.n	8019510 <tcp_keepalive+0x6c>
 80194ee:	7dfb      	ldrb	r3, [r7, #23]
 80194f0:	2200      	movs	r2, #0
 80194f2:	6939      	ldr	r1, [r7, #16]
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7ff fe99 	bl	801922c <tcp_output_fill_options>
 80194fa:	687a      	ldr	r2, [r7, #4]
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	3304      	adds	r3, #4
 8019500:	6939      	ldr	r1, [r7, #16]
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	f7ff fed0 	bl	80192a8 <tcp_output_control_segment>
 8019508:	4603      	mov	r3, r0
 801950a:	73fb      	strb	r3, [r7, #15]
 801950c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019510:	4618      	mov	r0, r3
 8019512:	371c      	adds	r7, #28
 8019514:	46bd      	mov	sp, r7
 8019516:	bd90      	pop	{r4, r7, pc}
 8019518:	0802229c 	.word	0x0802229c
 801951c:	08022a78 	.word	0x08022a78
 8019520:	080222f0 	.word	0x080222f0

08019524 <tcp_zero_window_probe>:
 8019524:	b590      	push	{r4, r7, lr}
 8019526:	b08b      	sub	sp, #44	@ 0x2c
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
 801952c:	2300      	movs	r3, #0
 801952e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	2b00      	cmp	r3, #0
 8019536:	d106      	bne.n	8019546 <tcp_zero_window_probe+0x22>
 8019538:	4b4c      	ldr	r3, [pc, #304]	@ (801966c <tcp_zero_window_probe+0x148>)
 801953a:	f640 024f 	movw	r2, #2127	@ 0x84f
 801953e:	494c      	ldr	r1, [pc, #304]	@ (8019670 <tcp_zero_window_probe+0x14c>)
 8019540:	484c      	ldr	r0, [pc, #304]	@ (8019674 <tcp_zero_window_probe+0x150>)
 8019542:	f004 f921 	bl	801d788 <iprintf>
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801954a:	623b      	str	r3, [r7, #32]
 801954c:	6a3b      	ldr	r3, [r7, #32]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d101      	bne.n	8019556 <tcp_zero_window_probe+0x32>
 8019552:	2300      	movs	r3, #0
 8019554:	e086      	b.n	8019664 <tcp_zero_window_probe+0x140>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801955c:	2bff      	cmp	r3, #255	@ 0xff
 801955e:	d007      	beq.n	8019570 <tcp_zero_window_probe+0x4c>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019566:	3301      	adds	r3, #1
 8019568:	b2da      	uxtb	r2, r3
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
 8019570:	6a3b      	ldr	r3, [r7, #32]
 8019572:	68db      	ldr	r3, [r3, #12]
 8019574:	899b      	ldrh	r3, [r3, #12]
 8019576:	b29b      	uxth	r3, r3
 8019578:	4618      	mov	r0, r3
 801957a:	f7f8 f91d 	bl	80117b8 <lwip_htons>
 801957e:	4603      	mov	r3, r0
 8019580:	b2db      	uxtb	r3, r3
 8019582:	f003 0301 	and.w	r3, r3, #1
 8019586:	2b00      	cmp	r3, #0
 8019588:	d005      	beq.n	8019596 <tcp_zero_window_probe+0x72>
 801958a:	6a3b      	ldr	r3, [r7, #32]
 801958c:	891b      	ldrh	r3, [r3, #8]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d101      	bne.n	8019596 <tcp_zero_window_probe+0x72>
 8019592:	2301      	movs	r3, #1
 8019594:	e000      	b.n	8019598 <tcp_zero_window_probe+0x74>
 8019596:	2300      	movs	r3, #0
 8019598:	77fb      	strb	r3, [r7, #31]
 801959a:	7ffb      	ldrb	r3, [r7, #31]
 801959c:	2b00      	cmp	r3, #0
 801959e:	bf0c      	ite	eq
 80195a0:	2301      	moveq	r3, #1
 80195a2:	2300      	movne	r3, #0
 80195a4:	b2db      	uxtb	r3, r3
 80195a6:	83bb      	strh	r3, [r7, #28]
 80195a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80195ac:	b299      	uxth	r1, r3
 80195ae:	6a3b      	ldr	r3, [r7, #32]
 80195b0:	68db      	ldr	r3, [r3, #12]
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	8bba      	ldrh	r2, [r7, #28]
 80195b6:	6878      	ldr	r0, [r7, #4]
 80195b8:	f7ff fdfa 	bl	80191b0 <tcp_output_alloc_header>
 80195bc:	61b8      	str	r0, [r7, #24]
 80195be:	69bb      	ldr	r3, [r7, #24]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d102      	bne.n	80195ca <tcp_zero_window_probe+0xa6>
 80195c4:	f04f 33ff 	mov.w	r3, #4294967295
 80195c8:	e04c      	b.n	8019664 <tcp_zero_window_probe+0x140>
 80195ca:	69bb      	ldr	r3, [r7, #24]
 80195cc:	685b      	ldr	r3, [r3, #4]
 80195ce:	617b      	str	r3, [r7, #20]
 80195d0:	7ffb      	ldrb	r3, [r7, #31]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d011      	beq.n	80195fa <tcp_zero_window_probe+0xd6>
 80195d6:	697b      	ldr	r3, [r7, #20]
 80195d8:	899b      	ldrh	r3, [r3, #12]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	b21b      	sxth	r3, r3
 80195de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80195e2:	b21c      	sxth	r4, r3
 80195e4:	2011      	movs	r0, #17
 80195e6:	f7f8 f8e7 	bl	80117b8 <lwip_htons>
 80195ea:	4603      	mov	r3, r0
 80195ec:	b21b      	sxth	r3, r3
 80195ee:	4323      	orrs	r3, r4
 80195f0:	b21b      	sxth	r3, r3
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	819a      	strh	r2, [r3, #12]
 80195f8:	e010      	b.n	801961c <tcp_zero_window_probe+0xf8>
 80195fa:	69bb      	ldr	r3, [r7, #24]
 80195fc:	685b      	ldr	r3, [r3, #4]
 80195fe:	3314      	adds	r3, #20
 8019600:	613b      	str	r3, [r7, #16]
 8019602:	6a3b      	ldr	r3, [r7, #32]
 8019604:	6858      	ldr	r0, [r3, #4]
 8019606:	6a3b      	ldr	r3, [r7, #32]
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	891a      	ldrh	r2, [r3, #8]
 801960c:	6a3b      	ldr	r3, [r7, #32]
 801960e:	891b      	ldrh	r3, [r3, #8]
 8019610:	1ad3      	subs	r3, r2, r3
 8019612:	b29b      	uxth	r3, r3
 8019614:	2201      	movs	r2, #1
 8019616:	6939      	ldr	r1, [r7, #16]
 8019618:	f7f9 fefc 	bl	8013414 <pbuf_copy_partial>
 801961c:	6a3b      	ldr	r3, [r7, #32]
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	685b      	ldr	r3, [r3, #4]
 8019622:	4618      	mov	r0, r3
 8019624:	f7f8 f8dd 	bl	80117e2 <lwip_htonl>
 8019628:	4603      	mov	r3, r0
 801962a:	3301      	adds	r3, #1
 801962c:	60fb      	str	r3, [r7, #12]
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	1ad3      	subs	r3, r2, r3
 8019636:	2b00      	cmp	r3, #0
 8019638:	da02      	bge.n	8019640 <tcp_zero_window_probe+0x11c>
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	68fa      	ldr	r2, [r7, #12]
 801963e:	651a      	str	r2, [r3, #80]	@ 0x50
 8019640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019644:	2200      	movs	r2, #0
 8019646:	69b9      	ldr	r1, [r7, #24]
 8019648:	6878      	ldr	r0, [r7, #4]
 801964a:	f7ff fdef 	bl	801922c <tcp_output_fill_options>
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	3304      	adds	r3, #4
 8019654:	69b9      	ldr	r1, [r7, #24]
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f7ff fe26 	bl	80192a8 <tcp_output_control_segment>
 801965c:	4603      	mov	r3, r0
 801965e:	72fb      	strb	r3, [r7, #11]
 8019660:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019664:	4618      	mov	r0, r3
 8019666:	372c      	adds	r7, #44	@ 0x2c
 8019668:	46bd      	mov	sp, r7
 801966a:	bd90      	pop	{r4, r7, pc}
 801966c:	0802229c 	.word	0x0802229c
 8019670:	08022a94 	.word	0x08022a94
 8019674:	080222f0 	.word	0x080222f0

08019678 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019678:	b580      	push	{r7, lr}
 801967a:	b082      	sub	sp, #8
 801967c:	af00      	add	r7, sp, #0
 801967e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019680:	f7f9 ffb6 	bl	80135f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019684:	4b0a      	ldr	r3, [pc, #40]	@ (80196b0 <tcpip_tcp_timer+0x38>)
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d103      	bne.n	8019694 <tcpip_tcp_timer+0x1c>
 801968c:	4b09      	ldr	r3, [pc, #36]	@ (80196b4 <tcpip_tcp_timer+0x3c>)
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d005      	beq.n	80196a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019694:	2200      	movs	r2, #0
 8019696:	4908      	ldr	r1, [pc, #32]	@ (80196b8 <tcpip_tcp_timer+0x40>)
 8019698:	20fa      	movs	r0, #250	@ 0xfa
 801969a:	f000 f8f3 	bl	8019884 <sys_timeout>
 801969e:	e003      	b.n	80196a8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80196a0:	4b06      	ldr	r3, [pc, #24]	@ (80196bc <tcpip_tcp_timer+0x44>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	601a      	str	r2, [r3, #0]
  }
}
 80196a6:	bf00      	nop
 80196a8:	bf00      	nop
 80196aa:	3708      	adds	r7, #8
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	2000f3e8 	.word	0x2000f3e8
 80196b4:	2000f3ec 	.word	0x2000f3ec
 80196b8:	08019679 	.word	0x08019679
 80196bc:	2000f434 	.word	0x2000f434

080196c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80196c4:	4b0a      	ldr	r3, [pc, #40]	@ (80196f0 <tcp_timer_needed+0x30>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10f      	bne.n	80196ec <tcp_timer_needed+0x2c>
 80196cc:	4b09      	ldr	r3, [pc, #36]	@ (80196f4 <tcp_timer_needed+0x34>)
 80196ce:	681b      	ldr	r3, [r3, #0]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d103      	bne.n	80196dc <tcp_timer_needed+0x1c>
 80196d4:	4b08      	ldr	r3, [pc, #32]	@ (80196f8 <tcp_timer_needed+0x38>)
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d007      	beq.n	80196ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80196dc:	4b04      	ldr	r3, [pc, #16]	@ (80196f0 <tcp_timer_needed+0x30>)
 80196de:	2201      	movs	r2, #1
 80196e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80196e2:	2200      	movs	r2, #0
 80196e4:	4905      	ldr	r1, [pc, #20]	@ (80196fc <tcp_timer_needed+0x3c>)
 80196e6:	20fa      	movs	r0, #250	@ 0xfa
 80196e8:	f000 f8cc 	bl	8019884 <sys_timeout>
  }
}
 80196ec:	bf00      	nop
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	2000f434 	.word	0x2000f434
 80196f4:	2000f3e8 	.word	0x2000f3e8
 80196f8:	2000f3ec 	.word	0x2000f3ec
 80196fc:	08019679 	.word	0x08019679

08019700 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b086      	sub	sp, #24
 8019704:	af00      	add	r7, sp, #0
 8019706:	60f8      	str	r0, [r7, #12]
 8019708:	60b9      	str	r1, [r7, #8]
 801970a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801970c:	200a      	movs	r0, #10
 801970e:	f7f8 fd61 	bl	80121d4 <memp_malloc>
 8019712:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d109      	bne.n	801972e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801971a:	693b      	ldr	r3, [r7, #16]
 801971c:	2b00      	cmp	r3, #0
 801971e:	d151      	bne.n	80197c4 <sys_timeout_abs+0xc4>
 8019720:	4b2a      	ldr	r3, [pc, #168]	@ (80197cc <sys_timeout_abs+0xcc>)
 8019722:	22be      	movs	r2, #190	@ 0xbe
 8019724:	492a      	ldr	r1, [pc, #168]	@ (80197d0 <sys_timeout_abs+0xd0>)
 8019726:	482b      	ldr	r0, [pc, #172]	@ (80197d4 <sys_timeout_abs+0xd4>)
 8019728:	f004 f82e 	bl	801d788 <iprintf>
    return;
 801972c:	e04a      	b.n	80197c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801972e:	693b      	ldr	r3, [r7, #16]
 8019730:	2200      	movs	r2, #0
 8019732:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019734:	693b      	ldr	r3, [r7, #16]
 8019736:	68ba      	ldr	r2, [r7, #8]
 8019738:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801973a:	693b      	ldr	r3, [r7, #16]
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019740:	693b      	ldr	r3, [r7, #16]
 8019742:	68fa      	ldr	r2, [r7, #12]
 8019744:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019746:	4b24      	ldr	r3, [pc, #144]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	2b00      	cmp	r3, #0
 801974c:	d103      	bne.n	8019756 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801974e:	4a22      	ldr	r2, [pc, #136]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	6013      	str	r3, [r2, #0]
    return;
 8019754:	e037      	b.n	80197c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019756:	693b      	ldr	r3, [r7, #16]
 8019758:	685a      	ldr	r2, [r3, #4]
 801975a:	4b1f      	ldr	r3, [pc, #124]	@ (80197d8 <sys_timeout_abs+0xd8>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	685b      	ldr	r3, [r3, #4]
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	0fdb      	lsrs	r3, r3, #31
 8019764:	f003 0301 	and.w	r3, r3, #1
 8019768:	b2db      	uxtb	r3, r3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d007      	beq.n	801977e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801976e:	4b1a      	ldr	r3, [pc, #104]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019770:	681a      	ldr	r2, [r3, #0]
 8019772:	693b      	ldr	r3, [r7, #16]
 8019774:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019776:	4a18      	ldr	r2, [pc, #96]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	6013      	str	r3, [r2, #0]
 801977c:	e023      	b.n	80197c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801977e:	4b16      	ldr	r3, [pc, #88]	@ (80197d8 <sys_timeout_abs+0xd8>)
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	617b      	str	r3, [r7, #20]
 8019784:	e01a      	b.n	80197bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d00b      	beq.n	80197a6 <sys_timeout_abs+0xa6>
 801978e:	693b      	ldr	r3, [r7, #16]
 8019790:	685a      	ldr	r2, [r3, #4]
 8019792:	697b      	ldr	r3, [r7, #20]
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	1ad3      	subs	r3, r2, r3
 801979a:	0fdb      	lsrs	r3, r3, #31
 801979c:	f003 0301 	and.w	r3, r3, #1
 80197a0:	b2db      	uxtb	r3, r3
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d007      	beq.n	80197b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	693b      	ldr	r3, [r7, #16]
 80197ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	693a      	ldr	r2, [r7, #16]
 80197b2:	601a      	str	r2, [r3, #0]
        break;
 80197b4:	e007      	b.n	80197c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	617b      	str	r3, [r7, #20]
 80197bc:	697b      	ldr	r3, [r7, #20]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d1e1      	bne.n	8019786 <sys_timeout_abs+0x86>
 80197c2:	e000      	b.n	80197c6 <sys_timeout_abs+0xc6>
    return;
 80197c4:	bf00      	nop
      }
    }
  }
}
 80197c6:	3718      	adds	r7, #24
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	08022ab8 	.word	0x08022ab8
 80197d0:	08022aec 	.word	0x08022aec
 80197d4:	08022b2c 	.word	0x08022b2c
 80197d8:	2000f42c 	.word	0x2000f42c

080197dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	4798      	blx	r3

  now = sys_now();
 80197ee:	f7f1 fb39 	bl	800ae64 <sys_now>
 80197f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	681a      	ldr	r2, [r3, #0]
 80197f8:	4b0f      	ldr	r3, [pc, #60]	@ (8019838 <lwip_cyclic_timer+0x5c>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	4413      	add	r3, r2
 80197fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019800:	68fa      	ldr	r2, [r7, #12]
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	1ad3      	subs	r3, r2, r3
 8019806:	0fdb      	lsrs	r3, r3, #31
 8019808:	f003 0301 	and.w	r3, r3, #1
 801980c:	b2db      	uxtb	r3, r3
 801980e:	2b00      	cmp	r3, #0
 8019810:	d009      	beq.n	8019826 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019812:	697b      	ldr	r3, [r7, #20]
 8019814:	681a      	ldr	r2, [r3, #0]
 8019816:	693b      	ldr	r3, [r7, #16]
 8019818:	4413      	add	r3, r2
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	4907      	ldr	r1, [pc, #28]	@ (801983c <lwip_cyclic_timer+0x60>)
 801981e:	4618      	mov	r0, r3
 8019820:	f7ff ff6e 	bl	8019700 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019824:	e004      	b.n	8019830 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	4904      	ldr	r1, [pc, #16]	@ (801983c <lwip_cyclic_timer+0x60>)
 801982a:	68f8      	ldr	r0, [r7, #12]
 801982c:	f7ff ff68 	bl	8019700 <sys_timeout_abs>
}
 8019830:	bf00      	nop
 8019832:	3718      	adds	r7, #24
 8019834:	46bd      	mov	sp, r7
 8019836:	bd80      	pop	{r7, pc}
 8019838:	2000f430 	.word	0x2000f430
 801983c:	080197dd 	.word	0x080197dd

08019840 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019846:	2301      	movs	r3, #1
 8019848:	607b      	str	r3, [r7, #4]
 801984a:	e00e      	b.n	801986a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801984c:	4a0b      	ldr	r2, [pc, #44]	@ (801987c <sys_timeouts_init+0x3c>)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	00db      	lsls	r3, r3, #3
 8019858:	4a08      	ldr	r2, [pc, #32]	@ (801987c <sys_timeouts_init+0x3c>)
 801985a:	4413      	add	r3, r2
 801985c:	461a      	mov	r2, r3
 801985e:	4908      	ldr	r1, [pc, #32]	@ (8019880 <sys_timeouts_init+0x40>)
 8019860:	f000 f810 	bl	8019884 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	3301      	adds	r3, #1
 8019868:	607b      	str	r3, [r7, #4]
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	2b02      	cmp	r3, #2
 801986e:	d9ed      	bls.n	801984c <sys_timeouts_init+0xc>
  }
}
 8019870:	bf00      	nop
 8019872:	bf00      	nop
 8019874:	3708      	adds	r7, #8
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}
 801987a:	bf00      	nop
 801987c:	080243a8 	.word	0x080243a8
 8019880:	080197dd 	.word	0x080197dd

08019884 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019884:	b580      	push	{r7, lr}
 8019886:	b086      	sub	sp, #24
 8019888:	af00      	add	r7, sp, #0
 801988a:	60f8      	str	r0, [r7, #12]
 801988c:	60b9      	str	r1, [r7, #8]
 801988e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019896:	d306      	bcc.n	80198a6 <sys_timeout+0x22>
 8019898:	4b0a      	ldr	r3, [pc, #40]	@ (80198c4 <sys_timeout+0x40>)
 801989a:	f240 1229 	movw	r2, #297	@ 0x129
 801989e:	490a      	ldr	r1, [pc, #40]	@ (80198c8 <sys_timeout+0x44>)
 80198a0:	480a      	ldr	r0, [pc, #40]	@ (80198cc <sys_timeout+0x48>)
 80198a2:	f003 ff71 	bl	801d788 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80198a6:	f7f1 fadd 	bl	800ae64 <sys_now>
 80198aa:	4602      	mov	r2, r0
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	4413      	add	r3, r2
 80198b0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80198b2:	687a      	ldr	r2, [r7, #4]
 80198b4:	68b9      	ldr	r1, [r7, #8]
 80198b6:	6978      	ldr	r0, [r7, #20]
 80198b8:	f7ff ff22 	bl	8019700 <sys_timeout_abs>
#endif
}
 80198bc:	bf00      	nop
 80198be:	3718      	adds	r7, #24
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}
 80198c4:	08022ab8 	.word	0x08022ab8
 80198c8:	08022b54 	.word	0x08022b54
 80198cc:	08022b2c 	.word	0x08022b2c

080198d0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80198d0:	b580      	push	{r7, lr}
 80198d2:	b084      	sub	sp, #16
 80198d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80198d6:	f7f1 fac5 	bl	800ae64 <sys_now>
 80198da:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80198dc:	4b17      	ldr	r3, [pc, #92]	@ (801993c <sys_check_timeouts+0x6c>)
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d022      	beq.n	801992e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	685b      	ldr	r3, [r3, #4]
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	1ad3      	subs	r3, r2, r3
 80198f0:	0fdb      	lsrs	r3, r3, #31
 80198f2:	f003 0301 	and.w	r3, r3, #1
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d11a      	bne.n	8019932 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80198fc:	68bb      	ldr	r3, [r7, #8]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	4a0e      	ldr	r2, [pc, #56]	@ (801993c <sys_check_timeouts+0x6c>)
 8019902:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019904:	68bb      	ldr	r3, [r7, #8]
 8019906:	689b      	ldr	r3, [r3, #8]
 8019908:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801990a:	68bb      	ldr	r3, [r7, #8]
 801990c:	68db      	ldr	r3, [r3, #12]
 801990e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019910:	68bb      	ldr	r3, [r7, #8]
 8019912:	685b      	ldr	r3, [r3, #4]
 8019914:	4a0a      	ldr	r2, [pc, #40]	@ (8019940 <sys_check_timeouts+0x70>)
 8019916:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019918:	68b9      	ldr	r1, [r7, #8]
 801991a:	200a      	movs	r0, #10
 801991c:	f7f8 fcd0 	bl	80122c0 <memp_free>
    if (handler != NULL) {
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	2b00      	cmp	r3, #0
 8019924:	d0da      	beq.n	80198dc <sys_check_timeouts+0xc>
      handler(arg);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6838      	ldr	r0, [r7, #0]
 801992a:	4798      	blx	r3
  do {
 801992c:	e7d6      	b.n	80198dc <sys_check_timeouts+0xc>
      return;
 801992e:	bf00      	nop
 8019930:	e000      	b.n	8019934 <sys_check_timeouts+0x64>
      return;
 8019932:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019934:	3710      	adds	r7, #16
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}
 801993a:	bf00      	nop
 801993c:	2000f42c 	.word	0x2000f42c
 8019940:	2000f430 	.word	0x2000f430

08019944 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b082      	sub	sp, #8
 8019948:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801994a:	4b16      	ldr	r3, [pc, #88]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d102      	bne.n	8019958 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019952:	f04f 33ff 	mov.w	r3, #4294967295
 8019956:	e020      	b.n	801999a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019958:	f7f1 fa84 	bl	800ae64 <sys_now>
 801995c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801995e:	4b11      	ldr	r3, [pc, #68]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	685a      	ldr	r2, [r3, #4]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	1ad3      	subs	r3, r2, r3
 8019968:	0fdb      	lsrs	r3, r3, #31
 801996a:	f003 0301 	and.w	r3, r3, #1
 801996e:	b2db      	uxtb	r3, r3
 8019970:	2b00      	cmp	r3, #0
 8019972:	d001      	beq.n	8019978 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019974:	2300      	movs	r3, #0
 8019976:	e010      	b.n	801999a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019978:	4b0a      	ldr	r3, [pc, #40]	@ (80199a4 <sys_timeouts_sleeptime+0x60>)
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	685a      	ldr	r2, [r3, #4]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	da06      	bge.n	8019998 <sys_timeouts_sleeptime+0x54>
 801998a:	4b07      	ldr	r3, [pc, #28]	@ (80199a8 <sys_timeouts_sleeptime+0x64>)
 801998c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019990:	4906      	ldr	r1, [pc, #24]	@ (80199ac <sys_timeouts_sleeptime+0x68>)
 8019992:	4807      	ldr	r0, [pc, #28]	@ (80199b0 <sys_timeouts_sleeptime+0x6c>)
 8019994:	f003 fef8 	bl	801d788 <iprintf>
    return ret;
 8019998:	683b      	ldr	r3, [r7, #0]
  }
}
 801999a:	4618      	mov	r0, r3
 801999c:	3708      	adds	r7, #8
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}
 80199a2:	bf00      	nop
 80199a4:	2000f42c 	.word	0x2000f42c
 80199a8:	08022ab8 	.word	0x08022ab8
 80199ac:	08022b8c 	.word	0x08022b8c
 80199b0:	08022b2c 	.word	0x08022b2c

080199b4 <udp_init>:
 80199b4:	b580      	push	{r7, lr}
 80199b6:	af00      	add	r7, sp, #0
 80199b8:	f003 f98e 	bl	801ccd8 <rand>
 80199bc:	4603      	mov	r3, r0
 80199be:	b29b      	uxth	r3, r3
 80199c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	4b01      	ldr	r3, [pc, #4]	@ (80199d4 <udp_init+0x20>)
 80199ce:	801a      	strh	r2, [r3, #0]
 80199d0:	bf00      	nop
 80199d2:	bd80      	pop	{r7, pc}
 80199d4:	20000084 	.word	0x20000084

080199d8 <udp_new_port>:
 80199d8:	b480      	push	{r7}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
 80199de:	2300      	movs	r3, #0
 80199e0:	80fb      	strh	r3, [r7, #6]
 80199e2:	4b17      	ldr	r3, [pc, #92]	@ (8019a40 <udp_new_port+0x68>)
 80199e4:	881b      	ldrh	r3, [r3, #0]
 80199e6:	1c5a      	adds	r2, r3, #1
 80199e8:	b291      	uxth	r1, r2
 80199ea:	4a15      	ldr	r2, [pc, #84]	@ (8019a40 <udp_new_port+0x68>)
 80199ec:	8011      	strh	r1, [r2, #0]
 80199ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80199f2:	4293      	cmp	r3, r2
 80199f4:	d103      	bne.n	80199fe <udp_new_port+0x26>
 80199f6:	4b12      	ldr	r3, [pc, #72]	@ (8019a40 <udp_new_port+0x68>)
 80199f8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80199fc:	801a      	strh	r2, [r3, #0]
 80199fe:	4b11      	ldr	r3, [pc, #68]	@ (8019a44 <udp_new_port+0x6c>)
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	603b      	str	r3, [r7, #0]
 8019a04:	e011      	b.n	8019a2a <udp_new_port+0x52>
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	8a5a      	ldrh	r2, [r3, #18]
 8019a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8019a40 <udp_new_port+0x68>)
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	429a      	cmp	r2, r3
 8019a10:	d108      	bne.n	8019a24 <udp_new_port+0x4c>
 8019a12:	88fb      	ldrh	r3, [r7, #6]
 8019a14:	3301      	adds	r3, #1
 8019a16:	80fb      	strh	r3, [r7, #6]
 8019a18:	88fb      	ldrh	r3, [r7, #6]
 8019a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019a1e:	d3e0      	bcc.n	80199e2 <udp_new_port+0xa>
 8019a20:	2300      	movs	r3, #0
 8019a22:	e007      	b.n	8019a34 <udp_new_port+0x5c>
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	603b      	str	r3, [r7, #0]
 8019a2a:	683b      	ldr	r3, [r7, #0]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d1ea      	bne.n	8019a06 <udp_new_port+0x2e>
 8019a30:	4b03      	ldr	r3, [pc, #12]	@ (8019a40 <udp_new_port+0x68>)
 8019a32:	881b      	ldrh	r3, [r3, #0]
 8019a34:	4618      	mov	r0, r3
 8019a36:	370c      	adds	r7, #12
 8019a38:	46bd      	mov	sp, r7
 8019a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3e:	4770      	bx	lr
 8019a40:	20000084 	.word	0x20000084
 8019a44:	2000f438 	.word	0x2000f438

08019a48 <udp_input_local_match>:
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	b084      	sub	sp, #16
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	60f8      	str	r0, [r7, #12]
 8019a50:	60b9      	str	r1, [r7, #8]
 8019a52:	4613      	mov	r3, r2
 8019a54:	71fb      	strb	r3, [r7, #7]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d105      	bne.n	8019a68 <udp_input_local_match+0x20>
 8019a5c:	4b27      	ldr	r3, [pc, #156]	@ (8019afc <udp_input_local_match+0xb4>)
 8019a5e:	2287      	movs	r2, #135	@ 0x87
 8019a60:	4927      	ldr	r1, [pc, #156]	@ (8019b00 <udp_input_local_match+0xb8>)
 8019a62:	4828      	ldr	r0, [pc, #160]	@ (8019b04 <udp_input_local_match+0xbc>)
 8019a64:	f003 fe90 	bl	801d788 <iprintf>
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d105      	bne.n	8019a7a <udp_input_local_match+0x32>
 8019a6e:	4b23      	ldr	r3, [pc, #140]	@ (8019afc <udp_input_local_match+0xb4>)
 8019a70:	2288      	movs	r2, #136	@ 0x88
 8019a72:	4925      	ldr	r1, [pc, #148]	@ (8019b08 <udp_input_local_match+0xc0>)
 8019a74:	4823      	ldr	r0, [pc, #140]	@ (8019b04 <udp_input_local_match+0xbc>)
 8019a76:	f003 fe87 	bl	801d788 <iprintf>
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	7a1b      	ldrb	r3, [r3, #8]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d00b      	beq.n	8019a9a <udp_input_local_match+0x52>
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	7a1a      	ldrb	r2, [r3, #8]
 8019a86:	4b21      	ldr	r3, [pc, #132]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019a88:	685b      	ldr	r3, [r3, #4]
 8019a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019a8e:	3301      	adds	r3, #1
 8019a90:	b2db      	uxtb	r3, r3
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d001      	beq.n	8019a9a <udp_input_local_match+0x52>
 8019a96:	2300      	movs	r3, #0
 8019a98:	e02b      	b.n	8019af2 <udp_input_local_match+0xaa>
 8019a9a:	79fb      	ldrb	r3, [r7, #7]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d018      	beq.n	8019ad2 <udp_input_local_match+0x8a>
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d013      	beq.n	8019ace <udp_input_local_match+0x86>
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d00f      	beq.n	8019ace <udp_input_local_match+0x86>
 8019aae:	4b17      	ldr	r3, [pc, #92]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019ab0:	695b      	ldr	r3, [r3, #20]
 8019ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ab6:	d00a      	beq.n	8019ace <udp_input_local_match+0x86>
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	4b13      	ldr	r3, [pc, #76]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019abe:	695b      	ldr	r3, [r3, #20]
 8019ac0:	405a      	eors	r2, r3
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	3308      	adds	r3, #8
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	4013      	ands	r3, r2
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d110      	bne.n	8019af0 <udp_input_local_match+0xa8>
 8019ace:	2301      	movs	r3, #1
 8019ad0:	e00f      	b.n	8019af2 <udp_input_local_match+0xaa>
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d009      	beq.n	8019aec <udp_input_local_match+0xa4>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d005      	beq.n	8019aec <udp_input_local_match+0xa4>
 8019ae0:	68fb      	ldr	r3, [r7, #12]
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	4b09      	ldr	r3, [pc, #36]	@ (8019b0c <udp_input_local_match+0xc4>)
 8019ae6:	695b      	ldr	r3, [r3, #20]
 8019ae8:	429a      	cmp	r2, r3
 8019aea:	d101      	bne.n	8019af0 <udp_input_local_match+0xa8>
 8019aec:	2301      	movs	r3, #1
 8019aee:	e000      	b.n	8019af2 <udp_input_local_match+0xaa>
 8019af0:	2300      	movs	r3, #0
 8019af2:	4618      	mov	r0, r3
 8019af4:	3710      	adds	r7, #16
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
 8019afa:	bf00      	nop
 8019afc:	08022ba0 	.word	0x08022ba0
 8019b00:	08022bd0 	.word	0x08022bd0
 8019b04:	08022bf4 	.word	0x08022bf4
 8019b08:	08022c1c 	.word	0x08022c1c
 8019b0c:	2000bc88 	.word	0x2000bc88

08019b10 <udp_input>:
 8019b10:	b590      	push	{r4, r7, lr}
 8019b12:	b08d      	sub	sp, #52	@ 0x34
 8019b14:	af02      	add	r7, sp, #8
 8019b16:	6078      	str	r0, [r7, #4]
 8019b18:	6039      	str	r1, [r7, #0]
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	76fb      	strb	r3, [r7, #27]
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d105      	bne.n	8019b30 <udp_input+0x20>
 8019b24:	4b7c      	ldr	r3, [pc, #496]	@ (8019d18 <udp_input+0x208>)
 8019b26:	22cf      	movs	r2, #207	@ 0xcf
 8019b28:	497c      	ldr	r1, [pc, #496]	@ (8019d1c <udp_input+0x20c>)
 8019b2a:	487d      	ldr	r0, [pc, #500]	@ (8019d20 <udp_input+0x210>)
 8019b2c:	f003 fe2c 	bl	801d788 <iprintf>
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d105      	bne.n	8019b42 <udp_input+0x32>
 8019b36:	4b78      	ldr	r3, [pc, #480]	@ (8019d18 <udp_input+0x208>)
 8019b38:	22d0      	movs	r2, #208	@ 0xd0
 8019b3a:	497a      	ldr	r1, [pc, #488]	@ (8019d24 <udp_input+0x214>)
 8019b3c:	4878      	ldr	r0, [pc, #480]	@ (8019d20 <udp_input+0x210>)
 8019b3e:	f003 fe23 	bl	801d788 <iprintf>
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	895b      	ldrh	r3, [r3, #10]
 8019b46:	2b07      	cmp	r3, #7
 8019b48:	d803      	bhi.n	8019b52 <udp_input+0x42>
 8019b4a:	6878      	ldr	r0, [r7, #4]
 8019b4c:	f7f9 fa5c 	bl	8013008 <pbuf_free>
 8019b50:	e0de      	b.n	8019d10 <udp_input+0x200>
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	617b      	str	r3, [r7, #20]
 8019b58:	4b73      	ldr	r3, [pc, #460]	@ (8019d28 <udp_input+0x218>)
 8019b5a:	695b      	ldr	r3, [r3, #20]
 8019b5c:	4a72      	ldr	r2, [pc, #456]	@ (8019d28 <udp_input+0x218>)
 8019b5e:	6812      	ldr	r2, [r2, #0]
 8019b60:	4611      	mov	r1, r2
 8019b62:	4618      	mov	r0, r3
 8019b64:	f001 ff80 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	74fb      	strb	r3, [r7, #19]
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	b29b      	uxth	r3, r3
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7f7 fe20 	bl	80117b8 <lwip_htons>
 8019b78:	4603      	mov	r3, r0
 8019b7a:	823b      	strh	r3, [r7, #16]
 8019b7c:	697b      	ldr	r3, [r7, #20]
 8019b7e:	885b      	ldrh	r3, [r3, #2]
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	4618      	mov	r0, r3
 8019b84:	f7f7 fe18 	bl	80117b8 <lwip_htons>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	81fb      	strh	r3, [r7, #14]
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b90:	2300      	movs	r3, #0
 8019b92:	623b      	str	r3, [r7, #32]
 8019b94:	2300      	movs	r3, #0
 8019b96:	61fb      	str	r3, [r7, #28]
 8019b98:	4b64      	ldr	r3, [pc, #400]	@ (8019d2c <udp_input+0x21c>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b9e:	e054      	b.n	8019c4a <udp_input+0x13a>
 8019ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ba2:	8a5b      	ldrh	r3, [r3, #18]
 8019ba4:	89fa      	ldrh	r2, [r7, #14]
 8019ba6:	429a      	cmp	r2, r3
 8019ba8:	d14a      	bne.n	8019c40 <udp_input+0x130>
 8019baa:	7cfb      	ldrb	r3, [r7, #19]
 8019bac:	461a      	mov	r2, r3
 8019bae:	6839      	ldr	r1, [r7, #0]
 8019bb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019bb2:	f7ff ff49 	bl	8019a48 <udp_input_local_match>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d041      	beq.n	8019c40 <udp_input+0x130>
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bbe:	7c1b      	ldrb	r3, [r3, #16]
 8019bc0:	f003 0304 	and.w	r3, r3, #4
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d11d      	bne.n	8019c04 <udp_input+0xf4>
 8019bc8:	69fb      	ldr	r3, [r7, #28]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d102      	bne.n	8019bd4 <udp_input+0xc4>
 8019bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bd0:	61fb      	str	r3, [r7, #28]
 8019bd2:	e017      	b.n	8019c04 <udp_input+0xf4>
 8019bd4:	7cfb      	ldrb	r3, [r7, #19]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d014      	beq.n	8019c04 <udp_input+0xf4>
 8019bda:	4b53      	ldr	r3, [pc, #332]	@ (8019d28 <udp_input+0x218>)
 8019bdc:	695b      	ldr	r3, [r3, #20]
 8019bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019be2:	d10f      	bne.n	8019c04 <udp_input+0xf4>
 8019be4:	69fb      	ldr	r3, [r7, #28]
 8019be6:	681a      	ldr	r2, [r3, #0]
 8019be8:	683b      	ldr	r3, [r7, #0]
 8019bea:	3304      	adds	r3, #4
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	429a      	cmp	r2, r3
 8019bf0:	d008      	beq.n	8019c04 <udp_input+0xf4>
 8019bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf4:	681a      	ldr	r2, [r3, #0]
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	3304      	adds	r3, #4
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	429a      	cmp	r2, r3
 8019bfe:	d101      	bne.n	8019c04 <udp_input+0xf4>
 8019c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c02:	61fb      	str	r3, [r7, #28]
 8019c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c06:	8a9b      	ldrh	r3, [r3, #20]
 8019c08:	8a3a      	ldrh	r2, [r7, #16]
 8019c0a:	429a      	cmp	r2, r3
 8019c0c:	d118      	bne.n	8019c40 <udp_input+0x130>
 8019c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c10:	685b      	ldr	r3, [r3, #4]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d005      	beq.n	8019c22 <udp_input+0x112>
 8019c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c18:	685a      	ldr	r2, [r3, #4]
 8019c1a:	4b43      	ldr	r3, [pc, #268]	@ (8019d28 <udp_input+0x218>)
 8019c1c:	691b      	ldr	r3, [r3, #16]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d10e      	bne.n	8019c40 <udp_input+0x130>
 8019c22:	6a3b      	ldr	r3, [r7, #32]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d014      	beq.n	8019c52 <udp_input+0x142>
 8019c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c2a:	68da      	ldr	r2, [r3, #12]
 8019c2c:	6a3b      	ldr	r3, [r7, #32]
 8019c2e:	60da      	str	r2, [r3, #12]
 8019c30:	4b3e      	ldr	r3, [pc, #248]	@ (8019d2c <udp_input+0x21c>)
 8019c32:	681a      	ldr	r2, [r3, #0]
 8019c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c36:	60da      	str	r2, [r3, #12]
 8019c38:	4a3c      	ldr	r2, [pc, #240]	@ (8019d2c <udp_input+0x21c>)
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c3c:	6013      	str	r3, [r2, #0]
 8019c3e:	e008      	b.n	8019c52 <udp_input+0x142>
 8019c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c42:	623b      	str	r3, [r7, #32]
 8019c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c46:	68db      	ldr	r3, [r3, #12]
 8019c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d1a7      	bne.n	8019ba0 <udp_input+0x90>
 8019c50:	e000      	b.n	8019c54 <udp_input+0x144>
 8019c52:	bf00      	nop
 8019c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d101      	bne.n	8019c5e <udp_input+0x14e>
 8019c5a:	69fb      	ldr	r3, [r7, #28]
 8019c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d002      	beq.n	8019c6a <udp_input+0x15a>
 8019c64:	2301      	movs	r3, #1
 8019c66:	76fb      	strb	r3, [r7, #27]
 8019c68:	e00a      	b.n	8019c80 <udp_input+0x170>
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	3304      	adds	r3, #4
 8019c6e:	681a      	ldr	r2, [r3, #0]
 8019c70:	4b2d      	ldr	r3, [pc, #180]	@ (8019d28 <udp_input+0x218>)
 8019c72:	695b      	ldr	r3, [r3, #20]
 8019c74:	429a      	cmp	r2, r3
 8019c76:	bf0c      	ite	eq
 8019c78:	2301      	moveq	r3, #1
 8019c7a:	2300      	movne	r3, #0
 8019c7c:	b2db      	uxtb	r3, r3
 8019c7e:	76fb      	strb	r3, [r7, #27]
 8019c80:	7efb      	ldrb	r3, [r7, #27]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d041      	beq.n	8019d0a <udp_input+0x1fa>
 8019c86:	2108      	movs	r1, #8
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f7f9 f937 	bl	8012efc <pbuf_remove_header>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d00a      	beq.n	8019caa <udp_input+0x19a>
 8019c94:	4b20      	ldr	r3, [pc, #128]	@ (8019d18 <udp_input+0x208>)
 8019c96:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8019c9a:	4925      	ldr	r1, [pc, #148]	@ (8019d30 <udp_input+0x220>)
 8019c9c:	4820      	ldr	r0, [pc, #128]	@ (8019d20 <udp_input+0x210>)
 8019c9e:	f003 fd73 	bl	801d788 <iprintf>
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7f9 f9b0 	bl	8013008 <pbuf_free>
 8019ca8:	e032      	b.n	8019d10 <udp_input+0x200>
 8019caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d012      	beq.n	8019cd6 <udp_input+0x1c6>
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb2:	699b      	ldr	r3, [r3, #24]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d00a      	beq.n	8019cce <udp_input+0x1be>
 8019cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cba:	699c      	ldr	r4, [r3, #24]
 8019cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cbe:	69d8      	ldr	r0, [r3, #28]
 8019cc0:	8a3b      	ldrh	r3, [r7, #16]
 8019cc2:	9300      	str	r3, [sp, #0]
 8019cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8019d34 <udp_input+0x224>)
 8019cc6:	687a      	ldr	r2, [r7, #4]
 8019cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019cca:	47a0      	blx	r4
 8019ccc:	e021      	b.n	8019d12 <udp_input+0x202>
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	f7f9 f99a 	bl	8013008 <pbuf_free>
 8019cd4:	e01c      	b.n	8019d10 <udp_input+0x200>
 8019cd6:	7cfb      	ldrb	r3, [r7, #19]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d112      	bne.n	8019d02 <udp_input+0x1f2>
 8019cdc:	4b12      	ldr	r3, [pc, #72]	@ (8019d28 <udp_input+0x218>)
 8019cde:	695b      	ldr	r3, [r3, #20]
 8019ce0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019ce4:	2be0      	cmp	r3, #224	@ 0xe0
 8019ce6:	d00c      	beq.n	8019d02 <udp_input+0x1f2>
 8019ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8019d28 <udp_input+0x218>)
 8019cea:	899b      	ldrh	r3, [r3, #12]
 8019cec:	3308      	adds	r3, #8
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	b21b      	sxth	r3, r3
 8019cf2:	4619      	mov	r1, r3
 8019cf4:	6878      	ldr	r0, [r7, #4]
 8019cf6:	f7f9 f974 	bl	8012fe2 <pbuf_header_force>
 8019cfa:	2103      	movs	r1, #3
 8019cfc:	6878      	ldr	r0, [r7, #4]
 8019cfe:	f001 fb93 	bl	801b428 <icmp_dest_unreach>
 8019d02:	6878      	ldr	r0, [r7, #4]
 8019d04:	f7f9 f980 	bl	8013008 <pbuf_free>
 8019d08:	e003      	b.n	8019d12 <udp_input+0x202>
 8019d0a:	6878      	ldr	r0, [r7, #4]
 8019d0c:	f7f9 f97c 	bl	8013008 <pbuf_free>
 8019d10:	bf00      	nop
 8019d12:	372c      	adds	r7, #44	@ 0x2c
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd90      	pop	{r4, r7, pc}
 8019d18:	08022ba0 	.word	0x08022ba0
 8019d1c:	08022c44 	.word	0x08022c44
 8019d20:	08022bf4 	.word	0x08022bf4
 8019d24:	08022c5c 	.word	0x08022c5c
 8019d28:	2000bc88 	.word	0x2000bc88
 8019d2c:	2000f438 	.word	0x2000f438
 8019d30:	08022c78 	.word	0x08022c78
 8019d34:	2000bc98 	.word	0x2000bc98

08019d38 <udp_send>:
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b082      	sub	sp, #8
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d109      	bne.n	8019d5c <udp_send+0x24>
 8019d48:	4b11      	ldr	r3, [pc, #68]	@ (8019d90 <udp_send+0x58>)
 8019d4a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8019d4e:	4911      	ldr	r1, [pc, #68]	@ (8019d94 <udp_send+0x5c>)
 8019d50:	4811      	ldr	r0, [pc, #68]	@ (8019d98 <udp_send+0x60>)
 8019d52:	f003 fd19 	bl	801d788 <iprintf>
 8019d56:	f06f 030f 	mvn.w	r3, #15
 8019d5a:	e015      	b.n	8019d88 <udp_send+0x50>
 8019d5c:	683b      	ldr	r3, [r7, #0]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d109      	bne.n	8019d76 <udp_send+0x3e>
 8019d62:	4b0b      	ldr	r3, [pc, #44]	@ (8019d90 <udp_send+0x58>)
 8019d64:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8019d68:	490c      	ldr	r1, [pc, #48]	@ (8019d9c <udp_send+0x64>)
 8019d6a:	480b      	ldr	r0, [pc, #44]	@ (8019d98 <udp_send+0x60>)
 8019d6c:	f003 fd0c 	bl	801d788 <iprintf>
 8019d70:	f06f 030f 	mvn.w	r3, #15
 8019d74:	e008      	b.n	8019d88 <udp_send+0x50>
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	1d1a      	adds	r2, r3, #4
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	8a9b      	ldrh	r3, [r3, #20]
 8019d7e:	6839      	ldr	r1, [r7, #0]
 8019d80:	6878      	ldr	r0, [r7, #4]
 8019d82:	f000 f80d 	bl	8019da0 <udp_sendto>
 8019d86:	4603      	mov	r3, r0
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3708      	adds	r7, #8
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}
 8019d90:	08022ba0 	.word	0x08022ba0
 8019d94:	08022c94 	.word	0x08022c94
 8019d98:	08022bf4 	.word	0x08022bf4
 8019d9c:	08022cac 	.word	0x08022cac

08019da0 <udp_sendto>:
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b088      	sub	sp, #32
 8019da4:	af02      	add	r7, sp, #8
 8019da6:	60f8      	str	r0, [r7, #12]
 8019da8:	60b9      	str	r1, [r7, #8]
 8019daa:	607a      	str	r2, [r7, #4]
 8019dac:	807b      	strh	r3, [r7, #2]
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d109      	bne.n	8019dc8 <udp_sendto+0x28>
 8019db4:	4b23      	ldr	r3, [pc, #140]	@ (8019e44 <udp_sendto+0xa4>)
 8019db6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019dba:	4923      	ldr	r1, [pc, #140]	@ (8019e48 <udp_sendto+0xa8>)
 8019dbc:	4823      	ldr	r0, [pc, #140]	@ (8019e4c <udp_sendto+0xac>)
 8019dbe:	f003 fce3 	bl	801d788 <iprintf>
 8019dc2:	f06f 030f 	mvn.w	r3, #15
 8019dc6:	e038      	b.n	8019e3a <udp_sendto+0x9a>
 8019dc8:	68bb      	ldr	r3, [r7, #8]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d109      	bne.n	8019de2 <udp_sendto+0x42>
 8019dce:	4b1d      	ldr	r3, [pc, #116]	@ (8019e44 <udp_sendto+0xa4>)
 8019dd0:	f240 2219 	movw	r2, #537	@ 0x219
 8019dd4:	491e      	ldr	r1, [pc, #120]	@ (8019e50 <udp_sendto+0xb0>)
 8019dd6:	481d      	ldr	r0, [pc, #116]	@ (8019e4c <udp_sendto+0xac>)
 8019dd8:	f003 fcd6 	bl	801d788 <iprintf>
 8019ddc:	f06f 030f 	mvn.w	r3, #15
 8019de0:	e02b      	b.n	8019e3a <udp_sendto+0x9a>
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d109      	bne.n	8019dfc <udp_sendto+0x5c>
 8019de8:	4b16      	ldr	r3, [pc, #88]	@ (8019e44 <udp_sendto+0xa4>)
 8019dea:	f240 221a 	movw	r2, #538	@ 0x21a
 8019dee:	4919      	ldr	r1, [pc, #100]	@ (8019e54 <udp_sendto+0xb4>)
 8019df0:	4816      	ldr	r0, [pc, #88]	@ (8019e4c <udp_sendto+0xac>)
 8019df2:	f003 fcc9 	bl	801d788 <iprintf>
 8019df6:	f06f 030f 	mvn.w	r3, #15
 8019dfa:	e01e      	b.n	8019e3a <udp_sendto+0x9a>
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	7a1b      	ldrb	r3, [r3, #8]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d006      	beq.n	8019e12 <udp_sendto+0x72>
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	7a1b      	ldrb	r3, [r3, #8]
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f7f8 fd6f 	bl	80128ec <netif_get_by_index>
 8019e0e:	6178      	str	r0, [r7, #20]
 8019e10:	e003      	b.n	8019e1a <udp_sendto+0x7a>
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f001 fb92 	bl	801b53c <ip4_route>
 8019e18:	6178      	str	r0, [r7, #20]
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d102      	bne.n	8019e26 <udp_sendto+0x86>
 8019e20:	f06f 0303 	mvn.w	r3, #3
 8019e24:	e009      	b.n	8019e3a <udp_sendto+0x9a>
 8019e26:	887a      	ldrh	r2, [r7, #2]
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	9300      	str	r3, [sp, #0]
 8019e2c:	4613      	mov	r3, r2
 8019e2e:	687a      	ldr	r2, [r7, #4]
 8019e30:	68b9      	ldr	r1, [r7, #8]
 8019e32:	68f8      	ldr	r0, [r7, #12]
 8019e34:	f000 f810 	bl	8019e58 <udp_sendto_if>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3718      	adds	r7, #24
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}
 8019e42:	bf00      	nop
 8019e44:	08022ba0 	.word	0x08022ba0
 8019e48:	08022cc4 	.word	0x08022cc4
 8019e4c:	08022bf4 	.word	0x08022bf4
 8019e50:	08022cdc 	.word	0x08022cdc
 8019e54:	08022cf8 	.word	0x08022cf8

08019e58 <udp_sendto_if>:
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b088      	sub	sp, #32
 8019e5c:	af02      	add	r7, sp, #8
 8019e5e:	60f8      	str	r0, [r7, #12]
 8019e60:	60b9      	str	r1, [r7, #8]
 8019e62:	607a      	str	r2, [r7, #4]
 8019e64:	807b      	strh	r3, [r7, #2]
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d109      	bne.n	8019e80 <udp_sendto_if+0x28>
 8019e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8019f28 <udp_sendto_if+0xd0>)
 8019e6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019e72:	492e      	ldr	r1, [pc, #184]	@ (8019f2c <udp_sendto_if+0xd4>)
 8019e74:	482e      	ldr	r0, [pc, #184]	@ (8019f30 <udp_sendto_if+0xd8>)
 8019e76:	f003 fc87 	bl	801d788 <iprintf>
 8019e7a:	f06f 030f 	mvn.w	r3, #15
 8019e7e:	e04f      	b.n	8019f20 <udp_sendto_if+0xc8>
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d109      	bne.n	8019e9a <udp_sendto_if+0x42>
 8019e86:	4b28      	ldr	r3, [pc, #160]	@ (8019f28 <udp_sendto_if+0xd0>)
 8019e88:	f240 2281 	movw	r2, #641	@ 0x281
 8019e8c:	4929      	ldr	r1, [pc, #164]	@ (8019f34 <udp_sendto_if+0xdc>)
 8019e8e:	4828      	ldr	r0, [pc, #160]	@ (8019f30 <udp_sendto_if+0xd8>)
 8019e90:	f003 fc7a 	bl	801d788 <iprintf>
 8019e94:	f06f 030f 	mvn.w	r3, #15
 8019e98:	e042      	b.n	8019f20 <udp_sendto_if+0xc8>
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d109      	bne.n	8019eb4 <udp_sendto_if+0x5c>
 8019ea0:	4b21      	ldr	r3, [pc, #132]	@ (8019f28 <udp_sendto_if+0xd0>)
 8019ea2:	f240 2282 	movw	r2, #642	@ 0x282
 8019ea6:	4924      	ldr	r1, [pc, #144]	@ (8019f38 <udp_sendto_if+0xe0>)
 8019ea8:	4821      	ldr	r0, [pc, #132]	@ (8019f30 <udp_sendto_if+0xd8>)
 8019eaa:	f003 fc6d 	bl	801d788 <iprintf>
 8019eae:	f06f 030f 	mvn.w	r3, #15
 8019eb2:	e035      	b.n	8019f20 <udp_sendto_if+0xc8>
 8019eb4:	6a3b      	ldr	r3, [r7, #32]
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d109      	bne.n	8019ece <udp_sendto_if+0x76>
 8019eba:	4b1b      	ldr	r3, [pc, #108]	@ (8019f28 <udp_sendto_if+0xd0>)
 8019ebc:	f240 2283 	movw	r2, #643	@ 0x283
 8019ec0:	491e      	ldr	r1, [pc, #120]	@ (8019f3c <udp_sendto_if+0xe4>)
 8019ec2:	481b      	ldr	r0, [pc, #108]	@ (8019f30 <udp_sendto_if+0xd8>)
 8019ec4:	f003 fc60 	bl	801d788 <iprintf>
 8019ec8:	f06f 030f 	mvn.w	r3, #15
 8019ecc:	e028      	b.n	8019f20 <udp_sendto_if+0xc8>
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d009      	beq.n	8019ee8 <udp_sendto_if+0x90>
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d005      	beq.n	8019ee8 <udp_sendto_if+0x90>
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019ee4:	2be0      	cmp	r3, #224	@ 0xe0
 8019ee6:	d103      	bne.n	8019ef0 <udp_sendto_if+0x98>
 8019ee8:	6a3b      	ldr	r3, [r7, #32]
 8019eea:	3304      	adds	r3, #4
 8019eec:	617b      	str	r3, [r7, #20]
 8019eee:	e00b      	b.n	8019f08 <udp_sendto_if+0xb0>
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	681a      	ldr	r2, [r3, #0]
 8019ef4:	6a3b      	ldr	r3, [r7, #32]
 8019ef6:	3304      	adds	r3, #4
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	429a      	cmp	r2, r3
 8019efc:	d002      	beq.n	8019f04 <udp_sendto_if+0xac>
 8019efe:	f06f 0303 	mvn.w	r3, #3
 8019f02:	e00d      	b.n	8019f20 <udp_sendto_if+0xc8>
 8019f04:	68fb      	ldr	r3, [r7, #12]
 8019f06:	617b      	str	r3, [r7, #20]
 8019f08:	887a      	ldrh	r2, [r7, #2]
 8019f0a:	697b      	ldr	r3, [r7, #20]
 8019f0c:	9301      	str	r3, [sp, #4]
 8019f0e:	6a3b      	ldr	r3, [r7, #32]
 8019f10:	9300      	str	r3, [sp, #0]
 8019f12:	4613      	mov	r3, r2
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	68b9      	ldr	r1, [r7, #8]
 8019f18:	68f8      	ldr	r0, [r7, #12]
 8019f1a:	f000 f811 	bl	8019f40 <udp_sendto_if_src>
 8019f1e:	4603      	mov	r3, r0
 8019f20:	4618      	mov	r0, r3
 8019f22:	3718      	adds	r7, #24
 8019f24:	46bd      	mov	sp, r7
 8019f26:	bd80      	pop	{r7, pc}
 8019f28:	08022ba0 	.word	0x08022ba0
 8019f2c:	08022d14 	.word	0x08022d14
 8019f30:	08022bf4 	.word	0x08022bf4
 8019f34:	08022d30 	.word	0x08022d30
 8019f38:	08022d4c 	.word	0x08022d4c
 8019f3c:	08022d6c 	.word	0x08022d6c

08019f40 <udp_sendto_if_src>:
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b08c      	sub	sp, #48	@ 0x30
 8019f44:	af04      	add	r7, sp, #16
 8019f46:	60f8      	str	r0, [r7, #12]
 8019f48:	60b9      	str	r1, [r7, #8]
 8019f4a:	607a      	str	r2, [r7, #4]
 8019f4c:	807b      	strh	r3, [r7, #2]
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d109      	bne.n	8019f68 <udp_sendto_if_src+0x28>
 8019f54:	4b65      	ldr	r3, [pc, #404]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 8019f56:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019f5a:	4965      	ldr	r1, [pc, #404]	@ (801a0f0 <udp_sendto_if_src+0x1b0>)
 8019f5c:	4865      	ldr	r0, [pc, #404]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 8019f5e:	f003 fc13 	bl	801d788 <iprintf>
 8019f62:	f06f 030f 	mvn.w	r3, #15
 8019f66:	e0bc      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019f68:	68bb      	ldr	r3, [r7, #8]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d109      	bne.n	8019f82 <udp_sendto_if_src+0x42>
 8019f6e:	4b5f      	ldr	r3, [pc, #380]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 8019f70:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019f74:	4960      	ldr	r1, [pc, #384]	@ (801a0f8 <udp_sendto_if_src+0x1b8>)
 8019f76:	485f      	ldr	r0, [pc, #380]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 8019f78:	f003 fc06 	bl	801d788 <iprintf>
 8019f7c:	f06f 030f 	mvn.w	r3, #15
 8019f80:	e0af      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d109      	bne.n	8019f9c <udp_sendto_if_src+0x5c>
 8019f88:	4b58      	ldr	r3, [pc, #352]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 8019f8a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019f8e:	495b      	ldr	r1, [pc, #364]	@ (801a0fc <udp_sendto_if_src+0x1bc>)
 8019f90:	4858      	ldr	r0, [pc, #352]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 8019f92:	f003 fbf9 	bl	801d788 <iprintf>
 8019f96:	f06f 030f 	mvn.w	r3, #15
 8019f9a:	e0a2      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d109      	bne.n	8019fb6 <udp_sendto_if_src+0x76>
 8019fa2:	4b52      	ldr	r3, [pc, #328]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 8019fa4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019fa8:	4955      	ldr	r1, [pc, #340]	@ (801a100 <udp_sendto_if_src+0x1c0>)
 8019faa:	4852      	ldr	r0, [pc, #328]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 8019fac:	f003 fbec 	bl	801d788 <iprintf>
 8019fb0:	f06f 030f 	mvn.w	r3, #15
 8019fb4:	e095      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d109      	bne.n	8019fd0 <udp_sendto_if_src+0x90>
 8019fbc:	4b4b      	ldr	r3, [pc, #300]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 8019fbe:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019fc2:	4950      	ldr	r1, [pc, #320]	@ (801a104 <udp_sendto_if_src+0x1c4>)
 8019fc4:	484b      	ldr	r0, [pc, #300]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 8019fc6:	f003 fbdf 	bl	801d788 <iprintf>
 8019fca:	f06f 030f 	mvn.w	r3, #15
 8019fce:	e088      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	8a5b      	ldrh	r3, [r3, #18]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d10f      	bne.n	8019ff8 <udp_sendto_if_src+0xb8>
 8019fd8:	68f9      	ldr	r1, [r7, #12]
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	8a5b      	ldrh	r3, [r3, #18]
 8019fde:	461a      	mov	r2, r3
 8019fe0:	68f8      	ldr	r0, [r7, #12]
 8019fe2:	f000 f893 	bl	801a10c <udp_bind>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	76fb      	strb	r3, [r7, #27]
 8019fea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d002      	beq.n	8019ff8 <udp_sendto_if_src+0xb8>
 8019ff2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019ff6:	e074      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 8019ff8:	68bb      	ldr	r3, [r7, #8]
 8019ffa:	891b      	ldrh	r3, [r3, #8]
 8019ffc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a000:	4293      	cmp	r3, r2
 801a002:	d902      	bls.n	801a00a <udp_sendto_if_src+0xca>
 801a004:	f04f 33ff 	mov.w	r3, #4294967295
 801a008:	e06b      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 801a00a:	2108      	movs	r1, #8
 801a00c:	68b8      	ldr	r0, [r7, #8]
 801a00e:	f7f8 ff65 	bl	8012edc <pbuf_add_header>
 801a012:	4603      	mov	r3, r0
 801a014:	2b00      	cmp	r3, #0
 801a016:	d015      	beq.n	801a044 <udp_sendto_if_src+0x104>
 801a018:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a01c:	2108      	movs	r1, #8
 801a01e:	2022      	movs	r0, #34	@ 0x22
 801a020:	f7f8 fd0e 	bl	8012a40 <pbuf_alloc>
 801a024:	61f8      	str	r0, [r7, #28]
 801a026:	69fb      	ldr	r3, [r7, #28]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d102      	bne.n	801a032 <udp_sendto_if_src+0xf2>
 801a02c:	f04f 33ff 	mov.w	r3, #4294967295
 801a030:	e057      	b.n	801a0e2 <udp_sendto_if_src+0x1a2>
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	891b      	ldrh	r3, [r3, #8]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d006      	beq.n	801a048 <udp_sendto_if_src+0x108>
 801a03a:	68b9      	ldr	r1, [r7, #8]
 801a03c:	69f8      	ldr	r0, [r7, #28]
 801a03e:	f7f9 f907 	bl	8013250 <pbuf_chain>
 801a042:	e001      	b.n	801a048 <udp_sendto_if_src+0x108>
 801a044:	68bb      	ldr	r3, [r7, #8]
 801a046:	61fb      	str	r3, [r7, #28]
 801a048:	69fb      	ldr	r3, [r7, #28]
 801a04a:	895b      	ldrh	r3, [r3, #10]
 801a04c:	2b07      	cmp	r3, #7
 801a04e:	d806      	bhi.n	801a05e <udp_sendto_if_src+0x11e>
 801a050:	4b26      	ldr	r3, [pc, #152]	@ (801a0ec <udp_sendto_if_src+0x1ac>)
 801a052:	f240 320d 	movw	r2, #781	@ 0x30d
 801a056:	492c      	ldr	r1, [pc, #176]	@ (801a108 <udp_sendto_if_src+0x1c8>)
 801a058:	4826      	ldr	r0, [pc, #152]	@ (801a0f4 <udp_sendto_if_src+0x1b4>)
 801a05a:	f003 fb95 	bl	801d788 <iprintf>
 801a05e:	69fb      	ldr	r3, [r7, #28]
 801a060:	685b      	ldr	r3, [r3, #4]
 801a062:	617b      	str	r3, [r7, #20]
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	8a5b      	ldrh	r3, [r3, #18]
 801a068:	4618      	mov	r0, r3
 801a06a:	f7f7 fba5 	bl	80117b8 <lwip_htons>
 801a06e:	4603      	mov	r3, r0
 801a070:	461a      	mov	r2, r3
 801a072:	697b      	ldr	r3, [r7, #20]
 801a074:	801a      	strh	r2, [r3, #0]
 801a076:	887b      	ldrh	r3, [r7, #2]
 801a078:	4618      	mov	r0, r3
 801a07a:	f7f7 fb9d 	bl	80117b8 <lwip_htons>
 801a07e:	4603      	mov	r3, r0
 801a080:	461a      	mov	r2, r3
 801a082:	697b      	ldr	r3, [r7, #20]
 801a084:	805a      	strh	r2, [r3, #2]
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	2200      	movs	r2, #0
 801a08a:	719a      	strb	r2, [r3, #6]
 801a08c:	2200      	movs	r2, #0
 801a08e:	71da      	strb	r2, [r3, #7]
 801a090:	69fb      	ldr	r3, [r7, #28]
 801a092:	891b      	ldrh	r3, [r3, #8]
 801a094:	4618      	mov	r0, r3
 801a096:	f7f7 fb8f 	bl	80117b8 <lwip_htons>
 801a09a:	4603      	mov	r3, r0
 801a09c:	461a      	mov	r2, r3
 801a09e:	697b      	ldr	r3, [r7, #20]
 801a0a0:	809a      	strh	r2, [r3, #4]
 801a0a2:	2311      	movs	r3, #17
 801a0a4:	74fb      	strb	r3, [r7, #19]
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	7adb      	ldrb	r3, [r3, #11]
 801a0aa:	74bb      	strb	r3, [r7, #18]
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	7a9b      	ldrb	r3, [r3, #10]
 801a0b0:	7cb9      	ldrb	r1, [r7, #18]
 801a0b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a0b4:	9202      	str	r2, [sp, #8]
 801a0b6:	7cfa      	ldrb	r2, [r7, #19]
 801a0b8:	9201      	str	r2, [sp, #4]
 801a0ba:	9300      	str	r3, [sp, #0]
 801a0bc:	460b      	mov	r3, r1
 801a0be:	687a      	ldr	r2, [r7, #4]
 801a0c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a0c2:	69f8      	ldr	r0, [r7, #28]
 801a0c4:	f001 fc22 	bl	801b90c <ip4_output_if_src>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	76fb      	strb	r3, [r7, #27]
 801a0cc:	69fa      	ldr	r2, [r7, #28]
 801a0ce:	68bb      	ldr	r3, [r7, #8]
 801a0d0:	429a      	cmp	r2, r3
 801a0d2:	d004      	beq.n	801a0de <udp_sendto_if_src+0x19e>
 801a0d4:	69f8      	ldr	r0, [r7, #28]
 801a0d6:	f7f8 ff97 	bl	8013008 <pbuf_free>
 801a0da:	2300      	movs	r3, #0
 801a0dc:	61fb      	str	r3, [r7, #28]
 801a0de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a0e2:	4618      	mov	r0, r3
 801a0e4:	3720      	adds	r7, #32
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd80      	pop	{r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	08022ba0 	.word	0x08022ba0
 801a0f0:	08022d8c 	.word	0x08022d8c
 801a0f4:	08022bf4 	.word	0x08022bf4
 801a0f8:	08022dac 	.word	0x08022dac
 801a0fc:	08022dcc 	.word	0x08022dcc
 801a100:	08022df0 	.word	0x08022df0
 801a104:	08022e14 	.word	0x08022e14
 801a108:	08022e38 	.word	0x08022e38

0801a10c <udp_bind>:
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b086      	sub	sp, #24
 801a110:	af00      	add	r7, sp, #0
 801a112:	60f8      	str	r0, [r7, #12]
 801a114:	60b9      	str	r1, [r7, #8]
 801a116:	4613      	mov	r3, r2
 801a118:	80fb      	strh	r3, [r7, #6]
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d101      	bne.n	801a124 <udp_bind+0x18>
 801a120:	4b39      	ldr	r3, [pc, #228]	@ (801a208 <udp_bind+0xfc>)
 801a122:	60bb      	str	r3, [r7, #8]
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d109      	bne.n	801a13e <udp_bind+0x32>
 801a12a:	4b38      	ldr	r3, [pc, #224]	@ (801a20c <udp_bind+0x100>)
 801a12c:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a130:	4937      	ldr	r1, [pc, #220]	@ (801a210 <udp_bind+0x104>)
 801a132:	4838      	ldr	r0, [pc, #224]	@ (801a214 <udp_bind+0x108>)
 801a134:	f003 fb28 	bl	801d788 <iprintf>
 801a138:	f06f 030f 	mvn.w	r3, #15
 801a13c:	e060      	b.n	801a200 <udp_bind+0xf4>
 801a13e:	2300      	movs	r3, #0
 801a140:	74fb      	strb	r3, [r7, #19]
 801a142:	4b35      	ldr	r3, [pc, #212]	@ (801a218 <udp_bind+0x10c>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	617b      	str	r3, [r7, #20]
 801a148:	e009      	b.n	801a15e <udp_bind+0x52>
 801a14a:	68fa      	ldr	r2, [r7, #12]
 801a14c:	697b      	ldr	r3, [r7, #20]
 801a14e:	429a      	cmp	r2, r3
 801a150:	d102      	bne.n	801a158 <udp_bind+0x4c>
 801a152:	2301      	movs	r3, #1
 801a154:	74fb      	strb	r3, [r7, #19]
 801a156:	e005      	b.n	801a164 <udp_bind+0x58>
 801a158:	697b      	ldr	r3, [r7, #20]
 801a15a:	68db      	ldr	r3, [r3, #12]
 801a15c:	617b      	str	r3, [r7, #20]
 801a15e:	697b      	ldr	r3, [r7, #20]
 801a160:	2b00      	cmp	r3, #0
 801a162:	d1f2      	bne.n	801a14a <udp_bind+0x3e>
 801a164:	88fb      	ldrh	r3, [r7, #6]
 801a166:	2b00      	cmp	r3, #0
 801a168:	d109      	bne.n	801a17e <udp_bind+0x72>
 801a16a:	f7ff fc35 	bl	80199d8 <udp_new_port>
 801a16e:	4603      	mov	r3, r0
 801a170:	80fb      	strh	r3, [r7, #6]
 801a172:	88fb      	ldrh	r3, [r7, #6]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d12c      	bne.n	801a1d2 <udp_bind+0xc6>
 801a178:	f06f 0307 	mvn.w	r3, #7
 801a17c:	e040      	b.n	801a200 <udp_bind+0xf4>
 801a17e:	4b26      	ldr	r3, [pc, #152]	@ (801a218 <udp_bind+0x10c>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	617b      	str	r3, [r7, #20]
 801a184:	e022      	b.n	801a1cc <udp_bind+0xc0>
 801a186:	68fa      	ldr	r2, [r7, #12]
 801a188:	697b      	ldr	r3, [r7, #20]
 801a18a:	429a      	cmp	r2, r3
 801a18c:	d01b      	beq.n	801a1c6 <udp_bind+0xba>
 801a18e:	697b      	ldr	r3, [r7, #20]
 801a190:	8a5b      	ldrh	r3, [r3, #18]
 801a192:	88fa      	ldrh	r2, [r7, #6]
 801a194:	429a      	cmp	r2, r3
 801a196:	d116      	bne.n	801a1c6 <udp_bind+0xba>
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	681a      	ldr	r2, [r3, #0]
 801a19c:	68bb      	ldr	r3, [r7, #8]
 801a19e:	681b      	ldr	r3, [r3, #0]
 801a1a0:	429a      	cmp	r2, r3
 801a1a2:	d00d      	beq.n	801a1c0 <udp_bind+0xb4>
 801a1a4:	68bb      	ldr	r3, [r7, #8]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d00a      	beq.n	801a1c0 <udp_bind+0xb4>
 801a1aa:	68bb      	ldr	r3, [r7, #8]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d006      	beq.n	801a1c0 <udp_bind+0xb4>
 801a1b2:	697b      	ldr	r3, [r7, #20]
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d003      	beq.n	801a1c0 <udp_bind+0xb4>
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d102      	bne.n	801a1c6 <udp_bind+0xba>
 801a1c0:	f06f 0307 	mvn.w	r3, #7
 801a1c4:	e01c      	b.n	801a200 <udp_bind+0xf4>
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	68db      	ldr	r3, [r3, #12]
 801a1ca:	617b      	str	r3, [r7, #20]
 801a1cc:	697b      	ldr	r3, [r7, #20]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d1d9      	bne.n	801a186 <udp_bind+0x7a>
 801a1d2:	68bb      	ldr	r3, [r7, #8]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d002      	beq.n	801a1de <udp_bind+0xd2>
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	e000      	b.n	801a1e0 <udp_bind+0xd4>
 801a1de:	2300      	movs	r3, #0
 801a1e0:	68fa      	ldr	r2, [r7, #12]
 801a1e2:	6013      	str	r3, [r2, #0]
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	88fa      	ldrh	r2, [r7, #6]
 801a1e8:	825a      	strh	r2, [r3, #18]
 801a1ea:	7cfb      	ldrb	r3, [r7, #19]
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d106      	bne.n	801a1fe <udp_bind+0xf2>
 801a1f0:	4b09      	ldr	r3, [pc, #36]	@ (801a218 <udp_bind+0x10c>)
 801a1f2:	681a      	ldr	r2, [r3, #0]
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	60da      	str	r2, [r3, #12]
 801a1f8:	4a07      	ldr	r2, [pc, #28]	@ (801a218 <udp_bind+0x10c>)
 801a1fa:	68fb      	ldr	r3, [r7, #12]
 801a1fc:	6013      	str	r3, [r2, #0]
 801a1fe:	2300      	movs	r3, #0
 801a200:	4618      	mov	r0, r3
 801a202:	3718      	adds	r7, #24
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	080243c0 	.word	0x080243c0
 801a20c:	08022ba0 	.word	0x08022ba0
 801a210:	08022e68 	.word	0x08022e68
 801a214:	08022bf4 	.word	0x08022bf4
 801a218:	2000f438 	.word	0x2000f438

0801a21c <udp_recv>:
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b084      	sub	sp, #16
 801a220:	af00      	add	r7, sp, #0
 801a222:	60f8      	str	r0, [r7, #12]
 801a224:	60b9      	str	r1, [r7, #8]
 801a226:	607a      	str	r2, [r7, #4]
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d107      	bne.n	801a23e <udp_recv+0x22>
 801a22e:	4b08      	ldr	r3, [pc, #32]	@ (801a250 <udp_recv+0x34>)
 801a230:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a234:	4907      	ldr	r1, [pc, #28]	@ (801a254 <udp_recv+0x38>)
 801a236:	4808      	ldr	r0, [pc, #32]	@ (801a258 <udp_recv+0x3c>)
 801a238:	f003 faa6 	bl	801d788 <iprintf>
 801a23c:	e005      	b.n	801a24a <udp_recv+0x2e>
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	68ba      	ldr	r2, [r7, #8]
 801a242:	619a      	str	r2, [r3, #24]
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	61da      	str	r2, [r3, #28]
 801a24a:	3710      	adds	r7, #16
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	08022ba0 	.word	0x08022ba0
 801a254:	08022ed4 	.word	0x08022ed4
 801a258:	08022bf4 	.word	0x08022bf4

0801a25c <udp_remove>:
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b084      	sub	sp, #16
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d107      	bne.n	801a27a <udp_remove+0x1e>
 801a26a:	4b19      	ldr	r3, [pc, #100]	@ (801a2d0 <udp_remove+0x74>)
 801a26c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801a270:	4918      	ldr	r1, [pc, #96]	@ (801a2d4 <udp_remove+0x78>)
 801a272:	4819      	ldr	r0, [pc, #100]	@ (801a2d8 <udp_remove+0x7c>)
 801a274:	f003 fa88 	bl	801d788 <iprintf>
 801a278:	e026      	b.n	801a2c8 <udp_remove+0x6c>
 801a27a:	4b18      	ldr	r3, [pc, #96]	@ (801a2dc <udp_remove+0x80>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	687a      	ldr	r2, [r7, #4]
 801a280:	429a      	cmp	r2, r3
 801a282:	d105      	bne.n	801a290 <udp_remove+0x34>
 801a284:	4b15      	ldr	r3, [pc, #84]	@ (801a2dc <udp_remove+0x80>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	68db      	ldr	r3, [r3, #12]
 801a28a:	4a14      	ldr	r2, [pc, #80]	@ (801a2dc <udp_remove+0x80>)
 801a28c:	6013      	str	r3, [r2, #0]
 801a28e:	e017      	b.n	801a2c0 <udp_remove+0x64>
 801a290:	4b12      	ldr	r3, [pc, #72]	@ (801a2dc <udp_remove+0x80>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	60fb      	str	r3, [r7, #12]
 801a296:	e010      	b.n	801a2ba <udp_remove+0x5e>
 801a298:	68fb      	ldr	r3, [r7, #12]
 801a29a:	68db      	ldr	r3, [r3, #12]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d009      	beq.n	801a2b4 <udp_remove+0x58>
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	68db      	ldr	r3, [r3, #12]
 801a2a4:	687a      	ldr	r2, [r7, #4]
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d104      	bne.n	801a2b4 <udp_remove+0x58>
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	68da      	ldr	r2, [r3, #12]
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	60da      	str	r2, [r3, #12]
 801a2b2:	e005      	b.n	801a2c0 <udp_remove+0x64>
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	68db      	ldr	r3, [r3, #12]
 801a2b8:	60fb      	str	r3, [r7, #12]
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d1eb      	bne.n	801a298 <udp_remove+0x3c>
 801a2c0:	6879      	ldr	r1, [r7, #4]
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	f7f7 fffc 	bl	80122c0 <memp_free>
 801a2c8:	3710      	adds	r7, #16
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}
 801a2ce:	bf00      	nop
 801a2d0:	08022ba0 	.word	0x08022ba0
 801a2d4:	08022eec 	.word	0x08022eec
 801a2d8:	08022bf4 	.word	0x08022bf4
 801a2dc:	2000f438 	.word	0x2000f438

0801a2e0 <udp_new>:
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	2000      	movs	r0, #0
 801a2e8:	f7f7 ff74 	bl	80121d4 <memp_malloc>
 801a2ec:	6078      	str	r0, [r7, #4]
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d007      	beq.n	801a304 <udp_new+0x24>
 801a2f4:	2220      	movs	r2, #32
 801a2f6:	2100      	movs	r1, #0
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f003 fbd7 	bl	801daac <memset>
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	22ff      	movs	r2, #255	@ 0xff
 801a302:	72da      	strb	r2, [r3, #11]
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	4618      	mov	r0, r3
 801a308:	3708      	adds	r7, #8
 801a30a:	46bd      	mov	sp, r7
 801a30c:	bd80      	pop	{r7, pc}

0801a30e <udp_new_ip_type>:
 801a30e:	b580      	push	{r7, lr}
 801a310:	b084      	sub	sp, #16
 801a312:	af00      	add	r7, sp, #0
 801a314:	4603      	mov	r3, r0
 801a316:	71fb      	strb	r3, [r7, #7]
 801a318:	f7ff ffe2 	bl	801a2e0 <udp_new>
 801a31c:	60f8      	str	r0, [r7, #12]
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	4618      	mov	r0, r3
 801a322:	3710      	adds	r7, #16
 801a324:	46bd      	mov	sp, r7
 801a326:	bd80      	pop	{r7, pc}

0801a328 <udp_netif_ip_addr_changed>:
 801a328:	b480      	push	{r7}
 801a32a:	b085      	sub	sp, #20
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
 801a330:	6039      	str	r1, [r7, #0]
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d01e      	beq.n	801a376 <udp_netif_ip_addr_changed+0x4e>
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d01a      	beq.n	801a376 <udp_netif_ip_addr_changed+0x4e>
 801a340:	683b      	ldr	r3, [r7, #0]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d017      	beq.n	801a376 <udp_netif_ip_addr_changed+0x4e>
 801a346:	683b      	ldr	r3, [r7, #0]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d013      	beq.n	801a376 <udp_netif_ip_addr_changed+0x4e>
 801a34e:	4b0d      	ldr	r3, [pc, #52]	@ (801a384 <udp_netif_ip_addr_changed+0x5c>)
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	60fb      	str	r3, [r7, #12]
 801a354:	e00c      	b.n	801a370 <udp_netif_ip_addr_changed+0x48>
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	681a      	ldr	r2, [r3, #0]
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	429a      	cmp	r2, r3
 801a360:	d103      	bne.n	801a36a <udp_netif_ip_addr_changed+0x42>
 801a362:	683b      	ldr	r3, [r7, #0]
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	601a      	str	r2, [r3, #0]
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	60fb      	str	r3, [r7, #12]
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d1ef      	bne.n	801a356 <udp_netif_ip_addr_changed+0x2e>
 801a376:	bf00      	nop
 801a378:	3714      	adds	r7, #20
 801a37a:	46bd      	mov	sp, r7
 801a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a380:	4770      	bx	lr
 801a382:	bf00      	nop
 801a384:	2000f438 	.word	0x2000f438

0801a388 <etharp_free_entry>:
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	4915      	ldr	r1, [pc, #84]	@ (801a3e8 <etharp_free_entry+0x60>)
 801a392:	687a      	ldr	r2, [r7, #4]
 801a394:	4613      	mov	r3, r2
 801a396:	005b      	lsls	r3, r3, #1
 801a398:	4413      	add	r3, r2
 801a39a:	00db      	lsls	r3, r3, #3
 801a39c:	440b      	add	r3, r1
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d013      	beq.n	801a3cc <etharp_free_entry+0x44>
 801a3a4:	4910      	ldr	r1, [pc, #64]	@ (801a3e8 <etharp_free_entry+0x60>)
 801a3a6:	687a      	ldr	r2, [r7, #4]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	005b      	lsls	r3, r3, #1
 801a3ac:	4413      	add	r3, r2
 801a3ae:	00db      	lsls	r3, r3, #3
 801a3b0:	440b      	add	r3, r1
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7f8 fe27 	bl	8013008 <pbuf_free>
 801a3ba:	490b      	ldr	r1, [pc, #44]	@ (801a3e8 <etharp_free_entry+0x60>)
 801a3bc:	687a      	ldr	r2, [r7, #4]
 801a3be:	4613      	mov	r3, r2
 801a3c0:	005b      	lsls	r3, r3, #1
 801a3c2:	4413      	add	r3, r2
 801a3c4:	00db      	lsls	r3, r3, #3
 801a3c6:	440b      	add	r3, r1
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	601a      	str	r2, [r3, #0]
 801a3cc:	4906      	ldr	r1, [pc, #24]	@ (801a3e8 <etharp_free_entry+0x60>)
 801a3ce:	687a      	ldr	r2, [r7, #4]
 801a3d0:	4613      	mov	r3, r2
 801a3d2:	005b      	lsls	r3, r3, #1
 801a3d4:	4413      	add	r3, r2
 801a3d6:	00db      	lsls	r3, r3, #3
 801a3d8:	440b      	add	r3, r1
 801a3da:	3314      	adds	r3, #20
 801a3dc:	2200      	movs	r2, #0
 801a3de:	701a      	strb	r2, [r3, #0]
 801a3e0:	bf00      	nop
 801a3e2:	3708      	adds	r7, #8
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	bd80      	pop	{r7, pc}
 801a3e8:	2000f43c 	.word	0x2000f43c

0801a3ec <etharp_tmr>:
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b082      	sub	sp, #8
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	607b      	str	r3, [r7, #4]
 801a3f6:	e096      	b.n	801a526 <etharp_tmr+0x13a>
 801a3f8:	494f      	ldr	r1, [pc, #316]	@ (801a538 <etharp_tmr+0x14c>)
 801a3fa:	687a      	ldr	r2, [r7, #4]
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	005b      	lsls	r3, r3, #1
 801a400:	4413      	add	r3, r2
 801a402:	00db      	lsls	r3, r3, #3
 801a404:	440b      	add	r3, r1
 801a406:	3314      	adds	r3, #20
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	70fb      	strb	r3, [r7, #3]
 801a40c:	78fb      	ldrb	r3, [r7, #3]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	f000 8086 	beq.w	801a520 <etharp_tmr+0x134>
 801a414:	4948      	ldr	r1, [pc, #288]	@ (801a538 <etharp_tmr+0x14c>)
 801a416:	687a      	ldr	r2, [r7, #4]
 801a418:	4613      	mov	r3, r2
 801a41a:	005b      	lsls	r3, r3, #1
 801a41c:	4413      	add	r3, r2
 801a41e:	00db      	lsls	r3, r3, #3
 801a420:	440b      	add	r3, r1
 801a422:	3312      	adds	r3, #18
 801a424:	881b      	ldrh	r3, [r3, #0]
 801a426:	3301      	adds	r3, #1
 801a428:	b298      	uxth	r0, r3
 801a42a:	4943      	ldr	r1, [pc, #268]	@ (801a538 <etharp_tmr+0x14c>)
 801a42c:	687a      	ldr	r2, [r7, #4]
 801a42e:	4613      	mov	r3, r2
 801a430:	005b      	lsls	r3, r3, #1
 801a432:	4413      	add	r3, r2
 801a434:	00db      	lsls	r3, r3, #3
 801a436:	440b      	add	r3, r1
 801a438:	3312      	adds	r3, #18
 801a43a:	4602      	mov	r2, r0
 801a43c:	801a      	strh	r2, [r3, #0]
 801a43e:	493e      	ldr	r1, [pc, #248]	@ (801a538 <etharp_tmr+0x14c>)
 801a440:	687a      	ldr	r2, [r7, #4]
 801a442:	4613      	mov	r3, r2
 801a444:	005b      	lsls	r3, r3, #1
 801a446:	4413      	add	r3, r2
 801a448:	00db      	lsls	r3, r3, #3
 801a44a:	440b      	add	r3, r1
 801a44c:	3312      	adds	r3, #18
 801a44e:	881b      	ldrh	r3, [r3, #0]
 801a450:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a454:	d215      	bcs.n	801a482 <etharp_tmr+0x96>
 801a456:	4938      	ldr	r1, [pc, #224]	@ (801a538 <etharp_tmr+0x14c>)
 801a458:	687a      	ldr	r2, [r7, #4]
 801a45a:	4613      	mov	r3, r2
 801a45c:	005b      	lsls	r3, r3, #1
 801a45e:	4413      	add	r3, r2
 801a460:	00db      	lsls	r3, r3, #3
 801a462:	440b      	add	r3, r1
 801a464:	3314      	adds	r3, #20
 801a466:	781b      	ldrb	r3, [r3, #0]
 801a468:	2b01      	cmp	r3, #1
 801a46a:	d10e      	bne.n	801a48a <etharp_tmr+0x9e>
 801a46c:	4932      	ldr	r1, [pc, #200]	@ (801a538 <etharp_tmr+0x14c>)
 801a46e:	687a      	ldr	r2, [r7, #4]
 801a470:	4613      	mov	r3, r2
 801a472:	005b      	lsls	r3, r3, #1
 801a474:	4413      	add	r3, r2
 801a476:	00db      	lsls	r3, r3, #3
 801a478:	440b      	add	r3, r1
 801a47a:	3312      	adds	r3, #18
 801a47c:	881b      	ldrh	r3, [r3, #0]
 801a47e:	2b04      	cmp	r3, #4
 801a480:	d903      	bls.n	801a48a <etharp_tmr+0x9e>
 801a482:	6878      	ldr	r0, [r7, #4]
 801a484:	f7ff ff80 	bl	801a388 <etharp_free_entry>
 801a488:	e04a      	b.n	801a520 <etharp_tmr+0x134>
 801a48a:	492b      	ldr	r1, [pc, #172]	@ (801a538 <etharp_tmr+0x14c>)
 801a48c:	687a      	ldr	r2, [r7, #4]
 801a48e:	4613      	mov	r3, r2
 801a490:	005b      	lsls	r3, r3, #1
 801a492:	4413      	add	r3, r2
 801a494:	00db      	lsls	r3, r3, #3
 801a496:	440b      	add	r3, r1
 801a498:	3314      	adds	r3, #20
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	2b03      	cmp	r3, #3
 801a49e:	d10a      	bne.n	801a4b6 <etharp_tmr+0xca>
 801a4a0:	4925      	ldr	r1, [pc, #148]	@ (801a538 <etharp_tmr+0x14c>)
 801a4a2:	687a      	ldr	r2, [r7, #4]
 801a4a4:	4613      	mov	r3, r2
 801a4a6:	005b      	lsls	r3, r3, #1
 801a4a8:	4413      	add	r3, r2
 801a4aa:	00db      	lsls	r3, r3, #3
 801a4ac:	440b      	add	r3, r1
 801a4ae:	3314      	adds	r3, #20
 801a4b0:	2204      	movs	r2, #4
 801a4b2:	701a      	strb	r2, [r3, #0]
 801a4b4:	e034      	b.n	801a520 <etharp_tmr+0x134>
 801a4b6:	4920      	ldr	r1, [pc, #128]	@ (801a538 <etharp_tmr+0x14c>)
 801a4b8:	687a      	ldr	r2, [r7, #4]
 801a4ba:	4613      	mov	r3, r2
 801a4bc:	005b      	lsls	r3, r3, #1
 801a4be:	4413      	add	r3, r2
 801a4c0:	00db      	lsls	r3, r3, #3
 801a4c2:	440b      	add	r3, r1
 801a4c4:	3314      	adds	r3, #20
 801a4c6:	781b      	ldrb	r3, [r3, #0]
 801a4c8:	2b04      	cmp	r3, #4
 801a4ca:	d10a      	bne.n	801a4e2 <etharp_tmr+0xf6>
 801a4cc:	491a      	ldr	r1, [pc, #104]	@ (801a538 <etharp_tmr+0x14c>)
 801a4ce:	687a      	ldr	r2, [r7, #4]
 801a4d0:	4613      	mov	r3, r2
 801a4d2:	005b      	lsls	r3, r3, #1
 801a4d4:	4413      	add	r3, r2
 801a4d6:	00db      	lsls	r3, r3, #3
 801a4d8:	440b      	add	r3, r1
 801a4da:	3314      	adds	r3, #20
 801a4dc:	2202      	movs	r2, #2
 801a4de:	701a      	strb	r2, [r3, #0]
 801a4e0:	e01e      	b.n	801a520 <etharp_tmr+0x134>
 801a4e2:	4915      	ldr	r1, [pc, #84]	@ (801a538 <etharp_tmr+0x14c>)
 801a4e4:	687a      	ldr	r2, [r7, #4]
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	440b      	add	r3, r1
 801a4f0:	3314      	adds	r3, #20
 801a4f2:	781b      	ldrb	r3, [r3, #0]
 801a4f4:	2b01      	cmp	r3, #1
 801a4f6:	d113      	bne.n	801a520 <etharp_tmr+0x134>
 801a4f8:	490f      	ldr	r1, [pc, #60]	@ (801a538 <etharp_tmr+0x14c>)
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	4613      	mov	r3, r2
 801a4fe:	005b      	lsls	r3, r3, #1
 801a500:	4413      	add	r3, r2
 801a502:	00db      	lsls	r3, r3, #3
 801a504:	440b      	add	r3, r1
 801a506:	3308      	adds	r3, #8
 801a508:	6818      	ldr	r0, [r3, #0]
 801a50a:	687a      	ldr	r2, [r7, #4]
 801a50c:	4613      	mov	r3, r2
 801a50e:	005b      	lsls	r3, r3, #1
 801a510:	4413      	add	r3, r2
 801a512:	00db      	lsls	r3, r3, #3
 801a514:	4a08      	ldr	r2, [pc, #32]	@ (801a538 <etharp_tmr+0x14c>)
 801a516:	4413      	add	r3, r2
 801a518:	3304      	adds	r3, #4
 801a51a:	4619      	mov	r1, r3
 801a51c:	f000 fe6e 	bl	801b1fc <etharp_request>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	3301      	adds	r3, #1
 801a524:	607b      	str	r3, [r7, #4]
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	2b09      	cmp	r3, #9
 801a52a:	f77f af65 	ble.w	801a3f8 <etharp_tmr+0xc>
 801a52e:	bf00      	nop
 801a530:	bf00      	nop
 801a532:	3708      	adds	r7, #8
 801a534:	46bd      	mov	sp, r7
 801a536:	bd80      	pop	{r7, pc}
 801a538:	2000f43c 	.word	0x2000f43c

0801a53c <etharp_find_entry>:
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b08a      	sub	sp, #40	@ 0x28
 801a540:	af00      	add	r7, sp, #0
 801a542:	60f8      	str	r0, [r7, #12]
 801a544:	460b      	mov	r3, r1
 801a546:	607a      	str	r2, [r7, #4]
 801a548:	72fb      	strb	r3, [r7, #11]
 801a54a:	230a      	movs	r3, #10
 801a54c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a54e:	230a      	movs	r3, #10
 801a550:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801a552:	230a      	movs	r3, #10
 801a554:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a556:	2300      	movs	r3, #0
 801a558:	843b      	strh	r3, [r7, #32]
 801a55a:	230a      	movs	r3, #10
 801a55c:	83fb      	strh	r3, [r7, #30]
 801a55e:	2300      	movs	r3, #0
 801a560:	83bb      	strh	r3, [r7, #28]
 801a562:	2300      	movs	r3, #0
 801a564:	837b      	strh	r3, [r7, #26]
 801a566:	2300      	movs	r3, #0
 801a568:	833b      	strh	r3, [r7, #24]
 801a56a:	2300      	movs	r3, #0
 801a56c:	843b      	strh	r3, [r7, #32]
 801a56e:	e0ae      	b.n	801a6ce <etharp_find_entry+0x192>
 801a570:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a574:	49a6      	ldr	r1, [pc, #664]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a576:	4613      	mov	r3, r2
 801a578:	005b      	lsls	r3, r3, #1
 801a57a:	4413      	add	r3, r2
 801a57c:	00db      	lsls	r3, r3, #3
 801a57e:	440b      	add	r3, r1
 801a580:	3314      	adds	r3, #20
 801a582:	781b      	ldrb	r3, [r3, #0]
 801a584:	75fb      	strb	r3, [r7, #23]
 801a586:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a58a:	2b0a      	cmp	r3, #10
 801a58c:	d105      	bne.n	801a59a <etharp_find_entry+0x5e>
 801a58e:	7dfb      	ldrb	r3, [r7, #23]
 801a590:	2b00      	cmp	r3, #0
 801a592:	d102      	bne.n	801a59a <etharp_find_entry+0x5e>
 801a594:	8c3b      	ldrh	r3, [r7, #32]
 801a596:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a598:	e095      	b.n	801a6c6 <etharp_find_entry+0x18a>
 801a59a:	7dfb      	ldrb	r3, [r7, #23]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	f000 8092 	beq.w	801a6c6 <etharp_find_entry+0x18a>
 801a5a2:	7dfb      	ldrb	r3, [r7, #23]
 801a5a4:	2b01      	cmp	r3, #1
 801a5a6:	d009      	beq.n	801a5bc <etharp_find_entry+0x80>
 801a5a8:	7dfb      	ldrb	r3, [r7, #23]
 801a5aa:	2b01      	cmp	r3, #1
 801a5ac:	d806      	bhi.n	801a5bc <etharp_find_entry+0x80>
 801a5ae:	4b99      	ldr	r3, [pc, #612]	@ (801a814 <etharp_find_entry+0x2d8>)
 801a5b0:	f240 1223 	movw	r2, #291	@ 0x123
 801a5b4:	4998      	ldr	r1, [pc, #608]	@ (801a818 <etharp_find_entry+0x2dc>)
 801a5b6:	4899      	ldr	r0, [pc, #612]	@ (801a81c <etharp_find_entry+0x2e0>)
 801a5b8:	f003 f8e6 	bl	801d788 <iprintf>
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d020      	beq.n	801a604 <etharp_find_entry+0xc8>
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	6819      	ldr	r1, [r3, #0]
 801a5c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5ca:	4891      	ldr	r0, [pc, #580]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a5cc:	4613      	mov	r3, r2
 801a5ce:	005b      	lsls	r3, r3, #1
 801a5d0:	4413      	add	r3, r2
 801a5d2:	00db      	lsls	r3, r3, #3
 801a5d4:	4403      	add	r3, r0
 801a5d6:	3304      	adds	r3, #4
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	4299      	cmp	r1, r3
 801a5dc:	d112      	bne.n	801a604 <etharp_find_entry+0xc8>
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d00c      	beq.n	801a5fe <etharp_find_entry+0xc2>
 801a5e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5e8:	4989      	ldr	r1, [pc, #548]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a5ea:	4613      	mov	r3, r2
 801a5ec:	005b      	lsls	r3, r3, #1
 801a5ee:	4413      	add	r3, r2
 801a5f0:	00db      	lsls	r3, r3, #3
 801a5f2:	440b      	add	r3, r1
 801a5f4:	3308      	adds	r3, #8
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	687a      	ldr	r2, [r7, #4]
 801a5fa:	429a      	cmp	r2, r3
 801a5fc:	d102      	bne.n	801a604 <etharp_find_entry+0xc8>
 801a5fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a602:	e100      	b.n	801a806 <etharp_find_entry+0x2ca>
 801a604:	7dfb      	ldrb	r3, [r7, #23]
 801a606:	2b01      	cmp	r3, #1
 801a608:	d140      	bne.n	801a68c <etharp_find_entry+0x150>
 801a60a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a60e:	4980      	ldr	r1, [pc, #512]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a610:	4613      	mov	r3, r2
 801a612:	005b      	lsls	r3, r3, #1
 801a614:	4413      	add	r3, r2
 801a616:	00db      	lsls	r3, r3, #3
 801a618:	440b      	add	r3, r1
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d01a      	beq.n	801a656 <etharp_find_entry+0x11a>
 801a620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a624:	497a      	ldr	r1, [pc, #488]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a626:	4613      	mov	r3, r2
 801a628:	005b      	lsls	r3, r3, #1
 801a62a:	4413      	add	r3, r2
 801a62c:	00db      	lsls	r3, r3, #3
 801a62e:	440b      	add	r3, r1
 801a630:	3312      	adds	r3, #18
 801a632:	881b      	ldrh	r3, [r3, #0]
 801a634:	8bba      	ldrh	r2, [r7, #28]
 801a636:	429a      	cmp	r2, r3
 801a638:	d845      	bhi.n	801a6c6 <etharp_find_entry+0x18a>
 801a63a:	8c3b      	ldrh	r3, [r7, #32]
 801a63c:	83fb      	strh	r3, [r7, #30]
 801a63e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a642:	4973      	ldr	r1, [pc, #460]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a644:	4613      	mov	r3, r2
 801a646:	005b      	lsls	r3, r3, #1
 801a648:	4413      	add	r3, r2
 801a64a:	00db      	lsls	r3, r3, #3
 801a64c:	440b      	add	r3, r1
 801a64e:	3312      	adds	r3, #18
 801a650:	881b      	ldrh	r3, [r3, #0]
 801a652:	83bb      	strh	r3, [r7, #28]
 801a654:	e037      	b.n	801a6c6 <etharp_find_entry+0x18a>
 801a656:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a65a:	496d      	ldr	r1, [pc, #436]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a65c:	4613      	mov	r3, r2
 801a65e:	005b      	lsls	r3, r3, #1
 801a660:	4413      	add	r3, r2
 801a662:	00db      	lsls	r3, r3, #3
 801a664:	440b      	add	r3, r1
 801a666:	3312      	adds	r3, #18
 801a668:	881b      	ldrh	r3, [r3, #0]
 801a66a:	8b7a      	ldrh	r2, [r7, #26]
 801a66c:	429a      	cmp	r2, r3
 801a66e:	d82a      	bhi.n	801a6c6 <etharp_find_entry+0x18a>
 801a670:	8c3b      	ldrh	r3, [r7, #32]
 801a672:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a674:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a678:	4965      	ldr	r1, [pc, #404]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a67a:	4613      	mov	r3, r2
 801a67c:	005b      	lsls	r3, r3, #1
 801a67e:	4413      	add	r3, r2
 801a680:	00db      	lsls	r3, r3, #3
 801a682:	440b      	add	r3, r1
 801a684:	3312      	adds	r3, #18
 801a686:	881b      	ldrh	r3, [r3, #0]
 801a688:	837b      	strh	r3, [r7, #26]
 801a68a:	e01c      	b.n	801a6c6 <etharp_find_entry+0x18a>
 801a68c:	7dfb      	ldrb	r3, [r7, #23]
 801a68e:	2b01      	cmp	r3, #1
 801a690:	d919      	bls.n	801a6c6 <etharp_find_entry+0x18a>
 801a692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a696:	495e      	ldr	r1, [pc, #376]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a698:	4613      	mov	r3, r2
 801a69a:	005b      	lsls	r3, r3, #1
 801a69c:	4413      	add	r3, r2
 801a69e:	00db      	lsls	r3, r3, #3
 801a6a0:	440b      	add	r3, r1
 801a6a2:	3312      	adds	r3, #18
 801a6a4:	881b      	ldrh	r3, [r3, #0]
 801a6a6:	8b3a      	ldrh	r2, [r7, #24]
 801a6a8:	429a      	cmp	r2, r3
 801a6aa:	d80c      	bhi.n	801a6c6 <etharp_find_entry+0x18a>
 801a6ac:	8c3b      	ldrh	r3, [r7, #32]
 801a6ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801a6b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6b4:	4956      	ldr	r1, [pc, #344]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a6b6:	4613      	mov	r3, r2
 801a6b8:	005b      	lsls	r3, r3, #1
 801a6ba:	4413      	add	r3, r2
 801a6bc:	00db      	lsls	r3, r3, #3
 801a6be:	440b      	add	r3, r1
 801a6c0:	3312      	adds	r3, #18
 801a6c2:	881b      	ldrh	r3, [r3, #0]
 801a6c4:	833b      	strh	r3, [r7, #24]
 801a6c6:	8c3b      	ldrh	r3, [r7, #32]
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	b29b      	uxth	r3, r3
 801a6cc:	843b      	strh	r3, [r7, #32]
 801a6ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a6d2:	2b09      	cmp	r3, #9
 801a6d4:	f77f af4c 	ble.w	801a570 <etharp_find_entry+0x34>
 801a6d8:	7afb      	ldrb	r3, [r7, #11]
 801a6da:	f003 0302 	and.w	r3, r3, #2
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d108      	bne.n	801a6f4 <etharp_find_entry+0x1b8>
 801a6e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a6e6:	2b0a      	cmp	r3, #10
 801a6e8:	d107      	bne.n	801a6fa <etharp_find_entry+0x1be>
 801a6ea:	7afb      	ldrb	r3, [r7, #11]
 801a6ec:	f003 0301 	and.w	r3, r3, #1
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d102      	bne.n	801a6fa <etharp_find_entry+0x1be>
 801a6f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a6f8:	e085      	b.n	801a806 <etharp_find_entry+0x2ca>
 801a6fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a6fe:	2b09      	cmp	r3, #9
 801a700:	dc02      	bgt.n	801a708 <etharp_find_entry+0x1cc>
 801a702:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a704:	843b      	strh	r3, [r7, #32]
 801a706:	e039      	b.n	801a77c <etharp_find_entry+0x240>
 801a708:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a70c:	2b09      	cmp	r3, #9
 801a70e:	dc14      	bgt.n	801a73a <etharp_find_entry+0x1fe>
 801a710:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a712:	843b      	strh	r3, [r7, #32]
 801a714:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a718:	493d      	ldr	r1, [pc, #244]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a71a:	4613      	mov	r3, r2
 801a71c:	005b      	lsls	r3, r3, #1
 801a71e:	4413      	add	r3, r2
 801a720:	00db      	lsls	r3, r3, #3
 801a722:	440b      	add	r3, r1
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d018      	beq.n	801a75c <etharp_find_entry+0x220>
 801a72a:	4b3a      	ldr	r3, [pc, #232]	@ (801a814 <etharp_find_entry+0x2d8>)
 801a72c:	f240 126d 	movw	r2, #365	@ 0x16d
 801a730:	493b      	ldr	r1, [pc, #236]	@ (801a820 <etharp_find_entry+0x2e4>)
 801a732:	483a      	ldr	r0, [pc, #232]	@ (801a81c <etharp_find_entry+0x2e0>)
 801a734:	f003 f828 	bl	801d788 <iprintf>
 801a738:	e010      	b.n	801a75c <etharp_find_entry+0x220>
 801a73a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a73e:	2b09      	cmp	r3, #9
 801a740:	dc02      	bgt.n	801a748 <etharp_find_entry+0x20c>
 801a742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a744:	843b      	strh	r3, [r7, #32]
 801a746:	e009      	b.n	801a75c <etharp_find_entry+0x220>
 801a748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a74c:	2b09      	cmp	r3, #9
 801a74e:	dc02      	bgt.n	801a756 <etharp_find_entry+0x21a>
 801a750:	8bfb      	ldrh	r3, [r7, #30]
 801a752:	843b      	strh	r3, [r7, #32]
 801a754:	e002      	b.n	801a75c <etharp_find_entry+0x220>
 801a756:	f04f 33ff 	mov.w	r3, #4294967295
 801a75a:	e054      	b.n	801a806 <etharp_find_entry+0x2ca>
 801a75c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a760:	2b09      	cmp	r3, #9
 801a762:	dd06      	ble.n	801a772 <etharp_find_entry+0x236>
 801a764:	4b2b      	ldr	r3, [pc, #172]	@ (801a814 <etharp_find_entry+0x2d8>)
 801a766:	f240 127f 	movw	r2, #383	@ 0x17f
 801a76a:	492e      	ldr	r1, [pc, #184]	@ (801a824 <etharp_find_entry+0x2e8>)
 801a76c:	482b      	ldr	r0, [pc, #172]	@ (801a81c <etharp_find_entry+0x2e0>)
 801a76e:	f003 f80b 	bl	801d788 <iprintf>
 801a772:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a776:	4618      	mov	r0, r3
 801a778:	f7ff fe06 	bl	801a388 <etharp_free_entry>
 801a77c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a780:	2b09      	cmp	r3, #9
 801a782:	dd06      	ble.n	801a792 <etharp_find_entry+0x256>
 801a784:	4b23      	ldr	r3, [pc, #140]	@ (801a814 <etharp_find_entry+0x2d8>)
 801a786:	f240 1283 	movw	r2, #387	@ 0x183
 801a78a:	4926      	ldr	r1, [pc, #152]	@ (801a824 <etharp_find_entry+0x2e8>)
 801a78c:	4823      	ldr	r0, [pc, #140]	@ (801a81c <etharp_find_entry+0x2e0>)
 801a78e:	f002 fffb 	bl	801d788 <iprintf>
 801a792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a796:	491e      	ldr	r1, [pc, #120]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a798:	4613      	mov	r3, r2
 801a79a:	005b      	lsls	r3, r3, #1
 801a79c:	4413      	add	r3, r2
 801a79e:	00db      	lsls	r3, r3, #3
 801a7a0:	440b      	add	r3, r1
 801a7a2:	3314      	adds	r3, #20
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d006      	beq.n	801a7b8 <etharp_find_entry+0x27c>
 801a7aa:	4b1a      	ldr	r3, [pc, #104]	@ (801a814 <etharp_find_entry+0x2d8>)
 801a7ac:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a7b0:	491d      	ldr	r1, [pc, #116]	@ (801a828 <etharp_find_entry+0x2ec>)
 801a7b2:	481a      	ldr	r0, [pc, #104]	@ (801a81c <etharp_find_entry+0x2e0>)
 801a7b4:	f002 ffe8 	bl	801d788 <iprintf>
 801a7b8:	68fb      	ldr	r3, [r7, #12]
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	d00b      	beq.n	801a7d6 <etharp_find_entry+0x29a>
 801a7be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	6819      	ldr	r1, [r3, #0]
 801a7c6:	4812      	ldr	r0, [pc, #72]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a7c8:	4613      	mov	r3, r2
 801a7ca:	005b      	lsls	r3, r3, #1
 801a7cc:	4413      	add	r3, r2
 801a7ce:	00db      	lsls	r3, r3, #3
 801a7d0:	4403      	add	r3, r0
 801a7d2:	3304      	adds	r3, #4
 801a7d4:	6019      	str	r1, [r3, #0]
 801a7d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7da:	490d      	ldr	r1, [pc, #52]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a7dc:	4613      	mov	r3, r2
 801a7de:	005b      	lsls	r3, r3, #1
 801a7e0:	4413      	add	r3, r2
 801a7e2:	00db      	lsls	r3, r3, #3
 801a7e4:	440b      	add	r3, r1
 801a7e6:	3312      	adds	r3, #18
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	801a      	strh	r2, [r3, #0]
 801a7ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7f0:	4907      	ldr	r1, [pc, #28]	@ (801a810 <etharp_find_entry+0x2d4>)
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	005b      	lsls	r3, r3, #1
 801a7f6:	4413      	add	r3, r2
 801a7f8:	00db      	lsls	r3, r3, #3
 801a7fa:	440b      	add	r3, r1
 801a7fc:	3308      	adds	r3, #8
 801a7fe:	687a      	ldr	r2, [r7, #4]
 801a800:	601a      	str	r2, [r3, #0]
 801a802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a806:	4618      	mov	r0, r3
 801a808:	3728      	adds	r7, #40	@ 0x28
 801a80a:	46bd      	mov	sp, r7
 801a80c:	bd80      	pop	{r7, pc}
 801a80e:	bf00      	nop
 801a810:	2000f43c 	.word	0x2000f43c
 801a814:	08022f04 	.word	0x08022f04
 801a818:	08022f3c 	.word	0x08022f3c
 801a81c:	08022f7c 	.word	0x08022f7c
 801a820:	08022fa4 	.word	0x08022fa4
 801a824:	08022fbc 	.word	0x08022fbc
 801a828:	08022fd0 	.word	0x08022fd0

0801a82c <etharp_update_arp_entry>:
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b088      	sub	sp, #32
 801a830:	af02      	add	r7, sp, #8
 801a832:	60f8      	str	r0, [r7, #12]
 801a834:	60b9      	str	r1, [r7, #8]
 801a836:	607a      	str	r2, [r7, #4]
 801a838:	70fb      	strb	r3, [r7, #3]
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a840:	2b06      	cmp	r3, #6
 801a842:	d006      	beq.n	801a852 <etharp_update_arp_entry+0x26>
 801a844:	4b48      	ldr	r3, [pc, #288]	@ (801a968 <etharp_update_arp_entry+0x13c>)
 801a846:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a84a:	4948      	ldr	r1, [pc, #288]	@ (801a96c <etharp_update_arp_entry+0x140>)
 801a84c:	4848      	ldr	r0, [pc, #288]	@ (801a970 <etharp_update_arp_entry+0x144>)
 801a84e:	f002 ff9b 	bl	801d788 <iprintf>
 801a852:	68bb      	ldr	r3, [r7, #8]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d012      	beq.n	801a87e <etharp_update_arp_entry+0x52>
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	681b      	ldr	r3, [r3, #0]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d00e      	beq.n	801a87e <etharp_update_arp_entry+0x52>
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	68f9      	ldr	r1, [r7, #12]
 801a866:	4618      	mov	r0, r3
 801a868:	f001 f8fe 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801a86c:	4603      	mov	r3, r0
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d105      	bne.n	801a87e <etharp_update_arp_entry+0x52>
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a87a:	2be0      	cmp	r3, #224	@ 0xe0
 801a87c:	d102      	bne.n	801a884 <etharp_update_arp_entry+0x58>
 801a87e:	f06f 030f 	mvn.w	r3, #15
 801a882:	e06c      	b.n	801a95e <etharp_update_arp_entry+0x132>
 801a884:	78fb      	ldrb	r3, [r7, #3]
 801a886:	68fa      	ldr	r2, [r7, #12]
 801a888:	4619      	mov	r1, r3
 801a88a:	68b8      	ldr	r0, [r7, #8]
 801a88c:	f7ff fe56 	bl	801a53c <etharp_find_entry>
 801a890:	4603      	mov	r3, r0
 801a892:	82fb      	strh	r3, [r7, #22]
 801a894:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	da02      	bge.n	801a8a2 <etharp_update_arp_entry+0x76>
 801a89c:	8afb      	ldrh	r3, [r7, #22]
 801a89e:	b25b      	sxtb	r3, r3
 801a8a0:	e05d      	b.n	801a95e <etharp_update_arp_entry+0x132>
 801a8a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a8a6:	4933      	ldr	r1, [pc, #204]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a8a8:	4613      	mov	r3, r2
 801a8aa:	005b      	lsls	r3, r3, #1
 801a8ac:	4413      	add	r3, r2
 801a8ae:	00db      	lsls	r3, r3, #3
 801a8b0:	440b      	add	r3, r1
 801a8b2:	3314      	adds	r3, #20
 801a8b4:	2202      	movs	r2, #2
 801a8b6:	701a      	strb	r2, [r3, #0]
 801a8b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a8bc:	492d      	ldr	r1, [pc, #180]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a8be:	4613      	mov	r3, r2
 801a8c0:	005b      	lsls	r3, r3, #1
 801a8c2:	4413      	add	r3, r2
 801a8c4:	00db      	lsls	r3, r3, #3
 801a8c6:	440b      	add	r3, r1
 801a8c8:	3308      	adds	r3, #8
 801a8ca:	68fa      	ldr	r2, [r7, #12]
 801a8cc:	601a      	str	r2, [r3, #0]
 801a8ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a8d2:	4613      	mov	r3, r2
 801a8d4:	005b      	lsls	r3, r3, #1
 801a8d6:	4413      	add	r3, r2
 801a8d8:	00db      	lsls	r3, r3, #3
 801a8da:	3308      	adds	r3, #8
 801a8dc:	4a25      	ldr	r2, [pc, #148]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a8de:	4413      	add	r3, r2
 801a8e0:	3304      	adds	r3, #4
 801a8e2:	2206      	movs	r2, #6
 801a8e4:	6879      	ldr	r1, [r7, #4]
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f003 f9cf 	bl	801dc8a <memcpy>
 801a8ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a8f0:	4920      	ldr	r1, [pc, #128]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a8f2:	4613      	mov	r3, r2
 801a8f4:	005b      	lsls	r3, r3, #1
 801a8f6:	4413      	add	r3, r2
 801a8f8:	00db      	lsls	r3, r3, #3
 801a8fa:	440b      	add	r3, r1
 801a8fc:	3312      	adds	r3, #18
 801a8fe:	2200      	movs	r2, #0
 801a900:	801a      	strh	r2, [r3, #0]
 801a902:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a906:	491b      	ldr	r1, [pc, #108]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a908:	4613      	mov	r3, r2
 801a90a:	005b      	lsls	r3, r3, #1
 801a90c:	4413      	add	r3, r2
 801a90e:	00db      	lsls	r3, r3, #3
 801a910:	440b      	add	r3, r1
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	2b00      	cmp	r3, #0
 801a916:	d021      	beq.n	801a95c <etharp_update_arp_entry+0x130>
 801a918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a91c:	4915      	ldr	r1, [pc, #84]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a91e:	4613      	mov	r3, r2
 801a920:	005b      	lsls	r3, r3, #1
 801a922:	4413      	add	r3, r2
 801a924:	00db      	lsls	r3, r3, #3
 801a926:	440b      	add	r3, r1
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	613b      	str	r3, [r7, #16]
 801a92c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a930:	4910      	ldr	r1, [pc, #64]	@ (801a974 <etharp_update_arp_entry+0x148>)
 801a932:	4613      	mov	r3, r2
 801a934:	005b      	lsls	r3, r3, #1
 801a936:	4413      	add	r3, r2
 801a938:	00db      	lsls	r3, r3, #3
 801a93a:	440b      	add	r3, r1
 801a93c:	2200      	movs	r2, #0
 801a93e:	601a      	str	r2, [r3, #0]
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a946:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a94a:	9300      	str	r3, [sp, #0]
 801a94c:	687b      	ldr	r3, [r7, #4]
 801a94e:	6939      	ldr	r1, [r7, #16]
 801a950:	68f8      	ldr	r0, [r7, #12]
 801a952:	f001 ff97 	bl	801c884 <ethernet_output>
 801a956:	6938      	ldr	r0, [r7, #16]
 801a958:	f7f8 fb56 	bl	8013008 <pbuf_free>
 801a95c:	2300      	movs	r3, #0
 801a95e:	4618      	mov	r0, r3
 801a960:	3718      	adds	r7, #24
 801a962:	46bd      	mov	sp, r7
 801a964:	bd80      	pop	{r7, pc}
 801a966:	bf00      	nop
 801a968:	08022f04 	.word	0x08022f04
 801a96c:	08022ffc 	.word	0x08022ffc
 801a970:	08022f7c 	.word	0x08022f7c
 801a974:	2000f43c 	.word	0x2000f43c

0801a978 <etharp_cleanup_netif>:
 801a978:	b580      	push	{r7, lr}
 801a97a:	b084      	sub	sp, #16
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
 801a980:	2300      	movs	r3, #0
 801a982:	60fb      	str	r3, [r7, #12]
 801a984:	e01e      	b.n	801a9c4 <etharp_cleanup_netif+0x4c>
 801a986:	4913      	ldr	r1, [pc, #76]	@ (801a9d4 <etharp_cleanup_netif+0x5c>)
 801a988:	68fa      	ldr	r2, [r7, #12]
 801a98a:	4613      	mov	r3, r2
 801a98c:	005b      	lsls	r3, r3, #1
 801a98e:	4413      	add	r3, r2
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	440b      	add	r3, r1
 801a994:	3314      	adds	r3, #20
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	72fb      	strb	r3, [r7, #11]
 801a99a:	7afb      	ldrb	r3, [r7, #11]
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d00e      	beq.n	801a9be <etharp_cleanup_netif+0x46>
 801a9a0:	490c      	ldr	r1, [pc, #48]	@ (801a9d4 <etharp_cleanup_netif+0x5c>)
 801a9a2:	68fa      	ldr	r2, [r7, #12]
 801a9a4:	4613      	mov	r3, r2
 801a9a6:	005b      	lsls	r3, r3, #1
 801a9a8:	4413      	add	r3, r2
 801a9aa:	00db      	lsls	r3, r3, #3
 801a9ac:	440b      	add	r3, r1
 801a9ae:	3308      	adds	r3, #8
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	687a      	ldr	r2, [r7, #4]
 801a9b4:	429a      	cmp	r2, r3
 801a9b6:	d102      	bne.n	801a9be <etharp_cleanup_netif+0x46>
 801a9b8:	68f8      	ldr	r0, [r7, #12]
 801a9ba:	f7ff fce5 	bl	801a388 <etharp_free_entry>
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	60fb      	str	r3, [r7, #12]
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	2b09      	cmp	r3, #9
 801a9c8:	dddd      	ble.n	801a986 <etharp_cleanup_netif+0xe>
 801a9ca:	bf00      	nop
 801a9cc:	bf00      	nop
 801a9ce:	3710      	adds	r7, #16
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}
 801a9d4:	2000f43c 	.word	0x2000f43c

0801a9d8 <etharp_input>:
 801a9d8:	b5b0      	push	{r4, r5, r7, lr}
 801a9da:	b08a      	sub	sp, #40	@ 0x28
 801a9dc:	af04      	add	r7, sp, #16
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d107      	bne.n	801a9f8 <etharp_input+0x20>
 801a9e8:	4b3d      	ldr	r3, [pc, #244]	@ (801aae0 <etharp_input+0x108>)
 801a9ea:	f240 228a 	movw	r2, #650	@ 0x28a
 801a9ee:	493d      	ldr	r1, [pc, #244]	@ (801aae4 <etharp_input+0x10c>)
 801a9f0:	483d      	ldr	r0, [pc, #244]	@ (801aae8 <etharp_input+0x110>)
 801a9f2:	f002 fec9 	bl	801d788 <iprintf>
 801a9f6:	e06f      	b.n	801aad8 <etharp_input+0x100>
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	685b      	ldr	r3, [r3, #4]
 801a9fc:	613b      	str	r3, [r7, #16]
 801a9fe:	693b      	ldr	r3, [r7, #16]
 801aa00:	881b      	ldrh	r3, [r3, #0]
 801aa02:	b29b      	uxth	r3, r3
 801aa04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aa08:	d10c      	bne.n	801aa24 <etharp_input+0x4c>
 801aa0a:	693b      	ldr	r3, [r7, #16]
 801aa0c:	791b      	ldrb	r3, [r3, #4]
 801aa0e:	2b06      	cmp	r3, #6
 801aa10:	d108      	bne.n	801aa24 <etharp_input+0x4c>
 801aa12:	693b      	ldr	r3, [r7, #16]
 801aa14:	795b      	ldrb	r3, [r3, #5]
 801aa16:	2b04      	cmp	r3, #4
 801aa18:	d104      	bne.n	801aa24 <etharp_input+0x4c>
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	885b      	ldrh	r3, [r3, #2]
 801aa1e:	b29b      	uxth	r3, r3
 801aa20:	2b08      	cmp	r3, #8
 801aa22:	d003      	beq.n	801aa2c <etharp_input+0x54>
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7f8 faef 	bl	8013008 <pbuf_free>
 801aa2a:	e055      	b.n	801aad8 <etharp_input+0x100>
 801aa2c:	693b      	ldr	r3, [r7, #16]
 801aa2e:	330e      	adds	r3, #14
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	60fb      	str	r3, [r7, #12]
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	3318      	adds	r3, #24
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	60bb      	str	r3, [r7, #8]
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	3304      	adds	r3, #4
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d102      	bne.n	801aa4c <etharp_input+0x74>
 801aa46:	2300      	movs	r3, #0
 801aa48:	75fb      	strb	r3, [r7, #23]
 801aa4a:	e009      	b.n	801aa60 <etharp_input+0x88>
 801aa4c:	68ba      	ldr	r2, [r7, #8]
 801aa4e:	683b      	ldr	r3, [r7, #0]
 801aa50:	3304      	adds	r3, #4
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	bf0c      	ite	eq
 801aa58:	2301      	moveq	r3, #1
 801aa5a:	2300      	movne	r3, #0
 801aa5c:	b2db      	uxtb	r3, r3
 801aa5e:	75fb      	strb	r3, [r7, #23]
 801aa60:	693b      	ldr	r3, [r7, #16]
 801aa62:	f103 0208 	add.w	r2, r3, #8
 801aa66:	7dfb      	ldrb	r3, [r7, #23]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d001      	beq.n	801aa70 <etharp_input+0x98>
 801aa6c:	2301      	movs	r3, #1
 801aa6e:	e000      	b.n	801aa72 <etharp_input+0x9a>
 801aa70:	2302      	movs	r3, #2
 801aa72:	f107 010c 	add.w	r1, r7, #12
 801aa76:	6838      	ldr	r0, [r7, #0]
 801aa78:	f7ff fed8 	bl	801a82c <etharp_update_arp_entry>
 801aa7c:	693b      	ldr	r3, [r7, #16]
 801aa7e:	88db      	ldrh	r3, [r3, #6]
 801aa80:	b29b      	uxth	r3, r3
 801aa82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801aa86:	d003      	beq.n	801aa90 <etharp_input+0xb8>
 801aa88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801aa8c:	d01e      	beq.n	801aacc <etharp_input+0xf4>
 801aa8e:	e020      	b.n	801aad2 <etharp_input+0xfa>
 801aa90:	7dfb      	ldrb	r3, [r7, #23]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d01c      	beq.n	801aad0 <etharp_input+0xf8>
 801aa96:	683b      	ldr	r3, [r7, #0]
 801aa98:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	f103 0408 	add.w	r4, r3, #8
 801aaa2:	683b      	ldr	r3, [r7, #0]
 801aaa4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	3304      	adds	r3, #4
 801aaac:	693a      	ldr	r2, [r7, #16]
 801aaae:	3208      	adds	r2, #8
 801aab0:	2102      	movs	r1, #2
 801aab2:	9103      	str	r1, [sp, #12]
 801aab4:	f107 010c 	add.w	r1, r7, #12
 801aab8:	9102      	str	r1, [sp, #8]
 801aaba:	9201      	str	r2, [sp, #4]
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	462b      	mov	r3, r5
 801aac0:	4622      	mov	r2, r4
 801aac2:	4601      	mov	r1, r0
 801aac4:	6838      	ldr	r0, [r7, #0]
 801aac6:	f000 faeb 	bl	801b0a0 <etharp_raw>
 801aaca:	e001      	b.n	801aad0 <etharp_input+0xf8>
 801aacc:	bf00      	nop
 801aace:	e000      	b.n	801aad2 <etharp_input+0xfa>
 801aad0:	bf00      	nop
 801aad2:	6878      	ldr	r0, [r7, #4]
 801aad4:	f7f8 fa98 	bl	8013008 <pbuf_free>
 801aad8:	3718      	adds	r7, #24
 801aada:	46bd      	mov	sp, r7
 801aadc:	bdb0      	pop	{r4, r5, r7, pc}
 801aade:	bf00      	nop
 801aae0:	08022f04 	.word	0x08022f04
 801aae4:	08023054 	.word	0x08023054
 801aae8:	08022f7c 	.word	0x08022f7c

0801aaec <etharp_output_to_arp_index>:
 801aaec:	b580      	push	{r7, lr}
 801aaee:	b086      	sub	sp, #24
 801aaf0:	af02      	add	r7, sp, #8
 801aaf2:	60f8      	str	r0, [r7, #12]
 801aaf4:	60b9      	str	r1, [r7, #8]
 801aaf6:	4613      	mov	r3, r2
 801aaf8:	71fb      	strb	r3, [r7, #7]
 801aafa:	79fa      	ldrb	r2, [r7, #7]
 801aafc:	4944      	ldr	r1, [pc, #272]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801aafe:	4613      	mov	r3, r2
 801ab00:	005b      	lsls	r3, r3, #1
 801ab02:	4413      	add	r3, r2
 801ab04:	00db      	lsls	r3, r3, #3
 801ab06:	440b      	add	r3, r1
 801ab08:	3314      	adds	r3, #20
 801ab0a:	781b      	ldrb	r3, [r3, #0]
 801ab0c:	2b01      	cmp	r3, #1
 801ab0e:	d806      	bhi.n	801ab1e <etharp_output_to_arp_index+0x32>
 801ab10:	4b40      	ldr	r3, [pc, #256]	@ (801ac14 <etharp_output_to_arp_index+0x128>)
 801ab12:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801ab16:	4940      	ldr	r1, [pc, #256]	@ (801ac18 <etharp_output_to_arp_index+0x12c>)
 801ab18:	4840      	ldr	r0, [pc, #256]	@ (801ac1c <etharp_output_to_arp_index+0x130>)
 801ab1a:	f002 fe35 	bl	801d788 <iprintf>
 801ab1e:	79fa      	ldrb	r2, [r7, #7]
 801ab20:	493b      	ldr	r1, [pc, #236]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801ab22:	4613      	mov	r3, r2
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4413      	add	r3, r2
 801ab28:	00db      	lsls	r3, r3, #3
 801ab2a:	440b      	add	r3, r1
 801ab2c:	3314      	adds	r3, #20
 801ab2e:	781b      	ldrb	r3, [r3, #0]
 801ab30:	2b02      	cmp	r3, #2
 801ab32:	d153      	bne.n	801abdc <etharp_output_to_arp_index+0xf0>
 801ab34:	79fa      	ldrb	r2, [r7, #7]
 801ab36:	4936      	ldr	r1, [pc, #216]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801ab38:	4613      	mov	r3, r2
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	4413      	add	r3, r2
 801ab3e:	00db      	lsls	r3, r3, #3
 801ab40:	440b      	add	r3, r1
 801ab42:	3312      	adds	r3, #18
 801ab44:	881b      	ldrh	r3, [r3, #0]
 801ab46:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801ab4a:	d919      	bls.n	801ab80 <etharp_output_to_arp_index+0x94>
 801ab4c:	79fa      	ldrb	r2, [r7, #7]
 801ab4e:	4613      	mov	r3, r2
 801ab50:	005b      	lsls	r3, r3, #1
 801ab52:	4413      	add	r3, r2
 801ab54:	00db      	lsls	r3, r3, #3
 801ab56:	4a2e      	ldr	r2, [pc, #184]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801ab58:	4413      	add	r3, r2
 801ab5a:	3304      	adds	r3, #4
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	68f8      	ldr	r0, [r7, #12]
 801ab60:	f000 fb4c 	bl	801b1fc <etharp_request>
 801ab64:	4603      	mov	r3, r0
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d138      	bne.n	801abdc <etharp_output_to_arp_index+0xf0>
 801ab6a:	79fa      	ldrb	r2, [r7, #7]
 801ab6c:	4928      	ldr	r1, [pc, #160]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801ab6e:	4613      	mov	r3, r2
 801ab70:	005b      	lsls	r3, r3, #1
 801ab72:	4413      	add	r3, r2
 801ab74:	00db      	lsls	r3, r3, #3
 801ab76:	440b      	add	r3, r1
 801ab78:	3314      	adds	r3, #20
 801ab7a:	2203      	movs	r2, #3
 801ab7c:	701a      	strb	r2, [r3, #0]
 801ab7e:	e02d      	b.n	801abdc <etharp_output_to_arp_index+0xf0>
 801ab80:	79fa      	ldrb	r2, [r7, #7]
 801ab82:	4923      	ldr	r1, [pc, #140]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801ab84:	4613      	mov	r3, r2
 801ab86:	005b      	lsls	r3, r3, #1
 801ab88:	4413      	add	r3, r2
 801ab8a:	00db      	lsls	r3, r3, #3
 801ab8c:	440b      	add	r3, r1
 801ab8e:	3312      	adds	r3, #18
 801ab90:	881b      	ldrh	r3, [r3, #0]
 801ab92:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801ab96:	d321      	bcc.n	801abdc <etharp_output_to_arp_index+0xf0>
 801ab98:	79fa      	ldrb	r2, [r7, #7]
 801ab9a:	4613      	mov	r3, r2
 801ab9c:	005b      	lsls	r3, r3, #1
 801ab9e:	4413      	add	r3, r2
 801aba0:	00db      	lsls	r3, r3, #3
 801aba2:	4a1b      	ldr	r2, [pc, #108]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801aba4:	4413      	add	r3, r2
 801aba6:	1d19      	adds	r1, r3, #4
 801aba8:	79fa      	ldrb	r2, [r7, #7]
 801abaa:	4613      	mov	r3, r2
 801abac:	005b      	lsls	r3, r3, #1
 801abae:	4413      	add	r3, r2
 801abb0:	00db      	lsls	r3, r3, #3
 801abb2:	3308      	adds	r3, #8
 801abb4:	4a16      	ldr	r2, [pc, #88]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801abb6:	4413      	add	r3, r2
 801abb8:	3304      	adds	r3, #4
 801abba:	461a      	mov	r2, r3
 801abbc:	68f8      	ldr	r0, [r7, #12]
 801abbe:	f000 fafb 	bl	801b1b8 <etharp_request_dst>
 801abc2:	4603      	mov	r3, r0
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d109      	bne.n	801abdc <etharp_output_to_arp_index+0xf0>
 801abc8:	79fa      	ldrb	r2, [r7, #7]
 801abca:	4911      	ldr	r1, [pc, #68]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801abcc:	4613      	mov	r3, r2
 801abce:	005b      	lsls	r3, r3, #1
 801abd0:	4413      	add	r3, r2
 801abd2:	00db      	lsls	r3, r3, #3
 801abd4:	440b      	add	r3, r1
 801abd6:	3314      	adds	r3, #20
 801abd8:	2203      	movs	r2, #3
 801abda:	701a      	strb	r2, [r3, #0]
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801abe2:	79fa      	ldrb	r2, [r7, #7]
 801abe4:	4613      	mov	r3, r2
 801abe6:	005b      	lsls	r3, r3, #1
 801abe8:	4413      	add	r3, r2
 801abea:	00db      	lsls	r3, r3, #3
 801abec:	3308      	adds	r3, #8
 801abee:	4a08      	ldr	r2, [pc, #32]	@ (801ac10 <etharp_output_to_arp_index+0x124>)
 801abf0:	4413      	add	r3, r2
 801abf2:	3304      	adds	r3, #4
 801abf4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801abf8:	9200      	str	r2, [sp, #0]
 801abfa:	460a      	mov	r2, r1
 801abfc:	68b9      	ldr	r1, [r7, #8]
 801abfe:	68f8      	ldr	r0, [r7, #12]
 801ac00:	f001 fe40 	bl	801c884 <ethernet_output>
 801ac04:	4603      	mov	r3, r0
 801ac06:	4618      	mov	r0, r3
 801ac08:	3710      	adds	r7, #16
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	2000f43c 	.word	0x2000f43c
 801ac14:	08022f04 	.word	0x08022f04
 801ac18:	08023074 	.word	0x08023074
 801ac1c:	08022f7c 	.word	0x08022f7c

0801ac20 <etharp_output>:
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b08a      	sub	sp, #40	@ 0x28
 801ac24:	af02      	add	r7, sp, #8
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	607a      	str	r2, [r7, #4]
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	61bb      	str	r3, [r7, #24]
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d106      	bne.n	801ac44 <etharp_output+0x24>
 801ac36:	4b73      	ldr	r3, [pc, #460]	@ (801ae04 <etharp_output+0x1e4>)
 801ac38:	f240 321e 	movw	r2, #798	@ 0x31e
 801ac3c:	4972      	ldr	r1, [pc, #456]	@ (801ae08 <etharp_output+0x1e8>)
 801ac3e:	4873      	ldr	r0, [pc, #460]	@ (801ae0c <etharp_output+0x1ec>)
 801ac40:	f002 fda2 	bl	801d788 <iprintf>
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d106      	bne.n	801ac58 <etharp_output+0x38>
 801ac4a:	4b6e      	ldr	r3, [pc, #440]	@ (801ae04 <etharp_output+0x1e4>)
 801ac4c:	f240 321f 	movw	r2, #799	@ 0x31f
 801ac50:	496f      	ldr	r1, [pc, #444]	@ (801ae10 <etharp_output+0x1f0>)
 801ac52:	486e      	ldr	r0, [pc, #440]	@ (801ae0c <etharp_output+0x1ec>)
 801ac54:	f002 fd98 	bl	801d788 <iprintf>
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d106      	bne.n	801ac6c <etharp_output+0x4c>
 801ac5e:	4b69      	ldr	r3, [pc, #420]	@ (801ae04 <etharp_output+0x1e4>)
 801ac60:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ac64:	496b      	ldr	r1, [pc, #428]	@ (801ae14 <etharp_output+0x1f4>)
 801ac66:	4869      	ldr	r0, [pc, #420]	@ (801ae0c <etharp_output+0x1ec>)
 801ac68:	f002 fd8e 	bl	801d788 <iprintf>
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	68f9      	ldr	r1, [r7, #12]
 801ac72:	4618      	mov	r0, r3
 801ac74:	f000 fef8 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801ac78:	4603      	mov	r3, r0
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d002      	beq.n	801ac84 <etharp_output+0x64>
 801ac7e:	4b66      	ldr	r3, [pc, #408]	@ (801ae18 <etharp_output+0x1f8>)
 801ac80:	61fb      	str	r3, [r7, #28]
 801ac82:	e0af      	b.n	801ade4 <etharp_output+0x1c4>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ac8c:	2be0      	cmp	r3, #224	@ 0xe0
 801ac8e:	d118      	bne.n	801acc2 <etharp_output+0xa2>
 801ac90:	2301      	movs	r3, #1
 801ac92:	743b      	strb	r3, [r7, #16]
 801ac94:	2300      	movs	r3, #0
 801ac96:	747b      	strb	r3, [r7, #17]
 801ac98:	235e      	movs	r3, #94	@ 0x5e
 801ac9a:	74bb      	strb	r3, [r7, #18]
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	3301      	adds	r3, #1
 801aca0:	781b      	ldrb	r3, [r3, #0]
 801aca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aca6:	b2db      	uxtb	r3, r3
 801aca8:	74fb      	strb	r3, [r7, #19]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	3302      	adds	r3, #2
 801acae:	781b      	ldrb	r3, [r3, #0]
 801acb0:	753b      	strb	r3, [r7, #20]
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	3303      	adds	r3, #3
 801acb6:	781b      	ldrb	r3, [r3, #0]
 801acb8:	757b      	strb	r3, [r7, #21]
 801acba:	f107 0310 	add.w	r3, r7, #16
 801acbe:	61fb      	str	r3, [r7, #28]
 801acc0:	e090      	b.n	801ade4 <etharp_output+0x1c4>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	681a      	ldr	r2, [r3, #0]
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	3304      	adds	r3, #4
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	405a      	eors	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	3308      	adds	r3, #8
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	4013      	ands	r3, r2
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d012      	beq.n	801ad00 <etharp_output+0xe0>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	b29b      	uxth	r3, r3
 801ace0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801ace4:	4293      	cmp	r3, r2
 801ace6:	d00b      	beq.n	801ad00 <etharp_output+0xe0>
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	330c      	adds	r3, #12
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d003      	beq.n	801acfa <etharp_output+0xda>
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	330c      	adds	r3, #12
 801acf6:	61bb      	str	r3, [r7, #24]
 801acf8:	e002      	b.n	801ad00 <etharp_output+0xe0>
 801acfa:	f06f 0303 	mvn.w	r3, #3
 801acfe:	e07d      	b.n	801adfc <etharp_output+0x1dc>
 801ad00:	4b46      	ldr	r3, [pc, #280]	@ (801ae1c <etharp_output+0x1fc>)
 801ad02:	781b      	ldrb	r3, [r3, #0]
 801ad04:	4619      	mov	r1, r3
 801ad06:	4a46      	ldr	r2, [pc, #280]	@ (801ae20 <etharp_output+0x200>)
 801ad08:	460b      	mov	r3, r1
 801ad0a:	005b      	lsls	r3, r3, #1
 801ad0c:	440b      	add	r3, r1
 801ad0e:	00db      	lsls	r3, r3, #3
 801ad10:	4413      	add	r3, r2
 801ad12:	3314      	adds	r3, #20
 801ad14:	781b      	ldrb	r3, [r3, #0]
 801ad16:	2b01      	cmp	r3, #1
 801ad18:	d925      	bls.n	801ad66 <etharp_output+0x146>
 801ad1a:	4b40      	ldr	r3, [pc, #256]	@ (801ae1c <etharp_output+0x1fc>)
 801ad1c:	781b      	ldrb	r3, [r3, #0]
 801ad1e:	4619      	mov	r1, r3
 801ad20:	4a3f      	ldr	r2, [pc, #252]	@ (801ae20 <etharp_output+0x200>)
 801ad22:	460b      	mov	r3, r1
 801ad24:	005b      	lsls	r3, r3, #1
 801ad26:	440b      	add	r3, r1
 801ad28:	00db      	lsls	r3, r3, #3
 801ad2a:	4413      	add	r3, r2
 801ad2c:	3308      	adds	r3, #8
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	68fa      	ldr	r2, [r7, #12]
 801ad32:	429a      	cmp	r2, r3
 801ad34:	d117      	bne.n	801ad66 <etharp_output+0x146>
 801ad36:	69bb      	ldr	r3, [r7, #24]
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	4b38      	ldr	r3, [pc, #224]	@ (801ae1c <etharp_output+0x1fc>)
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	4618      	mov	r0, r3
 801ad40:	4937      	ldr	r1, [pc, #220]	@ (801ae20 <etharp_output+0x200>)
 801ad42:	4603      	mov	r3, r0
 801ad44:	005b      	lsls	r3, r3, #1
 801ad46:	4403      	add	r3, r0
 801ad48:	00db      	lsls	r3, r3, #3
 801ad4a:	440b      	add	r3, r1
 801ad4c:	3304      	adds	r3, #4
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	429a      	cmp	r2, r3
 801ad52:	d108      	bne.n	801ad66 <etharp_output+0x146>
 801ad54:	4b31      	ldr	r3, [pc, #196]	@ (801ae1c <etharp_output+0x1fc>)
 801ad56:	781b      	ldrb	r3, [r3, #0]
 801ad58:	461a      	mov	r2, r3
 801ad5a:	68b9      	ldr	r1, [r7, #8]
 801ad5c:	68f8      	ldr	r0, [r7, #12]
 801ad5e:	f7ff fec5 	bl	801aaec <etharp_output_to_arp_index>
 801ad62:	4603      	mov	r3, r0
 801ad64:	e04a      	b.n	801adfc <etharp_output+0x1dc>
 801ad66:	2300      	movs	r3, #0
 801ad68:	75fb      	strb	r3, [r7, #23]
 801ad6a:	e031      	b.n	801add0 <etharp_output+0x1b0>
 801ad6c:	7dfa      	ldrb	r2, [r7, #23]
 801ad6e:	492c      	ldr	r1, [pc, #176]	@ (801ae20 <etharp_output+0x200>)
 801ad70:	4613      	mov	r3, r2
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	4413      	add	r3, r2
 801ad76:	00db      	lsls	r3, r3, #3
 801ad78:	440b      	add	r3, r1
 801ad7a:	3314      	adds	r3, #20
 801ad7c:	781b      	ldrb	r3, [r3, #0]
 801ad7e:	2b01      	cmp	r3, #1
 801ad80:	d923      	bls.n	801adca <etharp_output+0x1aa>
 801ad82:	7dfa      	ldrb	r2, [r7, #23]
 801ad84:	4926      	ldr	r1, [pc, #152]	@ (801ae20 <etharp_output+0x200>)
 801ad86:	4613      	mov	r3, r2
 801ad88:	005b      	lsls	r3, r3, #1
 801ad8a:	4413      	add	r3, r2
 801ad8c:	00db      	lsls	r3, r3, #3
 801ad8e:	440b      	add	r3, r1
 801ad90:	3308      	adds	r3, #8
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	68fa      	ldr	r2, [r7, #12]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d117      	bne.n	801adca <etharp_output+0x1aa>
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	6819      	ldr	r1, [r3, #0]
 801ad9e:	7dfa      	ldrb	r2, [r7, #23]
 801ada0:	481f      	ldr	r0, [pc, #124]	@ (801ae20 <etharp_output+0x200>)
 801ada2:	4613      	mov	r3, r2
 801ada4:	005b      	lsls	r3, r3, #1
 801ada6:	4413      	add	r3, r2
 801ada8:	00db      	lsls	r3, r3, #3
 801adaa:	4403      	add	r3, r0
 801adac:	3304      	adds	r3, #4
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	4299      	cmp	r1, r3
 801adb2:	d10a      	bne.n	801adca <etharp_output+0x1aa>
 801adb4:	4a19      	ldr	r2, [pc, #100]	@ (801ae1c <etharp_output+0x1fc>)
 801adb6:	7dfb      	ldrb	r3, [r7, #23]
 801adb8:	7013      	strb	r3, [r2, #0]
 801adba:	7dfb      	ldrb	r3, [r7, #23]
 801adbc:	461a      	mov	r2, r3
 801adbe:	68b9      	ldr	r1, [r7, #8]
 801adc0:	68f8      	ldr	r0, [r7, #12]
 801adc2:	f7ff fe93 	bl	801aaec <etharp_output_to_arp_index>
 801adc6:	4603      	mov	r3, r0
 801adc8:	e018      	b.n	801adfc <etharp_output+0x1dc>
 801adca:	7dfb      	ldrb	r3, [r7, #23]
 801adcc:	3301      	adds	r3, #1
 801adce:	75fb      	strb	r3, [r7, #23]
 801add0:	7dfb      	ldrb	r3, [r7, #23]
 801add2:	2b09      	cmp	r3, #9
 801add4:	d9ca      	bls.n	801ad6c <etharp_output+0x14c>
 801add6:	68ba      	ldr	r2, [r7, #8]
 801add8:	69b9      	ldr	r1, [r7, #24]
 801adda:	68f8      	ldr	r0, [r7, #12]
 801addc:	f000 f822 	bl	801ae24 <etharp_query>
 801ade0:	4603      	mov	r3, r0
 801ade2:	e00b      	b.n	801adfc <etharp_output+0x1dc>
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801adea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801adee:	9300      	str	r3, [sp, #0]
 801adf0:	69fb      	ldr	r3, [r7, #28]
 801adf2:	68b9      	ldr	r1, [r7, #8]
 801adf4:	68f8      	ldr	r0, [r7, #12]
 801adf6:	f001 fd45 	bl	801c884 <ethernet_output>
 801adfa:	4603      	mov	r3, r0
 801adfc:	4618      	mov	r0, r3
 801adfe:	3720      	adds	r7, #32
 801ae00:	46bd      	mov	sp, r7
 801ae02:	bd80      	pop	{r7, pc}
 801ae04:	08022f04 	.word	0x08022f04
 801ae08:	08023054 	.word	0x08023054
 801ae0c:	08022f7c 	.word	0x08022f7c
 801ae10:	080230a4 	.word	0x080230a4
 801ae14:	08023044 	.word	0x08023044
 801ae18:	080243c4 	.word	0x080243c4
 801ae1c:	2000f52c 	.word	0x2000f52c
 801ae20:	2000f43c 	.word	0x2000f43c

0801ae24 <etharp_query>:
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b08c      	sub	sp, #48	@ 0x30
 801ae28:	af02      	add	r7, sp, #8
 801ae2a:	60f8      	str	r0, [r7, #12]
 801ae2c:	60b9      	str	r1, [r7, #8]
 801ae2e:	607a      	str	r2, [r7, #4]
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	3326      	adds	r3, #38	@ 0x26
 801ae34:	617b      	str	r3, [r7, #20]
 801ae36:	23ff      	movs	r3, #255	@ 0xff
 801ae38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	623b      	str	r3, [r7, #32]
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	68f9      	ldr	r1, [r7, #12]
 801ae46:	4618      	mov	r0, r3
 801ae48:	f000 fe0e 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801ae4c:	4603      	mov	r3, r0
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d10c      	bne.n	801ae6c <etharp_query+0x48>
 801ae52:	68bb      	ldr	r3, [r7, #8]
 801ae54:	681b      	ldr	r3, [r3, #0]
 801ae56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ae5a:	2be0      	cmp	r3, #224	@ 0xe0
 801ae5c:	d006      	beq.n	801ae6c <etharp_query+0x48>
 801ae5e:	68bb      	ldr	r3, [r7, #8]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d003      	beq.n	801ae6c <etharp_query+0x48>
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d102      	bne.n	801ae72 <etharp_query+0x4e>
 801ae6c:	f06f 030f 	mvn.w	r3, #15
 801ae70:	e101      	b.n	801b076 <etharp_query+0x252>
 801ae72:	68fa      	ldr	r2, [r7, #12]
 801ae74:	2101      	movs	r1, #1
 801ae76:	68b8      	ldr	r0, [r7, #8]
 801ae78:	f7ff fb60 	bl	801a53c <etharp_find_entry>
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	827b      	strh	r3, [r7, #18]
 801ae80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	da02      	bge.n	801ae8e <etharp_query+0x6a>
 801ae88:	8a7b      	ldrh	r3, [r7, #18]
 801ae8a:	b25b      	sxtb	r3, r3
 801ae8c:	e0f3      	b.n	801b076 <etharp_query+0x252>
 801ae8e:	8a7b      	ldrh	r3, [r7, #18]
 801ae90:	2b7e      	cmp	r3, #126	@ 0x7e
 801ae92:	d906      	bls.n	801aea2 <etharp_query+0x7e>
 801ae94:	4b7a      	ldr	r3, [pc, #488]	@ (801b080 <etharp_query+0x25c>)
 801ae96:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ae9a:	497a      	ldr	r1, [pc, #488]	@ (801b084 <etharp_query+0x260>)
 801ae9c:	487a      	ldr	r0, [pc, #488]	@ (801b088 <etharp_query+0x264>)
 801ae9e:	f002 fc73 	bl	801d788 <iprintf>
 801aea2:	8a7b      	ldrh	r3, [r7, #18]
 801aea4:	747b      	strb	r3, [r7, #17]
 801aea6:	7c7a      	ldrb	r2, [r7, #17]
 801aea8:	4978      	ldr	r1, [pc, #480]	@ (801b08c <etharp_query+0x268>)
 801aeaa:	4613      	mov	r3, r2
 801aeac:	005b      	lsls	r3, r3, #1
 801aeae:	4413      	add	r3, r2
 801aeb0:	00db      	lsls	r3, r3, #3
 801aeb2:	440b      	add	r3, r1
 801aeb4:	3314      	adds	r3, #20
 801aeb6:	781b      	ldrb	r3, [r3, #0]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d115      	bne.n	801aee8 <etharp_query+0xc4>
 801aebc:	2301      	movs	r3, #1
 801aebe:	623b      	str	r3, [r7, #32]
 801aec0:	7c7a      	ldrb	r2, [r7, #17]
 801aec2:	4972      	ldr	r1, [pc, #456]	@ (801b08c <etharp_query+0x268>)
 801aec4:	4613      	mov	r3, r2
 801aec6:	005b      	lsls	r3, r3, #1
 801aec8:	4413      	add	r3, r2
 801aeca:	00db      	lsls	r3, r3, #3
 801aecc:	440b      	add	r3, r1
 801aece:	3314      	adds	r3, #20
 801aed0:	2201      	movs	r2, #1
 801aed2:	701a      	strb	r2, [r3, #0]
 801aed4:	7c7a      	ldrb	r2, [r7, #17]
 801aed6:	496d      	ldr	r1, [pc, #436]	@ (801b08c <etharp_query+0x268>)
 801aed8:	4613      	mov	r3, r2
 801aeda:	005b      	lsls	r3, r3, #1
 801aedc:	4413      	add	r3, r2
 801aede:	00db      	lsls	r3, r3, #3
 801aee0:	440b      	add	r3, r1
 801aee2:	3308      	adds	r3, #8
 801aee4:	68fa      	ldr	r2, [r7, #12]
 801aee6:	601a      	str	r2, [r3, #0]
 801aee8:	7c7a      	ldrb	r2, [r7, #17]
 801aeea:	4968      	ldr	r1, [pc, #416]	@ (801b08c <etharp_query+0x268>)
 801aeec:	4613      	mov	r3, r2
 801aeee:	005b      	lsls	r3, r3, #1
 801aef0:	4413      	add	r3, r2
 801aef2:	00db      	lsls	r3, r3, #3
 801aef4:	440b      	add	r3, r1
 801aef6:	3314      	adds	r3, #20
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	d011      	beq.n	801af22 <etharp_query+0xfe>
 801aefe:	7c7a      	ldrb	r2, [r7, #17]
 801af00:	4962      	ldr	r1, [pc, #392]	@ (801b08c <etharp_query+0x268>)
 801af02:	4613      	mov	r3, r2
 801af04:	005b      	lsls	r3, r3, #1
 801af06:	4413      	add	r3, r2
 801af08:	00db      	lsls	r3, r3, #3
 801af0a:	440b      	add	r3, r1
 801af0c:	3314      	adds	r3, #20
 801af0e:	781b      	ldrb	r3, [r3, #0]
 801af10:	2b01      	cmp	r3, #1
 801af12:	d806      	bhi.n	801af22 <etharp_query+0xfe>
 801af14:	4b5a      	ldr	r3, [pc, #360]	@ (801b080 <etharp_query+0x25c>)
 801af16:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801af1a:	495d      	ldr	r1, [pc, #372]	@ (801b090 <etharp_query+0x26c>)
 801af1c:	485a      	ldr	r0, [pc, #360]	@ (801b088 <etharp_query+0x264>)
 801af1e:	f002 fc33 	bl	801d788 <iprintf>
 801af22:	6a3b      	ldr	r3, [r7, #32]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d102      	bne.n	801af2e <etharp_query+0x10a>
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d10c      	bne.n	801af48 <etharp_query+0x124>
 801af2e:	68b9      	ldr	r1, [r7, #8]
 801af30:	68f8      	ldr	r0, [r7, #12]
 801af32:	f000 f963 	bl	801b1fc <etharp_request>
 801af36:	4603      	mov	r3, r0
 801af38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d102      	bne.n	801af48 <etharp_query+0x124>
 801af42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801af46:	e096      	b.n	801b076 <etharp_query+0x252>
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d106      	bne.n	801af5c <etharp_query+0x138>
 801af4e:	4b4c      	ldr	r3, [pc, #304]	@ (801b080 <etharp_query+0x25c>)
 801af50:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801af54:	494f      	ldr	r1, [pc, #316]	@ (801b094 <etharp_query+0x270>)
 801af56:	484c      	ldr	r0, [pc, #304]	@ (801b088 <etharp_query+0x264>)
 801af58:	f002 fc16 	bl	801d788 <iprintf>
 801af5c:	7c7a      	ldrb	r2, [r7, #17]
 801af5e:	494b      	ldr	r1, [pc, #300]	@ (801b08c <etharp_query+0x268>)
 801af60:	4613      	mov	r3, r2
 801af62:	005b      	lsls	r3, r3, #1
 801af64:	4413      	add	r3, r2
 801af66:	00db      	lsls	r3, r3, #3
 801af68:	440b      	add	r3, r1
 801af6a:	3314      	adds	r3, #20
 801af6c:	781b      	ldrb	r3, [r3, #0]
 801af6e:	2b01      	cmp	r3, #1
 801af70:	d917      	bls.n	801afa2 <etharp_query+0x17e>
 801af72:	4a49      	ldr	r2, [pc, #292]	@ (801b098 <etharp_query+0x274>)
 801af74:	7c7b      	ldrb	r3, [r7, #17]
 801af76:	7013      	strb	r3, [r2, #0]
 801af78:	7c7a      	ldrb	r2, [r7, #17]
 801af7a:	4613      	mov	r3, r2
 801af7c:	005b      	lsls	r3, r3, #1
 801af7e:	4413      	add	r3, r2
 801af80:	00db      	lsls	r3, r3, #3
 801af82:	3308      	adds	r3, #8
 801af84:	4a41      	ldr	r2, [pc, #260]	@ (801b08c <etharp_query+0x268>)
 801af86:	4413      	add	r3, r2
 801af88:	3304      	adds	r3, #4
 801af8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801af8e:	9200      	str	r2, [sp, #0]
 801af90:	697a      	ldr	r2, [r7, #20]
 801af92:	6879      	ldr	r1, [r7, #4]
 801af94:	68f8      	ldr	r0, [r7, #12]
 801af96:	f001 fc75 	bl	801c884 <ethernet_output>
 801af9a:	4603      	mov	r3, r0
 801af9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801afa0:	e067      	b.n	801b072 <etharp_query+0x24e>
 801afa2:	7c7a      	ldrb	r2, [r7, #17]
 801afa4:	4939      	ldr	r1, [pc, #228]	@ (801b08c <etharp_query+0x268>)
 801afa6:	4613      	mov	r3, r2
 801afa8:	005b      	lsls	r3, r3, #1
 801afaa:	4413      	add	r3, r2
 801afac:	00db      	lsls	r3, r3, #3
 801afae:	440b      	add	r3, r1
 801afb0:	3314      	adds	r3, #20
 801afb2:	781b      	ldrb	r3, [r3, #0]
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d15c      	bne.n	801b072 <etharp_query+0x24e>
 801afb8:	2300      	movs	r3, #0
 801afba:	61bb      	str	r3, [r7, #24]
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	61fb      	str	r3, [r7, #28]
 801afc0:	e01c      	b.n	801affc <etharp_query+0x1d8>
 801afc2:	69fb      	ldr	r3, [r7, #28]
 801afc4:	895a      	ldrh	r2, [r3, #10]
 801afc6:	69fb      	ldr	r3, [r7, #28]
 801afc8:	891b      	ldrh	r3, [r3, #8]
 801afca:	429a      	cmp	r2, r3
 801afcc:	d10a      	bne.n	801afe4 <etharp_query+0x1c0>
 801afce:	69fb      	ldr	r3, [r7, #28]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d006      	beq.n	801afe4 <etharp_query+0x1c0>
 801afd6:	4b2a      	ldr	r3, [pc, #168]	@ (801b080 <etharp_query+0x25c>)
 801afd8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801afdc:	492f      	ldr	r1, [pc, #188]	@ (801b09c <etharp_query+0x278>)
 801afde:	482a      	ldr	r0, [pc, #168]	@ (801b088 <etharp_query+0x264>)
 801afe0:	f002 fbd2 	bl	801d788 <iprintf>
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	7b1b      	ldrb	r3, [r3, #12]
 801afe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801afec:	2b00      	cmp	r3, #0
 801afee:	d002      	beq.n	801aff6 <etharp_query+0x1d2>
 801aff0:	2301      	movs	r3, #1
 801aff2:	61bb      	str	r3, [r7, #24]
 801aff4:	e005      	b.n	801b002 <etharp_query+0x1de>
 801aff6:	69fb      	ldr	r3, [r7, #28]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	61fb      	str	r3, [r7, #28]
 801affc:	69fb      	ldr	r3, [r7, #28]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d1df      	bne.n	801afc2 <etharp_query+0x19e>
 801b002:	69bb      	ldr	r3, [r7, #24]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d007      	beq.n	801b018 <etharp_query+0x1f4>
 801b008:	687a      	ldr	r2, [r7, #4]
 801b00a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b00e:	200e      	movs	r0, #14
 801b010:	f7f8 fa72 	bl	80134f8 <pbuf_clone>
 801b014:	61f8      	str	r0, [r7, #28]
 801b016:	e004      	b.n	801b022 <etharp_query+0x1fe>
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	61fb      	str	r3, [r7, #28]
 801b01c:	69f8      	ldr	r0, [r7, #28]
 801b01e:	f7f8 f899 	bl	8013154 <pbuf_ref>
 801b022:	69fb      	ldr	r3, [r7, #28]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d021      	beq.n	801b06c <etharp_query+0x248>
 801b028:	7c7a      	ldrb	r2, [r7, #17]
 801b02a:	4918      	ldr	r1, [pc, #96]	@ (801b08c <etharp_query+0x268>)
 801b02c:	4613      	mov	r3, r2
 801b02e:	005b      	lsls	r3, r3, #1
 801b030:	4413      	add	r3, r2
 801b032:	00db      	lsls	r3, r3, #3
 801b034:	440b      	add	r3, r1
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d00a      	beq.n	801b052 <etharp_query+0x22e>
 801b03c:	7c7a      	ldrb	r2, [r7, #17]
 801b03e:	4913      	ldr	r1, [pc, #76]	@ (801b08c <etharp_query+0x268>)
 801b040:	4613      	mov	r3, r2
 801b042:	005b      	lsls	r3, r3, #1
 801b044:	4413      	add	r3, r2
 801b046:	00db      	lsls	r3, r3, #3
 801b048:	440b      	add	r3, r1
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	4618      	mov	r0, r3
 801b04e:	f7f7 ffdb 	bl	8013008 <pbuf_free>
 801b052:	7c7a      	ldrb	r2, [r7, #17]
 801b054:	490d      	ldr	r1, [pc, #52]	@ (801b08c <etharp_query+0x268>)
 801b056:	4613      	mov	r3, r2
 801b058:	005b      	lsls	r3, r3, #1
 801b05a:	4413      	add	r3, r2
 801b05c:	00db      	lsls	r3, r3, #3
 801b05e:	440b      	add	r3, r1
 801b060:	69fa      	ldr	r2, [r7, #28]
 801b062:	601a      	str	r2, [r3, #0]
 801b064:	2300      	movs	r3, #0
 801b066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b06a:	e002      	b.n	801b072 <etharp_query+0x24e>
 801b06c:	23ff      	movs	r3, #255	@ 0xff
 801b06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b072:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b076:	4618      	mov	r0, r3
 801b078:	3728      	adds	r7, #40	@ 0x28
 801b07a:	46bd      	mov	sp, r7
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	bf00      	nop
 801b080:	08022f04 	.word	0x08022f04
 801b084:	080230b0 	.word	0x080230b0
 801b088:	08022f7c 	.word	0x08022f7c
 801b08c:	2000f43c 	.word	0x2000f43c
 801b090:	080230c0 	.word	0x080230c0
 801b094:	080230a4 	.word	0x080230a4
 801b098:	2000f52c 	.word	0x2000f52c
 801b09c:	080230e8 	.word	0x080230e8

0801b0a0 <etharp_raw>:
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b08a      	sub	sp, #40	@ 0x28
 801b0a4:	af02      	add	r7, sp, #8
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	607a      	str	r2, [r7, #4]
 801b0ac:	603b      	str	r3, [r7, #0]
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	77fb      	strb	r3, [r7, #31]
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d106      	bne.n	801b0c6 <etharp_raw+0x26>
 801b0b8:	4b3a      	ldr	r3, [pc, #232]	@ (801b1a4 <etharp_raw+0x104>)
 801b0ba:	f240 4257 	movw	r2, #1111	@ 0x457
 801b0be:	493a      	ldr	r1, [pc, #232]	@ (801b1a8 <etharp_raw+0x108>)
 801b0c0:	483a      	ldr	r0, [pc, #232]	@ (801b1ac <etharp_raw+0x10c>)
 801b0c2:	f002 fb61 	bl	801d788 <iprintf>
 801b0c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b0ca:	211c      	movs	r1, #28
 801b0cc:	200e      	movs	r0, #14
 801b0ce:	f7f7 fcb7 	bl	8012a40 <pbuf_alloc>
 801b0d2:	61b8      	str	r0, [r7, #24]
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d102      	bne.n	801b0e0 <etharp_raw+0x40>
 801b0da:	f04f 33ff 	mov.w	r3, #4294967295
 801b0de:	e05d      	b.n	801b19c <etharp_raw+0xfc>
 801b0e0:	69bb      	ldr	r3, [r7, #24]
 801b0e2:	895b      	ldrh	r3, [r3, #10]
 801b0e4:	2b1b      	cmp	r3, #27
 801b0e6:	d806      	bhi.n	801b0f6 <etharp_raw+0x56>
 801b0e8:	4b2e      	ldr	r3, [pc, #184]	@ (801b1a4 <etharp_raw+0x104>)
 801b0ea:	f240 4262 	movw	r2, #1122	@ 0x462
 801b0ee:	4930      	ldr	r1, [pc, #192]	@ (801b1b0 <etharp_raw+0x110>)
 801b0f0:	482e      	ldr	r0, [pc, #184]	@ (801b1ac <etharp_raw+0x10c>)
 801b0f2:	f002 fb49 	bl	801d788 <iprintf>
 801b0f6:	69bb      	ldr	r3, [r7, #24]
 801b0f8:	685b      	ldr	r3, [r3, #4]
 801b0fa:	617b      	str	r3, [r7, #20]
 801b0fc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b0fe:	4618      	mov	r0, r3
 801b100:	f7f6 fb5a 	bl	80117b8 <lwip_htons>
 801b104:	4603      	mov	r3, r0
 801b106:	461a      	mov	r2, r3
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	80da      	strh	r2, [r3, #6]
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b112:	2b06      	cmp	r3, #6
 801b114:	d006      	beq.n	801b124 <etharp_raw+0x84>
 801b116:	4b23      	ldr	r3, [pc, #140]	@ (801b1a4 <etharp_raw+0x104>)
 801b118:	f240 4269 	movw	r2, #1129	@ 0x469
 801b11c:	4925      	ldr	r1, [pc, #148]	@ (801b1b4 <etharp_raw+0x114>)
 801b11e:	4823      	ldr	r0, [pc, #140]	@ (801b1ac <etharp_raw+0x10c>)
 801b120:	f002 fb32 	bl	801d788 <iprintf>
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	3308      	adds	r3, #8
 801b128:	2206      	movs	r2, #6
 801b12a:	6839      	ldr	r1, [r7, #0]
 801b12c:	4618      	mov	r0, r3
 801b12e:	f002 fdac 	bl	801dc8a <memcpy>
 801b132:	697b      	ldr	r3, [r7, #20]
 801b134:	3312      	adds	r3, #18
 801b136:	2206      	movs	r2, #6
 801b138:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b13a:	4618      	mov	r0, r3
 801b13c:	f002 fda5 	bl	801dc8a <memcpy>
 801b140:	697b      	ldr	r3, [r7, #20]
 801b142:	330e      	adds	r3, #14
 801b144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b146:	6812      	ldr	r2, [r2, #0]
 801b148:	601a      	str	r2, [r3, #0]
 801b14a:	697b      	ldr	r3, [r7, #20]
 801b14c:	3318      	adds	r3, #24
 801b14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b150:	6812      	ldr	r2, [r2, #0]
 801b152:	601a      	str	r2, [r3, #0]
 801b154:	697b      	ldr	r3, [r7, #20]
 801b156:	2200      	movs	r2, #0
 801b158:	701a      	strb	r2, [r3, #0]
 801b15a:	2200      	movs	r2, #0
 801b15c:	f042 0201 	orr.w	r2, r2, #1
 801b160:	705a      	strb	r2, [r3, #1]
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	2200      	movs	r2, #0
 801b166:	f042 0208 	orr.w	r2, r2, #8
 801b16a:	709a      	strb	r2, [r3, #2]
 801b16c:	2200      	movs	r2, #0
 801b16e:	70da      	strb	r2, [r3, #3]
 801b170:	697b      	ldr	r3, [r7, #20]
 801b172:	2206      	movs	r2, #6
 801b174:	711a      	strb	r2, [r3, #4]
 801b176:	697b      	ldr	r3, [r7, #20]
 801b178:	2204      	movs	r2, #4
 801b17a:	715a      	strb	r2, [r3, #5]
 801b17c:	f640 0306 	movw	r3, #2054	@ 0x806
 801b180:	9300      	str	r3, [sp, #0]
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	68ba      	ldr	r2, [r7, #8]
 801b186:	69b9      	ldr	r1, [r7, #24]
 801b188:	68f8      	ldr	r0, [r7, #12]
 801b18a:	f001 fb7b 	bl	801c884 <ethernet_output>
 801b18e:	69b8      	ldr	r0, [r7, #24]
 801b190:	f7f7 ff3a 	bl	8013008 <pbuf_free>
 801b194:	2300      	movs	r3, #0
 801b196:	61bb      	str	r3, [r7, #24]
 801b198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b19c:	4618      	mov	r0, r3
 801b19e:	3720      	adds	r7, #32
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}
 801b1a4:	08022f04 	.word	0x08022f04
 801b1a8:	08023054 	.word	0x08023054
 801b1ac:	08022f7c 	.word	0x08022f7c
 801b1b0:	08023104 	.word	0x08023104
 801b1b4:	08023138 	.word	0x08023138

0801b1b8 <etharp_request_dst>:
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b088      	sub	sp, #32
 801b1bc:	af04      	add	r7, sp, #16
 801b1be:	60f8      	str	r0, [r7, #12]
 801b1c0:	60b9      	str	r1, [r7, #8]
 801b1c2:	607a      	str	r2, [r7, #4]
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	3304      	adds	r3, #4
 801b1d4:	2201      	movs	r2, #1
 801b1d6:	9203      	str	r2, [sp, #12]
 801b1d8:	68ba      	ldr	r2, [r7, #8]
 801b1da:	9202      	str	r2, [sp, #8]
 801b1dc:	4a06      	ldr	r2, [pc, #24]	@ (801b1f8 <etharp_request_dst+0x40>)
 801b1de:	9201      	str	r2, [sp, #4]
 801b1e0:	9300      	str	r3, [sp, #0]
 801b1e2:	4603      	mov	r3, r0
 801b1e4:	687a      	ldr	r2, [r7, #4]
 801b1e6:	68f8      	ldr	r0, [r7, #12]
 801b1e8:	f7ff ff5a 	bl	801b0a0 <etharp_raw>
 801b1ec:	4603      	mov	r3, r0
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	3710      	adds	r7, #16
 801b1f2:	46bd      	mov	sp, r7
 801b1f4:	bd80      	pop	{r7, pc}
 801b1f6:	bf00      	nop
 801b1f8:	080243cc 	.word	0x080243cc

0801b1fc <etharp_request>:
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b082      	sub	sp, #8
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
 801b206:	4a05      	ldr	r2, [pc, #20]	@ (801b21c <etharp_request+0x20>)
 801b208:	6839      	ldr	r1, [r7, #0]
 801b20a:	6878      	ldr	r0, [r7, #4]
 801b20c:	f7ff ffd4 	bl	801b1b8 <etharp_request_dst>
 801b210:	4603      	mov	r3, r0
 801b212:	4618      	mov	r0, r3
 801b214:	3708      	adds	r7, #8
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	080243c4 	.word	0x080243c4

0801b220 <icmp_input>:
 801b220:	b580      	push	{r7, lr}
 801b222:	b08e      	sub	sp, #56	@ 0x38
 801b224:	af04      	add	r7, sp, #16
 801b226:	6078      	str	r0, [r7, #4]
 801b228:	6039      	str	r1, [r7, #0]
 801b22a:	4b79      	ldr	r3, [pc, #484]	@ (801b410 <icmp_input+0x1f0>)
 801b22c:	689b      	ldr	r3, [r3, #8]
 801b22e:	627b      	str	r3, [r7, #36]	@ 0x24
 801b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b232:	781b      	ldrb	r3, [r3, #0]
 801b234:	f003 030f 	and.w	r3, r3, #15
 801b238:	b2db      	uxtb	r3, r3
 801b23a:	009b      	lsls	r3, r3, #2
 801b23c:	b2db      	uxtb	r3, r3
 801b23e:	847b      	strh	r3, [r7, #34]	@ 0x22
 801b240:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b242:	2b13      	cmp	r3, #19
 801b244:	f240 80cd 	bls.w	801b3e2 <icmp_input+0x1c2>
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	895b      	ldrh	r3, [r3, #10]
 801b24c:	2b03      	cmp	r3, #3
 801b24e:	f240 80ca 	bls.w	801b3e6 <icmp_input+0x1c6>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	685b      	ldr	r3, [r3, #4]
 801b256:	781b      	ldrb	r3, [r3, #0]
 801b258:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 801b25c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b260:	2b00      	cmp	r3, #0
 801b262:	f000 80b7 	beq.w	801b3d4 <icmp_input+0x1b4>
 801b266:	2b08      	cmp	r3, #8
 801b268:	f040 80b7 	bne.w	801b3da <icmp_input+0x1ba>
 801b26c:	4b69      	ldr	r3, [pc, #420]	@ (801b414 <icmp_input+0x1f4>)
 801b26e:	61fb      	str	r3, [r7, #28]
 801b270:	4b67      	ldr	r3, [pc, #412]	@ (801b410 <icmp_input+0x1f0>)
 801b272:	695b      	ldr	r3, [r3, #20]
 801b274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b278:	2be0      	cmp	r3, #224	@ 0xe0
 801b27a:	f000 80bb 	beq.w	801b3f4 <icmp_input+0x1d4>
 801b27e:	4b64      	ldr	r3, [pc, #400]	@ (801b410 <icmp_input+0x1f0>)
 801b280:	695b      	ldr	r3, [r3, #20]
 801b282:	4a63      	ldr	r2, [pc, #396]	@ (801b410 <icmp_input+0x1f0>)
 801b284:	6812      	ldr	r2, [r2, #0]
 801b286:	4611      	mov	r1, r2
 801b288:	4618      	mov	r0, r3
 801b28a:	f000 fbed 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801b28e:	4603      	mov	r3, r0
 801b290:	2b00      	cmp	r3, #0
 801b292:	f040 80b1 	bne.w	801b3f8 <icmp_input+0x1d8>
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	891b      	ldrh	r3, [r3, #8]
 801b29a:	2b07      	cmp	r3, #7
 801b29c:	f240 80a5 	bls.w	801b3ea <icmp_input+0x1ca>
 801b2a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b2a2:	330e      	adds	r3, #14
 801b2a4:	4619      	mov	r1, r3
 801b2a6:	6878      	ldr	r0, [r7, #4]
 801b2a8:	f7f7 fe18 	bl	8012edc <pbuf_add_header>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d04b      	beq.n	801b34a <icmp_input+0x12a>
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	891a      	ldrh	r2, [r3, #8]
 801b2b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b2b8:	4413      	add	r3, r2
 801b2ba:	837b      	strh	r3, [r7, #26]
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	891b      	ldrh	r3, [r3, #8]
 801b2c0:	8b7a      	ldrh	r2, [r7, #26]
 801b2c2:	429a      	cmp	r2, r3
 801b2c4:	f0c0 809a 	bcc.w	801b3fc <icmp_input+0x1dc>
 801b2c8:	8b7b      	ldrh	r3, [r7, #26]
 801b2ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b2ce:	4619      	mov	r1, r3
 801b2d0:	200e      	movs	r0, #14
 801b2d2:	f7f7 fbb5 	bl	8012a40 <pbuf_alloc>
 801b2d6:	6178      	str	r0, [r7, #20]
 801b2d8:	697b      	ldr	r3, [r7, #20]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	f000 8090 	beq.w	801b400 <icmp_input+0x1e0>
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	895b      	ldrh	r3, [r3, #10]
 801b2e4:	461a      	mov	r2, r3
 801b2e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b2e8:	3308      	adds	r3, #8
 801b2ea:	429a      	cmp	r2, r3
 801b2ec:	d203      	bcs.n	801b2f6 <icmp_input+0xd6>
 801b2ee:	6978      	ldr	r0, [r7, #20]
 801b2f0:	f7f7 fe8a 	bl	8013008 <pbuf_free>
 801b2f4:	e085      	b.n	801b402 <icmp_input+0x1e2>
 801b2f6:	697b      	ldr	r3, [r7, #20]
 801b2f8:	685b      	ldr	r3, [r3, #4]
 801b2fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b2fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b2fe:	4618      	mov	r0, r3
 801b300:	f002 fcc3 	bl	801dc8a <memcpy>
 801b304:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b306:	4619      	mov	r1, r3
 801b308:	6978      	ldr	r0, [r7, #20]
 801b30a:	f7f7 fdf7 	bl	8012efc <pbuf_remove_header>
 801b30e:	4603      	mov	r3, r0
 801b310:	2b00      	cmp	r3, #0
 801b312:	d009      	beq.n	801b328 <icmp_input+0x108>
 801b314:	4b40      	ldr	r3, [pc, #256]	@ (801b418 <icmp_input+0x1f8>)
 801b316:	22b6      	movs	r2, #182	@ 0xb6
 801b318:	4940      	ldr	r1, [pc, #256]	@ (801b41c <icmp_input+0x1fc>)
 801b31a:	4841      	ldr	r0, [pc, #260]	@ (801b420 <icmp_input+0x200>)
 801b31c:	f002 fa34 	bl	801d788 <iprintf>
 801b320:	6978      	ldr	r0, [r7, #20]
 801b322:	f7f7 fe71 	bl	8013008 <pbuf_free>
 801b326:	e06c      	b.n	801b402 <icmp_input+0x1e2>
 801b328:	6879      	ldr	r1, [r7, #4]
 801b32a:	6978      	ldr	r0, [r7, #20]
 801b32c:	f7f7 ffa0 	bl	8013270 <pbuf_copy>
 801b330:	4603      	mov	r3, r0
 801b332:	2b00      	cmp	r3, #0
 801b334:	d003      	beq.n	801b33e <icmp_input+0x11e>
 801b336:	6978      	ldr	r0, [r7, #20]
 801b338:	f7f7 fe66 	bl	8013008 <pbuf_free>
 801b33c:	e061      	b.n	801b402 <icmp_input+0x1e2>
 801b33e:	6878      	ldr	r0, [r7, #4]
 801b340:	f7f7 fe62 	bl	8013008 <pbuf_free>
 801b344:	697b      	ldr	r3, [r7, #20]
 801b346:	607b      	str	r3, [r7, #4]
 801b348:	e00f      	b.n	801b36a <icmp_input+0x14a>
 801b34a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b34c:	330e      	adds	r3, #14
 801b34e:	4619      	mov	r1, r3
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	f7f7 fdd3 	bl	8012efc <pbuf_remove_header>
 801b356:	4603      	mov	r3, r0
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d006      	beq.n	801b36a <icmp_input+0x14a>
 801b35c:	4b2e      	ldr	r3, [pc, #184]	@ (801b418 <icmp_input+0x1f8>)
 801b35e:	22c7      	movs	r2, #199	@ 0xc7
 801b360:	4930      	ldr	r1, [pc, #192]	@ (801b424 <icmp_input+0x204>)
 801b362:	482f      	ldr	r0, [pc, #188]	@ (801b420 <icmp_input+0x200>)
 801b364:	f002 fa10 	bl	801d788 <iprintf>
 801b368:	e04b      	b.n	801b402 <icmp_input+0x1e2>
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	685b      	ldr	r3, [r3, #4]
 801b36e:	613b      	str	r3, [r7, #16]
 801b370:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b372:	4619      	mov	r1, r3
 801b374:	6878      	ldr	r0, [r7, #4]
 801b376:	f7f7 fdb1 	bl	8012edc <pbuf_add_header>
 801b37a:	4603      	mov	r3, r0
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d12b      	bne.n	801b3d8 <icmp_input+0x1b8>
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	685b      	ldr	r3, [r3, #4]
 801b384:	60fb      	str	r3, [r7, #12]
 801b386:	69fb      	ldr	r3, [r7, #28]
 801b388:	681a      	ldr	r2, [r3, #0]
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	60da      	str	r2, [r3, #12]
 801b38e:	4b20      	ldr	r3, [pc, #128]	@ (801b410 <icmp_input+0x1f0>)
 801b390:	691a      	ldr	r2, [r3, #16]
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	611a      	str	r2, [r3, #16]
 801b396:	693b      	ldr	r3, [r7, #16]
 801b398:	2200      	movs	r2, #0
 801b39a:	701a      	strb	r2, [r3, #0]
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	2200      	movs	r2, #0
 801b3a0:	709a      	strb	r2, [r3, #2]
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	70da      	strb	r2, [r3, #3]
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	22ff      	movs	r2, #255	@ 0xff
 801b3aa:	721a      	strb	r2, [r3, #8]
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	729a      	strb	r2, [r3, #10]
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	72da      	strb	r2, [r3, #11]
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	9302      	str	r3, [sp, #8]
 801b3ba:	2301      	movs	r3, #1
 801b3bc:	9301      	str	r3, [sp, #4]
 801b3be:	2300      	movs	r3, #0
 801b3c0:	9300      	str	r3, [sp, #0]
 801b3c2:	23ff      	movs	r3, #255	@ 0xff
 801b3c4:	2200      	movs	r2, #0
 801b3c6:	69f9      	ldr	r1, [r7, #28]
 801b3c8:	6878      	ldr	r0, [r7, #4]
 801b3ca:	f000 fa75 	bl	801b8b8 <ip4_output_if>
 801b3ce:	4603      	mov	r3, r0
 801b3d0:	72fb      	strb	r3, [r7, #11]
 801b3d2:	e001      	b.n	801b3d8 <icmp_input+0x1b8>
 801b3d4:	bf00      	nop
 801b3d6:	e000      	b.n	801b3da <icmp_input+0x1ba>
 801b3d8:	bf00      	nop
 801b3da:	6878      	ldr	r0, [r7, #4]
 801b3dc:	f7f7 fe14 	bl	8013008 <pbuf_free>
 801b3e0:	e013      	b.n	801b40a <icmp_input+0x1ea>
 801b3e2:	bf00      	nop
 801b3e4:	e002      	b.n	801b3ec <icmp_input+0x1cc>
 801b3e6:	bf00      	nop
 801b3e8:	e000      	b.n	801b3ec <icmp_input+0x1cc>
 801b3ea:	bf00      	nop
 801b3ec:	6878      	ldr	r0, [r7, #4]
 801b3ee:	f7f7 fe0b 	bl	8013008 <pbuf_free>
 801b3f2:	e00a      	b.n	801b40a <icmp_input+0x1ea>
 801b3f4:	bf00      	nop
 801b3f6:	e004      	b.n	801b402 <icmp_input+0x1e2>
 801b3f8:	bf00      	nop
 801b3fa:	e002      	b.n	801b402 <icmp_input+0x1e2>
 801b3fc:	bf00      	nop
 801b3fe:	e000      	b.n	801b402 <icmp_input+0x1e2>
 801b400:	bf00      	nop
 801b402:	6878      	ldr	r0, [r7, #4]
 801b404:	f7f7 fe00 	bl	8013008 <pbuf_free>
 801b408:	bf00      	nop
 801b40a:	3728      	adds	r7, #40	@ 0x28
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	2000bc88 	.word	0x2000bc88
 801b414:	2000bc9c 	.word	0x2000bc9c
 801b418:	0802317c 	.word	0x0802317c
 801b41c:	080231b4 	.word	0x080231b4
 801b420:	080231ec 	.word	0x080231ec
 801b424:	08023214 	.word	0x08023214

0801b428 <icmp_dest_unreach>:
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	460b      	mov	r3, r1
 801b432:	70fb      	strb	r3, [r7, #3]
 801b434:	78fb      	ldrb	r3, [r7, #3]
 801b436:	461a      	mov	r2, r3
 801b438:	2103      	movs	r1, #3
 801b43a:	6878      	ldr	r0, [r7, #4]
 801b43c:	f000 f814 	bl	801b468 <icmp_send_response>
 801b440:	bf00      	nop
 801b442:	3708      	adds	r7, #8
 801b444:	46bd      	mov	sp, r7
 801b446:	bd80      	pop	{r7, pc}

0801b448 <icmp_time_exceeded>:
 801b448:	b580      	push	{r7, lr}
 801b44a:	b082      	sub	sp, #8
 801b44c:	af00      	add	r7, sp, #0
 801b44e:	6078      	str	r0, [r7, #4]
 801b450:	460b      	mov	r3, r1
 801b452:	70fb      	strb	r3, [r7, #3]
 801b454:	78fb      	ldrb	r3, [r7, #3]
 801b456:	461a      	mov	r2, r3
 801b458:	210b      	movs	r1, #11
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	f000 f804 	bl	801b468 <icmp_send_response>
 801b460:	bf00      	nop
 801b462:	3708      	adds	r7, #8
 801b464:	46bd      	mov	sp, r7
 801b466:	bd80      	pop	{r7, pc}

0801b468 <icmp_send_response>:
 801b468:	b580      	push	{r7, lr}
 801b46a:	b08c      	sub	sp, #48	@ 0x30
 801b46c:	af04      	add	r7, sp, #16
 801b46e:	6078      	str	r0, [r7, #4]
 801b470:	460b      	mov	r3, r1
 801b472:	70fb      	strb	r3, [r7, #3]
 801b474:	4613      	mov	r3, r2
 801b476:	70bb      	strb	r3, [r7, #2]
 801b478:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b47c:	2124      	movs	r1, #36	@ 0x24
 801b47e:	2022      	movs	r0, #34	@ 0x22
 801b480:	f7f7 fade 	bl	8012a40 <pbuf_alloc>
 801b484:	61f8      	str	r0, [r7, #28]
 801b486:	69fb      	ldr	r3, [r7, #28]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d04c      	beq.n	801b526 <icmp_send_response+0xbe>
 801b48c:	69fb      	ldr	r3, [r7, #28]
 801b48e:	895b      	ldrh	r3, [r3, #10]
 801b490:	2b23      	cmp	r3, #35	@ 0x23
 801b492:	d806      	bhi.n	801b4a2 <icmp_send_response+0x3a>
 801b494:	4b26      	ldr	r3, [pc, #152]	@ (801b530 <icmp_send_response+0xc8>)
 801b496:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b49a:	4926      	ldr	r1, [pc, #152]	@ (801b534 <icmp_send_response+0xcc>)
 801b49c:	4826      	ldr	r0, [pc, #152]	@ (801b538 <icmp_send_response+0xd0>)
 801b49e:	f002 f973 	bl	801d788 <iprintf>
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	685b      	ldr	r3, [r3, #4]
 801b4a6:	61bb      	str	r3, [r7, #24]
 801b4a8:	69fb      	ldr	r3, [r7, #28]
 801b4aa:	685b      	ldr	r3, [r3, #4]
 801b4ac:	617b      	str	r3, [r7, #20]
 801b4ae:	697b      	ldr	r3, [r7, #20]
 801b4b0:	78fa      	ldrb	r2, [r7, #3]
 801b4b2:	701a      	strb	r2, [r3, #0]
 801b4b4:	697b      	ldr	r3, [r7, #20]
 801b4b6:	78ba      	ldrb	r2, [r7, #2]
 801b4b8:	705a      	strb	r2, [r3, #1]
 801b4ba:	697b      	ldr	r3, [r7, #20]
 801b4bc:	2200      	movs	r2, #0
 801b4be:	711a      	strb	r2, [r3, #4]
 801b4c0:	2200      	movs	r2, #0
 801b4c2:	715a      	strb	r2, [r3, #5]
 801b4c4:	697b      	ldr	r3, [r7, #20]
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	719a      	strb	r2, [r3, #6]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	71da      	strb	r2, [r3, #7]
 801b4ce:	69fb      	ldr	r3, [r7, #28]
 801b4d0:	685b      	ldr	r3, [r3, #4]
 801b4d2:	f103 0008 	add.w	r0, r3, #8
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	221c      	movs	r2, #28
 801b4dc:	4619      	mov	r1, r3
 801b4de:	f002 fbd4 	bl	801dc8a <memcpy>
 801b4e2:	69bb      	ldr	r3, [r7, #24]
 801b4e4:	68db      	ldr	r3, [r3, #12]
 801b4e6:	60fb      	str	r3, [r7, #12]
 801b4e8:	f107 030c 	add.w	r3, r7, #12
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f000 f825 	bl	801b53c <ip4_route>
 801b4f2:	6138      	str	r0, [r7, #16]
 801b4f4:	693b      	ldr	r3, [r7, #16]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d011      	beq.n	801b51e <icmp_send_response+0xb6>
 801b4fa:	697b      	ldr	r3, [r7, #20]
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	709a      	strb	r2, [r3, #2]
 801b500:	2200      	movs	r2, #0
 801b502:	70da      	strb	r2, [r3, #3]
 801b504:	f107 020c 	add.w	r2, r7, #12
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	9302      	str	r3, [sp, #8]
 801b50c:	2301      	movs	r3, #1
 801b50e:	9301      	str	r3, [sp, #4]
 801b510:	2300      	movs	r3, #0
 801b512:	9300      	str	r3, [sp, #0]
 801b514:	23ff      	movs	r3, #255	@ 0xff
 801b516:	2100      	movs	r1, #0
 801b518:	69f8      	ldr	r0, [r7, #28]
 801b51a:	f000 f9cd 	bl	801b8b8 <ip4_output_if>
 801b51e:	69f8      	ldr	r0, [r7, #28]
 801b520:	f7f7 fd72 	bl	8013008 <pbuf_free>
 801b524:	e000      	b.n	801b528 <icmp_send_response+0xc0>
 801b526:	bf00      	nop
 801b528:	3720      	adds	r7, #32
 801b52a:	46bd      	mov	sp, r7
 801b52c:	bd80      	pop	{r7, pc}
 801b52e:	bf00      	nop
 801b530:	0802317c 	.word	0x0802317c
 801b534:	08023248 	.word	0x08023248
 801b538:	080231ec 	.word	0x080231ec

0801b53c <ip4_route>:
 801b53c:	b480      	push	{r7}
 801b53e:	b085      	sub	sp, #20
 801b540:	af00      	add	r7, sp, #0
 801b542:	6078      	str	r0, [r7, #4]
 801b544:	4b33      	ldr	r3, [pc, #204]	@ (801b614 <ip4_route+0xd8>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	60fb      	str	r3, [r7, #12]
 801b54a:	e036      	b.n	801b5ba <ip4_route+0x7e>
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b552:	f003 0301 	and.w	r3, r3, #1
 801b556:	b2db      	uxtb	r3, r3
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d02b      	beq.n	801b5b4 <ip4_route+0x78>
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b562:	089b      	lsrs	r3, r3, #2
 801b564:	f003 0301 	and.w	r3, r3, #1
 801b568:	b2db      	uxtb	r3, r3
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d022      	beq.n	801b5b4 <ip4_route+0x78>
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	3304      	adds	r3, #4
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	2b00      	cmp	r3, #0
 801b576:	d01d      	beq.n	801b5b4 <ip4_route+0x78>
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	681a      	ldr	r2, [r3, #0]
 801b57c:	68fb      	ldr	r3, [r7, #12]
 801b57e:	3304      	adds	r3, #4
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	405a      	eors	r2, r3
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	3308      	adds	r3, #8
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	4013      	ands	r3, r2
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d101      	bne.n	801b594 <ip4_route+0x58>
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	e038      	b.n	801b606 <ip4_route+0xca>
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b59a:	f003 0302 	and.w	r3, r3, #2
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d108      	bne.n	801b5b4 <ip4_route+0x78>
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	681a      	ldr	r2, [r3, #0]
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	330c      	adds	r3, #12
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	429a      	cmp	r2, r3
 801b5ae:	d101      	bne.n	801b5b4 <ip4_route+0x78>
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	e028      	b.n	801b606 <ip4_route+0xca>
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	60fb      	str	r3, [r7, #12]
 801b5ba:	68fb      	ldr	r3, [r7, #12]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d1c5      	bne.n	801b54c <ip4_route+0x10>
 801b5c0:	4b15      	ldr	r3, [pc, #84]	@ (801b618 <ip4_route+0xdc>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d01a      	beq.n	801b5fe <ip4_route+0xc2>
 801b5c8:	4b13      	ldr	r3, [pc, #76]	@ (801b618 <ip4_route+0xdc>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b5d0:	f003 0301 	and.w	r3, r3, #1
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d012      	beq.n	801b5fe <ip4_route+0xc2>
 801b5d8:	4b0f      	ldr	r3, [pc, #60]	@ (801b618 <ip4_route+0xdc>)
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b5e0:	f003 0304 	and.w	r3, r3, #4
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d00a      	beq.n	801b5fe <ip4_route+0xc2>
 801b5e8:	4b0b      	ldr	r3, [pc, #44]	@ (801b618 <ip4_route+0xdc>)
 801b5ea:	681b      	ldr	r3, [r3, #0]
 801b5ec:	3304      	adds	r3, #4
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	2b00      	cmp	r3, #0
 801b5f2:	d004      	beq.n	801b5fe <ip4_route+0xc2>
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	b2db      	uxtb	r3, r3
 801b5fa:	2b7f      	cmp	r3, #127	@ 0x7f
 801b5fc:	d101      	bne.n	801b602 <ip4_route+0xc6>
 801b5fe:	2300      	movs	r3, #0
 801b600:	e001      	b.n	801b606 <ip4_route+0xca>
 801b602:	4b05      	ldr	r3, [pc, #20]	@ (801b618 <ip4_route+0xdc>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	4618      	mov	r0, r3
 801b608:	3714      	adds	r7, #20
 801b60a:	46bd      	mov	sp, r7
 801b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b610:	4770      	bx	lr
 801b612:	bf00      	nop
 801b614:	2000f3d0 	.word	0x2000f3d0
 801b618:	2000f3d4 	.word	0x2000f3d4

0801b61c <ip4_input_accept>:
 801b61c:	b580      	push	{r7, lr}
 801b61e:	b082      	sub	sp, #8
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b62a:	f003 0301 	and.w	r3, r3, #1
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	2b00      	cmp	r3, #0
 801b632:	d016      	beq.n	801b662 <ip4_input_accept+0x46>
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	3304      	adds	r3, #4
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d011      	beq.n	801b662 <ip4_input_accept+0x46>
 801b63e:	4b0b      	ldr	r3, [pc, #44]	@ (801b66c <ip4_input_accept+0x50>)
 801b640:	695a      	ldr	r2, [r3, #20]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	3304      	adds	r3, #4
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	429a      	cmp	r2, r3
 801b64a:	d008      	beq.n	801b65e <ip4_input_accept+0x42>
 801b64c:	4b07      	ldr	r3, [pc, #28]	@ (801b66c <ip4_input_accept+0x50>)
 801b64e:	695b      	ldr	r3, [r3, #20]
 801b650:	6879      	ldr	r1, [r7, #4]
 801b652:	4618      	mov	r0, r3
 801b654:	f000 fa08 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801b658:	4603      	mov	r3, r0
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d001      	beq.n	801b662 <ip4_input_accept+0x46>
 801b65e:	2301      	movs	r3, #1
 801b660:	e000      	b.n	801b664 <ip4_input_accept+0x48>
 801b662:	2300      	movs	r3, #0
 801b664:	4618      	mov	r0, r3
 801b666:	3708      	adds	r7, #8
 801b668:	46bd      	mov	sp, r7
 801b66a:	bd80      	pop	{r7, pc}
 801b66c:	2000bc88 	.word	0x2000bc88

0801b670 <ip4_input>:
 801b670:	b580      	push	{r7, lr}
 801b672:	b086      	sub	sp, #24
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
 801b678:	6039      	str	r1, [r7, #0]
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	685b      	ldr	r3, [r3, #4]
 801b67e:	617b      	str	r3, [r7, #20]
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	781b      	ldrb	r3, [r3, #0]
 801b684:	091b      	lsrs	r3, r3, #4
 801b686:	b2db      	uxtb	r3, r3
 801b688:	2b04      	cmp	r3, #4
 801b68a:	d004      	beq.n	801b696 <ip4_input+0x26>
 801b68c:	6878      	ldr	r0, [r7, #4]
 801b68e:	f7f7 fcbb 	bl	8013008 <pbuf_free>
 801b692:	2300      	movs	r3, #0
 801b694:	e107      	b.n	801b8a6 <ip4_input+0x236>
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	781b      	ldrb	r3, [r3, #0]
 801b69a:	f003 030f 	and.w	r3, r3, #15
 801b69e:	b2db      	uxtb	r3, r3
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	b2db      	uxtb	r3, r3
 801b6a4:	81fb      	strh	r3, [r7, #14]
 801b6a6:	697b      	ldr	r3, [r7, #20]
 801b6a8:	885b      	ldrh	r3, [r3, #2]
 801b6aa:	b29b      	uxth	r3, r3
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	f7f6 f883 	bl	80117b8 <lwip_htons>
 801b6b2:	4603      	mov	r3, r0
 801b6b4:	81bb      	strh	r3, [r7, #12]
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	891b      	ldrh	r3, [r3, #8]
 801b6ba:	89ba      	ldrh	r2, [r7, #12]
 801b6bc:	429a      	cmp	r2, r3
 801b6be:	d204      	bcs.n	801b6ca <ip4_input+0x5a>
 801b6c0:	89bb      	ldrh	r3, [r7, #12]
 801b6c2:	4619      	mov	r1, r3
 801b6c4:	6878      	ldr	r0, [r7, #4]
 801b6c6:	f7f7 fb19 	bl	8012cfc <pbuf_realloc>
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	895b      	ldrh	r3, [r3, #10]
 801b6ce:	89fa      	ldrh	r2, [r7, #14]
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	d807      	bhi.n	801b6e4 <ip4_input+0x74>
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	891b      	ldrh	r3, [r3, #8]
 801b6d8:	89ba      	ldrh	r2, [r7, #12]
 801b6da:	429a      	cmp	r2, r3
 801b6dc:	d802      	bhi.n	801b6e4 <ip4_input+0x74>
 801b6de:	89fb      	ldrh	r3, [r7, #14]
 801b6e0:	2b13      	cmp	r3, #19
 801b6e2:	d804      	bhi.n	801b6ee <ip4_input+0x7e>
 801b6e4:	6878      	ldr	r0, [r7, #4]
 801b6e6:	f7f7 fc8f 	bl	8013008 <pbuf_free>
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	e0db      	b.n	801b8a6 <ip4_input+0x236>
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	691b      	ldr	r3, [r3, #16]
 801b6f2:	4a6f      	ldr	r2, [pc, #444]	@ (801b8b0 <ip4_input+0x240>)
 801b6f4:	6153      	str	r3, [r2, #20]
 801b6f6:	697b      	ldr	r3, [r7, #20]
 801b6f8:	68db      	ldr	r3, [r3, #12]
 801b6fa:	4a6d      	ldr	r2, [pc, #436]	@ (801b8b0 <ip4_input+0x240>)
 801b6fc:	6113      	str	r3, [r2, #16]
 801b6fe:	4b6c      	ldr	r3, [pc, #432]	@ (801b8b0 <ip4_input+0x240>)
 801b700:	695b      	ldr	r3, [r3, #20]
 801b702:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b706:	2be0      	cmp	r3, #224	@ 0xe0
 801b708:	d112      	bne.n	801b730 <ip4_input+0xc0>
 801b70a:	683b      	ldr	r3, [r7, #0]
 801b70c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b710:	f003 0301 	and.w	r3, r3, #1
 801b714:	b2db      	uxtb	r3, r3
 801b716:	2b00      	cmp	r3, #0
 801b718:	d007      	beq.n	801b72a <ip4_input+0xba>
 801b71a:	683b      	ldr	r3, [r7, #0]
 801b71c:	3304      	adds	r3, #4
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	2b00      	cmp	r3, #0
 801b722:	d002      	beq.n	801b72a <ip4_input+0xba>
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	613b      	str	r3, [r7, #16]
 801b728:	e02a      	b.n	801b780 <ip4_input+0x110>
 801b72a:	2300      	movs	r3, #0
 801b72c:	613b      	str	r3, [r7, #16]
 801b72e:	e027      	b.n	801b780 <ip4_input+0x110>
 801b730:	6838      	ldr	r0, [r7, #0]
 801b732:	f7ff ff73 	bl	801b61c <ip4_input_accept>
 801b736:	4603      	mov	r3, r0
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d002      	beq.n	801b742 <ip4_input+0xd2>
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	613b      	str	r3, [r7, #16]
 801b740:	e01e      	b.n	801b780 <ip4_input+0x110>
 801b742:	2300      	movs	r3, #0
 801b744:	613b      	str	r3, [r7, #16]
 801b746:	4b5a      	ldr	r3, [pc, #360]	@ (801b8b0 <ip4_input+0x240>)
 801b748:	695b      	ldr	r3, [r3, #20]
 801b74a:	b2db      	uxtb	r3, r3
 801b74c:	2b7f      	cmp	r3, #127	@ 0x7f
 801b74e:	d017      	beq.n	801b780 <ip4_input+0x110>
 801b750:	4b58      	ldr	r3, [pc, #352]	@ (801b8b4 <ip4_input+0x244>)
 801b752:	681b      	ldr	r3, [r3, #0]
 801b754:	613b      	str	r3, [r7, #16]
 801b756:	e00e      	b.n	801b776 <ip4_input+0x106>
 801b758:	693a      	ldr	r2, [r7, #16]
 801b75a:	683b      	ldr	r3, [r7, #0]
 801b75c:	429a      	cmp	r2, r3
 801b75e:	d006      	beq.n	801b76e <ip4_input+0xfe>
 801b760:	6938      	ldr	r0, [r7, #16]
 801b762:	f7ff ff5b 	bl	801b61c <ip4_input_accept>
 801b766:	4603      	mov	r3, r0
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d108      	bne.n	801b77e <ip4_input+0x10e>
 801b76c:	e000      	b.n	801b770 <ip4_input+0x100>
 801b76e:	bf00      	nop
 801b770:	693b      	ldr	r3, [r7, #16]
 801b772:	681b      	ldr	r3, [r3, #0]
 801b774:	613b      	str	r3, [r7, #16]
 801b776:	693b      	ldr	r3, [r7, #16]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d1ed      	bne.n	801b758 <ip4_input+0xe8>
 801b77c:	e000      	b.n	801b780 <ip4_input+0x110>
 801b77e:	bf00      	nop
 801b780:	4b4b      	ldr	r3, [pc, #300]	@ (801b8b0 <ip4_input+0x240>)
 801b782:	691b      	ldr	r3, [r3, #16]
 801b784:	6839      	ldr	r1, [r7, #0]
 801b786:	4618      	mov	r0, r3
 801b788:	f000 f96e 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801b78c:	4603      	mov	r3, r0
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d105      	bne.n	801b79e <ip4_input+0x12e>
 801b792:	4b47      	ldr	r3, [pc, #284]	@ (801b8b0 <ip4_input+0x240>)
 801b794:	691b      	ldr	r3, [r3, #16]
 801b796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b79a:	2be0      	cmp	r3, #224	@ 0xe0
 801b79c:	d104      	bne.n	801b7a8 <ip4_input+0x138>
 801b79e:	6878      	ldr	r0, [r7, #4]
 801b7a0:	f7f7 fc32 	bl	8013008 <pbuf_free>
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	e07e      	b.n	801b8a6 <ip4_input+0x236>
 801b7a8:	693b      	ldr	r3, [r7, #16]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d104      	bne.n	801b7b8 <ip4_input+0x148>
 801b7ae:	6878      	ldr	r0, [r7, #4]
 801b7b0:	f7f7 fc2a 	bl	8013008 <pbuf_free>
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	e076      	b.n	801b8a6 <ip4_input+0x236>
 801b7b8:	697b      	ldr	r3, [r7, #20]
 801b7ba:	88db      	ldrh	r3, [r3, #6]
 801b7bc:	b29b      	uxth	r3, r3
 801b7be:	461a      	mov	r2, r3
 801b7c0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b7c4:	4013      	ands	r3, r2
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d00b      	beq.n	801b7e2 <ip4_input+0x172>
 801b7ca:	6878      	ldr	r0, [r7, #4]
 801b7cc:	f000 fc92 	bl	801c0f4 <ip4_reass>
 801b7d0:	6078      	str	r0, [r7, #4]
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d101      	bne.n	801b7dc <ip4_input+0x16c>
 801b7d8:	2300      	movs	r3, #0
 801b7da:	e064      	b.n	801b8a6 <ip4_input+0x236>
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	685b      	ldr	r3, [r3, #4]
 801b7e0:	617b      	str	r3, [r7, #20]
 801b7e2:	4a33      	ldr	r2, [pc, #204]	@ (801b8b0 <ip4_input+0x240>)
 801b7e4:	693b      	ldr	r3, [r7, #16]
 801b7e6:	6013      	str	r3, [r2, #0]
 801b7e8:	4a31      	ldr	r2, [pc, #196]	@ (801b8b0 <ip4_input+0x240>)
 801b7ea:	683b      	ldr	r3, [r7, #0]
 801b7ec:	6053      	str	r3, [r2, #4]
 801b7ee:	4a30      	ldr	r2, [pc, #192]	@ (801b8b0 <ip4_input+0x240>)
 801b7f0:	697b      	ldr	r3, [r7, #20]
 801b7f2:	6093      	str	r3, [r2, #8]
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	781b      	ldrb	r3, [r3, #0]
 801b7f8:	f003 030f 	and.w	r3, r3, #15
 801b7fc:	b2db      	uxtb	r3, r3
 801b7fe:	009b      	lsls	r3, r3, #2
 801b800:	b2db      	uxtb	r3, r3
 801b802:	461a      	mov	r2, r3
 801b804:	4b2a      	ldr	r3, [pc, #168]	@ (801b8b0 <ip4_input+0x240>)
 801b806:	819a      	strh	r2, [r3, #12]
 801b808:	89fb      	ldrh	r3, [r7, #14]
 801b80a:	4619      	mov	r1, r3
 801b80c:	6878      	ldr	r0, [r7, #4]
 801b80e:	f7f7 fb75 	bl	8012efc <pbuf_remove_header>
 801b812:	697b      	ldr	r3, [r7, #20]
 801b814:	7a5b      	ldrb	r3, [r3, #9]
 801b816:	2b11      	cmp	r3, #17
 801b818:	d006      	beq.n	801b828 <ip4_input+0x1b8>
 801b81a:	2b11      	cmp	r3, #17
 801b81c:	dc13      	bgt.n	801b846 <ip4_input+0x1d6>
 801b81e:	2b01      	cmp	r3, #1
 801b820:	d00c      	beq.n	801b83c <ip4_input+0x1cc>
 801b822:	2b06      	cmp	r3, #6
 801b824:	d005      	beq.n	801b832 <ip4_input+0x1c2>
 801b826:	e00e      	b.n	801b846 <ip4_input+0x1d6>
 801b828:	6839      	ldr	r1, [r7, #0]
 801b82a:	6878      	ldr	r0, [r7, #4]
 801b82c:	f7fe f970 	bl	8019b10 <udp_input>
 801b830:	e026      	b.n	801b880 <ip4_input+0x210>
 801b832:	6839      	ldr	r1, [r7, #0]
 801b834:	6878      	ldr	r0, [r7, #4]
 801b836:	f7f9 fd2f 	bl	8015298 <tcp_input>
 801b83a:	e021      	b.n	801b880 <ip4_input+0x210>
 801b83c:	6839      	ldr	r1, [r7, #0]
 801b83e:	6878      	ldr	r0, [r7, #4]
 801b840:	f7ff fcee 	bl	801b220 <icmp_input>
 801b844:	e01c      	b.n	801b880 <ip4_input+0x210>
 801b846:	4b1a      	ldr	r3, [pc, #104]	@ (801b8b0 <ip4_input+0x240>)
 801b848:	695b      	ldr	r3, [r3, #20]
 801b84a:	6939      	ldr	r1, [r7, #16]
 801b84c:	4618      	mov	r0, r3
 801b84e:	f000 f90b 	bl	801ba68 <ip4_addr_isbroadcast_u32>
 801b852:	4603      	mov	r3, r0
 801b854:	2b00      	cmp	r3, #0
 801b856:	d10f      	bne.n	801b878 <ip4_input+0x208>
 801b858:	4b15      	ldr	r3, [pc, #84]	@ (801b8b0 <ip4_input+0x240>)
 801b85a:	695b      	ldr	r3, [r3, #20]
 801b85c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b860:	2be0      	cmp	r3, #224	@ 0xe0
 801b862:	d009      	beq.n	801b878 <ip4_input+0x208>
 801b864:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b868:	4619      	mov	r1, r3
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f7f7 fbb9 	bl	8012fe2 <pbuf_header_force>
 801b870:	2102      	movs	r1, #2
 801b872:	6878      	ldr	r0, [r7, #4]
 801b874:	f7ff fdd8 	bl	801b428 <icmp_dest_unreach>
 801b878:	6878      	ldr	r0, [r7, #4]
 801b87a:	f7f7 fbc5 	bl	8013008 <pbuf_free>
 801b87e:	bf00      	nop
 801b880:	4b0b      	ldr	r3, [pc, #44]	@ (801b8b0 <ip4_input+0x240>)
 801b882:	2200      	movs	r2, #0
 801b884:	601a      	str	r2, [r3, #0]
 801b886:	4b0a      	ldr	r3, [pc, #40]	@ (801b8b0 <ip4_input+0x240>)
 801b888:	2200      	movs	r2, #0
 801b88a:	605a      	str	r2, [r3, #4]
 801b88c:	4b08      	ldr	r3, [pc, #32]	@ (801b8b0 <ip4_input+0x240>)
 801b88e:	2200      	movs	r2, #0
 801b890:	609a      	str	r2, [r3, #8]
 801b892:	4b07      	ldr	r3, [pc, #28]	@ (801b8b0 <ip4_input+0x240>)
 801b894:	2200      	movs	r2, #0
 801b896:	819a      	strh	r2, [r3, #12]
 801b898:	4b05      	ldr	r3, [pc, #20]	@ (801b8b0 <ip4_input+0x240>)
 801b89a:	2200      	movs	r2, #0
 801b89c:	611a      	str	r2, [r3, #16]
 801b89e:	4b04      	ldr	r3, [pc, #16]	@ (801b8b0 <ip4_input+0x240>)
 801b8a0:	2200      	movs	r2, #0
 801b8a2:	615a      	str	r2, [r3, #20]
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	3718      	adds	r7, #24
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	bd80      	pop	{r7, pc}
 801b8ae:	bf00      	nop
 801b8b0:	2000bc88 	.word	0x2000bc88
 801b8b4:	2000f3d0 	.word	0x2000f3d0

0801b8b8 <ip4_output_if>:
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b08a      	sub	sp, #40	@ 0x28
 801b8bc:	af04      	add	r7, sp, #16
 801b8be:	60f8      	str	r0, [r7, #12]
 801b8c0:	60b9      	str	r1, [r7, #8]
 801b8c2:	607a      	str	r2, [r7, #4]
 801b8c4:	70fb      	strb	r3, [r7, #3]
 801b8c6:	68bb      	ldr	r3, [r7, #8]
 801b8c8:	617b      	str	r3, [r7, #20]
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	d009      	beq.n	801b8e4 <ip4_output_if+0x2c>
 801b8d0:	68bb      	ldr	r3, [r7, #8]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d003      	beq.n	801b8de <ip4_output_if+0x26>
 801b8d6:	68bb      	ldr	r3, [r7, #8]
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d102      	bne.n	801b8e4 <ip4_output_if+0x2c>
 801b8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8e0:	3304      	adds	r3, #4
 801b8e2:	617b      	str	r3, [r7, #20]
 801b8e4:	78fa      	ldrb	r2, [r7, #3]
 801b8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8e8:	9302      	str	r3, [sp, #8]
 801b8ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b8ee:	9301      	str	r3, [sp, #4]
 801b8f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b8f4:	9300      	str	r3, [sp, #0]
 801b8f6:	4613      	mov	r3, r2
 801b8f8:	687a      	ldr	r2, [r7, #4]
 801b8fa:	6979      	ldr	r1, [r7, #20]
 801b8fc:	68f8      	ldr	r0, [r7, #12]
 801b8fe:	f000 f805 	bl	801b90c <ip4_output_if_src>
 801b902:	4603      	mov	r3, r0
 801b904:	4618      	mov	r0, r3
 801b906:	3718      	adds	r7, #24
 801b908:	46bd      	mov	sp, r7
 801b90a:	bd80      	pop	{r7, pc}

0801b90c <ip4_output_if_src>:
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b088      	sub	sp, #32
 801b910:	af00      	add	r7, sp, #0
 801b912:	60f8      	str	r0, [r7, #12]
 801b914:	60b9      	str	r1, [r7, #8]
 801b916:	607a      	str	r2, [r7, #4]
 801b918:	70fb      	strb	r3, [r7, #3]
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	7b9b      	ldrb	r3, [r3, #14]
 801b91e:	2b01      	cmp	r3, #1
 801b920:	d006      	beq.n	801b930 <ip4_output_if_src+0x24>
 801b922:	4b4b      	ldr	r3, [pc, #300]	@ (801ba50 <ip4_output_if_src+0x144>)
 801b924:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b928:	494a      	ldr	r1, [pc, #296]	@ (801ba54 <ip4_output_if_src+0x148>)
 801b92a:	484b      	ldr	r0, [pc, #300]	@ (801ba58 <ip4_output_if_src+0x14c>)
 801b92c:	f001 ff2c 	bl	801d788 <iprintf>
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	2b00      	cmp	r3, #0
 801b934:	d060      	beq.n	801b9f8 <ip4_output_if_src+0xec>
 801b936:	2314      	movs	r3, #20
 801b938:	837b      	strh	r3, [r7, #26]
 801b93a:	2114      	movs	r1, #20
 801b93c:	68f8      	ldr	r0, [r7, #12]
 801b93e:	f7f7 facd 	bl	8012edc <pbuf_add_header>
 801b942:	4603      	mov	r3, r0
 801b944:	2b00      	cmp	r3, #0
 801b946:	d002      	beq.n	801b94e <ip4_output_if_src+0x42>
 801b948:	f06f 0301 	mvn.w	r3, #1
 801b94c:	e07c      	b.n	801ba48 <ip4_output_if_src+0x13c>
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	685b      	ldr	r3, [r3, #4]
 801b952:	61fb      	str	r3, [r7, #28]
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	895b      	ldrh	r3, [r3, #10]
 801b958:	2b13      	cmp	r3, #19
 801b95a:	d806      	bhi.n	801b96a <ip4_output_if_src+0x5e>
 801b95c:	4b3c      	ldr	r3, [pc, #240]	@ (801ba50 <ip4_output_if_src+0x144>)
 801b95e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b962:	493e      	ldr	r1, [pc, #248]	@ (801ba5c <ip4_output_if_src+0x150>)
 801b964:	483c      	ldr	r0, [pc, #240]	@ (801ba58 <ip4_output_if_src+0x14c>)
 801b966:	f001 ff0f 	bl	801d788 <iprintf>
 801b96a:	69fb      	ldr	r3, [r7, #28]
 801b96c:	78fa      	ldrb	r2, [r7, #3]
 801b96e:	721a      	strb	r2, [r3, #8]
 801b970:	69fb      	ldr	r3, [r7, #28]
 801b972:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b976:	725a      	strb	r2, [r3, #9]
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681a      	ldr	r2, [r3, #0]
 801b97c:	69fb      	ldr	r3, [r7, #28]
 801b97e:	611a      	str	r2, [r3, #16]
 801b980:	8b7b      	ldrh	r3, [r7, #26]
 801b982:	089b      	lsrs	r3, r3, #2
 801b984:	b29b      	uxth	r3, r3
 801b986:	b2db      	uxtb	r3, r3
 801b988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b98c:	b2da      	uxtb	r2, r3
 801b98e:	69fb      	ldr	r3, [r7, #28]
 801b990:	701a      	strb	r2, [r3, #0]
 801b992:	69fb      	ldr	r3, [r7, #28]
 801b994:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b998:	705a      	strb	r2, [r3, #1]
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	891b      	ldrh	r3, [r3, #8]
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7f5 ff0a 	bl	80117b8 <lwip_htons>
 801b9a4:	4603      	mov	r3, r0
 801b9a6:	461a      	mov	r2, r3
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	805a      	strh	r2, [r3, #2]
 801b9ac:	69fb      	ldr	r3, [r7, #28]
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	719a      	strb	r2, [r3, #6]
 801b9b2:	2200      	movs	r2, #0
 801b9b4:	71da      	strb	r2, [r3, #7]
 801b9b6:	4b2a      	ldr	r3, [pc, #168]	@ (801ba60 <ip4_output_if_src+0x154>)
 801b9b8:	881b      	ldrh	r3, [r3, #0]
 801b9ba:	4618      	mov	r0, r3
 801b9bc:	f7f5 fefc 	bl	80117b8 <lwip_htons>
 801b9c0:	4603      	mov	r3, r0
 801b9c2:	461a      	mov	r2, r3
 801b9c4:	69fb      	ldr	r3, [r7, #28]
 801b9c6:	809a      	strh	r2, [r3, #4]
 801b9c8:	4b25      	ldr	r3, [pc, #148]	@ (801ba60 <ip4_output_if_src+0x154>)
 801b9ca:	881b      	ldrh	r3, [r3, #0]
 801b9cc:	3301      	adds	r3, #1
 801b9ce:	b29a      	uxth	r2, r3
 801b9d0:	4b23      	ldr	r3, [pc, #140]	@ (801ba60 <ip4_output_if_src+0x154>)
 801b9d2:	801a      	strh	r2, [r3, #0]
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	d104      	bne.n	801b9e4 <ip4_output_if_src+0xd8>
 801b9da:	4b22      	ldr	r3, [pc, #136]	@ (801ba64 <ip4_output_if_src+0x158>)
 801b9dc:	681a      	ldr	r2, [r3, #0]
 801b9de:	69fb      	ldr	r3, [r7, #28]
 801b9e0:	60da      	str	r2, [r3, #12]
 801b9e2:	e003      	b.n	801b9ec <ip4_output_if_src+0xe0>
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	681a      	ldr	r2, [r3, #0]
 801b9e8:	69fb      	ldr	r3, [r7, #28]
 801b9ea:	60da      	str	r2, [r3, #12]
 801b9ec:	69fb      	ldr	r3, [r7, #28]
 801b9ee:	2200      	movs	r2, #0
 801b9f0:	729a      	strb	r2, [r3, #10]
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	72da      	strb	r2, [r3, #11]
 801b9f6:	e00f      	b.n	801ba18 <ip4_output_if_src+0x10c>
 801b9f8:	68fb      	ldr	r3, [r7, #12]
 801b9fa:	895b      	ldrh	r3, [r3, #10]
 801b9fc:	2b13      	cmp	r3, #19
 801b9fe:	d802      	bhi.n	801ba06 <ip4_output_if_src+0xfa>
 801ba00:	f06f 0301 	mvn.w	r3, #1
 801ba04:	e020      	b.n	801ba48 <ip4_output_if_src+0x13c>
 801ba06:	68fb      	ldr	r3, [r7, #12]
 801ba08:	685b      	ldr	r3, [r3, #4]
 801ba0a:	61fb      	str	r3, [r7, #28]
 801ba0c:	69fb      	ldr	r3, [r7, #28]
 801ba0e:	691b      	ldr	r3, [r3, #16]
 801ba10:	617b      	str	r3, [r7, #20]
 801ba12:	f107 0314 	add.w	r3, r7, #20
 801ba16:	607b      	str	r3, [r7, #4]
 801ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d00c      	beq.n	801ba3a <ip4_output_if_src+0x12e>
 801ba20:	68fb      	ldr	r3, [r7, #12]
 801ba22:	891a      	ldrh	r2, [r3, #8]
 801ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ba28:	429a      	cmp	r2, r3
 801ba2a:	d906      	bls.n	801ba3a <ip4_output_if_src+0x12e>
 801ba2c:	687a      	ldr	r2, [r7, #4]
 801ba2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ba30:	68f8      	ldr	r0, [r7, #12]
 801ba32:	f000 fd53 	bl	801c4dc <ip4_frag>
 801ba36:	4603      	mov	r3, r0
 801ba38:	e006      	b.n	801ba48 <ip4_output_if_src+0x13c>
 801ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ba3c:	695b      	ldr	r3, [r3, #20]
 801ba3e:	687a      	ldr	r2, [r7, #4]
 801ba40:	68f9      	ldr	r1, [r7, #12]
 801ba42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ba44:	4798      	blx	r3
 801ba46:	4603      	mov	r3, r0
 801ba48:	4618      	mov	r0, r3
 801ba4a:	3720      	adds	r7, #32
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	bd80      	pop	{r7, pc}
 801ba50:	08023274 	.word	0x08023274
 801ba54:	080232a8 	.word	0x080232a8
 801ba58:	080232b4 	.word	0x080232b4
 801ba5c:	080232dc 	.word	0x080232dc
 801ba60:	2000f52e 	.word	0x2000f52e
 801ba64:	080243c0 	.word	0x080243c0

0801ba68 <ip4_addr_isbroadcast_u32>:
 801ba68:	b480      	push	{r7}
 801ba6a:	b085      	sub	sp, #20
 801ba6c:	af00      	add	r7, sp, #0
 801ba6e:	6078      	str	r0, [r7, #4]
 801ba70:	6039      	str	r1, [r7, #0]
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	60fb      	str	r3, [r7, #12]
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba7c:	d002      	beq.n	801ba84 <ip4_addr_isbroadcast_u32+0x1c>
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	2b00      	cmp	r3, #0
 801ba82:	d101      	bne.n	801ba88 <ip4_addr_isbroadcast_u32+0x20>
 801ba84:	2301      	movs	r3, #1
 801ba86:	e02a      	b.n	801bade <ip4_addr_isbroadcast_u32+0x76>
 801ba88:	683b      	ldr	r3, [r7, #0]
 801ba8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba8e:	f003 0302 	and.w	r3, r3, #2
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	d101      	bne.n	801ba9a <ip4_addr_isbroadcast_u32+0x32>
 801ba96:	2300      	movs	r3, #0
 801ba98:	e021      	b.n	801bade <ip4_addr_isbroadcast_u32+0x76>
 801ba9a:	683b      	ldr	r3, [r7, #0]
 801ba9c:	3304      	adds	r3, #4
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	687a      	ldr	r2, [r7, #4]
 801baa2:	429a      	cmp	r2, r3
 801baa4:	d101      	bne.n	801baaa <ip4_addr_isbroadcast_u32+0x42>
 801baa6:	2300      	movs	r3, #0
 801baa8:	e019      	b.n	801bade <ip4_addr_isbroadcast_u32+0x76>
 801baaa:	68fa      	ldr	r2, [r7, #12]
 801baac:	683b      	ldr	r3, [r7, #0]
 801baae:	3304      	adds	r3, #4
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	405a      	eors	r2, r3
 801bab4:	683b      	ldr	r3, [r7, #0]
 801bab6:	3308      	adds	r3, #8
 801bab8:	681b      	ldr	r3, [r3, #0]
 801baba:	4013      	ands	r3, r2
 801babc:	2b00      	cmp	r3, #0
 801babe:	d10d      	bne.n	801badc <ip4_addr_isbroadcast_u32+0x74>
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	3308      	adds	r3, #8
 801bac4:	681b      	ldr	r3, [r3, #0]
 801bac6:	43da      	mvns	r2, r3
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	401a      	ands	r2, r3
 801bacc:	683b      	ldr	r3, [r7, #0]
 801bace:	3308      	adds	r3, #8
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	43db      	mvns	r3, r3
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d101      	bne.n	801badc <ip4_addr_isbroadcast_u32+0x74>
 801bad8:	2301      	movs	r3, #1
 801bada:	e000      	b.n	801bade <ip4_addr_isbroadcast_u32+0x76>
 801badc:	2300      	movs	r3, #0
 801bade:	4618      	mov	r0, r3
 801bae0:	3714      	adds	r7, #20
 801bae2:	46bd      	mov	sp, r7
 801bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bae8:	4770      	bx	lr
	...

0801baec <ip_reass_tmr>:
 801baec:	b580      	push	{r7, lr}
 801baee:	b084      	sub	sp, #16
 801baf0:	af00      	add	r7, sp, #0
 801baf2:	2300      	movs	r3, #0
 801baf4:	60bb      	str	r3, [r7, #8]
 801baf6:	4b12      	ldr	r3, [pc, #72]	@ (801bb40 <ip_reass_tmr+0x54>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	60fb      	str	r3, [r7, #12]
 801bafc:	e018      	b.n	801bb30 <ip_reass_tmr+0x44>
 801bafe:	68fb      	ldr	r3, [r7, #12]
 801bb00:	7fdb      	ldrb	r3, [r3, #31]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d00b      	beq.n	801bb1e <ip_reass_tmr+0x32>
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	7fdb      	ldrb	r3, [r3, #31]
 801bb0a:	3b01      	subs	r3, #1
 801bb0c:	b2da      	uxtb	r2, r3
 801bb0e:	68fb      	ldr	r3, [r7, #12]
 801bb10:	77da      	strb	r2, [r3, #31]
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	60bb      	str	r3, [r7, #8]
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	60fb      	str	r3, [r7, #12]
 801bb1c:	e008      	b.n	801bb30 <ip_reass_tmr+0x44>
 801bb1e:	68fb      	ldr	r3, [r7, #12]
 801bb20:	607b      	str	r3, [r7, #4]
 801bb22:	68fb      	ldr	r3, [r7, #12]
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	60fb      	str	r3, [r7, #12]
 801bb28:	68b9      	ldr	r1, [r7, #8]
 801bb2a:	6878      	ldr	r0, [r7, #4]
 801bb2c:	f000 f80a 	bl	801bb44 <ip_reass_free_complete_datagram>
 801bb30:	68fb      	ldr	r3, [r7, #12]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d1e3      	bne.n	801bafe <ip_reass_tmr+0x12>
 801bb36:	bf00      	nop
 801bb38:	bf00      	nop
 801bb3a:	3710      	adds	r7, #16
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}
 801bb40:	2000f530 	.word	0x2000f530

0801bb44 <ip_reass_free_complete_datagram>:
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b088      	sub	sp, #32
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	6039      	str	r1, [r7, #0]
 801bb4e:	2300      	movs	r3, #0
 801bb50:	83fb      	strh	r3, [r7, #30]
 801bb52:	683a      	ldr	r2, [r7, #0]
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	429a      	cmp	r2, r3
 801bb58:	d105      	bne.n	801bb66 <ip_reass_free_complete_datagram+0x22>
 801bb5a:	4b45      	ldr	r3, [pc, #276]	@ (801bc70 <ip_reass_free_complete_datagram+0x12c>)
 801bb5c:	22ab      	movs	r2, #171	@ 0xab
 801bb5e:	4945      	ldr	r1, [pc, #276]	@ (801bc74 <ip_reass_free_complete_datagram+0x130>)
 801bb60:	4845      	ldr	r0, [pc, #276]	@ (801bc78 <ip_reass_free_complete_datagram+0x134>)
 801bb62:	f001 fe11 	bl	801d788 <iprintf>
 801bb66:	683b      	ldr	r3, [r7, #0]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d00a      	beq.n	801bb82 <ip_reass_free_complete_datagram+0x3e>
 801bb6c:	683b      	ldr	r3, [r7, #0]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d005      	beq.n	801bb82 <ip_reass_free_complete_datagram+0x3e>
 801bb76:	4b3e      	ldr	r3, [pc, #248]	@ (801bc70 <ip_reass_free_complete_datagram+0x12c>)
 801bb78:	22ad      	movs	r2, #173	@ 0xad
 801bb7a:	4940      	ldr	r1, [pc, #256]	@ (801bc7c <ip_reass_free_complete_datagram+0x138>)
 801bb7c:	483e      	ldr	r0, [pc, #248]	@ (801bc78 <ip_reass_free_complete_datagram+0x134>)
 801bb7e:	f001 fe03 	bl	801d788 <iprintf>
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	685b      	ldr	r3, [r3, #4]
 801bb86:	685b      	ldr	r3, [r3, #4]
 801bb88:	617b      	str	r3, [r7, #20]
 801bb8a:	697b      	ldr	r3, [r7, #20]
 801bb8c:	889b      	ldrh	r3, [r3, #4]
 801bb8e:	b29b      	uxth	r3, r3
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d12a      	bne.n	801bbea <ip_reass_free_complete_datagram+0xa6>
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	685b      	ldr	r3, [r3, #4]
 801bb98:	61bb      	str	r3, [r7, #24]
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	681a      	ldr	r2, [r3, #0]
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	605a      	str	r2, [r3, #4]
 801bba2:	69bb      	ldr	r3, [r7, #24]
 801bba4:	6858      	ldr	r0, [r3, #4]
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	3308      	adds	r3, #8
 801bbaa:	2214      	movs	r2, #20
 801bbac:	4619      	mov	r1, r3
 801bbae:	f002 f86c 	bl	801dc8a <memcpy>
 801bbb2:	2101      	movs	r1, #1
 801bbb4:	69b8      	ldr	r0, [r7, #24]
 801bbb6:	f7ff fc47 	bl	801b448 <icmp_time_exceeded>
 801bbba:	69b8      	ldr	r0, [r7, #24]
 801bbbc:	f7f7 fab2 	bl	8013124 <pbuf_clen>
 801bbc0:	4603      	mov	r3, r0
 801bbc2:	827b      	strh	r3, [r7, #18]
 801bbc4:	8bfa      	ldrh	r2, [r7, #30]
 801bbc6:	8a7b      	ldrh	r3, [r7, #18]
 801bbc8:	4413      	add	r3, r2
 801bbca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bbce:	db05      	blt.n	801bbdc <ip_reass_free_complete_datagram+0x98>
 801bbd0:	4b27      	ldr	r3, [pc, #156]	@ (801bc70 <ip_reass_free_complete_datagram+0x12c>)
 801bbd2:	22bc      	movs	r2, #188	@ 0xbc
 801bbd4:	492a      	ldr	r1, [pc, #168]	@ (801bc80 <ip_reass_free_complete_datagram+0x13c>)
 801bbd6:	4828      	ldr	r0, [pc, #160]	@ (801bc78 <ip_reass_free_complete_datagram+0x134>)
 801bbd8:	f001 fdd6 	bl	801d788 <iprintf>
 801bbdc:	8bfa      	ldrh	r2, [r7, #30]
 801bbde:	8a7b      	ldrh	r3, [r7, #18]
 801bbe0:	4413      	add	r3, r2
 801bbe2:	83fb      	strh	r3, [r7, #30]
 801bbe4:	69b8      	ldr	r0, [r7, #24]
 801bbe6:	f7f7 fa0f 	bl	8013008 <pbuf_free>
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	685b      	ldr	r3, [r3, #4]
 801bbee:	61bb      	str	r3, [r7, #24]
 801bbf0:	e01f      	b.n	801bc32 <ip_reass_free_complete_datagram+0xee>
 801bbf2:	69bb      	ldr	r3, [r7, #24]
 801bbf4:	685b      	ldr	r3, [r3, #4]
 801bbf6:	617b      	str	r3, [r7, #20]
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	60fb      	str	r3, [r7, #12]
 801bbfc:	697b      	ldr	r3, [r7, #20]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	61bb      	str	r3, [r7, #24]
 801bc02:	68f8      	ldr	r0, [r7, #12]
 801bc04:	f7f7 fa8e 	bl	8013124 <pbuf_clen>
 801bc08:	4603      	mov	r3, r0
 801bc0a:	827b      	strh	r3, [r7, #18]
 801bc0c:	8bfa      	ldrh	r2, [r7, #30]
 801bc0e:	8a7b      	ldrh	r3, [r7, #18]
 801bc10:	4413      	add	r3, r2
 801bc12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bc16:	db05      	blt.n	801bc24 <ip_reass_free_complete_datagram+0xe0>
 801bc18:	4b15      	ldr	r3, [pc, #84]	@ (801bc70 <ip_reass_free_complete_datagram+0x12c>)
 801bc1a:	22cc      	movs	r2, #204	@ 0xcc
 801bc1c:	4918      	ldr	r1, [pc, #96]	@ (801bc80 <ip_reass_free_complete_datagram+0x13c>)
 801bc1e:	4816      	ldr	r0, [pc, #88]	@ (801bc78 <ip_reass_free_complete_datagram+0x134>)
 801bc20:	f001 fdb2 	bl	801d788 <iprintf>
 801bc24:	8bfa      	ldrh	r2, [r7, #30]
 801bc26:	8a7b      	ldrh	r3, [r7, #18]
 801bc28:	4413      	add	r3, r2
 801bc2a:	83fb      	strh	r3, [r7, #30]
 801bc2c:	68f8      	ldr	r0, [r7, #12]
 801bc2e:	f7f7 f9eb 	bl	8013008 <pbuf_free>
 801bc32:	69bb      	ldr	r3, [r7, #24]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d1dc      	bne.n	801bbf2 <ip_reass_free_complete_datagram+0xae>
 801bc38:	6839      	ldr	r1, [r7, #0]
 801bc3a:	6878      	ldr	r0, [r7, #4]
 801bc3c:	f000 f8c2 	bl	801bdc4 <ip_reass_dequeue_datagram>
 801bc40:	4b10      	ldr	r3, [pc, #64]	@ (801bc84 <ip_reass_free_complete_datagram+0x140>)
 801bc42:	881b      	ldrh	r3, [r3, #0]
 801bc44:	8bfa      	ldrh	r2, [r7, #30]
 801bc46:	429a      	cmp	r2, r3
 801bc48:	d905      	bls.n	801bc56 <ip_reass_free_complete_datagram+0x112>
 801bc4a:	4b09      	ldr	r3, [pc, #36]	@ (801bc70 <ip_reass_free_complete_datagram+0x12c>)
 801bc4c:	22d2      	movs	r2, #210	@ 0xd2
 801bc4e:	490e      	ldr	r1, [pc, #56]	@ (801bc88 <ip_reass_free_complete_datagram+0x144>)
 801bc50:	4809      	ldr	r0, [pc, #36]	@ (801bc78 <ip_reass_free_complete_datagram+0x134>)
 801bc52:	f001 fd99 	bl	801d788 <iprintf>
 801bc56:	4b0b      	ldr	r3, [pc, #44]	@ (801bc84 <ip_reass_free_complete_datagram+0x140>)
 801bc58:	881a      	ldrh	r2, [r3, #0]
 801bc5a:	8bfb      	ldrh	r3, [r7, #30]
 801bc5c:	1ad3      	subs	r3, r2, r3
 801bc5e:	b29a      	uxth	r2, r3
 801bc60:	4b08      	ldr	r3, [pc, #32]	@ (801bc84 <ip_reass_free_complete_datagram+0x140>)
 801bc62:	801a      	strh	r2, [r3, #0]
 801bc64:	8bfb      	ldrh	r3, [r7, #30]
 801bc66:	4618      	mov	r0, r3
 801bc68:	3720      	adds	r7, #32
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	bd80      	pop	{r7, pc}
 801bc6e:	bf00      	nop
 801bc70:	0802330c 	.word	0x0802330c
 801bc74:	08023348 	.word	0x08023348
 801bc78:	08023354 	.word	0x08023354
 801bc7c:	0802337c 	.word	0x0802337c
 801bc80:	08023390 	.word	0x08023390
 801bc84:	2000f534 	.word	0x2000f534
 801bc88:	080233b0 	.word	0x080233b0

0801bc8c <ip_reass_remove_oldest_datagram>:
 801bc8c:	b580      	push	{r7, lr}
 801bc8e:	b08a      	sub	sp, #40	@ 0x28
 801bc90:	af00      	add	r7, sp, #0
 801bc92:	6078      	str	r0, [r7, #4]
 801bc94:	6039      	str	r1, [r7, #0]
 801bc96:	2300      	movs	r3, #0
 801bc98:	617b      	str	r3, [r7, #20]
 801bc9a:	2300      	movs	r3, #0
 801bc9c:	623b      	str	r3, [r7, #32]
 801bc9e:	2300      	movs	r3, #0
 801bca0:	61fb      	str	r3, [r7, #28]
 801bca2:	2300      	movs	r3, #0
 801bca4:	61bb      	str	r3, [r7, #24]
 801bca6:	2300      	movs	r3, #0
 801bca8:	613b      	str	r3, [r7, #16]
 801bcaa:	4b28      	ldr	r3, [pc, #160]	@ (801bd4c <ip_reass_remove_oldest_datagram+0xc0>)
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	627b      	str	r3, [r7, #36]	@ 0x24
 801bcb0:	e030      	b.n	801bd14 <ip_reass_remove_oldest_datagram+0x88>
 801bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcb4:	695a      	ldr	r2, [r3, #20]
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	68db      	ldr	r3, [r3, #12]
 801bcba:	429a      	cmp	r2, r3
 801bcbc:	d10c      	bne.n	801bcd8 <ip_reass_remove_oldest_datagram+0x4c>
 801bcbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcc0:	699a      	ldr	r2, [r3, #24]
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	691b      	ldr	r3, [r3, #16]
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	d106      	bne.n	801bcd8 <ip_reass_remove_oldest_datagram+0x4c>
 801bcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bccc:	899a      	ldrh	r2, [r3, #12]
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	889b      	ldrh	r3, [r3, #4]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	429a      	cmp	r2, r3
 801bcd6:	d014      	beq.n	801bd02 <ip_reass_remove_oldest_datagram+0x76>
 801bcd8:	693b      	ldr	r3, [r7, #16]
 801bcda:	3301      	adds	r3, #1
 801bcdc:	613b      	str	r3, [r7, #16]
 801bcde:	6a3b      	ldr	r3, [r7, #32]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d104      	bne.n	801bcee <ip_reass_remove_oldest_datagram+0x62>
 801bce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bce6:	623b      	str	r3, [r7, #32]
 801bce8:	69fb      	ldr	r3, [r7, #28]
 801bcea:	61bb      	str	r3, [r7, #24]
 801bcec:	e009      	b.n	801bd02 <ip_reass_remove_oldest_datagram+0x76>
 801bcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcf0:	7fda      	ldrb	r2, [r3, #31]
 801bcf2:	6a3b      	ldr	r3, [r7, #32]
 801bcf4:	7fdb      	ldrb	r3, [r3, #31]
 801bcf6:	429a      	cmp	r2, r3
 801bcf8:	d803      	bhi.n	801bd02 <ip_reass_remove_oldest_datagram+0x76>
 801bcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcfc:	623b      	str	r3, [r7, #32]
 801bcfe:	69fb      	ldr	r3, [r7, #28]
 801bd00:	61bb      	str	r3, [r7, #24]
 801bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d001      	beq.n	801bd0e <ip_reass_remove_oldest_datagram+0x82>
 801bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd0c:	61fb      	str	r3, [r7, #28]
 801bd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d1cb      	bne.n	801bcb2 <ip_reass_remove_oldest_datagram+0x26>
 801bd1a:	6a3b      	ldr	r3, [r7, #32]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	d008      	beq.n	801bd32 <ip_reass_remove_oldest_datagram+0xa6>
 801bd20:	69b9      	ldr	r1, [r7, #24]
 801bd22:	6a38      	ldr	r0, [r7, #32]
 801bd24:	f7ff ff0e 	bl	801bb44 <ip_reass_free_complete_datagram>
 801bd28:	60f8      	str	r0, [r7, #12]
 801bd2a:	697a      	ldr	r2, [r7, #20]
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	4413      	add	r3, r2
 801bd30:	617b      	str	r3, [r7, #20]
 801bd32:	697a      	ldr	r2, [r7, #20]
 801bd34:	683b      	ldr	r3, [r7, #0]
 801bd36:	429a      	cmp	r2, r3
 801bd38:	da02      	bge.n	801bd40 <ip_reass_remove_oldest_datagram+0xb4>
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	2b01      	cmp	r3, #1
 801bd3e:	dcac      	bgt.n	801bc9a <ip_reass_remove_oldest_datagram+0xe>
 801bd40:	697b      	ldr	r3, [r7, #20]
 801bd42:	4618      	mov	r0, r3
 801bd44:	3728      	adds	r7, #40	@ 0x28
 801bd46:	46bd      	mov	sp, r7
 801bd48:	bd80      	pop	{r7, pc}
 801bd4a:	bf00      	nop
 801bd4c:	2000f530 	.word	0x2000f530

0801bd50 <ip_reass_enqueue_new_datagram>:
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b084      	sub	sp, #16
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
 801bd58:	6039      	str	r1, [r7, #0]
 801bd5a:	2004      	movs	r0, #4
 801bd5c:	f7f6 fa3a 	bl	80121d4 <memp_malloc>
 801bd60:	60f8      	str	r0, [r7, #12]
 801bd62:	68fb      	ldr	r3, [r7, #12]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d110      	bne.n	801bd8a <ip_reass_enqueue_new_datagram+0x3a>
 801bd68:	6839      	ldr	r1, [r7, #0]
 801bd6a:	6878      	ldr	r0, [r7, #4]
 801bd6c:	f7ff ff8e 	bl	801bc8c <ip_reass_remove_oldest_datagram>
 801bd70:	4602      	mov	r2, r0
 801bd72:	683b      	ldr	r3, [r7, #0]
 801bd74:	4293      	cmp	r3, r2
 801bd76:	dc03      	bgt.n	801bd80 <ip_reass_enqueue_new_datagram+0x30>
 801bd78:	2004      	movs	r0, #4
 801bd7a:	f7f6 fa2b 	bl	80121d4 <memp_malloc>
 801bd7e:	60f8      	str	r0, [r7, #12]
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d101      	bne.n	801bd8a <ip_reass_enqueue_new_datagram+0x3a>
 801bd86:	2300      	movs	r3, #0
 801bd88:	e016      	b.n	801bdb8 <ip_reass_enqueue_new_datagram+0x68>
 801bd8a:	2220      	movs	r2, #32
 801bd8c:	2100      	movs	r1, #0
 801bd8e:	68f8      	ldr	r0, [r7, #12]
 801bd90:	f001 fe8c 	bl	801daac <memset>
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	220f      	movs	r2, #15
 801bd98:	77da      	strb	r2, [r3, #31]
 801bd9a:	4b09      	ldr	r3, [pc, #36]	@ (801bdc0 <ip_reass_enqueue_new_datagram+0x70>)
 801bd9c:	681a      	ldr	r2, [r3, #0]
 801bd9e:	68fb      	ldr	r3, [r7, #12]
 801bda0:	601a      	str	r2, [r3, #0]
 801bda2:	4a07      	ldr	r2, [pc, #28]	@ (801bdc0 <ip_reass_enqueue_new_datagram+0x70>)
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	6013      	str	r3, [r2, #0]
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	3308      	adds	r3, #8
 801bdac:	2214      	movs	r2, #20
 801bdae:	6879      	ldr	r1, [r7, #4]
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	f001 ff6a 	bl	801dc8a <memcpy>
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	4618      	mov	r0, r3
 801bdba:	3710      	adds	r7, #16
 801bdbc:	46bd      	mov	sp, r7
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	2000f530 	.word	0x2000f530

0801bdc4 <ip_reass_dequeue_datagram>:
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	b082      	sub	sp, #8
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	6078      	str	r0, [r7, #4]
 801bdcc:	6039      	str	r1, [r7, #0]
 801bdce:	4b10      	ldr	r3, [pc, #64]	@ (801be10 <ip_reass_dequeue_datagram+0x4c>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	687a      	ldr	r2, [r7, #4]
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	d104      	bne.n	801bde2 <ip_reass_dequeue_datagram+0x1e>
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	4a0c      	ldr	r2, [pc, #48]	@ (801be10 <ip_reass_dequeue_datagram+0x4c>)
 801bdde:	6013      	str	r3, [r2, #0]
 801bde0:	e00d      	b.n	801bdfe <ip_reass_dequeue_datagram+0x3a>
 801bde2:	683b      	ldr	r3, [r7, #0]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d106      	bne.n	801bdf6 <ip_reass_dequeue_datagram+0x32>
 801bde8:	4b0a      	ldr	r3, [pc, #40]	@ (801be14 <ip_reass_dequeue_datagram+0x50>)
 801bdea:	f240 1245 	movw	r2, #325	@ 0x145
 801bdee:	490a      	ldr	r1, [pc, #40]	@ (801be18 <ip_reass_dequeue_datagram+0x54>)
 801bdf0:	480a      	ldr	r0, [pc, #40]	@ (801be1c <ip_reass_dequeue_datagram+0x58>)
 801bdf2:	f001 fcc9 	bl	801d788 <iprintf>
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	681a      	ldr	r2, [r3, #0]
 801bdfa:	683b      	ldr	r3, [r7, #0]
 801bdfc:	601a      	str	r2, [r3, #0]
 801bdfe:	6879      	ldr	r1, [r7, #4]
 801be00:	2004      	movs	r0, #4
 801be02:	f7f6 fa5d 	bl	80122c0 <memp_free>
 801be06:	bf00      	nop
 801be08:	3708      	adds	r7, #8
 801be0a:	46bd      	mov	sp, r7
 801be0c:	bd80      	pop	{r7, pc}
 801be0e:	bf00      	nop
 801be10:	2000f530 	.word	0x2000f530
 801be14:	0802330c 	.word	0x0802330c
 801be18:	080233d4 	.word	0x080233d4
 801be1c:	08023354 	.word	0x08023354

0801be20 <ip_reass_chain_frag_into_datagram_and_validate>:
 801be20:	b580      	push	{r7, lr}
 801be22:	b08c      	sub	sp, #48	@ 0x30
 801be24:	af00      	add	r7, sp, #0
 801be26:	60f8      	str	r0, [r7, #12]
 801be28:	60b9      	str	r1, [r7, #8]
 801be2a:	607a      	str	r2, [r7, #4]
 801be2c:	2300      	movs	r3, #0
 801be2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801be30:	2301      	movs	r3, #1
 801be32:	623b      	str	r3, [r7, #32]
 801be34:	68bb      	ldr	r3, [r7, #8]
 801be36:	685b      	ldr	r3, [r3, #4]
 801be38:	61fb      	str	r3, [r7, #28]
 801be3a:	69fb      	ldr	r3, [r7, #28]
 801be3c:	885b      	ldrh	r3, [r3, #2]
 801be3e:	b29b      	uxth	r3, r3
 801be40:	4618      	mov	r0, r3
 801be42:	f7f5 fcb9 	bl	80117b8 <lwip_htons>
 801be46:	4603      	mov	r3, r0
 801be48:	837b      	strh	r3, [r7, #26]
 801be4a:	69fb      	ldr	r3, [r7, #28]
 801be4c:	781b      	ldrb	r3, [r3, #0]
 801be4e:	f003 030f 	and.w	r3, r3, #15
 801be52:	b2db      	uxtb	r3, r3
 801be54:	009b      	lsls	r3, r3, #2
 801be56:	767b      	strb	r3, [r7, #25]
 801be58:	7e7b      	ldrb	r3, [r7, #25]
 801be5a:	b29b      	uxth	r3, r3
 801be5c:	8b7a      	ldrh	r2, [r7, #26]
 801be5e:	429a      	cmp	r2, r3
 801be60:	d202      	bcs.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
 801be62:	f04f 33ff 	mov.w	r3, #4294967295
 801be66:	e135      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801be68:	7e7b      	ldrb	r3, [r7, #25]
 801be6a:	b29b      	uxth	r3, r3
 801be6c:	8b7a      	ldrh	r2, [r7, #26]
 801be6e:	1ad3      	subs	r3, r2, r3
 801be70:	837b      	strh	r3, [r7, #26]
 801be72:	69fb      	ldr	r3, [r7, #28]
 801be74:	88db      	ldrh	r3, [r3, #6]
 801be76:	b29b      	uxth	r3, r3
 801be78:	4618      	mov	r0, r3
 801be7a:	f7f5 fc9d 	bl	80117b8 <lwip_htons>
 801be7e:	4603      	mov	r3, r0
 801be80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be84:	b29b      	uxth	r3, r3
 801be86:	00db      	lsls	r3, r3, #3
 801be88:	82fb      	strh	r3, [r7, #22]
 801be8a:	68bb      	ldr	r3, [r7, #8]
 801be8c:	685b      	ldr	r3, [r3, #4]
 801be8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801be90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be92:	2200      	movs	r2, #0
 801be94:	701a      	strb	r2, [r3, #0]
 801be96:	2200      	movs	r2, #0
 801be98:	705a      	strb	r2, [r3, #1]
 801be9a:	2200      	movs	r2, #0
 801be9c:	709a      	strb	r2, [r3, #2]
 801be9e:	2200      	movs	r2, #0
 801bea0:	70da      	strb	r2, [r3, #3]
 801bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea4:	8afa      	ldrh	r2, [r7, #22]
 801bea6:	809a      	strh	r2, [r3, #4]
 801bea8:	8afa      	ldrh	r2, [r7, #22]
 801beaa:	8b7b      	ldrh	r3, [r7, #26]
 801beac:	4413      	add	r3, r2
 801beae:	b29a      	uxth	r2, r3
 801beb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beb2:	80da      	strh	r2, [r3, #6]
 801beb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801beb6:	88db      	ldrh	r3, [r3, #6]
 801beb8:	b29b      	uxth	r3, r3
 801beba:	8afa      	ldrh	r2, [r7, #22]
 801bebc:	429a      	cmp	r2, r3
 801bebe:	d902      	bls.n	801bec6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
 801bec0:	f04f 33ff 	mov.w	r3, #4294967295
 801bec4:	e106      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	685b      	ldr	r3, [r3, #4]
 801beca:	627b      	str	r3, [r7, #36]	@ 0x24
 801becc:	e068      	b.n	801bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bed0:	685b      	ldr	r3, [r3, #4]
 801bed2:	613b      	str	r3, [r7, #16]
 801bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bed6:	889b      	ldrh	r3, [r3, #4]
 801bed8:	b29a      	uxth	r2, r3
 801beda:	693b      	ldr	r3, [r7, #16]
 801bedc:	889b      	ldrh	r3, [r3, #4]
 801bede:	b29b      	uxth	r3, r3
 801bee0:	429a      	cmp	r2, r3
 801bee2:	d235      	bcs.n	801bf50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
 801bee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bee8:	601a      	str	r2, [r3, #0]
 801beea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801beec:	2b00      	cmp	r3, #0
 801beee:	d020      	beq.n	801bf32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
 801bef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bef2:	889b      	ldrh	r3, [r3, #4]
 801bef4:	b29a      	uxth	r2, r3
 801bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bef8:	88db      	ldrh	r3, [r3, #6]
 801befa:	b29b      	uxth	r3, r3
 801befc:	429a      	cmp	r2, r3
 801befe:	d307      	bcc.n	801bf10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf02:	88db      	ldrh	r3, [r3, #6]
 801bf04:	b29a      	uxth	r2, r3
 801bf06:	693b      	ldr	r3, [r7, #16]
 801bf08:	889b      	ldrh	r3, [r3, #4]
 801bf0a:	b29b      	uxth	r3, r3
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	d902      	bls.n	801bf16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
 801bf10:	f04f 33ff 	mov.w	r3, #4294967295
 801bf14:	e0de      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801bf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf18:	68ba      	ldr	r2, [r7, #8]
 801bf1a:	601a      	str	r2, [r3, #0]
 801bf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf1e:	88db      	ldrh	r3, [r3, #6]
 801bf20:	b29a      	uxth	r2, r3
 801bf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf24:	889b      	ldrh	r3, [r3, #4]
 801bf26:	b29b      	uxth	r3, r3
 801bf28:	429a      	cmp	r2, r3
 801bf2a:	d03d      	beq.n	801bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
 801bf2c:	2300      	movs	r3, #0
 801bf2e:	623b      	str	r3, [r7, #32]
 801bf30:	e03a      	b.n	801bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
 801bf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf34:	88db      	ldrh	r3, [r3, #6]
 801bf36:	b29a      	uxth	r2, r3
 801bf38:	693b      	ldr	r3, [r7, #16]
 801bf3a:	889b      	ldrh	r3, [r3, #4]
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d902      	bls.n	801bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
 801bf42:	f04f 33ff 	mov.w	r3, #4294967295
 801bf46:	e0c5      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	68ba      	ldr	r2, [r7, #8]
 801bf4c:	605a      	str	r2, [r3, #4]
 801bf4e:	e02b      	b.n	801bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
 801bf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf52:	889b      	ldrh	r3, [r3, #4]
 801bf54:	b29a      	uxth	r2, r3
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	889b      	ldrh	r3, [r3, #4]
 801bf5a:	b29b      	uxth	r3, r3
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d102      	bne.n	801bf66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
 801bf60:	f04f 33ff 	mov.w	r3, #4294967295
 801bf64:	e0b6      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801bf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf68:	889b      	ldrh	r3, [r3, #4]
 801bf6a:	b29a      	uxth	r2, r3
 801bf6c:	693b      	ldr	r3, [r7, #16]
 801bf6e:	88db      	ldrh	r3, [r3, #6]
 801bf70:	b29b      	uxth	r3, r3
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d202      	bcs.n	801bf7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
 801bf76:	f04f 33ff 	mov.w	r3, #4294967295
 801bf7a:	e0ab      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801bf7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d009      	beq.n	801bf96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
 801bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf84:	88db      	ldrh	r3, [r3, #6]
 801bf86:	b29a      	uxth	r2, r3
 801bf88:	693b      	ldr	r3, [r7, #16]
 801bf8a:	889b      	ldrh	r3, [r3, #4]
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	429a      	cmp	r2, r3
 801bf90:	d001      	beq.n	801bf96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
 801bf92:	2300      	movs	r3, #0
 801bf94:	623b      	str	r3, [r7, #32]
 801bf96:	693b      	ldr	r3, [r7, #16]
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf9c:	693b      	ldr	r3, [r7, #16]
 801bf9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d193      	bne.n	801bece <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bfa6:	e000      	b.n	801bfaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
 801bfa8:	bf00      	nop
 801bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d12d      	bne.n	801c00c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
 801bfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d01c      	beq.n	801bff0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
 801bfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfb8:	88db      	ldrh	r3, [r3, #6]
 801bfba:	b29a      	uxth	r2, r3
 801bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfbe:	889b      	ldrh	r3, [r3, #4]
 801bfc0:	b29b      	uxth	r3, r3
 801bfc2:	429a      	cmp	r2, r3
 801bfc4:	d906      	bls.n	801bfd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bfc6:	4b45      	ldr	r3, [pc, #276]	@ (801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bfc8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801bfcc:	4944      	ldr	r1, [pc, #272]	@ (801c0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bfce:	4845      	ldr	r0, [pc, #276]	@ (801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bfd0:	f001 fbda 	bl	801d788 <iprintf>
 801bfd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd6:	68ba      	ldr	r2, [r7, #8]
 801bfd8:	601a      	str	r2, [r3, #0]
 801bfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfdc:	88db      	ldrh	r3, [r3, #6]
 801bfde:	b29a      	uxth	r2, r3
 801bfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfe2:	889b      	ldrh	r3, [r3, #4]
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	d010      	beq.n	801c00c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
 801bfea:	2300      	movs	r3, #0
 801bfec:	623b      	str	r3, [r7, #32]
 801bfee:	e00d      	b.n	801c00c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
 801bff0:	68fb      	ldr	r3, [r7, #12]
 801bff2:	685b      	ldr	r3, [r3, #4]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d006      	beq.n	801c006 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bff8:	4b38      	ldr	r3, [pc, #224]	@ (801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bffa:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801bffe:	493a      	ldr	r1, [pc, #232]	@ (801c0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c000:	4838      	ldr	r0, [pc, #224]	@ (801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c002:	f001 fbc1 	bl	801d788 <iprintf>
 801c006:	68fb      	ldr	r3, [r7, #12]
 801c008:	68ba      	ldr	r2, [r7, #8]
 801c00a:	605a      	str	r2, [r3, #4]
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d105      	bne.n	801c01e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	7f9b      	ldrb	r3, [r3, #30]
 801c016:	f003 0301 	and.w	r3, r3, #1
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d059      	beq.n	801c0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
 801c01e:	6a3b      	ldr	r3, [r7, #32]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d04f      	beq.n	801c0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	685b      	ldr	r3, [r3, #4]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d006      	beq.n	801c03a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	685b      	ldr	r3, [r3, #4]
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	889b      	ldrh	r3, [r3, #4]
 801c034:	b29b      	uxth	r3, r3
 801c036:	2b00      	cmp	r3, #0
 801c038:	d002      	beq.n	801c040 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
 801c03a:	2300      	movs	r3, #0
 801c03c:	623b      	str	r3, [r7, #32]
 801c03e:	e041      	b.n	801c0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c042:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	627b      	str	r3, [r7, #36]	@ 0x24
 801c04a:	e012      	b.n	801c072 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
 801c04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c04e:	685b      	ldr	r3, [r3, #4]
 801c050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c054:	88db      	ldrh	r3, [r3, #6]
 801c056:	b29a      	uxth	r2, r3
 801c058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c05a:	889b      	ldrh	r3, [r3, #4]
 801c05c:	b29b      	uxth	r3, r3
 801c05e:	429a      	cmp	r2, r3
 801c060:	d002      	beq.n	801c068 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
 801c062:	2300      	movs	r3, #0
 801c064:	623b      	str	r3, [r7, #32]
 801c066:	e007      	b.n	801c078 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 801c068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c06e:	681b      	ldr	r3, [r3, #0]
 801c070:	627b      	str	r3, [r7, #36]	@ 0x24
 801c072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c074:	2b00      	cmp	r3, #0
 801c076:	d1e9      	bne.n	801c04c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
 801c078:	6a3b      	ldr	r3, [r7, #32]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d022      	beq.n	801c0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	685b      	ldr	r3, [r3, #4]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d106      	bne.n	801c094 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c086:	4b15      	ldr	r3, [pc, #84]	@ (801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c088:	f240 12df 	movw	r2, #479	@ 0x1df
 801c08c:	4917      	ldr	r1, [pc, #92]	@ (801c0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c08e:	4815      	ldr	r0, [pc, #84]	@ (801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c090:	f001 fb7a 	bl	801d788 <iprintf>
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	685b      	ldr	r3, [r3, #4]
 801c098:	685b      	ldr	r3, [r3, #4]
 801c09a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c09c:	429a      	cmp	r2, r3
 801c09e:	d106      	bne.n	801c0ae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c0a0:	4b0e      	ldr	r3, [pc, #56]	@ (801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c0a2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c0a6:	4911      	ldr	r1, [pc, #68]	@ (801c0ec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c0a8:	480e      	ldr	r0, [pc, #56]	@ (801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c0aa:	f001 fb6d 	bl	801d788 <iprintf>
 801c0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d006      	beq.n	801c0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c0b6:	4b09      	ldr	r3, [pc, #36]	@ (801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c0b8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c0bc:	490c      	ldr	r1, [pc, #48]	@ (801c0f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c0be:	4809      	ldr	r0, [pc, #36]	@ (801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c0c0:	f001 fb62 	bl	801d788 <iprintf>
 801c0c4:	6a3b      	ldr	r3, [r7, #32]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	bf14      	ite	ne
 801c0ca:	2301      	movne	r3, #1
 801c0cc:	2300      	moveq	r3, #0
 801c0ce:	b2db      	uxtb	r3, r3
 801c0d0:	e000      	b.n	801c0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	3730      	adds	r7, #48	@ 0x30
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}
 801c0dc:	0802330c 	.word	0x0802330c
 801c0e0:	080233f0 	.word	0x080233f0
 801c0e4:	08023354 	.word	0x08023354
 801c0e8:	08023410 	.word	0x08023410
 801c0ec:	08023448 	.word	0x08023448
 801c0f0:	08023458 	.word	0x08023458

0801c0f4 <ip4_reass>:
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b08e      	sub	sp, #56	@ 0x38
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	685b      	ldr	r3, [r3, #4]
 801c100:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	f003 030f 	and.w	r3, r3, #15
 801c10a:	b2db      	uxtb	r3, r3
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	b2db      	uxtb	r3, r3
 801c110:	2b14      	cmp	r3, #20
 801c112:	f040 8171 	bne.w	801c3f8 <ip4_reass+0x304>
 801c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c118:	88db      	ldrh	r3, [r3, #6]
 801c11a:	b29b      	uxth	r3, r3
 801c11c:	4618      	mov	r0, r3
 801c11e:	f7f5 fb4b 	bl	80117b8 <lwip_htons>
 801c122:	4603      	mov	r3, r0
 801c124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c128:	b29b      	uxth	r3, r3
 801c12a:	00db      	lsls	r3, r3, #3
 801c12c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c130:	885b      	ldrh	r3, [r3, #2]
 801c132:	b29b      	uxth	r3, r3
 801c134:	4618      	mov	r0, r3
 801c136:	f7f5 fb3f 	bl	80117b8 <lwip_htons>
 801c13a:	4603      	mov	r3, r0
 801c13c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c140:	781b      	ldrb	r3, [r3, #0]
 801c142:	f003 030f 	and.w	r3, r3, #15
 801c146:	b2db      	uxtb	r3, r3
 801c148:	009b      	lsls	r3, r3, #2
 801c14a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801c14e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c152:	b29b      	uxth	r3, r3
 801c154:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c156:	429a      	cmp	r2, r3
 801c158:	f0c0 8150 	bcc.w	801c3fc <ip4_reass+0x308>
 801c15c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c160:	b29b      	uxth	r3, r3
 801c162:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c164:	1ad3      	subs	r3, r2, r3
 801c166:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801c168:	6878      	ldr	r0, [r7, #4]
 801c16a:	f7f6 ffdb 	bl	8013124 <pbuf_clen>
 801c16e:	4603      	mov	r3, r0
 801c170:	843b      	strh	r3, [r7, #32]
 801c172:	4b8c      	ldr	r3, [pc, #560]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c174:	881b      	ldrh	r3, [r3, #0]
 801c176:	461a      	mov	r2, r3
 801c178:	8c3b      	ldrh	r3, [r7, #32]
 801c17a:	4413      	add	r3, r2
 801c17c:	2b0a      	cmp	r3, #10
 801c17e:	dd10      	ble.n	801c1a2 <ip4_reass+0xae>
 801c180:	8c3b      	ldrh	r3, [r7, #32]
 801c182:	4619      	mov	r1, r3
 801c184:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c186:	f7ff fd81 	bl	801bc8c <ip_reass_remove_oldest_datagram>
 801c18a:	4603      	mov	r3, r0
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	f000 8137 	beq.w	801c400 <ip4_reass+0x30c>
 801c192:	4b84      	ldr	r3, [pc, #528]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c194:	881b      	ldrh	r3, [r3, #0]
 801c196:	461a      	mov	r2, r3
 801c198:	8c3b      	ldrh	r3, [r7, #32]
 801c19a:	4413      	add	r3, r2
 801c19c:	2b0a      	cmp	r3, #10
 801c19e:	f300 812f 	bgt.w	801c400 <ip4_reass+0x30c>
 801c1a2:	4b81      	ldr	r3, [pc, #516]	@ (801c3a8 <ip4_reass+0x2b4>)
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	633b      	str	r3, [r7, #48]	@ 0x30
 801c1a8:	e015      	b.n	801c1d6 <ip4_reass+0xe2>
 801c1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1ac:	695a      	ldr	r2, [r3, #20]
 801c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b0:	68db      	ldr	r3, [r3, #12]
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	d10c      	bne.n	801c1d0 <ip4_reass+0xdc>
 801c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1b8:	699a      	ldr	r2, [r3, #24]
 801c1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1bc:	691b      	ldr	r3, [r3, #16]
 801c1be:	429a      	cmp	r2, r3
 801c1c0:	d106      	bne.n	801c1d0 <ip4_reass+0xdc>
 801c1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1c4:	899a      	ldrh	r2, [r3, #12]
 801c1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1c8:	889b      	ldrh	r3, [r3, #4]
 801c1ca:	b29b      	uxth	r3, r3
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d006      	beq.n	801c1de <ip4_reass+0xea>
 801c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	633b      	str	r3, [r7, #48]	@ 0x30
 801c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d1e6      	bne.n	801c1aa <ip4_reass+0xb6>
 801c1dc:	e000      	b.n	801c1e0 <ip4_reass+0xec>
 801c1de:	bf00      	nop
 801c1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d109      	bne.n	801c1fa <ip4_reass+0x106>
 801c1e6:	8c3b      	ldrh	r3, [r7, #32]
 801c1e8:	4619      	mov	r1, r3
 801c1ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c1ec:	f7ff fdb0 	bl	801bd50 <ip_reass_enqueue_new_datagram>
 801c1f0:	6338      	str	r0, [r7, #48]	@ 0x30
 801c1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d11c      	bne.n	801c232 <ip4_reass+0x13e>
 801c1f8:	e105      	b.n	801c406 <ip4_reass+0x312>
 801c1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1fc:	88db      	ldrh	r3, [r3, #6]
 801c1fe:	b29b      	uxth	r3, r3
 801c200:	4618      	mov	r0, r3
 801c202:	f7f5 fad9 	bl	80117b8 <lwip_htons>
 801c206:	4603      	mov	r3, r0
 801c208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d110      	bne.n	801c232 <ip4_reass+0x13e>
 801c210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c212:	89db      	ldrh	r3, [r3, #14]
 801c214:	4618      	mov	r0, r3
 801c216:	f7f5 facf 	bl	80117b8 <lwip_htons>
 801c21a:	4603      	mov	r3, r0
 801c21c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c220:	2b00      	cmp	r3, #0
 801c222:	d006      	beq.n	801c232 <ip4_reass+0x13e>
 801c224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c226:	3308      	adds	r3, #8
 801c228:	2214      	movs	r2, #20
 801c22a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c22c:	4618      	mov	r0, r3
 801c22e:	f001 fd2c 	bl	801dc8a <memcpy>
 801c232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c234:	88db      	ldrh	r3, [r3, #6]
 801c236:	b29b      	uxth	r3, r3
 801c238:	f003 0320 	and.w	r3, r3, #32
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	bf0c      	ite	eq
 801c240:	2301      	moveq	r3, #1
 801c242:	2300      	movne	r3, #0
 801c244:	b2db      	uxtb	r3, r3
 801c246:	61fb      	str	r3, [r7, #28]
 801c248:	69fb      	ldr	r3, [r7, #28]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d00e      	beq.n	801c26c <ip4_reass+0x178>
 801c24e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c250:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c252:	4413      	add	r3, r2
 801c254:	837b      	strh	r3, [r7, #26]
 801c256:	8b7a      	ldrh	r2, [r7, #26]
 801c258:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c25a:	429a      	cmp	r2, r3
 801c25c:	f0c0 80a0 	bcc.w	801c3a0 <ip4_reass+0x2ac>
 801c260:	8b7b      	ldrh	r3, [r7, #26]
 801c262:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c266:	4293      	cmp	r3, r2
 801c268:	f200 809a 	bhi.w	801c3a0 <ip4_reass+0x2ac>
 801c26c:	69fa      	ldr	r2, [r7, #28]
 801c26e:	6879      	ldr	r1, [r7, #4]
 801c270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c272:	f7ff fdd5 	bl	801be20 <ip_reass_chain_frag_into_datagram_and_validate>
 801c276:	6178      	str	r0, [r7, #20]
 801c278:	697b      	ldr	r3, [r7, #20]
 801c27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c27e:	f000 809b 	beq.w	801c3b8 <ip4_reass+0x2c4>
 801c282:	4b48      	ldr	r3, [pc, #288]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c284:	881a      	ldrh	r2, [r3, #0]
 801c286:	8c3b      	ldrh	r3, [r7, #32]
 801c288:	4413      	add	r3, r2
 801c28a:	b29a      	uxth	r2, r3
 801c28c:	4b45      	ldr	r3, [pc, #276]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c28e:	801a      	strh	r2, [r3, #0]
 801c290:	69fb      	ldr	r3, [r7, #28]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d00d      	beq.n	801c2b2 <ip4_reass+0x1be>
 801c296:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c29a:	4413      	add	r3, r2
 801c29c:	827b      	strh	r3, [r7, #18]
 801c29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2a0:	8a7a      	ldrh	r2, [r7, #18]
 801c2a2:	839a      	strh	r2, [r3, #28]
 801c2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2a6:	7f9b      	ldrb	r3, [r3, #30]
 801c2a8:	f043 0301 	orr.w	r3, r3, #1
 801c2ac:	b2da      	uxtb	r2, r3
 801c2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2b0:	779a      	strb	r2, [r3, #30]
 801c2b2:	697b      	ldr	r3, [r7, #20]
 801c2b4:	2b01      	cmp	r3, #1
 801c2b6:	d171      	bne.n	801c39c <ip4_reass+0x2a8>
 801c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2ba:	8b9b      	ldrh	r3, [r3, #28]
 801c2bc:	3314      	adds	r3, #20
 801c2be:	823b      	strh	r3, [r7, #16]
 801c2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2c2:	685b      	ldr	r3, [r3, #4]
 801c2c4:	685b      	ldr	r3, [r3, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 801c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	685b      	ldr	r3, [r3, #4]
 801c2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2d4:	3308      	adds	r3, #8
 801c2d6:	2214      	movs	r2, #20
 801c2d8:	4619      	mov	r1, r3
 801c2da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c2dc:	f001 fcd5 	bl	801dc8a <memcpy>
 801c2e0:	8a3b      	ldrh	r3, [r7, #16]
 801c2e2:	4618      	mov	r0, r3
 801c2e4:	f7f5 fa68 	bl	80117b8 <lwip_htons>
 801c2e8:	4603      	mov	r3, r0
 801c2ea:	461a      	mov	r2, r3
 801c2ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2ee:	805a      	strh	r2, [r3, #2]
 801c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2f2:	2200      	movs	r2, #0
 801c2f4:	719a      	strb	r2, [r3, #6]
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	71da      	strb	r2, [r3, #7]
 801c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	729a      	strb	r2, [r3, #10]
 801c300:	2200      	movs	r2, #0
 801c302:	72da      	strb	r2, [r3, #11]
 801c304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c306:	685b      	ldr	r3, [r3, #4]
 801c308:	607b      	str	r3, [r7, #4]
 801c30a:	e00d      	b.n	801c328 <ip4_reass+0x234>
 801c30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	60fb      	str	r3, [r7, #12]
 801c312:	2114      	movs	r1, #20
 801c314:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c316:	f7f6 fdf1 	bl	8012efc <pbuf_remove_header>
 801c31a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c31c:	6878      	ldr	r0, [r7, #4]
 801c31e:	f7f6 ff41 	bl	80131a4 <pbuf_cat>
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	637b      	str	r3, [r7, #52]	@ 0x34
 801c328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d1ee      	bne.n	801c30c <ip4_reass+0x218>
 801c32e:	4b1e      	ldr	r3, [pc, #120]	@ (801c3a8 <ip4_reass+0x2b4>)
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c334:	429a      	cmp	r2, r3
 801c336:	d102      	bne.n	801c33e <ip4_reass+0x24a>
 801c338:	2300      	movs	r3, #0
 801c33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c33c:	e010      	b.n	801c360 <ip4_reass+0x26c>
 801c33e:	4b1a      	ldr	r3, [pc, #104]	@ (801c3a8 <ip4_reass+0x2b4>)
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c344:	e007      	b.n	801c356 <ip4_reass+0x262>
 801c346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c34c:	429a      	cmp	r2, r3
 801c34e:	d006      	beq.n	801c35e <ip4_reass+0x26a>
 801c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c358:	2b00      	cmp	r3, #0
 801c35a:	d1f4      	bne.n	801c346 <ip4_reass+0x252>
 801c35c:	e000      	b.n	801c360 <ip4_reass+0x26c>
 801c35e:	bf00      	nop
 801c360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c362:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c364:	f7ff fd2e 	bl	801bdc4 <ip_reass_dequeue_datagram>
 801c368:	6878      	ldr	r0, [r7, #4]
 801c36a:	f7f6 fedb 	bl	8013124 <pbuf_clen>
 801c36e:	4603      	mov	r3, r0
 801c370:	843b      	strh	r3, [r7, #32]
 801c372:	4b0c      	ldr	r3, [pc, #48]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c374:	881b      	ldrh	r3, [r3, #0]
 801c376:	8c3a      	ldrh	r2, [r7, #32]
 801c378:	429a      	cmp	r2, r3
 801c37a:	d906      	bls.n	801c38a <ip4_reass+0x296>
 801c37c:	4b0b      	ldr	r3, [pc, #44]	@ (801c3ac <ip4_reass+0x2b8>)
 801c37e:	f240 229b 	movw	r2, #667	@ 0x29b
 801c382:	490b      	ldr	r1, [pc, #44]	@ (801c3b0 <ip4_reass+0x2bc>)
 801c384:	480b      	ldr	r0, [pc, #44]	@ (801c3b4 <ip4_reass+0x2c0>)
 801c386:	f001 f9ff 	bl	801d788 <iprintf>
 801c38a:	4b06      	ldr	r3, [pc, #24]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c38c:	881a      	ldrh	r2, [r3, #0]
 801c38e:	8c3b      	ldrh	r3, [r7, #32]
 801c390:	1ad3      	subs	r3, r2, r3
 801c392:	b29a      	uxth	r2, r3
 801c394:	4b03      	ldr	r3, [pc, #12]	@ (801c3a4 <ip4_reass+0x2b0>)
 801c396:	801a      	strh	r2, [r3, #0]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	e038      	b.n	801c40e <ip4_reass+0x31a>
 801c39c:	2300      	movs	r3, #0
 801c39e:	e036      	b.n	801c40e <ip4_reass+0x31a>
 801c3a0:	bf00      	nop
 801c3a2:	e00a      	b.n	801c3ba <ip4_reass+0x2c6>
 801c3a4:	2000f534 	.word	0x2000f534
 801c3a8:	2000f530 	.word	0x2000f530
 801c3ac:	0802330c 	.word	0x0802330c
 801c3b0:	0802347c 	.word	0x0802347c
 801c3b4:	08023354 	.word	0x08023354
 801c3b8:	bf00      	nop
 801c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d106      	bne.n	801c3ce <ip4_reass+0x2da>
 801c3c0:	4b15      	ldr	r3, [pc, #84]	@ (801c418 <ip4_reass+0x324>)
 801c3c2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c3c6:	4915      	ldr	r1, [pc, #84]	@ (801c41c <ip4_reass+0x328>)
 801c3c8:	4815      	ldr	r0, [pc, #84]	@ (801c420 <ip4_reass+0x32c>)
 801c3ca:	f001 f9dd 	bl	801d788 <iprintf>
 801c3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3d0:	685b      	ldr	r3, [r3, #4]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d116      	bne.n	801c404 <ip4_reass+0x310>
 801c3d6:	4b13      	ldr	r3, [pc, #76]	@ (801c424 <ip4_reass+0x330>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	d006      	beq.n	801c3ee <ip4_reass+0x2fa>
 801c3e0:	4b0d      	ldr	r3, [pc, #52]	@ (801c418 <ip4_reass+0x324>)
 801c3e2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c3e6:	4910      	ldr	r1, [pc, #64]	@ (801c428 <ip4_reass+0x334>)
 801c3e8:	480d      	ldr	r0, [pc, #52]	@ (801c420 <ip4_reass+0x32c>)
 801c3ea:	f001 f9cd 	bl	801d788 <iprintf>
 801c3ee:	2100      	movs	r1, #0
 801c3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c3f2:	f7ff fce7 	bl	801bdc4 <ip_reass_dequeue_datagram>
 801c3f6:	e006      	b.n	801c406 <ip4_reass+0x312>
 801c3f8:	bf00      	nop
 801c3fa:	e004      	b.n	801c406 <ip4_reass+0x312>
 801c3fc:	bf00      	nop
 801c3fe:	e002      	b.n	801c406 <ip4_reass+0x312>
 801c400:	bf00      	nop
 801c402:	e000      	b.n	801c406 <ip4_reass+0x312>
 801c404:	bf00      	nop
 801c406:	6878      	ldr	r0, [r7, #4]
 801c408:	f7f6 fdfe 	bl	8013008 <pbuf_free>
 801c40c:	2300      	movs	r3, #0
 801c40e:	4618      	mov	r0, r3
 801c410:	3738      	adds	r7, #56	@ 0x38
 801c412:	46bd      	mov	sp, r7
 801c414:	bd80      	pop	{r7, pc}
 801c416:	bf00      	nop
 801c418:	0802330c 	.word	0x0802330c
 801c41c:	08023498 	.word	0x08023498
 801c420:	08023354 	.word	0x08023354
 801c424:	2000f530 	.word	0x2000f530
 801c428:	080234a4 	.word	0x080234a4

0801c42c <ip_frag_alloc_pbuf_custom_ref>:
 801c42c:	b580      	push	{r7, lr}
 801c42e:	af00      	add	r7, sp, #0
 801c430:	2005      	movs	r0, #5
 801c432:	f7f5 fecf 	bl	80121d4 <memp_malloc>
 801c436:	4603      	mov	r3, r0
 801c438:	4618      	mov	r0, r3
 801c43a:	bd80      	pop	{r7, pc}

0801c43c <ip_frag_free_pbuf_custom_ref>:
 801c43c:	b580      	push	{r7, lr}
 801c43e:	b082      	sub	sp, #8
 801c440:	af00      	add	r7, sp, #0
 801c442:	6078      	str	r0, [r7, #4]
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d106      	bne.n	801c458 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c44a:	4b07      	ldr	r3, [pc, #28]	@ (801c468 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c44c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c450:	4906      	ldr	r1, [pc, #24]	@ (801c46c <ip_frag_free_pbuf_custom_ref+0x30>)
 801c452:	4807      	ldr	r0, [pc, #28]	@ (801c470 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c454:	f001 f998 	bl	801d788 <iprintf>
 801c458:	6879      	ldr	r1, [r7, #4]
 801c45a:	2005      	movs	r0, #5
 801c45c:	f7f5 ff30 	bl	80122c0 <memp_free>
 801c460:	bf00      	nop
 801c462:	3708      	adds	r7, #8
 801c464:	46bd      	mov	sp, r7
 801c466:	bd80      	pop	{r7, pc}
 801c468:	0802330c 	.word	0x0802330c
 801c46c:	080234c4 	.word	0x080234c4
 801c470:	08023354 	.word	0x08023354

0801c474 <ipfrag_free_pbuf_custom>:
 801c474:	b580      	push	{r7, lr}
 801c476:	b084      	sub	sp, #16
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	60fb      	str	r3, [r7, #12]
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	2b00      	cmp	r3, #0
 801c484:	d106      	bne.n	801c494 <ipfrag_free_pbuf_custom+0x20>
 801c486:	4b11      	ldr	r3, [pc, #68]	@ (801c4cc <ipfrag_free_pbuf_custom+0x58>)
 801c488:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c48c:	4910      	ldr	r1, [pc, #64]	@ (801c4d0 <ipfrag_free_pbuf_custom+0x5c>)
 801c48e:	4811      	ldr	r0, [pc, #68]	@ (801c4d4 <ipfrag_free_pbuf_custom+0x60>)
 801c490:	f001 f97a 	bl	801d788 <iprintf>
 801c494:	68fa      	ldr	r2, [r7, #12]
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	429a      	cmp	r2, r3
 801c49a:	d006      	beq.n	801c4aa <ipfrag_free_pbuf_custom+0x36>
 801c49c:	4b0b      	ldr	r3, [pc, #44]	@ (801c4cc <ipfrag_free_pbuf_custom+0x58>)
 801c49e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c4a2:	490d      	ldr	r1, [pc, #52]	@ (801c4d8 <ipfrag_free_pbuf_custom+0x64>)
 801c4a4:	480b      	ldr	r0, [pc, #44]	@ (801c4d4 <ipfrag_free_pbuf_custom+0x60>)
 801c4a6:	f001 f96f 	bl	801d788 <iprintf>
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	695b      	ldr	r3, [r3, #20]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d004      	beq.n	801c4bc <ipfrag_free_pbuf_custom+0x48>
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	695b      	ldr	r3, [r3, #20]
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	f7f6 fda6 	bl	8013008 <pbuf_free>
 801c4bc:	68f8      	ldr	r0, [r7, #12]
 801c4be:	f7ff ffbd 	bl	801c43c <ip_frag_free_pbuf_custom_ref>
 801c4c2:	bf00      	nop
 801c4c4:	3710      	adds	r7, #16
 801c4c6:	46bd      	mov	sp, r7
 801c4c8:	bd80      	pop	{r7, pc}
 801c4ca:	bf00      	nop
 801c4cc:	0802330c 	.word	0x0802330c
 801c4d0:	080234d0 	.word	0x080234d0
 801c4d4:	08023354 	.word	0x08023354
 801c4d8:	080234dc 	.word	0x080234dc

0801c4dc <ip4_frag>:
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b094      	sub	sp, #80	@ 0x50
 801c4e0:	af02      	add	r7, sp, #8
 801c4e2:	60f8      	str	r0, [r7, #12]
 801c4e4:	60b9      	str	r1, [r7, #8]
 801c4e6:	607a      	str	r2, [r7, #4]
 801c4e8:	2300      	movs	r3, #0
 801c4ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801c4ee:	68bb      	ldr	r3, [r7, #8]
 801c4f0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c4f2:	3b14      	subs	r3, #20
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	da00      	bge.n	801c4fa <ip4_frag+0x1e>
 801c4f8:	3307      	adds	r3, #7
 801c4fa:	10db      	asrs	r3, r3, #3
 801c4fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801c4fe:	2314      	movs	r3, #20
 801c500:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	685b      	ldr	r3, [r3, #4]
 801c506:	637b      	str	r3, [r7, #52]	@ 0x34
 801c508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c50a:	633b      	str	r3, [r7, #48]	@ 0x30
 801c50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c50e:	781b      	ldrb	r3, [r3, #0]
 801c510:	f003 030f 	and.w	r3, r3, #15
 801c514:	b2db      	uxtb	r3, r3
 801c516:	009b      	lsls	r3, r3, #2
 801c518:	b2db      	uxtb	r3, r3
 801c51a:	2b14      	cmp	r3, #20
 801c51c:	d002      	beq.n	801c524 <ip4_frag+0x48>
 801c51e:	f06f 0305 	mvn.w	r3, #5
 801c522:	e110      	b.n	801c746 <ip4_frag+0x26a>
 801c524:	68fb      	ldr	r3, [r7, #12]
 801c526:	895b      	ldrh	r3, [r3, #10]
 801c528:	2b13      	cmp	r3, #19
 801c52a:	d809      	bhi.n	801c540 <ip4_frag+0x64>
 801c52c:	4b88      	ldr	r3, [pc, #544]	@ (801c750 <ip4_frag+0x274>)
 801c52e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c532:	4988      	ldr	r1, [pc, #544]	@ (801c754 <ip4_frag+0x278>)
 801c534:	4888      	ldr	r0, [pc, #544]	@ (801c758 <ip4_frag+0x27c>)
 801c536:	f001 f927 	bl	801d788 <iprintf>
 801c53a:	f06f 0305 	mvn.w	r3, #5
 801c53e:	e102      	b.n	801c746 <ip4_frag+0x26a>
 801c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c542:	88db      	ldrh	r3, [r3, #6]
 801c544:	b29b      	uxth	r3, r3
 801c546:	4618      	mov	r0, r3
 801c548:	f7f5 f936 	bl	80117b8 <lwip_htons>
 801c54c:	4603      	mov	r3, r0
 801c54e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801c550:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c552:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c556:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801c55a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c55c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c562:	68fb      	ldr	r3, [r7, #12]
 801c564:	891b      	ldrh	r3, [r3, #8]
 801c566:	3b14      	subs	r3, #20
 801c568:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801c56c:	e0e1      	b.n	801c732 <ip4_frag+0x256>
 801c56e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c570:	00db      	lsls	r3, r3, #3
 801c572:	b29b      	uxth	r3, r3
 801c574:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c578:	4293      	cmp	r3, r2
 801c57a:	bf28      	it	cs
 801c57c:	4613      	movcs	r3, r2
 801c57e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 801c580:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c584:	2114      	movs	r1, #20
 801c586:	200e      	movs	r0, #14
 801c588:	f7f6 fa5a 	bl	8012a40 <pbuf_alloc>
 801c58c:	6278      	str	r0, [r7, #36]	@ 0x24
 801c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c590:	2b00      	cmp	r3, #0
 801c592:	f000 80d5 	beq.w	801c740 <ip4_frag+0x264>
 801c596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c598:	895b      	ldrh	r3, [r3, #10]
 801c59a:	2b13      	cmp	r3, #19
 801c59c:	d806      	bhi.n	801c5ac <ip4_frag+0xd0>
 801c59e:	4b6c      	ldr	r3, [pc, #432]	@ (801c750 <ip4_frag+0x274>)
 801c5a0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c5a4:	496d      	ldr	r1, [pc, #436]	@ (801c75c <ip4_frag+0x280>)
 801c5a6:	486c      	ldr	r0, [pc, #432]	@ (801c758 <ip4_frag+0x27c>)
 801c5a8:	f001 f8ee 	bl	801d788 <iprintf>
 801c5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5ae:	685b      	ldr	r3, [r3, #4]
 801c5b0:	2214      	movs	r2, #20
 801c5b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	f001 fb68 	bl	801dc8a <memcpy>
 801c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	633b      	str	r3, [r7, #48]	@ 0x30
 801c5c0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 801c5c6:	e064      	b.n	801c692 <ip4_frag+0x1b6>
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	895a      	ldrh	r2, [r3, #10]
 801c5cc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c5ce:	1ad3      	subs	r3, r2, r3
 801c5d0:	83fb      	strh	r3, [r7, #30]
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	895b      	ldrh	r3, [r3, #10]
 801c5d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c5d8:	429a      	cmp	r2, r3
 801c5da:	d906      	bls.n	801c5ea <ip4_frag+0x10e>
 801c5dc:	4b5c      	ldr	r3, [pc, #368]	@ (801c750 <ip4_frag+0x274>)
 801c5de:	f240 322d 	movw	r2, #813	@ 0x32d
 801c5e2:	495f      	ldr	r1, [pc, #380]	@ (801c760 <ip4_frag+0x284>)
 801c5e4:	485c      	ldr	r0, [pc, #368]	@ (801c758 <ip4_frag+0x27c>)
 801c5e6:	f001 f8cf 	bl	801d788 <iprintf>
 801c5ea:	8bfa      	ldrh	r2, [r7, #30]
 801c5ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c5f0:	4293      	cmp	r3, r2
 801c5f2:	bf28      	it	cs
 801c5f4:	4613      	movcs	r3, r2
 801c5f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 801c5fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d105      	bne.n	801c60e <ip4_frag+0x132>
 801c602:	2300      	movs	r3, #0
 801c604:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	60fb      	str	r3, [r7, #12]
 801c60c:	e041      	b.n	801c692 <ip4_frag+0x1b6>
 801c60e:	f7ff ff0d 	bl	801c42c <ip_frag_alloc_pbuf_custom_ref>
 801c612:	61b8      	str	r0, [r7, #24]
 801c614:	69bb      	ldr	r3, [r7, #24]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d103      	bne.n	801c622 <ip4_frag+0x146>
 801c61a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c61c:	f7f6 fcf4 	bl	8013008 <pbuf_free>
 801c620:	e08f      	b.n	801c742 <ip4_frag+0x266>
 801c622:	69b8      	ldr	r0, [r7, #24]
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	685a      	ldr	r2, [r3, #4]
 801c628:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c62a:	4413      	add	r3, r2
 801c62c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c630:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c634:	9201      	str	r2, [sp, #4]
 801c636:	9300      	str	r3, [sp, #0]
 801c638:	4603      	mov	r3, r0
 801c63a:	2241      	movs	r2, #65	@ 0x41
 801c63c:	2000      	movs	r0, #0
 801c63e:	f7f6 fb29 	bl	8012c94 <pbuf_alloced_custom>
 801c642:	6178      	str	r0, [r7, #20]
 801c644:	697b      	ldr	r3, [r7, #20]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d106      	bne.n	801c658 <ip4_frag+0x17c>
 801c64a:	69b8      	ldr	r0, [r7, #24]
 801c64c:	f7ff fef6 	bl	801c43c <ip_frag_free_pbuf_custom_ref>
 801c650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c652:	f7f6 fcd9 	bl	8013008 <pbuf_free>
 801c656:	e074      	b.n	801c742 <ip4_frag+0x266>
 801c658:	68f8      	ldr	r0, [r7, #12]
 801c65a:	f7f6 fd7b 	bl	8013154 <pbuf_ref>
 801c65e:	69bb      	ldr	r3, [r7, #24]
 801c660:	68fa      	ldr	r2, [r7, #12]
 801c662:	615a      	str	r2, [r3, #20]
 801c664:	69bb      	ldr	r3, [r7, #24]
 801c666:	4a3f      	ldr	r2, [pc, #252]	@ (801c764 <ip4_frag+0x288>)
 801c668:	611a      	str	r2, [r3, #16]
 801c66a:	6979      	ldr	r1, [r7, #20]
 801c66c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c66e:	f7f6 fd99 	bl	80131a4 <pbuf_cat>
 801c672:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c676:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c67a:	1ad3      	subs	r3, r2, r3
 801c67c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 801c680:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c684:	2b00      	cmp	r3, #0
 801c686:	d004      	beq.n	801c692 <ip4_frag+0x1b6>
 801c688:	2300      	movs	r3, #0
 801c68a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	60fb      	str	r3, [r7, #12]
 801c692:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c696:	2b00      	cmp	r3, #0
 801c698:	d196      	bne.n	801c5c8 <ip4_frag+0xec>
 801c69a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c69c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c6a0:	4413      	add	r3, r2
 801c6a2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801c6a4:	68bb      	ldr	r3, [r7, #8]
 801c6a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c6a8:	f1a3 0213 	sub.w	r2, r3, #19
 801c6ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c6b0:	429a      	cmp	r2, r3
 801c6b2:	bfcc      	ite	gt
 801c6b4:	2301      	movgt	r3, #1
 801c6b6:	2300      	movle	r3, #0
 801c6b8:	b2db      	uxtb	r3, r3
 801c6ba:	623b      	str	r3, [r7, #32]
 801c6bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c6c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c6c4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801c6c6:	6a3b      	ldr	r3, [r7, #32]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d002      	beq.n	801c6d2 <ip4_frag+0x1f6>
 801c6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d003      	beq.n	801c6da <ip4_frag+0x1fe>
 801c6d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c6d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c6d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801c6da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c6dc:	4618      	mov	r0, r3
 801c6de:	f7f5 f86b 	bl	80117b8 <lwip_htons>
 801c6e2:	4603      	mov	r3, r0
 801c6e4:	461a      	mov	r2, r3
 801c6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6e8:	80da      	strh	r2, [r3, #6]
 801c6ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c6ec:	3314      	adds	r3, #20
 801c6ee:	b29b      	uxth	r3, r3
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7f5 f861 	bl	80117b8 <lwip_htons>
 801c6f6:	4603      	mov	r3, r0
 801c6f8:	461a      	mov	r2, r3
 801c6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6fc:	805a      	strh	r2, [r3, #2]
 801c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c700:	2200      	movs	r2, #0
 801c702:	729a      	strb	r2, [r3, #10]
 801c704:	2200      	movs	r2, #0
 801c706:	72da      	strb	r2, [r3, #11]
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	695b      	ldr	r3, [r3, #20]
 801c70c:	687a      	ldr	r2, [r7, #4]
 801c70e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c710:	68b8      	ldr	r0, [r7, #8]
 801c712:	4798      	blx	r3
 801c714:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c716:	f7f6 fc77 	bl	8013008 <pbuf_free>
 801c71a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c71e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c720:	1ad3      	subs	r3, r2, r3
 801c722:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801c726:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c72a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c72c:	4413      	add	r3, r2
 801c72e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801c732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c736:	2b00      	cmp	r3, #0
 801c738:	f47f af19 	bne.w	801c56e <ip4_frag+0x92>
 801c73c:	2300      	movs	r3, #0
 801c73e:	e002      	b.n	801c746 <ip4_frag+0x26a>
 801c740:	bf00      	nop
 801c742:	f04f 33ff 	mov.w	r3, #4294967295
 801c746:	4618      	mov	r0, r3
 801c748:	3748      	adds	r7, #72	@ 0x48
 801c74a:	46bd      	mov	sp, r7
 801c74c:	bd80      	pop	{r7, pc}
 801c74e:	bf00      	nop
 801c750:	0802330c 	.word	0x0802330c
 801c754:	080234e8 	.word	0x080234e8
 801c758:	08023354 	.word	0x08023354
 801c75c:	08023504 	.word	0x08023504
 801c760:	08023524 	.word	0x08023524
 801c764:	0801c475 	.word	0x0801c475

0801c768 <ethernet_input>:
 801c768:	b580      	push	{r7, lr}
 801c76a:	b086      	sub	sp, #24
 801c76c:	af00      	add	r7, sp, #0
 801c76e:	6078      	str	r0, [r7, #4]
 801c770:	6039      	str	r1, [r7, #0]
 801c772:	230e      	movs	r3, #14
 801c774:	82fb      	strh	r3, [r7, #22]
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	895b      	ldrh	r3, [r3, #10]
 801c77a:	2b0e      	cmp	r3, #14
 801c77c:	d96e      	bls.n	801c85c <ethernet_input+0xf4>
 801c77e:	687b      	ldr	r3, [r7, #4]
 801c780:	7bdb      	ldrb	r3, [r3, #15]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d106      	bne.n	801c794 <ethernet_input+0x2c>
 801c786:	683b      	ldr	r3, [r7, #0]
 801c788:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c78c:	3301      	adds	r3, #1
 801c78e:	b2da      	uxtb	r2, r3
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	73da      	strb	r2, [r3, #15]
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	685b      	ldr	r3, [r3, #4]
 801c798:	613b      	str	r3, [r7, #16]
 801c79a:	693b      	ldr	r3, [r7, #16]
 801c79c:	7b1a      	ldrb	r2, [r3, #12]
 801c79e:	7b5b      	ldrb	r3, [r3, #13]
 801c7a0:	021b      	lsls	r3, r3, #8
 801c7a2:	4313      	orrs	r3, r2
 801c7a4:	81fb      	strh	r3, [r7, #14]
 801c7a6:	693b      	ldr	r3, [r7, #16]
 801c7a8:	781b      	ldrb	r3, [r3, #0]
 801c7aa:	f003 0301 	and.w	r3, r3, #1
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d023      	beq.n	801c7fa <ethernet_input+0x92>
 801c7b2:	693b      	ldr	r3, [r7, #16]
 801c7b4:	781b      	ldrb	r3, [r3, #0]
 801c7b6:	2b01      	cmp	r3, #1
 801c7b8:	d10f      	bne.n	801c7da <ethernet_input+0x72>
 801c7ba:	693b      	ldr	r3, [r7, #16]
 801c7bc:	785b      	ldrb	r3, [r3, #1]
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	d11b      	bne.n	801c7fa <ethernet_input+0x92>
 801c7c2:	693b      	ldr	r3, [r7, #16]
 801c7c4:	789b      	ldrb	r3, [r3, #2]
 801c7c6:	2b5e      	cmp	r3, #94	@ 0x5e
 801c7c8:	d117      	bne.n	801c7fa <ethernet_input+0x92>
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	7b5b      	ldrb	r3, [r3, #13]
 801c7ce:	f043 0310 	orr.w	r3, r3, #16
 801c7d2:	b2da      	uxtb	r2, r3
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	735a      	strb	r2, [r3, #13]
 801c7d8:	e00f      	b.n	801c7fa <ethernet_input+0x92>
 801c7da:	693b      	ldr	r3, [r7, #16]
 801c7dc:	2206      	movs	r2, #6
 801c7de:	4928      	ldr	r1, [pc, #160]	@ (801c880 <ethernet_input+0x118>)
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f001 f939 	bl	801da58 <memcmp>
 801c7e6:	4603      	mov	r3, r0
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d106      	bne.n	801c7fa <ethernet_input+0x92>
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	7b5b      	ldrb	r3, [r3, #13]
 801c7f0:	f043 0308 	orr.w	r3, r3, #8
 801c7f4:	b2da      	uxtb	r2, r3
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	735a      	strb	r2, [r3, #13]
 801c7fa:	89fb      	ldrh	r3, [r7, #14]
 801c7fc:	2b08      	cmp	r3, #8
 801c7fe:	d003      	beq.n	801c808 <ethernet_input+0xa0>
 801c800:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c804:	d014      	beq.n	801c830 <ethernet_input+0xc8>
 801c806:	e032      	b.n	801c86e <ethernet_input+0x106>
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c80e:	f003 0308 	and.w	r3, r3, #8
 801c812:	2b00      	cmp	r3, #0
 801c814:	d024      	beq.n	801c860 <ethernet_input+0xf8>
 801c816:	8afb      	ldrh	r3, [r7, #22]
 801c818:	4619      	mov	r1, r3
 801c81a:	6878      	ldr	r0, [r7, #4]
 801c81c:	f7f6 fb6e 	bl	8012efc <pbuf_remove_header>
 801c820:	4603      	mov	r3, r0
 801c822:	2b00      	cmp	r3, #0
 801c824:	d11e      	bne.n	801c864 <ethernet_input+0xfc>
 801c826:	6839      	ldr	r1, [r7, #0]
 801c828:	6878      	ldr	r0, [r7, #4]
 801c82a:	f7fe ff21 	bl	801b670 <ip4_input>
 801c82e:	e013      	b.n	801c858 <ethernet_input+0xf0>
 801c830:	683b      	ldr	r3, [r7, #0]
 801c832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c836:	f003 0308 	and.w	r3, r3, #8
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d014      	beq.n	801c868 <ethernet_input+0x100>
 801c83e:	8afb      	ldrh	r3, [r7, #22]
 801c840:	4619      	mov	r1, r3
 801c842:	6878      	ldr	r0, [r7, #4]
 801c844:	f7f6 fb5a 	bl	8012efc <pbuf_remove_header>
 801c848:	4603      	mov	r3, r0
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	d10e      	bne.n	801c86c <ethernet_input+0x104>
 801c84e:	6839      	ldr	r1, [r7, #0]
 801c850:	6878      	ldr	r0, [r7, #4]
 801c852:	f7fe f8c1 	bl	801a9d8 <etharp_input>
 801c856:	bf00      	nop
 801c858:	2300      	movs	r3, #0
 801c85a:	e00c      	b.n	801c876 <ethernet_input+0x10e>
 801c85c:	bf00      	nop
 801c85e:	e006      	b.n	801c86e <ethernet_input+0x106>
 801c860:	bf00      	nop
 801c862:	e004      	b.n	801c86e <ethernet_input+0x106>
 801c864:	bf00      	nop
 801c866:	e002      	b.n	801c86e <ethernet_input+0x106>
 801c868:	bf00      	nop
 801c86a:	e000      	b.n	801c86e <ethernet_input+0x106>
 801c86c:	bf00      	nop
 801c86e:	6878      	ldr	r0, [r7, #4]
 801c870:	f7f6 fbca 	bl	8013008 <pbuf_free>
 801c874:	2300      	movs	r3, #0
 801c876:	4618      	mov	r0, r3
 801c878:	3718      	adds	r7, #24
 801c87a:	46bd      	mov	sp, r7
 801c87c:	bd80      	pop	{r7, pc}
 801c87e:	bf00      	nop
 801c880:	080243c4 	.word	0x080243c4

0801c884 <ethernet_output>:
 801c884:	b580      	push	{r7, lr}
 801c886:	b086      	sub	sp, #24
 801c888:	af00      	add	r7, sp, #0
 801c88a:	60f8      	str	r0, [r7, #12]
 801c88c:	60b9      	str	r1, [r7, #8]
 801c88e:	607a      	str	r2, [r7, #4]
 801c890:	603b      	str	r3, [r7, #0]
 801c892:	8c3b      	ldrh	r3, [r7, #32]
 801c894:	4618      	mov	r0, r3
 801c896:	f7f4 ff8f 	bl	80117b8 <lwip_htons>
 801c89a:	4603      	mov	r3, r0
 801c89c:	82fb      	strh	r3, [r7, #22]
 801c89e:	210e      	movs	r1, #14
 801c8a0:	68b8      	ldr	r0, [r7, #8]
 801c8a2:	f7f6 fb1b 	bl	8012edc <pbuf_add_header>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d125      	bne.n	801c8f8 <ethernet_output+0x74>
 801c8ac:	68bb      	ldr	r3, [r7, #8]
 801c8ae:	685b      	ldr	r3, [r3, #4]
 801c8b0:	613b      	str	r3, [r7, #16]
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	8afa      	ldrh	r2, [r7, #22]
 801c8b6:	819a      	strh	r2, [r3, #12]
 801c8b8:	693b      	ldr	r3, [r7, #16]
 801c8ba:	2206      	movs	r2, #6
 801c8bc:	6839      	ldr	r1, [r7, #0]
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f001 f9e3 	bl	801dc8a <memcpy>
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	3306      	adds	r3, #6
 801c8c8:	2206      	movs	r2, #6
 801c8ca:	6879      	ldr	r1, [r7, #4]
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	f001 f9dc 	bl	801dc8a <memcpy>
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c8d8:	2b06      	cmp	r3, #6
 801c8da:	d006      	beq.n	801c8ea <ethernet_output+0x66>
 801c8dc:	4b0a      	ldr	r3, [pc, #40]	@ (801c908 <ethernet_output+0x84>)
 801c8de:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c8e2:	490a      	ldr	r1, [pc, #40]	@ (801c90c <ethernet_output+0x88>)
 801c8e4:	480a      	ldr	r0, [pc, #40]	@ (801c910 <ethernet_output+0x8c>)
 801c8e6:	f000 ff4f 	bl	801d788 <iprintf>
 801c8ea:	68fb      	ldr	r3, [r7, #12]
 801c8ec:	699b      	ldr	r3, [r3, #24]
 801c8ee:	68b9      	ldr	r1, [r7, #8]
 801c8f0:	68f8      	ldr	r0, [r7, #12]
 801c8f2:	4798      	blx	r3
 801c8f4:	4603      	mov	r3, r0
 801c8f6:	e002      	b.n	801c8fe <ethernet_output+0x7a>
 801c8f8:	bf00      	nop
 801c8fa:	f06f 0301 	mvn.w	r3, #1
 801c8fe:	4618      	mov	r0, r3
 801c900:	3718      	adds	r7, #24
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}
 801c906:	bf00      	nop
 801c908:	08023534 	.word	0x08023534
 801c90c:	0802356c 	.word	0x0802356c
 801c910:	080235a0 	.word	0x080235a0

0801c914 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c914:	b580      	push	{r7, lr}
 801c916:	b086      	sub	sp, #24
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
 801c91c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	60bb      	str	r3, [r7, #8]
 801c922:	2304      	movs	r3, #4
 801c924:	60fb      	str	r3, [r7, #12]
 801c926:	2300      	movs	r3, #0
 801c928:	613b      	str	r3, [r7, #16]
 801c92a:	2300      	movs	r3, #0
 801c92c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c92e:	f107 0308 	add.w	r3, r7, #8
 801c932:	2100      	movs	r1, #0
 801c934:	4618      	mov	r0, r3
 801c936:	f7ee febc 	bl	800b6b2 <osMessageCreate>
 801c93a:	4602      	mov	r2, r0
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	2b00      	cmp	r3, #0
 801c946:	d102      	bne.n	801c94e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c948:	f04f 33ff 	mov.w	r3, #4294967295
 801c94c:	e000      	b.n	801c950 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c94e:	2300      	movs	r3, #0
}
 801c950:	4618      	mov	r0, r3
 801c952:	3718      	adds	r7, #24
 801c954:	46bd      	mov	sp, r7
 801c956:	bd80      	pop	{r7, pc}

0801c958 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	4618      	mov	r0, r3
 801c966:	f7ee ff81 	bl	800b86c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	4618      	mov	r0, r3
 801c970:	f7ee ff92 	bl	800b898 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c974:	bf00      	nop
 801c976:	3708      	adds	r7, #8
 801c978:	46bd      	mov	sp, r7
 801c97a:	bd80      	pop	{r7, pc}

0801c97c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c97c:	b580      	push	{r7, lr}
 801c97e:	b084      	sub	sp, #16
 801c980:	af00      	add	r7, sp, #0
 801c982:	6078      	str	r0, [r7, #4]
 801c984:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c986:	687b      	ldr	r3, [r7, #4]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	6839      	ldr	r1, [r7, #0]
 801c98c:	2200      	movs	r2, #0
 801c98e:	4618      	mov	r0, r3
 801c990:	f7ee feb8 	bl	800b704 <osMessagePut>
 801c994:	4603      	mov	r3, r0
 801c996:	2b00      	cmp	r3, #0
 801c998:	d102      	bne.n	801c9a0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c99a:	2300      	movs	r3, #0
 801c99c:	73fb      	strb	r3, [r7, #15]
 801c99e:	e001      	b.n	801c9a4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c9a0:	23ff      	movs	r3, #255	@ 0xff
 801c9a2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c9a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c9a8:	4618      	mov	r0, r3
 801c9aa:	3710      	adds	r7, #16
 801c9ac:	46bd      	mov	sp, r7
 801c9ae:	bd80      	pop	{r7, pc}

0801c9b0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b08c      	sub	sp, #48	@ 0x30
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	61f8      	str	r0, [r7, #28]
 801c9b8:	61b9      	str	r1, [r7, #24]
 801c9ba:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c9bc:	f7ee fca4 	bl	800b308 <osKernelSysTick>
 801c9c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d017      	beq.n	801c9f8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	6819      	ldr	r1, [r3, #0]
 801c9cc:	f107 0320 	add.w	r3, r7, #32
 801c9d0:	697a      	ldr	r2, [r7, #20]
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7ee fed6 	bl	800b784 <osMessageGet>

    if(event.status == osEventMessage)
 801c9d8:	6a3b      	ldr	r3, [r7, #32]
 801c9da:	2b10      	cmp	r3, #16
 801c9dc:	d109      	bne.n	801c9f2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9e0:	461a      	mov	r2, r3
 801c9e2:	69bb      	ldr	r3, [r7, #24]
 801c9e4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c9e6:	f7ee fc8f 	bl	800b308 <osKernelSysTick>
 801c9ea:	4602      	mov	r2, r0
 801c9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c9ee:	1ad3      	subs	r3, r2, r3
 801c9f0:	e019      	b.n	801ca26 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c9f2:	f04f 33ff 	mov.w	r3, #4294967295
 801c9f6:	e016      	b.n	801ca26 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c9f8:	69fb      	ldr	r3, [r7, #28]
 801c9fa:	6819      	ldr	r1, [r3, #0]
 801c9fc:	463b      	mov	r3, r7
 801c9fe:	f04f 32ff 	mov.w	r2, #4294967295
 801ca02:	4618      	mov	r0, r3
 801ca04:	f7ee febe 	bl	800b784 <osMessageGet>
 801ca08:	f107 0320 	add.w	r3, r7, #32
 801ca0c:	463a      	mov	r2, r7
 801ca0e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca16:	461a      	mov	r2, r3
 801ca18:	69bb      	ldr	r3, [r7, #24]
 801ca1a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ca1c:	f7ee fc74 	bl	800b308 <osKernelSysTick>
 801ca20:	4602      	mov	r2, r0
 801ca22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ca24:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ca26:	4618      	mov	r0, r3
 801ca28:	3730      	adds	r7, #48	@ 0x30
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}

0801ca2e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ca2e:	b580      	push	{r7, lr}
 801ca30:	b086      	sub	sp, #24
 801ca32:	af00      	add	r7, sp, #0
 801ca34:	6078      	str	r0, [r7, #4]
 801ca36:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	6819      	ldr	r1, [r3, #0]
 801ca3c:	f107 030c 	add.w	r3, r7, #12
 801ca40:	2200      	movs	r2, #0
 801ca42:	4618      	mov	r0, r3
 801ca44:	f7ee fe9e 	bl	800b784 <osMessageGet>

  if(event.status == osEventMessage)
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	2b10      	cmp	r3, #16
 801ca4c:	d105      	bne.n	801ca5a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801ca4e:	693b      	ldr	r3, [r7, #16]
 801ca50:	461a      	mov	r2, r3
 801ca52:	683b      	ldr	r3, [r7, #0]
 801ca54:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801ca56:	2300      	movs	r3, #0
 801ca58:	e001      	b.n	801ca5e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801ca5a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	3718      	adds	r7, #24
 801ca62:	46bd      	mov	sp, r7
 801ca64:	bd80      	pop	{r7, pc}

0801ca66 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ca66:	b480      	push	{r7}
 801ca68:	b083      	sub	sp, #12
 801ca6a:	af00      	add	r7, sp, #0
 801ca6c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d101      	bne.n	801ca7a <sys_mbox_valid+0x14>
    return 0;
 801ca76:	2300      	movs	r3, #0
 801ca78:	e000      	b.n	801ca7c <sys_mbox_valid+0x16>
  else
    return 1;
 801ca7a:	2301      	movs	r3, #1
}
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	370c      	adds	r7, #12
 801ca80:	46bd      	mov	sp, r7
 801ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca86:	4770      	bx	lr

0801ca88 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801ca88:	b480      	push	{r7}
 801ca8a:	b083      	sub	sp, #12
 801ca8c:	af00      	add	r7, sp, #0
 801ca8e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	2200      	movs	r2, #0
 801ca94:	601a      	str	r2, [r3, #0]
}
 801ca96:	bf00      	nop
 801ca98:	370c      	adds	r7, #12
 801ca9a:	46bd      	mov	sp, r7
 801ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa0:	4770      	bx	lr

0801caa2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801caa2:	b580      	push	{r7, lr}
 801caa4:	b084      	sub	sp, #16
 801caa6:	af00      	add	r7, sp, #0
 801caa8:	6078      	str	r0, [r7, #4]
 801caaa:	460b      	mov	r3, r1
 801caac:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801caae:	2300      	movs	r3, #0
 801cab0:	60bb      	str	r3, [r7, #8]
 801cab2:	2300      	movs	r3, #0
 801cab4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801cab6:	f107 0308 	add.w	r3, r7, #8
 801caba:	2101      	movs	r1, #1
 801cabc:	4618      	mov	r0, r3
 801cabe:	f7ee fd2f 	bl	800b520 <osSemaphoreCreate>
 801cac2:	4602      	mov	r2, r0
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d102      	bne.n	801cad6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cad0:	f04f 33ff 	mov.w	r3, #4294967295
 801cad4:	e009      	b.n	801caea <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801cad6:	78fb      	ldrb	r3, [r7, #3]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d105      	bne.n	801cae8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	2100      	movs	r1, #0
 801cae2:	4618      	mov	r0, r3
 801cae4:	f7ee fd4e 	bl	800b584 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801cae8:	2300      	movs	r3, #0
}
 801caea:	4618      	mov	r0, r3
 801caec:	3710      	adds	r7, #16
 801caee:	46bd      	mov	sp, r7
 801caf0:	bd80      	pop	{r7, pc}

0801caf2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801caf2:	b580      	push	{r7, lr}
 801caf4:	b084      	sub	sp, #16
 801caf6:	af00      	add	r7, sp, #0
 801caf8:	6078      	str	r0, [r7, #4]
 801cafa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801cafc:	f7ee fc04 	bl	800b308 <osKernelSysTick>
 801cb00:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801cb02:	683b      	ldr	r3, [r7, #0]
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d011      	beq.n	801cb2c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	6839      	ldr	r1, [r7, #0]
 801cb0e:	4618      	mov	r0, r3
 801cb10:	f7ee fd38 	bl	800b584 <osSemaphoreWait>
 801cb14:	4603      	mov	r3, r0
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	d105      	bne.n	801cb26 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801cb1a:	f7ee fbf5 	bl	800b308 <osKernelSysTick>
 801cb1e:	4602      	mov	r2, r0
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	1ad3      	subs	r3, r2, r3
 801cb24:	e012      	b.n	801cb4c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cb26:	f04f 33ff 	mov.w	r3, #4294967295
 801cb2a:	e00f      	b.n	801cb4c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801cb2c:	bf00      	nop
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	681b      	ldr	r3, [r3, #0]
 801cb32:	f04f 31ff 	mov.w	r1, #4294967295
 801cb36:	4618      	mov	r0, r3
 801cb38:	f7ee fd24 	bl	800b584 <osSemaphoreWait>
 801cb3c:	4603      	mov	r3, r0
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d1f5      	bne.n	801cb2e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801cb42:	f7ee fbe1 	bl	800b308 <osKernelSysTick>
 801cb46:	4602      	mov	r2, r0
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	3710      	adds	r7, #16
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}

0801cb54 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	4618      	mov	r0, r3
 801cb62:	f7ee fd5d 	bl	800b620 <osSemaphoreRelease>
}
 801cb66:	bf00      	nop
 801cb68:	3708      	adds	r7, #8
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}

0801cb6e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801cb6e:	b580      	push	{r7, lr}
 801cb70:	b082      	sub	sp, #8
 801cb72:	af00      	add	r7, sp, #0
 801cb74:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681b      	ldr	r3, [r3, #0]
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f7ee fd86 	bl	800b68c <osSemaphoreDelete>
}
 801cb80:	bf00      	nop
 801cb82:	3708      	adds	r7, #8
 801cb84:	46bd      	mov	sp, r7
 801cb86:	bd80      	pop	{r7, pc}

0801cb88 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801cb88:	b480      	push	{r7}
 801cb8a:	b083      	sub	sp, #12
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d101      	bne.n	801cb9c <sys_sem_valid+0x14>
    return 0;
 801cb98:	2300      	movs	r3, #0
 801cb9a:	e000      	b.n	801cb9e <sys_sem_valid+0x16>
  else
    return 1;
 801cb9c:	2301      	movs	r3, #1
}
 801cb9e:	4618      	mov	r0, r3
 801cba0:	370c      	adds	r7, #12
 801cba2:	46bd      	mov	sp, r7
 801cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba8:	4770      	bx	lr

0801cbaa <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801cbaa:	b480      	push	{r7}
 801cbac:	b083      	sub	sp, #12
 801cbae:	af00      	add	r7, sp, #0
 801cbb0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2200      	movs	r2, #0
 801cbb6:	601a      	str	r2, [r3, #0]
}
 801cbb8:	bf00      	nop
 801cbba:	370c      	adds	r7, #12
 801cbbc:	46bd      	mov	sp, r7
 801cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbc2:	4770      	bx	lr

0801cbc4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cbc4:	b580      	push	{r7, lr}
 801cbc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801cbc8:	4803      	ldr	r0, [pc, #12]	@ (801cbd8 <sys_init+0x14>)
 801cbca:	f7ee fc0d 	bl	800b3e8 <osMutexCreate>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	4a02      	ldr	r2, [pc, #8]	@ (801cbdc <sys_init+0x18>)
 801cbd2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801cbd4:	bf00      	nop
 801cbd6:	bd80      	pop	{r7, pc}
 801cbd8:	080243d4 	.word	0x080243d4
 801cbdc:	2000f538 	.word	0x2000f538

0801cbe0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b084      	sub	sp, #16
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801cbe8:	2300      	movs	r3, #0
 801cbea:	60bb      	str	r3, [r7, #8]
 801cbec:	2300      	movs	r3, #0
 801cbee:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801cbf0:	f107 0308 	add.w	r3, r7, #8
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7ee fbf7 	bl	800b3e8 <osMutexCreate>
 801cbfa:	4602      	mov	r2, r0
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d102      	bne.n	801cc0e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cc08:	f04f 33ff 	mov.w	r3, #4294967295
 801cc0c:	e000      	b.n	801cc10 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cc0e:	2300      	movs	r3, #0
}
 801cc10:	4618      	mov	r0, r3
 801cc12:	3710      	adds	r7, #16
 801cc14:	46bd      	mov	sp, r7
 801cc16:	bd80      	pop	{r7, pc}

0801cc18 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	f04f 31ff 	mov.w	r1, #4294967295
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7ee fbf5 	bl	800b418 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801cc2e:	bf00      	nop
 801cc30:	3708      	adds	r7, #8
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bd80      	pop	{r7, pc}

0801cc36 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cc36:	b580      	push	{r7, lr}
 801cc38:	b082      	sub	sp, #8
 801cc3a:	af00      	add	r7, sp, #0
 801cc3c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	4618      	mov	r0, r3
 801cc44:	f7ee fc36 	bl	800b4b4 <osMutexRelease>
}
 801cc48:	bf00      	nop
 801cc4a:	3708      	adds	r7, #8
 801cc4c:	46bd      	mov	sp, r7
 801cc4e:	bd80      	pop	{r7, pc}

0801cc50 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b08c      	sub	sp, #48	@ 0x30
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	60f8      	str	r0, [r7, #12]
 801cc58:	60b9      	str	r1, [r7, #8]
 801cc5a:	607a      	str	r2, [r7, #4]
 801cc5c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cc5e:	f107 0314 	add.w	r3, r7, #20
 801cc62:	2200      	movs	r2, #0
 801cc64:	601a      	str	r2, [r3, #0]
 801cc66:	605a      	str	r2, [r3, #4]
 801cc68:	609a      	str	r2, [r3, #8]
 801cc6a:	60da      	str	r2, [r3, #12]
 801cc6c:	611a      	str	r2, [r3, #16]
 801cc6e:	615a      	str	r2, [r3, #20]
 801cc70:	619a      	str	r2, [r3, #24]
 801cc72:	68fb      	ldr	r3, [r7, #12]
 801cc74:	617b      	str	r3, [r7, #20]
 801cc76:	68bb      	ldr	r3, [r7, #8]
 801cc78:	61bb      	str	r3, [r7, #24]
 801cc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cc7c:	b21b      	sxth	r3, r3
 801cc7e:	83bb      	strh	r3, [r7, #28]
 801cc80:	683b      	ldr	r3, [r7, #0]
 801cc82:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801cc84:	f107 0314 	add.w	r3, r7, #20
 801cc88:	6879      	ldr	r1, [r7, #4]
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7ee fb4c 	bl	800b328 <osThreadCreate>
 801cc90:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801cc92:	4618      	mov	r0, r3
 801cc94:	3730      	adds	r7, #48	@ 0x30
 801cc96:	46bd      	mov	sp, r7
 801cc98:	bd80      	pop	{r7, pc}
	...

0801cc9c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801cca0:	4b04      	ldr	r3, [pc, #16]	@ (801ccb4 <sys_arch_protect+0x18>)
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	f04f 31ff 	mov.w	r1, #4294967295
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f7ee fbb5 	bl	800b418 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801ccae:	2301      	movs	r3, #1
}
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	bd80      	pop	{r7, pc}
 801ccb4:	2000f538 	.word	0x2000f538

0801ccb8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801ccb8:	b580      	push	{r7, lr}
 801ccba:	b082      	sub	sp, #8
 801ccbc:	af00      	add	r7, sp, #0
 801ccbe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801ccc0:	4b04      	ldr	r3, [pc, #16]	@ (801ccd4 <sys_arch_unprotect+0x1c>)
 801ccc2:	681b      	ldr	r3, [r3, #0]
 801ccc4:	4618      	mov	r0, r3
 801ccc6:	f7ee fbf5 	bl	800b4b4 <osMutexRelease>
}
 801ccca:	bf00      	nop
 801cccc:	3708      	adds	r7, #8
 801ccce:	46bd      	mov	sp, r7
 801ccd0:	bd80      	pop	{r7, pc}
 801ccd2:	bf00      	nop
 801ccd4:	2000f538 	.word	0x2000f538

0801ccd8 <rand>:
 801ccd8:	4b16      	ldr	r3, [pc, #88]	@ (801cd34 <rand+0x5c>)
 801ccda:	b510      	push	{r4, lr}
 801ccdc:	681c      	ldr	r4, [r3, #0]
 801ccde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cce0:	b9b3      	cbnz	r3, 801cd10 <rand+0x38>
 801cce2:	2018      	movs	r0, #24
 801cce4:	f001 fe96 	bl	801ea14 <malloc>
 801cce8:	4602      	mov	r2, r0
 801ccea:	6320      	str	r0, [r4, #48]	@ 0x30
 801ccec:	b920      	cbnz	r0, 801ccf8 <rand+0x20>
 801ccee:	4b12      	ldr	r3, [pc, #72]	@ (801cd38 <rand+0x60>)
 801ccf0:	4812      	ldr	r0, [pc, #72]	@ (801cd3c <rand+0x64>)
 801ccf2:	2152      	movs	r1, #82	@ 0x52
 801ccf4:	f000 ffd8 	bl	801dca8 <__assert_func>
 801ccf8:	4911      	ldr	r1, [pc, #68]	@ (801cd40 <rand+0x68>)
 801ccfa:	4b12      	ldr	r3, [pc, #72]	@ (801cd44 <rand+0x6c>)
 801ccfc:	e9c0 1300 	strd	r1, r3, [r0]
 801cd00:	4b11      	ldr	r3, [pc, #68]	@ (801cd48 <rand+0x70>)
 801cd02:	6083      	str	r3, [r0, #8]
 801cd04:	230b      	movs	r3, #11
 801cd06:	8183      	strh	r3, [r0, #12]
 801cd08:	2100      	movs	r1, #0
 801cd0a:	2001      	movs	r0, #1
 801cd0c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cd10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cd12:	480e      	ldr	r0, [pc, #56]	@ (801cd4c <rand+0x74>)
 801cd14:	690b      	ldr	r3, [r1, #16]
 801cd16:	694c      	ldr	r4, [r1, #20]
 801cd18:	4a0d      	ldr	r2, [pc, #52]	@ (801cd50 <rand+0x78>)
 801cd1a:	4358      	muls	r0, r3
 801cd1c:	fb02 0004 	mla	r0, r2, r4, r0
 801cd20:	fba3 3202 	umull	r3, r2, r3, r2
 801cd24:	3301      	adds	r3, #1
 801cd26:	eb40 0002 	adc.w	r0, r0, r2
 801cd2a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801cd2e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cd32:	bd10      	pop	{r4, pc}
 801cd34:	20000094 	.word	0x20000094
 801cd38:	080243dc 	.word	0x080243dc
 801cd3c:	080243f3 	.word	0x080243f3
 801cd40:	abcd330e 	.word	0xabcd330e
 801cd44:	e66d1234 	.word	0xe66d1234
 801cd48:	0005deec 	.word	0x0005deec
 801cd4c:	5851f42d 	.word	0x5851f42d
 801cd50:	4c957f2d 	.word	0x4c957f2d

0801cd54 <__cvt>:
 801cd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cd58:	ec57 6b10 	vmov	r6, r7, d0
 801cd5c:	2f00      	cmp	r7, #0
 801cd5e:	460c      	mov	r4, r1
 801cd60:	4619      	mov	r1, r3
 801cd62:	463b      	mov	r3, r7
 801cd64:	bfbb      	ittet	lt
 801cd66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801cd6a:	461f      	movlt	r7, r3
 801cd6c:	2300      	movge	r3, #0
 801cd6e:	232d      	movlt	r3, #45	@ 0x2d
 801cd70:	700b      	strb	r3, [r1, #0]
 801cd72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cd74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cd78:	4691      	mov	r9, r2
 801cd7a:	f023 0820 	bic.w	r8, r3, #32
 801cd7e:	bfbc      	itt	lt
 801cd80:	4632      	movlt	r2, r6
 801cd82:	4616      	movlt	r6, r2
 801cd84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cd88:	d005      	beq.n	801cd96 <__cvt+0x42>
 801cd8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cd8e:	d100      	bne.n	801cd92 <__cvt+0x3e>
 801cd90:	3401      	adds	r4, #1
 801cd92:	2102      	movs	r1, #2
 801cd94:	e000      	b.n	801cd98 <__cvt+0x44>
 801cd96:	2103      	movs	r1, #3
 801cd98:	ab03      	add	r3, sp, #12
 801cd9a:	9301      	str	r3, [sp, #4]
 801cd9c:	ab02      	add	r3, sp, #8
 801cd9e:	9300      	str	r3, [sp, #0]
 801cda0:	ec47 6b10 	vmov	d0, r6, r7
 801cda4:	4653      	mov	r3, sl
 801cda6:	4622      	mov	r2, r4
 801cda8:	f001 f826 	bl	801ddf8 <_dtoa_r>
 801cdac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cdb0:	4605      	mov	r5, r0
 801cdb2:	d119      	bne.n	801cde8 <__cvt+0x94>
 801cdb4:	f019 0f01 	tst.w	r9, #1
 801cdb8:	d00e      	beq.n	801cdd8 <__cvt+0x84>
 801cdba:	eb00 0904 	add.w	r9, r0, r4
 801cdbe:	2200      	movs	r2, #0
 801cdc0:	2300      	movs	r3, #0
 801cdc2:	4630      	mov	r0, r6
 801cdc4:	4639      	mov	r1, r7
 801cdc6:	f7e3 feaf 	bl	8000b28 <__aeabi_dcmpeq>
 801cdca:	b108      	cbz	r0, 801cdd0 <__cvt+0x7c>
 801cdcc:	f8cd 900c 	str.w	r9, [sp, #12]
 801cdd0:	2230      	movs	r2, #48	@ 0x30
 801cdd2:	9b03      	ldr	r3, [sp, #12]
 801cdd4:	454b      	cmp	r3, r9
 801cdd6:	d31e      	bcc.n	801ce16 <__cvt+0xc2>
 801cdd8:	9b03      	ldr	r3, [sp, #12]
 801cdda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cddc:	1b5b      	subs	r3, r3, r5
 801cdde:	4628      	mov	r0, r5
 801cde0:	6013      	str	r3, [r2, #0]
 801cde2:	b004      	add	sp, #16
 801cde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cde8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cdec:	eb00 0904 	add.w	r9, r0, r4
 801cdf0:	d1e5      	bne.n	801cdbe <__cvt+0x6a>
 801cdf2:	7803      	ldrb	r3, [r0, #0]
 801cdf4:	2b30      	cmp	r3, #48	@ 0x30
 801cdf6:	d10a      	bne.n	801ce0e <__cvt+0xba>
 801cdf8:	2200      	movs	r2, #0
 801cdfa:	2300      	movs	r3, #0
 801cdfc:	4630      	mov	r0, r6
 801cdfe:	4639      	mov	r1, r7
 801ce00:	f7e3 fe92 	bl	8000b28 <__aeabi_dcmpeq>
 801ce04:	b918      	cbnz	r0, 801ce0e <__cvt+0xba>
 801ce06:	f1c4 0401 	rsb	r4, r4, #1
 801ce0a:	f8ca 4000 	str.w	r4, [sl]
 801ce0e:	f8da 3000 	ldr.w	r3, [sl]
 801ce12:	4499      	add	r9, r3
 801ce14:	e7d3      	b.n	801cdbe <__cvt+0x6a>
 801ce16:	1c59      	adds	r1, r3, #1
 801ce18:	9103      	str	r1, [sp, #12]
 801ce1a:	701a      	strb	r2, [r3, #0]
 801ce1c:	e7d9      	b.n	801cdd2 <__cvt+0x7e>

0801ce1e <__exponent>:
 801ce1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ce20:	2900      	cmp	r1, #0
 801ce22:	bfba      	itte	lt
 801ce24:	4249      	neglt	r1, r1
 801ce26:	232d      	movlt	r3, #45	@ 0x2d
 801ce28:	232b      	movge	r3, #43	@ 0x2b
 801ce2a:	2909      	cmp	r1, #9
 801ce2c:	7002      	strb	r2, [r0, #0]
 801ce2e:	7043      	strb	r3, [r0, #1]
 801ce30:	dd29      	ble.n	801ce86 <__exponent+0x68>
 801ce32:	f10d 0307 	add.w	r3, sp, #7
 801ce36:	461d      	mov	r5, r3
 801ce38:	270a      	movs	r7, #10
 801ce3a:	461a      	mov	r2, r3
 801ce3c:	fbb1 f6f7 	udiv	r6, r1, r7
 801ce40:	fb07 1416 	mls	r4, r7, r6, r1
 801ce44:	3430      	adds	r4, #48	@ 0x30
 801ce46:	f802 4c01 	strb.w	r4, [r2, #-1]
 801ce4a:	460c      	mov	r4, r1
 801ce4c:	2c63      	cmp	r4, #99	@ 0x63
 801ce4e:	f103 33ff 	add.w	r3, r3, #4294967295
 801ce52:	4631      	mov	r1, r6
 801ce54:	dcf1      	bgt.n	801ce3a <__exponent+0x1c>
 801ce56:	3130      	adds	r1, #48	@ 0x30
 801ce58:	1e94      	subs	r4, r2, #2
 801ce5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801ce5e:	1c41      	adds	r1, r0, #1
 801ce60:	4623      	mov	r3, r4
 801ce62:	42ab      	cmp	r3, r5
 801ce64:	d30a      	bcc.n	801ce7c <__exponent+0x5e>
 801ce66:	f10d 0309 	add.w	r3, sp, #9
 801ce6a:	1a9b      	subs	r3, r3, r2
 801ce6c:	42ac      	cmp	r4, r5
 801ce6e:	bf88      	it	hi
 801ce70:	2300      	movhi	r3, #0
 801ce72:	3302      	adds	r3, #2
 801ce74:	4403      	add	r3, r0
 801ce76:	1a18      	subs	r0, r3, r0
 801ce78:	b003      	add	sp, #12
 801ce7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801ce80:	f801 6f01 	strb.w	r6, [r1, #1]!
 801ce84:	e7ed      	b.n	801ce62 <__exponent+0x44>
 801ce86:	2330      	movs	r3, #48	@ 0x30
 801ce88:	3130      	adds	r1, #48	@ 0x30
 801ce8a:	7083      	strb	r3, [r0, #2]
 801ce8c:	70c1      	strb	r1, [r0, #3]
 801ce8e:	1d03      	adds	r3, r0, #4
 801ce90:	e7f1      	b.n	801ce76 <__exponent+0x58>
	...

0801ce94 <_printf_float>:
 801ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce98:	b08d      	sub	sp, #52	@ 0x34
 801ce9a:	460c      	mov	r4, r1
 801ce9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801cea0:	4616      	mov	r6, r2
 801cea2:	461f      	mov	r7, r3
 801cea4:	4605      	mov	r5, r0
 801cea6:	f000 fe29 	bl	801dafc <_localeconv_r>
 801ceaa:	6803      	ldr	r3, [r0, #0]
 801ceac:	9304      	str	r3, [sp, #16]
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f7e3 fa0e 	bl	80002d0 <strlen>
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	930a      	str	r3, [sp, #40]	@ 0x28
 801ceb8:	f8d8 3000 	ldr.w	r3, [r8]
 801cebc:	9005      	str	r0, [sp, #20]
 801cebe:	3307      	adds	r3, #7
 801cec0:	f023 0307 	bic.w	r3, r3, #7
 801cec4:	f103 0208 	add.w	r2, r3, #8
 801cec8:	f894 a018 	ldrb.w	sl, [r4, #24]
 801cecc:	f8d4 b000 	ldr.w	fp, [r4]
 801ced0:	f8c8 2000 	str.w	r2, [r8]
 801ced4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ced8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801cedc:	9307      	str	r3, [sp, #28]
 801cede:	f8cd 8018 	str.w	r8, [sp, #24]
 801cee2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801cee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ceea:	4b9c      	ldr	r3, [pc, #624]	@ (801d15c <_printf_float+0x2c8>)
 801ceec:	f04f 32ff 	mov.w	r2, #4294967295
 801cef0:	f7e3 fe4c 	bl	8000b8c <__aeabi_dcmpun>
 801cef4:	bb70      	cbnz	r0, 801cf54 <_printf_float+0xc0>
 801cef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cefa:	4b98      	ldr	r3, [pc, #608]	@ (801d15c <_printf_float+0x2c8>)
 801cefc:	f04f 32ff 	mov.w	r2, #4294967295
 801cf00:	f7e3 fe26 	bl	8000b50 <__aeabi_dcmple>
 801cf04:	bb30      	cbnz	r0, 801cf54 <_printf_float+0xc0>
 801cf06:	2200      	movs	r2, #0
 801cf08:	2300      	movs	r3, #0
 801cf0a:	4640      	mov	r0, r8
 801cf0c:	4649      	mov	r1, r9
 801cf0e:	f7e3 fe15 	bl	8000b3c <__aeabi_dcmplt>
 801cf12:	b110      	cbz	r0, 801cf1a <_printf_float+0x86>
 801cf14:	232d      	movs	r3, #45	@ 0x2d
 801cf16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cf1a:	4a91      	ldr	r2, [pc, #580]	@ (801d160 <_printf_float+0x2cc>)
 801cf1c:	4b91      	ldr	r3, [pc, #580]	@ (801d164 <_printf_float+0x2d0>)
 801cf1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801cf22:	bf94      	ite	ls
 801cf24:	4690      	movls	r8, r2
 801cf26:	4698      	movhi	r8, r3
 801cf28:	2303      	movs	r3, #3
 801cf2a:	6123      	str	r3, [r4, #16]
 801cf2c:	f02b 0304 	bic.w	r3, fp, #4
 801cf30:	6023      	str	r3, [r4, #0]
 801cf32:	f04f 0900 	mov.w	r9, #0
 801cf36:	9700      	str	r7, [sp, #0]
 801cf38:	4633      	mov	r3, r6
 801cf3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801cf3c:	4621      	mov	r1, r4
 801cf3e:	4628      	mov	r0, r5
 801cf40:	f000 f9d2 	bl	801d2e8 <_printf_common>
 801cf44:	3001      	adds	r0, #1
 801cf46:	f040 808d 	bne.w	801d064 <_printf_float+0x1d0>
 801cf4a:	f04f 30ff 	mov.w	r0, #4294967295
 801cf4e:	b00d      	add	sp, #52	@ 0x34
 801cf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf54:	4642      	mov	r2, r8
 801cf56:	464b      	mov	r3, r9
 801cf58:	4640      	mov	r0, r8
 801cf5a:	4649      	mov	r1, r9
 801cf5c:	f7e3 fe16 	bl	8000b8c <__aeabi_dcmpun>
 801cf60:	b140      	cbz	r0, 801cf74 <_printf_float+0xe0>
 801cf62:	464b      	mov	r3, r9
 801cf64:	2b00      	cmp	r3, #0
 801cf66:	bfbc      	itt	lt
 801cf68:	232d      	movlt	r3, #45	@ 0x2d
 801cf6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801cf6e:	4a7e      	ldr	r2, [pc, #504]	@ (801d168 <_printf_float+0x2d4>)
 801cf70:	4b7e      	ldr	r3, [pc, #504]	@ (801d16c <_printf_float+0x2d8>)
 801cf72:	e7d4      	b.n	801cf1e <_printf_float+0x8a>
 801cf74:	6863      	ldr	r3, [r4, #4]
 801cf76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801cf7a:	9206      	str	r2, [sp, #24]
 801cf7c:	1c5a      	adds	r2, r3, #1
 801cf7e:	d13b      	bne.n	801cff8 <_printf_float+0x164>
 801cf80:	2306      	movs	r3, #6
 801cf82:	6063      	str	r3, [r4, #4]
 801cf84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801cf88:	2300      	movs	r3, #0
 801cf8a:	6022      	str	r2, [r4, #0]
 801cf8c:	9303      	str	r3, [sp, #12]
 801cf8e:	ab0a      	add	r3, sp, #40	@ 0x28
 801cf90:	e9cd a301 	strd	sl, r3, [sp, #4]
 801cf94:	ab09      	add	r3, sp, #36	@ 0x24
 801cf96:	9300      	str	r3, [sp, #0]
 801cf98:	6861      	ldr	r1, [r4, #4]
 801cf9a:	ec49 8b10 	vmov	d0, r8, r9
 801cf9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	f7ff fed6 	bl	801cd54 <__cvt>
 801cfa8:	9b06      	ldr	r3, [sp, #24]
 801cfaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cfac:	2b47      	cmp	r3, #71	@ 0x47
 801cfae:	4680      	mov	r8, r0
 801cfb0:	d129      	bne.n	801d006 <_printf_float+0x172>
 801cfb2:	1cc8      	adds	r0, r1, #3
 801cfb4:	db02      	blt.n	801cfbc <_printf_float+0x128>
 801cfb6:	6863      	ldr	r3, [r4, #4]
 801cfb8:	4299      	cmp	r1, r3
 801cfba:	dd41      	ble.n	801d040 <_printf_float+0x1ac>
 801cfbc:	f1aa 0a02 	sub.w	sl, sl, #2
 801cfc0:	fa5f fa8a 	uxtb.w	sl, sl
 801cfc4:	3901      	subs	r1, #1
 801cfc6:	4652      	mov	r2, sl
 801cfc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801cfcc:	9109      	str	r1, [sp, #36]	@ 0x24
 801cfce:	f7ff ff26 	bl	801ce1e <__exponent>
 801cfd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cfd4:	1813      	adds	r3, r2, r0
 801cfd6:	2a01      	cmp	r2, #1
 801cfd8:	4681      	mov	r9, r0
 801cfda:	6123      	str	r3, [r4, #16]
 801cfdc:	dc02      	bgt.n	801cfe4 <_printf_float+0x150>
 801cfde:	6822      	ldr	r2, [r4, #0]
 801cfe0:	07d2      	lsls	r2, r2, #31
 801cfe2:	d501      	bpl.n	801cfe8 <_printf_float+0x154>
 801cfe4:	3301      	adds	r3, #1
 801cfe6:	6123      	str	r3, [r4, #16]
 801cfe8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d0a2      	beq.n	801cf36 <_printf_float+0xa2>
 801cff0:	232d      	movs	r3, #45	@ 0x2d
 801cff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cff6:	e79e      	b.n	801cf36 <_printf_float+0xa2>
 801cff8:	9a06      	ldr	r2, [sp, #24]
 801cffa:	2a47      	cmp	r2, #71	@ 0x47
 801cffc:	d1c2      	bne.n	801cf84 <_printf_float+0xf0>
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d1c0      	bne.n	801cf84 <_printf_float+0xf0>
 801d002:	2301      	movs	r3, #1
 801d004:	e7bd      	b.n	801cf82 <_printf_float+0xee>
 801d006:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d00a:	d9db      	bls.n	801cfc4 <_printf_float+0x130>
 801d00c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d010:	d118      	bne.n	801d044 <_printf_float+0x1b0>
 801d012:	2900      	cmp	r1, #0
 801d014:	6863      	ldr	r3, [r4, #4]
 801d016:	dd0b      	ble.n	801d030 <_printf_float+0x19c>
 801d018:	6121      	str	r1, [r4, #16]
 801d01a:	b913      	cbnz	r3, 801d022 <_printf_float+0x18e>
 801d01c:	6822      	ldr	r2, [r4, #0]
 801d01e:	07d0      	lsls	r0, r2, #31
 801d020:	d502      	bpl.n	801d028 <_printf_float+0x194>
 801d022:	3301      	adds	r3, #1
 801d024:	440b      	add	r3, r1
 801d026:	6123      	str	r3, [r4, #16]
 801d028:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d02a:	f04f 0900 	mov.w	r9, #0
 801d02e:	e7db      	b.n	801cfe8 <_printf_float+0x154>
 801d030:	b913      	cbnz	r3, 801d038 <_printf_float+0x1a4>
 801d032:	6822      	ldr	r2, [r4, #0]
 801d034:	07d2      	lsls	r2, r2, #31
 801d036:	d501      	bpl.n	801d03c <_printf_float+0x1a8>
 801d038:	3302      	adds	r3, #2
 801d03a:	e7f4      	b.n	801d026 <_printf_float+0x192>
 801d03c:	2301      	movs	r3, #1
 801d03e:	e7f2      	b.n	801d026 <_printf_float+0x192>
 801d040:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d044:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d046:	4299      	cmp	r1, r3
 801d048:	db05      	blt.n	801d056 <_printf_float+0x1c2>
 801d04a:	6823      	ldr	r3, [r4, #0]
 801d04c:	6121      	str	r1, [r4, #16]
 801d04e:	07d8      	lsls	r0, r3, #31
 801d050:	d5ea      	bpl.n	801d028 <_printf_float+0x194>
 801d052:	1c4b      	adds	r3, r1, #1
 801d054:	e7e7      	b.n	801d026 <_printf_float+0x192>
 801d056:	2900      	cmp	r1, #0
 801d058:	bfd4      	ite	le
 801d05a:	f1c1 0202 	rsble	r2, r1, #2
 801d05e:	2201      	movgt	r2, #1
 801d060:	4413      	add	r3, r2
 801d062:	e7e0      	b.n	801d026 <_printf_float+0x192>
 801d064:	6823      	ldr	r3, [r4, #0]
 801d066:	055a      	lsls	r2, r3, #21
 801d068:	d407      	bmi.n	801d07a <_printf_float+0x1e6>
 801d06a:	6923      	ldr	r3, [r4, #16]
 801d06c:	4642      	mov	r2, r8
 801d06e:	4631      	mov	r1, r6
 801d070:	4628      	mov	r0, r5
 801d072:	47b8      	blx	r7
 801d074:	3001      	adds	r0, #1
 801d076:	d12b      	bne.n	801d0d0 <_printf_float+0x23c>
 801d078:	e767      	b.n	801cf4a <_printf_float+0xb6>
 801d07a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d07e:	f240 80dd 	bls.w	801d23c <_printf_float+0x3a8>
 801d082:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d086:	2200      	movs	r2, #0
 801d088:	2300      	movs	r3, #0
 801d08a:	f7e3 fd4d 	bl	8000b28 <__aeabi_dcmpeq>
 801d08e:	2800      	cmp	r0, #0
 801d090:	d033      	beq.n	801d0fa <_printf_float+0x266>
 801d092:	4a37      	ldr	r2, [pc, #220]	@ (801d170 <_printf_float+0x2dc>)
 801d094:	2301      	movs	r3, #1
 801d096:	4631      	mov	r1, r6
 801d098:	4628      	mov	r0, r5
 801d09a:	47b8      	blx	r7
 801d09c:	3001      	adds	r0, #1
 801d09e:	f43f af54 	beq.w	801cf4a <_printf_float+0xb6>
 801d0a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d0a6:	4543      	cmp	r3, r8
 801d0a8:	db02      	blt.n	801d0b0 <_printf_float+0x21c>
 801d0aa:	6823      	ldr	r3, [r4, #0]
 801d0ac:	07d8      	lsls	r0, r3, #31
 801d0ae:	d50f      	bpl.n	801d0d0 <_printf_float+0x23c>
 801d0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d0b4:	4631      	mov	r1, r6
 801d0b6:	4628      	mov	r0, r5
 801d0b8:	47b8      	blx	r7
 801d0ba:	3001      	adds	r0, #1
 801d0bc:	f43f af45 	beq.w	801cf4a <_printf_float+0xb6>
 801d0c0:	f04f 0900 	mov.w	r9, #0
 801d0c4:	f108 38ff 	add.w	r8, r8, #4294967295
 801d0c8:	f104 0a1a 	add.w	sl, r4, #26
 801d0cc:	45c8      	cmp	r8, r9
 801d0ce:	dc09      	bgt.n	801d0e4 <_printf_float+0x250>
 801d0d0:	6823      	ldr	r3, [r4, #0]
 801d0d2:	079b      	lsls	r3, r3, #30
 801d0d4:	f100 8103 	bmi.w	801d2de <_printf_float+0x44a>
 801d0d8:	68e0      	ldr	r0, [r4, #12]
 801d0da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d0dc:	4298      	cmp	r0, r3
 801d0de:	bfb8      	it	lt
 801d0e0:	4618      	movlt	r0, r3
 801d0e2:	e734      	b.n	801cf4e <_printf_float+0xba>
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	4652      	mov	r2, sl
 801d0e8:	4631      	mov	r1, r6
 801d0ea:	4628      	mov	r0, r5
 801d0ec:	47b8      	blx	r7
 801d0ee:	3001      	adds	r0, #1
 801d0f0:	f43f af2b 	beq.w	801cf4a <_printf_float+0xb6>
 801d0f4:	f109 0901 	add.w	r9, r9, #1
 801d0f8:	e7e8      	b.n	801d0cc <_printf_float+0x238>
 801d0fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0fc:	2b00      	cmp	r3, #0
 801d0fe:	dc39      	bgt.n	801d174 <_printf_float+0x2e0>
 801d100:	4a1b      	ldr	r2, [pc, #108]	@ (801d170 <_printf_float+0x2dc>)
 801d102:	2301      	movs	r3, #1
 801d104:	4631      	mov	r1, r6
 801d106:	4628      	mov	r0, r5
 801d108:	47b8      	blx	r7
 801d10a:	3001      	adds	r0, #1
 801d10c:	f43f af1d 	beq.w	801cf4a <_printf_float+0xb6>
 801d110:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d114:	ea59 0303 	orrs.w	r3, r9, r3
 801d118:	d102      	bne.n	801d120 <_printf_float+0x28c>
 801d11a:	6823      	ldr	r3, [r4, #0]
 801d11c:	07d9      	lsls	r1, r3, #31
 801d11e:	d5d7      	bpl.n	801d0d0 <_printf_float+0x23c>
 801d120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d124:	4631      	mov	r1, r6
 801d126:	4628      	mov	r0, r5
 801d128:	47b8      	blx	r7
 801d12a:	3001      	adds	r0, #1
 801d12c:	f43f af0d 	beq.w	801cf4a <_printf_float+0xb6>
 801d130:	f04f 0a00 	mov.w	sl, #0
 801d134:	f104 0b1a 	add.w	fp, r4, #26
 801d138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d13a:	425b      	negs	r3, r3
 801d13c:	4553      	cmp	r3, sl
 801d13e:	dc01      	bgt.n	801d144 <_printf_float+0x2b0>
 801d140:	464b      	mov	r3, r9
 801d142:	e793      	b.n	801d06c <_printf_float+0x1d8>
 801d144:	2301      	movs	r3, #1
 801d146:	465a      	mov	r2, fp
 801d148:	4631      	mov	r1, r6
 801d14a:	4628      	mov	r0, r5
 801d14c:	47b8      	blx	r7
 801d14e:	3001      	adds	r0, #1
 801d150:	f43f aefb 	beq.w	801cf4a <_printf_float+0xb6>
 801d154:	f10a 0a01 	add.w	sl, sl, #1
 801d158:	e7ee      	b.n	801d138 <_printf_float+0x2a4>
 801d15a:	bf00      	nop
 801d15c:	7fefffff 	.word	0x7fefffff
 801d160:	0802454c 	.word	0x0802454c
 801d164:	08024550 	.word	0x08024550
 801d168:	08024554 	.word	0x08024554
 801d16c:	08024558 	.word	0x08024558
 801d170:	0802455c 	.word	0x0802455c
 801d174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d176:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d17a:	4553      	cmp	r3, sl
 801d17c:	bfa8      	it	ge
 801d17e:	4653      	movge	r3, sl
 801d180:	2b00      	cmp	r3, #0
 801d182:	4699      	mov	r9, r3
 801d184:	dc36      	bgt.n	801d1f4 <_printf_float+0x360>
 801d186:	f04f 0b00 	mov.w	fp, #0
 801d18a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d18e:	f104 021a 	add.w	r2, r4, #26
 801d192:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d194:	9306      	str	r3, [sp, #24]
 801d196:	eba3 0309 	sub.w	r3, r3, r9
 801d19a:	455b      	cmp	r3, fp
 801d19c:	dc31      	bgt.n	801d202 <_printf_float+0x36e>
 801d19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1a0:	459a      	cmp	sl, r3
 801d1a2:	dc3a      	bgt.n	801d21a <_printf_float+0x386>
 801d1a4:	6823      	ldr	r3, [r4, #0]
 801d1a6:	07da      	lsls	r2, r3, #31
 801d1a8:	d437      	bmi.n	801d21a <_printf_float+0x386>
 801d1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1ac:	ebaa 0903 	sub.w	r9, sl, r3
 801d1b0:	9b06      	ldr	r3, [sp, #24]
 801d1b2:	ebaa 0303 	sub.w	r3, sl, r3
 801d1b6:	4599      	cmp	r9, r3
 801d1b8:	bfa8      	it	ge
 801d1ba:	4699      	movge	r9, r3
 801d1bc:	f1b9 0f00 	cmp.w	r9, #0
 801d1c0:	dc33      	bgt.n	801d22a <_printf_float+0x396>
 801d1c2:	f04f 0800 	mov.w	r8, #0
 801d1c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d1ca:	f104 0b1a 	add.w	fp, r4, #26
 801d1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1d0:	ebaa 0303 	sub.w	r3, sl, r3
 801d1d4:	eba3 0309 	sub.w	r3, r3, r9
 801d1d8:	4543      	cmp	r3, r8
 801d1da:	f77f af79 	ble.w	801d0d0 <_printf_float+0x23c>
 801d1de:	2301      	movs	r3, #1
 801d1e0:	465a      	mov	r2, fp
 801d1e2:	4631      	mov	r1, r6
 801d1e4:	4628      	mov	r0, r5
 801d1e6:	47b8      	blx	r7
 801d1e8:	3001      	adds	r0, #1
 801d1ea:	f43f aeae 	beq.w	801cf4a <_printf_float+0xb6>
 801d1ee:	f108 0801 	add.w	r8, r8, #1
 801d1f2:	e7ec      	b.n	801d1ce <_printf_float+0x33a>
 801d1f4:	4642      	mov	r2, r8
 801d1f6:	4631      	mov	r1, r6
 801d1f8:	4628      	mov	r0, r5
 801d1fa:	47b8      	blx	r7
 801d1fc:	3001      	adds	r0, #1
 801d1fe:	d1c2      	bne.n	801d186 <_printf_float+0x2f2>
 801d200:	e6a3      	b.n	801cf4a <_printf_float+0xb6>
 801d202:	2301      	movs	r3, #1
 801d204:	4631      	mov	r1, r6
 801d206:	4628      	mov	r0, r5
 801d208:	9206      	str	r2, [sp, #24]
 801d20a:	47b8      	blx	r7
 801d20c:	3001      	adds	r0, #1
 801d20e:	f43f ae9c 	beq.w	801cf4a <_printf_float+0xb6>
 801d212:	9a06      	ldr	r2, [sp, #24]
 801d214:	f10b 0b01 	add.w	fp, fp, #1
 801d218:	e7bb      	b.n	801d192 <_printf_float+0x2fe>
 801d21a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d21e:	4631      	mov	r1, r6
 801d220:	4628      	mov	r0, r5
 801d222:	47b8      	blx	r7
 801d224:	3001      	adds	r0, #1
 801d226:	d1c0      	bne.n	801d1aa <_printf_float+0x316>
 801d228:	e68f      	b.n	801cf4a <_printf_float+0xb6>
 801d22a:	9a06      	ldr	r2, [sp, #24]
 801d22c:	464b      	mov	r3, r9
 801d22e:	4442      	add	r2, r8
 801d230:	4631      	mov	r1, r6
 801d232:	4628      	mov	r0, r5
 801d234:	47b8      	blx	r7
 801d236:	3001      	adds	r0, #1
 801d238:	d1c3      	bne.n	801d1c2 <_printf_float+0x32e>
 801d23a:	e686      	b.n	801cf4a <_printf_float+0xb6>
 801d23c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d240:	f1ba 0f01 	cmp.w	sl, #1
 801d244:	dc01      	bgt.n	801d24a <_printf_float+0x3b6>
 801d246:	07db      	lsls	r3, r3, #31
 801d248:	d536      	bpl.n	801d2b8 <_printf_float+0x424>
 801d24a:	2301      	movs	r3, #1
 801d24c:	4642      	mov	r2, r8
 801d24e:	4631      	mov	r1, r6
 801d250:	4628      	mov	r0, r5
 801d252:	47b8      	blx	r7
 801d254:	3001      	adds	r0, #1
 801d256:	f43f ae78 	beq.w	801cf4a <_printf_float+0xb6>
 801d25a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d25e:	4631      	mov	r1, r6
 801d260:	4628      	mov	r0, r5
 801d262:	47b8      	blx	r7
 801d264:	3001      	adds	r0, #1
 801d266:	f43f ae70 	beq.w	801cf4a <_printf_float+0xb6>
 801d26a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d26e:	2200      	movs	r2, #0
 801d270:	2300      	movs	r3, #0
 801d272:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d276:	f7e3 fc57 	bl	8000b28 <__aeabi_dcmpeq>
 801d27a:	b9c0      	cbnz	r0, 801d2ae <_printf_float+0x41a>
 801d27c:	4653      	mov	r3, sl
 801d27e:	f108 0201 	add.w	r2, r8, #1
 801d282:	4631      	mov	r1, r6
 801d284:	4628      	mov	r0, r5
 801d286:	47b8      	blx	r7
 801d288:	3001      	adds	r0, #1
 801d28a:	d10c      	bne.n	801d2a6 <_printf_float+0x412>
 801d28c:	e65d      	b.n	801cf4a <_printf_float+0xb6>
 801d28e:	2301      	movs	r3, #1
 801d290:	465a      	mov	r2, fp
 801d292:	4631      	mov	r1, r6
 801d294:	4628      	mov	r0, r5
 801d296:	47b8      	blx	r7
 801d298:	3001      	adds	r0, #1
 801d29a:	f43f ae56 	beq.w	801cf4a <_printf_float+0xb6>
 801d29e:	f108 0801 	add.w	r8, r8, #1
 801d2a2:	45d0      	cmp	r8, sl
 801d2a4:	dbf3      	blt.n	801d28e <_printf_float+0x3fa>
 801d2a6:	464b      	mov	r3, r9
 801d2a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d2ac:	e6df      	b.n	801d06e <_printf_float+0x1da>
 801d2ae:	f04f 0800 	mov.w	r8, #0
 801d2b2:	f104 0b1a 	add.w	fp, r4, #26
 801d2b6:	e7f4      	b.n	801d2a2 <_printf_float+0x40e>
 801d2b8:	2301      	movs	r3, #1
 801d2ba:	4642      	mov	r2, r8
 801d2bc:	e7e1      	b.n	801d282 <_printf_float+0x3ee>
 801d2be:	2301      	movs	r3, #1
 801d2c0:	464a      	mov	r2, r9
 801d2c2:	4631      	mov	r1, r6
 801d2c4:	4628      	mov	r0, r5
 801d2c6:	47b8      	blx	r7
 801d2c8:	3001      	adds	r0, #1
 801d2ca:	f43f ae3e 	beq.w	801cf4a <_printf_float+0xb6>
 801d2ce:	f108 0801 	add.w	r8, r8, #1
 801d2d2:	68e3      	ldr	r3, [r4, #12]
 801d2d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d2d6:	1a5b      	subs	r3, r3, r1
 801d2d8:	4543      	cmp	r3, r8
 801d2da:	dcf0      	bgt.n	801d2be <_printf_float+0x42a>
 801d2dc:	e6fc      	b.n	801d0d8 <_printf_float+0x244>
 801d2de:	f04f 0800 	mov.w	r8, #0
 801d2e2:	f104 0919 	add.w	r9, r4, #25
 801d2e6:	e7f4      	b.n	801d2d2 <_printf_float+0x43e>

0801d2e8 <_printf_common>:
 801d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2ec:	4616      	mov	r6, r2
 801d2ee:	4698      	mov	r8, r3
 801d2f0:	688a      	ldr	r2, [r1, #8]
 801d2f2:	690b      	ldr	r3, [r1, #16]
 801d2f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d2f8:	4293      	cmp	r3, r2
 801d2fa:	bfb8      	it	lt
 801d2fc:	4613      	movlt	r3, r2
 801d2fe:	6033      	str	r3, [r6, #0]
 801d300:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d304:	4607      	mov	r7, r0
 801d306:	460c      	mov	r4, r1
 801d308:	b10a      	cbz	r2, 801d30e <_printf_common+0x26>
 801d30a:	3301      	adds	r3, #1
 801d30c:	6033      	str	r3, [r6, #0]
 801d30e:	6823      	ldr	r3, [r4, #0]
 801d310:	0699      	lsls	r1, r3, #26
 801d312:	bf42      	ittt	mi
 801d314:	6833      	ldrmi	r3, [r6, #0]
 801d316:	3302      	addmi	r3, #2
 801d318:	6033      	strmi	r3, [r6, #0]
 801d31a:	6825      	ldr	r5, [r4, #0]
 801d31c:	f015 0506 	ands.w	r5, r5, #6
 801d320:	d106      	bne.n	801d330 <_printf_common+0x48>
 801d322:	f104 0a19 	add.w	sl, r4, #25
 801d326:	68e3      	ldr	r3, [r4, #12]
 801d328:	6832      	ldr	r2, [r6, #0]
 801d32a:	1a9b      	subs	r3, r3, r2
 801d32c:	42ab      	cmp	r3, r5
 801d32e:	dc26      	bgt.n	801d37e <_printf_common+0x96>
 801d330:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d334:	6822      	ldr	r2, [r4, #0]
 801d336:	3b00      	subs	r3, #0
 801d338:	bf18      	it	ne
 801d33a:	2301      	movne	r3, #1
 801d33c:	0692      	lsls	r2, r2, #26
 801d33e:	d42b      	bmi.n	801d398 <_printf_common+0xb0>
 801d340:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d344:	4641      	mov	r1, r8
 801d346:	4638      	mov	r0, r7
 801d348:	47c8      	blx	r9
 801d34a:	3001      	adds	r0, #1
 801d34c:	d01e      	beq.n	801d38c <_printf_common+0xa4>
 801d34e:	6823      	ldr	r3, [r4, #0]
 801d350:	6922      	ldr	r2, [r4, #16]
 801d352:	f003 0306 	and.w	r3, r3, #6
 801d356:	2b04      	cmp	r3, #4
 801d358:	bf02      	ittt	eq
 801d35a:	68e5      	ldreq	r5, [r4, #12]
 801d35c:	6833      	ldreq	r3, [r6, #0]
 801d35e:	1aed      	subeq	r5, r5, r3
 801d360:	68a3      	ldr	r3, [r4, #8]
 801d362:	bf0c      	ite	eq
 801d364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d368:	2500      	movne	r5, #0
 801d36a:	4293      	cmp	r3, r2
 801d36c:	bfc4      	itt	gt
 801d36e:	1a9b      	subgt	r3, r3, r2
 801d370:	18ed      	addgt	r5, r5, r3
 801d372:	2600      	movs	r6, #0
 801d374:	341a      	adds	r4, #26
 801d376:	42b5      	cmp	r5, r6
 801d378:	d11a      	bne.n	801d3b0 <_printf_common+0xc8>
 801d37a:	2000      	movs	r0, #0
 801d37c:	e008      	b.n	801d390 <_printf_common+0xa8>
 801d37e:	2301      	movs	r3, #1
 801d380:	4652      	mov	r2, sl
 801d382:	4641      	mov	r1, r8
 801d384:	4638      	mov	r0, r7
 801d386:	47c8      	blx	r9
 801d388:	3001      	adds	r0, #1
 801d38a:	d103      	bne.n	801d394 <_printf_common+0xac>
 801d38c:	f04f 30ff 	mov.w	r0, #4294967295
 801d390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d394:	3501      	adds	r5, #1
 801d396:	e7c6      	b.n	801d326 <_printf_common+0x3e>
 801d398:	18e1      	adds	r1, r4, r3
 801d39a:	1c5a      	adds	r2, r3, #1
 801d39c:	2030      	movs	r0, #48	@ 0x30
 801d39e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d3a2:	4422      	add	r2, r4
 801d3a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d3a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d3ac:	3302      	adds	r3, #2
 801d3ae:	e7c7      	b.n	801d340 <_printf_common+0x58>
 801d3b0:	2301      	movs	r3, #1
 801d3b2:	4622      	mov	r2, r4
 801d3b4:	4641      	mov	r1, r8
 801d3b6:	4638      	mov	r0, r7
 801d3b8:	47c8      	blx	r9
 801d3ba:	3001      	adds	r0, #1
 801d3bc:	d0e6      	beq.n	801d38c <_printf_common+0xa4>
 801d3be:	3601      	adds	r6, #1
 801d3c0:	e7d9      	b.n	801d376 <_printf_common+0x8e>
	...

0801d3c4 <_printf_i>:
 801d3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d3c8:	7e0f      	ldrb	r7, [r1, #24]
 801d3ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d3cc:	2f78      	cmp	r7, #120	@ 0x78
 801d3ce:	4691      	mov	r9, r2
 801d3d0:	4680      	mov	r8, r0
 801d3d2:	460c      	mov	r4, r1
 801d3d4:	469a      	mov	sl, r3
 801d3d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d3da:	d807      	bhi.n	801d3ec <_printf_i+0x28>
 801d3dc:	2f62      	cmp	r7, #98	@ 0x62
 801d3de:	d80a      	bhi.n	801d3f6 <_printf_i+0x32>
 801d3e0:	2f00      	cmp	r7, #0
 801d3e2:	f000 80d2 	beq.w	801d58a <_printf_i+0x1c6>
 801d3e6:	2f58      	cmp	r7, #88	@ 0x58
 801d3e8:	f000 80b9 	beq.w	801d55e <_printf_i+0x19a>
 801d3ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d3f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d3f4:	e03a      	b.n	801d46c <_printf_i+0xa8>
 801d3f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d3fa:	2b15      	cmp	r3, #21
 801d3fc:	d8f6      	bhi.n	801d3ec <_printf_i+0x28>
 801d3fe:	a101      	add	r1, pc, #4	@ (adr r1, 801d404 <_printf_i+0x40>)
 801d400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d404:	0801d45d 	.word	0x0801d45d
 801d408:	0801d471 	.word	0x0801d471
 801d40c:	0801d3ed 	.word	0x0801d3ed
 801d410:	0801d3ed 	.word	0x0801d3ed
 801d414:	0801d3ed 	.word	0x0801d3ed
 801d418:	0801d3ed 	.word	0x0801d3ed
 801d41c:	0801d471 	.word	0x0801d471
 801d420:	0801d3ed 	.word	0x0801d3ed
 801d424:	0801d3ed 	.word	0x0801d3ed
 801d428:	0801d3ed 	.word	0x0801d3ed
 801d42c:	0801d3ed 	.word	0x0801d3ed
 801d430:	0801d571 	.word	0x0801d571
 801d434:	0801d49b 	.word	0x0801d49b
 801d438:	0801d52b 	.word	0x0801d52b
 801d43c:	0801d3ed 	.word	0x0801d3ed
 801d440:	0801d3ed 	.word	0x0801d3ed
 801d444:	0801d593 	.word	0x0801d593
 801d448:	0801d3ed 	.word	0x0801d3ed
 801d44c:	0801d49b 	.word	0x0801d49b
 801d450:	0801d3ed 	.word	0x0801d3ed
 801d454:	0801d3ed 	.word	0x0801d3ed
 801d458:	0801d533 	.word	0x0801d533
 801d45c:	6833      	ldr	r3, [r6, #0]
 801d45e:	1d1a      	adds	r2, r3, #4
 801d460:	681b      	ldr	r3, [r3, #0]
 801d462:	6032      	str	r2, [r6, #0]
 801d464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d468:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d46c:	2301      	movs	r3, #1
 801d46e:	e09d      	b.n	801d5ac <_printf_i+0x1e8>
 801d470:	6833      	ldr	r3, [r6, #0]
 801d472:	6820      	ldr	r0, [r4, #0]
 801d474:	1d19      	adds	r1, r3, #4
 801d476:	6031      	str	r1, [r6, #0]
 801d478:	0606      	lsls	r6, r0, #24
 801d47a:	d501      	bpl.n	801d480 <_printf_i+0xbc>
 801d47c:	681d      	ldr	r5, [r3, #0]
 801d47e:	e003      	b.n	801d488 <_printf_i+0xc4>
 801d480:	0645      	lsls	r5, r0, #25
 801d482:	d5fb      	bpl.n	801d47c <_printf_i+0xb8>
 801d484:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d488:	2d00      	cmp	r5, #0
 801d48a:	da03      	bge.n	801d494 <_printf_i+0xd0>
 801d48c:	232d      	movs	r3, #45	@ 0x2d
 801d48e:	426d      	negs	r5, r5
 801d490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d494:	4859      	ldr	r0, [pc, #356]	@ (801d5fc <_printf_i+0x238>)
 801d496:	230a      	movs	r3, #10
 801d498:	e011      	b.n	801d4be <_printf_i+0xfa>
 801d49a:	6821      	ldr	r1, [r4, #0]
 801d49c:	6833      	ldr	r3, [r6, #0]
 801d49e:	0608      	lsls	r0, r1, #24
 801d4a0:	f853 5b04 	ldr.w	r5, [r3], #4
 801d4a4:	d402      	bmi.n	801d4ac <_printf_i+0xe8>
 801d4a6:	0649      	lsls	r1, r1, #25
 801d4a8:	bf48      	it	mi
 801d4aa:	b2ad      	uxthmi	r5, r5
 801d4ac:	2f6f      	cmp	r7, #111	@ 0x6f
 801d4ae:	4853      	ldr	r0, [pc, #332]	@ (801d5fc <_printf_i+0x238>)
 801d4b0:	6033      	str	r3, [r6, #0]
 801d4b2:	bf14      	ite	ne
 801d4b4:	230a      	movne	r3, #10
 801d4b6:	2308      	moveq	r3, #8
 801d4b8:	2100      	movs	r1, #0
 801d4ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d4be:	6866      	ldr	r6, [r4, #4]
 801d4c0:	60a6      	str	r6, [r4, #8]
 801d4c2:	2e00      	cmp	r6, #0
 801d4c4:	bfa2      	ittt	ge
 801d4c6:	6821      	ldrge	r1, [r4, #0]
 801d4c8:	f021 0104 	bicge.w	r1, r1, #4
 801d4cc:	6021      	strge	r1, [r4, #0]
 801d4ce:	b90d      	cbnz	r5, 801d4d4 <_printf_i+0x110>
 801d4d0:	2e00      	cmp	r6, #0
 801d4d2:	d04b      	beq.n	801d56c <_printf_i+0x1a8>
 801d4d4:	4616      	mov	r6, r2
 801d4d6:	fbb5 f1f3 	udiv	r1, r5, r3
 801d4da:	fb03 5711 	mls	r7, r3, r1, r5
 801d4de:	5dc7      	ldrb	r7, [r0, r7]
 801d4e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d4e4:	462f      	mov	r7, r5
 801d4e6:	42bb      	cmp	r3, r7
 801d4e8:	460d      	mov	r5, r1
 801d4ea:	d9f4      	bls.n	801d4d6 <_printf_i+0x112>
 801d4ec:	2b08      	cmp	r3, #8
 801d4ee:	d10b      	bne.n	801d508 <_printf_i+0x144>
 801d4f0:	6823      	ldr	r3, [r4, #0]
 801d4f2:	07df      	lsls	r7, r3, #31
 801d4f4:	d508      	bpl.n	801d508 <_printf_i+0x144>
 801d4f6:	6923      	ldr	r3, [r4, #16]
 801d4f8:	6861      	ldr	r1, [r4, #4]
 801d4fa:	4299      	cmp	r1, r3
 801d4fc:	bfde      	ittt	le
 801d4fe:	2330      	movle	r3, #48	@ 0x30
 801d500:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d504:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d508:	1b92      	subs	r2, r2, r6
 801d50a:	6122      	str	r2, [r4, #16]
 801d50c:	f8cd a000 	str.w	sl, [sp]
 801d510:	464b      	mov	r3, r9
 801d512:	aa03      	add	r2, sp, #12
 801d514:	4621      	mov	r1, r4
 801d516:	4640      	mov	r0, r8
 801d518:	f7ff fee6 	bl	801d2e8 <_printf_common>
 801d51c:	3001      	adds	r0, #1
 801d51e:	d14a      	bne.n	801d5b6 <_printf_i+0x1f2>
 801d520:	f04f 30ff 	mov.w	r0, #4294967295
 801d524:	b004      	add	sp, #16
 801d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d52a:	6823      	ldr	r3, [r4, #0]
 801d52c:	f043 0320 	orr.w	r3, r3, #32
 801d530:	6023      	str	r3, [r4, #0]
 801d532:	4833      	ldr	r0, [pc, #204]	@ (801d600 <_printf_i+0x23c>)
 801d534:	2778      	movs	r7, #120	@ 0x78
 801d536:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d53a:	6823      	ldr	r3, [r4, #0]
 801d53c:	6831      	ldr	r1, [r6, #0]
 801d53e:	061f      	lsls	r7, r3, #24
 801d540:	f851 5b04 	ldr.w	r5, [r1], #4
 801d544:	d402      	bmi.n	801d54c <_printf_i+0x188>
 801d546:	065f      	lsls	r7, r3, #25
 801d548:	bf48      	it	mi
 801d54a:	b2ad      	uxthmi	r5, r5
 801d54c:	6031      	str	r1, [r6, #0]
 801d54e:	07d9      	lsls	r1, r3, #31
 801d550:	bf44      	itt	mi
 801d552:	f043 0320 	orrmi.w	r3, r3, #32
 801d556:	6023      	strmi	r3, [r4, #0]
 801d558:	b11d      	cbz	r5, 801d562 <_printf_i+0x19e>
 801d55a:	2310      	movs	r3, #16
 801d55c:	e7ac      	b.n	801d4b8 <_printf_i+0xf4>
 801d55e:	4827      	ldr	r0, [pc, #156]	@ (801d5fc <_printf_i+0x238>)
 801d560:	e7e9      	b.n	801d536 <_printf_i+0x172>
 801d562:	6823      	ldr	r3, [r4, #0]
 801d564:	f023 0320 	bic.w	r3, r3, #32
 801d568:	6023      	str	r3, [r4, #0]
 801d56a:	e7f6      	b.n	801d55a <_printf_i+0x196>
 801d56c:	4616      	mov	r6, r2
 801d56e:	e7bd      	b.n	801d4ec <_printf_i+0x128>
 801d570:	6833      	ldr	r3, [r6, #0]
 801d572:	6825      	ldr	r5, [r4, #0]
 801d574:	6961      	ldr	r1, [r4, #20]
 801d576:	1d18      	adds	r0, r3, #4
 801d578:	6030      	str	r0, [r6, #0]
 801d57a:	062e      	lsls	r6, r5, #24
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	d501      	bpl.n	801d584 <_printf_i+0x1c0>
 801d580:	6019      	str	r1, [r3, #0]
 801d582:	e002      	b.n	801d58a <_printf_i+0x1c6>
 801d584:	0668      	lsls	r0, r5, #25
 801d586:	d5fb      	bpl.n	801d580 <_printf_i+0x1bc>
 801d588:	8019      	strh	r1, [r3, #0]
 801d58a:	2300      	movs	r3, #0
 801d58c:	6123      	str	r3, [r4, #16]
 801d58e:	4616      	mov	r6, r2
 801d590:	e7bc      	b.n	801d50c <_printf_i+0x148>
 801d592:	6833      	ldr	r3, [r6, #0]
 801d594:	1d1a      	adds	r2, r3, #4
 801d596:	6032      	str	r2, [r6, #0]
 801d598:	681e      	ldr	r6, [r3, #0]
 801d59a:	6862      	ldr	r2, [r4, #4]
 801d59c:	2100      	movs	r1, #0
 801d59e:	4630      	mov	r0, r6
 801d5a0:	f7e2 fe46 	bl	8000230 <memchr>
 801d5a4:	b108      	cbz	r0, 801d5aa <_printf_i+0x1e6>
 801d5a6:	1b80      	subs	r0, r0, r6
 801d5a8:	6060      	str	r0, [r4, #4]
 801d5aa:	6863      	ldr	r3, [r4, #4]
 801d5ac:	6123      	str	r3, [r4, #16]
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d5b4:	e7aa      	b.n	801d50c <_printf_i+0x148>
 801d5b6:	6923      	ldr	r3, [r4, #16]
 801d5b8:	4632      	mov	r2, r6
 801d5ba:	4649      	mov	r1, r9
 801d5bc:	4640      	mov	r0, r8
 801d5be:	47d0      	blx	sl
 801d5c0:	3001      	adds	r0, #1
 801d5c2:	d0ad      	beq.n	801d520 <_printf_i+0x15c>
 801d5c4:	6823      	ldr	r3, [r4, #0]
 801d5c6:	079b      	lsls	r3, r3, #30
 801d5c8:	d413      	bmi.n	801d5f2 <_printf_i+0x22e>
 801d5ca:	68e0      	ldr	r0, [r4, #12]
 801d5cc:	9b03      	ldr	r3, [sp, #12]
 801d5ce:	4298      	cmp	r0, r3
 801d5d0:	bfb8      	it	lt
 801d5d2:	4618      	movlt	r0, r3
 801d5d4:	e7a6      	b.n	801d524 <_printf_i+0x160>
 801d5d6:	2301      	movs	r3, #1
 801d5d8:	4632      	mov	r2, r6
 801d5da:	4649      	mov	r1, r9
 801d5dc:	4640      	mov	r0, r8
 801d5de:	47d0      	blx	sl
 801d5e0:	3001      	adds	r0, #1
 801d5e2:	d09d      	beq.n	801d520 <_printf_i+0x15c>
 801d5e4:	3501      	adds	r5, #1
 801d5e6:	68e3      	ldr	r3, [r4, #12]
 801d5e8:	9903      	ldr	r1, [sp, #12]
 801d5ea:	1a5b      	subs	r3, r3, r1
 801d5ec:	42ab      	cmp	r3, r5
 801d5ee:	dcf2      	bgt.n	801d5d6 <_printf_i+0x212>
 801d5f0:	e7eb      	b.n	801d5ca <_printf_i+0x206>
 801d5f2:	2500      	movs	r5, #0
 801d5f4:	f104 0619 	add.w	r6, r4, #25
 801d5f8:	e7f5      	b.n	801d5e6 <_printf_i+0x222>
 801d5fa:	bf00      	nop
 801d5fc:	0802455e 	.word	0x0802455e
 801d600:	0802456f 	.word	0x0802456f

0801d604 <std>:
 801d604:	2300      	movs	r3, #0
 801d606:	b510      	push	{r4, lr}
 801d608:	4604      	mov	r4, r0
 801d60a:	e9c0 3300 	strd	r3, r3, [r0]
 801d60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d612:	6083      	str	r3, [r0, #8]
 801d614:	8181      	strh	r1, [r0, #12]
 801d616:	6643      	str	r3, [r0, #100]	@ 0x64
 801d618:	81c2      	strh	r2, [r0, #14]
 801d61a:	6183      	str	r3, [r0, #24]
 801d61c:	4619      	mov	r1, r3
 801d61e:	2208      	movs	r2, #8
 801d620:	305c      	adds	r0, #92	@ 0x5c
 801d622:	f000 fa43 	bl	801daac <memset>
 801d626:	4b0d      	ldr	r3, [pc, #52]	@ (801d65c <std+0x58>)
 801d628:	6263      	str	r3, [r4, #36]	@ 0x24
 801d62a:	4b0d      	ldr	r3, [pc, #52]	@ (801d660 <std+0x5c>)
 801d62c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d62e:	4b0d      	ldr	r3, [pc, #52]	@ (801d664 <std+0x60>)
 801d630:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d632:	4b0d      	ldr	r3, [pc, #52]	@ (801d668 <std+0x64>)
 801d634:	6323      	str	r3, [r4, #48]	@ 0x30
 801d636:	4b0d      	ldr	r3, [pc, #52]	@ (801d66c <std+0x68>)
 801d638:	6224      	str	r4, [r4, #32]
 801d63a:	429c      	cmp	r4, r3
 801d63c:	d006      	beq.n	801d64c <std+0x48>
 801d63e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d642:	4294      	cmp	r4, r2
 801d644:	d002      	beq.n	801d64c <std+0x48>
 801d646:	33d0      	adds	r3, #208	@ 0xd0
 801d648:	429c      	cmp	r4, r3
 801d64a:	d105      	bne.n	801d658 <std+0x54>
 801d64c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d654:	f000 bb16 	b.w	801dc84 <__retarget_lock_init_recursive>
 801d658:	bd10      	pop	{r4, pc}
 801d65a:	bf00      	nop
 801d65c:	0801d8a9 	.word	0x0801d8a9
 801d660:	0801d8cb 	.word	0x0801d8cb
 801d664:	0801d903 	.word	0x0801d903
 801d668:	0801d927 	.word	0x0801d927
 801d66c:	2000f53c 	.word	0x2000f53c

0801d670 <stdio_exit_handler>:
 801d670:	4a02      	ldr	r2, [pc, #8]	@ (801d67c <stdio_exit_handler+0xc>)
 801d672:	4903      	ldr	r1, [pc, #12]	@ (801d680 <stdio_exit_handler+0x10>)
 801d674:	4803      	ldr	r0, [pc, #12]	@ (801d684 <stdio_exit_handler+0x14>)
 801d676:	f000 b869 	b.w	801d74c <_fwalk_sglue>
 801d67a:	bf00      	nop
 801d67c:	20000088 	.word	0x20000088
 801d680:	0801f8c1 	.word	0x0801f8c1
 801d684:	20000098 	.word	0x20000098

0801d688 <cleanup_stdio>:
 801d688:	6841      	ldr	r1, [r0, #4]
 801d68a:	4b0c      	ldr	r3, [pc, #48]	@ (801d6bc <cleanup_stdio+0x34>)
 801d68c:	4299      	cmp	r1, r3
 801d68e:	b510      	push	{r4, lr}
 801d690:	4604      	mov	r4, r0
 801d692:	d001      	beq.n	801d698 <cleanup_stdio+0x10>
 801d694:	f002 f914 	bl	801f8c0 <_fflush_r>
 801d698:	68a1      	ldr	r1, [r4, #8]
 801d69a:	4b09      	ldr	r3, [pc, #36]	@ (801d6c0 <cleanup_stdio+0x38>)
 801d69c:	4299      	cmp	r1, r3
 801d69e:	d002      	beq.n	801d6a6 <cleanup_stdio+0x1e>
 801d6a0:	4620      	mov	r0, r4
 801d6a2:	f002 f90d 	bl	801f8c0 <_fflush_r>
 801d6a6:	68e1      	ldr	r1, [r4, #12]
 801d6a8:	4b06      	ldr	r3, [pc, #24]	@ (801d6c4 <cleanup_stdio+0x3c>)
 801d6aa:	4299      	cmp	r1, r3
 801d6ac:	d004      	beq.n	801d6b8 <cleanup_stdio+0x30>
 801d6ae:	4620      	mov	r0, r4
 801d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6b4:	f002 b904 	b.w	801f8c0 <_fflush_r>
 801d6b8:	bd10      	pop	{r4, pc}
 801d6ba:	bf00      	nop
 801d6bc:	2000f53c 	.word	0x2000f53c
 801d6c0:	2000f5a4 	.word	0x2000f5a4
 801d6c4:	2000f60c 	.word	0x2000f60c

0801d6c8 <global_stdio_init.part.0>:
 801d6c8:	b510      	push	{r4, lr}
 801d6ca:	4b0b      	ldr	r3, [pc, #44]	@ (801d6f8 <global_stdio_init.part.0+0x30>)
 801d6cc:	4c0b      	ldr	r4, [pc, #44]	@ (801d6fc <global_stdio_init.part.0+0x34>)
 801d6ce:	4a0c      	ldr	r2, [pc, #48]	@ (801d700 <global_stdio_init.part.0+0x38>)
 801d6d0:	601a      	str	r2, [r3, #0]
 801d6d2:	4620      	mov	r0, r4
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	2104      	movs	r1, #4
 801d6d8:	f7ff ff94 	bl	801d604 <std>
 801d6dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d6e0:	2201      	movs	r2, #1
 801d6e2:	2109      	movs	r1, #9
 801d6e4:	f7ff ff8e 	bl	801d604 <std>
 801d6e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d6ec:	2202      	movs	r2, #2
 801d6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6f2:	2112      	movs	r1, #18
 801d6f4:	f7ff bf86 	b.w	801d604 <std>
 801d6f8:	2000f674 	.word	0x2000f674
 801d6fc:	2000f53c 	.word	0x2000f53c
 801d700:	0801d671 	.word	0x0801d671

0801d704 <__sfp_lock_acquire>:
 801d704:	4801      	ldr	r0, [pc, #4]	@ (801d70c <__sfp_lock_acquire+0x8>)
 801d706:	f000 babe 	b.w	801dc86 <__retarget_lock_acquire_recursive>
 801d70a:	bf00      	nop
 801d70c:	2000f67d 	.word	0x2000f67d

0801d710 <__sfp_lock_release>:
 801d710:	4801      	ldr	r0, [pc, #4]	@ (801d718 <__sfp_lock_release+0x8>)
 801d712:	f000 bab9 	b.w	801dc88 <__retarget_lock_release_recursive>
 801d716:	bf00      	nop
 801d718:	2000f67d 	.word	0x2000f67d

0801d71c <__sinit>:
 801d71c:	b510      	push	{r4, lr}
 801d71e:	4604      	mov	r4, r0
 801d720:	f7ff fff0 	bl	801d704 <__sfp_lock_acquire>
 801d724:	6a23      	ldr	r3, [r4, #32]
 801d726:	b11b      	cbz	r3, 801d730 <__sinit+0x14>
 801d728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d72c:	f7ff bff0 	b.w	801d710 <__sfp_lock_release>
 801d730:	4b04      	ldr	r3, [pc, #16]	@ (801d744 <__sinit+0x28>)
 801d732:	6223      	str	r3, [r4, #32]
 801d734:	4b04      	ldr	r3, [pc, #16]	@ (801d748 <__sinit+0x2c>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d1f5      	bne.n	801d728 <__sinit+0xc>
 801d73c:	f7ff ffc4 	bl	801d6c8 <global_stdio_init.part.0>
 801d740:	e7f2      	b.n	801d728 <__sinit+0xc>
 801d742:	bf00      	nop
 801d744:	0801d689 	.word	0x0801d689
 801d748:	2000f674 	.word	0x2000f674

0801d74c <_fwalk_sglue>:
 801d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d750:	4607      	mov	r7, r0
 801d752:	4688      	mov	r8, r1
 801d754:	4614      	mov	r4, r2
 801d756:	2600      	movs	r6, #0
 801d758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d75c:	f1b9 0901 	subs.w	r9, r9, #1
 801d760:	d505      	bpl.n	801d76e <_fwalk_sglue+0x22>
 801d762:	6824      	ldr	r4, [r4, #0]
 801d764:	2c00      	cmp	r4, #0
 801d766:	d1f7      	bne.n	801d758 <_fwalk_sglue+0xc>
 801d768:	4630      	mov	r0, r6
 801d76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d76e:	89ab      	ldrh	r3, [r5, #12]
 801d770:	2b01      	cmp	r3, #1
 801d772:	d907      	bls.n	801d784 <_fwalk_sglue+0x38>
 801d774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d778:	3301      	adds	r3, #1
 801d77a:	d003      	beq.n	801d784 <_fwalk_sglue+0x38>
 801d77c:	4629      	mov	r1, r5
 801d77e:	4638      	mov	r0, r7
 801d780:	47c0      	blx	r8
 801d782:	4306      	orrs	r6, r0
 801d784:	3568      	adds	r5, #104	@ 0x68
 801d786:	e7e9      	b.n	801d75c <_fwalk_sglue+0x10>

0801d788 <iprintf>:
 801d788:	b40f      	push	{r0, r1, r2, r3}
 801d78a:	b507      	push	{r0, r1, r2, lr}
 801d78c:	4906      	ldr	r1, [pc, #24]	@ (801d7a8 <iprintf+0x20>)
 801d78e:	ab04      	add	r3, sp, #16
 801d790:	6808      	ldr	r0, [r1, #0]
 801d792:	f853 2b04 	ldr.w	r2, [r3], #4
 801d796:	6881      	ldr	r1, [r0, #8]
 801d798:	9301      	str	r3, [sp, #4]
 801d79a:	f001 fef5 	bl	801f588 <_vfiprintf_r>
 801d79e:	b003      	add	sp, #12
 801d7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7a4:	b004      	add	sp, #16
 801d7a6:	4770      	bx	lr
 801d7a8:	20000094 	.word	0x20000094

0801d7ac <_puts_r>:
 801d7ac:	6a03      	ldr	r3, [r0, #32]
 801d7ae:	b570      	push	{r4, r5, r6, lr}
 801d7b0:	6884      	ldr	r4, [r0, #8]
 801d7b2:	4605      	mov	r5, r0
 801d7b4:	460e      	mov	r6, r1
 801d7b6:	b90b      	cbnz	r3, 801d7bc <_puts_r+0x10>
 801d7b8:	f7ff ffb0 	bl	801d71c <__sinit>
 801d7bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7be:	07db      	lsls	r3, r3, #31
 801d7c0:	d405      	bmi.n	801d7ce <_puts_r+0x22>
 801d7c2:	89a3      	ldrh	r3, [r4, #12]
 801d7c4:	0598      	lsls	r0, r3, #22
 801d7c6:	d402      	bmi.n	801d7ce <_puts_r+0x22>
 801d7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7ca:	f000 fa5c 	bl	801dc86 <__retarget_lock_acquire_recursive>
 801d7ce:	89a3      	ldrh	r3, [r4, #12]
 801d7d0:	0719      	lsls	r1, r3, #28
 801d7d2:	d502      	bpl.n	801d7da <_puts_r+0x2e>
 801d7d4:	6923      	ldr	r3, [r4, #16]
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d135      	bne.n	801d846 <_puts_r+0x9a>
 801d7da:	4621      	mov	r1, r4
 801d7dc:	4628      	mov	r0, r5
 801d7de:	f000 f8e5 	bl	801d9ac <__swsetup_r>
 801d7e2:	b380      	cbz	r0, 801d846 <_puts_r+0x9a>
 801d7e4:	f04f 35ff 	mov.w	r5, #4294967295
 801d7e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7ea:	07da      	lsls	r2, r3, #31
 801d7ec:	d405      	bmi.n	801d7fa <_puts_r+0x4e>
 801d7ee:	89a3      	ldrh	r3, [r4, #12]
 801d7f0:	059b      	lsls	r3, r3, #22
 801d7f2:	d402      	bmi.n	801d7fa <_puts_r+0x4e>
 801d7f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7f6:	f000 fa47 	bl	801dc88 <__retarget_lock_release_recursive>
 801d7fa:	4628      	mov	r0, r5
 801d7fc:	bd70      	pop	{r4, r5, r6, pc}
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	da04      	bge.n	801d80c <_puts_r+0x60>
 801d802:	69a2      	ldr	r2, [r4, #24]
 801d804:	429a      	cmp	r2, r3
 801d806:	dc17      	bgt.n	801d838 <_puts_r+0x8c>
 801d808:	290a      	cmp	r1, #10
 801d80a:	d015      	beq.n	801d838 <_puts_r+0x8c>
 801d80c:	6823      	ldr	r3, [r4, #0]
 801d80e:	1c5a      	adds	r2, r3, #1
 801d810:	6022      	str	r2, [r4, #0]
 801d812:	7019      	strb	r1, [r3, #0]
 801d814:	68a3      	ldr	r3, [r4, #8]
 801d816:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d81a:	3b01      	subs	r3, #1
 801d81c:	60a3      	str	r3, [r4, #8]
 801d81e:	2900      	cmp	r1, #0
 801d820:	d1ed      	bne.n	801d7fe <_puts_r+0x52>
 801d822:	2b00      	cmp	r3, #0
 801d824:	da11      	bge.n	801d84a <_puts_r+0x9e>
 801d826:	4622      	mov	r2, r4
 801d828:	210a      	movs	r1, #10
 801d82a:	4628      	mov	r0, r5
 801d82c:	f000 f87f 	bl	801d92e <__swbuf_r>
 801d830:	3001      	adds	r0, #1
 801d832:	d0d7      	beq.n	801d7e4 <_puts_r+0x38>
 801d834:	250a      	movs	r5, #10
 801d836:	e7d7      	b.n	801d7e8 <_puts_r+0x3c>
 801d838:	4622      	mov	r2, r4
 801d83a:	4628      	mov	r0, r5
 801d83c:	f000 f877 	bl	801d92e <__swbuf_r>
 801d840:	3001      	adds	r0, #1
 801d842:	d1e7      	bne.n	801d814 <_puts_r+0x68>
 801d844:	e7ce      	b.n	801d7e4 <_puts_r+0x38>
 801d846:	3e01      	subs	r6, #1
 801d848:	e7e4      	b.n	801d814 <_puts_r+0x68>
 801d84a:	6823      	ldr	r3, [r4, #0]
 801d84c:	1c5a      	adds	r2, r3, #1
 801d84e:	6022      	str	r2, [r4, #0]
 801d850:	220a      	movs	r2, #10
 801d852:	701a      	strb	r2, [r3, #0]
 801d854:	e7ee      	b.n	801d834 <_puts_r+0x88>
	...

0801d858 <puts>:
 801d858:	4b02      	ldr	r3, [pc, #8]	@ (801d864 <puts+0xc>)
 801d85a:	4601      	mov	r1, r0
 801d85c:	6818      	ldr	r0, [r3, #0]
 801d85e:	f7ff bfa5 	b.w	801d7ac <_puts_r>
 801d862:	bf00      	nop
 801d864:	20000094 	.word	0x20000094

0801d868 <siprintf>:
 801d868:	b40e      	push	{r1, r2, r3}
 801d86a:	b500      	push	{lr}
 801d86c:	b09c      	sub	sp, #112	@ 0x70
 801d86e:	ab1d      	add	r3, sp, #116	@ 0x74
 801d870:	9002      	str	r0, [sp, #8]
 801d872:	9006      	str	r0, [sp, #24]
 801d874:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801d878:	4809      	ldr	r0, [pc, #36]	@ (801d8a0 <siprintf+0x38>)
 801d87a:	9107      	str	r1, [sp, #28]
 801d87c:	9104      	str	r1, [sp, #16]
 801d87e:	4909      	ldr	r1, [pc, #36]	@ (801d8a4 <siprintf+0x3c>)
 801d880:	f853 2b04 	ldr.w	r2, [r3], #4
 801d884:	9105      	str	r1, [sp, #20]
 801d886:	6800      	ldr	r0, [r0, #0]
 801d888:	9301      	str	r3, [sp, #4]
 801d88a:	a902      	add	r1, sp, #8
 801d88c:	f001 fd56 	bl	801f33c <_svfiprintf_r>
 801d890:	9b02      	ldr	r3, [sp, #8]
 801d892:	2200      	movs	r2, #0
 801d894:	701a      	strb	r2, [r3, #0]
 801d896:	b01c      	add	sp, #112	@ 0x70
 801d898:	f85d eb04 	ldr.w	lr, [sp], #4
 801d89c:	b003      	add	sp, #12
 801d89e:	4770      	bx	lr
 801d8a0:	20000094 	.word	0x20000094
 801d8a4:	ffff0208 	.word	0xffff0208

0801d8a8 <__sread>:
 801d8a8:	b510      	push	{r4, lr}
 801d8aa:	460c      	mov	r4, r1
 801d8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8b0:	f000 f9a0 	bl	801dbf4 <_read_r>
 801d8b4:	2800      	cmp	r0, #0
 801d8b6:	bfab      	itete	ge
 801d8b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d8ba:	89a3      	ldrhlt	r3, [r4, #12]
 801d8bc:	181b      	addge	r3, r3, r0
 801d8be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d8c2:	bfac      	ite	ge
 801d8c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d8c6:	81a3      	strhlt	r3, [r4, #12]
 801d8c8:	bd10      	pop	{r4, pc}

0801d8ca <__swrite>:
 801d8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8ce:	461f      	mov	r7, r3
 801d8d0:	898b      	ldrh	r3, [r1, #12]
 801d8d2:	05db      	lsls	r3, r3, #23
 801d8d4:	4605      	mov	r5, r0
 801d8d6:	460c      	mov	r4, r1
 801d8d8:	4616      	mov	r6, r2
 801d8da:	d505      	bpl.n	801d8e8 <__swrite+0x1e>
 801d8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8e0:	2302      	movs	r3, #2
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	f000 f974 	bl	801dbd0 <_lseek_r>
 801d8e8:	89a3      	ldrh	r3, [r4, #12]
 801d8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d8ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d8f2:	81a3      	strh	r3, [r4, #12]
 801d8f4:	4632      	mov	r2, r6
 801d8f6:	463b      	mov	r3, r7
 801d8f8:	4628      	mov	r0, r5
 801d8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d8fe:	f000 b98b 	b.w	801dc18 <_write_r>

0801d902 <__sseek>:
 801d902:	b510      	push	{r4, lr}
 801d904:	460c      	mov	r4, r1
 801d906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d90a:	f000 f961 	bl	801dbd0 <_lseek_r>
 801d90e:	1c43      	adds	r3, r0, #1
 801d910:	89a3      	ldrh	r3, [r4, #12]
 801d912:	bf15      	itete	ne
 801d914:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d916:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d91a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d91e:	81a3      	strheq	r3, [r4, #12]
 801d920:	bf18      	it	ne
 801d922:	81a3      	strhne	r3, [r4, #12]
 801d924:	bd10      	pop	{r4, pc}

0801d926 <__sclose>:
 801d926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d92a:	f000 b8eb 	b.w	801db04 <_close_r>

0801d92e <__swbuf_r>:
 801d92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d930:	460e      	mov	r6, r1
 801d932:	4614      	mov	r4, r2
 801d934:	4605      	mov	r5, r0
 801d936:	b118      	cbz	r0, 801d940 <__swbuf_r+0x12>
 801d938:	6a03      	ldr	r3, [r0, #32]
 801d93a:	b90b      	cbnz	r3, 801d940 <__swbuf_r+0x12>
 801d93c:	f7ff feee 	bl	801d71c <__sinit>
 801d940:	69a3      	ldr	r3, [r4, #24]
 801d942:	60a3      	str	r3, [r4, #8]
 801d944:	89a3      	ldrh	r3, [r4, #12]
 801d946:	071a      	lsls	r2, r3, #28
 801d948:	d501      	bpl.n	801d94e <__swbuf_r+0x20>
 801d94a:	6923      	ldr	r3, [r4, #16]
 801d94c:	b943      	cbnz	r3, 801d960 <__swbuf_r+0x32>
 801d94e:	4621      	mov	r1, r4
 801d950:	4628      	mov	r0, r5
 801d952:	f000 f82b 	bl	801d9ac <__swsetup_r>
 801d956:	b118      	cbz	r0, 801d960 <__swbuf_r+0x32>
 801d958:	f04f 37ff 	mov.w	r7, #4294967295
 801d95c:	4638      	mov	r0, r7
 801d95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d960:	6823      	ldr	r3, [r4, #0]
 801d962:	6922      	ldr	r2, [r4, #16]
 801d964:	1a98      	subs	r0, r3, r2
 801d966:	6963      	ldr	r3, [r4, #20]
 801d968:	b2f6      	uxtb	r6, r6
 801d96a:	4283      	cmp	r3, r0
 801d96c:	4637      	mov	r7, r6
 801d96e:	dc05      	bgt.n	801d97c <__swbuf_r+0x4e>
 801d970:	4621      	mov	r1, r4
 801d972:	4628      	mov	r0, r5
 801d974:	f001 ffa4 	bl	801f8c0 <_fflush_r>
 801d978:	2800      	cmp	r0, #0
 801d97a:	d1ed      	bne.n	801d958 <__swbuf_r+0x2a>
 801d97c:	68a3      	ldr	r3, [r4, #8]
 801d97e:	3b01      	subs	r3, #1
 801d980:	60a3      	str	r3, [r4, #8]
 801d982:	6823      	ldr	r3, [r4, #0]
 801d984:	1c5a      	adds	r2, r3, #1
 801d986:	6022      	str	r2, [r4, #0]
 801d988:	701e      	strb	r6, [r3, #0]
 801d98a:	6962      	ldr	r2, [r4, #20]
 801d98c:	1c43      	adds	r3, r0, #1
 801d98e:	429a      	cmp	r2, r3
 801d990:	d004      	beq.n	801d99c <__swbuf_r+0x6e>
 801d992:	89a3      	ldrh	r3, [r4, #12]
 801d994:	07db      	lsls	r3, r3, #31
 801d996:	d5e1      	bpl.n	801d95c <__swbuf_r+0x2e>
 801d998:	2e0a      	cmp	r6, #10
 801d99a:	d1df      	bne.n	801d95c <__swbuf_r+0x2e>
 801d99c:	4621      	mov	r1, r4
 801d99e:	4628      	mov	r0, r5
 801d9a0:	f001 ff8e 	bl	801f8c0 <_fflush_r>
 801d9a4:	2800      	cmp	r0, #0
 801d9a6:	d0d9      	beq.n	801d95c <__swbuf_r+0x2e>
 801d9a8:	e7d6      	b.n	801d958 <__swbuf_r+0x2a>
	...

0801d9ac <__swsetup_r>:
 801d9ac:	b538      	push	{r3, r4, r5, lr}
 801d9ae:	4b29      	ldr	r3, [pc, #164]	@ (801da54 <__swsetup_r+0xa8>)
 801d9b0:	4605      	mov	r5, r0
 801d9b2:	6818      	ldr	r0, [r3, #0]
 801d9b4:	460c      	mov	r4, r1
 801d9b6:	b118      	cbz	r0, 801d9c0 <__swsetup_r+0x14>
 801d9b8:	6a03      	ldr	r3, [r0, #32]
 801d9ba:	b90b      	cbnz	r3, 801d9c0 <__swsetup_r+0x14>
 801d9bc:	f7ff feae 	bl	801d71c <__sinit>
 801d9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9c4:	0719      	lsls	r1, r3, #28
 801d9c6:	d422      	bmi.n	801da0e <__swsetup_r+0x62>
 801d9c8:	06da      	lsls	r2, r3, #27
 801d9ca:	d407      	bmi.n	801d9dc <__swsetup_r+0x30>
 801d9cc:	2209      	movs	r2, #9
 801d9ce:	602a      	str	r2, [r5, #0]
 801d9d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d9d4:	81a3      	strh	r3, [r4, #12]
 801d9d6:	f04f 30ff 	mov.w	r0, #4294967295
 801d9da:	e033      	b.n	801da44 <__swsetup_r+0x98>
 801d9dc:	0758      	lsls	r0, r3, #29
 801d9de:	d512      	bpl.n	801da06 <__swsetup_r+0x5a>
 801d9e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9e2:	b141      	cbz	r1, 801d9f6 <__swsetup_r+0x4a>
 801d9e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d9e8:	4299      	cmp	r1, r3
 801d9ea:	d002      	beq.n	801d9f2 <__swsetup_r+0x46>
 801d9ec:	4628      	mov	r0, r5
 801d9ee:	f000 ffc7 	bl	801e980 <_free_r>
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d9f6:	89a3      	ldrh	r3, [r4, #12]
 801d9f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d9fc:	81a3      	strh	r3, [r4, #12]
 801d9fe:	2300      	movs	r3, #0
 801da00:	6063      	str	r3, [r4, #4]
 801da02:	6923      	ldr	r3, [r4, #16]
 801da04:	6023      	str	r3, [r4, #0]
 801da06:	89a3      	ldrh	r3, [r4, #12]
 801da08:	f043 0308 	orr.w	r3, r3, #8
 801da0c:	81a3      	strh	r3, [r4, #12]
 801da0e:	6923      	ldr	r3, [r4, #16]
 801da10:	b94b      	cbnz	r3, 801da26 <__swsetup_r+0x7a>
 801da12:	89a3      	ldrh	r3, [r4, #12]
 801da14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801da18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801da1c:	d003      	beq.n	801da26 <__swsetup_r+0x7a>
 801da1e:	4621      	mov	r1, r4
 801da20:	4628      	mov	r0, r5
 801da22:	f001 ffad 	bl	801f980 <__smakebuf_r>
 801da26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da2a:	f013 0201 	ands.w	r2, r3, #1
 801da2e:	d00a      	beq.n	801da46 <__swsetup_r+0x9a>
 801da30:	2200      	movs	r2, #0
 801da32:	60a2      	str	r2, [r4, #8]
 801da34:	6962      	ldr	r2, [r4, #20]
 801da36:	4252      	negs	r2, r2
 801da38:	61a2      	str	r2, [r4, #24]
 801da3a:	6922      	ldr	r2, [r4, #16]
 801da3c:	b942      	cbnz	r2, 801da50 <__swsetup_r+0xa4>
 801da3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801da42:	d1c5      	bne.n	801d9d0 <__swsetup_r+0x24>
 801da44:	bd38      	pop	{r3, r4, r5, pc}
 801da46:	0799      	lsls	r1, r3, #30
 801da48:	bf58      	it	pl
 801da4a:	6962      	ldrpl	r2, [r4, #20]
 801da4c:	60a2      	str	r2, [r4, #8]
 801da4e:	e7f4      	b.n	801da3a <__swsetup_r+0x8e>
 801da50:	2000      	movs	r0, #0
 801da52:	e7f7      	b.n	801da44 <__swsetup_r+0x98>
 801da54:	20000094 	.word	0x20000094

0801da58 <memcmp>:
 801da58:	b510      	push	{r4, lr}
 801da5a:	3901      	subs	r1, #1
 801da5c:	4402      	add	r2, r0
 801da5e:	4290      	cmp	r0, r2
 801da60:	d101      	bne.n	801da66 <memcmp+0xe>
 801da62:	2000      	movs	r0, #0
 801da64:	e005      	b.n	801da72 <memcmp+0x1a>
 801da66:	7803      	ldrb	r3, [r0, #0]
 801da68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801da6c:	42a3      	cmp	r3, r4
 801da6e:	d001      	beq.n	801da74 <memcmp+0x1c>
 801da70:	1b18      	subs	r0, r3, r4
 801da72:	bd10      	pop	{r4, pc}
 801da74:	3001      	adds	r0, #1
 801da76:	e7f2      	b.n	801da5e <memcmp+0x6>

0801da78 <memmove>:
 801da78:	4288      	cmp	r0, r1
 801da7a:	b510      	push	{r4, lr}
 801da7c:	eb01 0402 	add.w	r4, r1, r2
 801da80:	d902      	bls.n	801da88 <memmove+0x10>
 801da82:	4284      	cmp	r4, r0
 801da84:	4623      	mov	r3, r4
 801da86:	d807      	bhi.n	801da98 <memmove+0x20>
 801da88:	1e43      	subs	r3, r0, #1
 801da8a:	42a1      	cmp	r1, r4
 801da8c:	d008      	beq.n	801daa0 <memmove+0x28>
 801da8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da92:	f803 2f01 	strb.w	r2, [r3, #1]!
 801da96:	e7f8      	b.n	801da8a <memmove+0x12>
 801da98:	4402      	add	r2, r0
 801da9a:	4601      	mov	r1, r0
 801da9c:	428a      	cmp	r2, r1
 801da9e:	d100      	bne.n	801daa2 <memmove+0x2a>
 801daa0:	bd10      	pop	{r4, pc}
 801daa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801daa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801daaa:	e7f7      	b.n	801da9c <memmove+0x24>

0801daac <memset>:
 801daac:	4402      	add	r2, r0
 801daae:	4603      	mov	r3, r0
 801dab0:	4293      	cmp	r3, r2
 801dab2:	d100      	bne.n	801dab6 <memset+0xa>
 801dab4:	4770      	bx	lr
 801dab6:	f803 1b01 	strb.w	r1, [r3], #1
 801daba:	e7f9      	b.n	801dab0 <memset+0x4>

0801dabc <strchr>:
 801dabc:	b2c9      	uxtb	r1, r1
 801dabe:	4603      	mov	r3, r0
 801dac0:	4618      	mov	r0, r3
 801dac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dac6:	b112      	cbz	r2, 801dace <strchr+0x12>
 801dac8:	428a      	cmp	r2, r1
 801daca:	d1f9      	bne.n	801dac0 <strchr+0x4>
 801dacc:	4770      	bx	lr
 801dace:	2900      	cmp	r1, #0
 801dad0:	bf18      	it	ne
 801dad2:	2000      	movne	r0, #0
 801dad4:	4770      	bx	lr

0801dad6 <strncmp>:
 801dad6:	b510      	push	{r4, lr}
 801dad8:	b16a      	cbz	r2, 801daf6 <strncmp+0x20>
 801dada:	3901      	subs	r1, #1
 801dadc:	1884      	adds	r4, r0, r2
 801dade:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dae2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801dae6:	429a      	cmp	r2, r3
 801dae8:	d103      	bne.n	801daf2 <strncmp+0x1c>
 801daea:	42a0      	cmp	r0, r4
 801daec:	d001      	beq.n	801daf2 <strncmp+0x1c>
 801daee:	2a00      	cmp	r2, #0
 801daf0:	d1f5      	bne.n	801dade <strncmp+0x8>
 801daf2:	1ad0      	subs	r0, r2, r3
 801daf4:	bd10      	pop	{r4, pc}
 801daf6:	4610      	mov	r0, r2
 801daf8:	e7fc      	b.n	801daf4 <strncmp+0x1e>
	...

0801dafc <_localeconv_r>:
 801dafc:	4800      	ldr	r0, [pc, #0]	@ (801db00 <_localeconv_r+0x4>)
 801dafe:	4770      	bx	lr
 801db00:	200001d4 	.word	0x200001d4

0801db04 <_close_r>:
 801db04:	b538      	push	{r3, r4, r5, lr}
 801db06:	4d06      	ldr	r5, [pc, #24]	@ (801db20 <_close_r+0x1c>)
 801db08:	2300      	movs	r3, #0
 801db0a:	4604      	mov	r4, r0
 801db0c:	4608      	mov	r0, r1
 801db0e:	602b      	str	r3, [r5, #0]
 801db10:	f7e5 fb5e 	bl	80031d0 <_close>
 801db14:	1c43      	adds	r3, r0, #1
 801db16:	d102      	bne.n	801db1e <_close_r+0x1a>
 801db18:	682b      	ldr	r3, [r5, #0]
 801db1a:	b103      	cbz	r3, 801db1e <_close_r+0x1a>
 801db1c:	6023      	str	r3, [r4, #0]
 801db1e:	bd38      	pop	{r3, r4, r5, pc}
 801db20:	2000f678 	.word	0x2000f678

0801db24 <_reclaim_reent>:
 801db24:	4b29      	ldr	r3, [pc, #164]	@ (801dbcc <_reclaim_reent+0xa8>)
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	4283      	cmp	r3, r0
 801db2a:	b570      	push	{r4, r5, r6, lr}
 801db2c:	4604      	mov	r4, r0
 801db2e:	d04b      	beq.n	801dbc8 <_reclaim_reent+0xa4>
 801db30:	69c3      	ldr	r3, [r0, #28]
 801db32:	b1ab      	cbz	r3, 801db60 <_reclaim_reent+0x3c>
 801db34:	68db      	ldr	r3, [r3, #12]
 801db36:	b16b      	cbz	r3, 801db54 <_reclaim_reent+0x30>
 801db38:	2500      	movs	r5, #0
 801db3a:	69e3      	ldr	r3, [r4, #28]
 801db3c:	68db      	ldr	r3, [r3, #12]
 801db3e:	5959      	ldr	r1, [r3, r5]
 801db40:	2900      	cmp	r1, #0
 801db42:	d13b      	bne.n	801dbbc <_reclaim_reent+0x98>
 801db44:	3504      	adds	r5, #4
 801db46:	2d80      	cmp	r5, #128	@ 0x80
 801db48:	d1f7      	bne.n	801db3a <_reclaim_reent+0x16>
 801db4a:	69e3      	ldr	r3, [r4, #28]
 801db4c:	4620      	mov	r0, r4
 801db4e:	68d9      	ldr	r1, [r3, #12]
 801db50:	f000 ff16 	bl	801e980 <_free_r>
 801db54:	69e3      	ldr	r3, [r4, #28]
 801db56:	6819      	ldr	r1, [r3, #0]
 801db58:	b111      	cbz	r1, 801db60 <_reclaim_reent+0x3c>
 801db5a:	4620      	mov	r0, r4
 801db5c:	f000 ff10 	bl	801e980 <_free_r>
 801db60:	6961      	ldr	r1, [r4, #20]
 801db62:	b111      	cbz	r1, 801db6a <_reclaim_reent+0x46>
 801db64:	4620      	mov	r0, r4
 801db66:	f000 ff0b 	bl	801e980 <_free_r>
 801db6a:	69e1      	ldr	r1, [r4, #28]
 801db6c:	b111      	cbz	r1, 801db74 <_reclaim_reent+0x50>
 801db6e:	4620      	mov	r0, r4
 801db70:	f000 ff06 	bl	801e980 <_free_r>
 801db74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801db76:	b111      	cbz	r1, 801db7e <_reclaim_reent+0x5a>
 801db78:	4620      	mov	r0, r4
 801db7a:	f000 ff01 	bl	801e980 <_free_r>
 801db7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801db80:	b111      	cbz	r1, 801db88 <_reclaim_reent+0x64>
 801db82:	4620      	mov	r0, r4
 801db84:	f000 fefc 	bl	801e980 <_free_r>
 801db88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801db8a:	b111      	cbz	r1, 801db92 <_reclaim_reent+0x6e>
 801db8c:	4620      	mov	r0, r4
 801db8e:	f000 fef7 	bl	801e980 <_free_r>
 801db92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801db94:	b111      	cbz	r1, 801db9c <_reclaim_reent+0x78>
 801db96:	4620      	mov	r0, r4
 801db98:	f000 fef2 	bl	801e980 <_free_r>
 801db9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801db9e:	b111      	cbz	r1, 801dba6 <_reclaim_reent+0x82>
 801dba0:	4620      	mov	r0, r4
 801dba2:	f000 feed 	bl	801e980 <_free_r>
 801dba6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801dba8:	b111      	cbz	r1, 801dbb0 <_reclaim_reent+0x8c>
 801dbaa:	4620      	mov	r0, r4
 801dbac:	f000 fee8 	bl	801e980 <_free_r>
 801dbb0:	6a23      	ldr	r3, [r4, #32]
 801dbb2:	b14b      	cbz	r3, 801dbc8 <_reclaim_reent+0xa4>
 801dbb4:	4620      	mov	r0, r4
 801dbb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dbba:	4718      	bx	r3
 801dbbc:	680e      	ldr	r6, [r1, #0]
 801dbbe:	4620      	mov	r0, r4
 801dbc0:	f000 fede 	bl	801e980 <_free_r>
 801dbc4:	4631      	mov	r1, r6
 801dbc6:	e7bb      	b.n	801db40 <_reclaim_reent+0x1c>
 801dbc8:	bd70      	pop	{r4, r5, r6, pc}
 801dbca:	bf00      	nop
 801dbcc:	20000094 	.word	0x20000094

0801dbd0 <_lseek_r>:
 801dbd0:	b538      	push	{r3, r4, r5, lr}
 801dbd2:	4d07      	ldr	r5, [pc, #28]	@ (801dbf0 <_lseek_r+0x20>)
 801dbd4:	4604      	mov	r4, r0
 801dbd6:	4608      	mov	r0, r1
 801dbd8:	4611      	mov	r1, r2
 801dbda:	2200      	movs	r2, #0
 801dbdc:	602a      	str	r2, [r5, #0]
 801dbde:	461a      	mov	r2, r3
 801dbe0:	f7e5 fb1d 	bl	800321e <_lseek>
 801dbe4:	1c43      	adds	r3, r0, #1
 801dbe6:	d102      	bne.n	801dbee <_lseek_r+0x1e>
 801dbe8:	682b      	ldr	r3, [r5, #0]
 801dbea:	b103      	cbz	r3, 801dbee <_lseek_r+0x1e>
 801dbec:	6023      	str	r3, [r4, #0]
 801dbee:	bd38      	pop	{r3, r4, r5, pc}
 801dbf0:	2000f678 	.word	0x2000f678

0801dbf4 <_read_r>:
 801dbf4:	b538      	push	{r3, r4, r5, lr}
 801dbf6:	4d07      	ldr	r5, [pc, #28]	@ (801dc14 <_read_r+0x20>)
 801dbf8:	4604      	mov	r4, r0
 801dbfa:	4608      	mov	r0, r1
 801dbfc:	4611      	mov	r1, r2
 801dbfe:	2200      	movs	r2, #0
 801dc00:	602a      	str	r2, [r5, #0]
 801dc02:	461a      	mov	r2, r3
 801dc04:	f7e5 fac7 	bl	8003196 <_read>
 801dc08:	1c43      	adds	r3, r0, #1
 801dc0a:	d102      	bne.n	801dc12 <_read_r+0x1e>
 801dc0c:	682b      	ldr	r3, [r5, #0]
 801dc0e:	b103      	cbz	r3, 801dc12 <_read_r+0x1e>
 801dc10:	6023      	str	r3, [r4, #0]
 801dc12:	bd38      	pop	{r3, r4, r5, pc}
 801dc14:	2000f678 	.word	0x2000f678

0801dc18 <_write_r>:
 801dc18:	b538      	push	{r3, r4, r5, lr}
 801dc1a:	4d07      	ldr	r5, [pc, #28]	@ (801dc38 <_write_r+0x20>)
 801dc1c:	4604      	mov	r4, r0
 801dc1e:	4608      	mov	r0, r1
 801dc20:	4611      	mov	r1, r2
 801dc22:	2200      	movs	r2, #0
 801dc24:	602a      	str	r2, [r5, #0]
 801dc26:	461a      	mov	r2, r3
 801dc28:	f7e4 ff58 	bl	8002adc <_write>
 801dc2c:	1c43      	adds	r3, r0, #1
 801dc2e:	d102      	bne.n	801dc36 <_write_r+0x1e>
 801dc30:	682b      	ldr	r3, [r5, #0]
 801dc32:	b103      	cbz	r3, 801dc36 <_write_r+0x1e>
 801dc34:	6023      	str	r3, [r4, #0]
 801dc36:	bd38      	pop	{r3, r4, r5, pc}
 801dc38:	2000f678 	.word	0x2000f678

0801dc3c <__libc_init_array>:
 801dc3c:	b570      	push	{r4, r5, r6, lr}
 801dc3e:	4d0d      	ldr	r5, [pc, #52]	@ (801dc74 <__libc_init_array+0x38>)
 801dc40:	4c0d      	ldr	r4, [pc, #52]	@ (801dc78 <__libc_init_array+0x3c>)
 801dc42:	1b64      	subs	r4, r4, r5
 801dc44:	10a4      	asrs	r4, r4, #2
 801dc46:	2600      	movs	r6, #0
 801dc48:	42a6      	cmp	r6, r4
 801dc4a:	d109      	bne.n	801dc60 <__libc_init_array+0x24>
 801dc4c:	4d0b      	ldr	r5, [pc, #44]	@ (801dc7c <__libc_init_array+0x40>)
 801dc4e:	4c0c      	ldr	r4, [pc, #48]	@ (801dc80 <__libc_init_array+0x44>)
 801dc50:	f001 ffb8 	bl	801fbc4 <_init>
 801dc54:	1b64      	subs	r4, r4, r5
 801dc56:	10a4      	asrs	r4, r4, #2
 801dc58:	2600      	movs	r6, #0
 801dc5a:	42a6      	cmp	r6, r4
 801dc5c:	d105      	bne.n	801dc6a <__libc_init_array+0x2e>
 801dc5e:	bd70      	pop	{r4, r5, r6, pc}
 801dc60:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc64:	4798      	blx	r3
 801dc66:	3601      	adds	r6, #1
 801dc68:	e7ee      	b.n	801dc48 <__libc_init_array+0xc>
 801dc6a:	f855 3b04 	ldr.w	r3, [r5], #4
 801dc6e:	4798      	blx	r3
 801dc70:	3601      	adds	r6, #1
 801dc72:	e7f2      	b.n	801dc5a <__libc_init_array+0x1e>
 801dc74:	080247ac 	.word	0x080247ac
 801dc78:	080247ac 	.word	0x080247ac
 801dc7c:	080247ac 	.word	0x080247ac
 801dc80:	080247b0 	.word	0x080247b0

0801dc84 <__retarget_lock_init_recursive>:
 801dc84:	4770      	bx	lr

0801dc86 <__retarget_lock_acquire_recursive>:
 801dc86:	4770      	bx	lr

0801dc88 <__retarget_lock_release_recursive>:
 801dc88:	4770      	bx	lr

0801dc8a <memcpy>:
 801dc8a:	440a      	add	r2, r1
 801dc8c:	4291      	cmp	r1, r2
 801dc8e:	f100 33ff 	add.w	r3, r0, #4294967295
 801dc92:	d100      	bne.n	801dc96 <memcpy+0xc>
 801dc94:	4770      	bx	lr
 801dc96:	b510      	push	{r4, lr}
 801dc98:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dc9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dca0:	4291      	cmp	r1, r2
 801dca2:	d1f9      	bne.n	801dc98 <memcpy+0xe>
 801dca4:	bd10      	pop	{r4, pc}
	...

0801dca8 <__assert_func>:
 801dca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dcaa:	4614      	mov	r4, r2
 801dcac:	461a      	mov	r2, r3
 801dcae:	4b09      	ldr	r3, [pc, #36]	@ (801dcd4 <__assert_func+0x2c>)
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	4605      	mov	r5, r0
 801dcb4:	68d8      	ldr	r0, [r3, #12]
 801dcb6:	b954      	cbnz	r4, 801dcce <__assert_func+0x26>
 801dcb8:	4b07      	ldr	r3, [pc, #28]	@ (801dcd8 <__assert_func+0x30>)
 801dcba:	461c      	mov	r4, r3
 801dcbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dcc0:	9100      	str	r1, [sp, #0]
 801dcc2:	462b      	mov	r3, r5
 801dcc4:	4905      	ldr	r1, [pc, #20]	@ (801dcdc <__assert_func+0x34>)
 801dcc6:	f001 fe23 	bl	801f910 <fiprintf>
 801dcca:	f001 fec7 	bl	801fa5c <abort>
 801dcce:	4b04      	ldr	r3, [pc, #16]	@ (801dce0 <__assert_func+0x38>)
 801dcd0:	e7f4      	b.n	801dcbc <__assert_func+0x14>
 801dcd2:	bf00      	nop
 801dcd4:	20000094 	.word	0x20000094
 801dcd8:	080245bb 	.word	0x080245bb
 801dcdc:	0802458d 	.word	0x0802458d
 801dce0:	08024580 	.word	0x08024580

0801dce4 <quorem>:
 801dce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dce8:	6903      	ldr	r3, [r0, #16]
 801dcea:	690c      	ldr	r4, [r1, #16]
 801dcec:	42a3      	cmp	r3, r4
 801dcee:	4607      	mov	r7, r0
 801dcf0:	db7e      	blt.n	801ddf0 <quorem+0x10c>
 801dcf2:	3c01      	subs	r4, #1
 801dcf4:	f101 0814 	add.w	r8, r1, #20
 801dcf8:	00a3      	lsls	r3, r4, #2
 801dcfa:	f100 0514 	add.w	r5, r0, #20
 801dcfe:	9300      	str	r3, [sp, #0]
 801dd00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801dd04:	9301      	str	r3, [sp, #4]
 801dd06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801dd0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801dd0e:	3301      	adds	r3, #1
 801dd10:	429a      	cmp	r2, r3
 801dd12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801dd16:	fbb2 f6f3 	udiv	r6, r2, r3
 801dd1a:	d32e      	bcc.n	801dd7a <quorem+0x96>
 801dd1c:	f04f 0a00 	mov.w	sl, #0
 801dd20:	46c4      	mov	ip, r8
 801dd22:	46ae      	mov	lr, r5
 801dd24:	46d3      	mov	fp, sl
 801dd26:	f85c 3b04 	ldr.w	r3, [ip], #4
 801dd2a:	b298      	uxth	r0, r3
 801dd2c:	fb06 a000 	mla	r0, r6, r0, sl
 801dd30:	0c02      	lsrs	r2, r0, #16
 801dd32:	0c1b      	lsrs	r3, r3, #16
 801dd34:	fb06 2303 	mla	r3, r6, r3, r2
 801dd38:	f8de 2000 	ldr.w	r2, [lr]
 801dd3c:	b280      	uxth	r0, r0
 801dd3e:	b292      	uxth	r2, r2
 801dd40:	1a12      	subs	r2, r2, r0
 801dd42:	445a      	add	r2, fp
 801dd44:	f8de 0000 	ldr.w	r0, [lr]
 801dd48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801dd4c:	b29b      	uxth	r3, r3
 801dd4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801dd52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801dd56:	b292      	uxth	r2, r2
 801dd58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801dd5c:	45e1      	cmp	r9, ip
 801dd5e:	f84e 2b04 	str.w	r2, [lr], #4
 801dd62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801dd66:	d2de      	bcs.n	801dd26 <quorem+0x42>
 801dd68:	9b00      	ldr	r3, [sp, #0]
 801dd6a:	58eb      	ldr	r3, [r5, r3]
 801dd6c:	b92b      	cbnz	r3, 801dd7a <quorem+0x96>
 801dd6e:	9b01      	ldr	r3, [sp, #4]
 801dd70:	3b04      	subs	r3, #4
 801dd72:	429d      	cmp	r5, r3
 801dd74:	461a      	mov	r2, r3
 801dd76:	d32f      	bcc.n	801ddd8 <quorem+0xf4>
 801dd78:	613c      	str	r4, [r7, #16]
 801dd7a:	4638      	mov	r0, r7
 801dd7c:	f001 f97a 	bl	801f074 <__mcmp>
 801dd80:	2800      	cmp	r0, #0
 801dd82:	db25      	blt.n	801ddd0 <quorem+0xec>
 801dd84:	4629      	mov	r1, r5
 801dd86:	2000      	movs	r0, #0
 801dd88:	f858 2b04 	ldr.w	r2, [r8], #4
 801dd8c:	f8d1 c000 	ldr.w	ip, [r1]
 801dd90:	fa1f fe82 	uxth.w	lr, r2
 801dd94:	fa1f f38c 	uxth.w	r3, ip
 801dd98:	eba3 030e 	sub.w	r3, r3, lr
 801dd9c:	4403      	add	r3, r0
 801dd9e:	0c12      	lsrs	r2, r2, #16
 801dda0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801dda4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801dda8:	b29b      	uxth	r3, r3
 801ddaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ddae:	45c1      	cmp	r9, r8
 801ddb0:	f841 3b04 	str.w	r3, [r1], #4
 801ddb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ddb8:	d2e6      	bcs.n	801dd88 <quorem+0xa4>
 801ddba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ddbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ddc2:	b922      	cbnz	r2, 801ddce <quorem+0xea>
 801ddc4:	3b04      	subs	r3, #4
 801ddc6:	429d      	cmp	r5, r3
 801ddc8:	461a      	mov	r2, r3
 801ddca:	d30b      	bcc.n	801dde4 <quorem+0x100>
 801ddcc:	613c      	str	r4, [r7, #16]
 801ddce:	3601      	adds	r6, #1
 801ddd0:	4630      	mov	r0, r6
 801ddd2:	b003      	add	sp, #12
 801ddd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddd8:	6812      	ldr	r2, [r2, #0]
 801ddda:	3b04      	subs	r3, #4
 801dddc:	2a00      	cmp	r2, #0
 801ddde:	d1cb      	bne.n	801dd78 <quorem+0x94>
 801dde0:	3c01      	subs	r4, #1
 801dde2:	e7c6      	b.n	801dd72 <quorem+0x8e>
 801dde4:	6812      	ldr	r2, [r2, #0]
 801dde6:	3b04      	subs	r3, #4
 801dde8:	2a00      	cmp	r2, #0
 801ddea:	d1ef      	bne.n	801ddcc <quorem+0xe8>
 801ddec:	3c01      	subs	r4, #1
 801ddee:	e7ea      	b.n	801ddc6 <quorem+0xe2>
 801ddf0:	2000      	movs	r0, #0
 801ddf2:	e7ee      	b.n	801ddd2 <quorem+0xee>
 801ddf4:	0000      	movs	r0, r0
	...

0801ddf8 <_dtoa_r>:
 801ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddfc:	69c7      	ldr	r7, [r0, #28]
 801ddfe:	b099      	sub	sp, #100	@ 0x64
 801de00:	ed8d 0b02 	vstr	d0, [sp, #8]
 801de04:	ec55 4b10 	vmov	r4, r5, d0
 801de08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801de0a:	9109      	str	r1, [sp, #36]	@ 0x24
 801de0c:	4683      	mov	fp, r0
 801de0e:	920e      	str	r2, [sp, #56]	@ 0x38
 801de10:	9313      	str	r3, [sp, #76]	@ 0x4c
 801de12:	b97f      	cbnz	r7, 801de34 <_dtoa_r+0x3c>
 801de14:	2010      	movs	r0, #16
 801de16:	f000 fdfd 	bl	801ea14 <malloc>
 801de1a:	4602      	mov	r2, r0
 801de1c:	f8cb 001c 	str.w	r0, [fp, #28]
 801de20:	b920      	cbnz	r0, 801de2c <_dtoa_r+0x34>
 801de22:	4ba7      	ldr	r3, [pc, #668]	@ (801e0c0 <_dtoa_r+0x2c8>)
 801de24:	21ef      	movs	r1, #239	@ 0xef
 801de26:	48a7      	ldr	r0, [pc, #668]	@ (801e0c4 <_dtoa_r+0x2cc>)
 801de28:	f7ff ff3e 	bl	801dca8 <__assert_func>
 801de2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801de30:	6007      	str	r7, [r0, #0]
 801de32:	60c7      	str	r7, [r0, #12]
 801de34:	f8db 301c 	ldr.w	r3, [fp, #28]
 801de38:	6819      	ldr	r1, [r3, #0]
 801de3a:	b159      	cbz	r1, 801de54 <_dtoa_r+0x5c>
 801de3c:	685a      	ldr	r2, [r3, #4]
 801de3e:	604a      	str	r2, [r1, #4]
 801de40:	2301      	movs	r3, #1
 801de42:	4093      	lsls	r3, r2
 801de44:	608b      	str	r3, [r1, #8]
 801de46:	4658      	mov	r0, fp
 801de48:	f000 feda 	bl	801ec00 <_Bfree>
 801de4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801de50:	2200      	movs	r2, #0
 801de52:	601a      	str	r2, [r3, #0]
 801de54:	1e2b      	subs	r3, r5, #0
 801de56:	bfb9      	ittee	lt
 801de58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801de5c:	9303      	strlt	r3, [sp, #12]
 801de5e:	2300      	movge	r3, #0
 801de60:	6033      	strge	r3, [r6, #0]
 801de62:	9f03      	ldr	r7, [sp, #12]
 801de64:	4b98      	ldr	r3, [pc, #608]	@ (801e0c8 <_dtoa_r+0x2d0>)
 801de66:	bfbc      	itt	lt
 801de68:	2201      	movlt	r2, #1
 801de6a:	6032      	strlt	r2, [r6, #0]
 801de6c:	43bb      	bics	r3, r7
 801de6e:	d112      	bne.n	801de96 <_dtoa_r+0x9e>
 801de70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801de72:	f242 730f 	movw	r3, #9999	@ 0x270f
 801de76:	6013      	str	r3, [r2, #0]
 801de78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801de7c:	4323      	orrs	r3, r4
 801de7e:	f000 854d 	beq.w	801e91c <_dtoa_r+0xb24>
 801de82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801de84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e0dc <_dtoa_r+0x2e4>
 801de88:	2b00      	cmp	r3, #0
 801de8a:	f000 854f 	beq.w	801e92c <_dtoa_r+0xb34>
 801de8e:	f10a 0303 	add.w	r3, sl, #3
 801de92:	f000 bd49 	b.w	801e928 <_dtoa_r+0xb30>
 801de96:	ed9d 7b02 	vldr	d7, [sp, #8]
 801de9a:	2200      	movs	r2, #0
 801de9c:	ec51 0b17 	vmov	r0, r1, d7
 801dea0:	2300      	movs	r3, #0
 801dea2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801dea6:	f7e2 fe3f 	bl	8000b28 <__aeabi_dcmpeq>
 801deaa:	4680      	mov	r8, r0
 801deac:	b158      	cbz	r0, 801dec6 <_dtoa_r+0xce>
 801deae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801deb0:	2301      	movs	r3, #1
 801deb2:	6013      	str	r3, [r2, #0]
 801deb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801deb6:	b113      	cbz	r3, 801debe <_dtoa_r+0xc6>
 801deb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801deba:	4b84      	ldr	r3, [pc, #528]	@ (801e0cc <_dtoa_r+0x2d4>)
 801debc:	6013      	str	r3, [r2, #0]
 801debe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801e0e0 <_dtoa_r+0x2e8>
 801dec2:	f000 bd33 	b.w	801e92c <_dtoa_r+0xb34>
 801dec6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801deca:	aa16      	add	r2, sp, #88	@ 0x58
 801decc:	a917      	add	r1, sp, #92	@ 0x5c
 801dece:	4658      	mov	r0, fp
 801ded0:	f001 f980 	bl	801f1d4 <__d2b>
 801ded4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ded8:	4681      	mov	r9, r0
 801deda:	2e00      	cmp	r6, #0
 801dedc:	d077      	beq.n	801dfce <_dtoa_r+0x1d6>
 801dede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dee0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801dee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801dee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801deec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801def0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801def4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801def8:	4619      	mov	r1, r3
 801defa:	2200      	movs	r2, #0
 801defc:	4b74      	ldr	r3, [pc, #464]	@ (801e0d0 <_dtoa_r+0x2d8>)
 801defe:	f7e2 f9f3 	bl	80002e8 <__aeabi_dsub>
 801df02:	a369      	add	r3, pc, #420	@ (adr r3, 801e0a8 <_dtoa_r+0x2b0>)
 801df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df08:	f7e2 fba6 	bl	8000658 <__aeabi_dmul>
 801df0c:	a368      	add	r3, pc, #416	@ (adr r3, 801e0b0 <_dtoa_r+0x2b8>)
 801df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df12:	f7e2 f9eb 	bl	80002ec <__adddf3>
 801df16:	4604      	mov	r4, r0
 801df18:	4630      	mov	r0, r6
 801df1a:	460d      	mov	r5, r1
 801df1c:	f7e2 fb32 	bl	8000584 <__aeabi_i2d>
 801df20:	a365      	add	r3, pc, #404	@ (adr r3, 801e0b8 <_dtoa_r+0x2c0>)
 801df22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df26:	f7e2 fb97 	bl	8000658 <__aeabi_dmul>
 801df2a:	4602      	mov	r2, r0
 801df2c:	460b      	mov	r3, r1
 801df2e:	4620      	mov	r0, r4
 801df30:	4629      	mov	r1, r5
 801df32:	f7e2 f9db 	bl	80002ec <__adddf3>
 801df36:	4604      	mov	r4, r0
 801df38:	460d      	mov	r5, r1
 801df3a:	f7e2 fe3d 	bl	8000bb8 <__aeabi_d2iz>
 801df3e:	2200      	movs	r2, #0
 801df40:	4607      	mov	r7, r0
 801df42:	2300      	movs	r3, #0
 801df44:	4620      	mov	r0, r4
 801df46:	4629      	mov	r1, r5
 801df48:	f7e2 fdf8 	bl	8000b3c <__aeabi_dcmplt>
 801df4c:	b140      	cbz	r0, 801df60 <_dtoa_r+0x168>
 801df4e:	4638      	mov	r0, r7
 801df50:	f7e2 fb18 	bl	8000584 <__aeabi_i2d>
 801df54:	4622      	mov	r2, r4
 801df56:	462b      	mov	r3, r5
 801df58:	f7e2 fde6 	bl	8000b28 <__aeabi_dcmpeq>
 801df5c:	b900      	cbnz	r0, 801df60 <_dtoa_r+0x168>
 801df5e:	3f01      	subs	r7, #1
 801df60:	2f16      	cmp	r7, #22
 801df62:	d851      	bhi.n	801e008 <_dtoa_r+0x210>
 801df64:	4b5b      	ldr	r3, [pc, #364]	@ (801e0d4 <_dtoa_r+0x2dc>)
 801df66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801df6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801df72:	f7e2 fde3 	bl	8000b3c <__aeabi_dcmplt>
 801df76:	2800      	cmp	r0, #0
 801df78:	d048      	beq.n	801e00c <_dtoa_r+0x214>
 801df7a:	3f01      	subs	r7, #1
 801df7c:	2300      	movs	r3, #0
 801df7e:	9312      	str	r3, [sp, #72]	@ 0x48
 801df80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801df82:	1b9b      	subs	r3, r3, r6
 801df84:	1e5a      	subs	r2, r3, #1
 801df86:	bf44      	itt	mi
 801df88:	f1c3 0801 	rsbmi	r8, r3, #1
 801df8c:	2300      	movmi	r3, #0
 801df8e:	9208      	str	r2, [sp, #32]
 801df90:	bf54      	ite	pl
 801df92:	f04f 0800 	movpl.w	r8, #0
 801df96:	9308      	strmi	r3, [sp, #32]
 801df98:	2f00      	cmp	r7, #0
 801df9a:	db39      	blt.n	801e010 <_dtoa_r+0x218>
 801df9c:	9b08      	ldr	r3, [sp, #32]
 801df9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801dfa0:	443b      	add	r3, r7
 801dfa2:	9308      	str	r3, [sp, #32]
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 801dfa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfaa:	2b09      	cmp	r3, #9
 801dfac:	d864      	bhi.n	801e078 <_dtoa_r+0x280>
 801dfae:	2b05      	cmp	r3, #5
 801dfb0:	bfc4      	itt	gt
 801dfb2:	3b04      	subgt	r3, #4
 801dfb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801dfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfb8:	f1a3 0302 	sub.w	r3, r3, #2
 801dfbc:	bfcc      	ite	gt
 801dfbe:	2400      	movgt	r4, #0
 801dfc0:	2401      	movle	r4, #1
 801dfc2:	2b03      	cmp	r3, #3
 801dfc4:	d863      	bhi.n	801e08e <_dtoa_r+0x296>
 801dfc6:	e8df f003 	tbb	[pc, r3]
 801dfca:	372a      	.short	0x372a
 801dfcc:	5535      	.short	0x5535
 801dfce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801dfd2:	441e      	add	r6, r3
 801dfd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801dfd8:	2b20      	cmp	r3, #32
 801dfda:	bfc1      	itttt	gt
 801dfdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801dfe0:	409f      	lslgt	r7, r3
 801dfe2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801dfe6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801dfea:	bfd6      	itet	le
 801dfec:	f1c3 0320 	rsble	r3, r3, #32
 801dff0:	ea47 0003 	orrgt.w	r0, r7, r3
 801dff4:	fa04 f003 	lslle.w	r0, r4, r3
 801dff8:	f7e2 fab4 	bl	8000564 <__aeabi_ui2d>
 801dffc:	2201      	movs	r2, #1
 801dffe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e002:	3e01      	subs	r6, #1
 801e004:	9214      	str	r2, [sp, #80]	@ 0x50
 801e006:	e777      	b.n	801def8 <_dtoa_r+0x100>
 801e008:	2301      	movs	r3, #1
 801e00a:	e7b8      	b.n	801df7e <_dtoa_r+0x186>
 801e00c:	9012      	str	r0, [sp, #72]	@ 0x48
 801e00e:	e7b7      	b.n	801df80 <_dtoa_r+0x188>
 801e010:	427b      	negs	r3, r7
 801e012:	930a      	str	r3, [sp, #40]	@ 0x28
 801e014:	2300      	movs	r3, #0
 801e016:	eba8 0807 	sub.w	r8, r8, r7
 801e01a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e01c:	e7c4      	b.n	801dfa8 <_dtoa_r+0x1b0>
 801e01e:	2300      	movs	r3, #0
 801e020:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e024:	2b00      	cmp	r3, #0
 801e026:	dc35      	bgt.n	801e094 <_dtoa_r+0x29c>
 801e028:	2301      	movs	r3, #1
 801e02a:	9300      	str	r3, [sp, #0]
 801e02c:	9307      	str	r3, [sp, #28]
 801e02e:	461a      	mov	r2, r3
 801e030:	920e      	str	r2, [sp, #56]	@ 0x38
 801e032:	e00b      	b.n	801e04c <_dtoa_r+0x254>
 801e034:	2301      	movs	r3, #1
 801e036:	e7f3      	b.n	801e020 <_dtoa_r+0x228>
 801e038:	2300      	movs	r3, #0
 801e03a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e03c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e03e:	18fb      	adds	r3, r7, r3
 801e040:	9300      	str	r3, [sp, #0]
 801e042:	3301      	adds	r3, #1
 801e044:	2b01      	cmp	r3, #1
 801e046:	9307      	str	r3, [sp, #28]
 801e048:	bfb8      	it	lt
 801e04a:	2301      	movlt	r3, #1
 801e04c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e050:	2100      	movs	r1, #0
 801e052:	2204      	movs	r2, #4
 801e054:	f102 0514 	add.w	r5, r2, #20
 801e058:	429d      	cmp	r5, r3
 801e05a:	d91f      	bls.n	801e09c <_dtoa_r+0x2a4>
 801e05c:	6041      	str	r1, [r0, #4]
 801e05e:	4658      	mov	r0, fp
 801e060:	f000 fd8e 	bl	801eb80 <_Balloc>
 801e064:	4682      	mov	sl, r0
 801e066:	2800      	cmp	r0, #0
 801e068:	d13c      	bne.n	801e0e4 <_dtoa_r+0x2ec>
 801e06a:	4b1b      	ldr	r3, [pc, #108]	@ (801e0d8 <_dtoa_r+0x2e0>)
 801e06c:	4602      	mov	r2, r0
 801e06e:	f240 11af 	movw	r1, #431	@ 0x1af
 801e072:	e6d8      	b.n	801de26 <_dtoa_r+0x2e>
 801e074:	2301      	movs	r3, #1
 801e076:	e7e0      	b.n	801e03a <_dtoa_r+0x242>
 801e078:	2401      	movs	r4, #1
 801e07a:	2300      	movs	r3, #0
 801e07c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e07e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e080:	f04f 33ff 	mov.w	r3, #4294967295
 801e084:	9300      	str	r3, [sp, #0]
 801e086:	9307      	str	r3, [sp, #28]
 801e088:	2200      	movs	r2, #0
 801e08a:	2312      	movs	r3, #18
 801e08c:	e7d0      	b.n	801e030 <_dtoa_r+0x238>
 801e08e:	2301      	movs	r3, #1
 801e090:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e092:	e7f5      	b.n	801e080 <_dtoa_r+0x288>
 801e094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e096:	9300      	str	r3, [sp, #0]
 801e098:	9307      	str	r3, [sp, #28]
 801e09a:	e7d7      	b.n	801e04c <_dtoa_r+0x254>
 801e09c:	3101      	adds	r1, #1
 801e09e:	0052      	lsls	r2, r2, #1
 801e0a0:	e7d8      	b.n	801e054 <_dtoa_r+0x25c>
 801e0a2:	bf00      	nop
 801e0a4:	f3af 8000 	nop.w
 801e0a8:	636f4361 	.word	0x636f4361
 801e0ac:	3fd287a7 	.word	0x3fd287a7
 801e0b0:	8b60c8b3 	.word	0x8b60c8b3
 801e0b4:	3fc68a28 	.word	0x3fc68a28
 801e0b8:	509f79fb 	.word	0x509f79fb
 801e0bc:	3fd34413 	.word	0x3fd34413
 801e0c0:	080243dc 	.word	0x080243dc
 801e0c4:	080245c9 	.word	0x080245c9
 801e0c8:	7ff00000 	.word	0x7ff00000
 801e0cc:	0802455d 	.word	0x0802455d
 801e0d0:	3ff80000 	.word	0x3ff80000
 801e0d4:	080246c0 	.word	0x080246c0
 801e0d8:	08024621 	.word	0x08024621
 801e0dc:	080245c5 	.word	0x080245c5
 801e0e0:	0802455c 	.word	0x0802455c
 801e0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e0e8:	6018      	str	r0, [r3, #0]
 801e0ea:	9b07      	ldr	r3, [sp, #28]
 801e0ec:	2b0e      	cmp	r3, #14
 801e0ee:	f200 80a4 	bhi.w	801e23a <_dtoa_r+0x442>
 801e0f2:	2c00      	cmp	r4, #0
 801e0f4:	f000 80a1 	beq.w	801e23a <_dtoa_r+0x442>
 801e0f8:	2f00      	cmp	r7, #0
 801e0fa:	dd33      	ble.n	801e164 <_dtoa_r+0x36c>
 801e0fc:	4bad      	ldr	r3, [pc, #692]	@ (801e3b4 <_dtoa_r+0x5bc>)
 801e0fe:	f007 020f 	and.w	r2, r7, #15
 801e102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e106:	ed93 7b00 	vldr	d7, [r3]
 801e10a:	05f8      	lsls	r0, r7, #23
 801e10c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e110:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e114:	d516      	bpl.n	801e144 <_dtoa_r+0x34c>
 801e116:	4ba8      	ldr	r3, [pc, #672]	@ (801e3b8 <_dtoa_r+0x5c0>)
 801e118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e11c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e120:	f7e2 fbc4 	bl	80008ac <__aeabi_ddiv>
 801e124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e128:	f004 040f 	and.w	r4, r4, #15
 801e12c:	2603      	movs	r6, #3
 801e12e:	4da2      	ldr	r5, [pc, #648]	@ (801e3b8 <_dtoa_r+0x5c0>)
 801e130:	b954      	cbnz	r4, 801e148 <_dtoa_r+0x350>
 801e132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e13a:	f7e2 fbb7 	bl	80008ac <__aeabi_ddiv>
 801e13e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e142:	e028      	b.n	801e196 <_dtoa_r+0x39e>
 801e144:	2602      	movs	r6, #2
 801e146:	e7f2      	b.n	801e12e <_dtoa_r+0x336>
 801e148:	07e1      	lsls	r1, r4, #31
 801e14a:	d508      	bpl.n	801e15e <_dtoa_r+0x366>
 801e14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e150:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e154:	f7e2 fa80 	bl	8000658 <__aeabi_dmul>
 801e158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e15c:	3601      	adds	r6, #1
 801e15e:	1064      	asrs	r4, r4, #1
 801e160:	3508      	adds	r5, #8
 801e162:	e7e5      	b.n	801e130 <_dtoa_r+0x338>
 801e164:	f000 80d2 	beq.w	801e30c <_dtoa_r+0x514>
 801e168:	427c      	negs	r4, r7
 801e16a:	4b92      	ldr	r3, [pc, #584]	@ (801e3b4 <_dtoa_r+0x5bc>)
 801e16c:	4d92      	ldr	r5, [pc, #584]	@ (801e3b8 <_dtoa_r+0x5c0>)
 801e16e:	f004 020f 	and.w	r2, r4, #15
 801e172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e17a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e17e:	f7e2 fa6b 	bl	8000658 <__aeabi_dmul>
 801e182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e186:	1124      	asrs	r4, r4, #4
 801e188:	2300      	movs	r3, #0
 801e18a:	2602      	movs	r6, #2
 801e18c:	2c00      	cmp	r4, #0
 801e18e:	f040 80b2 	bne.w	801e2f6 <_dtoa_r+0x4fe>
 801e192:	2b00      	cmp	r3, #0
 801e194:	d1d3      	bne.n	801e13e <_dtoa_r+0x346>
 801e196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e198:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	f000 80b7 	beq.w	801e310 <_dtoa_r+0x518>
 801e1a2:	4b86      	ldr	r3, [pc, #536]	@ (801e3bc <_dtoa_r+0x5c4>)
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	4620      	mov	r0, r4
 801e1a8:	4629      	mov	r1, r5
 801e1aa:	f7e2 fcc7 	bl	8000b3c <__aeabi_dcmplt>
 801e1ae:	2800      	cmp	r0, #0
 801e1b0:	f000 80ae 	beq.w	801e310 <_dtoa_r+0x518>
 801e1b4:	9b07      	ldr	r3, [sp, #28]
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	f000 80aa 	beq.w	801e310 <_dtoa_r+0x518>
 801e1bc:	9b00      	ldr	r3, [sp, #0]
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	dd37      	ble.n	801e232 <_dtoa_r+0x43a>
 801e1c2:	1e7b      	subs	r3, r7, #1
 801e1c4:	9304      	str	r3, [sp, #16]
 801e1c6:	4620      	mov	r0, r4
 801e1c8:	4b7d      	ldr	r3, [pc, #500]	@ (801e3c0 <_dtoa_r+0x5c8>)
 801e1ca:	2200      	movs	r2, #0
 801e1cc:	4629      	mov	r1, r5
 801e1ce:	f7e2 fa43 	bl	8000658 <__aeabi_dmul>
 801e1d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e1d6:	9c00      	ldr	r4, [sp, #0]
 801e1d8:	3601      	adds	r6, #1
 801e1da:	4630      	mov	r0, r6
 801e1dc:	f7e2 f9d2 	bl	8000584 <__aeabi_i2d>
 801e1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e1e4:	f7e2 fa38 	bl	8000658 <__aeabi_dmul>
 801e1e8:	4b76      	ldr	r3, [pc, #472]	@ (801e3c4 <_dtoa_r+0x5cc>)
 801e1ea:	2200      	movs	r2, #0
 801e1ec:	f7e2 f87e 	bl	80002ec <__adddf3>
 801e1f0:	4605      	mov	r5, r0
 801e1f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e1f6:	2c00      	cmp	r4, #0
 801e1f8:	f040 808d 	bne.w	801e316 <_dtoa_r+0x51e>
 801e1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e200:	4b71      	ldr	r3, [pc, #452]	@ (801e3c8 <_dtoa_r+0x5d0>)
 801e202:	2200      	movs	r2, #0
 801e204:	f7e2 f870 	bl	80002e8 <__aeabi_dsub>
 801e208:	4602      	mov	r2, r0
 801e20a:	460b      	mov	r3, r1
 801e20c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e210:	462a      	mov	r2, r5
 801e212:	4633      	mov	r3, r6
 801e214:	f7e2 fcb0 	bl	8000b78 <__aeabi_dcmpgt>
 801e218:	2800      	cmp	r0, #0
 801e21a:	f040 828b 	bne.w	801e734 <_dtoa_r+0x93c>
 801e21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e222:	462a      	mov	r2, r5
 801e224:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e228:	f7e2 fc88 	bl	8000b3c <__aeabi_dcmplt>
 801e22c:	2800      	cmp	r0, #0
 801e22e:	f040 8128 	bne.w	801e482 <_dtoa_r+0x68a>
 801e232:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e23a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	f2c0 815a 	blt.w	801e4f6 <_dtoa_r+0x6fe>
 801e242:	2f0e      	cmp	r7, #14
 801e244:	f300 8157 	bgt.w	801e4f6 <_dtoa_r+0x6fe>
 801e248:	4b5a      	ldr	r3, [pc, #360]	@ (801e3b4 <_dtoa_r+0x5bc>)
 801e24a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e24e:	ed93 7b00 	vldr	d7, [r3]
 801e252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e254:	2b00      	cmp	r3, #0
 801e256:	ed8d 7b00 	vstr	d7, [sp]
 801e25a:	da03      	bge.n	801e264 <_dtoa_r+0x46c>
 801e25c:	9b07      	ldr	r3, [sp, #28]
 801e25e:	2b00      	cmp	r3, #0
 801e260:	f340 8101 	ble.w	801e466 <_dtoa_r+0x66e>
 801e264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e268:	4656      	mov	r6, sl
 801e26a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e26e:	4620      	mov	r0, r4
 801e270:	4629      	mov	r1, r5
 801e272:	f7e2 fb1b 	bl	80008ac <__aeabi_ddiv>
 801e276:	f7e2 fc9f 	bl	8000bb8 <__aeabi_d2iz>
 801e27a:	4680      	mov	r8, r0
 801e27c:	f7e2 f982 	bl	8000584 <__aeabi_i2d>
 801e280:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e284:	f7e2 f9e8 	bl	8000658 <__aeabi_dmul>
 801e288:	4602      	mov	r2, r0
 801e28a:	460b      	mov	r3, r1
 801e28c:	4620      	mov	r0, r4
 801e28e:	4629      	mov	r1, r5
 801e290:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e294:	f7e2 f828 	bl	80002e8 <__aeabi_dsub>
 801e298:	f806 4b01 	strb.w	r4, [r6], #1
 801e29c:	9d07      	ldr	r5, [sp, #28]
 801e29e:	eba6 040a 	sub.w	r4, r6, sl
 801e2a2:	42a5      	cmp	r5, r4
 801e2a4:	4602      	mov	r2, r0
 801e2a6:	460b      	mov	r3, r1
 801e2a8:	f040 8117 	bne.w	801e4da <_dtoa_r+0x6e2>
 801e2ac:	f7e2 f81e 	bl	80002ec <__adddf3>
 801e2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e2b4:	4604      	mov	r4, r0
 801e2b6:	460d      	mov	r5, r1
 801e2b8:	f7e2 fc5e 	bl	8000b78 <__aeabi_dcmpgt>
 801e2bc:	2800      	cmp	r0, #0
 801e2be:	f040 80f9 	bne.w	801e4b4 <_dtoa_r+0x6bc>
 801e2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e2c6:	4620      	mov	r0, r4
 801e2c8:	4629      	mov	r1, r5
 801e2ca:	f7e2 fc2d 	bl	8000b28 <__aeabi_dcmpeq>
 801e2ce:	b118      	cbz	r0, 801e2d8 <_dtoa_r+0x4e0>
 801e2d0:	f018 0f01 	tst.w	r8, #1
 801e2d4:	f040 80ee 	bne.w	801e4b4 <_dtoa_r+0x6bc>
 801e2d8:	4649      	mov	r1, r9
 801e2da:	4658      	mov	r0, fp
 801e2dc:	f000 fc90 	bl	801ec00 <_Bfree>
 801e2e0:	2300      	movs	r3, #0
 801e2e2:	7033      	strb	r3, [r6, #0]
 801e2e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2e6:	3701      	adds	r7, #1
 801e2e8:	601f      	str	r7, [r3, #0]
 801e2ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	f000 831d 	beq.w	801e92c <_dtoa_r+0xb34>
 801e2f2:	601e      	str	r6, [r3, #0]
 801e2f4:	e31a      	b.n	801e92c <_dtoa_r+0xb34>
 801e2f6:	07e2      	lsls	r2, r4, #31
 801e2f8:	d505      	bpl.n	801e306 <_dtoa_r+0x50e>
 801e2fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e2fe:	f7e2 f9ab 	bl	8000658 <__aeabi_dmul>
 801e302:	3601      	adds	r6, #1
 801e304:	2301      	movs	r3, #1
 801e306:	1064      	asrs	r4, r4, #1
 801e308:	3508      	adds	r5, #8
 801e30a:	e73f      	b.n	801e18c <_dtoa_r+0x394>
 801e30c:	2602      	movs	r6, #2
 801e30e:	e742      	b.n	801e196 <_dtoa_r+0x39e>
 801e310:	9c07      	ldr	r4, [sp, #28]
 801e312:	9704      	str	r7, [sp, #16]
 801e314:	e761      	b.n	801e1da <_dtoa_r+0x3e2>
 801e316:	4b27      	ldr	r3, [pc, #156]	@ (801e3b4 <_dtoa_r+0x5bc>)
 801e318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e31e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e322:	4454      	add	r4, sl
 801e324:	2900      	cmp	r1, #0
 801e326:	d053      	beq.n	801e3d0 <_dtoa_r+0x5d8>
 801e328:	4928      	ldr	r1, [pc, #160]	@ (801e3cc <_dtoa_r+0x5d4>)
 801e32a:	2000      	movs	r0, #0
 801e32c:	f7e2 fabe 	bl	80008ac <__aeabi_ddiv>
 801e330:	4633      	mov	r3, r6
 801e332:	462a      	mov	r2, r5
 801e334:	f7e1 ffd8 	bl	80002e8 <__aeabi_dsub>
 801e338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e33c:	4656      	mov	r6, sl
 801e33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e342:	f7e2 fc39 	bl	8000bb8 <__aeabi_d2iz>
 801e346:	4605      	mov	r5, r0
 801e348:	f7e2 f91c 	bl	8000584 <__aeabi_i2d>
 801e34c:	4602      	mov	r2, r0
 801e34e:	460b      	mov	r3, r1
 801e350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e354:	f7e1 ffc8 	bl	80002e8 <__aeabi_dsub>
 801e358:	3530      	adds	r5, #48	@ 0x30
 801e35a:	4602      	mov	r2, r0
 801e35c:	460b      	mov	r3, r1
 801e35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e362:	f806 5b01 	strb.w	r5, [r6], #1
 801e366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e36a:	f7e2 fbe7 	bl	8000b3c <__aeabi_dcmplt>
 801e36e:	2800      	cmp	r0, #0
 801e370:	d171      	bne.n	801e456 <_dtoa_r+0x65e>
 801e372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e376:	4911      	ldr	r1, [pc, #68]	@ (801e3bc <_dtoa_r+0x5c4>)
 801e378:	2000      	movs	r0, #0
 801e37a:	f7e1 ffb5 	bl	80002e8 <__aeabi_dsub>
 801e37e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e382:	f7e2 fbdb 	bl	8000b3c <__aeabi_dcmplt>
 801e386:	2800      	cmp	r0, #0
 801e388:	f040 8095 	bne.w	801e4b6 <_dtoa_r+0x6be>
 801e38c:	42a6      	cmp	r6, r4
 801e38e:	f43f af50 	beq.w	801e232 <_dtoa_r+0x43a>
 801e392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e396:	4b0a      	ldr	r3, [pc, #40]	@ (801e3c0 <_dtoa_r+0x5c8>)
 801e398:	2200      	movs	r2, #0
 801e39a:	f7e2 f95d 	bl	8000658 <__aeabi_dmul>
 801e39e:	4b08      	ldr	r3, [pc, #32]	@ (801e3c0 <_dtoa_r+0x5c8>)
 801e3a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e3a4:	2200      	movs	r2, #0
 801e3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e3aa:	f7e2 f955 	bl	8000658 <__aeabi_dmul>
 801e3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e3b2:	e7c4      	b.n	801e33e <_dtoa_r+0x546>
 801e3b4:	080246c0 	.word	0x080246c0
 801e3b8:	08024698 	.word	0x08024698
 801e3bc:	3ff00000 	.word	0x3ff00000
 801e3c0:	40240000 	.word	0x40240000
 801e3c4:	401c0000 	.word	0x401c0000
 801e3c8:	40140000 	.word	0x40140000
 801e3cc:	3fe00000 	.word	0x3fe00000
 801e3d0:	4631      	mov	r1, r6
 801e3d2:	4628      	mov	r0, r5
 801e3d4:	f7e2 f940 	bl	8000658 <__aeabi_dmul>
 801e3d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e3dc:	9415      	str	r4, [sp, #84]	@ 0x54
 801e3de:	4656      	mov	r6, sl
 801e3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e3e4:	f7e2 fbe8 	bl	8000bb8 <__aeabi_d2iz>
 801e3e8:	4605      	mov	r5, r0
 801e3ea:	f7e2 f8cb 	bl	8000584 <__aeabi_i2d>
 801e3ee:	4602      	mov	r2, r0
 801e3f0:	460b      	mov	r3, r1
 801e3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e3f6:	f7e1 ff77 	bl	80002e8 <__aeabi_dsub>
 801e3fa:	3530      	adds	r5, #48	@ 0x30
 801e3fc:	f806 5b01 	strb.w	r5, [r6], #1
 801e400:	4602      	mov	r2, r0
 801e402:	460b      	mov	r3, r1
 801e404:	42a6      	cmp	r6, r4
 801e406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e40a:	f04f 0200 	mov.w	r2, #0
 801e40e:	d124      	bne.n	801e45a <_dtoa_r+0x662>
 801e410:	4bac      	ldr	r3, [pc, #688]	@ (801e6c4 <_dtoa_r+0x8cc>)
 801e412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e416:	f7e1 ff69 	bl	80002ec <__adddf3>
 801e41a:	4602      	mov	r2, r0
 801e41c:	460b      	mov	r3, r1
 801e41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e422:	f7e2 fba9 	bl	8000b78 <__aeabi_dcmpgt>
 801e426:	2800      	cmp	r0, #0
 801e428:	d145      	bne.n	801e4b6 <_dtoa_r+0x6be>
 801e42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e42e:	49a5      	ldr	r1, [pc, #660]	@ (801e6c4 <_dtoa_r+0x8cc>)
 801e430:	2000      	movs	r0, #0
 801e432:	f7e1 ff59 	bl	80002e8 <__aeabi_dsub>
 801e436:	4602      	mov	r2, r0
 801e438:	460b      	mov	r3, r1
 801e43a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e43e:	f7e2 fb7d 	bl	8000b3c <__aeabi_dcmplt>
 801e442:	2800      	cmp	r0, #0
 801e444:	f43f aef5 	beq.w	801e232 <_dtoa_r+0x43a>
 801e448:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e44a:	1e73      	subs	r3, r6, #1
 801e44c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e44e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e452:	2b30      	cmp	r3, #48	@ 0x30
 801e454:	d0f8      	beq.n	801e448 <_dtoa_r+0x650>
 801e456:	9f04      	ldr	r7, [sp, #16]
 801e458:	e73e      	b.n	801e2d8 <_dtoa_r+0x4e0>
 801e45a:	4b9b      	ldr	r3, [pc, #620]	@ (801e6c8 <_dtoa_r+0x8d0>)
 801e45c:	f7e2 f8fc 	bl	8000658 <__aeabi_dmul>
 801e460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e464:	e7bc      	b.n	801e3e0 <_dtoa_r+0x5e8>
 801e466:	d10c      	bne.n	801e482 <_dtoa_r+0x68a>
 801e468:	4b98      	ldr	r3, [pc, #608]	@ (801e6cc <_dtoa_r+0x8d4>)
 801e46a:	2200      	movs	r2, #0
 801e46c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e470:	f7e2 f8f2 	bl	8000658 <__aeabi_dmul>
 801e474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e478:	f7e2 fb74 	bl	8000b64 <__aeabi_dcmpge>
 801e47c:	2800      	cmp	r0, #0
 801e47e:	f000 8157 	beq.w	801e730 <_dtoa_r+0x938>
 801e482:	2400      	movs	r4, #0
 801e484:	4625      	mov	r5, r4
 801e486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e488:	43db      	mvns	r3, r3
 801e48a:	9304      	str	r3, [sp, #16]
 801e48c:	4656      	mov	r6, sl
 801e48e:	2700      	movs	r7, #0
 801e490:	4621      	mov	r1, r4
 801e492:	4658      	mov	r0, fp
 801e494:	f000 fbb4 	bl	801ec00 <_Bfree>
 801e498:	2d00      	cmp	r5, #0
 801e49a:	d0dc      	beq.n	801e456 <_dtoa_r+0x65e>
 801e49c:	b12f      	cbz	r7, 801e4aa <_dtoa_r+0x6b2>
 801e49e:	42af      	cmp	r7, r5
 801e4a0:	d003      	beq.n	801e4aa <_dtoa_r+0x6b2>
 801e4a2:	4639      	mov	r1, r7
 801e4a4:	4658      	mov	r0, fp
 801e4a6:	f000 fbab 	bl	801ec00 <_Bfree>
 801e4aa:	4629      	mov	r1, r5
 801e4ac:	4658      	mov	r0, fp
 801e4ae:	f000 fba7 	bl	801ec00 <_Bfree>
 801e4b2:	e7d0      	b.n	801e456 <_dtoa_r+0x65e>
 801e4b4:	9704      	str	r7, [sp, #16]
 801e4b6:	4633      	mov	r3, r6
 801e4b8:	461e      	mov	r6, r3
 801e4ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e4be:	2a39      	cmp	r2, #57	@ 0x39
 801e4c0:	d107      	bne.n	801e4d2 <_dtoa_r+0x6da>
 801e4c2:	459a      	cmp	sl, r3
 801e4c4:	d1f8      	bne.n	801e4b8 <_dtoa_r+0x6c0>
 801e4c6:	9a04      	ldr	r2, [sp, #16]
 801e4c8:	3201      	adds	r2, #1
 801e4ca:	9204      	str	r2, [sp, #16]
 801e4cc:	2230      	movs	r2, #48	@ 0x30
 801e4ce:	f88a 2000 	strb.w	r2, [sl]
 801e4d2:	781a      	ldrb	r2, [r3, #0]
 801e4d4:	3201      	adds	r2, #1
 801e4d6:	701a      	strb	r2, [r3, #0]
 801e4d8:	e7bd      	b.n	801e456 <_dtoa_r+0x65e>
 801e4da:	4b7b      	ldr	r3, [pc, #492]	@ (801e6c8 <_dtoa_r+0x8d0>)
 801e4dc:	2200      	movs	r2, #0
 801e4de:	f7e2 f8bb 	bl	8000658 <__aeabi_dmul>
 801e4e2:	2200      	movs	r2, #0
 801e4e4:	2300      	movs	r3, #0
 801e4e6:	4604      	mov	r4, r0
 801e4e8:	460d      	mov	r5, r1
 801e4ea:	f7e2 fb1d 	bl	8000b28 <__aeabi_dcmpeq>
 801e4ee:	2800      	cmp	r0, #0
 801e4f0:	f43f aebb 	beq.w	801e26a <_dtoa_r+0x472>
 801e4f4:	e6f0      	b.n	801e2d8 <_dtoa_r+0x4e0>
 801e4f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e4f8:	2a00      	cmp	r2, #0
 801e4fa:	f000 80db 	beq.w	801e6b4 <_dtoa_r+0x8bc>
 801e4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e500:	2a01      	cmp	r2, #1
 801e502:	f300 80bf 	bgt.w	801e684 <_dtoa_r+0x88c>
 801e506:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e508:	2a00      	cmp	r2, #0
 801e50a:	f000 80b7 	beq.w	801e67c <_dtoa_r+0x884>
 801e50e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e514:	4646      	mov	r6, r8
 801e516:	9a08      	ldr	r2, [sp, #32]
 801e518:	2101      	movs	r1, #1
 801e51a:	441a      	add	r2, r3
 801e51c:	4658      	mov	r0, fp
 801e51e:	4498      	add	r8, r3
 801e520:	9208      	str	r2, [sp, #32]
 801e522:	f000 fc21 	bl	801ed68 <__i2b>
 801e526:	4605      	mov	r5, r0
 801e528:	b15e      	cbz	r6, 801e542 <_dtoa_r+0x74a>
 801e52a:	9b08      	ldr	r3, [sp, #32]
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	dd08      	ble.n	801e542 <_dtoa_r+0x74a>
 801e530:	42b3      	cmp	r3, r6
 801e532:	9a08      	ldr	r2, [sp, #32]
 801e534:	bfa8      	it	ge
 801e536:	4633      	movge	r3, r6
 801e538:	eba8 0803 	sub.w	r8, r8, r3
 801e53c:	1af6      	subs	r6, r6, r3
 801e53e:	1ad3      	subs	r3, r2, r3
 801e540:	9308      	str	r3, [sp, #32]
 801e542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e544:	b1f3      	cbz	r3, 801e584 <_dtoa_r+0x78c>
 801e546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e548:	2b00      	cmp	r3, #0
 801e54a:	f000 80b7 	beq.w	801e6bc <_dtoa_r+0x8c4>
 801e54e:	b18c      	cbz	r4, 801e574 <_dtoa_r+0x77c>
 801e550:	4629      	mov	r1, r5
 801e552:	4622      	mov	r2, r4
 801e554:	4658      	mov	r0, fp
 801e556:	f000 fcc7 	bl	801eee8 <__pow5mult>
 801e55a:	464a      	mov	r2, r9
 801e55c:	4601      	mov	r1, r0
 801e55e:	4605      	mov	r5, r0
 801e560:	4658      	mov	r0, fp
 801e562:	f000 fc17 	bl	801ed94 <__multiply>
 801e566:	4649      	mov	r1, r9
 801e568:	9004      	str	r0, [sp, #16]
 801e56a:	4658      	mov	r0, fp
 801e56c:	f000 fb48 	bl	801ec00 <_Bfree>
 801e570:	9b04      	ldr	r3, [sp, #16]
 801e572:	4699      	mov	r9, r3
 801e574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e576:	1b1a      	subs	r2, r3, r4
 801e578:	d004      	beq.n	801e584 <_dtoa_r+0x78c>
 801e57a:	4649      	mov	r1, r9
 801e57c:	4658      	mov	r0, fp
 801e57e:	f000 fcb3 	bl	801eee8 <__pow5mult>
 801e582:	4681      	mov	r9, r0
 801e584:	2101      	movs	r1, #1
 801e586:	4658      	mov	r0, fp
 801e588:	f000 fbee 	bl	801ed68 <__i2b>
 801e58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e58e:	4604      	mov	r4, r0
 801e590:	2b00      	cmp	r3, #0
 801e592:	f000 81cf 	beq.w	801e934 <_dtoa_r+0xb3c>
 801e596:	461a      	mov	r2, r3
 801e598:	4601      	mov	r1, r0
 801e59a:	4658      	mov	r0, fp
 801e59c:	f000 fca4 	bl	801eee8 <__pow5mult>
 801e5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5a2:	2b01      	cmp	r3, #1
 801e5a4:	4604      	mov	r4, r0
 801e5a6:	f300 8095 	bgt.w	801e6d4 <_dtoa_r+0x8dc>
 801e5aa:	9b02      	ldr	r3, [sp, #8]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	f040 8087 	bne.w	801e6c0 <_dtoa_r+0x8c8>
 801e5b2:	9b03      	ldr	r3, [sp, #12]
 801e5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	f040 8089 	bne.w	801e6d0 <_dtoa_r+0x8d8>
 801e5be:	9b03      	ldr	r3, [sp, #12]
 801e5c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e5c4:	0d1b      	lsrs	r3, r3, #20
 801e5c6:	051b      	lsls	r3, r3, #20
 801e5c8:	b12b      	cbz	r3, 801e5d6 <_dtoa_r+0x7de>
 801e5ca:	9b08      	ldr	r3, [sp, #32]
 801e5cc:	3301      	adds	r3, #1
 801e5ce:	9308      	str	r3, [sp, #32]
 801e5d0:	f108 0801 	add.w	r8, r8, #1
 801e5d4:	2301      	movs	r3, #1
 801e5d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	f000 81b0 	beq.w	801e940 <_dtoa_r+0xb48>
 801e5e0:	6923      	ldr	r3, [r4, #16]
 801e5e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e5e6:	6918      	ldr	r0, [r3, #16]
 801e5e8:	f000 fb72 	bl	801ecd0 <__hi0bits>
 801e5ec:	f1c0 0020 	rsb	r0, r0, #32
 801e5f0:	9b08      	ldr	r3, [sp, #32]
 801e5f2:	4418      	add	r0, r3
 801e5f4:	f010 001f 	ands.w	r0, r0, #31
 801e5f8:	d077      	beq.n	801e6ea <_dtoa_r+0x8f2>
 801e5fa:	f1c0 0320 	rsb	r3, r0, #32
 801e5fe:	2b04      	cmp	r3, #4
 801e600:	dd6b      	ble.n	801e6da <_dtoa_r+0x8e2>
 801e602:	9b08      	ldr	r3, [sp, #32]
 801e604:	f1c0 001c 	rsb	r0, r0, #28
 801e608:	4403      	add	r3, r0
 801e60a:	4480      	add	r8, r0
 801e60c:	4406      	add	r6, r0
 801e60e:	9308      	str	r3, [sp, #32]
 801e610:	f1b8 0f00 	cmp.w	r8, #0
 801e614:	dd05      	ble.n	801e622 <_dtoa_r+0x82a>
 801e616:	4649      	mov	r1, r9
 801e618:	4642      	mov	r2, r8
 801e61a:	4658      	mov	r0, fp
 801e61c:	f000 fcbe 	bl	801ef9c <__lshift>
 801e620:	4681      	mov	r9, r0
 801e622:	9b08      	ldr	r3, [sp, #32]
 801e624:	2b00      	cmp	r3, #0
 801e626:	dd05      	ble.n	801e634 <_dtoa_r+0x83c>
 801e628:	4621      	mov	r1, r4
 801e62a:	461a      	mov	r2, r3
 801e62c:	4658      	mov	r0, fp
 801e62e:	f000 fcb5 	bl	801ef9c <__lshift>
 801e632:	4604      	mov	r4, r0
 801e634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e636:	2b00      	cmp	r3, #0
 801e638:	d059      	beq.n	801e6ee <_dtoa_r+0x8f6>
 801e63a:	4621      	mov	r1, r4
 801e63c:	4648      	mov	r0, r9
 801e63e:	f000 fd19 	bl	801f074 <__mcmp>
 801e642:	2800      	cmp	r0, #0
 801e644:	da53      	bge.n	801e6ee <_dtoa_r+0x8f6>
 801e646:	1e7b      	subs	r3, r7, #1
 801e648:	9304      	str	r3, [sp, #16]
 801e64a:	4649      	mov	r1, r9
 801e64c:	2300      	movs	r3, #0
 801e64e:	220a      	movs	r2, #10
 801e650:	4658      	mov	r0, fp
 801e652:	f000 faf7 	bl	801ec44 <__multadd>
 801e656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e658:	4681      	mov	r9, r0
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	f000 8172 	beq.w	801e944 <_dtoa_r+0xb4c>
 801e660:	2300      	movs	r3, #0
 801e662:	4629      	mov	r1, r5
 801e664:	220a      	movs	r2, #10
 801e666:	4658      	mov	r0, fp
 801e668:	f000 faec 	bl	801ec44 <__multadd>
 801e66c:	9b00      	ldr	r3, [sp, #0]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	4605      	mov	r5, r0
 801e672:	dc67      	bgt.n	801e744 <_dtoa_r+0x94c>
 801e674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e676:	2b02      	cmp	r3, #2
 801e678:	dc41      	bgt.n	801e6fe <_dtoa_r+0x906>
 801e67a:	e063      	b.n	801e744 <_dtoa_r+0x94c>
 801e67c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e67e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801e682:	e746      	b.n	801e512 <_dtoa_r+0x71a>
 801e684:	9b07      	ldr	r3, [sp, #28]
 801e686:	1e5c      	subs	r4, r3, #1
 801e688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e68a:	42a3      	cmp	r3, r4
 801e68c:	bfbf      	itttt	lt
 801e68e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801e690:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801e692:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801e694:	1ae3      	sublt	r3, r4, r3
 801e696:	bfb4      	ite	lt
 801e698:	18d2      	addlt	r2, r2, r3
 801e69a:	1b1c      	subge	r4, r3, r4
 801e69c:	9b07      	ldr	r3, [sp, #28]
 801e69e:	bfbc      	itt	lt
 801e6a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801e6a2:	2400      	movlt	r4, #0
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	bfb5      	itete	lt
 801e6a8:	eba8 0603 	sublt.w	r6, r8, r3
 801e6ac:	9b07      	ldrge	r3, [sp, #28]
 801e6ae:	2300      	movlt	r3, #0
 801e6b0:	4646      	movge	r6, r8
 801e6b2:	e730      	b.n	801e516 <_dtoa_r+0x71e>
 801e6b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e6b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801e6b8:	4646      	mov	r6, r8
 801e6ba:	e735      	b.n	801e528 <_dtoa_r+0x730>
 801e6bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e6be:	e75c      	b.n	801e57a <_dtoa_r+0x782>
 801e6c0:	2300      	movs	r3, #0
 801e6c2:	e788      	b.n	801e5d6 <_dtoa_r+0x7de>
 801e6c4:	3fe00000 	.word	0x3fe00000
 801e6c8:	40240000 	.word	0x40240000
 801e6cc:	40140000 	.word	0x40140000
 801e6d0:	9b02      	ldr	r3, [sp, #8]
 801e6d2:	e780      	b.n	801e5d6 <_dtoa_r+0x7de>
 801e6d4:	2300      	movs	r3, #0
 801e6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801e6d8:	e782      	b.n	801e5e0 <_dtoa_r+0x7e8>
 801e6da:	d099      	beq.n	801e610 <_dtoa_r+0x818>
 801e6dc:	9a08      	ldr	r2, [sp, #32]
 801e6de:	331c      	adds	r3, #28
 801e6e0:	441a      	add	r2, r3
 801e6e2:	4498      	add	r8, r3
 801e6e4:	441e      	add	r6, r3
 801e6e6:	9208      	str	r2, [sp, #32]
 801e6e8:	e792      	b.n	801e610 <_dtoa_r+0x818>
 801e6ea:	4603      	mov	r3, r0
 801e6ec:	e7f6      	b.n	801e6dc <_dtoa_r+0x8e4>
 801e6ee:	9b07      	ldr	r3, [sp, #28]
 801e6f0:	9704      	str	r7, [sp, #16]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	dc20      	bgt.n	801e738 <_dtoa_r+0x940>
 801e6f6:	9300      	str	r3, [sp, #0]
 801e6f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6fa:	2b02      	cmp	r3, #2
 801e6fc:	dd1e      	ble.n	801e73c <_dtoa_r+0x944>
 801e6fe:	9b00      	ldr	r3, [sp, #0]
 801e700:	2b00      	cmp	r3, #0
 801e702:	f47f aec0 	bne.w	801e486 <_dtoa_r+0x68e>
 801e706:	4621      	mov	r1, r4
 801e708:	2205      	movs	r2, #5
 801e70a:	4658      	mov	r0, fp
 801e70c:	f000 fa9a 	bl	801ec44 <__multadd>
 801e710:	4601      	mov	r1, r0
 801e712:	4604      	mov	r4, r0
 801e714:	4648      	mov	r0, r9
 801e716:	f000 fcad 	bl	801f074 <__mcmp>
 801e71a:	2800      	cmp	r0, #0
 801e71c:	f77f aeb3 	ble.w	801e486 <_dtoa_r+0x68e>
 801e720:	4656      	mov	r6, sl
 801e722:	2331      	movs	r3, #49	@ 0x31
 801e724:	f806 3b01 	strb.w	r3, [r6], #1
 801e728:	9b04      	ldr	r3, [sp, #16]
 801e72a:	3301      	adds	r3, #1
 801e72c:	9304      	str	r3, [sp, #16]
 801e72e:	e6ae      	b.n	801e48e <_dtoa_r+0x696>
 801e730:	9c07      	ldr	r4, [sp, #28]
 801e732:	9704      	str	r7, [sp, #16]
 801e734:	4625      	mov	r5, r4
 801e736:	e7f3      	b.n	801e720 <_dtoa_r+0x928>
 801e738:	9b07      	ldr	r3, [sp, #28]
 801e73a:	9300      	str	r3, [sp, #0]
 801e73c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e73e:	2b00      	cmp	r3, #0
 801e740:	f000 8104 	beq.w	801e94c <_dtoa_r+0xb54>
 801e744:	2e00      	cmp	r6, #0
 801e746:	dd05      	ble.n	801e754 <_dtoa_r+0x95c>
 801e748:	4629      	mov	r1, r5
 801e74a:	4632      	mov	r2, r6
 801e74c:	4658      	mov	r0, fp
 801e74e:	f000 fc25 	bl	801ef9c <__lshift>
 801e752:	4605      	mov	r5, r0
 801e754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e756:	2b00      	cmp	r3, #0
 801e758:	d05a      	beq.n	801e810 <_dtoa_r+0xa18>
 801e75a:	6869      	ldr	r1, [r5, #4]
 801e75c:	4658      	mov	r0, fp
 801e75e:	f000 fa0f 	bl	801eb80 <_Balloc>
 801e762:	4606      	mov	r6, r0
 801e764:	b928      	cbnz	r0, 801e772 <_dtoa_r+0x97a>
 801e766:	4b84      	ldr	r3, [pc, #528]	@ (801e978 <_dtoa_r+0xb80>)
 801e768:	4602      	mov	r2, r0
 801e76a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801e76e:	f7ff bb5a 	b.w	801de26 <_dtoa_r+0x2e>
 801e772:	692a      	ldr	r2, [r5, #16]
 801e774:	3202      	adds	r2, #2
 801e776:	0092      	lsls	r2, r2, #2
 801e778:	f105 010c 	add.w	r1, r5, #12
 801e77c:	300c      	adds	r0, #12
 801e77e:	f7ff fa84 	bl	801dc8a <memcpy>
 801e782:	2201      	movs	r2, #1
 801e784:	4631      	mov	r1, r6
 801e786:	4658      	mov	r0, fp
 801e788:	f000 fc08 	bl	801ef9c <__lshift>
 801e78c:	f10a 0301 	add.w	r3, sl, #1
 801e790:	9307      	str	r3, [sp, #28]
 801e792:	9b00      	ldr	r3, [sp, #0]
 801e794:	4453      	add	r3, sl
 801e796:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e798:	9b02      	ldr	r3, [sp, #8]
 801e79a:	f003 0301 	and.w	r3, r3, #1
 801e79e:	462f      	mov	r7, r5
 801e7a0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e7a2:	4605      	mov	r5, r0
 801e7a4:	9b07      	ldr	r3, [sp, #28]
 801e7a6:	4621      	mov	r1, r4
 801e7a8:	3b01      	subs	r3, #1
 801e7aa:	4648      	mov	r0, r9
 801e7ac:	9300      	str	r3, [sp, #0]
 801e7ae:	f7ff fa99 	bl	801dce4 <quorem>
 801e7b2:	4639      	mov	r1, r7
 801e7b4:	9002      	str	r0, [sp, #8]
 801e7b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e7ba:	4648      	mov	r0, r9
 801e7bc:	f000 fc5a 	bl	801f074 <__mcmp>
 801e7c0:	462a      	mov	r2, r5
 801e7c2:	9008      	str	r0, [sp, #32]
 801e7c4:	4621      	mov	r1, r4
 801e7c6:	4658      	mov	r0, fp
 801e7c8:	f000 fc70 	bl	801f0ac <__mdiff>
 801e7cc:	68c2      	ldr	r2, [r0, #12]
 801e7ce:	4606      	mov	r6, r0
 801e7d0:	bb02      	cbnz	r2, 801e814 <_dtoa_r+0xa1c>
 801e7d2:	4601      	mov	r1, r0
 801e7d4:	4648      	mov	r0, r9
 801e7d6:	f000 fc4d 	bl	801f074 <__mcmp>
 801e7da:	4602      	mov	r2, r0
 801e7dc:	4631      	mov	r1, r6
 801e7de:	4658      	mov	r0, fp
 801e7e0:	920e      	str	r2, [sp, #56]	@ 0x38
 801e7e2:	f000 fa0d 	bl	801ec00 <_Bfree>
 801e7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e7ea:	9e07      	ldr	r6, [sp, #28]
 801e7ec:	ea43 0102 	orr.w	r1, r3, r2
 801e7f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e7f2:	4319      	orrs	r1, r3
 801e7f4:	d110      	bne.n	801e818 <_dtoa_r+0xa20>
 801e7f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e7fa:	d029      	beq.n	801e850 <_dtoa_r+0xa58>
 801e7fc:	9b08      	ldr	r3, [sp, #32]
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	dd02      	ble.n	801e808 <_dtoa_r+0xa10>
 801e802:	9b02      	ldr	r3, [sp, #8]
 801e804:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801e808:	9b00      	ldr	r3, [sp, #0]
 801e80a:	f883 8000 	strb.w	r8, [r3]
 801e80e:	e63f      	b.n	801e490 <_dtoa_r+0x698>
 801e810:	4628      	mov	r0, r5
 801e812:	e7bb      	b.n	801e78c <_dtoa_r+0x994>
 801e814:	2201      	movs	r2, #1
 801e816:	e7e1      	b.n	801e7dc <_dtoa_r+0x9e4>
 801e818:	9b08      	ldr	r3, [sp, #32]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	db04      	blt.n	801e828 <_dtoa_r+0xa30>
 801e81e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e820:	430b      	orrs	r3, r1
 801e822:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e824:	430b      	orrs	r3, r1
 801e826:	d120      	bne.n	801e86a <_dtoa_r+0xa72>
 801e828:	2a00      	cmp	r2, #0
 801e82a:	dded      	ble.n	801e808 <_dtoa_r+0xa10>
 801e82c:	4649      	mov	r1, r9
 801e82e:	2201      	movs	r2, #1
 801e830:	4658      	mov	r0, fp
 801e832:	f000 fbb3 	bl	801ef9c <__lshift>
 801e836:	4621      	mov	r1, r4
 801e838:	4681      	mov	r9, r0
 801e83a:	f000 fc1b 	bl	801f074 <__mcmp>
 801e83e:	2800      	cmp	r0, #0
 801e840:	dc03      	bgt.n	801e84a <_dtoa_r+0xa52>
 801e842:	d1e1      	bne.n	801e808 <_dtoa_r+0xa10>
 801e844:	f018 0f01 	tst.w	r8, #1
 801e848:	d0de      	beq.n	801e808 <_dtoa_r+0xa10>
 801e84a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e84e:	d1d8      	bne.n	801e802 <_dtoa_r+0xa0a>
 801e850:	9a00      	ldr	r2, [sp, #0]
 801e852:	2339      	movs	r3, #57	@ 0x39
 801e854:	7013      	strb	r3, [r2, #0]
 801e856:	4633      	mov	r3, r6
 801e858:	461e      	mov	r6, r3
 801e85a:	3b01      	subs	r3, #1
 801e85c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801e860:	2a39      	cmp	r2, #57	@ 0x39
 801e862:	d052      	beq.n	801e90a <_dtoa_r+0xb12>
 801e864:	3201      	adds	r2, #1
 801e866:	701a      	strb	r2, [r3, #0]
 801e868:	e612      	b.n	801e490 <_dtoa_r+0x698>
 801e86a:	2a00      	cmp	r2, #0
 801e86c:	dd07      	ble.n	801e87e <_dtoa_r+0xa86>
 801e86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801e872:	d0ed      	beq.n	801e850 <_dtoa_r+0xa58>
 801e874:	9a00      	ldr	r2, [sp, #0]
 801e876:	f108 0301 	add.w	r3, r8, #1
 801e87a:	7013      	strb	r3, [r2, #0]
 801e87c:	e608      	b.n	801e490 <_dtoa_r+0x698>
 801e87e:	9b07      	ldr	r3, [sp, #28]
 801e880:	9a07      	ldr	r2, [sp, #28]
 801e882:	f803 8c01 	strb.w	r8, [r3, #-1]
 801e886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e888:	4293      	cmp	r3, r2
 801e88a:	d028      	beq.n	801e8de <_dtoa_r+0xae6>
 801e88c:	4649      	mov	r1, r9
 801e88e:	2300      	movs	r3, #0
 801e890:	220a      	movs	r2, #10
 801e892:	4658      	mov	r0, fp
 801e894:	f000 f9d6 	bl	801ec44 <__multadd>
 801e898:	42af      	cmp	r7, r5
 801e89a:	4681      	mov	r9, r0
 801e89c:	f04f 0300 	mov.w	r3, #0
 801e8a0:	f04f 020a 	mov.w	r2, #10
 801e8a4:	4639      	mov	r1, r7
 801e8a6:	4658      	mov	r0, fp
 801e8a8:	d107      	bne.n	801e8ba <_dtoa_r+0xac2>
 801e8aa:	f000 f9cb 	bl	801ec44 <__multadd>
 801e8ae:	4607      	mov	r7, r0
 801e8b0:	4605      	mov	r5, r0
 801e8b2:	9b07      	ldr	r3, [sp, #28]
 801e8b4:	3301      	adds	r3, #1
 801e8b6:	9307      	str	r3, [sp, #28]
 801e8b8:	e774      	b.n	801e7a4 <_dtoa_r+0x9ac>
 801e8ba:	f000 f9c3 	bl	801ec44 <__multadd>
 801e8be:	4629      	mov	r1, r5
 801e8c0:	4607      	mov	r7, r0
 801e8c2:	2300      	movs	r3, #0
 801e8c4:	220a      	movs	r2, #10
 801e8c6:	4658      	mov	r0, fp
 801e8c8:	f000 f9bc 	bl	801ec44 <__multadd>
 801e8cc:	4605      	mov	r5, r0
 801e8ce:	e7f0      	b.n	801e8b2 <_dtoa_r+0xaba>
 801e8d0:	9b00      	ldr	r3, [sp, #0]
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	bfcc      	ite	gt
 801e8d6:	461e      	movgt	r6, r3
 801e8d8:	2601      	movle	r6, #1
 801e8da:	4456      	add	r6, sl
 801e8dc:	2700      	movs	r7, #0
 801e8de:	4649      	mov	r1, r9
 801e8e0:	2201      	movs	r2, #1
 801e8e2:	4658      	mov	r0, fp
 801e8e4:	f000 fb5a 	bl	801ef9c <__lshift>
 801e8e8:	4621      	mov	r1, r4
 801e8ea:	4681      	mov	r9, r0
 801e8ec:	f000 fbc2 	bl	801f074 <__mcmp>
 801e8f0:	2800      	cmp	r0, #0
 801e8f2:	dcb0      	bgt.n	801e856 <_dtoa_r+0xa5e>
 801e8f4:	d102      	bne.n	801e8fc <_dtoa_r+0xb04>
 801e8f6:	f018 0f01 	tst.w	r8, #1
 801e8fa:	d1ac      	bne.n	801e856 <_dtoa_r+0xa5e>
 801e8fc:	4633      	mov	r3, r6
 801e8fe:	461e      	mov	r6, r3
 801e900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e904:	2a30      	cmp	r2, #48	@ 0x30
 801e906:	d0fa      	beq.n	801e8fe <_dtoa_r+0xb06>
 801e908:	e5c2      	b.n	801e490 <_dtoa_r+0x698>
 801e90a:	459a      	cmp	sl, r3
 801e90c:	d1a4      	bne.n	801e858 <_dtoa_r+0xa60>
 801e90e:	9b04      	ldr	r3, [sp, #16]
 801e910:	3301      	adds	r3, #1
 801e912:	9304      	str	r3, [sp, #16]
 801e914:	2331      	movs	r3, #49	@ 0x31
 801e916:	f88a 3000 	strb.w	r3, [sl]
 801e91a:	e5b9      	b.n	801e490 <_dtoa_r+0x698>
 801e91c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e91e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801e97c <_dtoa_r+0xb84>
 801e922:	b11b      	cbz	r3, 801e92c <_dtoa_r+0xb34>
 801e924:	f10a 0308 	add.w	r3, sl, #8
 801e928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e92a:	6013      	str	r3, [r2, #0]
 801e92c:	4650      	mov	r0, sl
 801e92e:	b019      	add	sp, #100	@ 0x64
 801e930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e936:	2b01      	cmp	r3, #1
 801e938:	f77f ae37 	ble.w	801e5aa <_dtoa_r+0x7b2>
 801e93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e93e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e940:	2001      	movs	r0, #1
 801e942:	e655      	b.n	801e5f0 <_dtoa_r+0x7f8>
 801e944:	9b00      	ldr	r3, [sp, #0]
 801e946:	2b00      	cmp	r3, #0
 801e948:	f77f aed6 	ble.w	801e6f8 <_dtoa_r+0x900>
 801e94c:	4656      	mov	r6, sl
 801e94e:	4621      	mov	r1, r4
 801e950:	4648      	mov	r0, r9
 801e952:	f7ff f9c7 	bl	801dce4 <quorem>
 801e956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801e95a:	f806 8b01 	strb.w	r8, [r6], #1
 801e95e:	9b00      	ldr	r3, [sp, #0]
 801e960:	eba6 020a 	sub.w	r2, r6, sl
 801e964:	4293      	cmp	r3, r2
 801e966:	ddb3      	ble.n	801e8d0 <_dtoa_r+0xad8>
 801e968:	4649      	mov	r1, r9
 801e96a:	2300      	movs	r3, #0
 801e96c:	220a      	movs	r2, #10
 801e96e:	4658      	mov	r0, fp
 801e970:	f000 f968 	bl	801ec44 <__multadd>
 801e974:	4681      	mov	r9, r0
 801e976:	e7ea      	b.n	801e94e <_dtoa_r+0xb56>
 801e978:	08024621 	.word	0x08024621
 801e97c:	080245bc 	.word	0x080245bc

0801e980 <_free_r>:
 801e980:	b538      	push	{r3, r4, r5, lr}
 801e982:	4605      	mov	r5, r0
 801e984:	2900      	cmp	r1, #0
 801e986:	d041      	beq.n	801ea0c <_free_r+0x8c>
 801e988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e98c:	1f0c      	subs	r4, r1, #4
 801e98e:	2b00      	cmp	r3, #0
 801e990:	bfb8      	it	lt
 801e992:	18e4      	addlt	r4, r4, r3
 801e994:	f000 f8e8 	bl	801eb68 <__malloc_lock>
 801e998:	4a1d      	ldr	r2, [pc, #116]	@ (801ea10 <_free_r+0x90>)
 801e99a:	6813      	ldr	r3, [r2, #0]
 801e99c:	b933      	cbnz	r3, 801e9ac <_free_r+0x2c>
 801e99e:	6063      	str	r3, [r4, #4]
 801e9a0:	6014      	str	r4, [r2, #0]
 801e9a2:	4628      	mov	r0, r5
 801e9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9a8:	f000 b8e4 	b.w	801eb74 <__malloc_unlock>
 801e9ac:	42a3      	cmp	r3, r4
 801e9ae:	d908      	bls.n	801e9c2 <_free_r+0x42>
 801e9b0:	6820      	ldr	r0, [r4, #0]
 801e9b2:	1821      	adds	r1, r4, r0
 801e9b4:	428b      	cmp	r3, r1
 801e9b6:	bf01      	itttt	eq
 801e9b8:	6819      	ldreq	r1, [r3, #0]
 801e9ba:	685b      	ldreq	r3, [r3, #4]
 801e9bc:	1809      	addeq	r1, r1, r0
 801e9be:	6021      	streq	r1, [r4, #0]
 801e9c0:	e7ed      	b.n	801e99e <_free_r+0x1e>
 801e9c2:	461a      	mov	r2, r3
 801e9c4:	685b      	ldr	r3, [r3, #4]
 801e9c6:	b10b      	cbz	r3, 801e9cc <_free_r+0x4c>
 801e9c8:	42a3      	cmp	r3, r4
 801e9ca:	d9fa      	bls.n	801e9c2 <_free_r+0x42>
 801e9cc:	6811      	ldr	r1, [r2, #0]
 801e9ce:	1850      	adds	r0, r2, r1
 801e9d0:	42a0      	cmp	r0, r4
 801e9d2:	d10b      	bne.n	801e9ec <_free_r+0x6c>
 801e9d4:	6820      	ldr	r0, [r4, #0]
 801e9d6:	4401      	add	r1, r0
 801e9d8:	1850      	adds	r0, r2, r1
 801e9da:	4283      	cmp	r3, r0
 801e9dc:	6011      	str	r1, [r2, #0]
 801e9de:	d1e0      	bne.n	801e9a2 <_free_r+0x22>
 801e9e0:	6818      	ldr	r0, [r3, #0]
 801e9e2:	685b      	ldr	r3, [r3, #4]
 801e9e4:	6053      	str	r3, [r2, #4]
 801e9e6:	4408      	add	r0, r1
 801e9e8:	6010      	str	r0, [r2, #0]
 801e9ea:	e7da      	b.n	801e9a2 <_free_r+0x22>
 801e9ec:	d902      	bls.n	801e9f4 <_free_r+0x74>
 801e9ee:	230c      	movs	r3, #12
 801e9f0:	602b      	str	r3, [r5, #0]
 801e9f2:	e7d6      	b.n	801e9a2 <_free_r+0x22>
 801e9f4:	6820      	ldr	r0, [r4, #0]
 801e9f6:	1821      	adds	r1, r4, r0
 801e9f8:	428b      	cmp	r3, r1
 801e9fa:	bf04      	itt	eq
 801e9fc:	6819      	ldreq	r1, [r3, #0]
 801e9fe:	685b      	ldreq	r3, [r3, #4]
 801ea00:	6063      	str	r3, [r4, #4]
 801ea02:	bf04      	itt	eq
 801ea04:	1809      	addeq	r1, r1, r0
 801ea06:	6021      	streq	r1, [r4, #0]
 801ea08:	6054      	str	r4, [r2, #4]
 801ea0a:	e7ca      	b.n	801e9a2 <_free_r+0x22>
 801ea0c:	bd38      	pop	{r3, r4, r5, pc}
 801ea0e:	bf00      	nop
 801ea10:	2000f684 	.word	0x2000f684

0801ea14 <malloc>:
 801ea14:	4b02      	ldr	r3, [pc, #8]	@ (801ea20 <malloc+0xc>)
 801ea16:	4601      	mov	r1, r0
 801ea18:	6818      	ldr	r0, [r3, #0]
 801ea1a:	f000 b825 	b.w	801ea68 <_malloc_r>
 801ea1e:	bf00      	nop
 801ea20:	20000094 	.word	0x20000094

0801ea24 <sbrk_aligned>:
 801ea24:	b570      	push	{r4, r5, r6, lr}
 801ea26:	4e0f      	ldr	r6, [pc, #60]	@ (801ea64 <sbrk_aligned+0x40>)
 801ea28:	460c      	mov	r4, r1
 801ea2a:	6831      	ldr	r1, [r6, #0]
 801ea2c:	4605      	mov	r5, r0
 801ea2e:	b911      	cbnz	r1, 801ea36 <sbrk_aligned+0x12>
 801ea30:	f001 f804 	bl	801fa3c <_sbrk_r>
 801ea34:	6030      	str	r0, [r6, #0]
 801ea36:	4621      	mov	r1, r4
 801ea38:	4628      	mov	r0, r5
 801ea3a:	f000 ffff 	bl	801fa3c <_sbrk_r>
 801ea3e:	1c43      	adds	r3, r0, #1
 801ea40:	d103      	bne.n	801ea4a <sbrk_aligned+0x26>
 801ea42:	f04f 34ff 	mov.w	r4, #4294967295
 801ea46:	4620      	mov	r0, r4
 801ea48:	bd70      	pop	{r4, r5, r6, pc}
 801ea4a:	1cc4      	adds	r4, r0, #3
 801ea4c:	f024 0403 	bic.w	r4, r4, #3
 801ea50:	42a0      	cmp	r0, r4
 801ea52:	d0f8      	beq.n	801ea46 <sbrk_aligned+0x22>
 801ea54:	1a21      	subs	r1, r4, r0
 801ea56:	4628      	mov	r0, r5
 801ea58:	f000 fff0 	bl	801fa3c <_sbrk_r>
 801ea5c:	3001      	adds	r0, #1
 801ea5e:	d1f2      	bne.n	801ea46 <sbrk_aligned+0x22>
 801ea60:	e7ef      	b.n	801ea42 <sbrk_aligned+0x1e>
 801ea62:	bf00      	nop
 801ea64:	2000f680 	.word	0x2000f680

0801ea68 <_malloc_r>:
 801ea68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ea6c:	1ccd      	adds	r5, r1, #3
 801ea6e:	f025 0503 	bic.w	r5, r5, #3
 801ea72:	3508      	adds	r5, #8
 801ea74:	2d0c      	cmp	r5, #12
 801ea76:	bf38      	it	cc
 801ea78:	250c      	movcc	r5, #12
 801ea7a:	2d00      	cmp	r5, #0
 801ea7c:	4606      	mov	r6, r0
 801ea7e:	db01      	blt.n	801ea84 <_malloc_r+0x1c>
 801ea80:	42a9      	cmp	r1, r5
 801ea82:	d904      	bls.n	801ea8e <_malloc_r+0x26>
 801ea84:	230c      	movs	r3, #12
 801ea86:	6033      	str	r3, [r6, #0]
 801ea88:	2000      	movs	r0, #0
 801ea8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ea8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801eb64 <_malloc_r+0xfc>
 801ea92:	f000 f869 	bl	801eb68 <__malloc_lock>
 801ea96:	f8d8 3000 	ldr.w	r3, [r8]
 801ea9a:	461c      	mov	r4, r3
 801ea9c:	bb44      	cbnz	r4, 801eaf0 <_malloc_r+0x88>
 801ea9e:	4629      	mov	r1, r5
 801eaa0:	4630      	mov	r0, r6
 801eaa2:	f7ff ffbf 	bl	801ea24 <sbrk_aligned>
 801eaa6:	1c43      	adds	r3, r0, #1
 801eaa8:	4604      	mov	r4, r0
 801eaaa:	d158      	bne.n	801eb5e <_malloc_r+0xf6>
 801eaac:	f8d8 4000 	ldr.w	r4, [r8]
 801eab0:	4627      	mov	r7, r4
 801eab2:	2f00      	cmp	r7, #0
 801eab4:	d143      	bne.n	801eb3e <_malloc_r+0xd6>
 801eab6:	2c00      	cmp	r4, #0
 801eab8:	d04b      	beq.n	801eb52 <_malloc_r+0xea>
 801eaba:	6823      	ldr	r3, [r4, #0]
 801eabc:	4639      	mov	r1, r7
 801eabe:	4630      	mov	r0, r6
 801eac0:	eb04 0903 	add.w	r9, r4, r3
 801eac4:	f000 ffba 	bl	801fa3c <_sbrk_r>
 801eac8:	4581      	cmp	r9, r0
 801eaca:	d142      	bne.n	801eb52 <_malloc_r+0xea>
 801eacc:	6821      	ldr	r1, [r4, #0]
 801eace:	1a6d      	subs	r5, r5, r1
 801ead0:	4629      	mov	r1, r5
 801ead2:	4630      	mov	r0, r6
 801ead4:	f7ff ffa6 	bl	801ea24 <sbrk_aligned>
 801ead8:	3001      	adds	r0, #1
 801eada:	d03a      	beq.n	801eb52 <_malloc_r+0xea>
 801eadc:	6823      	ldr	r3, [r4, #0]
 801eade:	442b      	add	r3, r5
 801eae0:	6023      	str	r3, [r4, #0]
 801eae2:	f8d8 3000 	ldr.w	r3, [r8]
 801eae6:	685a      	ldr	r2, [r3, #4]
 801eae8:	bb62      	cbnz	r2, 801eb44 <_malloc_r+0xdc>
 801eaea:	f8c8 7000 	str.w	r7, [r8]
 801eaee:	e00f      	b.n	801eb10 <_malloc_r+0xa8>
 801eaf0:	6822      	ldr	r2, [r4, #0]
 801eaf2:	1b52      	subs	r2, r2, r5
 801eaf4:	d420      	bmi.n	801eb38 <_malloc_r+0xd0>
 801eaf6:	2a0b      	cmp	r2, #11
 801eaf8:	d917      	bls.n	801eb2a <_malloc_r+0xc2>
 801eafa:	1961      	adds	r1, r4, r5
 801eafc:	42a3      	cmp	r3, r4
 801eafe:	6025      	str	r5, [r4, #0]
 801eb00:	bf18      	it	ne
 801eb02:	6059      	strne	r1, [r3, #4]
 801eb04:	6863      	ldr	r3, [r4, #4]
 801eb06:	bf08      	it	eq
 801eb08:	f8c8 1000 	streq.w	r1, [r8]
 801eb0c:	5162      	str	r2, [r4, r5]
 801eb0e:	604b      	str	r3, [r1, #4]
 801eb10:	4630      	mov	r0, r6
 801eb12:	f000 f82f 	bl	801eb74 <__malloc_unlock>
 801eb16:	f104 000b 	add.w	r0, r4, #11
 801eb1a:	1d23      	adds	r3, r4, #4
 801eb1c:	f020 0007 	bic.w	r0, r0, #7
 801eb20:	1ac2      	subs	r2, r0, r3
 801eb22:	bf1c      	itt	ne
 801eb24:	1a1b      	subne	r3, r3, r0
 801eb26:	50a3      	strne	r3, [r4, r2]
 801eb28:	e7af      	b.n	801ea8a <_malloc_r+0x22>
 801eb2a:	6862      	ldr	r2, [r4, #4]
 801eb2c:	42a3      	cmp	r3, r4
 801eb2e:	bf0c      	ite	eq
 801eb30:	f8c8 2000 	streq.w	r2, [r8]
 801eb34:	605a      	strne	r2, [r3, #4]
 801eb36:	e7eb      	b.n	801eb10 <_malloc_r+0xa8>
 801eb38:	4623      	mov	r3, r4
 801eb3a:	6864      	ldr	r4, [r4, #4]
 801eb3c:	e7ae      	b.n	801ea9c <_malloc_r+0x34>
 801eb3e:	463c      	mov	r4, r7
 801eb40:	687f      	ldr	r7, [r7, #4]
 801eb42:	e7b6      	b.n	801eab2 <_malloc_r+0x4a>
 801eb44:	461a      	mov	r2, r3
 801eb46:	685b      	ldr	r3, [r3, #4]
 801eb48:	42a3      	cmp	r3, r4
 801eb4a:	d1fb      	bne.n	801eb44 <_malloc_r+0xdc>
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	6053      	str	r3, [r2, #4]
 801eb50:	e7de      	b.n	801eb10 <_malloc_r+0xa8>
 801eb52:	230c      	movs	r3, #12
 801eb54:	6033      	str	r3, [r6, #0]
 801eb56:	4630      	mov	r0, r6
 801eb58:	f000 f80c 	bl	801eb74 <__malloc_unlock>
 801eb5c:	e794      	b.n	801ea88 <_malloc_r+0x20>
 801eb5e:	6005      	str	r5, [r0, #0]
 801eb60:	e7d6      	b.n	801eb10 <_malloc_r+0xa8>
 801eb62:	bf00      	nop
 801eb64:	2000f684 	.word	0x2000f684

0801eb68 <__malloc_lock>:
 801eb68:	4801      	ldr	r0, [pc, #4]	@ (801eb70 <__malloc_lock+0x8>)
 801eb6a:	f7ff b88c 	b.w	801dc86 <__retarget_lock_acquire_recursive>
 801eb6e:	bf00      	nop
 801eb70:	2000f67c 	.word	0x2000f67c

0801eb74 <__malloc_unlock>:
 801eb74:	4801      	ldr	r0, [pc, #4]	@ (801eb7c <__malloc_unlock+0x8>)
 801eb76:	f7ff b887 	b.w	801dc88 <__retarget_lock_release_recursive>
 801eb7a:	bf00      	nop
 801eb7c:	2000f67c 	.word	0x2000f67c

0801eb80 <_Balloc>:
 801eb80:	b570      	push	{r4, r5, r6, lr}
 801eb82:	69c6      	ldr	r6, [r0, #28]
 801eb84:	4604      	mov	r4, r0
 801eb86:	460d      	mov	r5, r1
 801eb88:	b976      	cbnz	r6, 801eba8 <_Balloc+0x28>
 801eb8a:	2010      	movs	r0, #16
 801eb8c:	f7ff ff42 	bl	801ea14 <malloc>
 801eb90:	4602      	mov	r2, r0
 801eb92:	61e0      	str	r0, [r4, #28]
 801eb94:	b920      	cbnz	r0, 801eba0 <_Balloc+0x20>
 801eb96:	4b18      	ldr	r3, [pc, #96]	@ (801ebf8 <_Balloc+0x78>)
 801eb98:	4818      	ldr	r0, [pc, #96]	@ (801ebfc <_Balloc+0x7c>)
 801eb9a:	216b      	movs	r1, #107	@ 0x6b
 801eb9c:	f7ff f884 	bl	801dca8 <__assert_func>
 801eba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eba4:	6006      	str	r6, [r0, #0]
 801eba6:	60c6      	str	r6, [r0, #12]
 801eba8:	69e6      	ldr	r6, [r4, #28]
 801ebaa:	68f3      	ldr	r3, [r6, #12]
 801ebac:	b183      	cbz	r3, 801ebd0 <_Balloc+0x50>
 801ebae:	69e3      	ldr	r3, [r4, #28]
 801ebb0:	68db      	ldr	r3, [r3, #12]
 801ebb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ebb6:	b9b8      	cbnz	r0, 801ebe8 <_Balloc+0x68>
 801ebb8:	2101      	movs	r1, #1
 801ebba:	fa01 f605 	lsl.w	r6, r1, r5
 801ebbe:	1d72      	adds	r2, r6, #5
 801ebc0:	0092      	lsls	r2, r2, #2
 801ebc2:	4620      	mov	r0, r4
 801ebc4:	f000 ff51 	bl	801fa6a <_calloc_r>
 801ebc8:	b160      	cbz	r0, 801ebe4 <_Balloc+0x64>
 801ebca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ebce:	e00e      	b.n	801ebee <_Balloc+0x6e>
 801ebd0:	2221      	movs	r2, #33	@ 0x21
 801ebd2:	2104      	movs	r1, #4
 801ebd4:	4620      	mov	r0, r4
 801ebd6:	f000 ff48 	bl	801fa6a <_calloc_r>
 801ebda:	69e3      	ldr	r3, [r4, #28]
 801ebdc:	60f0      	str	r0, [r6, #12]
 801ebde:	68db      	ldr	r3, [r3, #12]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d1e4      	bne.n	801ebae <_Balloc+0x2e>
 801ebe4:	2000      	movs	r0, #0
 801ebe6:	bd70      	pop	{r4, r5, r6, pc}
 801ebe8:	6802      	ldr	r2, [r0, #0]
 801ebea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ebee:	2300      	movs	r3, #0
 801ebf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ebf4:	e7f7      	b.n	801ebe6 <_Balloc+0x66>
 801ebf6:	bf00      	nop
 801ebf8:	080243dc 	.word	0x080243dc
 801ebfc:	08024632 	.word	0x08024632

0801ec00 <_Bfree>:
 801ec00:	b570      	push	{r4, r5, r6, lr}
 801ec02:	69c6      	ldr	r6, [r0, #28]
 801ec04:	4605      	mov	r5, r0
 801ec06:	460c      	mov	r4, r1
 801ec08:	b976      	cbnz	r6, 801ec28 <_Bfree+0x28>
 801ec0a:	2010      	movs	r0, #16
 801ec0c:	f7ff ff02 	bl	801ea14 <malloc>
 801ec10:	4602      	mov	r2, r0
 801ec12:	61e8      	str	r0, [r5, #28]
 801ec14:	b920      	cbnz	r0, 801ec20 <_Bfree+0x20>
 801ec16:	4b09      	ldr	r3, [pc, #36]	@ (801ec3c <_Bfree+0x3c>)
 801ec18:	4809      	ldr	r0, [pc, #36]	@ (801ec40 <_Bfree+0x40>)
 801ec1a:	218f      	movs	r1, #143	@ 0x8f
 801ec1c:	f7ff f844 	bl	801dca8 <__assert_func>
 801ec20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ec24:	6006      	str	r6, [r0, #0]
 801ec26:	60c6      	str	r6, [r0, #12]
 801ec28:	b13c      	cbz	r4, 801ec3a <_Bfree+0x3a>
 801ec2a:	69eb      	ldr	r3, [r5, #28]
 801ec2c:	6862      	ldr	r2, [r4, #4]
 801ec2e:	68db      	ldr	r3, [r3, #12]
 801ec30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ec34:	6021      	str	r1, [r4, #0]
 801ec36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ec3a:	bd70      	pop	{r4, r5, r6, pc}
 801ec3c:	080243dc 	.word	0x080243dc
 801ec40:	08024632 	.word	0x08024632

0801ec44 <__multadd>:
 801ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec48:	690d      	ldr	r5, [r1, #16]
 801ec4a:	4607      	mov	r7, r0
 801ec4c:	460c      	mov	r4, r1
 801ec4e:	461e      	mov	r6, r3
 801ec50:	f101 0c14 	add.w	ip, r1, #20
 801ec54:	2000      	movs	r0, #0
 801ec56:	f8dc 3000 	ldr.w	r3, [ip]
 801ec5a:	b299      	uxth	r1, r3
 801ec5c:	fb02 6101 	mla	r1, r2, r1, r6
 801ec60:	0c1e      	lsrs	r6, r3, #16
 801ec62:	0c0b      	lsrs	r3, r1, #16
 801ec64:	fb02 3306 	mla	r3, r2, r6, r3
 801ec68:	b289      	uxth	r1, r1
 801ec6a:	3001      	adds	r0, #1
 801ec6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ec70:	4285      	cmp	r5, r0
 801ec72:	f84c 1b04 	str.w	r1, [ip], #4
 801ec76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ec7a:	dcec      	bgt.n	801ec56 <__multadd+0x12>
 801ec7c:	b30e      	cbz	r6, 801ecc2 <__multadd+0x7e>
 801ec7e:	68a3      	ldr	r3, [r4, #8]
 801ec80:	42ab      	cmp	r3, r5
 801ec82:	dc19      	bgt.n	801ecb8 <__multadd+0x74>
 801ec84:	6861      	ldr	r1, [r4, #4]
 801ec86:	4638      	mov	r0, r7
 801ec88:	3101      	adds	r1, #1
 801ec8a:	f7ff ff79 	bl	801eb80 <_Balloc>
 801ec8e:	4680      	mov	r8, r0
 801ec90:	b928      	cbnz	r0, 801ec9e <__multadd+0x5a>
 801ec92:	4602      	mov	r2, r0
 801ec94:	4b0c      	ldr	r3, [pc, #48]	@ (801ecc8 <__multadd+0x84>)
 801ec96:	480d      	ldr	r0, [pc, #52]	@ (801eccc <__multadd+0x88>)
 801ec98:	21ba      	movs	r1, #186	@ 0xba
 801ec9a:	f7ff f805 	bl	801dca8 <__assert_func>
 801ec9e:	6922      	ldr	r2, [r4, #16]
 801eca0:	3202      	adds	r2, #2
 801eca2:	f104 010c 	add.w	r1, r4, #12
 801eca6:	0092      	lsls	r2, r2, #2
 801eca8:	300c      	adds	r0, #12
 801ecaa:	f7fe ffee 	bl	801dc8a <memcpy>
 801ecae:	4621      	mov	r1, r4
 801ecb0:	4638      	mov	r0, r7
 801ecb2:	f7ff ffa5 	bl	801ec00 <_Bfree>
 801ecb6:	4644      	mov	r4, r8
 801ecb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ecbc:	3501      	adds	r5, #1
 801ecbe:	615e      	str	r6, [r3, #20]
 801ecc0:	6125      	str	r5, [r4, #16]
 801ecc2:	4620      	mov	r0, r4
 801ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ecc8:	08024621 	.word	0x08024621
 801eccc:	08024632 	.word	0x08024632

0801ecd0 <__hi0bits>:
 801ecd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ecd4:	4603      	mov	r3, r0
 801ecd6:	bf36      	itet	cc
 801ecd8:	0403      	lslcc	r3, r0, #16
 801ecda:	2000      	movcs	r0, #0
 801ecdc:	2010      	movcc	r0, #16
 801ecde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ece2:	bf3c      	itt	cc
 801ece4:	021b      	lslcc	r3, r3, #8
 801ece6:	3008      	addcc	r0, #8
 801ece8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ecec:	bf3c      	itt	cc
 801ecee:	011b      	lslcc	r3, r3, #4
 801ecf0:	3004      	addcc	r0, #4
 801ecf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ecf6:	bf3c      	itt	cc
 801ecf8:	009b      	lslcc	r3, r3, #2
 801ecfa:	3002      	addcc	r0, #2
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	db05      	blt.n	801ed0c <__hi0bits+0x3c>
 801ed00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ed04:	f100 0001 	add.w	r0, r0, #1
 801ed08:	bf08      	it	eq
 801ed0a:	2020      	moveq	r0, #32
 801ed0c:	4770      	bx	lr

0801ed0e <__lo0bits>:
 801ed0e:	6803      	ldr	r3, [r0, #0]
 801ed10:	4602      	mov	r2, r0
 801ed12:	f013 0007 	ands.w	r0, r3, #7
 801ed16:	d00b      	beq.n	801ed30 <__lo0bits+0x22>
 801ed18:	07d9      	lsls	r1, r3, #31
 801ed1a:	d421      	bmi.n	801ed60 <__lo0bits+0x52>
 801ed1c:	0798      	lsls	r0, r3, #30
 801ed1e:	bf49      	itett	mi
 801ed20:	085b      	lsrmi	r3, r3, #1
 801ed22:	089b      	lsrpl	r3, r3, #2
 801ed24:	2001      	movmi	r0, #1
 801ed26:	6013      	strmi	r3, [r2, #0]
 801ed28:	bf5c      	itt	pl
 801ed2a:	6013      	strpl	r3, [r2, #0]
 801ed2c:	2002      	movpl	r0, #2
 801ed2e:	4770      	bx	lr
 801ed30:	b299      	uxth	r1, r3
 801ed32:	b909      	cbnz	r1, 801ed38 <__lo0bits+0x2a>
 801ed34:	0c1b      	lsrs	r3, r3, #16
 801ed36:	2010      	movs	r0, #16
 801ed38:	b2d9      	uxtb	r1, r3
 801ed3a:	b909      	cbnz	r1, 801ed40 <__lo0bits+0x32>
 801ed3c:	3008      	adds	r0, #8
 801ed3e:	0a1b      	lsrs	r3, r3, #8
 801ed40:	0719      	lsls	r1, r3, #28
 801ed42:	bf04      	itt	eq
 801ed44:	091b      	lsreq	r3, r3, #4
 801ed46:	3004      	addeq	r0, #4
 801ed48:	0799      	lsls	r1, r3, #30
 801ed4a:	bf04      	itt	eq
 801ed4c:	089b      	lsreq	r3, r3, #2
 801ed4e:	3002      	addeq	r0, #2
 801ed50:	07d9      	lsls	r1, r3, #31
 801ed52:	d403      	bmi.n	801ed5c <__lo0bits+0x4e>
 801ed54:	085b      	lsrs	r3, r3, #1
 801ed56:	f100 0001 	add.w	r0, r0, #1
 801ed5a:	d003      	beq.n	801ed64 <__lo0bits+0x56>
 801ed5c:	6013      	str	r3, [r2, #0]
 801ed5e:	4770      	bx	lr
 801ed60:	2000      	movs	r0, #0
 801ed62:	4770      	bx	lr
 801ed64:	2020      	movs	r0, #32
 801ed66:	4770      	bx	lr

0801ed68 <__i2b>:
 801ed68:	b510      	push	{r4, lr}
 801ed6a:	460c      	mov	r4, r1
 801ed6c:	2101      	movs	r1, #1
 801ed6e:	f7ff ff07 	bl	801eb80 <_Balloc>
 801ed72:	4602      	mov	r2, r0
 801ed74:	b928      	cbnz	r0, 801ed82 <__i2b+0x1a>
 801ed76:	4b05      	ldr	r3, [pc, #20]	@ (801ed8c <__i2b+0x24>)
 801ed78:	4805      	ldr	r0, [pc, #20]	@ (801ed90 <__i2b+0x28>)
 801ed7a:	f240 1145 	movw	r1, #325	@ 0x145
 801ed7e:	f7fe ff93 	bl	801dca8 <__assert_func>
 801ed82:	2301      	movs	r3, #1
 801ed84:	6144      	str	r4, [r0, #20]
 801ed86:	6103      	str	r3, [r0, #16]
 801ed88:	bd10      	pop	{r4, pc}
 801ed8a:	bf00      	nop
 801ed8c:	08024621 	.word	0x08024621
 801ed90:	08024632 	.word	0x08024632

0801ed94 <__multiply>:
 801ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed98:	4614      	mov	r4, r2
 801ed9a:	690a      	ldr	r2, [r1, #16]
 801ed9c:	6923      	ldr	r3, [r4, #16]
 801ed9e:	429a      	cmp	r2, r3
 801eda0:	bfa8      	it	ge
 801eda2:	4623      	movge	r3, r4
 801eda4:	460f      	mov	r7, r1
 801eda6:	bfa4      	itt	ge
 801eda8:	460c      	movge	r4, r1
 801edaa:	461f      	movge	r7, r3
 801edac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801edb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801edb4:	68a3      	ldr	r3, [r4, #8]
 801edb6:	6861      	ldr	r1, [r4, #4]
 801edb8:	eb0a 0609 	add.w	r6, sl, r9
 801edbc:	42b3      	cmp	r3, r6
 801edbe:	b085      	sub	sp, #20
 801edc0:	bfb8      	it	lt
 801edc2:	3101      	addlt	r1, #1
 801edc4:	f7ff fedc 	bl	801eb80 <_Balloc>
 801edc8:	b930      	cbnz	r0, 801edd8 <__multiply+0x44>
 801edca:	4602      	mov	r2, r0
 801edcc:	4b44      	ldr	r3, [pc, #272]	@ (801eee0 <__multiply+0x14c>)
 801edce:	4845      	ldr	r0, [pc, #276]	@ (801eee4 <__multiply+0x150>)
 801edd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801edd4:	f7fe ff68 	bl	801dca8 <__assert_func>
 801edd8:	f100 0514 	add.w	r5, r0, #20
 801eddc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ede0:	462b      	mov	r3, r5
 801ede2:	2200      	movs	r2, #0
 801ede4:	4543      	cmp	r3, r8
 801ede6:	d321      	bcc.n	801ee2c <__multiply+0x98>
 801ede8:	f107 0114 	add.w	r1, r7, #20
 801edec:	f104 0214 	add.w	r2, r4, #20
 801edf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801edf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801edf8:	9302      	str	r3, [sp, #8]
 801edfa:	1b13      	subs	r3, r2, r4
 801edfc:	3b15      	subs	r3, #21
 801edfe:	f023 0303 	bic.w	r3, r3, #3
 801ee02:	3304      	adds	r3, #4
 801ee04:	f104 0715 	add.w	r7, r4, #21
 801ee08:	42ba      	cmp	r2, r7
 801ee0a:	bf38      	it	cc
 801ee0c:	2304      	movcc	r3, #4
 801ee0e:	9301      	str	r3, [sp, #4]
 801ee10:	9b02      	ldr	r3, [sp, #8]
 801ee12:	9103      	str	r1, [sp, #12]
 801ee14:	428b      	cmp	r3, r1
 801ee16:	d80c      	bhi.n	801ee32 <__multiply+0x9e>
 801ee18:	2e00      	cmp	r6, #0
 801ee1a:	dd03      	ble.n	801ee24 <__multiply+0x90>
 801ee1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	d05b      	beq.n	801eedc <__multiply+0x148>
 801ee24:	6106      	str	r6, [r0, #16]
 801ee26:	b005      	add	sp, #20
 801ee28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee2c:	f843 2b04 	str.w	r2, [r3], #4
 801ee30:	e7d8      	b.n	801ede4 <__multiply+0x50>
 801ee32:	f8b1 a000 	ldrh.w	sl, [r1]
 801ee36:	f1ba 0f00 	cmp.w	sl, #0
 801ee3a:	d024      	beq.n	801ee86 <__multiply+0xf2>
 801ee3c:	f104 0e14 	add.w	lr, r4, #20
 801ee40:	46a9      	mov	r9, r5
 801ee42:	f04f 0c00 	mov.w	ip, #0
 801ee46:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ee4a:	f8d9 3000 	ldr.w	r3, [r9]
 801ee4e:	fa1f fb87 	uxth.w	fp, r7
 801ee52:	b29b      	uxth	r3, r3
 801ee54:	fb0a 330b 	mla	r3, sl, fp, r3
 801ee58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ee5c:	f8d9 7000 	ldr.w	r7, [r9]
 801ee60:	4463      	add	r3, ip
 801ee62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ee66:	fb0a c70b 	mla	r7, sl, fp, ip
 801ee6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ee6e:	b29b      	uxth	r3, r3
 801ee70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ee74:	4572      	cmp	r2, lr
 801ee76:	f849 3b04 	str.w	r3, [r9], #4
 801ee7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ee7e:	d8e2      	bhi.n	801ee46 <__multiply+0xb2>
 801ee80:	9b01      	ldr	r3, [sp, #4]
 801ee82:	f845 c003 	str.w	ip, [r5, r3]
 801ee86:	9b03      	ldr	r3, [sp, #12]
 801ee88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ee8c:	3104      	adds	r1, #4
 801ee8e:	f1b9 0f00 	cmp.w	r9, #0
 801ee92:	d021      	beq.n	801eed8 <__multiply+0x144>
 801ee94:	682b      	ldr	r3, [r5, #0]
 801ee96:	f104 0c14 	add.w	ip, r4, #20
 801ee9a:	46ae      	mov	lr, r5
 801ee9c:	f04f 0a00 	mov.w	sl, #0
 801eea0:	f8bc b000 	ldrh.w	fp, [ip]
 801eea4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801eea8:	fb09 770b 	mla	r7, r9, fp, r7
 801eeac:	4457      	add	r7, sl
 801eeae:	b29b      	uxth	r3, r3
 801eeb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801eeb4:	f84e 3b04 	str.w	r3, [lr], #4
 801eeb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 801eebc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801eec0:	f8be 3000 	ldrh.w	r3, [lr]
 801eec4:	fb09 330a 	mla	r3, r9, sl, r3
 801eec8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801eecc:	4562      	cmp	r2, ip
 801eece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801eed2:	d8e5      	bhi.n	801eea0 <__multiply+0x10c>
 801eed4:	9f01      	ldr	r7, [sp, #4]
 801eed6:	51eb      	str	r3, [r5, r7]
 801eed8:	3504      	adds	r5, #4
 801eeda:	e799      	b.n	801ee10 <__multiply+0x7c>
 801eedc:	3e01      	subs	r6, #1
 801eede:	e79b      	b.n	801ee18 <__multiply+0x84>
 801eee0:	08024621 	.word	0x08024621
 801eee4:	08024632 	.word	0x08024632

0801eee8 <__pow5mult>:
 801eee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eeec:	4615      	mov	r5, r2
 801eeee:	f012 0203 	ands.w	r2, r2, #3
 801eef2:	4607      	mov	r7, r0
 801eef4:	460e      	mov	r6, r1
 801eef6:	d007      	beq.n	801ef08 <__pow5mult+0x20>
 801eef8:	4c25      	ldr	r4, [pc, #148]	@ (801ef90 <__pow5mult+0xa8>)
 801eefa:	3a01      	subs	r2, #1
 801eefc:	2300      	movs	r3, #0
 801eefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ef02:	f7ff fe9f 	bl	801ec44 <__multadd>
 801ef06:	4606      	mov	r6, r0
 801ef08:	10ad      	asrs	r5, r5, #2
 801ef0a:	d03d      	beq.n	801ef88 <__pow5mult+0xa0>
 801ef0c:	69fc      	ldr	r4, [r7, #28]
 801ef0e:	b97c      	cbnz	r4, 801ef30 <__pow5mult+0x48>
 801ef10:	2010      	movs	r0, #16
 801ef12:	f7ff fd7f 	bl	801ea14 <malloc>
 801ef16:	4602      	mov	r2, r0
 801ef18:	61f8      	str	r0, [r7, #28]
 801ef1a:	b928      	cbnz	r0, 801ef28 <__pow5mult+0x40>
 801ef1c:	4b1d      	ldr	r3, [pc, #116]	@ (801ef94 <__pow5mult+0xac>)
 801ef1e:	481e      	ldr	r0, [pc, #120]	@ (801ef98 <__pow5mult+0xb0>)
 801ef20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ef24:	f7fe fec0 	bl	801dca8 <__assert_func>
 801ef28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ef2c:	6004      	str	r4, [r0, #0]
 801ef2e:	60c4      	str	r4, [r0, #12]
 801ef30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ef34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ef38:	b94c      	cbnz	r4, 801ef4e <__pow5mult+0x66>
 801ef3a:	f240 2171 	movw	r1, #625	@ 0x271
 801ef3e:	4638      	mov	r0, r7
 801ef40:	f7ff ff12 	bl	801ed68 <__i2b>
 801ef44:	2300      	movs	r3, #0
 801ef46:	f8c8 0008 	str.w	r0, [r8, #8]
 801ef4a:	4604      	mov	r4, r0
 801ef4c:	6003      	str	r3, [r0, #0]
 801ef4e:	f04f 0900 	mov.w	r9, #0
 801ef52:	07eb      	lsls	r3, r5, #31
 801ef54:	d50a      	bpl.n	801ef6c <__pow5mult+0x84>
 801ef56:	4631      	mov	r1, r6
 801ef58:	4622      	mov	r2, r4
 801ef5a:	4638      	mov	r0, r7
 801ef5c:	f7ff ff1a 	bl	801ed94 <__multiply>
 801ef60:	4631      	mov	r1, r6
 801ef62:	4680      	mov	r8, r0
 801ef64:	4638      	mov	r0, r7
 801ef66:	f7ff fe4b 	bl	801ec00 <_Bfree>
 801ef6a:	4646      	mov	r6, r8
 801ef6c:	106d      	asrs	r5, r5, #1
 801ef6e:	d00b      	beq.n	801ef88 <__pow5mult+0xa0>
 801ef70:	6820      	ldr	r0, [r4, #0]
 801ef72:	b938      	cbnz	r0, 801ef84 <__pow5mult+0x9c>
 801ef74:	4622      	mov	r2, r4
 801ef76:	4621      	mov	r1, r4
 801ef78:	4638      	mov	r0, r7
 801ef7a:	f7ff ff0b 	bl	801ed94 <__multiply>
 801ef7e:	6020      	str	r0, [r4, #0]
 801ef80:	f8c0 9000 	str.w	r9, [r0]
 801ef84:	4604      	mov	r4, r0
 801ef86:	e7e4      	b.n	801ef52 <__pow5mult+0x6a>
 801ef88:	4630      	mov	r0, r6
 801ef8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef8e:	bf00      	nop
 801ef90:	0802468c 	.word	0x0802468c
 801ef94:	080243dc 	.word	0x080243dc
 801ef98:	08024632 	.word	0x08024632

0801ef9c <__lshift>:
 801ef9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801efa0:	460c      	mov	r4, r1
 801efa2:	6849      	ldr	r1, [r1, #4]
 801efa4:	6923      	ldr	r3, [r4, #16]
 801efa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801efaa:	68a3      	ldr	r3, [r4, #8]
 801efac:	4607      	mov	r7, r0
 801efae:	4691      	mov	r9, r2
 801efb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801efb4:	f108 0601 	add.w	r6, r8, #1
 801efb8:	42b3      	cmp	r3, r6
 801efba:	db0b      	blt.n	801efd4 <__lshift+0x38>
 801efbc:	4638      	mov	r0, r7
 801efbe:	f7ff fddf 	bl	801eb80 <_Balloc>
 801efc2:	4605      	mov	r5, r0
 801efc4:	b948      	cbnz	r0, 801efda <__lshift+0x3e>
 801efc6:	4602      	mov	r2, r0
 801efc8:	4b28      	ldr	r3, [pc, #160]	@ (801f06c <__lshift+0xd0>)
 801efca:	4829      	ldr	r0, [pc, #164]	@ (801f070 <__lshift+0xd4>)
 801efcc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801efd0:	f7fe fe6a 	bl	801dca8 <__assert_func>
 801efd4:	3101      	adds	r1, #1
 801efd6:	005b      	lsls	r3, r3, #1
 801efd8:	e7ee      	b.n	801efb8 <__lshift+0x1c>
 801efda:	2300      	movs	r3, #0
 801efdc:	f100 0114 	add.w	r1, r0, #20
 801efe0:	f100 0210 	add.w	r2, r0, #16
 801efe4:	4618      	mov	r0, r3
 801efe6:	4553      	cmp	r3, sl
 801efe8:	db33      	blt.n	801f052 <__lshift+0xb6>
 801efea:	6920      	ldr	r0, [r4, #16]
 801efec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801eff0:	f104 0314 	add.w	r3, r4, #20
 801eff4:	f019 091f 	ands.w	r9, r9, #31
 801eff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801effc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f000:	d02b      	beq.n	801f05a <__lshift+0xbe>
 801f002:	f1c9 0e20 	rsb	lr, r9, #32
 801f006:	468a      	mov	sl, r1
 801f008:	2200      	movs	r2, #0
 801f00a:	6818      	ldr	r0, [r3, #0]
 801f00c:	fa00 f009 	lsl.w	r0, r0, r9
 801f010:	4310      	orrs	r0, r2
 801f012:	f84a 0b04 	str.w	r0, [sl], #4
 801f016:	f853 2b04 	ldr.w	r2, [r3], #4
 801f01a:	459c      	cmp	ip, r3
 801f01c:	fa22 f20e 	lsr.w	r2, r2, lr
 801f020:	d8f3      	bhi.n	801f00a <__lshift+0x6e>
 801f022:	ebac 0304 	sub.w	r3, ip, r4
 801f026:	3b15      	subs	r3, #21
 801f028:	f023 0303 	bic.w	r3, r3, #3
 801f02c:	3304      	adds	r3, #4
 801f02e:	f104 0015 	add.w	r0, r4, #21
 801f032:	4584      	cmp	ip, r0
 801f034:	bf38      	it	cc
 801f036:	2304      	movcc	r3, #4
 801f038:	50ca      	str	r2, [r1, r3]
 801f03a:	b10a      	cbz	r2, 801f040 <__lshift+0xa4>
 801f03c:	f108 0602 	add.w	r6, r8, #2
 801f040:	3e01      	subs	r6, #1
 801f042:	4638      	mov	r0, r7
 801f044:	612e      	str	r6, [r5, #16]
 801f046:	4621      	mov	r1, r4
 801f048:	f7ff fdda 	bl	801ec00 <_Bfree>
 801f04c:	4628      	mov	r0, r5
 801f04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f052:	f842 0f04 	str.w	r0, [r2, #4]!
 801f056:	3301      	adds	r3, #1
 801f058:	e7c5      	b.n	801efe6 <__lshift+0x4a>
 801f05a:	3904      	subs	r1, #4
 801f05c:	f853 2b04 	ldr.w	r2, [r3], #4
 801f060:	f841 2f04 	str.w	r2, [r1, #4]!
 801f064:	459c      	cmp	ip, r3
 801f066:	d8f9      	bhi.n	801f05c <__lshift+0xc0>
 801f068:	e7ea      	b.n	801f040 <__lshift+0xa4>
 801f06a:	bf00      	nop
 801f06c:	08024621 	.word	0x08024621
 801f070:	08024632 	.word	0x08024632

0801f074 <__mcmp>:
 801f074:	690a      	ldr	r2, [r1, #16]
 801f076:	4603      	mov	r3, r0
 801f078:	6900      	ldr	r0, [r0, #16]
 801f07a:	1a80      	subs	r0, r0, r2
 801f07c:	b530      	push	{r4, r5, lr}
 801f07e:	d10e      	bne.n	801f09e <__mcmp+0x2a>
 801f080:	3314      	adds	r3, #20
 801f082:	3114      	adds	r1, #20
 801f084:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f088:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f08c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f090:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f094:	4295      	cmp	r5, r2
 801f096:	d003      	beq.n	801f0a0 <__mcmp+0x2c>
 801f098:	d205      	bcs.n	801f0a6 <__mcmp+0x32>
 801f09a:	f04f 30ff 	mov.w	r0, #4294967295
 801f09e:	bd30      	pop	{r4, r5, pc}
 801f0a0:	42a3      	cmp	r3, r4
 801f0a2:	d3f3      	bcc.n	801f08c <__mcmp+0x18>
 801f0a4:	e7fb      	b.n	801f09e <__mcmp+0x2a>
 801f0a6:	2001      	movs	r0, #1
 801f0a8:	e7f9      	b.n	801f09e <__mcmp+0x2a>
	...

0801f0ac <__mdiff>:
 801f0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0b0:	4689      	mov	r9, r1
 801f0b2:	4606      	mov	r6, r0
 801f0b4:	4611      	mov	r1, r2
 801f0b6:	4648      	mov	r0, r9
 801f0b8:	4614      	mov	r4, r2
 801f0ba:	f7ff ffdb 	bl	801f074 <__mcmp>
 801f0be:	1e05      	subs	r5, r0, #0
 801f0c0:	d112      	bne.n	801f0e8 <__mdiff+0x3c>
 801f0c2:	4629      	mov	r1, r5
 801f0c4:	4630      	mov	r0, r6
 801f0c6:	f7ff fd5b 	bl	801eb80 <_Balloc>
 801f0ca:	4602      	mov	r2, r0
 801f0cc:	b928      	cbnz	r0, 801f0da <__mdiff+0x2e>
 801f0ce:	4b3f      	ldr	r3, [pc, #252]	@ (801f1cc <__mdiff+0x120>)
 801f0d0:	f240 2137 	movw	r1, #567	@ 0x237
 801f0d4:	483e      	ldr	r0, [pc, #248]	@ (801f1d0 <__mdiff+0x124>)
 801f0d6:	f7fe fde7 	bl	801dca8 <__assert_func>
 801f0da:	2301      	movs	r3, #1
 801f0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f0e0:	4610      	mov	r0, r2
 801f0e2:	b003      	add	sp, #12
 801f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0e8:	bfbc      	itt	lt
 801f0ea:	464b      	movlt	r3, r9
 801f0ec:	46a1      	movlt	r9, r4
 801f0ee:	4630      	mov	r0, r6
 801f0f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f0f4:	bfba      	itte	lt
 801f0f6:	461c      	movlt	r4, r3
 801f0f8:	2501      	movlt	r5, #1
 801f0fa:	2500      	movge	r5, #0
 801f0fc:	f7ff fd40 	bl	801eb80 <_Balloc>
 801f100:	4602      	mov	r2, r0
 801f102:	b918      	cbnz	r0, 801f10c <__mdiff+0x60>
 801f104:	4b31      	ldr	r3, [pc, #196]	@ (801f1cc <__mdiff+0x120>)
 801f106:	f240 2145 	movw	r1, #581	@ 0x245
 801f10a:	e7e3      	b.n	801f0d4 <__mdiff+0x28>
 801f10c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f110:	6926      	ldr	r6, [r4, #16]
 801f112:	60c5      	str	r5, [r0, #12]
 801f114:	f109 0310 	add.w	r3, r9, #16
 801f118:	f109 0514 	add.w	r5, r9, #20
 801f11c:	f104 0e14 	add.w	lr, r4, #20
 801f120:	f100 0b14 	add.w	fp, r0, #20
 801f124:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f128:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f12c:	9301      	str	r3, [sp, #4]
 801f12e:	46d9      	mov	r9, fp
 801f130:	f04f 0c00 	mov.w	ip, #0
 801f134:	9b01      	ldr	r3, [sp, #4]
 801f136:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f13a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f13e:	9301      	str	r3, [sp, #4]
 801f140:	fa1f f38a 	uxth.w	r3, sl
 801f144:	4619      	mov	r1, r3
 801f146:	b283      	uxth	r3, r0
 801f148:	1acb      	subs	r3, r1, r3
 801f14a:	0c00      	lsrs	r0, r0, #16
 801f14c:	4463      	add	r3, ip
 801f14e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f152:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f156:	b29b      	uxth	r3, r3
 801f158:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f15c:	4576      	cmp	r6, lr
 801f15e:	f849 3b04 	str.w	r3, [r9], #4
 801f162:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f166:	d8e5      	bhi.n	801f134 <__mdiff+0x88>
 801f168:	1b33      	subs	r3, r6, r4
 801f16a:	3b15      	subs	r3, #21
 801f16c:	f023 0303 	bic.w	r3, r3, #3
 801f170:	3415      	adds	r4, #21
 801f172:	3304      	adds	r3, #4
 801f174:	42a6      	cmp	r6, r4
 801f176:	bf38      	it	cc
 801f178:	2304      	movcc	r3, #4
 801f17a:	441d      	add	r5, r3
 801f17c:	445b      	add	r3, fp
 801f17e:	461e      	mov	r6, r3
 801f180:	462c      	mov	r4, r5
 801f182:	4544      	cmp	r4, r8
 801f184:	d30e      	bcc.n	801f1a4 <__mdiff+0xf8>
 801f186:	f108 0103 	add.w	r1, r8, #3
 801f18a:	1b49      	subs	r1, r1, r5
 801f18c:	f021 0103 	bic.w	r1, r1, #3
 801f190:	3d03      	subs	r5, #3
 801f192:	45a8      	cmp	r8, r5
 801f194:	bf38      	it	cc
 801f196:	2100      	movcc	r1, #0
 801f198:	440b      	add	r3, r1
 801f19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f19e:	b191      	cbz	r1, 801f1c6 <__mdiff+0x11a>
 801f1a0:	6117      	str	r7, [r2, #16]
 801f1a2:	e79d      	b.n	801f0e0 <__mdiff+0x34>
 801f1a4:	f854 1b04 	ldr.w	r1, [r4], #4
 801f1a8:	46e6      	mov	lr, ip
 801f1aa:	0c08      	lsrs	r0, r1, #16
 801f1ac:	fa1c fc81 	uxtah	ip, ip, r1
 801f1b0:	4471      	add	r1, lr
 801f1b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f1b6:	b289      	uxth	r1, r1
 801f1b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f1bc:	f846 1b04 	str.w	r1, [r6], #4
 801f1c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f1c4:	e7dd      	b.n	801f182 <__mdiff+0xd6>
 801f1c6:	3f01      	subs	r7, #1
 801f1c8:	e7e7      	b.n	801f19a <__mdiff+0xee>
 801f1ca:	bf00      	nop
 801f1cc:	08024621 	.word	0x08024621
 801f1d0:	08024632 	.word	0x08024632

0801f1d4 <__d2b>:
 801f1d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f1d8:	460f      	mov	r7, r1
 801f1da:	2101      	movs	r1, #1
 801f1dc:	ec59 8b10 	vmov	r8, r9, d0
 801f1e0:	4616      	mov	r6, r2
 801f1e2:	f7ff fccd 	bl	801eb80 <_Balloc>
 801f1e6:	4604      	mov	r4, r0
 801f1e8:	b930      	cbnz	r0, 801f1f8 <__d2b+0x24>
 801f1ea:	4602      	mov	r2, r0
 801f1ec:	4b23      	ldr	r3, [pc, #140]	@ (801f27c <__d2b+0xa8>)
 801f1ee:	4824      	ldr	r0, [pc, #144]	@ (801f280 <__d2b+0xac>)
 801f1f0:	f240 310f 	movw	r1, #783	@ 0x30f
 801f1f4:	f7fe fd58 	bl	801dca8 <__assert_func>
 801f1f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f1fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f200:	b10d      	cbz	r5, 801f206 <__d2b+0x32>
 801f202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f206:	9301      	str	r3, [sp, #4]
 801f208:	f1b8 0300 	subs.w	r3, r8, #0
 801f20c:	d023      	beq.n	801f256 <__d2b+0x82>
 801f20e:	4668      	mov	r0, sp
 801f210:	9300      	str	r3, [sp, #0]
 801f212:	f7ff fd7c 	bl	801ed0e <__lo0bits>
 801f216:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f21a:	b1d0      	cbz	r0, 801f252 <__d2b+0x7e>
 801f21c:	f1c0 0320 	rsb	r3, r0, #32
 801f220:	fa02 f303 	lsl.w	r3, r2, r3
 801f224:	430b      	orrs	r3, r1
 801f226:	40c2      	lsrs	r2, r0
 801f228:	6163      	str	r3, [r4, #20]
 801f22a:	9201      	str	r2, [sp, #4]
 801f22c:	9b01      	ldr	r3, [sp, #4]
 801f22e:	61a3      	str	r3, [r4, #24]
 801f230:	2b00      	cmp	r3, #0
 801f232:	bf0c      	ite	eq
 801f234:	2201      	moveq	r2, #1
 801f236:	2202      	movne	r2, #2
 801f238:	6122      	str	r2, [r4, #16]
 801f23a:	b1a5      	cbz	r5, 801f266 <__d2b+0x92>
 801f23c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f240:	4405      	add	r5, r0
 801f242:	603d      	str	r5, [r7, #0]
 801f244:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f248:	6030      	str	r0, [r6, #0]
 801f24a:	4620      	mov	r0, r4
 801f24c:	b003      	add	sp, #12
 801f24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f252:	6161      	str	r1, [r4, #20]
 801f254:	e7ea      	b.n	801f22c <__d2b+0x58>
 801f256:	a801      	add	r0, sp, #4
 801f258:	f7ff fd59 	bl	801ed0e <__lo0bits>
 801f25c:	9b01      	ldr	r3, [sp, #4]
 801f25e:	6163      	str	r3, [r4, #20]
 801f260:	3020      	adds	r0, #32
 801f262:	2201      	movs	r2, #1
 801f264:	e7e8      	b.n	801f238 <__d2b+0x64>
 801f266:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f26a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f26e:	6038      	str	r0, [r7, #0]
 801f270:	6918      	ldr	r0, [r3, #16]
 801f272:	f7ff fd2d 	bl	801ecd0 <__hi0bits>
 801f276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f27a:	e7e5      	b.n	801f248 <__d2b+0x74>
 801f27c:	08024621 	.word	0x08024621
 801f280:	08024632 	.word	0x08024632

0801f284 <__ssputs_r>:
 801f284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f288:	688e      	ldr	r6, [r1, #8]
 801f28a:	461f      	mov	r7, r3
 801f28c:	42be      	cmp	r6, r7
 801f28e:	680b      	ldr	r3, [r1, #0]
 801f290:	4682      	mov	sl, r0
 801f292:	460c      	mov	r4, r1
 801f294:	4690      	mov	r8, r2
 801f296:	d82d      	bhi.n	801f2f4 <__ssputs_r+0x70>
 801f298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f29c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f2a0:	d026      	beq.n	801f2f0 <__ssputs_r+0x6c>
 801f2a2:	6965      	ldr	r5, [r4, #20]
 801f2a4:	6909      	ldr	r1, [r1, #16]
 801f2a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f2aa:	eba3 0901 	sub.w	r9, r3, r1
 801f2ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f2b2:	1c7b      	adds	r3, r7, #1
 801f2b4:	444b      	add	r3, r9
 801f2b6:	106d      	asrs	r5, r5, #1
 801f2b8:	429d      	cmp	r5, r3
 801f2ba:	bf38      	it	cc
 801f2bc:	461d      	movcc	r5, r3
 801f2be:	0553      	lsls	r3, r2, #21
 801f2c0:	d527      	bpl.n	801f312 <__ssputs_r+0x8e>
 801f2c2:	4629      	mov	r1, r5
 801f2c4:	f7ff fbd0 	bl	801ea68 <_malloc_r>
 801f2c8:	4606      	mov	r6, r0
 801f2ca:	b360      	cbz	r0, 801f326 <__ssputs_r+0xa2>
 801f2cc:	6921      	ldr	r1, [r4, #16]
 801f2ce:	464a      	mov	r2, r9
 801f2d0:	f7fe fcdb 	bl	801dc8a <memcpy>
 801f2d4:	89a3      	ldrh	r3, [r4, #12]
 801f2d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f2de:	81a3      	strh	r3, [r4, #12]
 801f2e0:	6126      	str	r6, [r4, #16]
 801f2e2:	6165      	str	r5, [r4, #20]
 801f2e4:	444e      	add	r6, r9
 801f2e6:	eba5 0509 	sub.w	r5, r5, r9
 801f2ea:	6026      	str	r6, [r4, #0]
 801f2ec:	60a5      	str	r5, [r4, #8]
 801f2ee:	463e      	mov	r6, r7
 801f2f0:	42be      	cmp	r6, r7
 801f2f2:	d900      	bls.n	801f2f6 <__ssputs_r+0x72>
 801f2f4:	463e      	mov	r6, r7
 801f2f6:	6820      	ldr	r0, [r4, #0]
 801f2f8:	4632      	mov	r2, r6
 801f2fa:	4641      	mov	r1, r8
 801f2fc:	f7fe fbbc 	bl	801da78 <memmove>
 801f300:	68a3      	ldr	r3, [r4, #8]
 801f302:	1b9b      	subs	r3, r3, r6
 801f304:	60a3      	str	r3, [r4, #8]
 801f306:	6823      	ldr	r3, [r4, #0]
 801f308:	4433      	add	r3, r6
 801f30a:	6023      	str	r3, [r4, #0]
 801f30c:	2000      	movs	r0, #0
 801f30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f312:	462a      	mov	r2, r5
 801f314:	f000 fbcf 	bl	801fab6 <_realloc_r>
 801f318:	4606      	mov	r6, r0
 801f31a:	2800      	cmp	r0, #0
 801f31c:	d1e0      	bne.n	801f2e0 <__ssputs_r+0x5c>
 801f31e:	6921      	ldr	r1, [r4, #16]
 801f320:	4650      	mov	r0, sl
 801f322:	f7ff fb2d 	bl	801e980 <_free_r>
 801f326:	230c      	movs	r3, #12
 801f328:	f8ca 3000 	str.w	r3, [sl]
 801f32c:	89a3      	ldrh	r3, [r4, #12]
 801f32e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f332:	81a3      	strh	r3, [r4, #12]
 801f334:	f04f 30ff 	mov.w	r0, #4294967295
 801f338:	e7e9      	b.n	801f30e <__ssputs_r+0x8a>
	...

0801f33c <_svfiprintf_r>:
 801f33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f340:	4698      	mov	r8, r3
 801f342:	898b      	ldrh	r3, [r1, #12]
 801f344:	061b      	lsls	r3, r3, #24
 801f346:	b09d      	sub	sp, #116	@ 0x74
 801f348:	4607      	mov	r7, r0
 801f34a:	460d      	mov	r5, r1
 801f34c:	4614      	mov	r4, r2
 801f34e:	d510      	bpl.n	801f372 <_svfiprintf_r+0x36>
 801f350:	690b      	ldr	r3, [r1, #16]
 801f352:	b973      	cbnz	r3, 801f372 <_svfiprintf_r+0x36>
 801f354:	2140      	movs	r1, #64	@ 0x40
 801f356:	f7ff fb87 	bl	801ea68 <_malloc_r>
 801f35a:	6028      	str	r0, [r5, #0]
 801f35c:	6128      	str	r0, [r5, #16]
 801f35e:	b930      	cbnz	r0, 801f36e <_svfiprintf_r+0x32>
 801f360:	230c      	movs	r3, #12
 801f362:	603b      	str	r3, [r7, #0]
 801f364:	f04f 30ff 	mov.w	r0, #4294967295
 801f368:	b01d      	add	sp, #116	@ 0x74
 801f36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f36e:	2340      	movs	r3, #64	@ 0x40
 801f370:	616b      	str	r3, [r5, #20]
 801f372:	2300      	movs	r3, #0
 801f374:	9309      	str	r3, [sp, #36]	@ 0x24
 801f376:	2320      	movs	r3, #32
 801f378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f37c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f380:	2330      	movs	r3, #48	@ 0x30
 801f382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f520 <_svfiprintf_r+0x1e4>
 801f386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f38a:	f04f 0901 	mov.w	r9, #1
 801f38e:	4623      	mov	r3, r4
 801f390:	469a      	mov	sl, r3
 801f392:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f396:	b10a      	cbz	r2, 801f39c <_svfiprintf_r+0x60>
 801f398:	2a25      	cmp	r2, #37	@ 0x25
 801f39a:	d1f9      	bne.n	801f390 <_svfiprintf_r+0x54>
 801f39c:	ebba 0b04 	subs.w	fp, sl, r4
 801f3a0:	d00b      	beq.n	801f3ba <_svfiprintf_r+0x7e>
 801f3a2:	465b      	mov	r3, fp
 801f3a4:	4622      	mov	r2, r4
 801f3a6:	4629      	mov	r1, r5
 801f3a8:	4638      	mov	r0, r7
 801f3aa:	f7ff ff6b 	bl	801f284 <__ssputs_r>
 801f3ae:	3001      	adds	r0, #1
 801f3b0:	f000 80a7 	beq.w	801f502 <_svfiprintf_r+0x1c6>
 801f3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3b6:	445a      	add	r2, fp
 801f3b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801f3ba:	f89a 3000 	ldrb.w	r3, [sl]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	f000 809f 	beq.w	801f502 <_svfiprintf_r+0x1c6>
 801f3c4:	2300      	movs	r3, #0
 801f3c6:	f04f 32ff 	mov.w	r2, #4294967295
 801f3ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f3ce:	f10a 0a01 	add.w	sl, sl, #1
 801f3d2:	9304      	str	r3, [sp, #16]
 801f3d4:	9307      	str	r3, [sp, #28]
 801f3d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f3da:	931a      	str	r3, [sp, #104]	@ 0x68
 801f3dc:	4654      	mov	r4, sl
 801f3de:	2205      	movs	r2, #5
 801f3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3e4:	484e      	ldr	r0, [pc, #312]	@ (801f520 <_svfiprintf_r+0x1e4>)
 801f3e6:	f7e0 ff23 	bl	8000230 <memchr>
 801f3ea:	9a04      	ldr	r2, [sp, #16]
 801f3ec:	b9d8      	cbnz	r0, 801f426 <_svfiprintf_r+0xea>
 801f3ee:	06d0      	lsls	r0, r2, #27
 801f3f0:	bf44      	itt	mi
 801f3f2:	2320      	movmi	r3, #32
 801f3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f3f8:	0711      	lsls	r1, r2, #28
 801f3fa:	bf44      	itt	mi
 801f3fc:	232b      	movmi	r3, #43	@ 0x2b
 801f3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f402:	f89a 3000 	ldrb.w	r3, [sl]
 801f406:	2b2a      	cmp	r3, #42	@ 0x2a
 801f408:	d015      	beq.n	801f436 <_svfiprintf_r+0xfa>
 801f40a:	9a07      	ldr	r2, [sp, #28]
 801f40c:	4654      	mov	r4, sl
 801f40e:	2000      	movs	r0, #0
 801f410:	f04f 0c0a 	mov.w	ip, #10
 801f414:	4621      	mov	r1, r4
 801f416:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f41a:	3b30      	subs	r3, #48	@ 0x30
 801f41c:	2b09      	cmp	r3, #9
 801f41e:	d94b      	bls.n	801f4b8 <_svfiprintf_r+0x17c>
 801f420:	b1b0      	cbz	r0, 801f450 <_svfiprintf_r+0x114>
 801f422:	9207      	str	r2, [sp, #28]
 801f424:	e014      	b.n	801f450 <_svfiprintf_r+0x114>
 801f426:	eba0 0308 	sub.w	r3, r0, r8
 801f42a:	fa09 f303 	lsl.w	r3, r9, r3
 801f42e:	4313      	orrs	r3, r2
 801f430:	9304      	str	r3, [sp, #16]
 801f432:	46a2      	mov	sl, r4
 801f434:	e7d2      	b.n	801f3dc <_svfiprintf_r+0xa0>
 801f436:	9b03      	ldr	r3, [sp, #12]
 801f438:	1d19      	adds	r1, r3, #4
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	9103      	str	r1, [sp, #12]
 801f43e:	2b00      	cmp	r3, #0
 801f440:	bfbb      	ittet	lt
 801f442:	425b      	neglt	r3, r3
 801f444:	f042 0202 	orrlt.w	r2, r2, #2
 801f448:	9307      	strge	r3, [sp, #28]
 801f44a:	9307      	strlt	r3, [sp, #28]
 801f44c:	bfb8      	it	lt
 801f44e:	9204      	strlt	r2, [sp, #16]
 801f450:	7823      	ldrb	r3, [r4, #0]
 801f452:	2b2e      	cmp	r3, #46	@ 0x2e
 801f454:	d10a      	bne.n	801f46c <_svfiprintf_r+0x130>
 801f456:	7863      	ldrb	r3, [r4, #1]
 801f458:	2b2a      	cmp	r3, #42	@ 0x2a
 801f45a:	d132      	bne.n	801f4c2 <_svfiprintf_r+0x186>
 801f45c:	9b03      	ldr	r3, [sp, #12]
 801f45e:	1d1a      	adds	r2, r3, #4
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	9203      	str	r2, [sp, #12]
 801f464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f468:	3402      	adds	r4, #2
 801f46a:	9305      	str	r3, [sp, #20]
 801f46c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f530 <_svfiprintf_r+0x1f4>
 801f470:	7821      	ldrb	r1, [r4, #0]
 801f472:	2203      	movs	r2, #3
 801f474:	4650      	mov	r0, sl
 801f476:	f7e0 fedb 	bl	8000230 <memchr>
 801f47a:	b138      	cbz	r0, 801f48c <_svfiprintf_r+0x150>
 801f47c:	9b04      	ldr	r3, [sp, #16]
 801f47e:	eba0 000a 	sub.w	r0, r0, sl
 801f482:	2240      	movs	r2, #64	@ 0x40
 801f484:	4082      	lsls	r2, r0
 801f486:	4313      	orrs	r3, r2
 801f488:	3401      	adds	r4, #1
 801f48a:	9304      	str	r3, [sp, #16]
 801f48c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f490:	4824      	ldr	r0, [pc, #144]	@ (801f524 <_svfiprintf_r+0x1e8>)
 801f492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f496:	2206      	movs	r2, #6
 801f498:	f7e0 feca 	bl	8000230 <memchr>
 801f49c:	2800      	cmp	r0, #0
 801f49e:	d036      	beq.n	801f50e <_svfiprintf_r+0x1d2>
 801f4a0:	4b21      	ldr	r3, [pc, #132]	@ (801f528 <_svfiprintf_r+0x1ec>)
 801f4a2:	bb1b      	cbnz	r3, 801f4ec <_svfiprintf_r+0x1b0>
 801f4a4:	9b03      	ldr	r3, [sp, #12]
 801f4a6:	3307      	adds	r3, #7
 801f4a8:	f023 0307 	bic.w	r3, r3, #7
 801f4ac:	3308      	adds	r3, #8
 801f4ae:	9303      	str	r3, [sp, #12]
 801f4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4b2:	4433      	add	r3, r6
 801f4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4b6:	e76a      	b.n	801f38e <_svfiprintf_r+0x52>
 801f4b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801f4bc:	460c      	mov	r4, r1
 801f4be:	2001      	movs	r0, #1
 801f4c0:	e7a8      	b.n	801f414 <_svfiprintf_r+0xd8>
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	3401      	adds	r4, #1
 801f4c6:	9305      	str	r3, [sp, #20]
 801f4c8:	4619      	mov	r1, r3
 801f4ca:	f04f 0c0a 	mov.w	ip, #10
 801f4ce:	4620      	mov	r0, r4
 801f4d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f4d4:	3a30      	subs	r2, #48	@ 0x30
 801f4d6:	2a09      	cmp	r2, #9
 801f4d8:	d903      	bls.n	801f4e2 <_svfiprintf_r+0x1a6>
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d0c6      	beq.n	801f46c <_svfiprintf_r+0x130>
 801f4de:	9105      	str	r1, [sp, #20]
 801f4e0:	e7c4      	b.n	801f46c <_svfiprintf_r+0x130>
 801f4e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801f4e6:	4604      	mov	r4, r0
 801f4e8:	2301      	movs	r3, #1
 801f4ea:	e7f0      	b.n	801f4ce <_svfiprintf_r+0x192>
 801f4ec:	ab03      	add	r3, sp, #12
 801f4ee:	9300      	str	r3, [sp, #0]
 801f4f0:	462a      	mov	r2, r5
 801f4f2:	4b0e      	ldr	r3, [pc, #56]	@ (801f52c <_svfiprintf_r+0x1f0>)
 801f4f4:	a904      	add	r1, sp, #16
 801f4f6:	4638      	mov	r0, r7
 801f4f8:	f7fd fccc 	bl	801ce94 <_printf_float>
 801f4fc:	1c42      	adds	r2, r0, #1
 801f4fe:	4606      	mov	r6, r0
 801f500:	d1d6      	bne.n	801f4b0 <_svfiprintf_r+0x174>
 801f502:	89ab      	ldrh	r3, [r5, #12]
 801f504:	065b      	lsls	r3, r3, #25
 801f506:	f53f af2d 	bmi.w	801f364 <_svfiprintf_r+0x28>
 801f50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f50c:	e72c      	b.n	801f368 <_svfiprintf_r+0x2c>
 801f50e:	ab03      	add	r3, sp, #12
 801f510:	9300      	str	r3, [sp, #0]
 801f512:	462a      	mov	r2, r5
 801f514:	4b05      	ldr	r3, [pc, #20]	@ (801f52c <_svfiprintf_r+0x1f0>)
 801f516:	a904      	add	r1, sp, #16
 801f518:	4638      	mov	r0, r7
 801f51a:	f7fd ff53 	bl	801d3c4 <_printf_i>
 801f51e:	e7ed      	b.n	801f4fc <_svfiprintf_r+0x1c0>
 801f520:	08024788 	.word	0x08024788
 801f524:	08024792 	.word	0x08024792
 801f528:	0801ce95 	.word	0x0801ce95
 801f52c:	0801f285 	.word	0x0801f285
 801f530:	0802478e 	.word	0x0802478e

0801f534 <__sfputc_r>:
 801f534:	6893      	ldr	r3, [r2, #8]
 801f536:	3b01      	subs	r3, #1
 801f538:	2b00      	cmp	r3, #0
 801f53a:	b410      	push	{r4}
 801f53c:	6093      	str	r3, [r2, #8]
 801f53e:	da08      	bge.n	801f552 <__sfputc_r+0x1e>
 801f540:	6994      	ldr	r4, [r2, #24]
 801f542:	42a3      	cmp	r3, r4
 801f544:	db01      	blt.n	801f54a <__sfputc_r+0x16>
 801f546:	290a      	cmp	r1, #10
 801f548:	d103      	bne.n	801f552 <__sfputc_r+0x1e>
 801f54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f54e:	f7fe b9ee 	b.w	801d92e <__swbuf_r>
 801f552:	6813      	ldr	r3, [r2, #0]
 801f554:	1c58      	adds	r0, r3, #1
 801f556:	6010      	str	r0, [r2, #0]
 801f558:	7019      	strb	r1, [r3, #0]
 801f55a:	4608      	mov	r0, r1
 801f55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f560:	4770      	bx	lr

0801f562 <__sfputs_r>:
 801f562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f564:	4606      	mov	r6, r0
 801f566:	460f      	mov	r7, r1
 801f568:	4614      	mov	r4, r2
 801f56a:	18d5      	adds	r5, r2, r3
 801f56c:	42ac      	cmp	r4, r5
 801f56e:	d101      	bne.n	801f574 <__sfputs_r+0x12>
 801f570:	2000      	movs	r0, #0
 801f572:	e007      	b.n	801f584 <__sfputs_r+0x22>
 801f574:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f578:	463a      	mov	r2, r7
 801f57a:	4630      	mov	r0, r6
 801f57c:	f7ff ffda 	bl	801f534 <__sfputc_r>
 801f580:	1c43      	adds	r3, r0, #1
 801f582:	d1f3      	bne.n	801f56c <__sfputs_r+0xa>
 801f584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f588 <_vfiprintf_r>:
 801f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f58c:	460d      	mov	r5, r1
 801f58e:	b09d      	sub	sp, #116	@ 0x74
 801f590:	4614      	mov	r4, r2
 801f592:	4698      	mov	r8, r3
 801f594:	4606      	mov	r6, r0
 801f596:	b118      	cbz	r0, 801f5a0 <_vfiprintf_r+0x18>
 801f598:	6a03      	ldr	r3, [r0, #32]
 801f59a:	b90b      	cbnz	r3, 801f5a0 <_vfiprintf_r+0x18>
 801f59c:	f7fe f8be 	bl	801d71c <__sinit>
 801f5a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f5a2:	07d9      	lsls	r1, r3, #31
 801f5a4:	d405      	bmi.n	801f5b2 <_vfiprintf_r+0x2a>
 801f5a6:	89ab      	ldrh	r3, [r5, #12]
 801f5a8:	059a      	lsls	r2, r3, #22
 801f5aa:	d402      	bmi.n	801f5b2 <_vfiprintf_r+0x2a>
 801f5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f5ae:	f7fe fb6a 	bl	801dc86 <__retarget_lock_acquire_recursive>
 801f5b2:	89ab      	ldrh	r3, [r5, #12]
 801f5b4:	071b      	lsls	r3, r3, #28
 801f5b6:	d501      	bpl.n	801f5bc <_vfiprintf_r+0x34>
 801f5b8:	692b      	ldr	r3, [r5, #16]
 801f5ba:	b99b      	cbnz	r3, 801f5e4 <_vfiprintf_r+0x5c>
 801f5bc:	4629      	mov	r1, r5
 801f5be:	4630      	mov	r0, r6
 801f5c0:	f7fe f9f4 	bl	801d9ac <__swsetup_r>
 801f5c4:	b170      	cbz	r0, 801f5e4 <_vfiprintf_r+0x5c>
 801f5c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f5c8:	07dc      	lsls	r4, r3, #31
 801f5ca:	d504      	bpl.n	801f5d6 <_vfiprintf_r+0x4e>
 801f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 801f5d0:	b01d      	add	sp, #116	@ 0x74
 801f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5d6:	89ab      	ldrh	r3, [r5, #12]
 801f5d8:	0598      	lsls	r0, r3, #22
 801f5da:	d4f7      	bmi.n	801f5cc <_vfiprintf_r+0x44>
 801f5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f5de:	f7fe fb53 	bl	801dc88 <__retarget_lock_release_recursive>
 801f5e2:	e7f3      	b.n	801f5cc <_vfiprintf_r+0x44>
 801f5e4:	2300      	movs	r3, #0
 801f5e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f5e8:	2320      	movs	r3, #32
 801f5ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f5ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801f5f2:	2330      	movs	r3, #48	@ 0x30
 801f5f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f7a4 <_vfiprintf_r+0x21c>
 801f5f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f5fc:	f04f 0901 	mov.w	r9, #1
 801f600:	4623      	mov	r3, r4
 801f602:	469a      	mov	sl, r3
 801f604:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f608:	b10a      	cbz	r2, 801f60e <_vfiprintf_r+0x86>
 801f60a:	2a25      	cmp	r2, #37	@ 0x25
 801f60c:	d1f9      	bne.n	801f602 <_vfiprintf_r+0x7a>
 801f60e:	ebba 0b04 	subs.w	fp, sl, r4
 801f612:	d00b      	beq.n	801f62c <_vfiprintf_r+0xa4>
 801f614:	465b      	mov	r3, fp
 801f616:	4622      	mov	r2, r4
 801f618:	4629      	mov	r1, r5
 801f61a:	4630      	mov	r0, r6
 801f61c:	f7ff ffa1 	bl	801f562 <__sfputs_r>
 801f620:	3001      	adds	r0, #1
 801f622:	f000 80a7 	beq.w	801f774 <_vfiprintf_r+0x1ec>
 801f626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f628:	445a      	add	r2, fp
 801f62a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f62c:	f89a 3000 	ldrb.w	r3, [sl]
 801f630:	2b00      	cmp	r3, #0
 801f632:	f000 809f 	beq.w	801f774 <_vfiprintf_r+0x1ec>
 801f636:	2300      	movs	r3, #0
 801f638:	f04f 32ff 	mov.w	r2, #4294967295
 801f63c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f640:	f10a 0a01 	add.w	sl, sl, #1
 801f644:	9304      	str	r3, [sp, #16]
 801f646:	9307      	str	r3, [sp, #28]
 801f648:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f64c:	931a      	str	r3, [sp, #104]	@ 0x68
 801f64e:	4654      	mov	r4, sl
 801f650:	2205      	movs	r2, #5
 801f652:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f656:	4853      	ldr	r0, [pc, #332]	@ (801f7a4 <_vfiprintf_r+0x21c>)
 801f658:	f7e0 fdea 	bl	8000230 <memchr>
 801f65c:	9a04      	ldr	r2, [sp, #16]
 801f65e:	b9d8      	cbnz	r0, 801f698 <_vfiprintf_r+0x110>
 801f660:	06d1      	lsls	r1, r2, #27
 801f662:	bf44      	itt	mi
 801f664:	2320      	movmi	r3, #32
 801f666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f66a:	0713      	lsls	r3, r2, #28
 801f66c:	bf44      	itt	mi
 801f66e:	232b      	movmi	r3, #43	@ 0x2b
 801f670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f674:	f89a 3000 	ldrb.w	r3, [sl]
 801f678:	2b2a      	cmp	r3, #42	@ 0x2a
 801f67a:	d015      	beq.n	801f6a8 <_vfiprintf_r+0x120>
 801f67c:	9a07      	ldr	r2, [sp, #28]
 801f67e:	4654      	mov	r4, sl
 801f680:	2000      	movs	r0, #0
 801f682:	f04f 0c0a 	mov.w	ip, #10
 801f686:	4621      	mov	r1, r4
 801f688:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f68c:	3b30      	subs	r3, #48	@ 0x30
 801f68e:	2b09      	cmp	r3, #9
 801f690:	d94b      	bls.n	801f72a <_vfiprintf_r+0x1a2>
 801f692:	b1b0      	cbz	r0, 801f6c2 <_vfiprintf_r+0x13a>
 801f694:	9207      	str	r2, [sp, #28]
 801f696:	e014      	b.n	801f6c2 <_vfiprintf_r+0x13a>
 801f698:	eba0 0308 	sub.w	r3, r0, r8
 801f69c:	fa09 f303 	lsl.w	r3, r9, r3
 801f6a0:	4313      	orrs	r3, r2
 801f6a2:	9304      	str	r3, [sp, #16]
 801f6a4:	46a2      	mov	sl, r4
 801f6a6:	e7d2      	b.n	801f64e <_vfiprintf_r+0xc6>
 801f6a8:	9b03      	ldr	r3, [sp, #12]
 801f6aa:	1d19      	adds	r1, r3, #4
 801f6ac:	681b      	ldr	r3, [r3, #0]
 801f6ae:	9103      	str	r1, [sp, #12]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	bfbb      	ittet	lt
 801f6b4:	425b      	neglt	r3, r3
 801f6b6:	f042 0202 	orrlt.w	r2, r2, #2
 801f6ba:	9307      	strge	r3, [sp, #28]
 801f6bc:	9307      	strlt	r3, [sp, #28]
 801f6be:	bfb8      	it	lt
 801f6c0:	9204      	strlt	r2, [sp, #16]
 801f6c2:	7823      	ldrb	r3, [r4, #0]
 801f6c4:	2b2e      	cmp	r3, #46	@ 0x2e
 801f6c6:	d10a      	bne.n	801f6de <_vfiprintf_r+0x156>
 801f6c8:	7863      	ldrb	r3, [r4, #1]
 801f6ca:	2b2a      	cmp	r3, #42	@ 0x2a
 801f6cc:	d132      	bne.n	801f734 <_vfiprintf_r+0x1ac>
 801f6ce:	9b03      	ldr	r3, [sp, #12]
 801f6d0:	1d1a      	adds	r2, r3, #4
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	9203      	str	r2, [sp, #12]
 801f6d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f6da:	3402      	adds	r4, #2
 801f6dc:	9305      	str	r3, [sp, #20]
 801f6de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f7b4 <_vfiprintf_r+0x22c>
 801f6e2:	7821      	ldrb	r1, [r4, #0]
 801f6e4:	2203      	movs	r2, #3
 801f6e6:	4650      	mov	r0, sl
 801f6e8:	f7e0 fda2 	bl	8000230 <memchr>
 801f6ec:	b138      	cbz	r0, 801f6fe <_vfiprintf_r+0x176>
 801f6ee:	9b04      	ldr	r3, [sp, #16]
 801f6f0:	eba0 000a 	sub.w	r0, r0, sl
 801f6f4:	2240      	movs	r2, #64	@ 0x40
 801f6f6:	4082      	lsls	r2, r0
 801f6f8:	4313      	orrs	r3, r2
 801f6fa:	3401      	adds	r4, #1
 801f6fc:	9304      	str	r3, [sp, #16]
 801f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f702:	4829      	ldr	r0, [pc, #164]	@ (801f7a8 <_vfiprintf_r+0x220>)
 801f704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f708:	2206      	movs	r2, #6
 801f70a:	f7e0 fd91 	bl	8000230 <memchr>
 801f70e:	2800      	cmp	r0, #0
 801f710:	d03f      	beq.n	801f792 <_vfiprintf_r+0x20a>
 801f712:	4b26      	ldr	r3, [pc, #152]	@ (801f7ac <_vfiprintf_r+0x224>)
 801f714:	bb1b      	cbnz	r3, 801f75e <_vfiprintf_r+0x1d6>
 801f716:	9b03      	ldr	r3, [sp, #12]
 801f718:	3307      	adds	r3, #7
 801f71a:	f023 0307 	bic.w	r3, r3, #7
 801f71e:	3308      	adds	r3, #8
 801f720:	9303      	str	r3, [sp, #12]
 801f722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f724:	443b      	add	r3, r7
 801f726:	9309      	str	r3, [sp, #36]	@ 0x24
 801f728:	e76a      	b.n	801f600 <_vfiprintf_r+0x78>
 801f72a:	fb0c 3202 	mla	r2, ip, r2, r3
 801f72e:	460c      	mov	r4, r1
 801f730:	2001      	movs	r0, #1
 801f732:	e7a8      	b.n	801f686 <_vfiprintf_r+0xfe>
 801f734:	2300      	movs	r3, #0
 801f736:	3401      	adds	r4, #1
 801f738:	9305      	str	r3, [sp, #20]
 801f73a:	4619      	mov	r1, r3
 801f73c:	f04f 0c0a 	mov.w	ip, #10
 801f740:	4620      	mov	r0, r4
 801f742:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f746:	3a30      	subs	r2, #48	@ 0x30
 801f748:	2a09      	cmp	r2, #9
 801f74a:	d903      	bls.n	801f754 <_vfiprintf_r+0x1cc>
 801f74c:	2b00      	cmp	r3, #0
 801f74e:	d0c6      	beq.n	801f6de <_vfiprintf_r+0x156>
 801f750:	9105      	str	r1, [sp, #20]
 801f752:	e7c4      	b.n	801f6de <_vfiprintf_r+0x156>
 801f754:	fb0c 2101 	mla	r1, ip, r1, r2
 801f758:	4604      	mov	r4, r0
 801f75a:	2301      	movs	r3, #1
 801f75c:	e7f0      	b.n	801f740 <_vfiprintf_r+0x1b8>
 801f75e:	ab03      	add	r3, sp, #12
 801f760:	9300      	str	r3, [sp, #0]
 801f762:	462a      	mov	r2, r5
 801f764:	4b12      	ldr	r3, [pc, #72]	@ (801f7b0 <_vfiprintf_r+0x228>)
 801f766:	a904      	add	r1, sp, #16
 801f768:	4630      	mov	r0, r6
 801f76a:	f7fd fb93 	bl	801ce94 <_printf_float>
 801f76e:	4607      	mov	r7, r0
 801f770:	1c78      	adds	r0, r7, #1
 801f772:	d1d6      	bne.n	801f722 <_vfiprintf_r+0x19a>
 801f774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f776:	07d9      	lsls	r1, r3, #31
 801f778:	d405      	bmi.n	801f786 <_vfiprintf_r+0x1fe>
 801f77a:	89ab      	ldrh	r3, [r5, #12]
 801f77c:	059a      	lsls	r2, r3, #22
 801f77e:	d402      	bmi.n	801f786 <_vfiprintf_r+0x1fe>
 801f780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f782:	f7fe fa81 	bl	801dc88 <__retarget_lock_release_recursive>
 801f786:	89ab      	ldrh	r3, [r5, #12]
 801f788:	065b      	lsls	r3, r3, #25
 801f78a:	f53f af1f 	bmi.w	801f5cc <_vfiprintf_r+0x44>
 801f78e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f790:	e71e      	b.n	801f5d0 <_vfiprintf_r+0x48>
 801f792:	ab03      	add	r3, sp, #12
 801f794:	9300      	str	r3, [sp, #0]
 801f796:	462a      	mov	r2, r5
 801f798:	4b05      	ldr	r3, [pc, #20]	@ (801f7b0 <_vfiprintf_r+0x228>)
 801f79a:	a904      	add	r1, sp, #16
 801f79c:	4630      	mov	r0, r6
 801f79e:	f7fd fe11 	bl	801d3c4 <_printf_i>
 801f7a2:	e7e4      	b.n	801f76e <_vfiprintf_r+0x1e6>
 801f7a4:	08024788 	.word	0x08024788
 801f7a8:	08024792 	.word	0x08024792
 801f7ac:	0801ce95 	.word	0x0801ce95
 801f7b0:	0801f563 	.word	0x0801f563
 801f7b4:	0802478e 	.word	0x0802478e

0801f7b8 <__sflush_r>:
 801f7b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7c0:	0716      	lsls	r6, r2, #28
 801f7c2:	4605      	mov	r5, r0
 801f7c4:	460c      	mov	r4, r1
 801f7c6:	d454      	bmi.n	801f872 <__sflush_r+0xba>
 801f7c8:	684b      	ldr	r3, [r1, #4]
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	dc02      	bgt.n	801f7d4 <__sflush_r+0x1c>
 801f7ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f7d0:	2b00      	cmp	r3, #0
 801f7d2:	dd48      	ble.n	801f866 <__sflush_r+0xae>
 801f7d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f7d6:	2e00      	cmp	r6, #0
 801f7d8:	d045      	beq.n	801f866 <__sflush_r+0xae>
 801f7da:	2300      	movs	r3, #0
 801f7dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f7e0:	682f      	ldr	r7, [r5, #0]
 801f7e2:	6a21      	ldr	r1, [r4, #32]
 801f7e4:	602b      	str	r3, [r5, #0]
 801f7e6:	d030      	beq.n	801f84a <__sflush_r+0x92>
 801f7e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f7ea:	89a3      	ldrh	r3, [r4, #12]
 801f7ec:	0759      	lsls	r1, r3, #29
 801f7ee:	d505      	bpl.n	801f7fc <__sflush_r+0x44>
 801f7f0:	6863      	ldr	r3, [r4, #4]
 801f7f2:	1ad2      	subs	r2, r2, r3
 801f7f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f7f6:	b10b      	cbz	r3, 801f7fc <__sflush_r+0x44>
 801f7f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f7fa:	1ad2      	subs	r2, r2, r3
 801f7fc:	2300      	movs	r3, #0
 801f7fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f800:	6a21      	ldr	r1, [r4, #32]
 801f802:	4628      	mov	r0, r5
 801f804:	47b0      	blx	r6
 801f806:	1c43      	adds	r3, r0, #1
 801f808:	89a3      	ldrh	r3, [r4, #12]
 801f80a:	d106      	bne.n	801f81a <__sflush_r+0x62>
 801f80c:	6829      	ldr	r1, [r5, #0]
 801f80e:	291d      	cmp	r1, #29
 801f810:	d82b      	bhi.n	801f86a <__sflush_r+0xb2>
 801f812:	4a2a      	ldr	r2, [pc, #168]	@ (801f8bc <__sflush_r+0x104>)
 801f814:	410a      	asrs	r2, r1
 801f816:	07d6      	lsls	r6, r2, #31
 801f818:	d427      	bmi.n	801f86a <__sflush_r+0xb2>
 801f81a:	2200      	movs	r2, #0
 801f81c:	6062      	str	r2, [r4, #4]
 801f81e:	04d9      	lsls	r1, r3, #19
 801f820:	6922      	ldr	r2, [r4, #16]
 801f822:	6022      	str	r2, [r4, #0]
 801f824:	d504      	bpl.n	801f830 <__sflush_r+0x78>
 801f826:	1c42      	adds	r2, r0, #1
 801f828:	d101      	bne.n	801f82e <__sflush_r+0x76>
 801f82a:	682b      	ldr	r3, [r5, #0]
 801f82c:	b903      	cbnz	r3, 801f830 <__sflush_r+0x78>
 801f82e:	6560      	str	r0, [r4, #84]	@ 0x54
 801f830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f832:	602f      	str	r7, [r5, #0]
 801f834:	b1b9      	cbz	r1, 801f866 <__sflush_r+0xae>
 801f836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f83a:	4299      	cmp	r1, r3
 801f83c:	d002      	beq.n	801f844 <__sflush_r+0x8c>
 801f83e:	4628      	mov	r0, r5
 801f840:	f7ff f89e 	bl	801e980 <_free_r>
 801f844:	2300      	movs	r3, #0
 801f846:	6363      	str	r3, [r4, #52]	@ 0x34
 801f848:	e00d      	b.n	801f866 <__sflush_r+0xae>
 801f84a:	2301      	movs	r3, #1
 801f84c:	4628      	mov	r0, r5
 801f84e:	47b0      	blx	r6
 801f850:	4602      	mov	r2, r0
 801f852:	1c50      	adds	r0, r2, #1
 801f854:	d1c9      	bne.n	801f7ea <__sflush_r+0x32>
 801f856:	682b      	ldr	r3, [r5, #0]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d0c6      	beq.n	801f7ea <__sflush_r+0x32>
 801f85c:	2b1d      	cmp	r3, #29
 801f85e:	d001      	beq.n	801f864 <__sflush_r+0xac>
 801f860:	2b16      	cmp	r3, #22
 801f862:	d11e      	bne.n	801f8a2 <__sflush_r+0xea>
 801f864:	602f      	str	r7, [r5, #0]
 801f866:	2000      	movs	r0, #0
 801f868:	e022      	b.n	801f8b0 <__sflush_r+0xf8>
 801f86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f86e:	b21b      	sxth	r3, r3
 801f870:	e01b      	b.n	801f8aa <__sflush_r+0xf2>
 801f872:	690f      	ldr	r7, [r1, #16]
 801f874:	2f00      	cmp	r7, #0
 801f876:	d0f6      	beq.n	801f866 <__sflush_r+0xae>
 801f878:	0793      	lsls	r3, r2, #30
 801f87a:	680e      	ldr	r6, [r1, #0]
 801f87c:	bf08      	it	eq
 801f87e:	694b      	ldreq	r3, [r1, #20]
 801f880:	600f      	str	r7, [r1, #0]
 801f882:	bf18      	it	ne
 801f884:	2300      	movne	r3, #0
 801f886:	eba6 0807 	sub.w	r8, r6, r7
 801f88a:	608b      	str	r3, [r1, #8]
 801f88c:	f1b8 0f00 	cmp.w	r8, #0
 801f890:	dde9      	ble.n	801f866 <__sflush_r+0xae>
 801f892:	6a21      	ldr	r1, [r4, #32]
 801f894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f896:	4643      	mov	r3, r8
 801f898:	463a      	mov	r2, r7
 801f89a:	4628      	mov	r0, r5
 801f89c:	47b0      	blx	r6
 801f89e:	2800      	cmp	r0, #0
 801f8a0:	dc08      	bgt.n	801f8b4 <__sflush_r+0xfc>
 801f8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f8aa:	81a3      	strh	r3, [r4, #12]
 801f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 801f8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8b4:	4407      	add	r7, r0
 801f8b6:	eba8 0800 	sub.w	r8, r8, r0
 801f8ba:	e7e7      	b.n	801f88c <__sflush_r+0xd4>
 801f8bc:	dfbffffe 	.word	0xdfbffffe

0801f8c0 <_fflush_r>:
 801f8c0:	b538      	push	{r3, r4, r5, lr}
 801f8c2:	690b      	ldr	r3, [r1, #16]
 801f8c4:	4605      	mov	r5, r0
 801f8c6:	460c      	mov	r4, r1
 801f8c8:	b913      	cbnz	r3, 801f8d0 <_fflush_r+0x10>
 801f8ca:	2500      	movs	r5, #0
 801f8cc:	4628      	mov	r0, r5
 801f8ce:	bd38      	pop	{r3, r4, r5, pc}
 801f8d0:	b118      	cbz	r0, 801f8da <_fflush_r+0x1a>
 801f8d2:	6a03      	ldr	r3, [r0, #32]
 801f8d4:	b90b      	cbnz	r3, 801f8da <_fflush_r+0x1a>
 801f8d6:	f7fd ff21 	bl	801d71c <__sinit>
 801f8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d0f3      	beq.n	801f8ca <_fflush_r+0xa>
 801f8e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f8e4:	07d0      	lsls	r0, r2, #31
 801f8e6:	d404      	bmi.n	801f8f2 <_fflush_r+0x32>
 801f8e8:	0599      	lsls	r1, r3, #22
 801f8ea:	d402      	bmi.n	801f8f2 <_fflush_r+0x32>
 801f8ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f8ee:	f7fe f9ca 	bl	801dc86 <__retarget_lock_acquire_recursive>
 801f8f2:	4628      	mov	r0, r5
 801f8f4:	4621      	mov	r1, r4
 801f8f6:	f7ff ff5f 	bl	801f7b8 <__sflush_r>
 801f8fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f8fc:	07da      	lsls	r2, r3, #31
 801f8fe:	4605      	mov	r5, r0
 801f900:	d4e4      	bmi.n	801f8cc <_fflush_r+0xc>
 801f902:	89a3      	ldrh	r3, [r4, #12]
 801f904:	059b      	lsls	r3, r3, #22
 801f906:	d4e1      	bmi.n	801f8cc <_fflush_r+0xc>
 801f908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f90a:	f7fe f9bd 	bl	801dc88 <__retarget_lock_release_recursive>
 801f90e:	e7dd      	b.n	801f8cc <_fflush_r+0xc>

0801f910 <fiprintf>:
 801f910:	b40e      	push	{r1, r2, r3}
 801f912:	b503      	push	{r0, r1, lr}
 801f914:	4601      	mov	r1, r0
 801f916:	ab03      	add	r3, sp, #12
 801f918:	4805      	ldr	r0, [pc, #20]	@ (801f930 <fiprintf+0x20>)
 801f91a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f91e:	6800      	ldr	r0, [r0, #0]
 801f920:	9301      	str	r3, [sp, #4]
 801f922:	f7ff fe31 	bl	801f588 <_vfiprintf_r>
 801f926:	b002      	add	sp, #8
 801f928:	f85d eb04 	ldr.w	lr, [sp], #4
 801f92c:	b003      	add	sp, #12
 801f92e:	4770      	bx	lr
 801f930:	20000094 	.word	0x20000094

0801f934 <__swhatbuf_r>:
 801f934:	b570      	push	{r4, r5, r6, lr}
 801f936:	460c      	mov	r4, r1
 801f938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f93c:	2900      	cmp	r1, #0
 801f93e:	b096      	sub	sp, #88	@ 0x58
 801f940:	4615      	mov	r5, r2
 801f942:	461e      	mov	r6, r3
 801f944:	da0d      	bge.n	801f962 <__swhatbuf_r+0x2e>
 801f946:	89a3      	ldrh	r3, [r4, #12]
 801f948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801f94c:	f04f 0100 	mov.w	r1, #0
 801f950:	bf14      	ite	ne
 801f952:	2340      	movne	r3, #64	@ 0x40
 801f954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801f958:	2000      	movs	r0, #0
 801f95a:	6031      	str	r1, [r6, #0]
 801f95c:	602b      	str	r3, [r5, #0]
 801f95e:	b016      	add	sp, #88	@ 0x58
 801f960:	bd70      	pop	{r4, r5, r6, pc}
 801f962:	466a      	mov	r2, sp
 801f964:	f000 f848 	bl	801f9f8 <_fstat_r>
 801f968:	2800      	cmp	r0, #0
 801f96a:	dbec      	blt.n	801f946 <__swhatbuf_r+0x12>
 801f96c:	9901      	ldr	r1, [sp, #4]
 801f96e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801f972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801f976:	4259      	negs	r1, r3
 801f978:	4159      	adcs	r1, r3
 801f97a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801f97e:	e7eb      	b.n	801f958 <__swhatbuf_r+0x24>

0801f980 <__smakebuf_r>:
 801f980:	898b      	ldrh	r3, [r1, #12]
 801f982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f984:	079d      	lsls	r5, r3, #30
 801f986:	4606      	mov	r6, r0
 801f988:	460c      	mov	r4, r1
 801f98a:	d507      	bpl.n	801f99c <__smakebuf_r+0x1c>
 801f98c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801f990:	6023      	str	r3, [r4, #0]
 801f992:	6123      	str	r3, [r4, #16]
 801f994:	2301      	movs	r3, #1
 801f996:	6163      	str	r3, [r4, #20]
 801f998:	b003      	add	sp, #12
 801f99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f99c:	ab01      	add	r3, sp, #4
 801f99e:	466a      	mov	r2, sp
 801f9a0:	f7ff ffc8 	bl	801f934 <__swhatbuf_r>
 801f9a4:	9f00      	ldr	r7, [sp, #0]
 801f9a6:	4605      	mov	r5, r0
 801f9a8:	4639      	mov	r1, r7
 801f9aa:	4630      	mov	r0, r6
 801f9ac:	f7ff f85c 	bl	801ea68 <_malloc_r>
 801f9b0:	b948      	cbnz	r0, 801f9c6 <__smakebuf_r+0x46>
 801f9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f9b6:	059a      	lsls	r2, r3, #22
 801f9b8:	d4ee      	bmi.n	801f998 <__smakebuf_r+0x18>
 801f9ba:	f023 0303 	bic.w	r3, r3, #3
 801f9be:	f043 0302 	orr.w	r3, r3, #2
 801f9c2:	81a3      	strh	r3, [r4, #12]
 801f9c4:	e7e2      	b.n	801f98c <__smakebuf_r+0xc>
 801f9c6:	89a3      	ldrh	r3, [r4, #12]
 801f9c8:	6020      	str	r0, [r4, #0]
 801f9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f9ce:	81a3      	strh	r3, [r4, #12]
 801f9d0:	9b01      	ldr	r3, [sp, #4]
 801f9d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801f9d6:	b15b      	cbz	r3, 801f9f0 <__smakebuf_r+0x70>
 801f9d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f9dc:	4630      	mov	r0, r6
 801f9de:	f000 f81d 	bl	801fa1c <_isatty_r>
 801f9e2:	b128      	cbz	r0, 801f9f0 <__smakebuf_r+0x70>
 801f9e4:	89a3      	ldrh	r3, [r4, #12]
 801f9e6:	f023 0303 	bic.w	r3, r3, #3
 801f9ea:	f043 0301 	orr.w	r3, r3, #1
 801f9ee:	81a3      	strh	r3, [r4, #12]
 801f9f0:	89a3      	ldrh	r3, [r4, #12]
 801f9f2:	431d      	orrs	r5, r3
 801f9f4:	81a5      	strh	r5, [r4, #12]
 801f9f6:	e7cf      	b.n	801f998 <__smakebuf_r+0x18>

0801f9f8 <_fstat_r>:
 801f9f8:	b538      	push	{r3, r4, r5, lr}
 801f9fa:	4d07      	ldr	r5, [pc, #28]	@ (801fa18 <_fstat_r+0x20>)
 801f9fc:	2300      	movs	r3, #0
 801f9fe:	4604      	mov	r4, r0
 801fa00:	4608      	mov	r0, r1
 801fa02:	4611      	mov	r1, r2
 801fa04:	602b      	str	r3, [r5, #0]
 801fa06:	f7e3 fbef 	bl	80031e8 <_fstat>
 801fa0a:	1c43      	adds	r3, r0, #1
 801fa0c:	d102      	bne.n	801fa14 <_fstat_r+0x1c>
 801fa0e:	682b      	ldr	r3, [r5, #0]
 801fa10:	b103      	cbz	r3, 801fa14 <_fstat_r+0x1c>
 801fa12:	6023      	str	r3, [r4, #0]
 801fa14:	bd38      	pop	{r3, r4, r5, pc}
 801fa16:	bf00      	nop
 801fa18:	2000f678 	.word	0x2000f678

0801fa1c <_isatty_r>:
 801fa1c:	b538      	push	{r3, r4, r5, lr}
 801fa1e:	4d06      	ldr	r5, [pc, #24]	@ (801fa38 <_isatty_r+0x1c>)
 801fa20:	2300      	movs	r3, #0
 801fa22:	4604      	mov	r4, r0
 801fa24:	4608      	mov	r0, r1
 801fa26:	602b      	str	r3, [r5, #0]
 801fa28:	f7e3 fbee 	bl	8003208 <_isatty>
 801fa2c:	1c43      	adds	r3, r0, #1
 801fa2e:	d102      	bne.n	801fa36 <_isatty_r+0x1a>
 801fa30:	682b      	ldr	r3, [r5, #0]
 801fa32:	b103      	cbz	r3, 801fa36 <_isatty_r+0x1a>
 801fa34:	6023      	str	r3, [r4, #0]
 801fa36:	bd38      	pop	{r3, r4, r5, pc}
 801fa38:	2000f678 	.word	0x2000f678

0801fa3c <_sbrk_r>:
 801fa3c:	b538      	push	{r3, r4, r5, lr}
 801fa3e:	4d06      	ldr	r5, [pc, #24]	@ (801fa58 <_sbrk_r+0x1c>)
 801fa40:	2300      	movs	r3, #0
 801fa42:	4604      	mov	r4, r0
 801fa44:	4608      	mov	r0, r1
 801fa46:	602b      	str	r3, [r5, #0]
 801fa48:	f7e3 fbf6 	bl	8003238 <_sbrk>
 801fa4c:	1c43      	adds	r3, r0, #1
 801fa4e:	d102      	bne.n	801fa56 <_sbrk_r+0x1a>
 801fa50:	682b      	ldr	r3, [r5, #0]
 801fa52:	b103      	cbz	r3, 801fa56 <_sbrk_r+0x1a>
 801fa54:	6023      	str	r3, [r4, #0]
 801fa56:	bd38      	pop	{r3, r4, r5, pc}
 801fa58:	2000f678 	.word	0x2000f678

0801fa5c <abort>:
 801fa5c:	b508      	push	{r3, lr}
 801fa5e:	2006      	movs	r0, #6
 801fa60:	f000 f88c 	bl	801fb7c <raise>
 801fa64:	2001      	movs	r0, #1
 801fa66:	f7e3 fb8b 	bl	8003180 <_exit>

0801fa6a <_calloc_r>:
 801fa6a:	b570      	push	{r4, r5, r6, lr}
 801fa6c:	fba1 5402 	umull	r5, r4, r1, r2
 801fa70:	b93c      	cbnz	r4, 801fa82 <_calloc_r+0x18>
 801fa72:	4629      	mov	r1, r5
 801fa74:	f7fe fff8 	bl	801ea68 <_malloc_r>
 801fa78:	4606      	mov	r6, r0
 801fa7a:	b928      	cbnz	r0, 801fa88 <_calloc_r+0x1e>
 801fa7c:	2600      	movs	r6, #0
 801fa7e:	4630      	mov	r0, r6
 801fa80:	bd70      	pop	{r4, r5, r6, pc}
 801fa82:	220c      	movs	r2, #12
 801fa84:	6002      	str	r2, [r0, #0]
 801fa86:	e7f9      	b.n	801fa7c <_calloc_r+0x12>
 801fa88:	462a      	mov	r2, r5
 801fa8a:	4621      	mov	r1, r4
 801fa8c:	f7fe f80e 	bl	801daac <memset>
 801fa90:	e7f5      	b.n	801fa7e <_calloc_r+0x14>

0801fa92 <__ascii_mbtowc>:
 801fa92:	b082      	sub	sp, #8
 801fa94:	b901      	cbnz	r1, 801fa98 <__ascii_mbtowc+0x6>
 801fa96:	a901      	add	r1, sp, #4
 801fa98:	b142      	cbz	r2, 801faac <__ascii_mbtowc+0x1a>
 801fa9a:	b14b      	cbz	r3, 801fab0 <__ascii_mbtowc+0x1e>
 801fa9c:	7813      	ldrb	r3, [r2, #0]
 801fa9e:	600b      	str	r3, [r1, #0]
 801faa0:	7812      	ldrb	r2, [r2, #0]
 801faa2:	1e10      	subs	r0, r2, #0
 801faa4:	bf18      	it	ne
 801faa6:	2001      	movne	r0, #1
 801faa8:	b002      	add	sp, #8
 801faaa:	4770      	bx	lr
 801faac:	4610      	mov	r0, r2
 801faae:	e7fb      	b.n	801faa8 <__ascii_mbtowc+0x16>
 801fab0:	f06f 0001 	mvn.w	r0, #1
 801fab4:	e7f8      	b.n	801faa8 <__ascii_mbtowc+0x16>

0801fab6 <_realloc_r>:
 801fab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801faba:	4680      	mov	r8, r0
 801fabc:	4615      	mov	r5, r2
 801fabe:	460c      	mov	r4, r1
 801fac0:	b921      	cbnz	r1, 801facc <_realloc_r+0x16>
 801fac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fac6:	4611      	mov	r1, r2
 801fac8:	f7fe bfce 	b.w	801ea68 <_malloc_r>
 801facc:	b92a      	cbnz	r2, 801fada <_realloc_r+0x24>
 801face:	f7fe ff57 	bl	801e980 <_free_r>
 801fad2:	2400      	movs	r4, #0
 801fad4:	4620      	mov	r0, r4
 801fad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fada:	f000 f86b 	bl	801fbb4 <_malloc_usable_size_r>
 801fade:	4285      	cmp	r5, r0
 801fae0:	4606      	mov	r6, r0
 801fae2:	d802      	bhi.n	801faea <_realloc_r+0x34>
 801fae4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801fae8:	d8f4      	bhi.n	801fad4 <_realloc_r+0x1e>
 801faea:	4629      	mov	r1, r5
 801faec:	4640      	mov	r0, r8
 801faee:	f7fe ffbb 	bl	801ea68 <_malloc_r>
 801faf2:	4607      	mov	r7, r0
 801faf4:	2800      	cmp	r0, #0
 801faf6:	d0ec      	beq.n	801fad2 <_realloc_r+0x1c>
 801faf8:	42b5      	cmp	r5, r6
 801fafa:	462a      	mov	r2, r5
 801fafc:	4621      	mov	r1, r4
 801fafe:	bf28      	it	cs
 801fb00:	4632      	movcs	r2, r6
 801fb02:	f7fe f8c2 	bl	801dc8a <memcpy>
 801fb06:	4621      	mov	r1, r4
 801fb08:	4640      	mov	r0, r8
 801fb0a:	f7fe ff39 	bl	801e980 <_free_r>
 801fb0e:	463c      	mov	r4, r7
 801fb10:	e7e0      	b.n	801fad4 <_realloc_r+0x1e>

0801fb12 <__ascii_wctomb>:
 801fb12:	4603      	mov	r3, r0
 801fb14:	4608      	mov	r0, r1
 801fb16:	b141      	cbz	r1, 801fb2a <__ascii_wctomb+0x18>
 801fb18:	2aff      	cmp	r2, #255	@ 0xff
 801fb1a:	d904      	bls.n	801fb26 <__ascii_wctomb+0x14>
 801fb1c:	228a      	movs	r2, #138	@ 0x8a
 801fb1e:	601a      	str	r2, [r3, #0]
 801fb20:	f04f 30ff 	mov.w	r0, #4294967295
 801fb24:	4770      	bx	lr
 801fb26:	700a      	strb	r2, [r1, #0]
 801fb28:	2001      	movs	r0, #1
 801fb2a:	4770      	bx	lr

0801fb2c <_raise_r>:
 801fb2c:	291f      	cmp	r1, #31
 801fb2e:	b538      	push	{r3, r4, r5, lr}
 801fb30:	4605      	mov	r5, r0
 801fb32:	460c      	mov	r4, r1
 801fb34:	d904      	bls.n	801fb40 <_raise_r+0x14>
 801fb36:	2316      	movs	r3, #22
 801fb38:	6003      	str	r3, [r0, #0]
 801fb3a:	f04f 30ff 	mov.w	r0, #4294967295
 801fb3e:	bd38      	pop	{r3, r4, r5, pc}
 801fb40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fb42:	b112      	cbz	r2, 801fb4a <_raise_r+0x1e>
 801fb44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fb48:	b94b      	cbnz	r3, 801fb5e <_raise_r+0x32>
 801fb4a:	4628      	mov	r0, r5
 801fb4c:	f000 f830 	bl	801fbb0 <_getpid_r>
 801fb50:	4622      	mov	r2, r4
 801fb52:	4601      	mov	r1, r0
 801fb54:	4628      	mov	r0, r5
 801fb56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb5a:	f000 b817 	b.w	801fb8c <_kill_r>
 801fb5e:	2b01      	cmp	r3, #1
 801fb60:	d00a      	beq.n	801fb78 <_raise_r+0x4c>
 801fb62:	1c59      	adds	r1, r3, #1
 801fb64:	d103      	bne.n	801fb6e <_raise_r+0x42>
 801fb66:	2316      	movs	r3, #22
 801fb68:	6003      	str	r3, [r0, #0]
 801fb6a:	2001      	movs	r0, #1
 801fb6c:	e7e7      	b.n	801fb3e <_raise_r+0x12>
 801fb6e:	2100      	movs	r1, #0
 801fb70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fb74:	4620      	mov	r0, r4
 801fb76:	4798      	blx	r3
 801fb78:	2000      	movs	r0, #0
 801fb7a:	e7e0      	b.n	801fb3e <_raise_r+0x12>

0801fb7c <raise>:
 801fb7c:	4b02      	ldr	r3, [pc, #8]	@ (801fb88 <raise+0xc>)
 801fb7e:	4601      	mov	r1, r0
 801fb80:	6818      	ldr	r0, [r3, #0]
 801fb82:	f7ff bfd3 	b.w	801fb2c <_raise_r>
 801fb86:	bf00      	nop
 801fb88:	20000094 	.word	0x20000094

0801fb8c <_kill_r>:
 801fb8c:	b538      	push	{r3, r4, r5, lr}
 801fb8e:	4d07      	ldr	r5, [pc, #28]	@ (801fbac <_kill_r+0x20>)
 801fb90:	2300      	movs	r3, #0
 801fb92:	4604      	mov	r4, r0
 801fb94:	4608      	mov	r0, r1
 801fb96:	4611      	mov	r1, r2
 801fb98:	602b      	str	r3, [r5, #0]
 801fb9a:	f7e3 fadf 	bl	800315c <_kill>
 801fb9e:	1c43      	adds	r3, r0, #1
 801fba0:	d102      	bne.n	801fba8 <_kill_r+0x1c>
 801fba2:	682b      	ldr	r3, [r5, #0]
 801fba4:	b103      	cbz	r3, 801fba8 <_kill_r+0x1c>
 801fba6:	6023      	str	r3, [r4, #0]
 801fba8:	bd38      	pop	{r3, r4, r5, pc}
 801fbaa:	bf00      	nop
 801fbac:	2000f678 	.word	0x2000f678

0801fbb0 <_getpid_r>:
 801fbb0:	f7e3 bacc 	b.w	800314c <_getpid>

0801fbb4 <_malloc_usable_size_r>:
 801fbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fbb8:	1f18      	subs	r0, r3, #4
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	bfbc      	itt	lt
 801fbbe:	580b      	ldrlt	r3, [r1, r0]
 801fbc0:	18c0      	addlt	r0, r0, r3
 801fbc2:	4770      	bx	lr

0801fbc4 <_init>:
 801fbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbc6:	bf00      	nop
 801fbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbca:	bc08      	pop	{r3}
 801fbcc:	469e      	mov	lr, r3
 801fbce:	4770      	bx	lr

0801fbd0 <_fini>:
 801fbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbd2:	bf00      	nop
 801fbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbd6:	bc08      	pop	{r3}
 801fbd8:	469e      	mov	lr, r3
 801fbda:	4770      	bx	lr
