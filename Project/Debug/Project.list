
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004838  0801e03c  0801e03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022874  08022874  00024220  2**0
                  CONTENTS
  4 .ARM          00000008  08022874  08022874  00023874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802287c  0802287c  00024220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802287c  0802287c  0002387c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022880  08022880  00023880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08022884  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000e0  08022964  000240e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000180  08022a04  00024180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f2fc  20000220  08022aa4  00024220  2**2
                  ALLOC
 12 ._user_heap_stack 00000804  2000f51c  08022aa4  0002451c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00024220  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003e79b  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009aa6  00000000  00000000  000629eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ca8  00000000  00000000  0006c498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002340  00000000  00000000  0006f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b9e5  00000000  00000000  00071480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048d5b  00000000  00000000  000ace65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011d453  00000000  00000000  000f5bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00213013  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c3f8  00000000  00000000  00213058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000060  00000000  00000000  0021f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e024 	.word	0x0801e024

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0801e024 	.word	0x0801e024

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b96a 	b.w	8000f68 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9d08      	ldr	r5, [sp, #32]
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14e      	bne.n	8000d56 <__udivmoddi4+0xaa>
 8000cb8:	4694      	mov	ip, r2
 8000cba:	458c      	cmp	ip, r1
 8000cbc:	4686      	mov	lr, r0
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	d962      	bls.n	8000d8a <__udivmoddi4+0xde>
 8000cc4:	b14a      	cbz	r2, 8000cda <__udivmoddi4+0x2e>
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	4091      	lsls	r1, r2
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	4319      	orrs	r1, r3
 8000cd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f f68c 	uxth.w	r6, ip
 8000ce2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cea:	fb07 1114 	mls	r1, r7, r4, r1
 8000cee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf2:	fb04 f106 	mul.w	r1, r4, r6
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d90a      	bls.n	8000d10 <__udivmoddi4+0x64>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d02:	f080 8112 	bcs.w	8000f2a <__udivmoddi4+0x27e>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 810f 	bls.w	8000f2a <__udivmoddi4+0x27e>
 8000d0c:	3c02      	subs	r4, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a59      	subs	r1, r3, r1
 8000d12:	fa1f f38e 	uxth.w	r3, lr
 8000d16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d22:	fb00 f606 	mul.w	r6, r0, r6
 8000d26:	429e      	cmp	r6, r3
 8000d28:	d90a      	bls.n	8000d40 <__udivmoddi4+0x94>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d32:	f080 80fc 	bcs.w	8000f2e <__udivmoddi4+0x282>
 8000d36:	429e      	cmp	r6, r3
 8000d38:	f240 80f9 	bls.w	8000f2e <__udivmoddi4+0x282>
 8000d3c:	4463      	add	r3, ip
 8000d3e:	3802      	subs	r0, #2
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d46:	2100      	movs	r1, #0
 8000d48:	b11d      	cbz	r5, 8000d52 <__udivmoddi4+0xa6>
 8000d4a:	40d3      	lsrs	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d905      	bls.n	8000d66 <__udivmoddi4+0xba>
 8000d5a:	b10d      	cbz	r5, 8000d60 <__udivmoddi4+0xb4>
 8000d5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d60:	2100      	movs	r1, #0
 8000d62:	4608      	mov	r0, r1
 8000d64:	e7f5      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000d66:	fab3 f183 	clz	r1, r3
 8000d6a:	2900      	cmp	r1, #0
 8000d6c:	d146      	bne.n	8000dfc <__udivmoddi4+0x150>
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xcc>
 8000d72:	4290      	cmp	r0, r2
 8000d74:	f0c0 80f0 	bcc.w	8000f58 <__udivmoddi4+0x2ac>
 8000d78:	1a86      	subs	r6, r0, r2
 8000d7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	2d00      	cmp	r5, #0
 8000d82:	d0e6      	beq.n	8000d52 <__udivmoddi4+0xa6>
 8000d84:	e9c5 6300 	strd	r6, r3, [r5]
 8000d88:	e7e3      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000d8a:	2a00      	cmp	r2, #0
 8000d8c:	f040 8090 	bne.w	8000eb0 <__udivmoddi4+0x204>
 8000d90:	eba1 040c 	sub.w	r4, r1, ip
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa1f f78c 	uxth.w	r7, ip
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000da2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da6:	fb08 4416 	mls	r4, r8, r6, r4
 8000daa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dae:	fb07 f006 	mul.w	r0, r7, r6
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x11c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x11a>
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	f200 80cd 	bhi.w	8000f60 <__udivmoddi4+0x2b4>
 8000dc6:	4626      	mov	r6, r4
 8000dc8:	1a1c      	subs	r4, r3, r0
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb00 f707 	mul.w	r7, r0, r7
 8000dde:	429f      	cmp	r7, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x148>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x146>
 8000dec:	429f      	cmp	r7, r3
 8000dee:	f200 80b0 	bhi.w	8000f52 <__udivmoddi4+0x2a6>
 8000df2:	4620      	mov	r0, r4
 8000df4:	1bdb      	subs	r3, r3, r7
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0x9c>
 8000dfc:	f1c1 0620 	rsb	r6, r1, #32
 8000e00:	408b      	lsls	r3, r1
 8000e02:	fa22 f706 	lsr.w	r7, r2, r6
 8000e06:	431f      	orrs	r7, r3
 8000e08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000e10:	ea43 030c 	orr.w	r3, r3, ip
 8000e14:	40f4      	lsrs	r4, r6
 8000e16:	fa00 f801 	lsl.w	r8, r0, r1
 8000e1a:	0c38      	lsrs	r0, r7, #16
 8000e1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e20:	fbb4 fef0 	udiv	lr, r4, r0
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	fb00 441e 	mls	r4, r0, lr, r4
 8000e2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e30:	fb0e f90c 	mul.w	r9, lr, ip
 8000e34:	45a1      	cmp	r9, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	d90a      	bls.n	8000e52 <__udivmoddi4+0x1a6>
 8000e3c:	193c      	adds	r4, r7, r4
 8000e3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e42:	f080 8084 	bcs.w	8000f4e <__udivmoddi4+0x2a2>
 8000e46:	45a1      	cmp	r9, r4
 8000e48:	f240 8081 	bls.w	8000f4e <__udivmoddi4+0x2a2>
 8000e4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	eba4 0409 	sub.w	r4, r4, r9
 8000e56:	fa1f f983 	uxth.w	r9, r3
 8000e5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000e62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e6a:	45a4      	cmp	ip, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x1d2>
 8000e6e:	193c      	adds	r4, r7, r4
 8000e70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e74:	d267      	bcs.n	8000f46 <__udivmoddi4+0x29a>
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d965      	bls.n	8000f46 <__udivmoddi4+0x29a>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e82:	fba0 9302 	umull	r9, r3, r0, r2
 8000e86:	eba4 040c 	sub.w	r4, r4, ip
 8000e8a:	429c      	cmp	r4, r3
 8000e8c:	46ce      	mov	lr, r9
 8000e8e:	469c      	mov	ip, r3
 8000e90:	d351      	bcc.n	8000f36 <__udivmoddi4+0x28a>
 8000e92:	d04e      	beq.n	8000f32 <__udivmoddi4+0x286>
 8000e94:	b155      	cbz	r5, 8000eac <__udivmoddi4+0x200>
 8000e96:	ebb8 030e 	subs.w	r3, r8, lr
 8000e9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	e9c5 6400 	strd	r6, r4, [r5]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e750      	b.n	8000d52 <__udivmoddi4+0xa6>
 8000eb0:	f1c2 0320 	rsb	r3, r2, #32
 8000eb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ec0:	4094      	lsls	r4, r2
 8000ec2:	430c      	orrs	r4, r1
 8000ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ecc:	fa1f f78c 	uxth.w	r7, ip
 8000ed0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed8:	0c23      	lsrs	r3, r4, #16
 8000eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ede:	fb00 f107 	mul.w	r1, r0, r7
 8000ee2:	4299      	cmp	r1, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x24c>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eee:	d22c      	bcs.n	8000f4a <__udivmoddi4+0x29e>
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	d92a      	bls.n	8000f4a <__udivmoddi4+0x29e>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f00:	fb08 3311 	mls	r3, r8, r1, r3
 8000f04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f08:	fb01 f307 	mul.w	r3, r1, r7
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x276>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f18:	d213      	bcs.n	8000f42 <__udivmoddi4+0x296>
 8000f1a:	42a3      	cmp	r3, r4
 8000f1c:	d911      	bls.n	8000f42 <__udivmoddi4+0x296>
 8000f1e:	3902      	subs	r1, #2
 8000f20:	4464      	add	r4, ip
 8000f22:	1ae4      	subs	r4, r4, r3
 8000f24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f28:	e739      	b.n	8000d9e <__udivmoddi4+0xf2>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	e6f0      	b.n	8000d10 <__udivmoddi4+0x64>
 8000f2e:	4608      	mov	r0, r1
 8000f30:	e706      	b.n	8000d40 <__udivmoddi4+0x94>
 8000f32:	45c8      	cmp	r8, r9
 8000f34:	d2ae      	bcs.n	8000e94 <__udivmoddi4+0x1e8>
 8000f36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3e:	3801      	subs	r0, #1
 8000f40:	e7a8      	b.n	8000e94 <__udivmoddi4+0x1e8>
 8000f42:	4631      	mov	r1, r6
 8000f44:	e7ed      	b.n	8000f22 <__udivmoddi4+0x276>
 8000f46:	4603      	mov	r3, r0
 8000f48:	e799      	b.n	8000e7e <__udivmoddi4+0x1d2>
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	e7d4      	b.n	8000ef8 <__udivmoddi4+0x24c>
 8000f4e:	46d6      	mov	lr, sl
 8000f50:	e77f      	b.n	8000e52 <__udivmoddi4+0x1a6>
 8000f52:	4463      	add	r3, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e74d      	b.n	8000df4 <__udivmoddi4+0x148>
 8000f58:	4606      	mov	r6, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e70f      	b.n	8000d80 <__udivmoddi4+0xd4>
 8000f60:	3e02      	subs	r6, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	e730      	b.n	8000dc8 <__udivmoddi4+0x11c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f000 fa47 	bl	8001408 <null_ptr_check>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d117      	bne.n	8000fb6 <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	20d0      	movs	r0, #208	@ 0xd0
 8000f8e:	f000 f818 	bl	8000fc2 <bmp2_get_regs>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10b      	bne.n	8000fb6 <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b58      	cmp	r3, #88	@ 0x58
 8000fa4:	d105      	bne.n	8000fb2 <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fa79 	bl	800149e <get_calib_param>
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]
 8000fb0:	e001      	b.n	8000fb6 <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 8000fb2:	23fc      	movs	r3, #252	@ 0xfc
 8000fb4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8000fc2:	b590      	push	{r4, r7, lr}
 8000fc4:	b087      	sub	sp, #28
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f000 fa18 	bl	8001408 <null_ptr_check>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8000fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d11e      	bne.n	8001022 <bmp2_get_regs+0x60>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d01b      	beq.n	8001022 <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	785b      	ldrb	r3, [r3, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ff8:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68dc      	ldr	r4, [r3, #12]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	7bf8      	ldrb	r0, [r7, #15]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	68b9      	ldr	r1, [r7, #8]
 8001008:	47a0      	blx	r4
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 800101c:	23fe      	movs	r3, #254	@ 0xfe
 800101e:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 8001020:	e001      	b.n	8001026 <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001022:	23ff      	movs	r3, #255	@ 0xff
 8001024:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 8001032:	b590      	push	{r4, r7, lr}
 8001034:	b08b      	sub	sp, #44	@ 0x2c
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d901      	bls.n	800104a <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 8001046:	2304      	movs	r3, #4
 8001048:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f000 f9dc 	bl	8001408 <null_ptr_check>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001056:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800105a:	2b00      	cmp	r3, #0
 800105c:	d150      	bne.n	8001100 <bmp2_set_regs+0xce>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d04d      	beq.n	8001100 <bmp2_set_regs+0xce>
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d04a      	beq.n	8001100 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d043      	beq.n	80010f8 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	785b      	ldrb	r3, [r3, #1]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d114      	bne.n	80010a8 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800107e:	2300      	movs	r3, #0
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	e00d      	b.n	80010a0 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781a      	ldrb	r2, [r3, #0]
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	440b      	add	r3, r1
 8001092:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	3301      	adds	r3, #1
 800109e:	77fb      	strb	r3, [r7, #31]
 80010a0:	7ffb      	ldrb	r3, [r7, #31]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8ed      	bhi.n	8001084 <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d90b      	bls.n	80010c6 <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 80010ae:	f107 0114 	add.w	r1, r7, #20
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f9c6 	bl	8001448 <interleave_data>
                temp_len = ((len * 2) - 1);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	3b01      	subs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	e001      	b.n	80010ca <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	691c      	ldr	r4, [r3, #16]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7818      	ldrb	r0, [r3, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f107 0114 	add.w	r1, r7, #20
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	47a0      	blx	r4
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80010f0:	23fe      	movs	r3, #254	@ 0xfe
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010f6:	e007      	b.n	8001108 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80010f8:	23fd      	movs	r3, #253	@ 0xfd
 80010fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80010fe:	e003      	b.n	8001108 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001100:	23ff      	movs	r3, #255	@ 0xff
 8001102:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001106:	e000      	b.n	800110a <bmp2_set_regs+0xd8>
        if (len > 0)
 8001108:	bf00      	nop
    }

    return rslt;
 800110a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800110e:	4618      	mov	r0, r3
 8001110:	372c      	adds	r7, #44	@ 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bd90      	pop	{r4, r7, pc}

08001116 <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 800111e:	23e0      	movs	r3, #224	@ 0xe0
 8001120:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 8001122:	23b6      	movs	r3, #182	@ 0xb6
 8001124:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001126:	f107 010d 	add.w	r1, r7, #13
 800112a:	f107 000e 	add.w	r0, r7, #14
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f7ff ff7e 	bl	8001032 <bmp2_set_regs>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

    return rslt;
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001150:	2300      	movs	r3, #0
 8001152:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d02d      	beq.n	80011b6 <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 800115a:	f107 010c 	add.w	r1, r7, #12
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2202      	movs	r2, #2
 8001162:	20f4      	movs	r0, #244	@ 0xf4
 8001164:	f7ff ff2d 	bl	8000fc2 <bmp2_get_regs>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 800116c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d122      	bne.n	80011ba <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 8001174:	7b3b      	ldrb	r3, [r7, #12]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	b2da      	uxtb	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 800117e:	7b3b      	ldrb	r3, [r7, #12]
 8001180:	109b      	asrs	r3, r3, #2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	b2da      	uxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	095b      	lsrs	r3, r3, #5
 8001192:	b2da      	uxtb	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001198:	7b7b      	ldrb	r3, [r7, #13]
 800119a:	109b      	asrs	r3, r3, #2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	715a      	strb	r2, [r3, #5]
 80011b4:	e001      	b.n	80011ba <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011b6:	23ff      	movs	r3, #255	@ 0xff
 80011b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f9fd 	bl	80015d4 <conf_sensor>
 80011da:	4603      	mov	r3, r0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d01b      	beq.n	800122c <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80011f4:	f107 010e 	add.w	r1, r7, #14
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2201      	movs	r2, #1
 80011fc:	20f3      	movs	r0, #243	@ 0xf3
 80011fe:	f7ff fee0 	bl	8000fc2 <bmp2_get_regs>
 8001202:	4603      	mov	r3, r0
 8001204:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d110      	bne.n	8001230 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	10db      	asrs	r3, r3, #3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	705a      	strb	r2, [r3, #1]
 800122a:	e001      	b.n	8001230 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800122c:	23ff      	movs	r3, #255	@ 0xff
 800122e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f9bf 	bl	80015d4 <conf_sensor>
 8001256:	4603      	mov	r3, r0
 8001258:	75fb      	strb	r3, [r7, #23]

    return rslt;
 800125a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	2300      	movs	r3, #0
 8001276:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d024      	beq.n	80012d2 <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001288:	f107 0110 	add.w	r1, r7, #16
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2206      	movs	r2, #6
 8001290:	20f7      	movs	r0, #247	@ 0xf7
 8001292:	f7ff fe96 	bl	8000fc2 <bmp2_get_regs>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800129a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d119      	bne.n	80012d6 <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 80012a2:	f107 0208 	add.w	r2, r7, #8
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fab9 	bl	8001824 <parse_sensor_data>
 80012b2:	4603      	mov	r3, r0
 80012b4:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f80b 	bl	80012e2 <bmp2_compensate_data>
 80012cc:	4603      	mov	r3, r0
 80012ce:	75fb      	strb	r3, [r7, #23]
 80012d0:	e001      	b.n	80012d6 <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012d2:	23ff      	movs	r3, #255	@ 0xff
 80012d4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f88a 	bl	8001408 <null_ptr_check>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80012f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d129      	bne.n	8001354 <bmp2_compensate_data+0x72>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d026      	beq.n	8001354 <bmp2_compensate_data+0x72>
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d023      	beq.n	8001354 <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3308      	adds	r3, #8
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fabb 	bl	80018ac <compensate_temperature>
 8001336:	4603      	mov	r3, r0
 8001338:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 800133a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fba5 	bl	8001a98 <compensate_pressure>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 8001352:	e001      	b.n	8001358 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001354:	23ff      	movs	r3, #255	@ 0xff
 8001356:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b092      	sub	sp, #72	@ 0x48
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <bmp2_compute_meas_time+0x9c>)
 8001372:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001380:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <bmp2_compute_meas_time+0xa0>)
 8001382:	f107 0410 	add.w	r4, r7, #16
 8001386:	461d      	mov	r5, r3
 8001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f837 	bl	8001408 <null_ptr_check>
 800139a:	4603      	mov	r3, r0
 800139c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 80013a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d122      	bne.n	80013ee <bmp2_compute_meas_time+0x8a>
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01f      	beq.n	80013ee <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7e1b      	ldrb	r3, [r3, #24]
 80013b2:	2b03      	cmp	r3, #3
 80013b4:	d111      	bne.n	80013da <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3348      	adds	r3, #72	@ 0x48
 80013be:	443b      	add	r3, r7
 80013c0:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	3348      	adds	r3, #72	@ 0x48
 80013cc:	443b      	add	r3, r7
 80013ce:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80013d2:	441a      	add	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013d8:	e00c      	b.n	80013f4 <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	78db      	ldrb	r3, [r3, #3]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3348      	adds	r3, #72	@ 0x48
 80013e2:	443b      	add	r3, r7
 80013e4:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80013ec:	e002      	b.n	80013f4 <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80013ee:	23ff      	movs	r3, #255	@ 0xff
 80013f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80013f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3748      	adds	r7, #72	@ 0x48
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001400:	0801e03c 	.word	0x0801e03c
 8001404:	0801e050 	.word	0x0801e050

08001408 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <null_ptr_check+0x26>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <null_ptr_check+0x26>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <null_ptr_check+0x26>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 800142e:	23ff      	movs	r3, #255	@ 0xff
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e001      	b.n	8001438 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001448:	b480      	push	{r7}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001456:	2301      	movs	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e015      	b.n	8001488 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	441a      	add	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	440b      	add	r3, r1
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	441a      	add	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	68b9      	ldr	r1, [r7, #8]
 800147c:	440b      	add	r3, r1
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3e5      	bcc.n	800145c <interleave_data+0x14>
    }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b08a      	sub	sp, #40	@ 0x28
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 80014bc:	f107 010c 	add.w	r1, r7, #12
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2219      	movs	r2, #25
 80014c4:	2088      	movs	r0, #136	@ 0x88
 80014c6:	f7ff fd7c 	bl	8000fc2 <bmp2_get_regs>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 80014d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d177      	bne.n	80015c8 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	7b3b      	ldrb	r3, [r7, #12]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7bbb      	ldrb	r3, [r7, #14]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80014fe:	7c7b      	ldrb	r3, [r7, #17]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	7c3b      	ldrb	r3, [r7, #16]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 8001510:	7cfb      	ldrb	r3, [r7, #19]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	7cbb      	ldrb	r3, [r7, #18]
 8001518:	b21b      	sxth	r3, r3
 800151a:	4313      	orrs	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	7d3b      	ldrb	r3, [r7, #20]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	b21a      	sxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001548:	7e7b      	ldrb	r3, [r7, #25]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	7e3b      	ldrb	r3, [r7, #24]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 800155a:	7efb      	ldrb	r3, [r7, #27]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7ebb      	ldrb	r3, [r7, #26]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 800156c:	7f7b      	ldrb	r3, [r7, #29]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	7f3b      	ldrb	r3, [r7, #28]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21a      	sxth	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	7fbb      	ldrb	r3, [r7, #30]
 8001586:	b21b      	sxth	r3, r3
 8001588:	4313      	orrs	r3, r2
 800158a:	b21a      	sxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001590:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 80015bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80015c0:	b25a      	sxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 80015c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3728      	adds	r7, #40	@ 0x28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 80015e2:	2300      	movs	r3, #0
 80015e4:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 80015e6:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80015ea:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d074      	beq.n	80016dc <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80015f2:	f107 0114 	add.w	r1, r7, #20
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2202      	movs	r2, #2
 80015fa:	20f4      	movs	r0, #244	@ 0xf4
 80015fc:	f7ff fce1 	bl	8000fc2 <bmp2_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d169      	bne.n	80016e0 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd82 	bl	8001116 <bmp2_soft_reset>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 8001616:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d160      	bne.n	80016e0 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	68b9      	ldr	r1, [r7, #8]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f861 	bl	80016ec <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	b25a      	sxtb	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	b25b      	sxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 8001644:	7d7b      	ldrb	r3, [r7, #21]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f023 031c 	bic.w	r3, r3, #28
 800164c:	b25a      	sxtb	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f003 031c 	and.w	r3, r3, #28
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	b25a      	sxtb	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	795b      	ldrb	r3, [r3, #5]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b25b      	sxtb	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b25b      	sxtb	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 8001682:	f107 0114 	add.w	r1, r7, #20
 8001686:	f107 0010 	add.w	r0, r7, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2202      	movs	r2, #2
 800168e:	f7ff fcd0 	bl	8001032 <bmp2_set_regs>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 8001696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d120      	bne.n	80016e0 <conf_sensor+0x10c>
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01d      	beq.n	80016e0 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 80016aa:	7d3b      	ldrb	r3, [r7, #20]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f023 0303 	bic.w	r3, r3, #3
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 80016c6:	f107 0114 	add.w	r1, r7, #20
 80016ca:	f107 0010 	add.w	r0, r7, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f7ff fcae 	bl	8001032 <bmp2_set_regs>
 80016d6:	4603      	mov	r3, r0
 80016d8:	75fb      	strb	r3, [r7, #23]
 80016da:	e001      	b.n	80016e0 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	78db      	ldrb	r3, [r3, #3]
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	f200 808b 	bhi.w	8001816 <set_os_mode+0x12a>
 8001700:	a201      	add	r2, pc, #4	@ (adr r2, 8001708 <set_os_mode+0x1c>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	0800171d 	.word	0x0800171d
 800170c:	0800174f 	.word	0x0800174f
 8001710:	08001781 	.word	0x08001781
 8001714:	080017b3 	.word	0x080017b3
 8001718:	080017e5 	.word	0x080017e5
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b25b      	sxtb	r3, r3
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	b25b      	sxtb	r3, r3
 8001728:	f043 0320 	orr.w	r3, r3, #32
 800172c:	b25b      	sxtb	r3, r3
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b25b      	sxtb	r3, r3
 800173a:	f023 031c 	bic.w	r3, r3, #28
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f043 0304 	orr.w	r3, r3, #4
 8001744:	b25b      	sxtb	r3, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	701a      	strb	r2, [r3, #0]
            break;
 800174c:	e064      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	b25b      	sxtb	r3, r3
 800175a:	f043 0320 	orr.w	r3, r3, #32
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f023 031c 	bic.w	r3, r3, #28
 8001770:	b25b      	sxtb	r3, r3
 8001772:	f043 0308 	orr.w	r3, r3, #8
 8001776:	b25b      	sxtb	r3, r3
 8001778:	b2da      	uxtb	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	701a      	strb	r2, [r3, #0]
            break;
 800177e:	e04b      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	b25b      	sxtb	r3, r3
 800178c:	f043 0320 	orr.w	r3, r3, #32
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b25b      	sxtb	r3, r3
 800179e:	f023 031c 	bic.w	r3, r3, #28
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	f043 030c 	orr.w	r3, r3, #12
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
            break;
 80017b0:	e032      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	f043 0320 	orr.w	r3, r3, #32
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f023 031c 	bic.w	r3, r3, #28
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	701a      	strb	r2, [r3, #0]
            break;
 80017e2:	e019      	b.n	8001818 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f023 031c 	bic.w	r3, r3, #28
 8001806:	b25b      	sxtb	r3, r3
 8001808:	f043 0314 	orr.w	r3, r3, #20
 800180c:	b25b      	sxtb	r3, r3
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	701a      	strb	r2, [r3, #0]
            break;
 8001814:	e000      	b.n	8001818 <set_os_mode+0x12c>
        default:
            break;
 8001816:	bf00      	nop
    }
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	031b      	lsls	r3, r3, #12
 8001834:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3301      	adds	r3, #1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	b2db      	uxtb	r3, r3
 800184a:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	431a      	orrs	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	031b      	lsls	r3, r3, #12
 8001862:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3305      	adds	r3, #5
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	b2db      	uxtb	r3, r3
 8001878:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	431a      	orrs	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	461a      	mov	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f000 fae3 	bl	8001e60 <st_check_boundaries>
 800189a:	4603      	mov	r3, r0
 800189c:	72fb      	strb	r3, [r7, #11]

    return rslt;
 800189e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 80018ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018b0:	b08c      	sub	sp, #48	@ 0x30
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe5d 	bl	8000584 <__aeabi_i2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <compensate_temperature+0x1d4>)
 80018d0:	f7fe ffec 	bl	80008ac <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	461d      	mov	r5, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	8b9b      	ldrh	r3, [r3, #28]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe3f 	bl	8000564 <__aeabi_ui2d>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b66      	ldr	r3, [pc, #408]	@ (8001a84 <compensate_temperature+0x1d8>)
 80018ec:	f7fe ffde 	bl	80008ac <__aeabi_ddiv>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7fe fcf6 	bl	80002e8 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4614      	mov	r4, r2
 8001902:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe3a 	bl	8000584 <__aeabi_i2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fe9e 	bl	8000658 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe2b 	bl	8000584 <__aeabi_i2d>
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001936:	f7fe ffb9 	bl	80008ac <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4614      	mov	r4, r2
 8001940:	461d      	mov	r5, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8b9b      	ldrh	r3, [r3, #28]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe0c 	bl	8000564 <__aeabi_ui2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <compensate_temperature+0x1dc>)
 8001952:	f7fe ffab 	bl	80008ac <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fcc3 	bl	80002e8 <__aeabi_dsub>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe08 	bl	8000584 <__aeabi_i2d>
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800197c:	f7fe ff96 	bl	80008ac <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4690      	mov	r8, r2
 8001986:	4699      	mov	r9, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	8b9b      	ldrh	r3, [r3, #28]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fde9 	bl	8000564 <__aeabi_ui2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <compensate_temperature+0x1dc>)
 8001998:	f7fe ff88 	bl	80008ac <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4640      	mov	r0, r8
 80019a2:	4649      	mov	r1, r9
 80019a4:	f7fe fca0 	bl	80002e8 <__aeabi_dsub>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fe52 	bl	8000658 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdde 	bl	8000584 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
    var2 =
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fe42 	bl	8000658 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 80019dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019e4:	f7fe fc82 	bl	80002ec <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f7ff f8cc 	bl	8000b8c <__aeabi_d2iz>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 80019fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a02:	f7fe fc73 	bl	80002ec <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <compensate_temperature+0x1e0>)
 8001a14:	f7fe ff4a 	bl	80008ac <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <compensate_temperature+0x1e4>)
 8001a26:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a2a:	f7ff f887 	bl	8000b3c <__aeabi_dcmplt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <compensate_temperature+0x1e4>)
 8001a3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <compensate_temperature+0x1e8>)
 8001a4a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a4e:	f7ff f893 	bl	8000b78 <__aeabi_dcmpgt>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <compensate_temperature+0x1e8>)
 8001a5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001a72:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3730      	adds	r7, #48	@ 0x30
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a80:	40d00000 	.word	0x40d00000
 8001a84:	40900000 	.word	0x40900000
 8001a88:	40c00000 	.word	0x40c00000
 8001a8c:	40b40000 	.word	0x40b40000
 8001a90:	c0440000 	.word	0xc0440000
 8001a94:	40554000 	.word	0x40554000

08001a98 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd62 	bl	8000584 <__aeabi_i2d>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ac8:	f7fe fef0 	bl	80008ac <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4bcb      	ldr	r3, [pc, #812]	@ (8001e08 <compensate_pressure+0x370>)
 8001ada:	f7fe fc05 	bl	80002e8 <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aee:	f7fe fdb3 	bl	8000658 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd3f 	bl	8000584 <__aeabi_i2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fda3 	bl	8000658 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e0c <compensate_pressure+0x374>)
 8001b20:	f7fe fec4 	bl	80008ac <__aeabi_ddiv>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd26 	bl	8000584 <__aeabi_i2d>
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fd8c 	bl	8000658 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f7fe fbce 	bl	80002ec <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b58:	f7fe fbc8 	bl	80002ec <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4ba9      	ldr	r3, [pc, #676]	@ (8001e10 <compensate_pressure+0x378>)
 8001b6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6e:	f7fe fe9d 	bl	80008ac <__aeabi_ddiv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4614      	mov	r4, r2
 8001b78:	461d      	mov	r5, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fcff 	bl	8000584 <__aeabi_i2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4ba2      	ldr	r3, [pc, #648]	@ (8001e14 <compensate_pressure+0x37c>)
 8001b8c:	f7fe fd64 	bl	8000658 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fba8 	bl	80002ec <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcea 	bl	8000584 <__aeabi_i2d>
 8001bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb4:	f7fe fd50 	bl	8000658 <__aeabi_dmul>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bc4:	f7fe fd48 	bl	8000658 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b90      	ldr	r3, [pc, #576]	@ (8001e18 <compensate_pressure+0x380>)
 8001bd6:	f7fe fe69 	bl	80008ac <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	461d      	mov	r5, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fccb 	bl	8000584 <__aeabi_i2d>
 8001bee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf2:	f7fe fd31 	bl	8000658 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fb75 	bl	80002ec <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b82      	ldr	r3, [pc, #520]	@ (8001e18 <compensate_pressure+0x380>)
 8001c10:	f7fe fe4c 	bl	80008ac <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b7a      	ldr	r3, [pc, #488]	@ (8001e0c <compensate_pressure+0x374>)
 8001c22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c26:	f7fe fe41 	bl	80008ac <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b79      	ldr	r3, [pc, #484]	@ (8001e1c <compensate_pressure+0x384>)
 8001c38:	f7fe fb58 	bl	80002ec <__adddf3>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc8b 	bl	8000564 <__aeabi_ui2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4620      	mov	r0, r4
 8001c54:	4629      	mov	r1, r5
 8001c56:	f7fe fcff 	bl	8000658 <__aeabi_dmul>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c6e:	f7fe ff65 	bl	8000b3c <__aeabi_dcmplt>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <compensate_pressure+0x1f8>
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c84:	f7fe ff78 	bl	8000b78 <__aeabi_dcmpgt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 80de 	beq.w	8001e4c <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc65 	bl	8000564 <__aeabi_ui2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	f04f 0000 	mov.w	r0, #0
 8001ca2:	495f      	ldr	r1, [pc, #380]	@ (8001e20 <compensate_pressure+0x388>)
 8001ca4:	f7fe fb20 	bl	80002e8 <__aeabi_dsub>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <compensate_pressure+0x38c>)
 8001cb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cba:	f7fe fdf7 	bl	80008ac <__aeabi_ddiv>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cc6:	f7fe fb0f 	bl	80002e8 <__aeabi_dsub>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	a347      	add	r3, pc, #284	@ (adr r3, 8001df0 <compensate_pressure+0x358>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe fcbe 	bl	8000658 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce8:	f7fe fde0 	bl	80008ac <__aeabi_ddiv>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc42 	bl	8000584 <__aeabi_i2d>
 8001d00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d04:	f7fe fca8 	bl	8000658 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d14:	f7fe fca0 	bl	8000658 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b40      	ldr	r3, [pc, #256]	@ (8001e28 <compensate_pressure+0x390>)
 8001d26:	f7fe fdc1 	bl	80008ac <__aeabi_ddiv>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fc23 	bl	8000584 <__aeabi_i2d>
 8001d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d42:	f7fe fc89 	bl	8000658 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <compensate_pressure+0x374>)
 8001d54:	f7fe fdaa 	bl	80008ac <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d68:	f7fe fac0 	bl	80002ec <__adddf3>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	461d      	mov	r5, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc02 	bl	8000584 <__aeabi_i2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fab0 	bl	80002ec <__adddf3>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <compensate_pressure+0x394>)
 8001d9a:	f7fe fd87 	bl	80008ac <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001da6:	f7fe faa1 	bl	80002ec <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001db2:	a311      	add	r3, pc, #68	@ (adr r3, 8001df8 <compensate_pressure+0x360>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001dbc:	f7fe febe 	bl	8000b3c <__aeabi_dcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001dc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001df8 <compensate_pressure+0x360>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001dd6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001e00 <compensate_pressure+0x368>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001de0:	f7fe feca 	bl	8000b78 <__aeabi_dcmpgt>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	e022      	b.n	8001e30 <compensate_pressure+0x398>
 8001dea:	bf00      	nop
 8001dec:	f3af 8000 	nop.w
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40b86a00 	.word	0x40b86a00
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40dd4c00 	.word	0x40dd4c00
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40fadb00 	.word	0x40fadb00
 8001e08:	40ef4000 	.word	0x40ef4000
 8001e0c:	40e00000 	.word	0x40e00000
 8001e10:	40100000 	.word	0x40100000
 8001e14:	40f00000 	.word	0x40f00000
 8001e18:	41200000 	.word	0x41200000
 8001e1c:	3ff00000 	.word	0x3ff00000
 8001e20:	41300000 	.word	0x41300000
 8001e24:	40b00000 	.word	0x40b00000
 8001e28:	41e00000 	.word	0x41e00000
 8001e2c:	40300000 	.word	0x40300000
 8001e30:	d007      	beq.n	8001e42 <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001e32:	a309      	add	r3, pc, #36	@ (adr r3, 8001e58 <compensate_pressure+0x3c0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001e4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdb0      	pop	{r4, r5, r7, pc}
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40fadb00 	.word	0x40fadb00

08001e60 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db03      	blt.n	8001e7c <st_check_boundaries+0x1c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	dd09      	ble.n	8001e90 <st_check_boundaries+0x30>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db06      	blt.n	8001e90 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a18      	ldr	r2, [pc, #96]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	dc02      	bgt.n	8001e90 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001e8a:	23fa      	movs	r3, #250	@ 0xfa
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	e023      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db03      	blt.n	8001e9e <st_check_boundaries+0x3e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	dd09      	ble.n	8001eb2 <st_check_boundaries+0x52>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db06      	blt.n	8001eb2 <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	dc02      	bgt.n	8001eb2 <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001eac:	23fb      	movs	r3, #251	@ 0xfb
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e012      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db03      	blt.n	8001ec0 <st_check_boundaries+0x60>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	dd09      	ble.n	8001ed4 <st_check_boundaries+0x74>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db03      	blt.n	8001ece <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	@ (8001ee8 <st_check_boundaries+0x88>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	dd02      	ble.n	8001ed4 <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001ece:	23f9      	movs	r3, #249	@ 0xf9
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e001      	b.n	8001ed8 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	000ffff0 	.word	0x000ffff0

08001eec <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff f839 	bl	8000f6c <bmp2_init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff f91e 	bl	8001146 <bmp2_get_config>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001f12:	2300      	movs	r3, #0
 8001f14:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001f16:	2303      	movs	r3, #3
 8001f18:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001f1a:	f107 0308 	add.w	r3, r7, #8
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f950 	bl	80011c6 <bmp2_set_config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4619      	mov	r1, r3
 8001f32:	2003      	movs	r0, #3
 8001f34:	f7ff f982 	bl	800123c <bmp2_set_power_mode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001f3c:	f107 0108 	add.w	r1, r7, #8
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff fa0c 	bl	8001364 <bmp2_compute_meas_time>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8001f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	4603      	mov	r3, r0
 8001f6a:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001f70:	2300      	movs	r3, #0
 8001f72:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	6858      	ldr	r0, [r3, #4]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	891b      	ldrh	r3, [r3, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	4619      	mov	r1, r3
 8001f84:	f003 fa5c 	bl	8005440 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 010f 	add.w	r1, r7, #15
 8001f90:	2305      	movs	r3, #5
 8001f92:	2201      	movs	r2, #1
 8001f94:	f005 f88d 	bl	80070b2 <HAL_SPI_Transmit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	f005 f9f1 	bl	800738e <HAL_SPI_Receive>
 8001fac:	4603      	mov	r3, r0
 8001fae:	461a      	mov	r2, r3
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	6858      	ldr	r0, [r3, #4]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	891b      	ldrh	r3, [r3, #8]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f003 fa3d 	bl	8005440 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8001fc6:	7dbb      	ldrb	r3, [r7, #22]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <bmp2_spi_read+0x74>
    iError = -1;
 8001fcc:	23ff      	movs	r3, #255	@ 0xff
 8001fce:	75fb      	strb	r3, [r7, #23]

  return iError;
 8001fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6858      	ldr	r0, [r3, #4]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	891b      	ldrh	r3, [r3, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	4619      	mov	r1, r3
 8002004:	f003 fa1c 	bl	8005440 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 010f 	add.w	r1, r7, #15
 8002010:	2305      	movs	r3, #5
 8002012:	2201      	movs	r2, #1
 8002014:	f005 f84d 	bl	80070b2 <HAL_SPI_Transmit>
 8002018:	4603      	mov	r3, r0
 800201a:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2305      	movs	r3, #5
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	f005 f843 	bl	80070b2 <HAL_SPI_Transmit>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	7dbb      	ldrb	r3, [r7, #22]
 8002032:	4413      	add	r3, r2
 8002034:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6858      	ldr	r0, [r3, #4]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	891b      	ldrh	r3, [r3, #8]
 800203e:	2201      	movs	r2, #1
 8002040:	4619      	mov	r1, r3
 8002042:	f003 f9fd 	bl	8005440 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 8002046:	7dbb      	ldrb	r3, [r7, #22]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <bmp2_spi_write+0x74>
    iError = -1;
 800204c:	23ff      	movs	r3, #255	@ 0xff
 800204e:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a05      	ldr	r2, [pc, #20]	@ (8002080 <bmp2_delay_us+0x24>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	099b      	lsrs	r3, r3, #6
 8002070:	4618      	mov	r0, r3
 8002072:	f001 fbf3 	bl	800385c <HAL_Delay>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	10624dd3 	.word	0x10624dd3

08002084 <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b08b      	sub	sp, #44	@ 0x2c
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002090:	23ff      	movs	r3, #255	@ 0xff
 8002092:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	899b      	ldrh	r3, [r3, #12]
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 80020a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a4:	68f9      	ldr	r1, [r7, #12]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f89c 	bl	80011e4 <bmp2_get_status>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	68f9      	ldr	r1, [r7, #12]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff f8d4 	bl	8001266 <bmp2_get_sensor_data>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 80020c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 80020ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <BMP2_ReadData+0xc4>)
 80020d8:	f7fe fbe8 	bl	80008ac <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 80020e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80020f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <BMP2_ReadData+0x80>
 80020fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002100:	2b00      	cmp	r3, #0
 8002102:	dccd      	bgt.n	80020a0 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	68f9      	ldr	r1, [r7, #12]
 800210c:	684c      	ldr	r4, [r1, #4]
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd63 	bl	8000bdc <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
 8002118:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	684c      	ldr	r4, [r1, #4]
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fd58 	bl	8000bdc <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002138:	729a      	strb	r2, [r3, #10]

  return rslt;
 800213a:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 800213e:	4618      	mov	r0, r3
 8002140:	372c      	adds	r7, #44	@ 0x2c
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}
 8002146:	bf00      	nop
 8002148:	40590000 	.word	0x40590000

0800214c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <vApplicationGetIdleTaskMemory+0x2c>)
 800215c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4a06      	ldr	r2, [pc, #24]	@ (800217c <vApplicationGetIdleTaskMemory+0x30>)
 8002162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2280      	movs	r2, #128	@ 0x80
 8002168:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000248 	.word	0x20000248
 800217c:	200002e8 	.word	0x200002e8

08002180 <StartHttpServerTask>:
  * @param  None
  * @retval None
  */

void StartHttpServerTask(void *argument)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    // Wait for the network interface to be up
    while (!netif_is_up(&gnetif))
 8002188:	e002      	b.n	8002190 <StartHttpServerTask+0x10>
    {
        osDelay(100);
 800218a:	2064      	movs	r0, #100	@ 0x64
 800218c:	f009 f87a 	bl	800b284 <osDelay>
    while (!netif_is_up(&gnetif))
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <StartHttpServerTask+0x2c>)
 8002192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f5      	beq.n	800218a <StartHttpServerTask+0xa>
    }

    // Start the HTTP server
    httpd_init();
 800219e:	f00f fa4b 	bl	8011638 <httpd_init>

    // Keep the task running
    for (;;)
    {
        osDelay(1000);
 80021a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021a6:	f009 f86d 	bl	800b284 <osDelay>
 80021aa:	e7fa      	b.n	80021a2 <StartHttpServerTask+0x22>
 80021ac:	20000748 	.word	0x20000748

080021b0 <MX_FREERTOS_Init>:
    }
}


void MX_FREERTOS_Init(void) {
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b09c      	sub	sp, #112	@ 0x70
 80021b4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80021b6:	4b25      	ldr	r3, [pc, #148]	@ (800224c <MX_FREERTOS_Init+0x9c>)
 80021b8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80021bc:	461d      	mov	r5, r3
 80021be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ce:	2100      	movs	r1, #0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f009 f80b 	bl	800b1ec <osThreadCreate>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <MX_FREERTOS_Init+0xa0>)
 80021da:	6013      	str	r3, [r2, #0]

  /* definition and creation of udpechoTask */
  osThreadDef(udpechoTask, StartUdpEcho, osPriorityRealtime, 0, 1024);
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <MX_FREERTOS_Init+0xa4>)
 80021de:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  udpechoTaskHandle = osThreadCreate(osThread(udpechoTask), NULL);
 80021f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f008 fff8 	bl	800b1ec <osThreadCreate>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a16      	ldr	r2, [pc, #88]	@ (8002258 <MX_FREERTOS_Init+0xa8>)
 8002200:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpechoTask */
  osThreadDef(tcpechoTask, StartTcpEcho, osPriorityRealtime, 0, 1024);
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_FREERTOS_Init+0xac>)
 8002204:	f107 041c 	add.w	r4, r7, #28
 8002208:	461d      	mov	r5, r3
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tcpechoTaskHandle = osThreadCreate(osThread(tcpechoTask), NULL);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f008 ffe5 	bl	800b1ec <osThreadCreate>
 8002222:	4603      	mov	r3, r0
 8002224:	4a0e      	ldr	r2, [pc, #56]	@ (8002260 <MX_FREERTOS_Init+0xb0>)
 8002226:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(httpServerTask, StartHttpServerTask, osPriorityNormal, 0, 1024);
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <MX_FREERTOS_Init+0xb4>)
 800222a:	463c      	mov	r4, r7
 800222c:	461d      	mov	r5, r3
 800222e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002232:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(httpServerTask), NULL);
 800223a:	463b      	mov	r3, r7
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f008 ffd4 	bl	800b1ec <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

}
 8002244:	bf00      	nop
 8002246:	3770      	adds	r7, #112	@ 0x70
 8002248:	46bd      	mov	sp, r7
 800224a:	bdb0      	pop	{r4, r5, r7, pc}
 800224c:	0801e07c 	.word	0x0801e07c
 8002250:	2000023c 	.word	0x2000023c
 8002254:	0801e0a4 	.word	0x0801e0a4
 8002258:	20000240 	.word	0x20000240
 800225c:	0801e0cc 	.word	0x0801e0cc
 8002260:	20000244 	.word	0x20000244
 8002264:	0801e0f8 	.word	0x0801e0f8

08002268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002270:	f008 f94a 	bl	800a508 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002274:	2101      	movs	r1, #1
 8002276:	4804      	ldr	r0, [pc, #16]	@ (8002288 <StartDefaultTask+0x20>)
 8002278:	f003 f8fb 	bl	8005472 <HAL_GPIO_TogglePin>
    osDelay(100);
 800227c:	2064      	movs	r0, #100	@ 0x64
 800227e:	f009 f801 	bl	800b284 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8002282:	bf00      	nop
 8002284:	e7f6      	b.n	8002274 <StartDefaultTask+0xc>
 8002286:	bf00      	nop
 8002288:	40020400 	.word	0x40020400

0800228c <StartUdpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUdpEcho */
void StartUdpEcho(void const * argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0a0      	sub	sp, #128	@ 0x80
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  struct netconn *conn;
  struct netbuf *buf;
  char buffer[32];
  char response[64];
  err_t err;
  int msg_cnt = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	67fb      	str	r3, [r7, #124]	@ 0x7c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8002298:	2064      	movs	r0, #100	@ 0x64
 800229a:	f008 fff3 	bl	800b284 <osDelay>
#if LWIP_IPV6
  conn = netconn_new(NETCONN_UDP_IPV6);
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
  netconn_bind(conn, IP6_ADDR_ANY, 8);
#else /* LWIP_IPV6 */
  conn = netconn_new(NETCONN_UDP);
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	2020      	movs	r0, #32
 80022a4:	f00c f818 	bl	800e2d8 <netconn_new_with_proto_and_callback>
 80022a8:	67b8      	str	r0, [r7, #120]	@ 0x78
  LWIP_ERROR("udpecho: invalid conn", (conn != NULL), return;);
 80022aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <StartUdpEcho+0x32>
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <StartUdpEcho+0xe0>)
 80022b2:	22ce      	movs	r2, #206	@ 0xce
 80022b4:	492e      	ldr	r1, [pc, #184]	@ (8002370 <StartUdpEcho+0xe4>)
 80022b6:	482f      	ldr	r0, [pc, #188]	@ (8002374 <StartUdpEcho+0xe8>)
 80022b8:	f01a fd6e 	bl	801cd98 <iprintf>
 80022bc:	e053      	b.n	8002366 <StartUdpEcho+0xda>
  netconn_bind(conn, IP_ADDR_ANY, 8);
 80022be:	2208      	movs	r2, #8
 80022c0:	492d      	ldr	r1, [pc, #180]	@ (8002378 <StartUdpEcho+0xec>)
 80022c2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80022c4:	f00c f8c2 	bl	800e44c <netconn_bind>
#endif /* LWIP_IPV6 */
  /* Infinite loop */
  for(;;)
  {
	err = netconn_recv(conn, &buf);
 80022c8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022cc:	4619      	mov	r1, r3
 80022ce:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80022d0:	f00c fb28 	bl	800e924 <netconn_recv>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	if (err == ERR_OK)
 80022da:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f2      	bne.n	80022c8 <StartUdpEcho+0x3c>
	{
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2180      	movs	r1, #128	@ 0x80
 80022e6:	4825      	ldr	r0, [pc, #148]	@ (800237c <StartUdpEcho+0xf0>)
 80022e8:	f003 f8aa 	bl	8005440 <HAL_GPIO_WritePin>
	  /*  no need netconn_connect here, since the netbuf contains the address */
      if(netbuf_copy(buf, buffer, sizeof(buffer)) != buf->p->tot_len)
 80022ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80022f4:	2300      	movs	r3, #0
 80022f6:	2220      	movs	r2, #32
 80022f8:	f010 ffec 	bl	80132d4 <pbuf_copy_partial>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	891b      	ldrh	r3, [r3, #8]
 8002306:	429a      	cmp	r2, r3
 8002308:	d123      	bne.n	8002352 <StartUdpEcho+0xc6>
	  {
        LWIP_DEBUGF(LWIP_DBG_ON, ("netbuf_copy failed\n"));
	  }
	  else
	  {
		msg_cnt++;
 800230a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230c:	3301      	adds	r3, #1
 800230e:	67fb      	str	r3, [r7, #124]	@ 0x7c
		buffer[buf->p->tot_len] = '\0';
 8002310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	891b      	ldrh	r3, [r3, #8]
 8002316:	3380      	adds	r3, #128	@ 0x80
 8002318:	443b      	add	r3, r7
 800231a:	2200      	movs	r2, #0
 800231c:	f803 2c34 	strb.w	r2, [r3, #-52]
		int response_len = sprintf(response, "\r\nMessage #%03d: %s", msg_cnt, buffer);
 8002320:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002324:	f107 000c 	add.w	r0, r7, #12
 8002328:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800232a:	4915      	ldr	r1, [pc, #84]	@ (8002380 <StartUdpEcho+0xf4>)
 800232c:	f01a fd46 	bl	801cdbc <siprintf>
 8002330:	6738      	str	r0, [r7, #112]	@ 0x70
		netbuf_ref(buf, response, response_len);
 8002332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002334:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002336:	b292      	uxth	r2, r2
 8002338:	f107 010c 	add.w	r1, r7, #12
 800233c:	4618      	mov	r0, r3
 800233e:	f00e f905 	bl	801054c <netbuf_ref>
		err = netconn_send(conn, buf);
 8002342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002344:	4619      	mov	r1, r3
 8002346:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002348:	f00c fb66 	bl	800ea18 <netconn_send>
 800234c:	4603      	mov	r3, r0
 800234e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		else
		{
		  LWIP_DEBUGF(LWIP_DBG_ON, ("got %s\n", buffer));
		}
	  }
	  netbuf_delete(buf);
 8002352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002354:	4618      	mov	r0, r3
 8002356:	f00e f8d9 	bl	801050c <netbuf_delete>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	4807      	ldr	r0, [pc, #28]	@ (800237c <StartUdpEcho+0xf0>)
 8002360:	f003 f86e 	bl	8005440 <HAL_GPIO_WritePin>
	err = netconn_recv(conn, &buf);
 8002364:	e7b0      	b.n	80022c8 <StartUdpEcho+0x3c>
	}
  }
  /* USER CODE END StartUdpEcho */
}
 8002366:	3780      	adds	r7, #128	@ 0x80
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	0801e114 	.word	0x0801e114
 8002370:	0801e12c 	.word	0x0801e12c
 8002374:	0801e144 	.word	0x0801e144
 8002378:	08022778 	.word	0x08022778
 800237c:	40020400 	.word	0x40020400
 8002380:	0801e16c 	.word	0x0801e16c

08002384 <StartTcpEcho>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTcpEcho */
void StartTcpEcho(void const * argument)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b096      	sub	sp, #88	@ 0x58
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  int msg_cnt = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LWIP_UNUSED_ARG(argument);

  osDelay(100);
 8002390:	2064      	movs	r0, #100	@ 0x64
 8002392:	f008 ff77 	bl	800b284 <osDelay>

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2010      	movs	r0, #16
 800239c:	f00b ff9c 	bl	800e2d8 <netconn_new_with_proto_and_callback>
 80023a0:	64b8      	str	r0, [r7, #72]	@ 0x48

  if (conn!=NULL)
 80023a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8083 	beq.w	80024b0 <StartTcpEcho+0x12c>
  {
	/* Bind connection to well known port number 7. */
	err = netconn_bind(conn, NULL, 7);
 80023aa:	2207      	movs	r2, #7
 80023ac:	2100      	movs	r1, #0
 80023ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80023b0:	f00c f84c 	bl	800e44c <netconn_bind>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (err == ERR_OK)
 80023ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d172      	bne.n	80024a8 <StartTcpEcho+0x124>
	{
	  /* Tell connection to go into listening mode. */
	  netconn_listen(conn);
 80023c2:	21ff      	movs	r1, #255	@ 0xff
 80023c4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80023c6:	f00c f879 	bl	800e4bc <netconn_listen_with_backlog>
      /* Infinite loop */
	  for(;;)
	  {

		/* Grab new connection. */
		accept_err = netconn_accept(conn, &newconn);
 80023ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023ce:	4619      	mov	r1, r3
 80023d0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80023d2:	f00c f89f 	bl	800e514 <netconn_accept>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

		/* Process the new connection. */
		if (accept_err == ERR_OK)
 80023dc:	f997 3046 	ldrsb.w	r3, [r7, #70]	@ 0x46
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1f2      	bne.n	80023ca <StartTcpEcho+0x46>
		{

		  while (netconn_recv(newconn, &buf) == ERR_OK)
 80023e4:	e04d      	b.n	8002482 <StartTcpEcho+0xfe>
	      {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ec:	4832      	ldr	r0, [pc, #200]	@ (80024b8 <StartTcpEcho+0x134>)
 80023ee:	f003 f827 	bl	8005440 <HAL_GPIO_WritePin>
		    msg_cnt++;
 80023f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f4:	3301      	adds	r3, #1
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		    do
		    {
			  netbuf_data(buf, &data, &len);
 80023f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fa:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 80023fe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002402:	4618      	mov	r0, r3
 8002404:	f00e f8ec 	bl	80105e0 <netbuf_data>
			  char prefix[32];
			  int prefix_len = sprintf(prefix, "\r\nMessage #%03d: ", msg_cnt);
 8002408:	f107 030c 	add.w	r3, r7, #12
 800240c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800240e:	492b      	ldr	r1, [pc, #172]	@ (80024bc <StartTcpEcho+0x138>)
 8002410:	4618      	mov	r0, r3
 8002412:	f01a fcd3 	bl	801cdbc <siprintf>
 8002416:	6438      	str	r0, [r7, #64]	@ 0x40
			  netconn_write(newconn, prefix, prefix_len, NETCONN_COPY);
 8002418:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800241a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800241c:	f107 010c 	add.w	r1, r7, #12
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2301      	movs	r3, #1
 8002426:	f00c fb25 	bl	800ea74 <netconn_write_partly>
			  netconn_write(newconn, data, len, NETCONN_COPY);
 800242a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800242c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800242e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002430:	461a      	mov	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2301      	movs	r3, #1
 8002438:	f00c fb1c 	bl	800ea74 <netconn_write_partly>
			  char postfix[] = "\r\n";
 800243c:	4a20      	ldr	r2, [pc, #128]	@ (80024c0 <StartTcpEcho+0x13c>)
 800243e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	4611      	mov	r1, r2
 8002446:	8019      	strh	r1, [r3, #0]
 8002448:	3302      	adds	r3, #2
 800244a:	0c12      	lsrs	r2, r2, #16
 800244c:	701a      	strb	r2, [r3, #0]
			  netconn_write(newconn, postfix, 2, NETCONN_NOFLAG);
 800244e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002450:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	2202      	movs	r2, #2
 800245c:	f00c fb0a 	bl	800ea74 <netconn_write_partly>
		    } while (netbuf_next(buf) >= 0);
 8002460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002462:	4618      	mov	r0, r3
 8002464:	f00e f906 	bl	8010674 <netbuf_next>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	dac4      	bge.n	80023f8 <StartTcpEcho+0x74>
            netbuf_delete(buf);
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	4618      	mov	r0, r3
 8002472:	f00e f84b 	bl	801050c <netbuf_delete>
  		    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800247c:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <StartTcpEcho+0x134>)
 800247e:	f002 ffdf 	bl	8005440 <HAL_GPIO_WritePin>
		  while (netconn_recv(newconn, &buf) == ERR_OK)
 8002482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002484:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f00c fa4a 	bl	800e924 <netconn_recv>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0a7      	beq.n	80023e6 <StartTcpEcho+0x62>
		  }

		  /* Close connection and discard connection identifier. */
		  netconn_close(newconn);
 8002496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002498:	4618      	mov	r0, r3
 800249a:	f00c fbed 	bl	800ec78 <netconn_close>
		  netconn_delete(newconn);
 800249e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00b ffb7 	bl	800e414 <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 80024a6:	e790      	b.n	80023ca <StartTcpEcho+0x46>
		}
	  }
	}
    else
    {
      netconn_delete(newconn);
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b ffb2 	bl	800e414 <netconn_delete>
    }
  }
  /* USER CODE END StartTcpEcho */
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	@ 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40020400 	.word	0x40020400
 80024bc:	0801e180 	.word	0x0801e180
 80024c0:	0801e194 	.word	0x0801e194

080024c4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ca:	f107 031c 	add.w	r3, r7, #28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
 80024d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024da:	4b65      	ldr	r3, [pc, #404]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a64      	ldr	r2, [pc, #400]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b62      	ldr	r3, [pc, #392]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 80024f8:	f043 0304 	orr.w	r3, r3, #4
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800250a:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b56      	ldr	r3, [pc, #344]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b4d      	ldr	r3, [pc, #308]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a4c      	ldr	r2, [pc, #304]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a46      	ldr	r2, [pc, #280]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002558:	f043 0308 	orr.w	r3, r3, #8
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b44      	ldr	r3, [pc, #272]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <MX_GPIO_Init+0x1ac>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2110      	movs	r1, #16
 8002586:	483b      	ldr	r0, [pc, #236]	@ (8002674 <MX_GPIO_Init+0x1b0>)
 8002588:	f002 ff5a 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800258c:	2200      	movs	r2, #0
 800258e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002592:	4839      	ldr	r0, [pc, #228]	@ (8002678 <MX_GPIO_Init+0x1b4>)
 8002594:	f002 ff54 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	@ 0x40
 800259c:	4837      	ldr	r0, [pc, #220]	@ (800267c <MX_GPIO_Init+0x1b8>)
 800259e:	f002 ff4f 	bl	8005440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 80025a2:	2310      	movs	r3, #16
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 031c 	add.w	r3, r7, #28
 80025b6:	4619      	mov	r1, r3
 80025b8:	482e      	ldr	r0, [pc, #184]	@ (8002674 <MX_GPIO_Init+0x1b0>)
 80025ba:	f002 fd95 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	482a      	ldr	r0, [pc, #168]	@ (8002680 <MX_GPIO_Init+0x1bc>)
 80025d6:	f002 fd87 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025da:	f244 0381 	movw	r3, #16513	@ 0x4081
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	4821      	ldr	r0, [pc, #132]	@ (8002678 <MX_GPIO_Init+0x1b4>)
 80025f4:	f002 fd78 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80025f8:	2340      	movs	r3, #64	@ 0x40
 80025fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	481b      	ldr	r0, [pc, #108]	@ (800267c <MX_GPIO_Init+0x1b8>)
 8002610:	f002 fd6a 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	4815      	ldr	r0, [pc, #84]	@ (800267c <MX_GPIO_Init+0x1b8>)
 8002628:	f002 fd5e 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800262c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800263e:	230a      	movs	r3, #10
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	4619      	mov	r1, r3
 8002648:	480e      	ldr	r0, [pc, #56]	@ (8002684 <MX_GPIO_Init+0x1c0>)
 800264a:	f002 fd4d 	bl	80050e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800264e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 031c 	add.w	r3, r7, #28
 8002660:	4619      	mov	r1, r3
 8002662:	4808      	ldr	r0, [pc, #32]	@ (8002684 <MX_GPIO_Init+0x1c0>)
 8002664:	f002 fd40 	bl	80050e8 <HAL_GPIO_Init>

}
 8002668:	bf00      	nop
 800266a:	3730      	adds	r7, #48	@ 0x30
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	40021000 	.word	0x40021000
 8002678:	40020400 	.word	0x40020400
 800267c:	40021800 	.word	0x40021800
 8002680:	40020800 	.word	0x40020800
 8002684:	40020000 	.word	0x40020000

08002688 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800268c:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <MX_I2C1_Init+0x74>)
 800268e:	4a1c      	ldr	r2, [pc, #112]	@ (8002700 <MX_I2C1_Init+0x78>)
 8002690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_I2C1_Init+0x74>)
 8002694:	4a1b      	ldr	r2, [pc, #108]	@ (8002704 <MX_I2C1_Init+0x7c>)
 8002696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <MX_I2C1_Init+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800269e:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026aa:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026b0:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026c2:	480e      	ldr	r0, [pc, #56]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026c4:	f002 fef0 	bl	80054a8 <HAL_I2C_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026ce:	f000 fb3b 	bl	8002d48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026d2:	2100      	movs	r1, #0
 80026d4:	4809      	ldr	r0, [pc, #36]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026d6:	f003 fa5d 	bl	8005b94 <HAL_I2CEx_ConfigAnalogFilter>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026e0:	f000 fb32 	bl	8002d48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026e4:	2100      	movs	r1, #0
 80026e6:	4805      	ldr	r0, [pc, #20]	@ (80026fc <MX_I2C1_Init+0x74>)
 80026e8:	f003 fa9f 	bl	8005c2a <HAL_I2CEx_ConfigDigitalFilter>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026f2:	f000 fb29 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200004e8 	.word	0x200004e8
 8002700:	40005400 	.word	0x40005400
 8002704:	20404768 	.word	0x20404768

08002708 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b0aa      	sub	sp, #168	@ 0xa8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	2284      	movs	r2, #132	@ 0x84
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f01a fbd4 	bl	801ced6 <memset>
  if(i2cHandle->Instance==I2C1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a22      	ldr	r2, [pc, #136]	@ (80027bc <HAL_I2C_MspInit+0xb4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d13c      	bne.n	80027b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002738:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800273c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800273e:	2300      	movs	r3, #0
 8002740:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	4618      	mov	r0, r3
 8002748:	f004 f818 	bl	800677c <HAL_RCCEx_PeriphCLKConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002752:	f000 faf9 	bl	8002d48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a19      	ldr	r2, [pc, #100]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800276e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002772:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002776:	2312      	movs	r3, #18
 8002778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002788:	2304      	movs	r3, #4
 800278a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002792:	4619      	mov	r1, r3
 8002794:	480b      	ldr	r0, [pc, #44]	@ (80027c4 <HAL_I2C_MspInit+0xbc>)
 8002796:	f002 fca7 	bl	80050e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 80027a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_I2C_MspInit+0xb8>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	37a8      	adds	r7, #168	@ 0xa8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40005400 	.word	0x40005400
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020400 	.word	0x40020400

080027c8 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80027de:	2308      	movs	r3, #8
 80027e0:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80027e2:	2028      	movs	r0, #40	@ 0x28
 80027e4:	f001 f83a 	bl	800385c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	2130      	movs	r1, #48	@ 0x30
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 f829 	bl	8002848 <lcd_write>
	HAL_Delay(5);
 80027f6:	2005      	movs	r0, #5
 80027f8:	f001 f830 	bl	800385c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	2130      	movs	r1, #48	@ 0x30
 8002804:	4618      	mov	r0, r3
 8002806:	f000 f81f 	bl	8002848 <lcd_write>
	HAL_Delay(1);
 800280a:	2001      	movs	r0, #1
 800280c:	f001 f826 	bl	800385c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	2130      	movs	r1, #48	@ 0x30
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f815 	bl	8002848 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	2102      	movs	r1, #2
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f80e 	bl	8002848 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	210c      	movs	r1, #12
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f807 	bl	8002848 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f89f 	bl	800297e <lcd_clear>

}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
 8002852:	460b      	mov	r3, r1
 8002854:	71bb      	strb	r3, [r7, #6]
 8002856:	4613      	mov	r3, r2
 8002858:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	f023 030f 	bic.w	r3, r3, #15
 8002860:	b2da      	uxtb	r2, r3
 8002862:	797b      	ldrb	r3, [r7, #5]
 8002864:	4313      	orrs	r3, r2
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	b2db      	uxtb	r3, r3
 800286e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8002870:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002874:	f023 030f 	bic.w	r3, r3, #15
 8002878:	b25a      	sxtb	r2, r3
 800287a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800287e:	4313      	orrs	r3, r2
 8002880:	b25b      	sxtb	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8002886:	79bb      	ldrb	r3, [r7, #6]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	b2da      	uxtb	r2, r3
 800288c:	797b      	ldrb	r3, [r7, #5]
 800288e:	4313      	orrs	r3, r2
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	b2db      	uxtb	r3, r3
 8002898:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800289a:	79bb      	ldrb	r3, [r7, #6]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	b25a      	sxtb	r2, r3
 80028a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	b299      	uxth	r1, r3
 80028b0:	f107 020c 	add.w	r2, r7, #12
 80028b4:	2364      	movs	r3, #100	@ 0x64
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2304      	movs	r3, #4
 80028ba:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <lcd_write+0x88>)
 80028bc:	f002 fe84 	bl	80055c8 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80028c0:	2005      	movs	r0, #5
 80028c2:	f000 ffcb 	bl	800385c <HAL_Delay>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200004e8 	.word	0x200004e8

080028d4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	2300      	movs	r3, #0
 80028e2:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 80028ee:	2308      	movs	r3, #8
 80028f0:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f843 	bl	800297e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	2180      	movs	r1, #128	@ 0x80
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ffa1 	bl	8002848 <lcd_write>
	while(lcd->f_line[i])
 8002906:	e00f      	b.n	8002928 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7818      	ldrb	r0, [r3, #0]
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	7859      	ldrb	r1, [r3, #1]
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	f7ff ff93 	bl	8002848 <lcd_write>
		i++;
 8002922:	7bbb      	ldrb	r3, [r7, #14]
 8002924:	3301      	adds	r3, #1
 8002926:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e9      	bne.n	8002908 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	21c0      	movs	r1, #192	@ 0xc0
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff81 	bl	8002848 <lcd_write>
	while(lcd->s_line[i])
 8002946:	e00f      	b.n	8002968 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7818      	ldrb	r0, [r3, #0]
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	7c99      	ldrb	r1, [r3, #18]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	f7ff ff73 	bl	8002848 <lcd_write>
		i++;
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	3301      	adds	r3, #1
 8002966:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	7c9b      	ldrb	r3, [r3, #18]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e9      	bne.n	8002948 <lcd_display+0x74>
	}
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8002994:	2308      	movs	r3, #8
 8002996:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff51 	bl	8002848 <lcd_write>
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  return (HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	4807      	ldr	r0, [pc, #28]	@ (80029e4 <_write+0x34>)
 80029c8:	f006 fb10 	bl	8008fec <HAL_UART_Transmit>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <_write+0x26>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e001      	b.n	80029da <_write+0x2a>
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200006bc 	.word	0x200006bc

080029e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b08c      	sub	sp, #48	@ 0x30
 80029ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ee:	f000 ff07 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f2:	f000 f8c1 	bl	8002b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f6:	f7ff fd65 	bl	80024c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80029fa:	f000 fcdf 	bl	80033bc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80029fe:	f7ff fe43 	bl	8002688 <MX_I2C1_Init>
  MX_SPI4_Init();
 8002a02:	f000 f9a7 	bl	8002d54 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002a06:	f000 fbc3 	bl	8003190 <MX_TIM2_Init>
  MX_TIM7_Init();
 8002a0a:	f000 fc37 	bl	800327c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <main+0x14c>)
 8002a10:	224e      	movs	r2, #78	@ 0x4e
 8002a12:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8002a14:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <main+0x14c>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  lcd_init(&disp);
 8002a1c:	4845      	ldr	r0, [pc, #276]	@ (8002b34 <main+0x14c>)
 8002a1e:	f7ff fed3 	bl	80027c8 <lcd_init>
  sprintf((char *)disp.f_line, "Wartosc: %.2f", my_variable);
 8002a22:	4b45      	ldr	r3, [pc, #276]	@ (8002b38 <main+0x150>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fdbe 	bl	80005a8 <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4942      	ldr	r1, [pc, #264]	@ (8002b3c <main+0x154>)
 8002a32:	4843      	ldr	r0, [pc, #268]	@ (8002b40 <main+0x158>)
 8002a34:	f01a f9c2 	bl	801cdbc <siprintf>
  sprintf((char *)disp.s_line, "");
 8002a38:	4942      	ldr	r1, [pc, #264]	@ (8002b44 <main+0x15c>)
 8002a3a:	4843      	ldr	r0, [pc, #268]	@ (8002b48 <main+0x160>)
 8002a3c:	f01a f9be 	bl	801cdbc <siprintf>
  lcd_display(&disp);
 8002a40:	483c      	ldr	r0, [pc, #240]	@ (8002b34 <main+0x14c>)
 8002a42:	f7ff ff47 	bl	80028d4 <lcd_display>

  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8002a46:	2201      	movs	r2, #1
 8002a48:	4940      	ldr	r1, [pc, #256]	@ (8002b4c <main+0x164>)
 8002a4a:	4841      	ldr	r0, [pc, #260]	@ (8002b50 <main+0x168>)
 8002a4c:	f006 fb51 	bl	80090f2 <HAL_UART_Receive_IT>

  BMP2_Init(&bmp2dev);
 8002a50:	4840      	ldr	r0, [pc, #256]	@ (8002b54 <main+0x16c>)
 8002a52:	f7ff fa4b 	bl	8001eec <BMP2_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002a56:	f7ff fbab 	bl	80021b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002a5a:	f008 fbb0 	bl	800b1be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float prev_variable = -1.0;
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <main+0x170>)
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (1)
  {
	  char buffer[16];
	      sprintf(buffer, "Val: %.2f", my_variable);  // Formatowanie wartości zmiennej
 8002a62:	4b35      	ldr	r3, [pc, #212]	@ (8002b38 <main+0x150>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd9e 	bl	80005a8 <__aeabi_f2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	f107 0014 	add.w	r0, r7, #20
 8002a74:	4939      	ldr	r1, [pc, #228]	@ (8002b5c <main+0x174>)
 8002a76:	f01a f9a1 	bl	801cdbc <siprintf>

	      sprintf((char *)disp.f_line, "%s", buffer);
 8002a7a:	f107 0314 	add.w	r3, r7, #20
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4937      	ldr	r1, [pc, #220]	@ (8002b60 <main+0x178>)
 8002a82:	482f      	ldr	r0, [pc, #188]	@ (8002b40 <main+0x158>)
 8002a84:	f01a f99a 	bl	801cdbc <siprintf>
	      sprintf((char *)disp.s_line, "");
 8002a88:	492e      	ldr	r1, [pc, #184]	@ (8002b44 <main+0x15c>)
 8002a8a:	482f      	ldr	r0, [pc, #188]	@ (8002b48 <main+0x160>)
 8002a8c:	f01a f996 	bl	801cdbc <siprintf>
	      lcd_display(&disp);  // Aktualizacja wyświetlacza
 8002a90:	4828      	ldr	r0, [pc, #160]	@ (8002b34 <main+0x14c>)
 8002a92:	f7ff ff1f 	bl	80028d4 <lcd_display>

	      HAL_Delay(500);
 8002a96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a9a:	f000 fedf 	bl	800385c <HAL_Delay>

	      double temp, press;
	          BMP2_ReadData(&bmp2dev, &press, &temp);
 8002a9e:	f107 0208 	add.w	r2, r7, #8
 8002aa2:	463b      	mov	r3, r7
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	482b      	ldr	r0, [pc, #172]	@ (8002b54 <main+0x16c>)
 8002aa8:	f7ff faec 	bl	8002084 <BMP2_ReadData>
	          temp_mdegC = 1000*temp;
 8002aac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <main+0x17c>)
 8002ab6:	f7fd fdcf 	bl	8000658 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f863 	bl	8000b8c <__aeabi_d2iz>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <main+0x180>)
 8002aca:	6013      	str	r3, [r2, #0]
	          press_Pa = 100*press;
 8002acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <main+0x184>)
 8002ad6:	f7fd fdbf 	bl	8000658 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fe f853 	bl	8000b8c <__aeabi_d2iz>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <main+0x188>)
 8002aea:	6013      	str	r3, [r2, #0]
	          printf("{\"id\":1,\"temp\":%5.2f, \"press\":%7.2f }\r\n", (float)temp, (float)press);
 8002aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fe f872 	bl	8000bdc <__aeabi_d2f>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fd54 	bl	80005a8 <__aeabi_f2d>
 8002b00:	4604      	mov	r4, r0
 8002b02:	460d      	mov	r5, r1
 8002b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe f866 	bl	8000bdc <__aeabi_d2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd fd48 	bl	80005a8 <__aeabi_f2d>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	e9cd 2300 	strd	r2, r3, [sp]
 8002b20:	4622      	mov	r2, r4
 8002b22:	462b      	mov	r3, r5
 8002b24:	4813      	ldr	r0, [pc, #76]	@ (8002b74 <main+0x18c>)
 8002b26:	f01a f937 	bl	801cd98 <iprintf>
	          HAL_Delay(250);
 8002b2a:	20fa      	movs	r0, #250	@ 0xfa
 8002b2c:	f000 fe96 	bl	800385c <HAL_Delay>
  {
 8002b30:	bf00      	nop
 8002b32:	e796      	b.n	8002a62 <main+0x7a>
 8002b34:	2000053c 	.word	0x2000053c
 8002b38:	20000560 	.word	0x20000560
 8002b3c:	0801e198 	.word	0x0801e198
 8002b40:	2000053d 	.word	0x2000053d
 8002b44:	0801e1a8 	.word	0x0801e1a8
 8002b48:	2000054e 	.word	0x2000054e
 8002b4c:	20000564 	.word	0x20000564
 8002b50:	200006bc 	.word	0x200006bc
 8002b54:	20000018 	.word	0x20000018
 8002b58:	bf800000 	.word	0xbf800000
 8002b5c:	0801e1ac 	.word	0x0801e1ac
 8002b60:	0801e1b8 	.word	0x0801e1b8
 8002b64:	408f4000 	.word	0x408f4000
 8002b68:	20000568 	.word	0x20000568
 8002b6c:	40590000 	.word	0x40590000
 8002b70:	2000056c 	.word	0x2000056c
 8002b74:	0801e1bc 	.word	0x0801e1bc

08002b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b094      	sub	sp, #80	@ 0x50
 8002b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b7e:	f107 0320 	add.w	r3, r7, #32
 8002b82:	2230      	movs	r2, #48	@ 0x30
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f01a f9a5 	bl	801ced6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b9c:	f003 f892 	bl	8005cc4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <SystemClock_Config+0xd4>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <SystemClock_Config+0xd4>)
 8002ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bac:	4b27      	ldr	r3, [pc, #156]	@ (8002c4c <SystemClock_Config+0xd4>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b25      	ldr	r3, [pc, #148]	@ (8002c50 <SystemClock_Config+0xd8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	@ (8002c50 <SystemClock_Config+0xd8>)
 8002bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <SystemClock_Config+0xd8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002bd4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002be4:	2304      	movs	r3, #4
 8002be6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002be8:	23d8      	movs	r3, #216	@ 0xd8
 8002bea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bec:	2302      	movs	r3, #2
 8002bee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf4:	f107 0320 	add.w	r3, r7, #32
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 f8c3 	bl	8005d84 <HAL_RCC_OscConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002c04:	f000 f8a0 	bl	8002d48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c08:	f003 f86c 	bl	8005ce4 <HAL_PWREx_EnableOverDrive>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c12:	f000 f899 	bl	8002d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c16:	230f      	movs	r3, #15
 8002c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c2e:	f107 030c 	add.w	r3, r7, #12
 8002c32:	2107      	movs	r1, #7
 8002c34:	4618      	mov	r0, r3
 8002c36:	f003 fb49 	bl	80062cc <HAL_RCC_ClockConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002c40:	f000 f882 	bl	8002d48 <Error_Handler>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3750      	adds	r7, #80	@ 0x50
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000

08002c54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2a      	ldr	r2, [pc, #168]	@ (8002d0c <HAL_UART_RxCpltCallback+0xb8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d14d      	bne.n	8002d02 <HAL_UART_RxCpltCallback+0xae>
        if (rx_buffer[0] == '+') {
 8002c66:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <HAL_UART_RxCpltCallback+0xbc>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8002c6c:	d113      	bne.n	8002c96 <HAL_UART_RxCpltCallback+0x42>
            my_variable += 10.0;
 8002c6e:	4b29      	ldr	r3, [pc, #164]	@ (8002d14 <HAL_UART_RxCpltCallback+0xc0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc98 	bl	80005a8 <__aeabi_f2d>
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <HAL_UART_RxCpltCallback+0xc4>)
 8002c7e:	f7fd fb35 	bl	80002ec <__adddf3>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fd ffa7 	bl	8000bdc <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	4a20      	ldr	r2, [pc, #128]	@ (8002d14 <HAL_UART_RxCpltCallback+0xc0>)
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e016      	b.n	8002cc4 <HAL_UART_RxCpltCallback+0x70>
        } else if (rx_buffer[0] == '-') {
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <HAL_UART_RxCpltCallback+0xbc>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8002c9c:	d112      	bne.n	8002cc4 <HAL_UART_RxCpltCallback+0x70>
            my_variable -= 10.0;
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_UART_RxCpltCallback+0xc0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc80 	bl	80005a8 <__aeabi_f2d>
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b1a      	ldr	r3, [pc, #104]	@ (8002d18 <HAL_UART_RxCpltCallback+0xc4>)
 8002cae:	f7fd fb1b 	bl	80002e8 <__aeabi_dsub>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd ff8f 	bl	8000bdc <__aeabi_d2f>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <HAL_UART_RxCpltCallback+0xc0>)
 8002cc2:	6013      	str	r3, [r2, #0]
        }

        // Wysyłanie aktualnej wartości
        char response[20];
        sprintf(response, "%.2f\n", my_variable);
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <HAL_UART_RxCpltCallback+0xc0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc6d 	bl	80005a8 <__aeabi_f2d>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	f107 000c 	add.w	r0, r7, #12
 8002cd6:	4911      	ldr	r1, [pc, #68]	@ (8002d1c <HAL_UART_RxCpltCallback+0xc8>)
 8002cd8:	f01a f870 	bl	801cdbc <siprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 8002cdc:	f107 030c 	add.w	r3, r7, #12
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fa9f 	bl	8000224 <strlen>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	f107 010c 	add.w	r1, r7, #12
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <HAL_UART_RxCpltCallback+0xcc>)
 8002cf4:	f006 f97a 	bl	8008fec <HAL_UART_Transmit>

        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);  // Ponowne włączenie odbioru
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4905      	ldr	r1, [pc, #20]	@ (8002d10 <HAL_UART_RxCpltCallback+0xbc>)
 8002cfc:	4808      	ldr	r0, [pc, #32]	@ (8002d20 <HAL_UART_RxCpltCallback+0xcc>)
 8002cfe:	f006 f9f8 	bl	80090f2 <HAL_UART_Receive_IT>
    }
}
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40004800 	.word	0x40004800
 8002d10:	20000564 	.word	0x20000564
 8002d14:	20000560 	.word	0x20000560
 8002d18:	40240000 	.word	0x40240000
 8002d1c:	0801e1e4 	.word	0x0801e1e4
 8002d20:	200006bc 	.word	0x200006bc

08002d24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d36:	f000 fd71 	bl	800381c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40001000 	.word	0x40001000

08002d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d4c:	b672      	cpsid	i
}
 8002d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d50:	bf00      	nop
 8002d52:	e7fd      	b.n	8002d50 <Error_Handler+0x8>

08002d54 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002d58:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <MX_SPI4_Init+0x78>)
 8002d5c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d64:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002d66:	4b18      	ldr	r3, [pc, #96]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d6e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d72:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002d74:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d76:	2202      	movs	r2, #2
 8002d78:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d86:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d8a:	2218      	movs	r2, #24
 8002d8c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002da2:	2207      	movs	r2, #7
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	@ (8002dc8 <MX_SPI4_Init+0x74>)
 8002db4:	f004 f8d2 	bl	8006f5c <HAL_SPI_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002dbe:	f7ff ffc3 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000570 	.word	0x20000570
 8002dcc:	40013400 	.word	0x40013400

08002dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_SPI_MspInit+0x7c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d127      	bne.n	8002e42 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002df2:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002df8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dfe:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0a:	4b11      	ldr	r3, [pc, #68]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a10      	ldr	r2, [pc, #64]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_SPI_MspInit+0x80>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002e22:	2364      	movs	r3, #100	@ 0x64
 8002e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002e32:	2305      	movs	r3, #5
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <HAL_SPI_MspInit+0x84>)
 8002e3e:	f002 f953 	bl	80050e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	@ 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	4a10      	ldr	r2, [pc, #64]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_MspInit+0x4c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	210f      	movs	r1, #15
 8002e92:	f06f 0001 	mvn.w	r0, #1
 8002e96:	f000 fdbd 	bl	8003a14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	@ 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002eb8:	4b33      	ldr	r3, [pc, #204]	@ (8002f88 <HAL_InitTick+0xe0>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	4a32      	ldr	r2, [pc, #200]	@ (8002f88 <HAL_InitTick+0xe0>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec4:	4b30      	ldr	r3, [pc, #192]	@ (8002f88 <HAL_InitTick+0xe0>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ed0:	f107 0210 	add.w	r2, r7, #16
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fc1c 	bl	8006718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002eea:	f003 fbed 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8002eee:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ef0:	e004      	b.n	8002efc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ef2:	f003 fbe9 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efe:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <HAL_InitTick+0xe4>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9b      	lsrs	r3, r3, #18
 8002f06:	3b01      	subs	r3, #1
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f0c:	4a21      	ldr	r2, [pc, #132]	@ (8002f94 <HAL_InitTick+0xec>)
 8002f0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f18:	4a1d      	ldr	r2, [pc, #116]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f30:	4817      	ldr	r0, [pc, #92]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f32:	f004 ff73 	bl	8007e1c <HAL_TIM_Base_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11b      	bne.n	8002f7c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f44:	4812      	ldr	r0, [pc, #72]	@ (8002f90 <HAL_InitTick+0xe8>)
 8002f46:	f004 ffc1 	bl	8007ecc <HAL_TIM_Base_Start_IT>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002f50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f58:	2036      	movs	r0, #54	@ 0x36
 8002f5a:	f000 fd77 	bl	8003a4c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d808      	bhi.n	8002f76 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	2036      	movs	r0, #54	@ 0x36
 8002f6a:	f000 fd53 	bl	8003a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <HAL_InitTick+0xf0>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e002      	b.n	8002f7c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3738      	adds	r7, #56	@ 0x38
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	431bde83 	.word	0x431bde83
 8002f90:	200005d4 	.word	0x200005d4
 8002f94:	40001000 	.word	0x40001000
 8002f98:	20000058 	.word	0x20000058

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <USART3_IRQHandler+0x10>)
 8002fda:	f006 f8cf 	bl	800917c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200006bc 	.word	0x200006bc

08002fe8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <TIM6_DAC_IRQHandler+0x10>)
 8002fee:	f005 f846 	bl	800807e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200005d4 	.word	0x200005d4

08002ffc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003000:	4802      	ldr	r0, [pc, #8]	@ (800300c <ETH_IRQHandler+0x10>)
 8003002:	f001 f99d 	bl	8004340 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20005128 	.word	0x20005128

08003010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
	return 1;
 8003014:	2301      	movs	r3, #1
}
 8003016:	4618      	mov	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_kill>:

int _kill(int pid, int sig)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <_kill+0x20>)
 800302c:	2216      	movs	r2, #22
 800302e:	601a      	str	r2, [r3, #0]
	return -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	2000f50c 	.word	0x2000f50c

08003044 <_exit>:

void _exit (int status)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ffe5 	bl	8003020 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003056:	bf00      	nop
 8003058:	e7fd      	b.n	8003056 <_exit+0x12>

0800305a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e00a      	b.n	8003082 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800306c:	f3af 8000 	nop.w
 8003070:	4601      	mov	r1, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	60ba      	str	r2, [r7, #8]
 8003078:	b2ca      	uxtb	r2, r1
 800307a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3301      	adds	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	dbf0      	blt.n	800306c <_read+0x12>
	}

return len;
 800308a:	687b      	ldr	r3, [r7, #4]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	return -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030bc:	605a      	str	r2, [r3, #4]
	return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_isatty>:

int _isatty(int file)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	return 1;
 80030d4:	2301      	movs	r3, #1
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
	return 0;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003104:	4a14      	ldr	r2, [pc, #80]	@ (8003158 <_sbrk+0x5c>)
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <_sbrk+0x60>)
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003110:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <_sbrk+0x64>)
 800311a:	4a12      	ldr	r2, [pc, #72]	@ (8003164 <_sbrk+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	429a      	cmp	r2, r3
 800312a:	d205      	bcs.n	8003138 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <_sbrk+0x6c>)
 800312e:	220c      	movs	r2, #12
 8003130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e009      	b.n	800314c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <_sbrk+0x64>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <_sbrk+0x64>)
 8003148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800314a:	68fb      	ldr	r3, [r7, #12]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20050000 	.word	0x20050000
 800315c:	00000400 	.word	0x00000400
 8003160:	20000620 	.word	0x20000620
 8003164:	2000f520 	.word	0x2000f520
 8003168:	2000f50c 	.word	0x2000f50c

0800316c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	@ 0x38
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b0:	463b      	mov	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]
 80031be:	615a      	str	r2, [r3, #20]
 80031c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80031ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031cc:	226b      	movs	r2, #107	@ 0x6b
 80031ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d0:	4b29      	ldr	r3, [pc, #164]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80031d6:	4b28      	ldr	r3, [pc, #160]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031de:	4b26      	ldr	r3, [pc, #152]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e4:	4b24      	ldr	r3, [pc, #144]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031ea:	4823      	ldr	r0, [pc, #140]	@ (8003278 <MX_TIM2_Init+0xe8>)
 80031ec:	f004 fe16 	bl	8007e1c <HAL_TIM_Base_Init>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80031f6:	f7ff fda7 	bl	8002d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003200:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003204:	4619      	mov	r1, r3
 8003206:	481c      	ldr	r0, [pc, #112]	@ (8003278 <MX_TIM2_Init+0xe8>)
 8003208:	f005 f96c 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003212:	f7ff fd99 	bl	8002d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003216:	4818      	ldr	r0, [pc, #96]	@ (8003278 <MX_TIM2_Init+0xe8>)
 8003218:	f004 fed0 	bl	8007fbc <HAL_TIM_PWM_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003222:	f7ff fd91 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	4810      	ldr	r0, [pc, #64]	@ (8003278 <MX_TIM2_Init+0xe8>)
 8003236:	f005 fddf 	bl	8008df8 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003240:	f7ff fd82 	bl	8002d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003244:	2360      	movs	r3, #96	@ 0x60
 8003246:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003254:	463b      	mov	r3, r7
 8003256:	220c      	movs	r2, #12
 8003258:	4619      	mov	r1, r3
 800325a:	4807      	ldr	r0, [pc, #28]	@ (8003278 <MX_TIM2_Init+0xe8>)
 800325c:	f005 f82e 	bl	80082bc <HAL_TIM_PWM_ConfigChannel>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003266:	f7ff fd6f 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800326a:	4803      	ldr	r0, [pc, #12]	@ (8003278 <MX_TIM2_Init+0xe8>)
 800326c:	f000 f870 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8003270:	bf00      	nop
 8003272:	3738      	adds	r7, #56	@ 0x38
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000624 	.word	0x20000624

0800327c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800328c:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <MX_TIM7_Init+0x68>)
 800328e:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <MX_TIM7_Init+0x6c>)
 8003290:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 8003292:	4b14      	ldr	r3, [pc, #80]	@ (80032e4 <MX_TIM7_Init+0x68>)
 8003294:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8003298:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <MX_TIM7_Init+0x68>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80032a0:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <MX_TIM7_Init+0x68>)
 80032a2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80032a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <MX_TIM7_Init+0x68>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032ae:	480d      	ldr	r0, [pc, #52]	@ (80032e4 <MX_TIM7_Init+0x68>)
 80032b0:	f004 fdb4 	bl	8007e1c <HAL_TIM_Base_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80032ba:	f7ff fd45 	bl	8002d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	4619      	mov	r1, r3
 80032ca:	4806      	ldr	r0, [pc, #24]	@ (80032e4 <MX_TIM7_Init+0x68>)
 80032cc:	f005 fd94 	bl	8008df8 <HAL_TIMEx_MasterConfigSynchronization>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80032d6:	f7ff fd37 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000670 	.word	0x20000670
 80032e8:	40001400 	.word	0x40001400

080032ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d10c      	bne.n	8003318 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032fe:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	4a11      	ldr	r2, [pc, #68]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6413      	str	r3, [r2, #64]	@ 0x40
 800330a:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003316:	e010      	b.n	800333a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a0b      	ldr	r2, [pc, #44]	@ (800334c <HAL_TIM_Base_MspInit+0x60>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10b      	bne.n	800333a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 8003328:	f043 0320 	orr.w	r3, r3, #32
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_TIM_Base_MspInit+0x5c>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40001400 	.word	0x40001400

08003350 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d11b      	bne.n	80033aa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_TIM_MspPostInit+0x64>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a0f      	ldr	r2, [pc, #60]	@ (80033b4 <HAL_TIM_MspPostInit+0x64>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <HAL_TIM_MspPostInit+0x64>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 800338a:	2308      	movs	r3, #8
 800338c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4619      	mov	r1, r3
 80033a4:	4804      	ldr	r0, [pc, #16]	@ (80033b8 <HAL_TIM_MspPostInit+0x68>)
 80033a6:	f001 fe9f 	bl	80050e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033aa:	bf00      	nop
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40020000 	.word	0x40020000

080033bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <MX_USART3_UART_Init+0x5c>)
 80033c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033c6:	4b13      	ldr	r3, [pc, #76]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033ce:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033da:	4b0e      	ldr	r3, [pc, #56]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033dc:	2200      	movs	r2, #0
 80033de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033e2:	220c      	movs	r2, #12
 80033e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ec:	4b09      	ldr	r3, [pc, #36]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033f2:	4b08      	ldr	r3, [pc, #32]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033fe:	4805      	ldr	r0, [pc, #20]	@ (8003414 <MX_USART3_UART_Init+0x58>)
 8003400:	f005 fda6 	bl	8008f50 <HAL_UART_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800340a:	f7ff fc9d 	bl	8002d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	200006bc 	.word	0x200006bc
 8003418:	40004800 	.word	0x40004800

0800341c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b0aa      	sub	sp, #168	@ 0xa8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003424:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003434:	f107 0310 	add.w	r3, r7, #16
 8003438:	2284      	movs	r2, #132	@ 0x84
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f019 fd4a 	bl	801ced6 <memset>
  if(uartHandle->Instance==USART3)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a26      	ldr	r2, [pc, #152]	@ (80034e0 <HAL_UART_MspInit+0xc4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d144      	bne.n	80034d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800344c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003452:	2300      	movs	r3, #0
 8003454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003456:	f107 0310 	add.w	r3, r7, #16
 800345a:	4618      	mov	r0, r3
 800345c:	f003 f98e 	bl	800677c <HAL_RCCEx_PeriphCLKConfig>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003466:	f7ff fc6f 	bl	8002d48 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003474:	6413      	str	r3, [r2, #64]	@ 0x40
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003482:	4b18      	ldr	r3, [pc, #96]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	4a17      	ldr	r2, [pc, #92]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	6313      	str	r3, [r2, #48]	@ 0x30
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_UART_MspInit+0xc8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800349a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800349e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ae:	2303      	movs	r3, #3
 80034b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034b4:	2307      	movs	r3, #7
 80034b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034be:	4619      	mov	r1, r3
 80034c0:	4809      	ldr	r0, [pc, #36]	@ (80034e8 <HAL_UART_MspInit+0xcc>)
 80034c2:	f001 fe11 	bl	80050e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2105      	movs	r1, #5
 80034ca:	2027      	movs	r0, #39	@ 0x27
 80034cc:	f000 faa2 	bl	8003a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034d0:	2027      	movs	r0, #39	@ 0x27
 80034d2:	f000 fabb 	bl	8003a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034d6:	bf00      	nop
 80034d8:	37a8      	adds	r7, #168	@ 0xa8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40004800 	.word	0x40004800
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40020c00 	.word	0x40020c00

080034ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034f0:	480d      	ldr	r0, [pc, #52]	@ (8003528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034f2:	490e      	ldr	r1, [pc, #56]	@ (800352c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f8:	e002      	b.n	8003500 <LoopCopyDataInit>

080034fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034fe:	3304      	adds	r3, #4

08003500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003504:	d3f9      	bcc.n	80034fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003506:	4a0b      	ldr	r2, [pc, #44]	@ (8003534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003508:	4c0b      	ldr	r4, [pc, #44]	@ (8003538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800350a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800350c:	e001      	b.n	8003512 <LoopFillZerobss>

0800350e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800350e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003510:	3204      	adds	r2, #4

08003512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003514:	d3fb      	bcc.n	800350e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003516:	f7ff fe29 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800351a:	f019 fd9f 	bl	801d05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800351e:	f7ff fa63 	bl	80029e8 <main>
  bx  lr    
 8003522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003524:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800352c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8003530:	08022884 	.word	0x08022884
  ldr r2, =_sbss
 8003534:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003538:	2000f51c 	.word	0x2000f51c

0800353c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800353c:	e7fe      	b.n	800353c <ADC_IRQHandler>

0800353e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <LAN8742_RegisterBusIO+0x28>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <LAN8742_RegisterBusIO+0x28>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <LAN8742_RegisterBusIO+0x28>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	e014      	b.n	8003596 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d17c      	bne.n	80036bc <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e01c      	b.n	8003616 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f107 0208 	add.w	r2, r7, #8
 80035e4:	2112      	movs	r1, #18
 80035e6:	6978      	ldr	r0, [r7, #20]
 80035e8:	4798      	blx	r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	da03      	bge.n	80035f8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80035f0:	f06f 0304 	mvn.w	r3, #4
 80035f4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80035f6:	e00b      	b.n	8003610 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	429a      	cmp	r2, r3
 8003602:	d105      	bne.n	8003610 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
         break;
 800360e:	e005      	b.n	800361c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3301      	adds	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b1f      	cmp	r3, #31
 800361a:	d9df      	bls.n	80035dc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b1f      	cmp	r3, #31
 8003622:	d902      	bls.n	800362a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003624:	f06f 0302 	mvn.w	r3, #2
 8003628:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d145      	bne.n	80036bc <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6810      	ldr	r0, [r2, #0]
 8003638:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800363c:	2100      	movs	r1, #0
 800363e:	4798      	blx	r3
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	db37      	blt.n	80036b6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6810      	ldr	r0, [r2, #0]
 800364e:	f107 0208 	add.w	r2, r7, #8
 8003652:	2100      	movs	r1, #0
 8003654:	4798      	blx	r3
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	db28      	blt.n	80036ae <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	4798      	blx	r3
 8003662:	4603      	mov	r3, r0
 8003664:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003666:	e01c      	b.n	80036a2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	4798      	blx	r3
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800367a:	d80e      	bhi.n	800369a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6810      	ldr	r0, [r2, #0]
 8003684:	f107 0208 	add.w	r2, r7, #8
 8003688:	2100      	movs	r1, #0
 800368a:	4798      	blx	r3
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	da07      	bge.n	80036a2 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003692:	f06f 0304 	mvn.w	r3, #4
 8003696:	613b      	str	r3, [r7, #16]
                 break;
 8003698:	e010      	b.n	80036bc <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800369a:	f06f 0301 	mvn.w	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
               break;
 80036a0:	e00c      	b.n	80036bc <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1dd      	bne.n	8003668 <LAN8742_Init+0xc6>
 80036ac:	e006      	b.n	80036bc <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80036ae:	f06f 0304 	mvn.w	r3, #4
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	e002      	b.n	80036bc <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80036b6:	f06f 0303 	mvn.w	r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d112      	bne.n	80036e8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	4798      	blx	r3
 80036c8:	4603      	mov	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80036cc:	bf00      	nop
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4798      	blx	r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80036e0:	d9f5      	bls.n	80036ce <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80036e8:	693b      	ldr	r3, [r7, #16]
 }
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6810      	ldr	r0, [r2, #0]
 8003706:	f107 020c 	add.w	r2, r7, #12
 800370a:	2101      	movs	r1, #1
 800370c:	4798      	blx	r3
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	da02      	bge.n	800371a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003714:	f06f 0304 	mvn.w	r3, #4
 8003718:	e06e      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6810      	ldr	r0, [r2, #0]
 8003722:	f107 020c 	add.w	r2, r7, #12
 8003726:	2101      	movs	r1, #1
 8003728:	4798      	blx	r3
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	da02      	bge.n	8003736 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003730:	f06f 0304 	mvn.w	r3, #4
 8003734:	e060      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003740:	2301      	movs	r3, #1
 8003742:	e059      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	f107 020c 	add.w	r2, r7, #12
 8003750:	2100      	movs	r1, #0
 8003752:	4798      	blx	r3
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	da02      	bge.n	8003760 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800375a:	f06f 0304 	mvn.w	r3, #4
 800375e:	e04b      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11b      	bne.n	80037a2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d006      	beq.n	8003782 <LAN8742_GetLinkState+0x90>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800377e:	2302      	movs	r3, #2
 8003780:	e03a      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800378c:	2303      	movs	r3, #3
 800378e:	e033      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800379a:	2304      	movs	r3, #4
 800379c:	e02c      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800379e:	2305      	movs	r3, #5
 80037a0:	e02a      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6810      	ldr	r0, [r2, #0]
 80037aa:	f107 020c 	add.w	r2, r7, #12
 80037ae:	211f      	movs	r1, #31
 80037b0:	4798      	blx	r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da02      	bge.n	80037be <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80037b8:	f06f 0304 	mvn.w	r3, #4
 80037bc:	e01c      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80037c8:	2306      	movs	r3, #6
 80037ca:	e015      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 031c 	and.w	r3, r3, #28
 80037d2:	2b18      	cmp	r3, #24
 80037d4:	d101      	bne.n	80037da <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80037d6:	2302      	movs	r3, #2
 80037d8:	e00e      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 031c 	and.w	r3, r3, #28
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d101      	bne.n	80037e8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e007      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 031c 	and.w	r3, r3, #28
 80037ee:	2b14      	cmp	r3, #20
 80037f0:	d101      	bne.n	80037f6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80037f2:	2304      	movs	r3, #4
 80037f4:	e000      	b.n	80037f8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80037f6:	2305      	movs	r3, #5
    }				
  }
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003804:	2003      	movs	r0, #3
 8003806:	f000 f8fa 	bl	80039fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	200f      	movs	r0, #15
 800380c:	f7ff fb4c 	bl	8002ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003810:	f7ff fb22 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x20>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <HAL_IncTick+0x24>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a04      	ldr	r2, [pc, #16]	@ (8003840 <HAL_IncTick+0x24>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	2000005c 	.word	0x2000005c
 8003840:	20000744 	.word	0x20000744

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_GetTick+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	20000744 	.word	0x20000744

0800385c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003864:	f7ff ffee 	bl	8003844 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d005      	beq.n	8003882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003876:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <HAL_Delay+0x44>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003882:	bf00      	nop
 8003884:	f7ff ffde 	bl	8003844 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d8f7      	bhi.n	8003884 <HAL_Delay+0x28>
  {
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2000005c 	.word	0x2000005c

080038a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x40>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x40>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	05fa0000 	.word	0x05fa0000

080038ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f0:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <__NVIC_GetPriorityGrouping+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0307 	and.w	r3, r3, #7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db0b      	blt.n	8003932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	4907      	ldr	r1, [pc, #28]	@ (8003940 <__NVIC_EnableIRQ+0x38>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2001      	movs	r0, #1
 800392a:	fa00 f202 	lsl.w	r2, r0, r2
 800392e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	6039      	str	r1, [r7, #0]
 800394e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	2b00      	cmp	r3, #0
 8003956:	db0a      	blt.n	800396e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2da      	uxtb	r2, r3
 800395c:	490c      	ldr	r1, [pc, #48]	@ (8003990 <__NVIC_SetPriority+0x4c>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	0112      	lsls	r2, r2, #4
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	440b      	add	r3, r1
 8003968:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800396c:	e00a      	b.n	8003984 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	4908      	ldr	r1, [pc, #32]	@ (8003994 <__NVIC_SetPriority+0x50>)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3b04      	subs	r3, #4
 800397c:	0112      	lsls	r2, r2, #4
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	440b      	add	r3, r1
 8003982:	761a      	strb	r2, [r3, #24]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	@ 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f1c3 0307 	rsb	r3, r3, #7
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf28      	it	cs
 80039b6:	2304      	movcs	r3, #4
 80039b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3304      	adds	r3, #4
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d902      	bls.n	80039c8 <NVIC_EncodePriority+0x30>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3b03      	subs	r3, #3
 80039c6:	e000      	b.n	80039ca <NVIC_EncodePriority+0x32>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	f04f 32ff 	mov.w	r2, #4294967295
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	401a      	ands	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	f04f 31ff 	mov.w	r1, #4294967295
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	4313      	orrs	r3, r2
         );
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3724      	adds	r7, #36	@ 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff4c 	bl	80038a4 <__NVIC_SetPriorityGrouping>
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a26:	f7ff ff61 	bl	80038ec <__NVIC_GetPriorityGrouping>
 8003a2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	6978      	ldr	r0, [r7, #20]
 8003a32:	f7ff ffb1 	bl	8003998 <NVIC_EncodePriority>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff ff80 	bl	8003944 <__NVIC_SetPriority>
}
 8003a44:	bf00      	nop
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff54 	bl	8003908 <__NVIC_EnableIRQ>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a76:	f7ff fee5 	bl	8003844 <HAL_GetTick>
 8003a7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d008      	beq.n	8003a9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2280      	movs	r2, #128	@ 0x80
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e052      	b.n	8003b40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0216 	bic.w	r2, r2, #22
 8003aa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695a      	ldr	r2, [r3, #20]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ab8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_DMA_Abort+0x62>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0208 	bic.w	r2, r2, #8
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aea:	e013      	b.n	8003b14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aec:	f7ff feaa 	bl	8003844 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d90c      	bls.n	8003b14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e015      	b.n	8003b40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e4      	bne.n	8003aec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b26:	223f      	movs	r2, #63	@ 0x3f
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2280      	movs	r2, #128	@ 0x80
 8003b60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00c      	b.n	8003b80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2205      	movs	r2, #5
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06a      	b.n	8003c74 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2223      	movs	r2, #35	@ 0x23
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f007 f8c1 	bl	800ad38 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <HAL_ETH_Init+0xf0>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <HAL_ETH_Init+0xf0>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <HAL_ETH_Init+0xf0>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bce:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <HAL_ETH_Init+0xf4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c80 <HAL_ETH_Init+0xf4>)
 8003bd4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bd8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bda:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <HAL_ETH_Init+0xf4>)
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4927      	ldr	r1, [pc, #156]	@ (8003c80 <HAL_ETH_Init+0xf4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_ETH_Init+0xf4>)
 8003bea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c04:	f7ff fe1e 	bl	8003844 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c0a:	e011      	b.n	8003c30 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c0c:	f7ff fe1a 	bl	8003844 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c1a:	d909      	bls.n	8003c30 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	22e0      	movs	r2, #224	@ 0xe0
 8003c28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e021      	b.n	8003c74 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e4      	bne.n	8003c0c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 ffac 	bl	8004ba0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f001 f853 	bl	8004cf4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 f8a9 	bl	8004da6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f001 f811 	bl	8004c84 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2210      	movs	r2, #16
 8003c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40013800 	.word	0x40013800

08003c84 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d150      	bne.n	8003d38 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2223      	movs	r2, #35	@ 0x23
 8003c9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fa7b 	bl	80041a0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cc2:	2001      	movs	r0, #1
 8003cc4:	f7ff fdca 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0204 	orr.w	r2, r2, #4
 8003cde:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7ff fdb7 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fdf3 	bl	80048e2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d12:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d2a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2223      	movs	r2, #35	@ 0x23
 8003d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d17b      	bne.n	8003e4e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2223      	movs	r2, #35	@ 0x23
 8003d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003d72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <HAL_ETH_Start_IT+0x114>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003d98:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9fc 	bl	80041a0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0208 	orr.w	r2, r2, #8
 8003db6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7ff fd4b 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0204 	orr.w	r2, r2, #4
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f7ff fd38 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fd74 	bl	80048e2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e10:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e28:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e32:	69d9      	ldr	r1, [r3, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <HAL_ETH_Start_IT+0x118>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e40:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2223      	movs	r2, #35	@ 0x23
 8003e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e000      	b.n	8003e50 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	00020060 	.word	0x00020060
 8003e5c:	0001a0c1 	.word	0x0001a0c1

08003e60 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6e:	2b23      	cmp	r3, #35	@ 0x23
 8003e70:	d16e      	bne.n	8003f50 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2223      	movs	r2, #35	@ 0x23
 8003e76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b34      	ldr	r3, [pc, #208]	@ (8003f5c <HAL_ETH_Stop_IT+0xfc>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e90:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ea8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	f023 0302 	bic.w	r3, r3, #2
 8003ebc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ec0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0204 	bic.w	r2, r2, #4
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7ff fcbe 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fcfa 	bl	80048e2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f06:	2001      	movs	r0, #1
 8003f08:	f7ff fca8 	bl	800385c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e00e      	b.n	8003f38 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	3212      	adds	r2, #18
 8003f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f24:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3301      	adds	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d9ed      	bls.n	8003f1a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2210      	movs	r2, #16
 8003f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	fffe5f3e 	.word	0xfffe5f3e

08003f60 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f76:	f043 0201 	orr.w	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e045      	b.n	8004010 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f8a:	2b23      	cmp	r3, #35	@ 0x23
 8003f8c:	d13f      	bne.n	800400e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f96:	2201      	movs	r2, #1
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 ff70 	bl	8004e80 <ETH_Prepare_Tx_Descriptors>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f043 0202 	orr.w	r2, r3, #2
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02a      	b.n	8004010 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fba:	f3bf 8f4f 	dsb	sy
}
 8003fbe:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d904      	bls.n	8003fdc <HAL_ETH_Transmit_IT+0x7c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd6:	1f1a      	subs	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d109      	bne.n	8004044 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	f043 0201 	orr.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0a8      	b.n	8004196 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800404a:	2b23      	cmp	r3, #35	@ 0x23
 800404c:	d001      	beq.n	8004052 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0a1      	b.n	8004196 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	3212      	adds	r2, #18
 800405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004068:	f1c3 0304 	rsb	r3, r3, #4
 800406c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800406e:	e06a      	b.n	8004146 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <HAL_ETH_ReadData+0x88>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d040      	beq.n	8004122 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00c      	beq.n	80040e4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040d4:	3b04      	subs	r3, #4
 80040d6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040fc:	461a      	mov	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f006 ffe5 	bl	800b0d0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2200      	movs	r2, #0
 8004120:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d902      	bls.n	8004134 <HAL_ETH_ReadData+0x11c>
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3b04      	subs	r3, #4
 8004132:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	3212      	adds	r2, #18
 800413a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3301      	adds	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800414a:	2b00      	cmp	r3, #0
 800414c:	db06      	blt.n	800415c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d202      	bcs.n	800415c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d089      	beq.n	8004070 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f815 	bl	80041a0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80041ac:	2301      	movs	r3, #1
 80041ae:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	3212      	adds	r2, #18
 80041bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041c0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041c8:	e040      	b.n	800424c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d112      	bne.n	80041f8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80041d2:	f107 030c 	add.w	r3, r7, #12
 80041d6:	4618      	mov	r0, r3
 80041d8:	f006 ff4a 	bl	800b070 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	74fb      	strb	r3, [r7, #19]
 80041e6:	e007      	b.n	80041f8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	461a      	mov	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	461a      	mov	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d026      	beq.n	800424c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	4a1e      	ldr	r2, [pc, #120]	@ (8004284 <ETH_UpdateDescriptor+0xe4>)
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	e003      	b.n	8004216 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8004214:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004216:	f3bf 8f5f 	dmb	sy
}
 800421a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	3301      	adds	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d902      	bls.n	800423a <ETH_UpdateDescriptor+0x9a>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3b04      	subs	r3, #4
 8004238:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	3212      	adds	r2, #18
 8004240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004244:	617b      	str	r3, [r7, #20]
      desccount--;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3b01      	subs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d002      	beq.n	8004258 <ETH_UpdateDescriptor+0xb8>
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1b8      	bne.n	80041ca <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	429a      	cmp	r2, r3
 8004260:	d00c      	beq.n	800427c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	800045f8 	.word	0x800045f8

08004288 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3318      	adds	r3, #24
 8004294:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042a6:	e03f      	b.n	8004328 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3304      	adds	r3, #4
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d028      	beq.n	8004328 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68d9      	ldr	r1, [r3, #12]
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db1b      	blt.n	8004324 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f006 ff2b 	bl	800b154 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	3304      	adds	r3, #4
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3301      	adds	r3, #1
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004322:	e001      	b.n	8004328 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_ETH_ReleaseTxPacket+0xac>
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1b9      	bne.n	80042a8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d112      	bne.n	8004380 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b40      	cmp	r3, #64	@ 0x40
 800436a:	d109      	bne.n	8004380 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	461a      	mov	r2, r3
 8004376:	4b50      	ldr	r3, [pc, #320]	@ (80044b8 <HAL_ETH_IRQHandler+0x178>)
 8004378:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f006 fa40 	bl	800a800 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d113      	bne.n	80043ba <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d10a      	bne.n	80043ba <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ac:	461a      	mov	r2, r3
 80043ae:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80043b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f006 fa33 	bl	800a820 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043cc:	d14c      	bne.n	8004468 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e0:	d142      	bne.n	8004468 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f043 0208 	orr.w	r2, r3, #8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004404:	d11a      	bne.n	800443c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	4b2a      	ldr	r3, [pc, #168]	@ (80044bc <HAL_ETH_IRQHandler+0x17c>)
 8004412:	4013      	ands	r3, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6812      	ldr	r2, [r2, #0]
 8004428:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800442c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004430:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	22e0      	movs	r2, #224	@ 0xe0
 8004436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800443a:	e012      	b.n	8004462 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	f248 6380 	movw	r3, #34432	@ 0x8680
 800444a:	4013      	ands	r3, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800445a:	461a      	mov	r2, r3
 800445c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004460:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f006 f9ec 	bl	800a840 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b08      	cmp	r3, #8
 8004474:	d10e      	bne.n	8004494 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f81c 	bl	80044c4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <HAL_ETH_IRQHandler+0x180>)
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044a0:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <HAL_ETH_IRQHandler+0x180>)
 80044a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044a6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f815 	bl	80044d8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	00010040 	.word	0x00010040
 80044bc:	007e2000 	.word	0x007e2000
 80044c0:	40013c00 	.word	0x40013c00

080044c4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f003 031c 	and.w	r3, r3, #28
 8004508:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	02db      	lsls	r3, r3, #11
 800450e:	b29b      	uxth	r3, r3
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0302 	bic.w	r3, r3, #2
 800452a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800453c:	f7ff f982 	bl	8003844 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004542:	e00d      	b.n	8004560 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004544:	f7ff f97e 	bl	8003844 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d301      	bcc.n	8004558 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e010      	b.n	800457a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ec      	bne.n	8004544 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 031c 	and.w	r3, r3, #28
 800459e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	02db      	lsls	r3, r3, #11
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	019b      	lsls	r3, r3, #6
 80045b0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f043 0302 	orr.w	r3, r3, #2
 80045c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045dc:	f7ff f932 	bl	8003844 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045e2:	e00d      	b.n	8004600 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80045e4:	f7ff f92e 	bl	8003844 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f2:	d301      	bcc.n	80045f8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e009      	b.n	800460c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1ec      	bne.n	80045e4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0d9      	b.n	80047dc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf0c      	ite	eq
 80046e6:	2301      	moveq	r3, #1
 80046e8:	2300      	movne	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	0c1b      	lsrs	r3, r3, #16
 800479c:	b29a      	uxth	r2, r3
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e00b      	b.n	8004814 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004802:	2b10      	cmp	r3, #16
 8004804:	d105      	bne.n	8004812 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f88f 	bl	800492c <ETH_SetMACConfig>

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 031c 	bic.w	r3, r3, #28
 8004832:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004834:	f001 ff3c 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 8004838:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d908      	bls.n	8004854 <HAL_ETH_SetMDIOClockRange+0x38>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d804      	bhi.n	8004854 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e027      	b.n	80048a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d908      	bls.n	800486e <HAL_ETH_SetMDIOClockRange+0x52>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a17      	ldr	r2, [pc, #92]	@ (80048bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d204      	bcs.n	800486e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f043 030c 	orr.w	r3, r3, #12
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e01a      	b.n	80048a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d303      	bcc.n	800487e <HAL_ETH_SetMDIOClockRange+0x62>
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d911      	bls.n	80048a2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4a0f      	ldr	r2, [pc, #60]	@ (80048c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d908      	bls.n	8004898 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4a0e      	ldr	r2, [pc, #56]	@ (80048c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d804      	bhi.n	8004898 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e005      	b.n	80048a4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f043 0310 	orr.w	r3, r3, #16
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e000      	b.n	80048a4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80048a2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	611a      	str	r2, [r3, #16]
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	01312cff 	.word	0x01312cff
 80048b8:	02160ebf 	.word	0x02160ebf
 80048bc:	03938700 	.word	0x03938700
 80048c0:	05f5e0ff 	.word	0x05f5e0ff
 80048c4:	08f0d17f 	.word	0x08f0d17f

080048c8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004904:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004912:	2001      	movs	r0, #1
 8004914:	f7fe ffa2 	bl	800385c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004922:	6193      	str	r3, [r2, #24]
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4b51      	ldr	r3, [pc, #324]	@ (8004a88 <ETH_SetMACConfig+0x15c>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	7c1b      	ldrb	r3, [r3, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <ETH_SetMACConfig+0x28>
 800494e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004952:	e000      	b.n	8004956 <ETH_SetMACConfig+0x2a>
 8004954:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	7c5b      	ldrb	r3, [r3, #17]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <ETH_SetMACConfig+0x38>
 800495e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004962:	e000      	b.n	8004966 <ETH_SetMACConfig+0x3a>
 8004964:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004966:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800496c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	7fdb      	ldrb	r3, [r3, #31]
 8004972:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004974:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800497a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	7f92      	ldrb	r2, [r2, #30]
 8004980:	2a00      	cmp	r2, #0
 8004982:	d102      	bne.n	800498a <ETH_SetMACConfig+0x5e>
 8004984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004988:	e000      	b.n	800498c <ETH_SetMACConfig+0x60>
 800498a:	2200      	movs	r2, #0
                        macconf->Speed |
 800498c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	7f1b      	ldrb	r3, [r3, #28]
 8004992:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004994:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800499a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	791b      	ldrb	r3, [r3, #4]
 80049a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	d102      	bne.n	80049b4 <ETH_SetMACConfig+0x88>
 80049ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049b2:	e000      	b.n	80049b6 <ETH_SetMACConfig+0x8a>
 80049b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	7bdb      	ldrb	r3, [r3, #15]
 80049bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049ce:	4313      	orrs	r3, r2
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049e6:	2001      	movs	r0, #1
 80049e8:	f7fe ff38 	bl	800385c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a12:	2a00      	cmp	r2, #0
 8004a14:	d101      	bne.n	8004a1a <ETH_SetMACConfig+0xee>
 8004a16:	2280      	movs	r2, #128	@ 0x80
 8004a18:	e000      	b.n	8004a1c <ETH_SetMACConfig+0xf0>
 8004a1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a2a:	2a01      	cmp	r2, #1
 8004a2c:	d101      	bne.n	8004a32 <ETH_SetMACConfig+0x106>
 8004a2e:	2208      	movs	r2, #8
 8004a30:	e000      	b.n	8004a34 <ETH_SetMACConfig+0x108>
 8004a32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004a3c:	2a01      	cmp	r2, #1
 8004a3e:	d101      	bne.n	8004a44 <ETH_SetMACConfig+0x118>
 8004a40:	2204      	movs	r2, #4
 8004a42:	e000      	b.n	8004a46 <ETH_SetMACConfig+0x11a>
 8004a44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004a4e:	2a01      	cmp	r2, #1
 8004a50:	d101      	bne.n	8004a56 <ETH_SetMACConfig+0x12a>
 8004a52:	2202      	movs	r2, #2
 8004a54:	e000      	b.n	8004a58 <ETH_SetMACConfig+0x12c>
 8004a56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a70:	2001      	movs	r0, #1
 8004a72:	f7fe fef3 	bl	800385c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	619a      	str	r2, [r3, #24]
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	ff20810f 	.word	0xff20810f

08004a8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8004b9c <ETH_SetDMAConfig+0x110>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	7b1b      	ldrb	r3, [r3, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <ETH_SetDMAConfig+0x2c>
 8004ab2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ab6:	e000      	b.n	8004aba <ETH_SetDMAConfig+0x2e>
 8004ab8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	7b5b      	ldrb	r3, [r3, #13]
 8004abe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ac0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	7f52      	ldrb	r2, [r2, #29]
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	d102      	bne.n	8004ad0 <ETH_SetDMAConfig+0x44>
 8004aca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ace:	e000      	b.n	8004ad2 <ETH_SetDMAConfig+0x46>
 8004ad0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ad2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	7b9b      	ldrb	r3, [r3, #14]
 8004ad8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ada:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ae0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	7f1b      	ldrb	r3, [r3, #28]
 8004ae6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004ae8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	7f9b      	ldrb	r3, [r3, #30]
 8004aee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004af0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004af6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004afe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b00:	4313      	orrs	r3, r2
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b10:	461a      	mov	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7fe fe9a 	bl	800385c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b30:	461a      	mov	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	791b      	ldrb	r3, [r3, #4]
 8004b3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b80:	2001      	movs	r0, #1
 8004b82:	f7fe fe6b 	bl	800385c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	f8de3f23 	.word	0xf8de3f23

08004ba0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0a6      	sub	sp, #152	@ 0x98
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c06:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fe86 	bl	800492c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c20:	2301      	movs	r3, #1
 8004c22:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c54:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c5a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c70:	f107 0308 	add.w	r3, r7, #8
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ff08 	bl	8004a8c <ETH_SetDMAConfig>
}
 8004c7c:	bf00      	nop
 8004c7e:	3798      	adds	r7, #152	@ 0x98
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3305      	adds	r3, #5
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	3204      	adds	r2, #4
 8004c9c:	7812      	ldrb	r2, [r2, #0]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <ETH_MACAddressConfig+0x68>)
 8004ca6:	4413      	add	r3, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3303      	adds	r3, #3
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	061a      	lsls	r2, r3, #24
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	4b06      	ldr	r3, [pc, #24]	@ (8004cf0 <ETH_MACAddressConfig+0x6c>)
 8004cd6:	4413      	add	r3, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	6013      	str	r3, [r2, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40028040 	.word	0x40028040
 8004cf0:	40028044 	.word	0x40028044

08004cf4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	e03e      	b.n	8004d80 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68d9      	ldr	r1, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	440b      	add	r3, r1
 8004d12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	3206      	adds	r2, #6
 8004d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d80c      	bhi.n	8004d64 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e004      	b.n	8004d6e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d9bd      	bls.n	8004d02 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d98:	611a      	str	r2, [r3, #16]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e046      	b.n	8004e42 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6919      	ldr	r1, [r3, #16]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004df0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 8004df8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	3212      	adds	r2, #18
 8004e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d80c      	bhi.n	8004e32 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6919      	ldr	r1, [r3, #16]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	440b      	add	r3, r1
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e004      	b.n	8004e3c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d9b5      	bls.n	8004db4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e72:	60da      	str	r2, [r3, #12]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b08d      	sub	sp, #52	@ 0x34
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3318      	adds	r3, #24
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eaa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ec2:	d007      	beq.n	8004ed4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	3304      	adds	r3, #4
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e0ff      	b.n	80050d8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	3301      	adds	r3, #1
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4b7d      	ldr	r3, [pc, #500]	@ (80050e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	6852      	ldr	r2, [r2, #4]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0320 	and.w	r3, r3, #32
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004f5a:	f3bf 8f5f 	dmb	sy
}
 8004f5e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f6c:	e082      	b.n	8005074 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d006      	beq.n	8004f8e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e005      	b.n	8004f9a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d902      	bls.n	8004fac <ETH_Prepare_Tx_Descriptors+0x12c>
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	3b04      	subs	r3, #4
 8004faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fce:	d007      	beq.n	8004fe0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d029      	beq.n	8005034 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fec:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff2:	e019      	b.n	8005028 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004ff4:	f3bf 8f5f 	dmb	sy
}
 8004ff8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005008:	3301      	adds	r3, #1
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500e:	2b03      	cmp	r3, #3
 8005010:	d902      	bls.n	8005018 <ETH_Prepare_Tx_Descriptors+0x198>
 8005012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005014:	3b04      	subs	r3, #4
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800501c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005020:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	3301      	adds	r3, #1
 8005026:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	429a      	cmp	r2, r3
 800502e:	d3e1      	bcc.n	8004ff4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005030:	2302      	movs	r3, #2
 8005032:	e051      	b.n	80050d8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	4b25      	ldr	r3, [pc, #148]	@ (80050e4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005050:	4013      	ands	r3, r2
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	6852      	ldr	r2, [r2, #4]
 8005056:	431a      	orrs	r2, r3
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	3301      	adds	r3, #1
 8005060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005062:	f3bf 8f5f 	dmb	sy
}
 8005066:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f47f af78 	bne.w	8004f6e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e005      	b.n	800509e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	3304      	adds	r3, #4
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80050c0:	b672      	cpsid	i
}
 80050c2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	4413      	add	r3, r2
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80050d2:	b662      	cpsie	i
}
 80050d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3734      	adds	r7, #52	@ 0x34
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	ffffe000 	.word	0xffffe000

080050e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	@ 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e175      	b.n	80053f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005108:	2201      	movs	r2, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	429a      	cmp	r2, r3
 8005122:	f040 8164 	bne.w	80053ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d005      	beq.n	800513e <HAL_GPIO_Init+0x56>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d130      	bne.n	80051a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2203      	movs	r2, #3
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0201 	and.w	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d017      	beq.n	80051dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d123      	bne.n	8005230 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	08da      	lsrs	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3208      	adds	r2, #8
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 0203 	and.w	r2, r3, #3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80be 	beq.w	80053ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005272:	4b66      	ldr	r3, [pc, #408]	@ (800540c <HAL_GPIO_Init+0x324>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	4a65      	ldr	r2, [pc, #404]	@ (800540c <HAL_GPIO_Init+0x324>)
 8005278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800527c:	6453      	str	r3, [r2, #68]	@ 0x44
 800527e:	4b63      	ldr	r3, [pc, #396]	@ (800540c <HAL_GPIO_Init+0x324>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800528a:	4a61      	ldr	r2, [pc, #388]	@ (8005410 <HAL_GPIO_Init+0x328>)
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	089b      	lsrs	r3, r3, #2
 8005290:	3302      	adds	r3, #2
 8005292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	220f      	movs	r2, #15
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a58      	ldr	r2, [pc, #352]	@ (8005414 <HAL_GPIO_Init+0x32c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d037      	beq.n	8005326 <HAL_GPIO_Init+0x23e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a57      	ldr	r2, [pc, #348]	@ (8005418 <HAL_GPIO_Init+0x330>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d031      	beq.n	8005322 <HAL_GPIO_Init+0x23a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a56      	ldr	r2, [pc, #344]	@ (800541c <HAL_GPIO_Init+0x334>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d02b      	beq.n	800531e <HAL_GPIO_Init+0x236>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a55      	ldr	r2, [pc, #340]	@ (8005420 <HAL_GPIO_Init+0x338>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d025      	beq.n	800531a <HAL_GPIO_Init+0x232>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a54      	ldr	r2, [pc, #336]	@ (8005424 <HAL_GPIO_Init+0x33c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d01f      	beq.n	8005316 <HAL_GPIO_Init+0x22e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a53      	ldr	r2, [pc, #332]	@ (8005428 <HAL_GPIO_Init+0x340>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d019      	beq.n	8005312 <HAL_GPIO_Init+0x22a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a52      	ldr	r2, [pc, #328]	@ (800542c <HAL_GPIO_Init+0x344>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_GPIO_Init+0x226>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a51      	ldr	r2, [pc, #324]	@ (8005430 <HAL_GPIO_Init+0x348>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00d      	beq.n	800530a <HAL_GPIO_Init+0x222>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a50      	ldr	r2, [pc, #320]	@ (8005434 <HAL_GPIO_Init+0x34c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d007      	beq.n	8005306 <HAL_GPIO_Init+0x21e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005438 <HAL_GPIO_Init+0x350>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_GPIO_Init+0x21a>
 80052fe:	2309      	movs	r3, #9
 8005300:	e012      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005302:	230a      	movs	r3, #10
 8005304:	e010      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005306:	2308      	movs	r3, #8
 8005308:	e00e      	b.n	8005328 <HAL_GPIO_Init+0x240>
 800530a:	2307      	movs	r3, #7
 800530c:	e00c      	b.n	8005328 <HAL_GPIO_Init+0x240>
 800530e:	2306      	movs	r3, #6
 8005310:	e00a      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005312:	2305      	movs	r3, #5
 8005314:	e008      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005316:	2304      	movs	r3, #4
 8005318:	e006      	b.n	8005328 <HAL_GPIO_Init+0x240>
 800531a:	2303      	movs	r3, #3
 800531c:	e004      	b.n	8005328 <HAL_GPIO_Init+0x240>
 800531e:	2302      	movs	r3, #2
 8005320:	e002      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_GPIO_Init+0x240>
 8005326:	2300      	movs	r3, #0
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	f002 0203 	and.w	r2, r2, #3
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	4093      	lsls	r3, r2
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4313      	orrs	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005338:	4935      	ldr	r1, [pc, #212]	@ (8005410 <HAL_GPIO_Init+0x328>)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	3302      	adds	r3, #2
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005346:	4b3d      	ldr	r3, [pc, #244]	@ (800543c <HAL_GPIO_Init+0x354>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800536a:	4a34      	ldr	r2, [pc, #208]	@ (800543c <HAL_GPIO_Init+0x354>)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005370:	4b32      	ldr	r3, [pc, #200]	@ (800543c <HAL_GPIO_Init+0x354>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	43db      	mvns	r3, r3
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005394:	4a29      	ldr	r2, [pc, #164]	@ (800543c <HAL_GPIO_Init+0x354>)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800539a:	4b28      	ldr	r3, [pc, #160]	@ (800543c <HAL_GPIO_Init+0x354>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053be:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <HAL_GPIO_Init+0x354>)
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053c4:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <HAL_GPIO_Init+0x354>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	43db      	mvns	r3, r3
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053e8:	4a14      	ldr	r2, [pc, #80]	@ (800543c <HAL_GPIO_Init+0x354>)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3301      	adds	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	f67f ae86 	bls.w	8005108 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	3724      	adds	r7, #36	@ 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	40013800 	.word	0x40013800
 8005414:	40020000 	.word	0x40020000
 8005418:	40020400 	.word	0x40020400
 800541c:	40020800 	.word	0x40020800
 8005420:	40020c00 	.word	0x40020c00
 8005424:	40021000 	.word	0x40021000
 8005428:	40021400 	.word	0x40021400
 800542c:	40021800 	.word	0x40021800
 8005430:	40021c00 	.word	0x40021c00
 8005434:	40022000 	.word	0x40022000
 8005438:	40022400 	.word	0x40022400
 800543c:	40013c00 	.word	0x40013c00

08005440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
 800544c:	4613      	mov	r3, r2
 800544e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005450:	787b      	ldrb	r3, [r7, #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005456:	887a      	ldrh	r2, [r7, #2]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800545c:	e003      	b.n	8005466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800545e:	887b      	ldrh	r3, [r7, #2]
 8005460:	041a      	lsls	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	619a      	str	r2, [r3, #24]
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005484:	887a      	ldrh	r2, [r7, #2]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4013      	ands	r3, r2
 800548a:	041a      	lsls	r2, r3, #16
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	43d9      	mvns	r1, r3
 8005490:	887b      	ldrh	r3, [r7, #2]
 8005492:	400b      	ands	r3, r1
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e07f      	b.n	80055ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fd f91a 	bl	8002708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2224      	movs	r2, #36	@ 0x24
 80054d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005508:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	e006      	b.n	8005530 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800552e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d104      	bne.n	8005542 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005540:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	4b1d      	ldr	r3, [pc, #116]	@ (80055c4 <HAL_I2C_Init+0x11c>)
 800554e:	430b      	orrs	r3, r1
 8005550:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005560:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69d9      	ldr	r1, [r3, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	02008000 	.word	0x02008000

080055c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	461a      	mov	r2, r3
 80055d4:	460b      	mov	r3, r1
 80055d6:	817b      	strh	r3, [r7, #10]
 80055d8:	4613      	mov	r3, r2
 80055da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	f040 80da 	bne.w	800579e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_I2C_Master_Transmit+0x30>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0d3      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005600:	f7fe f920 	bl	8003844 <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2319      	movs	r3, #25
 800560c:	2201      	movs	r2, #1
 800560e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f8f0 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0be      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2221      	movs	r2, #33	@ 0x21
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2210      	movs	r2, #16
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	893a      	ldrh	r2, [r7, #8]
 8005642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	2bff      	cmp	r3, #255	@ 0xff
 8005652:	d90e      	bls.n	8005672 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	22ff      	movs	r2, #255	@ 0xff
 8005658:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565e:	b2da      	uxtb	r2, r3
 8005660:	8979      	ldrh	r1, [r7, #10]
 8005662:	4b51      	ldr	r3, [pc, #324]	@ (80057a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fa60 	bl	8005b30 <I2C_TransferConfig>
 8005670:	e06c      	b.n	800574c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005680:	b2da      	uxtb	r2, r3
 8005682:	8979      	ldrh	r1, [r7, #10]
 8005684:	4b48      	ldr	r3, [pc, #288]	@ (80057a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa4f 	bl	8005b30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005692:	e05b      	b.n	800574c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	6a39      	ldr	r1, [r7, #32]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f8ed 	bl	8005878 <I2C_WaitOnTXISFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e07b      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	781a      	ldrb	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d034      	beq.n	800574c <HAL_I2C_Master_Transmit+0x184>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d130      	bne.n	800574c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2180      	movs	r1, #128	@ 0x80
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f87f 	bl	80057f8 <I2C_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e04d      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	2bff      	cmp	r3, #255	@ 0xff
 800570c:	d90e      	bls.n	800572c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	22ff      	movs	r2, #255	@ 0xff
 8005712:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	b2da      	uxtb	r2, r3
 800571a:	8979      	ldrh	r1, [r7, #10]
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa03 	bl	8005b30 <I2C_TransferConfig>
 800572a:	e00f      	b.n	800574c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573a:	b2da      	uxtb	r2, r3
 800573c:	8979      	ldrh	r1, [r7, #10]
 800573e:	2300      	movs	r3, #0
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f9f2 	bl	8005b30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d19e      	bne.n	8005694 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	6a39      	ldr	r1, [r7, #32]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f8cc 	bl	80058f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e01a      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2220      	movs	r2, #32
 8005770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <HAL_I2C_Master_Transmit+0x1e4>)
 800577e:	400b      	ands	r3, r1
 8005780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	80002000 	.word	0x80002000
 80057ac:	fe00e800 	.word	0xfe00e800

080057b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d103      	bne.n	80057ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d007      	beq.n	80057ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	619a      	str	r2, [r3, #24]
  }
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005808:	e022      	b.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d01e      	beq.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005812:	f7fe f817 	bl	8003844 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d302      	bcc.n	8005828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d113      	bne.n	8005850 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582c:	f043 0220 	orr.w	r2, r3, #32
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e00f      	b.n	8005870 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4013      	ands	r3, r2
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	429a      	cmp	r2, r3
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	429a      	cmp	r2, r3
 800586c:	d0cd      	beq.n	800580a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005884:	e02c      	b.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f870 	bl	8005970 <I2C_IsErrorOccurred>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e02a      	b.n	80058f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d01e      	beq.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a2:	f7fd ffcf 	bl	8003844 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d302      	bcc.n	80058b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d113      	bne.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e007      	b.n	80058f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d1cb      	bne.n	8005886 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005904:	e028      	b.n	8005958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f830 	bl	8005970 <I2C_IsErrorOccurred>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e026      	b.n	8005968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fd ff93 	bl	8003844 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d113      	bne.n	8005958 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	f043 0220 	orr.w	r2, r3, #32
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e007      	b.n	8005968 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b20      	cmp	r3, #32
 8005964:	d1cf      	bne.n	8005906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	@ 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d068      	beq.n	8005a6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80059a4:	e049      	b.n	8005a3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d045      	beq.n	8005a3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059ae:	f7fd ff49 	bl	8003844 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <I2C_IsErrorOccurred+0x54>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d13a      	bne.n	8005a3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e6:	d121      	bne.n	8005a2c <I2C_IsErrorOccurred+0xbc>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ee:	d01d      	beq.n	8005a2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d01a      	beq.n	8005a2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005a06:	f7fd ff1d 	bl	8003844 <HAL_GetTick>
 8005a0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a0c:	e00e      	b.n	8005a2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005a0e:	f7fd ff19 	bl	8003844 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b19      	cmp	r3, #25
 8005a1a:	d907      	bls.n	8005a2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	f043 0320 	orr.w	r3, r3, #32
 8005a22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005a2a:	e006      	b.n	8005a3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d1e9      	bne.n	8005a0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d003      	beq.n	8005a50 <I2C_IsErrorOccurred+0xe0>
 8005a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0aa      	beq.n	80059a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00b      	beq.n	8005aba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	f043 0308 	orr.w	r3, r3, #8
 8005aa8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ab2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f043 0302 	orr.w	r3, r3, #2
 8005aca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01c      	beq.n	8005b1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f7ff fe63 	bl	80057b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6859      	ldr	r1, [r3, #4]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <I2C_IsErrorOccurred+0x1bc>)
 8005af6:	400b      	ands	r3, r1
 8005af8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3728      	adds	r7, #40	@ 0x28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	fe00e800 	.word	0xfe00e800

08005b30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	607b      	str	r3, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	817b      	strh	r3, [r7, #10]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b48:	7a7b      	ldrb	r3, [r7, #9]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	0d5b      	lsrs	r3, r3, #21
 8005b6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005b6e:	4b08      	ldr	r3, [pc, #32]	@ (8005b90 <I2C_TransferConfig+0x60>)
 8005b70:	430b      	orrs	r3, r1
 8005b72:	43db      	mvns	r3, r3
 8005b74:	ea02 0103 	and.w	r1, r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	03ff63ff 	.word	0x03ff63ff

08005b94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d138      	bne.n	8005c1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e032      	b.n	8005c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2224      	movs	r2, #36	@ 0x24
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005be6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6819      	ldr	r1, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c1c:	2302      	movs	r3, #2
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d139      	bne.n	8005cb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e033      	b.n	8005cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2224      	movs	r2, #36	@ 0x24
 8005c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cc8:	4b05      	ldr	r3, [pc, #20]	@ (8005ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	@ (8005ce0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd2:	6013      	str	r3, [r2, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40007000 	.word	0x40007000

08005ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cee:	4b23      	ldr	r3, [pc, #140]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	4a22      	ldr	r2, [pc, #136]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cfa:	4b20      	ldr	r3, [pc, #128]	@ (8005d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d06:	4b1e      	ldr	r3, [pc, #120]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d12:	f7fd fd97 	bl	8003844 <HAL_GetTick>
 8005d16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d18:	e009      	b.n	8005d2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d1a:	f7fd fd93 	bl	8003844 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d28:	d901      	bls.n	8005d2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e022      	b.n	8005d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d2e:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d3a:	d1ee      	bne.n	8005d1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d3c:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d48:	f7fd fd7c 	bl	8003844 <HAL_GetTick>
 8005d4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d4e:	e009      	b.n	8005d64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d50:	f7fd fd78 	bl	8003844 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d5e:	d901      	bls.n	8005d64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e007      	b.n	8005d74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d70:	d1ee      	bne.n	8005d50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	40007000 	.word	0x40007000

08005d84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e291      	b.n	80062be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8087 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005da8:	4b96      	ldr	r3, [pc, #600]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d00c      	beq.n	8005dce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005db4:	4b93      	ldr	r3, [pc, #588]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 030c 	and.w	r3, r3, #12
 8005dbc:	2b08      	cmp	r3, #8
 8005dbe:	d112      	bne.n	8005de6 <HAL_RCC_OscConfig+0x62>
 8005dc0:	4b90      	ldr	r3, [pc, #576]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dcc:	d10b      	bne.n	8005de6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dce:	4b8d      	ldr	r3, [pc, #564]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d06c      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x130>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d168      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e26b      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dee:	d106      	bne.n	8005dfe <HAL_RCC_OscConfig+0x7a>
 8005df0:	4b84      	ldr	r3, [pc, #528]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a83      	ldr	r2, [pc, #524]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e02e      	b.n	8005e5c <HAL_RCC_OscConfig+0xd8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x9c>
 8005e06:	4b7f      	ldr	r3, [pc, #508]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a7e      	ldr	r2, [pc, #504]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	4b7c      	ldr	r3, [pc, #496]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7b      	ldr	r2, [pc, #492]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e01d      	b.n	8005e5c <HAL_RCC_OscConfig+0xd8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCC_OscConfig+0xc0>
 8005e2a:	4b76      	ldr	r3, [pc, #472]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a75      	ldr	r2, [pc, #468]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b73      	ldr	r3, [pc, #460]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a72      	ldr	r2, [pc, #456]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e00b      	b.n	8005e5c <HAL_RCC_OscConfig+0xd8>
 8005e44:	4b6f      	ldr	r3, [pc, #444]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a6e      	ldr	r2, [pc, #440]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	4b6c      	ldr	r3, [pc, #432]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6b      	ldr	r2, [pc, #428]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d013      	beq.n	8005e8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fd fcee 	bl	8003844 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e6c:	f7fd fcea 	bl	8003844 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b64      	cmp	r3, #100	@ 0x64
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e21f      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7e:	4b61      	ldr	r3, [pc, #388]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0xe8>
 8005e8a:	e014      	b.n	8005eb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8c:	f7fd fcda 	bl	8003844 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e94:	f7fd fcd6 	bl	8003844 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b64      	cmp	r3, #100	@ 0x64
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e20b      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ea6:	4b57      	ldr	r3, [pc, #348]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1f0      	bne.n	8005e94 <HAL_RCC_OscConfig+0x110>
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d069      	beq.n	8005f96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ec2:	4b50      	ldr	r3, [pc, #320]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ece:	4b4d      	ldr	r3, [pc, #308]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d11c      	bne.n	8005f14 <HAL_RCC_OscConfig+0x190>
 8005eda:	4b4a      	ldr	r3, [pc, #296]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d116      	bne.n	8005f14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ee6:	4b47      	ldr	r3, [pc, #284]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_RCC_OscConfig+0x17a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d001      	beq.n	8005efe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e1df      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efe:	4b41      	ldr	r3, [pc, #260]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	493d      	ldr	r1, [pc, #244]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	e040      	b.n	8005f96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d023      	beq.n	8005f64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f1c:	4b39      	ldr	r3, [pc, #228]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a38      	ldr	r2, [pc, #224]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fd fc8c 	bl	8003844 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f30:	f7fd fc88 	bl	8003844 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1bd      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f42:	4b30      	ldr	r3, [pc, #192]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4929      	ldr	r1, [pc, #164]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	600b      	str	r3, [r1, #0]
 8005f62:	e018      	b.n	8005f96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f64:	4b27      	ldr	r3, [pc, #156]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a26      	ldr	r2, [pc, #152]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f6a:	f023 0301 	bic.w	r3, r3, #1
 8005f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fd fc68 	bl	8003844 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fd fc64 	bl	8003844 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e199      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0308 	and.w	r3, r3, #8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d038      	beq.n	8006014 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d019      	beq.n	8005fde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005faa:	4b16      	ldr	r3, [pc, #88]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fae:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb6:	f7fd fc45 	bl	8003844 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fd fc41 	bl	8003844 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e176      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x23a>
 8005fdc:	e01a      	b.n	8006014 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fde:	4b09      	ldr	r3, [pc, #36]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe2:	4a08      	ldr	r2, [pc, #32]	@ (8006004 <HAL_RCC_OscConfig+0x280>)
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fea:	f7fd fc2b 	bl	8003844 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff0:	e00a      	b.n	8006008 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff2:	f7fd fc27 	bl	8003844 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d903      	bls.n	8006008 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e15c      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
 8006004:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	4b91      	ldr	r3, [pc, #580]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800600a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ee      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a4 	beq.w	800616a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006022:	4b8b      	ldr	r3, [pc, #556]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800602e:	4b88      	ldr	r3, [pc, #544]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	4a87      	ldr	r2, [pc, #540]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006038:	6413      	str	r3, [r2, #64]	@ 0x40
 800603a:	4b85      	ldr	r3, [pc, #532]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006042:	60bb      	str	r3, [r7, #8]
 8006044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006046:	2301      	movs	r3, #1
 8006048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800604a:	4b82      	ldr	r3, [pc, #520]	@ (8006254 <HAL_RCC_OscConfig+0x4d0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d118      	bne.n	8006088 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006056:	4b7f      	ldr	r3, [pc, #508]	@ (8006254 <HAL_RCC_OscConfig+0x4d0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7e      	ldr	r2, [pc, #504]	@ (8006254 <HAL_RCC_OscConfig+0x4d0>)
 800605c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006062:	f7fd fbef 	bl	8003844 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7fd fbeb 	bl	8003844 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b64      	cmp	r3, #100	@ 0x64
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e120      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607c:	4b75      	ldr	r3, [pc, #468]	@ (8006254 <HAL_RCC_OscConfig+0x4d0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d106      	bne.n	800609e <HAL_RCC_OscConfig+0x31a>
 8006090:	4b6f      	ldr	r3, [pc, #444]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006094:	4a6e      	ldr	r2, [pc, #440]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	6713      	str	r3, [r2, #112]	@ 0x70
 800609c:	e02d      	b.n	80060fa <HAL_RCC_OscConfig+0x376>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x33c>
 80060a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060aa:	4a69      	ldr	r2, [pc, #420]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b2:	4b67      	ldr	r3, [pc, #412]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	4a66      	ldr	r2, [pc, #408]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060be:	e01c      	b.n	80060fa <HAL_RCC_OscConfig+0x376>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b05      	cmp	r3, #5
 80060c6:	d10c      	bne.n	80060e2 <HAL_RCC_OscConfig+0x35e>
 80060c8:	4b61      	ldr	r3, [pc, #388]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060cc:	4a60      	ldr	r2, [pc, #384]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060ce:	f043 0304 	orr.w	r3, r3, #4
 80060d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060da:	f043 0301 	orr.w	r3, r3, #1
 80060de:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e0:	e00b      	b.n	80060fa <HAL_RCC_OscConfig+0x376>
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060e8:	f023 0301 	bic.w	r3, r3, #1
 80060ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ee:	4b58      	ldr	r3, [pc, #352]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f2:	4a57      	ldr	r2, [pc, #348]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80060f4:	f023 0304 	bic.w	r3, r3, #4
 80060f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d015      	beq.n	800612e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006102:	f7fd fb9f 	bl	8003844 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006108:	e00a      	b.n	8006120 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f7fd fb9b 	bl	8003844 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006118:	4293      	cmp	r3, r2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e0ce      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006120:	4b4b      	ldr	r3, [pc, #300]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0ee      	beq.n	800610a <HAL_RCC_OscConfig+0x386>
 800612c:	e014      	b.n	8006158 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612e:	f7fd fb89 	bl	8003844 <HAL_GetTick>
 8006132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006134:	e00a      	b.n	800614c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006136:	f7fd fb85 	bl	8003844 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006144:	4293      	cmp	r3, r2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e0b8      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614c:	4b40      	ldr	r3, [pc, #256]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800614e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ee      	bne.n	8006136 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615e:	4b3c      	ldr	r3, [pc, #240]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	4a3b      	ldr	r2, [pc, #236]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006168:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80a4 	beq.w	80062bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006174:	4b36      	ldr	r3, [pc, #216]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 030c 	and.w	r3, r3, #12
 800617c:	2b08      	cmp	r3, #8
 800617e:	d06b      	beq.n	8006258 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d149      	bne.n	800621c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006188:	4b31      	ldr	r3, [pc, #196]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a30      	ldr	r2, [pc, #192]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800618e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006194:	f7fd fb56 	bl	8003844 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619c:	f7fd fb52 	bl	8003844 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e087      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ae:	4b28      	ldr	r3, [pc, #160]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	3b01      	subs	r3, #1
 80061d4:	041b      	lsls	r3, r3, #16
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	4313      	orrs	r3, r2
 80061e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80061e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e8:	4b19      	ldr	r3, [pc, #100]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a18      	ldr	r2, [pc, #96]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd fb26 	bl	8003844 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fc:	f7fd fb22 	bl	8003844 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e057      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x478>
 800621a:	e04f      	b.n	80062bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621c:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a0b      	ldr	r2, [pc, #44]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fd fb0c 	bl	8003844 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006230:	f7fd fb08 	bl	8003844 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e03d      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006242:	4b03      	ldr	r3, [pc, #12]	@ (8006250 <HAL_RCC_OscConfig+0x4cc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <HAL_RCC_OscConfig+0x4ac>
 800624e:	e035      	b.n	80062bc <HAL_RCC_OscConfig+0x538>
 8006250:	40023800 	.word	0x40023800
 8006254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006258:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x544>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d028      	beq.n	80062b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d121      	bne.n	80062b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d11a      	bne.n	80062b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800628e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d107      	bne.n	80062b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023800 	.word	0x40023800

080062cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0d0      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d910      	bls.n	8006314 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b67      	ldr	r3, [pc, #412]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 020f 	bic.w	r2, r3, #15
 80062fa:	4965      	ldr	r1, [pc, #404]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	4313      	orrs	r3, r2
 8006300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006302:	4b63      	ldr	r3, [pc, #396]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0b8      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d020      	beq.n	8006362 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800632c:	4b59      	ldr	r3, [pc, #356]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a58      	ldr	r2, [pc, #352]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006332:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006336:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006344:	4b53      	ldr	r3, [pc, #332]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4a52      	ldr	r2, [pc, #328]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800634a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800634e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	494d      	ldr	r1, [pc, #308]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d040      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d115      	bne.n	80063ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e07f      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b41      	ldr	r3, [pc, #260]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e073      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3d      	ldr	r3, [pc, #244]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e06b      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b39      	ldr	r3, [pc, #228]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4936      	ldr	r1, [pc, #216]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c0:	f7fd fa40 	bl	8003844 <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fd fa3c 	bl	8003844 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e053      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2d      	ldr	r3, [pc, #180]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b27      	ldr	r3, [pc, #156]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d210      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b24      	ldr	r3, [pc, #144]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 020f 	bic.w	r2, r3, #15
 8006406:	4922      	ldr	r1, [pc, #136]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b20      	ldr	r3, [pc, #128]	@ (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d001      	beq.n	8006420 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e032      	b.n	8006486 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0304 	and.w	r3, r3, #4
 8006428:	2b00      	cmp	r3, #0
 800642a:	d008      	beq.n	800643e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	4916      	ldr	r1, [pc, #88]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d009      	beq.n	800645e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	490e      	ldr	r1, [pc, #56]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800645e:	f000 f821 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8006462:	4602      	mov	r2, r0
 8006464:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	490a      	ldr	r1, [pc, #40]	@ (8006498 <HAL_RCC_ClockConfig+0x1cc>)
 8006470:	5ccb      	ldrb	r3, [r1, r3]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	4a09      	ldr	r2, [pc, #36]	@ (800649c <HAL_RCC_ClockConfig+0x1d0>)
 8006478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800647a:	4b09      	ldr	r3, [pc, #36]	@ (80064a0 <HAL_RCC_ClockConfig+0x1d4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fc fd12 	bl	8002ea8 <HAL_InitTick>

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40023c00 	.word	0x40023c00
 8006494:	40023800 	.word	0x40023800
 8006498:	08021980 	.word	0x08021980
 800649c:	20000054 	.word	0x20000054
 80064a0:	20000058 	.word	0x20000058

080064a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064a8:	b094      	sub	sp, #80	@ 0x50
 80064aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b0:	2300      	movs	r3, #0
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b4:	2300      	movs	r3, #0
 80064b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064bc:	4b79      	ldr	r3, [pc, #484]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 030c 	and.w	r3, r3, #12
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d00d      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x40>
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	f200 80e1 	bhi.w	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x34>
 80064d2:	2b04      	cmp	r3, #4
 80064d4:	d003      	beq.n	80064de <HAL_RCC_GetSysClockFreq+0x3a>
 80064d6:	e0db      	b.n	8006690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064d8:	4b73      	ldr	r3, [pc, #460]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80064da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064dc:	e0db      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064de:	4b73      	ldr	r3, [pc, #460]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x208>)
 80064e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064e2:	e0d8      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064e4:	4b6f      	ldr	r3, [pc, #444]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064ee:	4b6d      	ldr	r3, [pc, #436]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d063      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064fa:	4b6a      	ldr	r3, [pc, #424]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	099b      	lsrs	r3, r3, #6
 8006500:	2200      	movs	r2, #0
 8006502:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006504:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	633b      	str	r3, [r7, #48]	@ 0x30
 800650e:	2300      	movs	r3, #0
 8006510:	637b      	str	r3, [r7, #52]	@ 0x34
 8006512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006516:	4622      	mov	r2, r4
 8006518:	462b      	mov	r3, r5
 800651a:	f04f 0000 	mov.w	r0, #0
 800651e:	f04f 0100 	mov.w	r1, #0
 8006522:	0159      	lsls	r1, r3, #5
 8006524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006528:	0150      	lsls	r0, r2, #5
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4621      	mov	r1, r4
 8006530:	1a51      	subs	r1, r2, r1
 8006532:	6139      	str	r1, [r7, #16]
 8006534:	4629      	mov	r1, r5
 8006536:	eb63 0301 	sbc.w	r3, r3, r1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006548:	4659      	mov	r1, fp
 800654a:	018b      	lsls	r3, r1, #6
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006552:	4651      	mov	r1, sl
 8006554:	018a      	lsls	r2, r1, #6
 8006556:	4651      	mov	r1, sl
 8006558:	ebb2 0801 	subs.w	r8, r2, r1
 800655c:	4659      	mov	r1, fp
 800655e:	eb63 0901 	sbc.w	r9, r3, r1
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800656e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006576:	4690      	mov	r8, r2
 8006578:	4699      	mov	r9, r3
 800657a:	4623      	mov	r3, r4
 800657c:	eb18 0303 	adds.w	r3, r8, r3
 8006580:	60bb      	str	r3, [r7, #8]
 8006582:	462b      	mov	r3, r5
 8006584:	eb49 0303 	adc.w	r3, r9, r3
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006596:	4629      	mov	r1, r5
 8006598:	024b      	lsls	r3, r1, #9
 800659a:	4621      	mov	r1, r4
 800659c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065a0:	4621      	mov	r1, r4
 80065a2:	024a      	lsls	r2, r1, #9
 80065a4:	4610      	mov	r0, r2
 80065a6:	4619      	mov	r1, r3
 80065a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065aa:	2200      	movs	r2, #0
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065b4:	f7fa fb62 	bl	8000c7c <__aeabi_uldivmod>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4613      	mov	r3, r2
 80065be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c0:	e058      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065c2:	4b38      	ldr	r3, [pc, #224]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	2200      	movs	r2, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	4611      	mov	r1, r2
 80065ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	2300      	movs	r3, #0
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	f04f 0000 	mov.w	r0, #0
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	0159      	lsls	r1, r3, #5
 80065ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065ee:	0150      	lsls	r0, r2, #5
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4641      	mov	r1, r8
 80065f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80065fa:	4649      	mov	r1, r9
 80065fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800660c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006614:	ebb2 040a 	subs.w	r4, r2, sl
 8006618:	eb63 050b 	sbc.w	r5, r3, fp
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	00eb      	lsls	r3, r5, #3
 8006626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800662a:	00e2      	lsls	r2, r4, #3
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	4643      	mov	r3, r8
 8006632:	18e3      	adds	r3, r4, r3
 8006634:	603b      	str	r3, [r7, #0]
 8006636:	464b      	mov	r3, r9
 8006638:	eb45 0303 	adc.w	r3, r5, r3
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800664a:	4629      	mov	r1, r5
 800664c:	028b      	lsls	r3, r1, #10
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006654:	4621      	mov	r1, r4
 8006656:	028a      	lsls	r2, r1, #10
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665e:	2200      	movs	r2, #0
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	f7fa fb08 	bl	8000c7c <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006674:	4b0b      	ldr	r3, [pc, #44]	@ (80066a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	0c1b      	lsrs	r3, r3, #16
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	3301      	adds	r3, #1
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006684:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800668e:	e002      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006690:	4b05      	ldr	r3, [pc, #20]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006692:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006698:	4618      	mov	r0, r3
 800669a:	3750      	adds	r7, #80	@ 0x50
 800669c:	46bd      	mov	sp, r7
 800669e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a2:	bf00      	nop
 80066a4:	40023800 	.word	0x40023800
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	007a1200 	.word	0x007a1200

080066b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b4:	4b03      	ldr	r3, [pc, #12]	@ (80066c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066b6:	681b      	ldr	r3, [r3, #0]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000054 	.word	0x20000054

080066c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066cc:	f7ff fff0 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066d0:	4602      	mov	r2, r0
 80066d2:	4b05      	ldr	r3, [pc, #20]	@ (80066e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	0a9b      	lsrs	r3, r3, #10
 80066d8:	f003 0307 	and.w	r3, r3, #7
 80066dc:	4903      	ldr	r1, [pc, #12]	@ (80066ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80066de:	5ccb      	ldrb	r3, [r1, r3]
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40023800 	.word	0x40023800
 80066ec:	08021990 	.word	0x08021990

080066f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066f4:	f7ff ffdc 	bl	80066b0 <HAL_RCC_GetHCLKFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b05      	ldr	r3, [pc, #20]	@ (8006710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	0b5b      	lsrs	r3, r3, #13
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	4903      	ldr	r1, [pc, #12]	@ (8006714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006706:	5ccb      	ldrb	r3, [r1, r3]
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40023800 	.word	0x40023800
 8006714:	08021990 	.word	0x08021990

08006718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	220f      	movs	r2, #15
 8006726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006728:	4b12      	ldr	r3, [pc, #72]	@ (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0203 	and.w	r2, r3, #3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006734:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006740:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800674c:	4b09      	ldr	r3, [pc, #36]	@ (8006774 <HAL_RCC_GetClockConfig+0x5c>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	08db      	lsrs	r3, r3, #3
 8006752:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800675a:	4b07      	ldr	r3, [pc, #28]	@ (8006778 <HAL_RCC_GetClockConfig+0x60>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40023c00 	.word	0x40023c00

0800677c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006790:	2300      	movs	r3, #0
 8006792:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d012      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80067a4:	4b69      	ldr	r3, [pc, #420]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4a68      	ldr	r2, [pc, #416]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067ae:	6093      	str	r3, [r2, #8]
 80067b0:	4b66      	ldr	r3, [pc, #408]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b8:	4964      	ldr	r1, [pc, #400]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d017      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067d6:	4b5d      	ldr	r3, [pc, #372]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e4:	4959      	ldr	r1, [pc, #356]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067f4:	d101      	bne.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80067f6:	2301      	movs	r3, #1
 80067f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006802:	2301      	movs	r3, #1
 8006804:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006812:	4b4e      	ldr	r3, [pc, #312]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006818:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	494a      	ldr	r1, [pc, #296]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006830:	d101      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800683e:	2301      	movs	r3, #1
 8006840:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800684e:	2301      	movs	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 808b 	beq.w	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006860:	4b3a      	ldr	r3, [pc, #232]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	4a39      	ldr	r2, [pc, #228]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800686a:	6413      	str	r3, [r2, #64]	@ 0x40
 800686c:	4b37      	ldr	r3, [pc, #220]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006878:	4b35      	ldr	r3, [pc, #212]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a34      	ldr	r2, [pc, #208]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800687e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006884:	f7fc ffde 	bl	8003844 <HAL_GetTick>
 8006888:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800688c:	f7fc ffda 	bl	8003844 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b64      	cmp	r3, #100	@ 0x64
 8006898:	d901      	bls.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e357      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800689e:	4b2c      	ldr	r3, [pc, #176]	@ (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f0      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068aa:	4b28      	ldr	r3, [pc, #160]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d035      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d02e      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068c8:	4b20      	ldr	r3, [pc, #128]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068d2:	4b1e      	ldr	r3, [pc, #120]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d6:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068de:	4b1b      	ldr	r3, [pc, #108]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	4a1a      	ldr	r2, [pc, #104]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80068ea:	4a18      	ldr	r2, [pc, #96]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068f0:	4b16      	ldr	r3, [pc, #88]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d114      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fc ffa2 	bl	8003844 <HAL_GetTick>
 8006900:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006902:	e00a      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fc ff9e 	bl	8003844 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d901      	bls.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e319      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800691a:	4b0c      	ldr	r3, [pc, #48]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800691c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0ee      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006932:	d111      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006934:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006940:	4b04      	ldr	r3, [pc, #16]	@ (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006942:	400b      	ands	r3, r1
 8006944:	4901      	ldr	r1, [pc, #4]	@ (800694c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
 800694a:	e00b      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800694c:	40023800 	.word	0x40023800
 8006950:	40007000 	.word	0x40007000
 8006954:	0ffffcff 	.word	0x0ffffcff
 8006958:	4baa      	ldr	r3, [pc, #680]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4aa9      	ldr	r2, [pc, #676]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	4ba7      	ldr	r3, [pc, #668]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006966:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006970:	49a4      	ldr	r1, [pc, #656]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006972:	4313      	orrs	r3, r2
 8006974:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b00      	cmp	r3, #0
 8006980:	d010      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006982:	4ba0      	ldr	r3, [pc, #640]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006988:	4a9e      	ldr	r2, [pc, #632]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800698a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800698e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006992:	4b9c      	ldr	r3, [pc, #624]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006994:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	4999      	ldr	r1, [pc, #612]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069b0:	4b94      	ldr	r3, [pc, #592]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069be:	4991      	ldr	r1, [pc, #580]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069e0:	4988      	ldr	r1, [pc, #544]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069f4:	4b83      	ldr	r3, [pc, #524]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a02:	4980      	ldr	r1, [pc, #512]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a16:	4b7b      	ldr	r3, [pc, #492]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a24:	4977      	ldr	r1, [pc, #476]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a38:	4b72      	ldr	r3, [pc, #456]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3e:	f023 0203 	bic.w	r2, r3, #3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a46:	496f      	ldr	r1, [pc, #444]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a60:	f023 020c 	bic.w	r2, r3, #12
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a68:	4966      	ldr	r1, [pc, #408]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00a      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a7c:	4b61      	ldr	r3, [pc, #388]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8a:	495e      	ldr	r1, [pc, #376]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a9e:	4b59      	ldr	r3, [pc, #356]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006aac:	4955      	ldr	r1, [pc, #340]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006ac0:	4b50      	ldr	r3, [pc, #320]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ace:	494d      	ldr	r1, [pc, #308]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ae2:	4b48      	ldr	r3, [pc, #288]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af0:	4944      	ldr	r1, [pc, #272]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00a      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b04:	4b3f      	ldr	r3, [pc, #252]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b12:	493c      	ldr	r1, [pc, #240]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006b26:	4b37      	ldr	r3, [pc, #220]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b34:	4933      	ldr	r1, [pc, #204]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00a      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b48:	4b2e      	ldr	r3, [pc, #184]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b56:	492b      	ldr	r1, [pc, #172]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d011      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b6a:	4b26      	ldr	r3, [pc, #152]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b70:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b78:	4922      	ldr	r1, [pc, #136]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b88:	d101      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006baa:	4b16      	ldr	r3, [pc, #88]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bb8:	4912      	ldr	r1, [pc, #72]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bdc:	4909      	ldr	r1, [pc, #36]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d006      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 80d9 	beq.w	8006daa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bf8:	4b02      	ldr	r3, [pc, #8]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a01      	ldr	r2, [pc, #4]	@ (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c02:	e001      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006c04:	40023800 	.word	0x40023800
 8006c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0a:	f7fc fe1b 	bl	8003844 <HAL_GetTick>
 8006c0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c10:	e008      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c12:	f7fc fe17 	bl	8003844 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b64      	cmp	r3, #100	@ 0x64
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e194      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c24:	4b6c      	ldr	r3, [pc, #432]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1f0      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d021      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11d      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006c44:	4b64      	ldr	r3, [pc, #400]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	f003 0303 	and.w	r3, r3, #3
 8006c50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006c52:	4b61      	ldr	r3, [pc, #388]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c58:	0e1b      	lsrs	r3, r3, #24
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	019a      	lsls	r2, r3, #6
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	041b      	lsls	r3, r3, #16
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	061b      	lsls	r3, r3, #24
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	071b      	lsls	r3, r3, #28
 8006c78:	4957      	ldr	r1, [pc, #348]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c94:	d00a      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d02e      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006caa:	d129      	bne.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006cac:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cb2:	0c1b      	lsrs	r3, r3, #16
 8006cb4:	f003 0303 	and.w	r3, r3, #3
 8006cb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006cba:	4b47      	ldr	r3, [pc, #284]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cc0:	0f1b      	lsrs	r3, r3, #28
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	019a      	lsls	r2, r3, #6
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	071b      	lsls	r3, r3, #28
 8006ce0:	493d      	ldr	r1, [pc, #244]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cee:	f023 021f 	bic.w	r2, r3, #31
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	4937      	ldr	r1, [pc, #220]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01d      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d0c:	4b32      	ldr	r3, [pc, #200]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d12:	0e1b      	lsrs	r3, r3, #24
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d20:	0f1b      	lsrs	r3, r3, #28
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	019a      	lsls	r2, r3, #6
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	431a      	orrs	r2, r3
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	061b      	lsls	r3, r3, #24
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	071b      	lsls	r3, r3, #28
 8006d40:	4925      	ldr	r1, [pc, #148]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d011      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	019a      	lsls	r2, r3, #6
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	071b      	lsls	r3, r3, #28
 8006d70:	4919      	ldr	r1, [pc, #100]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d78:	4b17      	ldr	r3, [pc, #92]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a16      	ldr	r2, [pc, #88]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d84:	f7fc fd5e 	bl	8003844 <HAL_GetTick>
 8006d88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d8c:	f7fc fd5a 	bl	8003844 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b64      	cmp	r3, #100	@ 0x64
 8006d98:	d901      	bls.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0d7      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	f040 80cd 	bne.w	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a08      	ldr	r2, [pc, #32]	@ (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dbe:	f7fc fd41 	bl	8003844 <HAL_GetTick>
 8006dc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006dc4:	e00a      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006dc6:	f7fc fd3d 	bl	8003844 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b64      	cmp	r3, #100	@ 0x64
 8006dd2:	d903      	bls.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0ba      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006dd8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006de8:	d0ed      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d02e      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d12a      	bne.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006e12:	4b51      	ldr	r3, [pc, #324]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e18:	0c1b      	lsrs	r3, r3, #16
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e20:	4b4d      	ldr	r3, [pc, #308]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e26:	0f1b      	lsrs	r3, r3, #28
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	019a      	lsls	r2, r3, #6
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	041b      	lsls	r3, r3, #16
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	061b      	lsls	r3, r3, #24
 8006e40:	431a      	orrs	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	071b      	lsls	r3, r3, #28
 8006e46:	4944      	ldr	r1, [pc, #272]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006e4e:	4b42      	ldr	r3, [pc, #264]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	021b      	lsls	r3, r3, #8
 8006e60:	493d      	ldr	r1, [pc, #244]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d022      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e7c:	d11d      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006e7e:	4b36      	ldr	r3, [pc, #216]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e8c:	4b32      	ldr	r3, [pc, #200]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e92:	0f1b      	lsrs	r3, r3, #28
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	019a      	lsls	r2, r3, #6
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	061b      	lsls	r3, r3, #24
 8006eac:	431a      	orrs	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	071b      	lsls	r3, r3, #28
 8006eb2:	4929      	ldr	r1, [pc, #164]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d028      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ec6:	4b24      	ldr	r3, [pc, #144]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ecc:	0e1b      	lsrs	r3, r3, #24
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ed4:	4b20      	ldr	r3, [pc, #128]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	019a      	lsls	r2, r3, #6
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	431a      	orrs	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	061b      	lsls	r3, r3, #24
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	071b      	lsls	r3, r3, #28
 8006efa:	4917      	ldr	r1, [pc, #92]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f02:	4b15      	ldr	r3, [pc, #84]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f10:	4911      	ldr	r1, [pc, #68]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f18:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f24:	f7fc fc8e 	bl	8003844 <HAL_GetTick>
 8006f28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f2a:	e008      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006f2c:	f7fc fc8a 	bl	8003844 <HAL_GetTick>
 8006f30:	4602      	mov	r2, r0
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	2b64      	cmp	r3, #100	@ 0x64
 8006f38:	d901      	bls.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e007      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f3e:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f4a:	d1ef      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40023800 	.word	0x40023800

08006f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e09d      	b.n	80070aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d108      	bne.n	8006f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f7e:	d009      	beq.n	8006f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	61da      	str	r2, [r3, #28]
 8006f86:	e005      	b.n	8006f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d106      	bne.n	8006fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fb ff0e 	bl	8002dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006fd4:	d902      	bls.n	8006fdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	e002      	b.n	8006fe2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006fea:	d007      	beq.n	8006ffc <HAL_SPI_Init+0xa0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	ea42 0103 	orr.w	r1, r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007046:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	0c1b      	lsrs	r3, r3, #16
 8007058:	f003 0204 	and.w	r2, r3, #4
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007060:	f003 0310 	and.w	r3, r3, #16
 8007064:	431a      	orrs	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007078:	ea42 0103 	orr.w	r1, r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b088      	sub	sp, #32
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_SPI_Transmit+0x22>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e158      	b.n	8007386 <HAL_SPI_Transmit+0x2d4>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070dc:	f7fc fbb2 	bl	8003844 <HAL_GetTick>
 80070e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d002      	beq.n	80070f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80070f2:	2302      	movs	r3, #2
 80070f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80070f6:	e13d      	b.n	8007374 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SPI_Transmit+0x52>
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d102      	bne.n	800710a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007108:	e134      	b.n	8007374 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	88fa      	ldrh	r2, [r7, #6]
 8007122:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007154:	d10f      	bne.n	8007176 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d007      	beq.n	8007194 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800719c:	d94b      	bls.n	8007236 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SPI_Transmit+0xfa>
 80071a6:	8afb      	ldrh	r3, [r7, #22]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d13e      	bne.n	800722a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071d0:	e02b      	b.n	800722a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d112      	bne.n	8007206 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007204:	e011      	b.n	800722a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007206:	f7fc fb1d 	bl	8003844 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d803      	bhi.n	800721e <HAL_SPI_Transmit+0x16c>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d102      	bne.n	8007224 <HAL_SPI_Transmit+0x172>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d102      	bne.n	800722a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007228:	e0a4      	b.n	8007374 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ce      	bne.n	80071d2 <HAL_SPI_Transmit+0x120>
 8007234:	e07c      	b.n	8007330 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_SPI_Transmit+0x192>
 800723e:	8afb      	ldrh	r3, [r7, #22]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d170      	bne.n	8007326 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b01      	cmp	r3, #1
 800724c:	d912      	bls.n	8007274 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	881a      	ldrh	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b02      	subs	r3, #2
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007272:	e058      	b.n	8007326 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007290:	b29b      	uxth	r3, r3
 8007292:	3b01      	subs	r3, #1
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800729a:	e044      	b.n	8007326 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d12b      	bne.n	8007302 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d912      	bls.n	80072da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	881a      	ldrh	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	1c9a      	adds	r2, r3, #2
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b02      	subs	r3, #2
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072d8:	e025      	b.n	8007326 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	330c      	adds	r3, #12
 80072e4:	7812      	ldrb	r2, [r2, #0]
 80072e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007300:	e011      	b.n	8007326 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007302:	f7fc fa9f 	bl	8003844 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d803      	bhi.n	800731a <HAL_SPI_Transmit+0x268>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d102      	bne.n	8007320 <HAL_SPI_Transmit+0x26e>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007324:	e026      	b.n	8007374 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1b5      	bne.n	800729c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fd07 	bl	8007d48 <SPI_EndRxTxTransaction>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	77fb      	strb	r3, [r7, #31]
 8007370:	e000      	b.n	8007374 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007384:	7ffb      	ldrb	r3, [r7, #31]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3720      	adds	r7, #32
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b088      	sub	sp, #32
 8007392:	af02      	add	r7, sp, #8
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	603b      	str	r3, [r7, #0]
 800739a:	4613      	mov	r3, r2
 800739c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073aa:	d112      	bne.n	80073d2 <HAL_SPI_Receive+0x44>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10e      	bne.n	80073d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2204      	movs	r2, #4
 80073b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	4613      	mov	r3, r2
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	68b9      	ldr	r1, [r7, #8]
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f910 	bl	80075ee <HAL_SPI_TransmitReceive>
 80073ce:	4603      	mov	r3, r0
 80073d0:	e109      	b.n	80075e6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d101      	bne.n	80073e0 <HAL_SPI_Receive+0x52>
 80073dc:	2302      	movs	r3, #2
 80073de:	e102      	b.n	80075e6 <HAL_SPI_Receive+0x258>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e8:	f7fc fa2c 	bl	8003844 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d002      	beq.n	8007400 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80073fa:	2302      	movs	r3, #2
 80073fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073fe:	e0e9      	b.n	80075d4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_SPI_Receive+0x7e>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007410:	e0e0      	b.n	80075d4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2204      	movs	r2, #4
 8007416:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	88fa      	ldrh	r2, [r7, #6]
 8007432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800745c:	d908      	bls.n	8007470 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	e007      	b.n	8007480 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007488:	d10f      	bne.n	80074aa <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d007      	beq.n	80074c8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074d0:	d867      	bhi.n	80075a2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80074d2:	e030      	b.n	8007536 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d117      	bne.n	8007512 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f103 020c 	add.w	r2, r3, #12
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007510:	e011      	b.n	8007536 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007512:	f7fc f997 	bl	8003844 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d803      	bhi.n	800752a <HAL_SPI_Receive+0x19c>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d102      	bne.n	8007530 <HAL_SPI_Receive+0x1a2>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007534:	e04e      	b.n	80075d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1c8      	bne.n	80074d4 <HAL_SPI_Receive+0x146>
 8007542:	e034      	b.n	80075ae <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b01      	cmp	r3, #1
 8007550:	d115      	bne.n	800757e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755c:	b292      	uxth	r2, r2
 800755e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007564:	1c9a      	adds	r2, r3, #2
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007570:	b29b      	uxth	r3, r3
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800757c:	e011      	b.n	80075a2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757e:	f7fc f961 	bl	8003844 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d803      	bhi.n	8007596 <HAL_SPI_Receive+0x208>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d102      	bne.n	800759c <HAL_SPI_Receive+0x20e>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075a0:	e018      	b.n	80075d4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1ca      	bne.n	8007544 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fb4c 	bl	8007c50 <SPI_EndRxTransaction>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
 80075d0:	e000      	b.n	80075d4 <HAL_SPI_Receive+0x246>
  }

error :
 80075d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b08a      	sub	sp, #40	@ 0x28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075fc:	2301      	movs	r3, #1
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x26>
 8007610:	2302      	movs	r3, #2
 8007612:	e1fb      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x41e>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800761c:	f7fc f912 	bl	8003844 <HAL_GetTick>
 8007620:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007628:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007634:	887b      	ldrh	r3, [r7, #2]
 8007636:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007638:	7efb      	ldrb	r3, [r7, #27]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d00e      	beq.n	800765c <HAL_SPI_TransmitReceive+0x6e>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d106      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <HAL_SPI_TransmitReceive+0x66>
 800764e:	7efb      	ldrb	r3, [r7, #27]
 8007650:	2b04      	cmp	r3, #4
 8007652:	d003      	beq.n	800765c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007654:	2302      	movs	r3, #2
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800765a:	e1cd      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_SPI_TransmitReceive+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d002      	beq.n	800766e <HAL_SPI_TransmitReceive+0x80>
 8007668:	887b      	ldrh	r3, [r7, #2]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007674:	e1c0      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b04      	cmp	r3, #4
 8007680:	d003      	beq.n	800768a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2205      	movs	r2, #5
 8007686:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	887a      	ldrh	r2, [r7, #2]
 800769a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	887a      	ldrh	r2, [r7, #2]
 80076a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	887a      	ldrh	r2, [r7, #2]
 80076b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	887a      	ldrh	r2, [r7, #2]
 80076b6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076cc:	d802      	bhi.n	80076d4 <HAL_SPI_TransmitReceive+0xe6>
 80076ce:	8a3b      	ldrh	r3, [r7, #16]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d908      	bls.n	80076e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	e007      	b.n	80076f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007700:	2b40      	cmp	r3, #64	@ 0x40
 8007702:	d007      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800771c:	d97c      	bls.n	8007818 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <HAL_SPI_TransmitReceive+0x13e>
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d169      	bne.n	8007800 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007730:	881a      	ldrh	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773c:	1c9a      	adds	r2, r3, #2
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007750:	e056      	b.n	8007800 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d11b      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x1aa>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <HAL_SPI_TransmitReceive+0x1aa>
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	2b01      	cmp	r3, #1
 800776e:	d113      	bne.n	8007798 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	881a      	ldrh	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	1c9a      	adds	r2, r3, #2
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d11c      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x1f2>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d016      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077bc:	b292      	uxth	r2, r2
 80077be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c4:	1c9a      	adds	r2, r3, #2
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077dc:	2301      	movs	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077e0:	f7fc f830 	bl	8003844 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d807      	bhi.n	8007800 <HAL_SPI_TransmitReceive+0x212>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d003      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80077fe:	e0fb      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1a3      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x164>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d19d      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x164>
 8007816:	e0df      	b.n	80079d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <HAL_SPI_TransmitReceive+0x23a>
 8007820:	8a7b      	ldrh	r3, [r7, #18]
 8007822:	2b01      	cmp	r3, #1
 8007824:	f040 80cb 	bne.w	80079be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b01      	cmp	r3, #1
 8007830:	d912      	bls.n	8007858 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007836:	881a      	ldrh	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	1c9a      	adds	r2, r3, #2
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b02      	subs	r3, #2
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007856:	e0b2      	b.n	80079be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007874:	b29b      	uxth	r3, r3
 8007876:	3b01      	subs	r3, #1
 8007878:	b29a      	uxth	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800787e:	e09e      	b.n	80079be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d134      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x30a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d02f      	beq.n	80078f8 <HAL_SPI_TransmitReceive+0x30a>
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	2b01      	cmp	r3, #1
 800789c:	d12c      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d912      	bls.n	80078ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b8:	1c9a      	adds	r2, r3, #2
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	3b02      	subs	r3, #2
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078cc:	e012      	b.n	80078f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	7812      	ldrb	r2, [r2, #0]
 80078da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d148      	bne.n	8007998 <HAL_SPI_TransmitReceive+0x3aa>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d042      	beq.n	8007998 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d923      	bls.n	8007966 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007928:	b292      	uxth	r2, r2
 800792a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	1c9a      	adds	r2, r3, #2
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800793c:	b29b      	uxth	r3, r3
 800793e:	3b02      	subs	r3, #2
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800794e:	b29b      	uxth	r3, r3
 8007950:	2b01      	cmp	r3, #1
 8007952:	d81f      	bhi.n	8007994 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007962:	605a      	str	r2, [r3, #4]
 8007964:	e016      	b.n	8007994 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f103 020c 	add.w	r2, r3, #12
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007994:	2301      	movs	r3, #1
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007998:	f7fb ff54 	bl	8003844 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d803      	bhi.n	80079b0 <HAL_SPI_TransmitReceive+0x3c2>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d102      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x3c8>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d103      	bne.n	80079be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 80079bc:	e01c      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f47f af5b 	bne.w	8007880 <HAL_SPI_TransmitReceive+0x292>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f47f af54 	bne.w	8007880 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f9b3 	bl	8007d48 <SPI_EndRxTxTransaction>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	661a      	str	r2, [r3, #96]	@ 0x60
 80079f4:	e000      	b.n	80079f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80079f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007a08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3728      	adds	r7, #40	@ 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a24:	f7fb ff0e 	bl	8003844 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4413      	add	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a34:	f7fb ff06 	bl	8003844 <HAL_GetTick>
 8007a38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a3a:	4b39      	ldr	r3, [pc, #228]	@ (8007b20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	015b      	lsls	r3, r3, #5
 8007a40:	0d1b      	lsrs	r3, r3, #20
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	fb02 f303 	mul.w	r3, r2, r3
 8007a48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a4a:	e054      	b.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d050      	beq.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a54:	f7fb fef6 	bl	8003844 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d902      	bls.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d13d      	bne.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a82:	d111      	bne.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a8c:	d004      	beq.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a96:	d107      	bne.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007aa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ab0:	d10f      	bne.n	8007ad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e017      	b.n	8007b16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4013      	ands	r3, r2
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d19b      	bne.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000054 	.word	0x20000054

08007b24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08a      	sub	sp, #40	@ 0x28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
 8007b30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b36:	f7fb fe85 	bl	8003844 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	4413      	add	r3, r2
 8007b44:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007b46:	f7fb fe7d 	bl	8003844 <HAL_GetTick>
 8007b4a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	330c      	adds	r3, #12
 8007b52:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b54:	4b3d      	ldr	r3, [pc, #244]	@ (8007c4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	4613      	mov	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00da      	lsls	r2, r3, #3
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	0d1b      	lsrs	r3, r3, #20
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b6c:	e060      	b.n	8007c30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b74:	d107      	bne.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d104      	bne.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d050      	beq.n	8007c30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b8e:	f7fb fe59 	bl	8003844 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d902      	bls.n	8007ba4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d13d      	bne.n	8007c20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bbc:	d111      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc6:	d004      	beq.n	8007bd2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd0:	d107      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bea:	d10f      	bne.n	8007c0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e010      	b.n	8007c42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d196      	bne.n	8007b6e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3728      	adds	r7, #40	@ 0x28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000054 	.word	0x20000054

08007c50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c64:	d111      	bne.n	8007c8a <SPI_EndRxTransaction+0x3a>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c6e:	d004      	beq.n	8007c7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c78:	d107      	bne.n	8007c8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c88:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c92:	d112      	bne.n	8007cba <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	@ 0x80
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff feb8 	bl	8007a14 <SPI_WaitFlagStateUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d021      	beq.n	8007cee <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cae:	f043 0220 	orr.w	r2, r3, #32
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e03d      	b.n	8007d36 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cba:	4b21      	ldr	r3, [pc, #132]	@ (8007d40 <SPI_EndRxTransaction+0xf0>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a21      	ldr	r2, [pc, #132]	@ (8007d44 <SPI_EndRxTransaction+0xf4>)
 8007cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc4:	0d5b      	lsrs	r3, r3, #21
 8007cc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d0f2      	beq.n	8007cd0 <SPI_EndRxTransaction+0x80>
 8007cea:	e000      	b.n	8007cee <SPI_EndRxTransaction+0x9e>
        break;
 8007cec:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cf6:	d11d      	bne.n	8007d34 <SPI_EndRxTransaction+0xe4>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d00:	d004      	beq.n	8007d0c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d0a:	d113      	bne.n	8007d34 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff ff03 	bl	8007b24 <SPI_WaitFifoStateUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d007      	beq.n	8007d34 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e000      	b.n	8007d36 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000054 	.word	0x20000054
 8007d44:	165e9f81 	.word	0x165e9f81

08007d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fedf 	bl	8007b24 <SPI_WaitFifoStateUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d70:	f043 0220 	orr.w	r2, r3, #32
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e046      	b.n	8007e0a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d7c:	4b25      	ldr	r3, [pc, #148]	@ (8007e14 <SPI_EndRxTxTransaction+0xcc>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a25      	ldr	r2, [pc, #148]	@ (8007e18 <SPI_EndRxTxTransaction+0xd0>)
 8007d82:	fba2 2303 	umull	r2, r3, r2, r3
 8007d86:	0d5b      	lsrs	r3, r3, #21
 8007d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
 8007d90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d9a:	d112      	bne.n	8007dc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	2180      	movs	r1, #128	@ 0x80
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fe34 	bl	8007a14 <SPI_WaitFlagStateUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d016      	beq.n	8007de0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db6:	f043 0220 	orr.w	r2, r3, #32
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e023      	b.n	8007e0a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dd8:	2b80      	cmp	r3, #128	@ 0x80
 8007dda:	d0f2      	beq.n	8007dc2 <SPI_EndRxTxTransaction+0x7a>
 8007ddc:	e000      	b.n	8007de0 <SPI_EndRxTxTransaction+0x98>
        break;
 8007dde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff fe99 	bl	8007b24 <SPI_WaitFifoStateUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dfc:	f043 0220 	orr.w	r2, r3, #32
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e000      	b.n	8007e0a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000054 	.word	0x20000054
 8007e18:	165e9f81 	.word	0x165e9f81

08007e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e049      	b.n	8007ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d106      	bne.n	8007e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fb fa52 	bl	80032ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4619      	mov	r1, r3
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	f000 fc34 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d001      	beq.n	8007ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e054      	b.n	8007f8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a26      	ldr	r2, [pc, #152]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d022      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d01d      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a22      	ldr	r2, [pc, #136]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d018      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a21      	ldr	r2, [pc, #132]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1f      	ldr	r2, [pc, #124]	@ (8007fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00e      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1e      	ldr	r2, [pc, #120]	@ (8007fac <HAL_TIM_Base_Start_IT+0xe0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d009      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d004      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x80>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d115      	bne.n	8007f78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	4b19      	ldr	r3, [pc, #100]	@ (8007fb8 <HAL_TIM_Base_Start_IT+0xec>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b06      	cmp	r3, #6
 8007f5c:	d015      	beq.n	8007f8a <HAL_TIM_Base_Start_IT+0xbe>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f64:	d011      	beq.n	8007f8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0201 	orr.w	r2, r2, #1
 8007f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f76:	e008      	b.n	8007f8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
 8007f88:	e000      	b.n	8007f8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40010000 	.word	0x40010000
 8007fa0:	40000400 	.word	0x40000400
 8007fa4:	40000800 	.word	0x40000800
 8007fa8:	40000c00 	.word	0x40000c00
 8007fac:	40010400 	.word	0x40010400
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40001800 	.word	0x40001800
 8007fb8:	00010007 	.word	0x00010007

08007fbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e049      	b.n	8008062 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f841 	bl	800806a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f000 fb64 	bl	80086c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008072:	bf00      	nop
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b082      	sub	sp, #8
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d122      	bne.n	80080da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d11b      	bne.n	80080da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f06f 0202 	mvn.w	r2, #2
 80080aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fae3 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 80080c6:	e005      	b.n	80080d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fad5 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fae6 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f003 0304 	and.w	r3, r3, #4
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d122      	bne.n	800812e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d11b      	bne.n	800812e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f06f 0204 	mvn.w	r2, #4
 80080fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2202      	movs	r2, #2
 8008104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fab9 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 800811a:	e005      	b.n	8008128 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 faab 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fabc 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	f003 0308 	and.w	r3, r3, #8
 8008138:	2b08      	cmp	r3, #8
 800813a:	d122      	bne.n	8008182 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f003 0308 	and.w	r3, r3, #8
 8008146:	2b08      	cmp	r3, #8
 8008148:	d11b      	bne.n	8008182 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f06f 0208 	mvn.w	r2, #8
 8008152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2204      	movs	r2, #4
 8008158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	f003 0303 	and.w	r3, r3, #3
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fa8f 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 800816e:	e005      	b.n	800817c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa81 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fa92 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	f003 0310 	and.w	r3, r3, #16
 800818c:	2b10      	cmp	r3, #16
 800818e:	d122      	bne.n	80081d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f003 0310 	and.w	r3, r3, #16
 800819a:	2b10      	cmp	r3, #16
 800819c:	d11b      	bne.n	80081d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f06f 0210 	mvn.w	r2, #16
 80081a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2208      	movs	r2, #8
 80081ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa65 	bl	800868c <HAL_TIM_IC_CaptureCallback>
 80081c2:	e005      	b.n	80081d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fa57 	bl	8008678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa68 	bl	80086a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d10e      	bne.n	8008202 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d107      	bne.n	8008202 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f06f 0201 	mvn.w	r2, #1
 80081fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fa fd91 	bl	8002d24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820c:	2b80      	cmp	r3, #128	@ 0x80
 800820e:	d10e      	bne.n	800822e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b80      	cmp	r3, #128	@ 0x80
 800821c:	d107      	bne.n	800822e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fe7d 	bl	8008f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800823c:	d10e      	bne.n	800825c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008248:	2b80      	cmp	r3, #128	@ 0x80
 800824a:	d107      	bne.n	800825c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fe70 	bl	8008f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008266:	2b40      	cmp	r3, #64	@ 0x40
 8008268:	d10e      	bne.n	8008288 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008274:	2b40      	cmp	r3, #64	@ 0x40
 8008276:	d107      	bne.n	8008288 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fa16 	bl	80086b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b20      	cmp	r3, #32
 8008294:	d10e      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d107      	bne.n	80082b4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0220 	mvn.w	r2, #32
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fe30 	bl	8008f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082d6:	2302      	movs	r3, #2
 80082d8:	e0ff      	b.n	80084da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b14      	cmp	r3, #20
 80082e6:	f200 80f0 	bhi.w	80084ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082ea:	a201      	add	r2, pc, #4	@ (adr r2, 80082f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008345 	.word	0x08008345
 80082f4:	080084cb 	.word	0x080084cb
 80082f8:	080084cb 	.word	0x080084cb
 80082fc:	080084cb 	.word	0x080084cb
 8008300:	08008385 	.word	0x08008385
 8008304:	080084cb 	.word	0x080084cb
 8008308:	080084cb 	.word	0x080084cb
 800830c:	080084cb 	.word	0x080084cb
 8008310:	080083c7 	.word	0x080083c7
 8008314:	080084cb 	.word	0x080084cb
 8008318:	080084cb 	.word	0x080084cb
 800831c:	080084cb 	.word	0x080084cb
 8008320:	08008407 	.word	0x08008407
 8008324:	080084cb 	.word	0x080084cb
 8008328:	080084cb 	.word	0x080084cb
 800832c:	080084cb 	.word	0x080084cb
 8008330:	08008449 	.word	0x08008449
 8008334:	080084cb 	.word	0x080084cb
 8008338:	080084cb 	.word	0x080084cb
 800833c:	080084cb 	.word	0x080084cb
 8008340:	08008489 	.word	0x08008489
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fa5c 	bl	8008808 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0204 	bic.w	r2, r2, #4
 800836e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6999      	ldr	r1, [r3, #24]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	619a      	str	r2, [r3, #24]
      break;
 8008382:	e0a5      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 faae 	bl	80088ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800839e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6999      	ldr	r1, [r3, #24]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	021a      	lsls	r2, r3, #8
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	619a      	str	r2, [r3, #24]
      break;
 80083c4:	e084      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fb05 	bl	80089dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69da      	ldr	r2, [r3, #28]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0208 	orr.w	r2, r2, #8
 80083e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0204 	bic.w	r2, r2, #4
 80083f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69d9      	ldr	r1, [r3, #28]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	61da      	str	r2, [r3, #28]
      break;
 8008404:	e064      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fb5b 	bl	8008ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69d9      	ldr	r1, [r3, #28]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	021a      	lsls	r2, r3, #8
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	61da      	str	r2, [r3, #28]
      break;
 8008446:	e043      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fb92 	bl	8008b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0208 	orr.w	r2, r2, #8
 8008462:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0204 	bic.w	r2, r2, #4
 8008472:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008486:	e023      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fbc4 	bl	8008c1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	021a      	lsls	r2, r3, #8
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80084c8:	e002      	b.n	80084d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	75fb      	strb	r3, [r7, #23]
      break;
 80084ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_TIM_ConfigClockSource+0x1c>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e0b4      	b.n	800866a <HAL_TIM_ConfigClockSource+0x186>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	4b56      	ldr	r3, [pc, #344]	@ (8008674 <HAL_TIM_ConfigClockSource+0x190>)
 800851c:	4013      	ands	r3, r2
 800851e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008538:	d03e      	beq.n	80085b8 <HAL_TIM_ConfigClockSource+0xd4>
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853e:	f200 8087 	bhi.w	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	f000 8086 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x172>
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854e:	d87f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008550:	2b70      	cmp	r3, #112	@ 0x70
 8008552:	d01a      	beq.n	800858a <HAL_TIM_ConfigClockSource+0xa6>
 8008554:	2b70      	cmp	r3, #112	@ 0x70
 8008556:	d87b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008558:	2b60      	cmp	r3, #96	@ 0x60
 800855a:	d050      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x11a>
 800855c:	2b60      	cmp	r3, #96	@ 0x60
 800855e:	d877      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b50      	cmp	r3, #80	@ 0x50
 8008562:	d03c      	beq.n	80085de <HAL_TIM_ConfigClockSource+0xfa>
 8008564:	2b50      	cmp	r3, #80	@ 0x50
 8008566:	d873      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b40      	cmp	r3, #64	@ 0x40
 800856a:	d058      	beq.n	800861e <HAL_TIM_ConfigClockSource+0x13a>
 800856c:	2b40      	cmp	r3, #64	@ 0x40
 800856e:	d86f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008570:	2b30      	cmp	r3, #48	@ 0x30
 8008572:	d064      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008574:	2b30      	cmp	r3, #48	@ 0x30
 8008576:	d86b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d060      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d867      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05c      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008584:	2b10      	cmp	r3, #16
 8008586:	d05a      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008588:	e062      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800859a:	f000 fc0d 	bl	8008db8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	609a      	str	r2, [r3, #8]
      break;
 80085b6:	e04f      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085c8:	f000 fbf6 	bl	8008db8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085da:	609a      	str	r2, [r3, #8]
      break;
 80085dc:	e03c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 fb6a 	bl	8008cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2150      	movs	r1, #80	@ 0x50
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 fbc3 	bl	8008d82 <TIM_ITRx_SetConfig>
      break;
 80085fc:	e02c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800860a:	461a      	mov	r2, r3
 800860c:	f000 fb89 	bl	8008d22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2160      	movs	r1, #96	@ 0x60
 8008616:	4618      	mov	r0, r3
 8008618:	f000 fbb3 	bl	8008d82 <TIM_ITRx_SetConfig>
      break;
 800861c:	e01c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800862a:	461a      	mov	r2, r3
 800862c:	f000 fb4a 	bl	8008cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	@ 0x40
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fba3 	bl	8008d82 <TIM_ITRx_SetConfig>
      break;
 800863c:	e00c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f000 fb9a 	bl	8008d82 <TIM_ITRx_SetConfig>
      break;
 800864e:	e003      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e000      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	fffeff88 	.word	0xfffeff88

08008678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a40      	ldr	r2, [pc, #256]	@ (80087dc <TIM_Base_SetConfig+0x114>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d013      	beq.n	8008708 <TIM_Base_SetConfig+0x40>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e6:	d00f      	beq.n	8008708 <TIM_Base_SetConfig+0x40>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a3d      	ldr	r2, [pc, #244]	@ (80087e0 <TIM_Base_SetConfig+0x118>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00b      	beq.n	8008708 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a3c      	ldr	r2, [pc, #240]	@ (80087e4 <TIM_Base_SetConfig+0x11c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d007      	beq.n	8008708 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3b      	ldr	r2, [pc, #236]	@ (80087e8 <TIM_Base_SetConfig+0x120>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3a      	ldr	r2, [pc, #232]	@ (80087ec <TIM_Base_SetConfig+0x124>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d108      	bne.n	800871a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800870e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a2f      	ldr	r2, [pc, #188]	@ (80087dc <TIM_Base_SetConfig+0x114>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d02b      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008728:	d027      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a2c      	ldr	r2, [pc, #176]	@ (80087e0 <TIM_Base_SetConfig+0x118>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d023      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a2b      	ldr	r2, [pc, #172]	@ (80087e4 <TIM_Base_SetConfig+0x11c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01f      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2a      	ldr	r2, [pc, #168]	@ (80087e8 <TIM_Base_SetConfig+0x120>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d01b      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a29      	ldr	r2, [pc, #164]	@ (80087ec <TIM_Base_SetConfig+0x124>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d017      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a28      	ldr	r2, [pc, #160]	@ (80087f0 <TIM_Base_SetConfig+0x128>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a27      	ldr	r2, [pc, #156]	@ (80087f4 <TIM_Base_SetConfig+0x12c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00f      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a26      	ldr	r2, [pc, #152]	@ (80087f8 <TIM_Base_SetConfig+0x130>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00b      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a25      	ldr	r2, [pc, #148]	@ (80087fc <TIM_Base_SetConfig+0x134>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d007      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a24      	ldr	r2, [pc, #144]	@ (8008800 <TIM_Base_SetConfig+0x138>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d003      	beq.n	800877a <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a23      	ldr	r2, [pc, #140]	@ (8008804 <TIM_Base_SetConfig+0x13c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d108      	bne.n	800878c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a0a      	ldr	r2, [pc, #40]	@ (80087dc <TIM_Base_SetConfig+0x114>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_Base_SetConfig+0xf8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a0c      	ldr	r2, [pc, #48]	@ (80087ec <TIM_Base_SetConfig+0x124>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d103      	bne.n	80087c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	615a      	str	r2, [r3, #20]
}
 80087ce:	bf00      	nop
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40010000 	.word	0x40010000
 80087e0:	40000400 	.word	0x40000400
 80087e4:	40000800 	.word	0x40000800
 80087e8:	40000c00 	.word	0x40000c00
 80087ec:	40010400 	.word	0x40010400
 80087f0:	40014000 	.word	0x40014000
 80087f4:	40014400 	.word	0x40014400
 80087f8:	40014800 	.word	0x40014800
 80087fc:	40001800 	.word	0x40001800
 8008800:	40001c00 	.word	0x40001c00
 8008804:	40002000 	.word	0x40002000

08008808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	f023 0201 	bic.w	r2, r3, #1
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	4b2b      	ldr	r3, [pc, #172]	@ (80088e0 <TIM_OC1_SetConfig+0xd8>)
 8008834:	4013      	ands	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	4313      	orrs	r3, r2
 8008848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f023 0302 	bic.w	r3, r3, #2
 8008850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a21      	ldr	r2, [pc, #132]	@ (80088e4 <TIM_OC1_SetConfig+0xdc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_OC1_SetConfig+0x64>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a20      	ldr	r2, [pc, #128]	@ (80088e8 <TIM_OC1_SetConfig+0xe0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d10c      	bne.n	8008886 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0308 	bic.w	r3, r3, #8
 8008872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f023 0304 	bic.w	r3, r3, #4
 8008884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <TIM_OC1_SetConfig+0xdc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d003      	beq.n	8008896 <TIM_OC1_SetConfig+0x8e>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <TIM_OC1_SetConfig+0xe0>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d111      	bne.n	80088ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800889c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	693a      	ldr	r2, [r7, #16]
 80088be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	fffeff8f 	.word	0xfffeff8f
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40010400 	.word	0x40010400

080088ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	f023 0210 	bic.w	r2, r3, #16
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4b2e      	ldr	r3, [pc, #184]	@ (80089d0 <TIM_OC2_SetConfig+0xe4>)
 8008918:	4013      	ands	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	4313      	orrs	r3, r2
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f023 0320 	bic.w	r3, r3, #32
 8008936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a23      	ldr	r2, [pc, #140]	@ (80089d4 <TIM_OC2_SetConfig+0xe8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_OC2_SetConfig+0x68>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a22      	ldr	r2, [pc, #136]	@ (80089d8 <TIM_OC2_SetConfig+0xec>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d10d      	bne.n	8008970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800895a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800896e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a18      	ldr	r2, [pc, #96]	@ (80089d4 <TIM_OC2_SetConfig+0xe8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_OC2_SetConfig+0x94>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a17      	ldr	r2, [pc, #92]	@ (80089d8 <TIM_OC2_SetConfig+0xec>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d113      	bne.n	80089a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008986:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800898e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	feff8fff 	.word	0xfeff8fff
 80089d4:	40010000 	.word	0x40010000
 80089d8:	40010400 	.word	0x40010400

080089dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4b2d      	ldr	r3, [pc, #180]	@ (8008abc <TIM_OC3_SetConfig+0xe0>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	021b      	lsls	r3, r3, #8
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a22      	ldr	r2, [pc, #136]	@ (8008ac0 <TIM_OC3_SetConfig+0xe4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d003      	beq.n	8008a42 <TIM_OC3_SetConfig+0x66>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a21      	ldr	r2, [pc, #132]	@ (8008ac4 <TIM_OC3_SetConfig+0xe8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d10d      	bne.n	8008a5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	021b      	lsls	r3, r3, #8
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a17      	ldr	r2, [pc, #92]	@ (8008ac0 <TIM_OC3_SetConfig+0xe4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d003      	beq.n	8008a6e <TIM_OC3_SetConfig+0x92>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a16      	ldr	r2, [pc, #88]	@ (8008ac4 <TIM_OC3_SetConfig+0xe8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d113      	bne.n	8008a96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	fffeff8f 	.word	0xfffeff8f
 8008ac0:	40010000 	.word	0x40010000
 8008ac4:	40010400 	.word	0x40010400

08008ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69db      	ldr	r3, [r3, #28]
 8008aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b6c <TIM_OC4_SetConfig+0xa4>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	021b      	lsls	r3, r3, #8
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	031b      	lsls	r3, r3, #12
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a13      	ldr	r2, [pc, #76]	@ (8008b70 <TIM_OC4_SetConfig+0xa8>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d003      	beq.n	8008b30 <TIM_OC4_SetConfig+0x68>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a12      	ldr	r2, [pc, #72]	@ (8008b74 <TIM_OC4_SetConfig+0xac>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d109      	bne.n	8008b44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	019b      	lsls	r3, r3, #6
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	621a      	str	r2, [r3, #32]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	feff8fff 	.word	0xfeff8fff
 8008b70:	40010000 	.word	0x40010000
 8008b74:	40010400 	.word	0x40010400

08008b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c10 <TIM_OC5_SetConfig+0x98>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008bb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a12      	ldr	r2, [pc, #72]	@ (8008c14 <TIM_OC5_SetConfig+0x9c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d003      	beq.n	8008bd6 <TIM_OC5_SetConfig+0x5e>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a11      	ldr	r2, [pc, #68]	@ (8008c18 <TIM_OC5_SetConfig+0xa0>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d109      	bne.n	8008bea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	621a      	str	r2, [r3, #32]
}
 8008c04:	bf00      	nop
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	fffeff8f 	.word	0xfffeff8f
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40010400 	.word	0x40010400

08008c1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b087      	sub	sp, #28
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <TIM_OC6_SetConfig+0x9c>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	693a      	ldr	r2, [r7, #16]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <TIM_OC6_SetConfig+0xa0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC6_SetConfig+0x60>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a12      	ldr	r2, [pc, #72]	@ (8008cc0 <TIM_OC6_SetConfig+0xa4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d109      	bne.n	8008c90 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	feff8fff 	.word	0xfeff8fff
 8008cbc:	40010000 	.word	0x40010000
 8008cc0:	40010400 	.word	0x40010400

08008cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f023 0201 	bic.w	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f023 030a 	bic.w	r3, r3, #10
 8008d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	621a      	str	r2, [r3, #32]
}
 8008d16:	bf00      	nop
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b087      	sub	sp, #28
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f023 0210 	bic.w	r2, r3, #16
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	031b      	lsls	r3, r3, #12
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	011b      	lsls	r3, r3, #4
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr

08008d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b085      	sub	sp, #20
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	f043 0307 	orr.w	r3, r3, #7
 8008da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	609a      	str	r2, [r3, #8]
}
 8008dac:	bf00      	nop
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	021a      	lsls	r2, r3, #8
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	609a      	str	r2, [r3, #8]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e06d      	b.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a30      	ldr	r2, [pc, #192]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d108      	bne.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a20      	ldr	r2, [pc, #128]	@ (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d022      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e82:	d01d      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d018      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	@ (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00e      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a15      	ldr	r2, [pc, #84]	@ (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a16      	ldr	r2, [pc, #88]	@ (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a15      	ldr	r2, [pc, #84]	@ (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10c      	bne.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40000400 	.word	0x40000400
 8008f04:	40000800 	.word	0x40000800
 8008f08:	40000c00 	.word	0x40000c00
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40001800 	.word	0x40001800

08008f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e040      	b.n	8008fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fa fa52 	bl	800341c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	@ 0x24
 8008f7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fbe6 	bl	8009760 <UART_SetConfig>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e022      	b.n	8008fe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fe3e 	bl	8009c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fec5 	bl	8009d6c <UART_CheckIdleState>
 8008fe2:	4603      	mov	r3, r0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	@ 0x28
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009000:	2b20      	cmp	r3, #32
 8009002:	d171      	bne.n	80090e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_UART_Transmit+0x24>
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e06a      	b.n	80090ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2221      	movs	r2, #33	@ 0x21
 8009020:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009022:	f7fa fc0f 	bl	8003844 <HAL_GetTick>
 8009026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009040:	d108      	bne.n	8009054 <HAL_UART_Transmit+0x68>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e003      	b.n	800905c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800905c:	e02c      	b.n	80090b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2200      	movs	r2, #0
 8009066:	2180      	movs	r1, #128	@ 0x80
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 feb6 	bl	8009dda <UART_WaitOnFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e038      	b.n	80090ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800908c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3302      	adds	r3, #2
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	e007      	b.n	80090a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1cc      	bne.n	800905e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2200      	movs	r2, #0
 80090cc:	2140      	movs	r1, #64	@ 0x40
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fe83 	bl	8009dda <UART_WaitOnFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e005      	b.n	80090ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2220      	movs	r2, #32
 80090e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e000      	b.n	80090ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80090e8:	2302      	movs	r3, #2
  }
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b08a      	sub	sp, #40	@ 0x28
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	4613      	mov	r3, r2
 80090fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009106:	2b20      	cmp	r3, #32
 8009108:	d132      	bne.n	8009170 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <HAL_UART_Receive_IT+0x24>
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e02b      	b.n	8009172 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912a:	2b00      	cmp	r3, #0
 800912c:	d018      	beq.n	8009160 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	613b      	str	r3, [r7, #16]
   return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914c:	623b      	str	r3, [r7, #32]
 800914e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69f9      	ldr	r1, [r7, #28]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	61bb      	str	r3, [r7, #24]
   return(result);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e6      	bne.n	800912e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009160:	88fb      	ldrh	r3, [r7, #6]
 8009162:	461a      	mov	r2, r3
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fefe 	bl	8009f68 <UART_Start_Receive_IT>
 800916c:	4603      	mov	r3, r0
 800916e:	e000      	b.n	8009172 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009170:	2302      	movs	r3, #2
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3728      	adds	r7, #40	@ 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b0ba      	sub	sp, #232	@ 0xe8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091aa:	4013      	ands	r3, r2
 80091ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d115      	bne.n	80091e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00f      	beq.n	80091e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8297 	beq.w	8009708 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
      }
      return;
 80091e2:	e291      	b.n	8009708 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8117 	beq.w	800941c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80091ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80091fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091fe:	4b85      	ldr	r3, [pc, #532]	@ (8009414 <HAL_UART_IRQHandler+0x298>)
 8009200:	4013      	ands	r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 810a 	beq.w	800941c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d011      	beq.n	8009238 <HAL_UART_IRQHandler+0xbc>
 8009214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2201      	movs	r2, #1
 8009226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800922e:	f043 0201 	orr.w	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d011      	beq.n	8009268 <HAL_UART_IRQHandler+0xec>
 8009244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009248:	f003 0301 	and.w	r3, r3, #1
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2202      	movs	r2, #2
 8009256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800925e:	f043 0204 	orr.w	r2, r3, #4
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d011      	beq.n	8009298 <HAL_UART_IRQHandler+0x11c>
 8009274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2204      	movs	r2, #4
 8009286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800928e:	f043 0202 	orr.w	r2, r3, #2
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d017      	beq.n	80092d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a8:	f003 0320 	and.w	r3, r3, #32
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d105      	bne.n	80092bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80092b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2208      	movs	r2, #8
 80092c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092ca:	f043 0208 	orr.w	r2, r3, #8
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d012      	beq.n	8009306 <HAL_UART_IRQHandler+0x18a>
 80092e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00c      	beq.n	8009306 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092fc:	f043 0220 	orr.w	r2, r3, #32
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800930c:	2b00      	cmp	r3, #0
 800930e:	f000 81fd 	beq.w	800970c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009316:	f003 0320 	and.w	r3, r3, #32
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800931e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009340:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800934e:	2b40      	cmp	r3, #64	@ 0x40
 8009350:	d005      	beq.n	800935e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009356:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04f      	beq.n	80093fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fec8 	bl	800a0f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b40      	cmp	r3, #64	@ 0x40
 8009370:	d141      	bne.n	80093f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800938c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3308      	adds	r3, #8
 800939a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800939e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1d9      	bne.n	8009372 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d013      	beq.n	80093ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093ca:	4a13      	ldr	r2, [pc, #76]	@ (8009418 <HAL_UART_IRQHandler+0x29c>)
 80093cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fa fbb8 	bl	8003b48 <HAL_DMA_Abort_IT>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d017      	beq.n	800940e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80093e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ec:	e00f      	b.n	800940e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9a0 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f4:	e00b      	b.n	800940e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f99c 	bl	8009734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fc:	e007      	b.n	800940e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f998 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800940c:	e17e      	b.n	800970c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940e:	bf00      	nop
    return;
 8009410:	e17c      	b.n	800970c <HAL_UART_IRQHandler+0x590>
 8009412:	bf00      	nop
 8009414:	04000120 	.word	0x04000120
 8009418:	0800a1bd 	.word	0x0800a1bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009420:	2b01      	cmp	r3, #1
 8009422:	f040 814c 	bne.w	80096be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b00      	cmp	r3, #0
 8009430:	f000 8145 	beq.w	80096be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009438:	f003 0310 	and.w	r3, r3, #16
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 813e 	beq.w	80096be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2210      	movs	r2, #16
 8009448:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009454:	2b40      	cmp	r3, #64	@ 0x40
 8009456:	f040 80b6 	bne.w	80095c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009466:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800946a:	2b00      	cmp	r3, #0
 800946c:	f000 8150 	beq.w	8009710 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800947a:	429a      	cmp	r2, r3
 800947c:	f080 8148 	bcs.w	8009710 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009486:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009494:	f000 8086 	beq.w	80095a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80094ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80094da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1da      	bne.n	8009498 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3308      	adds	r3, #8
 80094e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094f4:	f023 0301 	bic.w	r3, r3, #1
 80094f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009506:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800950a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800950e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e1      	bne.n	80094e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800952e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e3      	bne.n	800951e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956c:	e853 3f00 	ldrex	r3, [r3]
 8009570:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009574:	f023 0310 	bic.w	r3, r3, #16
 8009578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009586:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009588:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800958c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e4      	bne.n	8009564 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fa fa62 	bl	8003a68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	4619      	mov	r1, r3
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f8c2 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095c4:	e0a4      	b.n	8009710 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f000 8096 	beq.w	8009714 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80095e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 8091 	beq.w	8009714 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009614:	647b      	str	r3, [r7, #68]	@ 0x44
 8009616:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800961a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800961c:	e841 2300 	strex	r3, r2, [r1]
 8009620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e4      	bne.n	80095f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	623b      	str	r3, [r7, #32]
   return(result);
 8009638:	6a3b      	ldr	r3, [r7, #32]
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	3308      	adds	r3, #8
 8009648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800964c:	633a      	str	r2, [r7, #48]	@ 0x30
 800964e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800965a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e3      	bne.n	8009628 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2220      	movs	r2, #32
 8009664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	60fb      	str	r3, [r7, #12]
   return(result);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f023 0310 	bic.w	r3, r3, #16
 8009688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	69b9      	ldr	r1, [r7, #24]
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	617b      	str	r3, [r7, #20]
   return(result);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e4      	bne.n	8009674 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2202      	movs	r2, #2
 80096ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096b4:	4619      	mov	r1, r3
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f846 	bl	8009748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096bc:	e02a      	b.n	8009714 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80096be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00e      	beq.n	80096e8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80096ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d008      	beq.n	80096e8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01c      	beq.n	8009718 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	4798      	blx	r3
    }
    return;
 80096e6:	e017      	b.n	8009718 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d012      	beq.n	800971a <HAL_UART_IRQHandler+0x59e>
 80096f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00c      	beq.n	800971a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fd71 	bl	800a1e8 <UART_EndTransmit_IT>
    return;
 8009706:	e008      	b.n	800971a <HAL_UART_IRQHandler+0x59e>
      return;
 8009708:	bf00      	nop
 800970a:	e006      	b.n	800971a <HAL_UART_IRQHandler+0x59e>
    return;
 800970c:	bf00      	nop
 800970e:	e004      	b.n	800971a <HAL_UART_IRQHandler+0x59e>
      return;
 8009710:	bf00      	nop
 8009712:	e002      	b.n	800971a <HAL_UART_IRQHandler+0x59e>
      return;
 8009714:	bf00      	nop
 8009716:	e000      	b.n	800971a <HAL_UART_IRQHandler+0x59e>
    return;
 8009718:	bf00      	nop
  }

}
 800971a:	37e8      	adds	r7, #232	@ 0xe8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	4ba6      	ldr	r3, [pc, #664]	@ (8009a24 <UART_SetConfig+0x2c4>)
 800978c:	4013      	ands	r3, r2
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	430b      	orrs	r3, r1
 8009796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a94      	ldr	r2, [pc, #592]	@ (8009a28 <UART_SetConfig+0x2c8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d120      	bne.n	800981e <UART_SetConfig+0xbe>
 80097dc:	4b93      	ldr	r3, [pc, #588]	@ (8009a2c <UART_SetConfig+0x2cc>)
 80097de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d816      	bhi.n	8009818 <UART_SetConfig+0xb8>
 80097ea:	a201      	add	r2, pc, #4	@ (adr r2, 80097f0 <UART_SetConfig+0x90>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009801 	.word	0x08009801
 80097f4:	0800980d 	.word	0x0800980d
 80097f8:	08009807 	.word	0x08009807
 80097fc:	08009813 	.word	0x08009813
 8009800:	2301      	movs	r3, #1
 8009802:	77fb      	strb	r3, [r7, #31]
 8009804:	e150      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009806:	2302      	movs	r3, #2
 8009808:	77fb      	strb	r3, [r7, #31]
 800980a:	e14d      	b.n	8009aa8 <UART_SetConfig+0x348>
 800980c:	2304      	movs	r3, #4
 800980e:	77fb      	strb	r3, [r7, #31]
 8009810:	e14a      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009812:	2308      	movs	r3, #8
 8009814:	77fb      	strb	r3, [r7, #31]
 8009816:	e147      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009818:	2310      	movs	r3, #16
 800981a:	77fb      	strb	r3, [r7, #31]
 800981c:	e144      	b.n	8009aa8 <UART_SetConfig+0x348>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a83      	ldr	r2, [pc, #524]	@ (8009a30 <UART_SetConfig+0x2d0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d132      	bne.n	800988e <UART_SetConfig+0x12e>
 8009828:	4b80      	ldr	r3, [pc, #512]	@ (8009a2c <UART_SetConfig+0x2cc>)
 800982a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982e:	f003 030c 	and.w	r3, r3, #12
 8009832:	2b0c      	cmp	r3, #12
 8009834:	d828      	bhi.n	8009888 <UART_SetConfig+0x128>
 8009836:	a201      	add	r2, pc, #4	@ (adr r2, 800983c <UART_SetConfig+0xdc>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009871 	.word	0x08009871
 8009840:	08009889 	.word	0x08009889
 8009844:	08009889 	.word	0x08009889
 8009848:	08009889 	.word	0x08009889
 800984c:	0800987d 	.word	0x0800987d
 8009850:	08009889 	.word	0x08009889
 8009854:	08009889 	.word	0x08009889
 8009858:	08009889 	.word	0x08009889
 800985c:	08009877 	.word	0x08009877
 8009860:	08009889 	.word	0x08009889
 8009864:	08009889 	.word	0x08009889
 8009868:	08009889 	.word	0x08009889
 800986c:	08009883 	.word	0x08009883
 8009870:	2300      	movs	r3, #0
 8009872:	77fb      	strb	r3, [r7, #31]
 8009874:	e118      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009876:	2302      	movs	r3, #2
 8009878:	77fb      	strb	r3, [r7, #31]
 800987a:	e115      	b.n	8009aa8 <UART_SetConfig+0x348>
 800987c:	2304      	movs	r3, #4
 800987e:	77fb      	strb	r3, [r7, #31]
 8009880:	e112      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009882:	2308      	movs	r3, #8
 8009884:	77fb      	strb	r3, [r7, #31]
 8009886:	e10f      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009888:	2310      	movs	r3, #16
 800988a:	77fb      	strb	r3, [r7, #31]
 800988c:	e10c      	b.n	8009aa8 <UART_SetConfig+0x348>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a68      	ldr	r2, [pc, #416]	@ (8009a34 <UART_SetConfig+0x2d4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d120      	bne.n	80098da <UART_SetConfig+0x17a>
 8009898:	4b64      	ldr	r3, [pc, #400]	@ (8009a2c <UART_SetConfig+0x2cc>)
 800989a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098a2:	2b30      	cmp	r3, #48	@ 0x30
 80098a4:	d013      	beq.n	80098ce <UART_SetConfig+0x16e>
 80098a6:	2b30      	cmp	r3, #48	@ 0x30
 80098a8:	d814      	bhi.n	80098d4 <UART_SetConfig+0x174>
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d009      	beq.n	80098c2 <UART_SetConfig+0x162>
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	d810      	bhi.n	80098d4 <UART_SetConfig+0x174>
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <UART_SetConfig+0x15c>
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d006      	beq.n	80098c8 <UART_SetConfig+0x168>
 80098ba:	e00b      	b.n	80098d4 <UART_SetConfig+0x174>
 80098bc:	2300      	movs	r3, #0
 80098be:	77fb      	strb	r3, [r7, #31]
 80098c0:	e0f2      	b.n	8009aa8 <UART_SetConfig+0x348>
 80098c2:	2302      	movs	r3, #2
 80098c4:	77fb      	strb	r3, [r7, #31]
 80098c6:	e0ef      	b.n	8009aa8 <UART_SetConfig+0x348>
 80098c8:	2304      	movs	r3, #4
 80098ca:	77fb      	strb	r3, [r7, #31]
 80098cc:	e0ec      	b.n	8009aa8 <UART_SetConfig+0x348>
 80098ce:	2308      	movs	r3, #8
 80098d0:	77fb      	strb	r3, [r7, #31]
 80098d2:	e0e9      	b.n	8009aa8 <UART_SetConfig+0x348>
 80098d4:	2310      	movs	r3, #16
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e0e6      	b.n	8009aa8 <UART_SetConfig+0x348>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a56      	ldr	r2, [pc, #344]	@ (8009a38 <UART_SetConfig+0x2d8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d120      	bne.n	8009926 <UART_SetConfig+0x1c6>
 80098e4:	4b51      	ldr	r3, [pc, #324]	@ (8009a2c <UART_SetConfig+0x2cc>)
 80098e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80098ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80098f0:	d013      	beq.n	800991a <UART_SetConfig+0x1ba>
 80098f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80098f4:	d814      	bhi.n	8009920 <UART_SetConfig+0x1c0>
 80098f6:	2b80      	cmp	r3, #128	@ 0x80
 80098f8:	d009      	beq.n	800990e <UART_SetConfig+0x1ae>
 80098fa:	2b80      	cmp	r3, #128	@ 0x80
 80098fc:	d810      	bhi.n	8009920 <UART_SetConfig+0x1c0>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <UART_SetConfig+0x1a8>
 8009902:	2b40      	cmp	r3, #64	@ 0x40
 8009904:	d006      	beq.n	8009914 <UART_SetConfig+0x1b4>
 8009906:	e00b      	b.n	8009920 <UART_SetConfig+0x1c0>
 8009908:	2300      	movs	r3, #0
 800990a:	77fb      	strb	r3, [r7, #31]
 800990c:	e0cc      	b.n	8009aa8 <UART_SetConfig+0x348>
 800990e:	2302      	movs	r3, #2
 8009910:	77fb      	strb	r3, [r7, #31]
 8009912:	e0c9      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009914:	2304      	movs	r3, #4
 8009916:	77fb      	strb	r3, [r7, #31]
 8009918:	e0c6      	b.n	8009aa8 <UART_SetConfig+0x348>
 800991a:	2308      	movs	r3, #8
 800991c:	77fb      	strb	r3, [r7, #31]
 800991e:	e0c3      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009920:	2310      	movs	r3, #16
 8009922:	77fb      	strb	r3, [r7, #31]
 8009924:	e0c0      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a44      	ldr	r2, [pc, #272]	@ (8009a3c <UART_SetConfig+0x2dc>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d125      	bne.n	800997c <UART_SetConfig+0x21c>
 8009930:	4b3e      	ldr	r3, [pc, #248]	@ (8009a2c <UART_SetConfig+0x2cc>)
 8009932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800993a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800993e:	d017      	beq.n	8009970 <UART_SetConfig+0x210>
 8009940:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009944:	d817      	bhi.n	8009976 <UART_SetConfig+0x216>
 8009946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800994a:	d00b      	beq.n	8009964 <UART_SetConfig+0x204>
 800994c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009950:	d811      	bhi.n	8009976 <UART_SetConfig+0x216>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <UART_SetConfig+0x1fe>
 8009956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800995a:	d006      	beq.n	800996a <UART_SetConfig+0x20a>
 800995c:	e00b      	b.n	8009976 <UART_SetConfig+0x216>
 800995e:	2300      	movs	r3, #0
 8009960:	77fb      	strb	r3, [r7, #31]
 8009962:	e0a1      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009964:	2302      	movs	r3, #2
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e09e      	b.n	8009aa8 <UART_SetConfig+0x348>
 800996a:	2304      	movs	r3, #4
 800996c:	77fb      	strb	r3, [r7, #31]
 800996e:	e09b      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009970:	2308      	movs	r3, #8
 8009972:	77fb      	strb	r3, [r7, #31]
 8009974:	e098      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009976:	2310      	movs	r3, #16
 8009978:	77fb      	strb	r3, [r7, #31]
 800997a:	e095      	b.n	8009aa8 <UART_SetConfig+0x348>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a2f      	ldr	r2, [pc, #188]	@ (8009a40 <UART_SetConfig+0x2e0>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d125      	bne.n	80099d2 <UART_SetConfig+0x272>
 8009986:	4b29      	ldr	r3, [pc, #164]	@ (8009a2c <UART_SetConfig+0x2cc>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009990:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009994:	d017      	beq.n	80099c6 <UART_SetConfig+0x266>
 8009996:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800999a:	d817      	bhi.n	80099cc <UART_SetConfig+0x26c>
 800999c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099a0:	d00b      	beq.n	80099ba <UART_SetConfig+0x25a>
 80099a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099a6:	d811      	bhi.n	80099cc <UART_SetConfig+0x26c>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <UART_SetConfig+0x254>
 80099ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099b0:	d006      	beq.n	80099c0 <UART_SetConfig+0x260>
 80099b2:	e00b      	b.n	80099cc <UART_SetConfig+0x26c>
 80099b4:	2301      	movs	r3, #1
 80099b6:	77fb      	strb	r3, [r7, #31]
 80099b8:	e076      	b.n	8009aa8 <UART_SetConfig+0x348>
 80099ba:	2302      	movs	r3, #2
 80099bc:	77fb      	strb	r3, [r7, #31]
 80099be:	e073      	b.n	8009aa8 <UART_SetConfig+0x348>
 80099c0:	2304      	movs	r3, #4
 80099c2:	77fb      	strb	r3, [r7, #31]
 80099c4:	e070      	b.n	8009aa8 <UART_SetConfig+0x348>
 80099c6:	2308      	movs	r3, #8
 80099c8:	77fb      	strb	r3, [r7, #31]
 80099ca:	e06d      	b.n	8009aa8 <UART_SetConfig+0x348>
 80099cc:	2310      	movs	r3, #16
 80099ce:	77fb      	strb	r3, [r7, #31]
 80099d0:	e06a      	b.n	8009aa8 <UART_SetConfig+0x348>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009a44 <UART_SetConfig+0x2e4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d138      	bne.n	8009a4e <UART_SetConfig+0x2ee>
 80099dc:	4b13      	ldr	r3, [pc, #76]	@ (8009a2c <UART_SetConfig+0x2cc>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80099e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099ea:	d017      	beq.n	8009a1c <UART_SetConfig+0x2bc>
 80099ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80099f0:	d82a      	bhi.n	8009a48 <UART_SetConfig+0x2e8>
 80099f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099f6:	d00b      	beq.n	8009a10 <UART_SetConfig+0x2b0>
 80099f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099fc:	d824      	bhi.n	8009a48 <UART_SetConfig+0x2e8>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <UART_SetConfig+0x2aa>
 8009a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a06:	d006      	beq.n	8009a16 <UART_SetConfig+0x2b6>
 8009a08:	e01e      	b.n	8009a48 <UART_SetConfig+0x2e8>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	77fb      	strb	r3, [r7, #31]
 8009a0e:	e04b      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a10:	2302      	movs	r3, #2
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e048      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a16:	2304      	movs	r3, #4
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e045      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e042      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a22:	bf00      	nop
 8009a24:	efff69f3 	.word	0xefff69f3
 8009a28:	40011000 	.word	0x40011000
 8009a2c:	40023800 	.word	0x40023800
 8009a30:	40004400 	.word	0x40004400
 8009a34:	40004800 	.word	0x40004800
 8009a38:	40004c00 	.word	0x40004c00
 8009a3c:	40005000 	.word	0x40005000
 8009a40:	40011400 	.word	0x40011400
 8009a44:	40007800 	.word	0x40007800
 8009a48:	2310      	movs	r3, #16
 8009a4a:	77fb      	strb	r3, [r7, #31]
 8009a4c:	e02c      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a72      	ldr	r2, [pc, #456]	@ (8009c1c <UART_SetConfig+0x4bc>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d125      	bne.n	8009aa4 <UART_SetConfig+0x344>
 8009a58:	4b71      	ldr	r3, [pc, #452]	@ (8009c20 <UART_SetConfig+0x4c0>)
 8009a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009a62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a66:	d017      	beq.n	8009a98 <UART_SetConfig+0x338>
 8009a68:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009a6c:	d817      	bhi.n	8009a9e <UART_SetConfig+0x33e>
 8009a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a72:	d00b      	beq.n	8009a8c <UART_SetConfig+0x32c>
 8009a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a78:	d811      	bhi.n	8009a9e <UART_SetConfig+0x33e>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <UART_SetConfig+0x326>
 8009a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a82:	d006      	beq.n	8009a92 <UART_SetConfig+0x332>
 8009a84:	e00b      	b.n	8009a9e <UART_SetConfig+0x33e>
 8009a86:	2300      	movs	r3, #0
 8009a88:	77fb      	strb	r3, [r7, #31]
 8009a8a:	e00d      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e00a      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a92:	2304      	movs	r3, #4
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e007      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e004      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	77fb      	strb	r3, [r7, #31]
 8009aa2:	e001      	b.n	8009aa8 <UART_SetConfig+0x348>
 8009aa4:	2310      	movs	r3, #16
 8009aa6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	69db      	ldr	r3, [r3, #28]
 8009aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ab0:	d15b      	bne.n	8009b6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009ab2:	7ffb      	ldrb	r3, [r7, #31]
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d828      	bhi.n	8009b0a <UART_SetConfig+0x3aa>
 8009ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac0 <UART_SetConfig+0x360>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	08009b0b 	.word	0x08009b0b
 8009ad0:	08009afb 	.word	0x08009afb
 8009ad4:	08009b0b 	.word	0x08009b0b
 8009ad8:	08009b0b 	.word	0x08009b0b
 8009adc:	08009b0b 	.word	0x08009b0b
 8009ae0:	08009b03 	.word	0x08009b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae4:	f7fc fdf0 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8009ae8:	61b8      	str	r0, [r7, #24]
        break;
 8009aea:	e013      	b.n	8009b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009aec:	f7fc fe00 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8009af0:	61b8      	str	r0, [r7, #24]
        break;
 8009af2:	e00f      	b.n	8009b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009af4:	4b4b      	ldr	r3, [pc, #300]	@ (8009c24 <UART_SetConfig+0x4c4>)
 8009af6:	61bb      	str	r3, [r7, #24]
        break;
 8009af8:	e00c      	b.n	8009b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009afa:	f7fc fcd3 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8009afe:	61b8      	str	r0, [r7, #24]
        break;
 8009b00:	e008      	b.n	8009b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b06:	61bb      	str	r3, [r7, #24]
        break;
 8009b08:	e004      	b.n	8009b14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	77bb      	strb	r3, [r7, #30]
        break;
 8009b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d074      	beq.n	8009c04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	005a      	lsls	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	085b      	lsrs	r3, r3, #1
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b0f      	cmp	r3, #15
 8009b34:	d916      	bls.n	8009b64 <UART_SetConfig+0x404>
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b3c:	d212      	bcs.n	8009b64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	f023 030f 	bic.w	r3, r3, #15
 8009b46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f003 0307 	and.w	r3, r3, #7
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	89fb      	ldrh	r3, [r7, #14]
 8009b56:	4313      	orrs	r3, r2
 8009b58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	89fa      	ldrh	r2, [r7, #14]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	e04f      	b.n	8009c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	77bb      	strb	r3, [r7, #30]
 8009b68:	e04c      	b.n	8009c04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b6a:	7ffb      	ldrb	r3, [r7, #31]
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d828      	bhi.n	8009bc2 <UART_SetConfig+0x462>
 8009b70:	a201      	add	r2, pc, #4	@ (adr r2, 8009b78 <UART_SetConfig+0x418>)
 8009b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b76:	bf00      	nop
 8009b78:	08009b9d 	.word	0x08009b9d
 8009b7c:	08009ba5 	.word	0x08009ba5
 8009b80:	08009bad 	.word	0x08009bad
 8009b84:	08009bc3 	.word	0x08009bc3
 8009b88:	08009bb3 	.word	0x08009bb3
 8009b8c:	08009bc3 	.word	0x08009bc3
 8009b90:	08009bc3 	.word	0x08009bc3
 8009b94:	08009bc3 	.word	0x08009bc3
 8009b98:	08009bbb 	.word	0x08009bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b9c:	f7fc fd94 	bl	80066c8 <HAL_RCC_GetPCLK1Freq>
 8009ba0:	61b8      	str	r0, [r7, #24]
        break;
 8009ba2:	e013      	b.n	8009bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ba4:	f7fc fda4 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8009ba8:	61b8      	str	r0, [r7, #24]
        break;
 8009baa:	e00f      	b.n	8009bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bac:	4b1d      	ldr	r3, [pc, #116]	@ (8009c24 <UART_SetConfig+0x4c4>)
 8009bae:	61bb      	str	r3, [r7, #24]
        break;
 8009bb0:	e00c      	b.n	8009bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bb2:	f7fc fc77 	bl	80064a4 <HAL_RCC_GetSysClockFreq>
 8009bb6:	61b8      	str	r0, [r7, #24]
        break;
 8009bb8:	e008      	b.n	8009bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bbe:	61bb      	str	r3, [r7, #24]
        break;
 8009bc0:	e004      	b.n	8009bcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8009bca:	bf00      	nop
    }

    if (pclk != 0U)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d018      	beq.n	8009c04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	085a      	lsrs	r2, r3, #1
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	441a      	add	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b0f      	cmp	r3, #15
 8009bea:	d909      	bls.n	8009c00 <UART_SetConfig+0x4a0>
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bf2:	d205      	bcs.n	8009c00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	e001      	b.n	8009c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3720      	adds	r7, #32
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	40007c00 	.word	0x40007c00
 8009c20:	40023800 	.word	0x40023800
 8009c24:	00f42400 	.word	0x00f42400

08009c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00a      	beq.n	8009c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	430a      	orrs	r2, r1
 8009c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c78:	f003 0304 	and.w	r3, r3, #4
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00a      	beq.n	8009c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00a      	beq.n	8009cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d01a      	beq.n	8009d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d26:	d10a      	bne.n	8009d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	605a      	str	r2, [r3, #4]
  }
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d7c:	f7f9 fd62 	bl	8003844 <HAL_GetTick>
 8009d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d10e      	bne.n	8009dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f81b 	bl	8009dda <UART_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e011      	b.n	8009dd2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2220      	movs	r2, #32
 8009db2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2220      	movs	r2, #32
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b09c      	sub	sp, #112	@ 0x70
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	603b      	str	r3, [r7, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dea:	e0a7      	b.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df2:	f000 80a3 	beq.w	8009f3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009df6:	f7f9 fd25 	bl	8003844 <HAL_GetTick>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d302      	bcc.n	8009e0c <UART_WaitOnFlagUntilTimeout+0x32>
 8009e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d13f      	bne.n	8009e8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e1c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	461a      	mov	r2, r3
 8009e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e2c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009e30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e6      	bne.n	8009e0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3308      	adds	r3, #8
 8009e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e50:	f023 0301 	bic.w	r3, r3, #1
 8009e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e5e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009e60:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e5      	bne.n	8009e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2220      	movs	r2, #32
 8009e76:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e068      	b.n	8009f5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0304 	and.w	r3, r3, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d050      	beq.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69db      	ldr	r3, [r3, #28]
 8009ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ea8:	d148      	bne.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009eb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009ec8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e6      	bne.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3308      	adds	r3, #8
 8009eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	e853 3f00 	ldrex	r3, [r3]
 8009ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f023 0301 	bic.w	r3, r3, #1
 8009efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009f06:	623a      	str	r2, [r7, #32]
 8009f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	69f9      	ldr	r1, [r7, #28]
 8009f0c:	6a3a      	ldr	r2, [r7, #32]
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e5      	bne.n	8009ee6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2220      	movs	r2, #32
 8009f24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e010      	b.n	8009f5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69da      	ldr	r2, [r3, #28]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	4013      	ands	r3, r2
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	bf0c      	ite	eq
 8009f4c:	2301      	moveq	r3, #1
 8009f4e:	2300      	movne	r3, #0
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	461a      	mov	r2, r3
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	f43f af48 	beq.w	8009dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3770      	adds	r7, #112	@ 0x70
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b097      	sub	sp, #92	@ 0x5c
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	4613      	mov	r3, r2
 8009f74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	88fa      	ldrh	r2, [r7, #6]
 8009f80:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	88fa      	ldrh	r2, [r7, #6]
 8009f88:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f9a:	d10e      	bne.n	8009fba <UART_Start_Receive_IT+0x52>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <UART_Start_Receive_IT+0x48>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009faa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009fae:	e02d      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	22ff      	movs	r2, #255	@ 0xff
 8009fb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009fb8:	e028      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10d      	bne.n	8009fde <UART_Start_Receive_IT+0x76>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <UART_Start_Receive_IT+0x6c>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	22ff      	movs	r2, #255	@ 0xff
 8009fce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009fd2:	e01b      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	227f      	movs	r2, #127	@ 0x7f
 8009fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009fdc:	e016      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fe6:	d10d      	bne.n	800a004 <UART_Start_Receive_IT+0x9c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <UART_Start_Receive_IT+0x92>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	227f      	movs	r2, #127	@ 0x7f
 8009ff4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009ff8:	e008      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	223f      	movs	r2, #63	@ 0x3f
 8009ffe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a002:	e003      	b.n	800a00c <UART_Start_Receive_IT+0xa4>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2222      	movs	r2, #34	@ 0x22
 800a018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3308      	adds	r3, #8
 800a022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a026:	e853 3f00 	ldrex	r3, [r3]
 800a02a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	657b      	str	r3, [r7, #84]	@ 0x54
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3308      	adds	r3, #8
 800a03a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a03c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a03e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a040:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a044:	e841 2300 	strex	r3, r2, [r1]
 800a048:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a04a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1e5      	bne.n	800a01c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a058:	d107      	bne.n	800a06a <UART_Start_Receive_IT+0x102>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4a21      	ldr	r2, [pc, #132]	@ (800a0ec <UART_Start_Receive_IT+0x184>)
 800a066:	669a      	str	r2, [r3, #104]	@ 0x68
 800a068:	e002      	b.n	800a070 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a20      	ldr	r2, [pc, #128]	@ (800a0f0 <UART_Start_Receive_IT+0x188>)
 800a06e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d019      	beq.n	800a0ac <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a080:	e853 3f00 	ldrex	r3, [r3]
 800a084:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a088:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a096:	637b      	str	r3, [r7, #52]	@ 0x34
 800a098:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a09c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e6      	bne.n	800a078 <UART_Start_Receive_IT+0x110>
 800a0aa:	e018      	b.n	800a0de <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f043 0320 	orr.w	r3, r3, #32
 800a0c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0ca:	623b      	str	r3, [r7, #32]
 800a0cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	69f9      	ldr	r1, [r7, #28]
 800a0d0:	6a3a      	ldr	r2, [r7, #32]
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e6      	bne.n	800a0ac <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	375c      	adds	r7, #92	@ 0x5c
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	0800a3a3 	.word	0x0800a3a3
 800a0f0:	0800a23d 	.word	0x0800a23d

0800a0f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b095      	sub	sp, #84	@ 0x54
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a11a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a11c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a120:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e6      	bne.n	800a0fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	3308      	adds	r3, #8
 800a134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	e853 3f00 	ldrex	r3, [r3]
 800a13c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	f023 0301 	bic.w	r3, r3, #1
 800a144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3308      	adds	r3, #8
 800a14c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a14e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a150:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a152:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a156:	e841 2300 	strex	r3, r2, [r1]
 800a15a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1e5      	bne.n	800a12e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a166:	2b01      	cmp	r3, #1
 800a168:	d118      	bne.n	800a19c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	60bb      	str	r3, [r7, #8]
   return(result);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f023 0310 	bic.w	r3, r3, #16
 800a17e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	6979      	ldr	r1, [r7, #20]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	613b      	str	r3, [r7, #16]
   return(result);
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a1b0:	bf00      	nop
 800a1b2:	3754      	adds	r7, #84	@ 0x54
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7ff faaa 	bl	8009734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	61bb      	str	r3, [r7, #24]
 800a210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	6979      	ldr	r1, [r7, #20]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	613b      	str	r3, [r7, #16]
   return(result);
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e6      	bne.n	800a1f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2220      	movs	r2, #32
 800a226:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fa76 	bl	8009720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a234:	bf00      	nop
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b096      	sub	sp, #88	@ 0x58
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a24a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a254:	2b22      	cmp	r3, #34	@ 0x22
 800a256:	f040 8098 	bne.w	800a38a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a260:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a264:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a274:	400a      	ands	r2, r1
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	3b01      	subs	r3, #1
 800a28e:	b29a      	uxth	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d17b      	bne.n	800a39a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	e853 3f00 	ldrex	r3, [r3]
 800a2ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2c8:	e841 2300 	strex	r3, r2, [r1]
 800a2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1e6      	bne.n	800a2a2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3308      	adds	r3, #8
 800a2da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e4:	6a3b      	ldr	r3, [r7, #32]
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a2f4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e5      	bne.n	800a2d4 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a320:	2b01      	cmp	r3, #1
 800a322:	d12e      	bne.n	800a382 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	e853 3f00 	ldrex	r3, [r3]
 800a336:	60fb      	str	r3, [r7, #12]
   return(result);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0310 	bic.w	r3, r3, #16
 800a33e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a348:	61fb      	str	r3, [r7, #28]
 800a34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	617b      	str	r3, [r7, #20]
   return(result);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e6      	bne.n	800a32a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	f003 0310 	and.w	r3, r3, #16
 800a366:	2b10      	cmp	r3, #16
 800a368:	d103      	bne.n	800a372 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2210      	movs	r2, #16
 800a370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7ff f9e4 	bl	8009748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a380:	e00b      	b.n	800a39a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7f8 fc66 	bl	8002c54 <HAL_UART_RxCpltCallback>
}
 800a388:	e007      	b.n	800a39a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	699a      	ldr	r2, [r3, #24]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 0208 	orr.w	r2, r2, #8
 800a398:	619a      	str	r2, [r3, #24]
}
 800a39a:	bf00      	nop
 800a39c:	3758      	adds	r7, #88	@ 0x58
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b096      	sub	sp, #88	@ 0x58
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3b0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ba:	2b22      	cmp	r3, #34	@ 0x22
 800a3bc:	f040 8098 	bne.w	800a4f0 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ce:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800a3d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a3d8:	4013      	ands	r3, r2
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3de:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e4:	1c9a      	adds	r2, r3, #2
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a402:	b29b      	uxth	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d17b      	bne.n	800a500 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a41c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a426:	643b      	str	r3, [r7, #64]	@ 0x40
 800a428:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a42c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a42e:	e841 2300 	strex	r3, r2, [r1]
 800a432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1e6      	bne.n	800a408 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3308      	adds	r3, #8
 800a440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6a3b      	ldr	r3, [r7, #32]
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	61fb      	str	r3, [r7, #28]
   return(result);
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	f023 0301 	bic.w	r3, r3, #1
 800a450:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3308      	adds	r3, #8
 800a458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a45a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a45c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2220      	movs	r2, #32
 800a472:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a486:	2b01      	cmp	r3, #1
 800a488:	d12e      	bne.n	800a4e8 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6979      	ldr	r1, [r7, #20]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e6      	bne.n	800a490 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d103      	bne.n	800a4d8 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2210      	movs	r2, #16
 800a4d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff f931 	bl	8009748 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a4e6:	e00b      	b.n	800a500 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7f8 fbb3 	bl	8002c54 <HAL_UART_RxCpltCallback>
}
 800a4ee:	e007      	b.n	800a500 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699a      	ldr	r2, [r3, #24]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0208 	orr.w	r2, r2, #8
 800a4fe:	619a      	str	r2, [r3, #24]
}
 800a500:	bf00      	nop
 800a502:	3758      	adds	r7, #88	@ 0x58
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a508:	b5b0      	push	{r4, r5, r7, lr}
 800a50a:	b08c      	sub	sp, #48	@ 0x30
 800a50c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800a50e:	4b96      	ldr	r3, [pc, #600]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a510:	22c0      	movs	r2, #192	@ 0xc0
 800a512:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800a514:	4b94      	ldr	r3, [pc, #592]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a516:	22a8      	movs	r2, #168	@ 0xa8
 800a518:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800a51a:	4b93      	ldr	r3, [pc, #588]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 800a520:	4b91      	ldr	r3, [pc, #580]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a522:	2242      	movs	r2, #66	@ 0x42
 800a524:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a526:	4b91      	ldr	r3, [pc, #580]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a528:	22ff      	movs	r2, #255	@ 0xff
 800a52a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a52c:	4b8f      	ldr	r3, [pc, #572]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a52e:	22ff      	movs	r2, #255	@ 0xff
 800a530:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a532:	4b8e      	ldr	r3, [pc, #568]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a534:	22ff      	movs	r2, #255	@ 0xff
 800a536:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a538:	4b8c      	ldr	r3, [pc, #560]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800a53e:	4b8c      	ldr	r3, [pc, #560]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a540:	22c0      	movs	r2, #192	@ 0xc0
 800a542:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800a544:	4b8a      	ldr	r3, [pc, #552]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a546:	22a8      	movs	r2, #168	@ 0xa8
 800a548:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a54a:	4b89      	ldr	r3, [pc, #548]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a54c:	2201      	movs	r2, #1
 800a54e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a550:	4b87      	ldr	r3, [pc, #540]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a552:	2201      	movs	r2, #1
 800a554:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a556:	2100      	movs	r1, #0
 800a558:	2000      	movs	r0, #0
 800a55a:	f006 fa29 	bl	80109b0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a55e:	4b82      	ldr	r3, [pc, #520]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	061a      	lsls	r2, r3, #24
 800a564:	4b80      	ldr	r3, [pc, #512]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a566:	785b      	ldrb	r3, [r3, #1]
 800a568:	041b      	lsls	r3, r3, #16
 800a56a:	431a      	orrs	r2, r3
 800a56c:	4b7e      	ldr	r3, [pc, #504]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a56e:	789b      	ldrb	r3, [r3, #2]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	4313      	orrs	r3, r2
 800a574:	4a7c      	ldr	r2, [pc, #496]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a576:	78d2      	ldrb	r2, [r2, #3]
 800a578:	4313      	orrs	r3, r2
 800a57a:	061a      	lsls	r2, r3, #24
 800a57c:	4b7a      	ldr	r3, [pc, #488]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	0619      	lsls	r1, r3, #24
 800a582:	4b79      	ldr	r3, [pc, #484]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a584:	785b      	ldrb	r3, [r3, #1]
 800a586:	041b      	lsls	r3, r3, #16
 800a588:	4319      	orrs	r1, r3
 800a58a:	4b77      	ldr	r3, [pc, #476]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a58c:	789b      	ldrb	r3, [r3, #2]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	430b      	orrs	r3, r1
 800a592:	4975      	ldr	r1, [pc, #468]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a594:	78c9      	ldrb	r1, [r1, #3]
 800a596:	430b      	orrs	r3, r1
 800a598:	021b      	lsls	r3, r3, #8
 800a59a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	4b71      	ldr	r3, [pc, #452]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	0619      	lsls	r1, r3, #24
 800a5a6:	4b70      	ldr	r3, [pc, #448]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	041b      	lsls	r3, r3, #16
 800a5ac:	4319      	orrs	r1, r3
 800a5ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5b0:	789b      	ldrb	r3, [r3, #2]
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	496c      	ldr	r1, [pc, #432]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5b8:	78c9      	ldrb	r1, [r1, #3]
 800a5ba:	430b      	orrs	r3, r1
 800a5bc:	0a1b      	lsrs	r3, r3, #8
 800a5be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	4b68      	ldr	r3, [pc, #416]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	0619      	lsls	r1, r3, #24
 800a5ca:	4b67      	ldr	r3, [pc, #412]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5cc:	785b      	ldrb	r3, [r3, #1]
 800a5ce:	041b      	lsls	r3, r3, #16
 800a5d0:	4319      	orrs	r1, r3
 800a5d2:	4b65      	ldr	r3, [pc, #404]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5d4:	789b      	ldrb	r3, [r3, #2]
 800a5d6:	021b      	lsls	r3, r3, #8
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	4963      	ldr	r1, [pc, #396]	@ (800a768 <MX_LWIP_Init+0x260>)
 800a5dc:	78c9      	ldrb	r1, [r1, #3]
 800a5de:	430b      	orrs	r3, r1
 800a5e0:	0e1b      	lsrs	r3, r3, #24
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	4a63      	ldr	r2, [pc, #396]	@ (800a774 <MX_LWIP_Init+0x26c>)
 800a5e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a5e8:	4b60      	ldr	r3, [pc, #384]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	061a      	lsls	r2, r3, #24
 800a5ee:	4b5f      	ldr	r3, [pc, #380]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	041b      	lsls	r3, r3, #16
 800a5f4:	431a      	orrs	r2, r3
 800a5f6:	4b5d      	ldr	r3, [pc, #372]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a5f8:	789b      	ldrb	r3, [r3, #2]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	4a5b      	ldr	r2, [pc, #364]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a600:	78d2      	ldrb	r2, [r2, #3]
 800a602:	4313      	orrs	r3, r2
 800a604:	061a      	lsls	r2, r3, #24
 800a606:	4b59      	ldr	r3, [pc, #356]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	0619      	lsls	r1, r3, #24
 800a60c:	4b57      	ldr	r3, [pc, #348]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	041b      	lsls	r3, r3, #16
 800a612:	4319      	orrs	r1, r3
 800a614:	4b55      	ldr	r3, [pc, #340]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	430b      	orrs	r3, r1
 800a61c:	4953      	ldr	r1, [pc, #332]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a61e:	78c9      	ldrb	r1, [r1, #3]
 800a620:	430b      	orrs	r3, r1
 800a622:	021b      	lsls	r3, r3, #8
 800a624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a628:	431a      	orrs	r2, r3
 800a62a:	4b50      	ldr	r3, [pc, #320]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	0619      	lsls	r1, r3, #24
 800a630:	4b4e      	ldr	r3, [pc, #312]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a632:	785b      	ldrb	r3, [r3, #1]
 800a634:	041b      	lsls	r3, r3, #16
 800a636:	4319      	orrs	r1, r3
 800a638:	4b4c      	ldr	r3, [pc, #304]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a63a:	789b      	ldrb	r3, [r3, #2]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	430b      	orrs	r3, r1
 800a640:	494a      	ldr	r1, [pc, #296]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a642:	78c9      	ldrb	r1, [r1, #3]
 800a644:	430b      	orrs	r3, r1
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a64c:	431a      	orrs	r2, r3
 800a64e:	4b47      	ldr	r3, [pc, #284]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	0619      	lsls	r1, r3, #24
 800a654:	4b45      	ldr	r3, [pc, #276]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a656:	785b      	ldrb	r3, [r3, #1]
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	4319      	orrs	r1, r3
 800a65c:	4b43      	ldr	r3, [pc, #268]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a65e:	789b      	ldrb	r3, [r3, #2]
 800a660:	021b      	lsls	r3, r3, #8
 800a662:	430b      	orrs	r3, r1
 800a664:	4941      	ldr	r1, [pc, #260]	@ (800a76c <MX_LWIP_Init+0x264>)
 800a666:	78c9      	ldrb	r1, [r1, #3]
 800a668:	430b      	orrs	r3, r1
 800a66a:	0e1b      	lsrs	r3, r3, #24
 800a66c:	4313      	orrs	r3, r2
 800a66e:	4a42      	ldr	r2, [pc, #264]	@ (800a778 <MX_LWIP_Init+0x270>)
 800a670:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a672:	4b3f      	ldr	r3, [pc, #252]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	061a      	lsls	r2, r3, #24
 800a678:	4b3d      	ldr	r3, [pc, #244]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	041b      	lsls	r3, r3, #16
 800a67e:	431a      	orrs	r2, r3
 800a680:	4b3b      	ldr	r3, [pc, #236]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a682:	789b      	ldrb	r3, [r3, #2]
 800a684:	021b      	lsls	r3, r3, #8
 800a686:	4313      	orrs	r3, r2
 800a688:	4a39      	ldr	r2, [pc, #228]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a68a:	78d2      	ldrb	r2, [r2, #3]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	061a      	lsls	r2, r3, #24
 800a690:	4b37      	ldr	r3, [pc, #220]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	0619      	lsls	r1, r3, #24
 800a696:	4b36      	ldr	r3, [pc, #216]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	041b      	lsls	r3, r3, #16
 800a69c:	4319      	orrs	r1, r3
 800a69e:	4b34      	ldr	r3, [pc, #208]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6a0:	789b      	ldrb	r3, [r3, #2]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	430b      	orrs	r3, r1
 800a6a6:	4932      	ldr	r1, [pc, #200]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6a8:	78c9      	ldrb	r1, [r1, #3]
 800a6aa:	430b      	orrs	r3, r1
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	4b2e      	ldr	r3, [pc, #184]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	0619      	lsls	r1, r3, #24
 800a6ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	041b      	lsls	r3, r3, #16
 800a6c0:	4319      	orrs	r1, r3
 800a6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6c4:	789b      	ldrb	r3, [r3, #2]
 800a6c6:	021b      	lsls	r3, r3, #8
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	4929      	ldr	r1, [pc, #164]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6cc:	78c9      	ldrb	r1, [r1, #3]
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	0a1b      	lsrs	r3, r3, #8
 800a6d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	4b25      	ldr	r3, [pc, #148]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	0619      	lsls	r1, r3, #24
 800a6de:	4b24      	ldr	r3, [pc, #144]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	4319      	orrs	r1, r3
 800a6e6:	4b22      	ldr	r3, [pc, #136]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6e8:	789b      	ldrb	r3, [r3, #2]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	4920      	ldr	r1, [pc, #128]	@ (800a770 <MX_LWIP_Init+0x268>)
 800a6f0:	78c9      	ldrb	r1, [r1, #3]
 800a6f2:	430b      	orrs	r3, r1
 800a6f4:	0e1b      	lsrs	r3, r3, #24
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	4a20      	ldr	r2, [pc, #128]	@ (800a77c <MX_LWIP_Init+0x274>)
 800a6fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a6fc:	4b20      	ldr	r3, [pc, #128]	@ (800a780 <MX_LWIP_Init+0x278>)
 800a6fe:	9302      	str	r3, [sp, #8]
 800a700:	4b20      	ldr	r3, [pc, #128]	@ (800a784 <MX_LWIP_Init+0x27c>)
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	2300      	movs	r3, #0
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4b1c      	ldr	r3, [pc, #112]	@ (800a77c <MX_LWIP_Init+0x274>)
 800a70a:	4a1b      	ldr	r2, [pc, #108]	@ (800a778 <MX_LWIP_Init+0x270>)
 800a70c:	4919      	ldr	r1, [pc, #100]	@ (800a774 <MX_LWIP_Init+0x26c>)
 800a70e:	481e      	ldr	r0, [pc, #120]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a710:	f007 fd68 	bl	80121e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a714:	481c      	ldr	r0, [pc, #112]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a716:	f007 ff17 	bl	8012548 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a71a:	4b1b      	ldr	r3, [pc, #108]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a71c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a720:	089b      	lsrs	r3, r3, #2
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a72c:	4816      	ldr	r0, [pc, #88]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a72e:	f007 ff1b 	bl	8012568 <netif_set_up>
 800a732:	e002      	b.n	800a73a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a734:	4814      	ldr	r0, [pc, #80]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a736:	f007 ff83 	bl	8012640 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a73a:	4914      	ldr	r1, [pc, #80]	@ (800a78c <MX_LWIP_Init+0x284>)
 800a73c:	4812      	ldr	r0, [pc, #72]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a73e:	f008 f815 	bl	801276c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a742:	4b13      	ldr	r3, [pc, #76]	@ (800a790 <MX_LWIP_Init+0x288>)
 800a744:	1d3c      	adds	r4, r7, #4
 800a746:	461d      	mov	r5, r3
 800a748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a74c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a754:	1d3b      	adds	r3, r7, #4
 800a756:	490c      	ldr	r1, [pc, #48]	@ (800a788 <MX_LWIP_Init+0x280>)
 800a758:	4618      	mov	r0, r3
 800a75a:	f000 fd47 	bl	800b1ec <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a75e:	bf00      	nop
 800a760:	3720      	adds	r7, #32
 800a762:	46bd      	mov	sp, r7
 800a764:	bdb0      	pop	{r4, r5, r7, pc}
 800a766:	bf00      	nop
 800a768:	20000788 	.word	0x20000788
 800a76c:	2000078c 	.word	0x2000078c
 800a770:	20000790 	.word	0x20000790
 800a774:	2000077c 	.word	0x2000077c
 800a778:	20000780 	.word	0x20000780
 800a77c:	20000784 	.word	0x20000784
 800a780:	080108c1 	.word	0x080108c1
 800a784:	0800ac8d 	.word	0x0800ac8d
 800a788:	20000748 	.word	0x20000748
 800a78c:	0800a795 	.word	0x0800a795
 800a790:	0801e1f4 	.word	0x0801e1f4

0800a794 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a7ba:	2320      	movs	r3, #32
 800a7bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a7be:	f3bf 8f4f 	dsb	sy
}
 800a7c2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800a7c4:	e00b      	b.n	800a7de <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a7c6:	4a0d      	ldr	r2, [pc, #52]	@ (800a7fc <SCB_InvalidateDCache_by_Addr+0x54>)
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	dcf0      	bgt.n	800a7c6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a7e4:	f3bf 8f4f 	dsb	sy
}
 800a7e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a7ea:	f3bf 8f6f 	isb	sy
}
 800a7ee:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800a7f0:	bf00      	nop
 800a7f2:	371c      	adds	r7, #28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	e000ed00 	.word	0xe000ed00

0800a800 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a808:	4b04      	ldr	r3, [pc, #16]	@ (800a81c <HAL_ETH_RxCpltCallback+0x1c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 fe69 	bl	800b4e4 <osSemaphoreRelease>
}
 800a812:	bf00      	nop
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	20005120 	.word	0x20005120

0800a820 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a828:	4b04      	ldr	r3, [pc, #16]	@ (800a83c <HAL_ETH_TxCpltCallback+0x1c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fe59 	bl	800b4e4 <osSemaphoreRelease>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	20005124 	.word	0x20005124

0800a840 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7fa f83d 	bl	80048c8 <HAL_ETH_GetDMAError>
 800a84e:	4603      	mov	r3, r0
 800a850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a854:	2b80      	cmp	r3, #128	@ 0x80
 800a856:	d104      	bne.n	800a862 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <HAL_ETH_ErrorCallback+0x2c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fe41 	bl	800b4e4 <osSemaphoreRelease>
  }
}
 800a862:	bf00      	nop
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20005120 	.word	0x20005120

0800a870 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a870:	b5b0      	push	{r4, r5, r7, lr}
 800a872:	b0a8      	sub	sp, #160	@ 0xa0
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint32_t duplex, speed = 0;
 800a87e:	2300      	movs	r3, #0
 800a880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int32_t PHYLinkState = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800a88a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a88e:	2264      	movs	r2, #100	@ 0x64
 800a890:	2100      	movs	r1, #0
 800a892:	4618      	mov	r0, r3
 800a894:	f012 fb1f 	bl	801ced6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a898:	4b85      	ldr	r3, [pc, #532]	@ (800aab0 <low_level_init+0x240>)
 800a89a:	4a86      	ldr	r2, [pc, #536]	@ (800aab4 <low_level_init+0x244>)
 800a89c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  MACAddr[1] = 0x80;
 800a8a4:	2380      	movs	r3, #128	@ 0x80
 800a8a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  MACAddr[2] = 0xE1;
 800a8aa:	23e1      	movs	r3, #225	@ 0xe1
 800a8ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  MACAddr[3] = 0x00;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  MACAddr[4] = 0x00;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  MACAddr[5] = 0x00;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800a8c2:	4a7b      	ldr	r2, [pc, #492]	@ (800aab0 <low_level_init+0x240>)
 800a8c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8c8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a8ca:	4b79      	ldr	r3, [pc, #484]	@ (800aab0 <low_level_init+0x240>)
 800a8cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a8d0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a8d2:	4b77      	ldr	r3, [pc, #476]	@ (800aab0 <low_level_init+0x240>)
 800a8d4:	4a78      	ldr	r2, [pc, #480]	@ (800aab8 <low_level_init+0x248>)
 800a8d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a8d8:	4b75      	ldr	r3, [pc, #468]	@ (800aab0 <low_level_init+0x240>)
 800a8da:	4a78      	ldr	r2, [pc, #480]	@ (800aabc <low_level_init+0x24c>)
 800a8dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a8de:	4b74      	ldr	r3, [pc, #464]	@ (800aab0 <low_level_init+0x240>)
 800a8e0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a8e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a8e6:	4872      	ldr	r0, [pc, #456]	@ (800aab0 <low_level_init+0x240>)
 800a8e8:	f7f9 f950 	bl	8003b8c <HAL_ETH_Init>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a8f2:	2238      	movs	r2, #56	@ 0x38
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	4872      	ldr	r0, [pc, #456]	@ (800aac0 <low_level_init+0x250>)
 800a8f8:	f012 faed 	bl	801ced6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a8fc:	4b70      	ldr	r3, [pc, #448]	@ (800aac0 <low_level_init+0x250>)
 800a8fe:	2221      	movs	r2, #33	@ 0x21
 800a900:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a902:	4b6f      	ldr	r3, [pc, #444]	@ (800aac0 <low_level_init+0x250>)
 800a904:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a908:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a90a:	4b6d      	ldr	r3, [pc, #436]	@ (800aac0 <low_level_init+0x250>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a910:	486c      	ldr	r0, [pc, #432]	@ (800aac4 <low_level_init+0x254>)
 800a912:	f007 fb21 	bl	8011f58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2206      	movs	r2, #6
 800a91a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a91e:	4b64      	ldr	r3, [pc, #400]	@ (800aab0 <low_level_init+0x240>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	781a      	ldrb	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a92a:	4b61      	ldr	r3, [pc, #388]	@ (800aab0 <low_level_init+0x240>)
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	785a      	ldrb	r2, [r3, #1]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a936:	4b5e      	ldr	r3, [pc, #376]	@ (800aab0 <low_level_init+0x240>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	789a      	ldrb	r2, [r3, #2]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a942:	4b5b      	ldr	r3, [pc, #364]	@ (800aab0 <low_level_init+0x240>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	78da      	ldrb	r2, [r3, #3]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a94e:	4b58      	ldr	r3, [pc, #352]	@ (800aab0 <low_level_init+0x240>)
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	791a      	ldrb	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a95a:	4b55      	ldr	r3, [pc, #340]	@ (800aab0 <low_level_init+0x240>)
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	795a      	ldrb	r2, [r3, #5]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a96c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a974:	f043 030a 	orr.w	r3, r3, #10
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800a980:	2203      	movs	r2, #3
 800a982:	2100      	movs	r1, #0
 800a984:	2001      	movs	r0, #1
 800a986:	f001 f8a4 	bl	800bad2 <xQueueGenericCreate>
 800a98a:	4603      	mov	r3, r0
 800a98c:	4a4e      	ldr	r2, [pc, #312]	@ (800aac8 <low_level_init+0x258>)
 800a98e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800a990:	2203      	movs	r2, #3
 800a992:	2100      	movs	r1, #0
 800a994:	2001      	movs	r0, #1
 800a996:	f001 f89c 	bl	800bad2 <xQueueGenericCreate>
 800a99a:	4603      	mov	r3, r0
 800a99c:	4a4b      	ldr	r2, [pc, #300]	@ (800aacc <low_level_init+0x25c>)
 800a99e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a9a0:	4b4b      	ldr	r3, [pc, #300]	@ (800aad0 <low_level_init+0x260>)
 800a9a2:	f107 0408 	add.w	r4, r7, #8
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a9b4:	f107 0308 	add.w	r3, r7, #8
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fc16 	bl	800b1ec <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a9c0:	4944      	ldr	r1, [pc, #272]	@ (800aad4 <low_level_init+0x264>)
 800a9c2:	4845      	ldr	r0, [pc, #276]	@ (800aad8 <low_level_init+0x268>)
 800a9c4:	f7f8 fdbb 	bl	800353e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a9c8:	4843      	ldr	r0, [pc, #268]	@ (800aad8 <low_level_init+0x268>)
 800a9ca:	f7f8 fdea 	bl	80035a2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a9ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d165      	bne.n	800aaa2 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a9d6:	4840      	ldr	r0, [pc, #256]	@ (800aad8 <low_level_init+0x268>)
 800a9d8:	f7f8 fe8b 	bl	80036f2 <LAN8742_GetLinkState>
 800a9dc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a9e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	dc06      	bgt.n	800a9f6 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f007 fe8f 	bl	801270c <netif_set_link_down>
      netif_set_down(netif);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f007 fe26 	bl	8012640 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a9f4:	e057      	b.n	800aaa6 <low_level_init+0x236>
      switch (PHYLinkState)
 800a9f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a9fa:	3b02      	subs	r3, #2
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	d82b      	bhi.n	800aa58 <low_level_init+0x1e8>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <low_level_init+0x198>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa2b 	.word	0x0800aa2b
 800aa10:	0800aa3b 	.word	0x0800aa3b
 800aa14:	0800aa4b 	.word	0x0800aa4b
        duplex = ETH_FULLDUPLEX_MODE;
 800aa18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800aa20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aa28:	e01f      	b.n	800aa6a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800aa30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aa38:	e017      	b.n	800aa6a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aa48:	e00f      	b.n	800aa6a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_10M;
 800aa50:	2300      	movs	r3, #0
 800aa52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aa56:	e008      	b.n	800aa6a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        speed = ETH_SPEED_100M;
 800aa60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800aa64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        break;
 800aa68:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800aa6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa6e:	4619      	mov	r1, r3
 800aa70:	480f      	ldr	r0, [pc, #60]	@ (800aab0 <low_level_init+0x240>)
 800aa72:	f7f9 fdcf 	bl	8004614 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800aa76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aa7a:	647b      	str	r3, [r7, #68]	@ 0x44
    MACConf.Speed = speed;
 800aa7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aa80:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aa82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aa86:	4619      	mov	r1, r3
 800aa88:	4809      	ldr	r0, [pc, #36]	@ (800aab0 <low_level_init+0x240>)
 800aa8a:	f7f9 fead 	bl	80047e8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800aa8e:	4808      	ldr	r0, [pc, #32]	@ (800aab0 <low_level_init+0x240>)
 800aa90:	f7f9 f958 	bl	8003d44 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f007 fd67 	bl	8012568 <netif_set_up>
    netif_set_link_up(netif);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f007 fe02 	bl	80126a4 <netif_set_link_up>
}
 800aaa0:	e001      	b.n	800aaa6 <low_level_init+0x236>
    Error_Handler();
 800aaa2:	f7f8 f951 	bl	8002d48 <Error_Handler>
}
 800aaa6:	bf00      	nop
 800aaa8:	37a0      	adds	r7, #160	@ 0xa0
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bdb0      	pop	{r4, r5, r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20005128 	.word	0x20005128
 800aab4:	40028000 	.word	0x40028000
 800aab8:	20000180 	.word	0x20000180
 800aabc:	200000e0 	.word	0x200000e0
 800aac0:	200051d8 	.word	0x200051d8
 800aac4:	08021998 	.word	0x08021998
 800aac8:	20005120 	.word	0x20005120
 800aacc:	20005124 	.word	0x20005124
 800aad0:	0801e218 	.word	0x0801e218
 800aad4:	20000060 	.word	0x20000060
 800aad8:	20005210 	.word	0x20005210

0800aadc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b092      	sub	sp, #72	@ 0x48
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	2230      	movs	r2, #48	@ 0x30
 800aafa:	2100      	movs	r1, #0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f012 f9ea 	bl	801ced6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ab02:	f107 030c 	add.w	r3, r7, #12
 800ab06:	2230      	movs	r2, #48	@ 0x30
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f012 f9e3 	bl	801ced6 <memset>

  for(q = p; q != NULL; q = q->next)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab14:	e045      	b.n	800aba2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ab16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab18:	2b03      	cmp	r3, #3
 800ab1a:	d902      	bls.n	800ab22 <low_level_output+0x46>
      return ERR_IF;
 800ab1c:	f06f 030b 	mvn.w	r3, #11
 800ab20:	e065      	b.n	800abee <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800ab22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab24:	6859      	ldr	r1, [r3, #4]
 800ab26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab28:	4613      	mov	r3, r2
 800ab2a:	005b      	lsls	r3, r3, #1
 800ab2c:	4413      	add	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	3348      	adds	r3, #72	@ 0x48
 800ab32:	443b      	add	r3, r7
 800ab34:	3b3c      	subs	r3, #60	@ 0x3c
 800ab36:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ab38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab3a:	895b      	ldrh	r3, [r3, #10]
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab40:	4613      	mov	r3, r2
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	3348      	adds	r3, #72	@ 0x48
 800ab4a:	443b      	add	r3, r7
 800ab4c:	3b38      	subs	r3, #56	@ 0x38
 800ab4e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ab50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d011      	beq.n	800ab7a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ab56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab58:	1e5a      	subs	r2, r3, #1
 800ab5a:	f107 000c 	add.w	r0, r7, #12
 800ab5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab60:	460b      	mov	r3, r1
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	440b      	add	r3, r1
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	18c1      	adds	r1, r0, r3
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	3348      	adds	r3, #72	@ 0x48
 800ab74:	443b      	add	r3, r7
 800ab76:	3b34      	subs	r3, #52	@ 0x34
 800ab78:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ab7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ab82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab84:	4613      	mov	r3, r2
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	3348      	adds	r3, #72	@ 0x48
 800ab8e:	443b      	add	r3, r7
 800ab90:	3b34      	subs	r3, #52	@ 0x34
 800ab92:	2200      	movs	r2, #0
 800ab94:	601a      	str	r2, [r3, #0]
    }

    i++;
 800ab96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab98:	3301      	adds	r3, #1
 800ab9a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800ab9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	643b      	str	r3, [r7, #64]	@ 0x40
 800aba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1b6      	bne.n	800ab16 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	891b      	ldrh	r3, [r3, #8]
 800abac:	461a      	mov	r2, r3
 800abae:	4b12      	ldr	r3, [pc, #72]	@ (800abf8 <low_level_output+0x11c>)
 800abb0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800abb2:	4a11      	ldr	r2, [pc, #68]	@ (800abf8 <low_level_output+0x11c>)
 800abb4:	f107 030c 	add.w	r3, r7, #12
 800abb8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800abba:	4a0f      	ldr	r2, [pc, #60]	@ (800abf8 <low_level_output+0x11c>)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800abc0:	6838      	ldr	r0, [r7, #0]
 800abc2:	f008 fa27 	bl	8013014 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800abc6:	490c      	ldr	r1, [pc, #48]	@ (800abf8 <low_level_output+0x11c>)
 800abc8:	480c      	ldr	r0, [pc, #48]	@ (800abfc <low_level_output+0x120>)
 800abca:	f7f9 f9c9 	bl	8003f60 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800abce:	bf00      	nop
 800abd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ac00 <low_level_output+0x124>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f04f 31ff 	mov.w	r1, #4294967295
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fc35 	bl	800b448 <osSemaphoreWait>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f5      	bne.n	800abd0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800abe4:	4805      	ldr	r0, [pc, #20]	@ (800abfc <low_level_output+0x120>)
 800abe6:	f7f9 fb4f 	bl	8004288 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800abea:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3748      	adds	r7, #72	@ 0x48
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	200051d8 	.word	0x200051d8
 800abfc:	20005128 	.word	0x20005128
 800ac00:	20005124 	.word	0x20005124

0800ac04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800ac10:	4b07      	ldr	r3, [pc, #28]	@ (800ac30 <low_level_input+0x2c>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d105      	bne.n	800ac24 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800ac18:	f107 030c 	add.w	r3, r7, #12
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	4805      	ldr	r0, [pc, #20]	@ (800ac34 <low_level_input+0x30>)
 800ac20:	f7f9 f9fa 	bl	8004018 <HAL_ETH_ReadData>
  }

  return p;
 800ac24:	68fb      	ldr	r3, [r7, #12]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	2000511c 	.word	0x2000511c
 800ac34:	20005128 	.word	0x20005128

0800ac38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ac48:	4b0f      	ldr	r3, [pc, #60]	@ (800ac88 <ethernetif_input+0x50>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f04f 31ff 	mov.w	r1, #4294967295
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 fbf9 	bl	800b448 <osSemaphoreWait>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f5      	bne.n	800ac48 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800ac5c:	68b8      	ldr	r0, [r7, #8]
 800ac5e:	f7ff ffd1 	bl	800ac04 <low_level_input>
 800ac62:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	4798      	blx	r3
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d002      	beq.n	800ac80 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f008 f924 	bl	8012ec8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1ea      	bne.n	800ac5c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ac86:	e7df      	b.n	800ac48 <ethernetif_input+0x10>
 800ac88:	20005120 	.word	0x20005120

0800ac8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d106      	bne.n	800aca8 <ethernetif_init+0x1c>
 800ac9a:	4b0e      	ldr	r3, [pc, #56]	@ (800acd4 <ethernetif_init+0x48>)
 800ac9c:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800aca0:	490d      	ldr	r1, [pc, #52]	@ (800acd8 <ethernetif_init+0x4c>)
 800aca2:	480e      	ldr	r0, [pc, #56]	@ (800acdc <ethernetif_init+0x50>)
 800aca4:	f012 f878 	bl	801cd98 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2273      	movs	r2, #115	@ 0x73
 800acac:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2274      	movs	r2, #116	@ 0x74
 800acb4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a09      	ldr	r2, [pc, #36]	@ (800ace0 <ethernetif_init+0x54>)
 800acbc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a08      	ldr	r2, [pc, #32]	@ (800ace4 <ethernetif_init+0x58>)
 800acc2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff fdd3 	bl	800a870 <low_level_init>

  return ERR_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	0801e234 	.word	0x0801e234
 800acd8:	0801e250 	.word	0x0801e250
 800acdc:	0801e260 	.word	0x0801e260
 800ace0:	0801aae1 	.word	0x0801aae1
 800ace4:	0800aadd 	.word	0x0800aadd

0800ace8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800acf4:	68f9      	ldr	r1, [r7, #12]
 800acf6:	4809      	ldr	r0, [pc, #36]	@ (800ad1c <pbuf_free_custom+0x34>)
 800acf8:	f007 fa1e 	bl	8012138 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800acfc:	4b08      	ldr	r3, [pc, #32]	@ (800ad20 <pbuf_free_custom+0x38>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d107      	bne.n	800ad14 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ad04:	4b06      	ldr	r3, [pc, #24]	@ (800ad20 <pbuf_free_custom+0x38>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ad0a:	4b06      	ldr	r3, [pc, #24]	@ (800ad24 <pbuf_free_custom+0x3c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fbe8 	bl	800b4e4 <osSemaphoreRelease>
  }
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	08021998 	.word	0x08021998
 800ad20:	2000511c 	.word	0x2000511c
 800ad24:	20005120 	.word	0x20005120

0800ad28 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad2c:	f7f8 fd8a 	bl	8003844 <HAL_GetTick>
 800ad30:	4603      	mov	r3, r0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	bd80      	pop	{r7, pc}
	...

0800ad38 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08e      	sub	sp, #56	@ 0x38
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
 800ad48:	605a      	str	r2, [r3, #4]
 800ad4a:	609a      	str	r2, [r3, #8]
 800ad4c:	60da      	str	r2, [r3, #12]
 800ad4e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a52      	ldr	r2, [pc, #328]	@ (800aea0 <HAL_ETH_MspInit+0x168>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	f040 809e 	bne.w	800ae98 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ad5c:	4b51      	ldr	r3, [pc, #324]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad60:	4a50      	ldr	r2, [pc, #320]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad66:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad68:	4b4e      	ldr	r3, [pc, #312]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad70:	623b      	str	r3, [r7, #32]
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	4b4b      	ldr	r3, [pc, #300]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad78:	4a4a      	ldr	r2, [pc, #296]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad7a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad7e:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad80:	4b48      	ldr	r3, [pc, #288]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad88:	61fb      	str	r3, [r7, #28]
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	4b45      	ldr	r3, [pc, #276]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad90:	4a44      	ldr	r2, [pc, #272]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad96:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad98:	4b42      	ldr	r3, [pc, #264]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ad9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ada0:	61bb      	str	r3, [r7, #24]
 800ada2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ada4:	4b3f      	ldr	r3, [pc, #252]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ada6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada8:	4a3e      	ldr	r2, [pc, #248]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adaa:	f043 0304 	orr.w	r3, r3, #4
 800adae:	6313      	str	r3, [r2, #48]	@ 0x30
 800adb0:	4b3c      	ldr	r3, [pc, #240]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	617b      	str	r3, [r7, #20]
 800adba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adbc:	4b39      	ldr	r3, [pc, #228]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc0:	4a38      	ldr	r2, [pc, #224]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	6313      	str	r3, [r2, #48]	@ 0x30
 800adc8:	4b36      	ldr	r3, [pc, #216]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	613b      	str	r3, [r7, #16]
 800add2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800add4:	4b33      	ldr	r3, [pc, #204]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800add6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add8:	4a32      	ldr	r2, [pc, #200]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adda:	f043 0302 	orr.w	r3, r3, #2
 800adde:	6313      	str	r3, [r2, #48]	@ 0x30
 800ade0:	4b30      	ldr	r3, [pc, #192]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800ade2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800adec:	4b2d      	ldr	r3, [pc, #180]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf0:	4a2c      	ldr	r2, [pc, #176]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adf6:	6313      	str	r3, [r2, #48]	@ 0x30
 800adf8:	4b2a      	ldr	r3, [pc, #168]	@ (800aea4 <HAL_ETH_MspInit+0x16c>)
 800adfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae00:	60bb      	str	r3, [r7, #8]
 800ae02:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ae04:	2332      	movs	r3, #50	@ 0x32
 800ae06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae10:	2303      	movs	r3, #3
 800ae12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae14:	230b      	movs	r3, #11
 800ae16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ae18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4822      	ldr	r0, [pc, #136]	@ (800aea8 <HAL_ETH_MspInit+0x170>)
 800ae20:	f7fa f962 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ae24:	2386      	movs	r3, #134	@ 0x86
 800ae26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae30:	2303      	movs	r3, #3
 800ae32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae34:	230b      	movs	r3, #11
 800ae36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	481b      	ldr	r0, [pc, #108]	@ (800aeac <HAL_ETH_MspInit+0x174>)
 800ae40:	f7fa f952 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800ae44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae52:	2303      	movs	r3, #3
 800ae54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae56:	230b      	movs	r3, #11
 800ae58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800ae5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae5e:	4619      	mov	r1, r3
 800ae60:	4813      	ldr	r0, [pc, #76]	@ (800aeb0 <HAL_ETH_MspInit+0x178>)
 800ae62:	f7fa f941 	bl	80050e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ae66:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800ae6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae70:	2300      	movs	r3, #0
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae74:	2303      	movs	r3, #3
 800ae76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ae78:	230b      	movs	r3, #11
 800ae7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ae7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae80:	4619      	mov	r1, r3
 800ae82:	480c      	ldr	r0, [pc, #48]	@ (800aeb4 <HAL_ETH_MspInit+0x17c>)
 800ae84:	f7fa f930 	bl	80050e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2105      	movs	r1, #5
 800ae8c:	203d      	movs	r0, #61	@ 0x3d
 800ae8e:	f7f8 fdc1 	bl	8003a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ae92:	203d      	movs	r0, #61	@ 0x3d
 800ae94:	f7f8 fdda 	bl	8003a4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ae98:	bf00      	nop
 800ae9a:	3738      	adds	r7, #56	@ 0x38
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	40028000 	.word	0x40028000
 800aea4:	40023800 	.word	0x40023800
 800aea8:	40020800 	.word	0x40020800
 800aeac:	40020000 	.word	0x40020000
 800aeb0:	40020400 	.word	0x40020400
 800aeb4:	40021800 	.word	0x40021800

0800aeb8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aebc:	4802      	ldr	r0, [pc, #8]	@ (800aec8 <ETH_PHY_IO_Init+0x10>)
 800aebe:	f7f9 fcad 	bl	800481c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	20005128 	.word	0x20005128

0800aecc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  return 0;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	68f9      	ldr	r1, [r7, #12]
 800aeee:	4807      	ldr	r0, [pc, #28]	@ (800af0c <ETH_PHY_IO_ReadReg+0x30>)
 800aef0:	f7f9 fafc 	bl	80044ec <HAL_ETH_ReadPHYRegister>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d002      	beq.n	800af00 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800aefa:	f04f 33ff 	mov.w	r3, #4294967295
 800aefe:	e000      	b.n	800af02 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20005128 	.word	0x20005128

0800af10 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	68f9      	ldr	r1, [r7, #12]
 800af22:	4807      	ldr	r0, [pc, #28]	@ (800af40 <ETH_PHY_IO_WriteReg+0x30>)
 800af24:	f7f9 fb2d 	bl	8004582 <HAL_ETH_WritePHYRegister>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d002      	beq.n	800af34 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	e000      	b.n	800af36 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20005128 	.word	0x20005128

0800af44 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800af48:	f7f8 fc7c 	bl	8003844 <HAL_GetTick>
 800af4c:	4603      	mov	r3, r0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b0a0      	sub	sp, #128	@ 0x80
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800af5c:	f107 0308 	add.w	r3, r7, #8
 800af60:	2264      	movs	r2, #100	@ 0x64
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f011 ffb6 	bl	801ced6 <memset>
  int32_t PHYLinkState = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800af72:	2300      	movs	r3, #0
 800af74:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af76:	2300      	movs	r3, #0
 800af78:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800af7e:	483a      	ldr	r0, [pc, #232]	@ (800b068 <ethernet_link_thread+0x114>)
 800af80:	f7f8 fbb7 	bl	80036f2 <LAN8742_GetLinkState>
 800af84:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800af86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800af8c:	089b      	lsrs	r3, r3, #2
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00c      	beq.n	800afb2 <ethernet_link_thread+0x5e>
 800af98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	dc09      	bgt.n	800afb2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800af9e:	4833      	ldr	r0, [pc, #204]	@ (800b06c <ethernet_link_thread+0x118>)
 800afa0:	f7f8 ff5e 	bl	8003e60 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800afa4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800afa6:	f007 fb4b 	bl	8012640 <netif_set_down>
    netif_set_link_down(netif);
 800afaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800afac:	f007 fbae 	bl	801270c <netif_set_link_down>
 800afb0:	e055      	b.n	800b05e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800afb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d14e      	bne.n	800b05e <ethernet_link_thread+0x10a>
 800afc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	dd4b      	ble.n	800b05e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800afc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afc8:	3b02      	subs	r3, #2
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d82a      	bhi.n	800b024 <ethernet_link_thread+0xd0>
 800afce:	a201      	add	r2, pc, #4	@ (adr r2, 800afd4 <ethernet_link_thread+0x80>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800afe5 	.word	0x0800afe5
 800afd8:	0800aff7 	.word	0x0800aff7
 800afdc:	0800b007 	.word	0x0800b007
 800afe0:	0800b017 	.word	0x0800b017
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800afe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800afe8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800afea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800afee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800aff0:	2301      	movs	r3, #1
 800aff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800aff4:	e017      	b.n	800b026 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800affa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800affe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b000:	2301      	movs	r3, #1
 800b002:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b004:	e00f      	b.n	800b026 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b006:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b00a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b00c:	2300      	movs	r3, #0
 800b00e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b010:	2301      	movs	r3, #1
 800b012:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b014:	e007      	b.n	800b026 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b016:	2300      	movs	r3, #0
 800b018:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800b01a:	2300      	movs	r3, #0
 800b01c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800b01e:	2301      	movs	r3, #1
 800b020:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800b022:	e000      	b.n	800b026 <ethernet_link_thread+0xd2>
    default:
      break;
 800b024:	bf00      	nop
    }

    if(linkchanged)
 800b026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d018      	beq.n	800b05e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	480e      	ldr	r0, [pc, #56]	@ (800b06c <ethernet_link_thread+0x118>)
 800b034:	f7f9 faee 	bl	8004614 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b03a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b03c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b03e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4619      	mov	r1, r3
 800b046:	4809      	ldr	r0, [pc, #36]	@ (800b06c <ethernet_link_thread+0x118>)
 800b048:	f7f9 fbce 	bl	80047e8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b04c:	4807      	ldr	r0, [pc, #28]	@ (800b06c <ethernet_link_thread+0x118>)
 800b04e:	f7f8 fe19 	bl	8003c84 <HAL_ETH_Start>
      netif_set_up(netif);
 800b052:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b054:	f007 fa88 	bl	8012568 <netif_set_up>
      netif_set_link_up(netif);
 800b058:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b05a:	f007 fb23 	bl	80126a4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b05e:	2064      	movs	r0, #100	@ 0x64
 800b060:	f000 f910 	bl	800b284 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b064:	e78b      	b.n	800af7e <ethernet_link_thread+0x2a>
 800b066:	bf00      	nop
 800b068:	20005210 	.word	0x20005210
 800b06c:	20005128 	.word	0x20005128

0800b070 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af02      	add	r7, sp, #8
 800b076:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b078:	4812      	ldr	r0, [pc, #72]	@ (800b0c4 <HAL_ETH_RxAllocateCallback+0x54>)
 800b07a:	f006 ffe9 	bl	8012050 <memp_malloc_pool>
 800b07e:	60f8      	str	r0, [r7, #12]
  if (p)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d014      	beq.n	800b0b0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f103 0220 	add.w	r2, r3, #32
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	4a0d      	ldr	r2, [pc, #52]	@ (800b0c8 <HAL_ETH_RxAllocateCallback+0x58>)
 800b094:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800b09e:	9201      	str	r2, [sp, #4]
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2241      	movs	r2, #65	@ 0x41
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	f007 fd53 	bl	8012b54 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b0ae:	e005      	b.n	800b0bc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b0b0:	4b06      	ldr	r3, [pc, #24]	@ (800b0cc <HAL_ETH_RxAllocateCallback+0x5c>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
}
 800b0bc:	bf00      	nop
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	08021998 	.word	0x08021998
 800b0c8:	0800ace9 	.word	0x0800ace9
 800b0cc:	2000511c 	.word	0x2000511c

0800b0d0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	3b20      	subs	r3, #32
 800b0ee:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	887a      	ldrh	r2, [r7, #2]
 800b100:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d103      	bne.n	800b112 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	601a      	str	r2, [r3, #0]
 800b110:	e003      	b.n	800b11a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	69fa      	ldr	r2, [r7, #28]
 800b11e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	61fb      	str	r3, [r7, #28]
 800b126:	e009      	b.n	800b13c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	891a      	ldrh	r2, [r3, #8]
 800b12c:	887b      	ldrh	r3, [r7, #2]
 800b12e:	4413      	add	r3, r2
 800b130:	b29a      	uxth	r2, r3
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f2      	bne.n	800b128 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b142:	887b      	ldrh	r3, [r7, #2]
 800b144:	4619      	mov	r1, r3
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff fb2e 	bl	800a7a8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b14c:	bf00      	nop
 800b14e:	3720      	adds	r7, #32
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f007 feb3 	bl	8012ec8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	4603      	mov	r3, r0
 800b172:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b17c:	2b84      	cmp	r3, #132	@ 0x84
 800b17e:	d005      	beq.n	800b18c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b180:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	4413      	add	r3, r2
 800b188:	3303      	adds	r3, #3
 800b18a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b18c:	68fb      	ldr	r3, [r7, #12]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr

0800b19a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b19a:	b480      	push	{r7}
 800b19c:	b083      	sub	sp, #12
 800b19e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1a0:	f3ef 8305 	mrs	r3, IPSR
 800b1a4:	607b      	str	r3, [r7, #4]
  return(result);
 800b1a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	bf14      	ite	ne
 800b1ac:	2301      	movne	r3, #1
 800b1ae:	2300      	moveq	r3, #0
 800b1b0:	b2db      	uxtb	r3, r3
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b1c2:	f001 fdad 	bl	800cd20 <vTaskStartScheduler>
  
  return osOK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b1d0:	f7ff ffe3 	bl	800b19a <inHandlerMode>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d003      	beq.n	800b1e2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b1da:	f001 fecd 	bl	800cf78 <xTaskGetTickCountFromISR>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	e002      	b.n	800b1e8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b1e2:	f001 feb9 	bl	800cf58 <xTaskGetTickCount>
 800b1e6:	4603      	mov	r3, r0
  }
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b089      	sub	sp, #36	@ 0x24
 800b1f0:	af04      	add	r7, sp, #16
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d020      	beq.n	800b240 <osThreadCreate+0x54>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01c      	beq.n	800b240 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685c      	ldr	r4, [r3, #4]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691e      	ldr	r6, [r3, #16]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b218:	4618      	mov	r0, r3
 800b21a:	f7ff ffa6 	bl	800b16a <makeFreeRtosPriority>
 800b21e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b228:	9202      	str	r2, [sp, #8]
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	9100      	str	r1, [sp, #0]
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	4632      	mov	r2, r6
 800b232:	4629      	mov	r1, r5
 800b234:	4620      	mov	r0, r4
 800b236:	f001 fb83 	bl	800c940 <xTaskCreateStatic>
 800b23a:	4603      	mov	r3, r0
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e01c      	b.n	800b27a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685c      	ldr	r4, [r3, #4]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b24c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff ff88 	bl	800b16a <makeFreeRtosPriority>
 800b25a:	4602      	mov	r2, r0
 800b25c:	f107 030c 	add.w	r3, r7, #12
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	9200      	str	r2, [sp, #0]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	4632      	mov	r2, r6
 800b268:	4629      	mov	r1, r5
 800b26a:	4620      	mov	r0, r4
 800b26c:	f001 fbce 	bl	800ca0c <xTaskCreate>
 800b270:	4603      	mov	r3, r0
 800b272:	2b01      	cmp	r3, #1
 800b274:	d001      	beq.n	800b27a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	e000      	b.n	800b27c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b284 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d001      	beq.n	800b29a <osDelay+0x16>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	e000      	b.n	800b29c <osDelay+0x18>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4618      	mov	r0, r3
 800b29e:	f001 fd07 	bl	800ccb0 <vTaskDelay>
  
  return osOK;
 800b2a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d007      	beq.n	800b2cc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f000 fc99 	bl	800bbfa <xQueueCreateMutexStatic>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	e003      	b.n	800b2d4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f000 fc7c 	bl	800bbca <xQueueCreateMutex>
 800b2d2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d101      	bne.n	800b2f4 <osMutexWait+0x18>
    return osErrorParameter;
 800b2f0:	2380      	movs	r3, #128	@ 0x80
 800b2f2:	e03a      	b.n	800b36a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d103      	bne.n	800b308 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b300:	f04f 33ff 	mov.w	r3, #4294967295
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e009      	b.n	800b31c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <osMutexWait+0x40>
      ticks = 1;
 800b318:	2301      	movs	r3, #1
 800b31a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b31c:	f7ff ff3d 	bl	800b19a <inHandlerMode>
 800b320:	4603      	mov	r3, r0
 800b322:	2b00      	cmp	r3, #0
 800b324:	d017      	beq.n	800b356 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b326:	f107 0308 	add.w	r3, r7, #8
 800b32a:	461a      	mov	r2, r3
 800b32c:	2100      	movs	r1, #0
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f001 f8c4 	bl	800c4bc <xQueueReceiveFromISR>
 800b334:	4603      	mov	r3, r0
 800b336:	2b01      	cmp	r3, #1
 800b338:	d001      	beq.n	800b33e <osMutexWait+0x62>
      return osErrorOS;
 800b33a:	23ff      	movs	r3, #255	@ 0xff
 800b33c:	e015      	b.n	800b36a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d011      	beq.n	800b368 <osMutexWait+0x8c>
 800b344:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <osMutexWait+0x98>)
 800b346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	e008      	b.n	800b368 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b356:	68f9      	ldr	r1, [r7, #12]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 ff97 	bl	800c28c <xQueueSemaphoreTake>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b01      	cmp	r3, #1
 800b362:	d001      	beq.n	800b368 <osMutexWait+0x8c>
    return osErrorOS;
 800b364:	23ff      	movs	r3, #255	@ 0xff
 800b366:	e000      	b.n	800b36a <osMutexWait+0x8e>
  }
  
  return osOK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b380:	2300      	movs	r3, #0
 800b382:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b384:	2300      	movs	r3, #0
 800b386:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b388:	f7ff ff07 	bl	800b19a <inHandlerMode>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d016      	beq.n	800b3c0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 fdf6 	bl	800bf8a <xQueueGiveFromISR>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d001      	beq.n	800b3a8 <osMutexRelease+0x30>
      return osErrorOS;
 800b3a4:	23ff      	movs	r3, #255	@ 0xff
 800b3a6:	e017      	b.n	800b3d8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d013      	beq.n	800b3d6 <osMutexRelease+0x5e>
 800b3ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <osMutexRelease+0x68>)
 800b3b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b4:	601a      	str	r2, [r3, #0]
 800b3b6:	f3bf 8f4f 	dsb	sy
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	e00a      	b.n	800b3d6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 fc32 	bl	800bc30 <xQueueGenericSend>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d001      	beq.n	800b3d6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b3d2:	23ff      	movs	r3, #255	@ 0xff
 800b3d4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af02      	add	r7, sp, #8
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00f      	beq.n	800b416 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d10a      	bne.n	800b412 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	2203      	movs	r2, #3
 800b402:	9200      	str	r2, [sp, #0]
 800b404:	2200      	movs	r2, #0
 800b406:	2100      	movs	r1, #0
 800b408:	2001      	movs	r0, #1
 800b40a:	f000 fadb 	bl	800b9c4 <xQueueGenericCreateStatic>
 800b40e:	4603      	mov	r3, r0
 800b410:	e016      	b.n	800b440 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	e014      	b.n	800b440 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d110      	bne.n	800b43e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b41c:	2203      	movs	r2, #3
 800b41e:	2100      	movs	r1, #0
 800b420:	2001      	movs	r0, #1
 800b422:	f000 fb56 	bl	800bad2 <xQueueGenericCreate>
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <osSemaphoreCreate+0x56>
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	2100      	movs	r1, #0
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f000 fbfb 	bl	800bc30 <xQueueGenericSend>
      return sema;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	e000      	b.n	800b440 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b43e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b452:	2300      	movs	r3, #0
 800b454:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b45c:	2380      	movs	r3, #128	@ 0x80
 800b45e:	e03a      	b.n	800b4d6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46a:	d103      	bne.n	800b474 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b46c:	f04f 33ff 	mov.w	r3, #4294967295
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	e009      	b.n	800b488 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d006      	beq.n	800b488 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <osSemaphoreWait+0x40>
      ticks = 1;
 800b484:	2301      	movs	r3, #1
 800b486:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b488:	f7ff fe87 	bl	800b19a <inHandlerMode>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d017      	beq.n	800b4c2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b492:	f107 0308 	add.w	r3, r7, #8
 800b496:	461a      	mov	r2, r3
 800b498:	2100      	movs	r1, #0
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 f80e 	bl	800c4bc <xQueueReceiveFromISR>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d001      	beq.n	800b4aa <osSemaphoreWait+0x62>
      return osErrorOS;
 800b4a6:	23ff      	movs	r3, #255	@ 0xff
 800b4a8:	e015      	b.n	800b4d6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d011      	beq.n	800b4d4 <osSemaphoreWait+0x8c>
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <osSemaphoreWait+0x98>)
 800b4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	e008      	b.n	800b4d4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b4c2:	68f9      	ldr	r1, [r7, #12]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fee1 	bl	800c28c <xQueueSemaphoreTake>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d001      	beq.n	800b4d4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b4d0:	23ff      	movs	r3, #255	@ 0xff
 800b4d2:	e000      	b.n	800b4d6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	e000ed04 	.word	0xe000ed04

0800b4e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b4f4:	f7ff fe51 	bl	800b19a <inHandlerMode>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d016      	beq.n	800b52c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 fd40 	bl	800bf8a <xQueueGiveFromISR>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d001      	beq.n	800b514 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b510:	23ff      	movs	r3, #255	@ 0xff
 800b512:	e017      	b.n	800b544 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d013      	beq.n	800b542 <osSemaphoreRelease+0x5e>
 800b51a:	4b0c      	ldr	r3, [pc, #48]	@ (800b54c <osSemaphoreRelease+0x68>)
 800b51c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	e00a      	b.n	800b542 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b52c:	2300      	movs	r3, #0
 800b52e:	2200      	movs	r2, #0
 800b530:	2100      	movs	r1, #0
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fb7c 	bl	800bc30 <xQueueGenericSend>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d001      	beq.n	800b542 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b53e:	23ff      	movs	r3, #255	@ 0xff
 800b540:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b542:	68fb      	ldr	r3, [r7, #12]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	e000ed04 	.word	0xe000ed04

0800b550 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b558:	f7ff fe1f 	bl	800b19a <inHandlerMode>
 800b55c:	4603      	mov	r3, r0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d001      	beq.n	800b566 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b562:	2382      	movs	r3, #130	@ 0x82
 800b564:	e003      	b.n	800b56e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 f872 	bl	800c650 <vQueueDelete>

  return osOK; 
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b576:	b590      	push	{r4, r7, lr}
 800b578:	b085      	sub	sp, #20
 800b57a:	af02      	add	r7, sp, #8
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d011      	beq.n	800b5ac <osMessageCreate+0x36>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00d      	beq.n	800b5ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6818      	ldr	r0, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6859      	ldr	r1, [r3, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	689a      	ldr	r2, [r3, #8]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	2400      	movs	r4, #0
 800b5a2:	9400      	str	r4, [sp, #0]
 800b5a4:	f000 fa0e 	bl	800b9c4 <xQueueGenericCreateStatic>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	e008      	b.n	800b5be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	f000 fa8b 	bl	800bad2 <xQueueGenericCreate>
 800b5bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd90      	pop	{r4, r7, pc}
	...

0800b5c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b086      	sub	sp, #24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <osMessagePut+0x1e>
    ticks = 1;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b5e6:	f7ff fdd8 	bl	800b19a <inHandlerMode>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d018      	beq.n	800b622 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b5f0:	f107 0210 	add.w	r2, r7, #16
 800b5f4:	f107 0108 	add.w	r1, r7, #8
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fc22 	bl	800be44 <xQueueGenericSendFromISR>
 800b600:	4603      	mov	r3, r0
 800b602:	2b01      	cmp	r3, #1
 800b604:	d001      	beq.n	800b60a <osMessagePut+0x42>
      return osErrorOS;
 800b606:	23ff      	movs	r3, #255	@ 0xff
 800b608:	e018      	b.n	800b63c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d014      	beq.n	800b63a <osMessagePut+0x72>
 800b610:	4b0c      	ldr	r3, [pc, #48]	@ (800b644 <osMessagePut+0x7c>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	e00b      	b.n	800b63a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b622:	f107 0108 	add.w	r1, r7, #8
 800b626:	2300      	movs	r3, #0
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 fb00 	bl	800bc30 <xQueueGenericSend>
 800b630:	4603      	mov	r3, r0
 800b632:	2b01      	cmp	r3, #1
 800b634:	d001      	beq.n	800b63a <osMessagePut+0x72>
      return osErrorOS;
 800b636:	23ff      	movs	r3, #255	@ 0xff
 800b638:	e000      	b.n	800b63c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	e000ed04 	.word	0xe000ed04

0800b648 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b648:	b590      	push	{r4, r7, lr}
 800b64a:	b08b      	sub	sp, #44	@ 0x2c
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d10a      	bne.n	800b678 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b662:	2380      	movs	r3, #128	@ 0x80
 800b664:	617b      	str	r3, [r7, #20]
    return event;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	461c      	mov	r4, r3
 800b66a:	f107 0314 	add.w	r3, r7, #20
 800b66e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b676:	e054      	b.n	800b722 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b686:	d103      	bne.n	800b690 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b688:	f04f 33ff 	mov.w	r3, #4294967295
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b68e:	e009      	b.n	800b6a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d006      	beq.n	800b6a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <osMessageGet+0x5c>
      ticks = 1;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b6a4:	f7ff fd79 	bl	800b19a <inHandlerMode>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d01c      	beq.n	800b6e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b6ae:	f107 0220 	add.w	r2, r7, #32
 800b6b2:	f107 0314 	add.w	r3, r7, #20
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f000 fefe 	bl	800c4bc <xQueueReceiveFromISR>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d102      	bne.n	800b6cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b6c6:	2310      	movs	r3, #16
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	e001      	b.n	800b6d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d01d      	beq.n	800b712 <osMessageGet+0xca>
 800b6d6:	4b15      	ldr	r3, [pc, #84]	@ (800b72c <osMessageGet+0xe4>)
 800b6d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	e014      	b.n	800b712 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	68b8      	ldr	r0, [r7, #8]
 800b6f4:	f000 fce2 	bl	800c0bc <xQueueReceive>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d102      	bne.n	800b704 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b6fe:	2310      	movs	r3, #16
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	e006      	b.n	800b712 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <osMessageGet+0xc6>
 800b70a:	2300      	movs	r3, #0
 800b70c:	e000      	b.n	800b710 <osMessageGet+0xc8>
 800b70e:	2340      	movs	r3, #64	@ 0x40
 800b710:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	461c      	mov	r4, r3
 800b716:	f107 0314 	add.w	r3, r7, #20
 800b71a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b71e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	372c      	adds	r7, #44	@ 0x2c
 800b726:	46bd      	mov	sp, r7
 800b728:	bd90      	pop	{r4, r7, pc}
 800b72a:	bf00      	nop
 800b72c:	e000ed04 	.word	0xe000ed04

0800b730 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b738:	f7ff fd2f 	bl	800b19a <inHandlerMode>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 ff63 	bl	800c60e <uxQueueMessagesWaitingFromISR>
 800b748:	4603      	mov	r3, r0
 800b74a:	e003      	b.n	800b754 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 ff3d 	bl	800c5cc <uxQueueMessagesWaiting>
 800b752:	4603      	mov	r3, r0
  }
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b764:	f7ff fd19 	bl	800b19a <inHandlerMode>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <osMessageDelete+0x16>
    return osErrorISR;
 800b76e:	2382      	movs	r3, #130	@ 0x82
 800b770:	e003      	b.n	800b77a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 ff6c 	bl	800c650 <vQueueDelete>

  return osOK; 
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f103 0208 	add.w	r2, r3, #8
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f04f 32ff 	mov.w	r2, #4294967295
 800b79a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f103 0208 	add.w	r2, r3, #8
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f103 0208 	add.w	r2, r3, #8
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7b6:	bf00      	nop
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
 800b7e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	68fa      	ldr	r2, [r7, #12]
 800b7f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	689a      	ldr	r2, [r3, #8]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	601a      	str	r2, [r3, #0]
}
 800b818:	bf00      	nop
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d103      	bne.n	800b844 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	e00c      	b.n	800b85e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3308      	adds	r3, #8
 800b848:	60fb      	str	r3, [r7, #12]
 800b84a:	e002      	b.n	800b852 <vListInsert+0x2e>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d2f6      	bcs.n	800b84c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	1c5a      	adds	r2, r3, #1
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	601a      	str	r2, [r3, #0]
}
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	6892      	ldr	r2, [r2, #8]
 800b8ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	6852      	ldr	r2, [r2, #4]
 800b8b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d103      	bne.n	800b8ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	1e5a      	subs	r2, r3, #1
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
	...

0800b8ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10d      	bne.n	800b91c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b904:	b672      	cpsid	i
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	b662      	cpsie	i
 800b914:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b916:	bf00      	nop
 800b918:	bf00      	nop
 800b91a:	e7fd      	b.n	800b918 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b91c:	f002 f9a6 	bl	800dc6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b92c:	fb01 f303 	mul.w	r3, r1, r3
 800b930:	441a      	add	r2, r3
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b94c:	3b01      	subs	r3, #1
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b952:	fb01 f303 	mul.w	r3, r1, r3
 800b956:	441a      	add	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	22ff      	movs	r2, #255	@ 0xff
 800b960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	22ff      	movs	r2, #255	@ 0xff
 800b968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d114      	bne.n	800b99c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d01a      	beq.n	800b9b0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3310      	adds	r3, #16
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 fc56 	bl	800d230 <xTaskRemoveFromEventList>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d012      	beq.n	800b9b0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b98a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9c0 <xQueueGenericReset+0xd4>)
 800b98c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	e009      	b.n	800b9b0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3310      	adds	r3, #16
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff feee 	bl	800b782 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3324      	adds	r3, #36	@ 0x24
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff fee9 	bl	800b782 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b9b0:	f002 f992 	bl	800dcd8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b9b4:	2301      	movs	r3, #1
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	e000ed04 	.word	0xe000ed04

0800b9c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08e      	sub	sp, #56	@ 0x38
 800b9c8:	af02      	add	r7, sp, #8
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10d      	bne.n	800b9f4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	b672      	cpsid	i
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	b662      	cpsie	i
 800b9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10d      	bne.n	800ba16 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	b672      	cpsid	i
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	b662      	cpsie	i
 800ba0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	e7fd      	b.n	800ba12 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d002      	beq.n	800ba22 <xQueueGenericCreateStatic+0x5e>
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <xQueueGenericCreateStatic+0x62>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <xQueueGenericCreateStatic+0x64>
 800ba26:	2300      	movs	r3, #0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10d      	bne.n	800ba48 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba30:	b672      	cpsid	i
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	b662      	cpsie	i
 800ba40:	623b      	str	r3, [r7, #32]
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	e7fd      	b.n	800ba44 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <xQueueGenericCreateStatic+0x90>
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d101      	bne.n	800ba58 <xQueueGenericCreateStatic+0x94>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e000      	b.n	800ba5a <xQueueGenericCreateStatic+0x96>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10d      	bne.n	800ba7a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba62:	b672      	cpsid	i
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	b662      	cpsie	i
 800ba72:	61fb      	str	r3, [r7, #28]
}
 800ba74:	bf00      	nop
 800ba76:	bf00      	nop
 800ba78:	e7fd      	b.n	800ba76 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba7a:	2348      	movs	r3, #72	@ 0x48
 800ba7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b48      	cmp	r3, #72	@ 0x48
 800ba82:	d00d      	beq.n	800baa0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba88:	b672      	cpsid	i
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	b662      	cpsie	i
 800ba98:	61bb      	str	r3, [r7, #24]
}
 800ba9a:	bf00      	nop
 800ba9c:	bf00      	nop
 800ba9e:	e7fd      	b.n	800ba9c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800baa0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800baa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00d      	beq.n	800bac8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800baac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bab4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	4613      	mov	r3, r2
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 f848 	bl	800bb58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800baca:	4618      	mov	r0, r3
 800bacc:	3730      	adds	r7, #48	@ 0x30
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b08a      	sub	sp, #40	@ 0x28
 800bad6:	af02      	add	r7, sp, #8
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	4613      	mov	r3, r2
 800bade:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10d      	bne.n	800bb02 <xQueueGenericCreate+0x30>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baea:	b672      	cpsid	i
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	b662      	cpsie	i
 800bafa:	613b      	str	r3, [r7, #16]
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	e7fd      	b.n	800bafe <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d102      	bne.n	800bb0e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	61fb      	str	r3, [r7, #28]
 800bb0c:	e004      	b.n	800bb18 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68ba      	ldr	r2, [r7, #8]
 800bb12:	fb02 f303 	mul.w	r3, r2, r3
 800bb16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	3348      	adds	r3, #72	@ 0x48
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f002 f9d3 	bl	800dec8 <pvPortMalloc>
 800bb22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d011      	beq.n	800bb4e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	3348      	adds	r3, #72	@ 0x48
 800bb32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb3c:	79fa      	ldrb	r2, [r7, #7]
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	4613      	mov	r3, r2
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f000 f805 	bl	800bb58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb4e:	69bb      	ldr	r3, [r7, #24]
	}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	e002      	b.n	800bb7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb86:	2101      	movs	r1, #1
 800bb88:	69b8      	ldr	r0, [r7, #24]
 800bb8a:	f7ff feaf 	bl	800b8ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb8e:	bf00      	nop
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00e      	beq.n	800bbc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2100      	movs	r1, #0
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f837 	bl	800bc30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b086      	sub	sp, #24
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	461a      	mov	r2, r3
 800bbe0:	6939      	ldr	r1, [r7, #16]
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f7ff ff75 	bl	800bad2 <xQueueGenericCreate>
 800bbe8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f7ff ffd3 	bl	800bb96 <prvInitialiseMutex>

		return xNewQueue;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
	}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3718      	adds	r7, #24
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b088      	sub	sp, #32
 800bbfe:	af02      	add	r7, sp, #8
 800bc00:	4603      	mov	r3, r0
 800bc02:	6039      	str	r1, [r7, #0]
 800bc04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc06:	2301      	movs	r3, #1
 800bc08:	617b      	str	r3, [r7, #20]
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bc0e:	79fb      	ldrb	r3, [r7, #7]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2200      	movs	r2, #0
 800bc16:	6939      	ldr	r1, [r7, #16]
 800bc18:	6978      	ldr	r0, [r7, #20]
 800bc1a:	f7ff fed3 	bl	800b9c4 <xQueueGenericCreateStatic>
 800bc1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f7ff ffb8 	bl	800bb96 <prvInitialiseMutex>

		return xNewQueue;
 800bc26:	68fb      	ldr	r3, [r7, #12]
	}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b08e      	sub	sp, #56	@ 0x38
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <xQueueGenericSend+0x38>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc50:	b672      	cpsid	i
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	b662      	cpsie	i
 800bc60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	e7fd      	b.n	800bc64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d103      	bne.n	800bc76 <xQueueGenericSend+0x46>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <xQueueGenericSend+0x4a>
 800bc76:	2301      	movs	r3, #1
 800bc78:	e000      	b.n	800bc7c <xQueueGenericSend+0x4c>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d10d      	bne.n	800bc9c <xQueueGenericSend+0x6c>
	__asm volatile
 800bc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc84:	b672      	cpsid	i
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	b662      	cpsie	i
 800bc94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc96:	bf00      	nop
 800bc98:	bf00      	nop
 800bc9a:	e7fd      	b.n	800bc98 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d103      	bne.n	800bcaa <xQueueGenericSend+0x7a>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d101      	bne.n	800bcae <xQueueGenericSend+0x7e>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e000      	b.n	800bcb0 <xQueueGenericSend+0x80>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10d      	bne.n	800bcd0 <xQueueGenericSend+0xa0>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb8:	b672      	cpsid	i
 800bcba:	f383 8811 	msr	BASEPRI, r3
 800bcbe:	f3bf 8f6f 	isb	sy
 800bcc2:	f3bf 8f4f 	dsb	sy
 800bcc6:	b662      	cpsie	i
 800bcc8:	623b      	str	r3, [r7, #32]
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	e7fd      	b.n	800bccc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcd0:	f001 fc7c 	bl	800d5cc <xTaskGetSchedulerState>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <xQueueGenericSend+0xb0>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <xQueueGenericSend+0xb4>
 800bce0:	2301      	movs	r3, #1
 800bce2:	e000      	b.n	800bce6 <xQueueGenericSend+0xb6>
 800bce4:	2300      	movs	r3, #0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <xQueueGenericSend+0xd6>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcee:	b672      	cpsid	i
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	b662      	cpsie	i
 800bcfe:	61fb      	str	r3, [r7, #28]
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	e7fd      	b.n	800bd02 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd06:	f001 ffb1 	bl	800dc6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d302      	bcc.n	800bd1c <xQueueGenericSend+0xec>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d129      	bne.n	800bd70 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd22:	f000 fcd3 	bl	800c6cc <prvCopyDataToQueue>
 800bd26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d010      	beq.n	800bd52 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd32:	3324      	adds	r3, #36	@ 0x24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f001 fa7b 	bl	800d230 <xTaskRemoveFromEventList>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d013      	beq.n	800bd68 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd40:	4b3f      	ldr	r3, [pc, #252]	@ (800be40 <xQueueGenericSend+0x210>)
 800bd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	e00a      	b.n	800bd68 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d007      	beq.n	800bd68 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd58:	4b39      	ldr	r3, [pc, #228]	@ (800be40 <xQueueGenericSend+0x210>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd68:	f001 ffb6 	bl	800dcd8 <vPortExitCritical>
				return pdPASS;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e063      	b.n	800be38 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd76:	f001 ffaf 	bl	800dcd8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e05c      	b.n	800be38 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d106      	bne.n	800bd92 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd84:	f107 0314 	add.w	r3, r7, #20
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f001 fab7 	bl	800d2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd92:	f001 ffa1 	bl	800dcd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd96:	f001 f831 	bl	800cdfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd9a:	f001 ff67 	bl	800dc6c <vPortEnterCritical>
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bda4:	b25b      	sxtb	r3, r3
 800bda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdaa:	d103      	bne.n	800bdb4 <xQueueGenericSend+0x184>
 800bdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdae:	2200      	movs	r2, #0
 800bdb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdba:	b25b      	sxtb	r3, r3
 800bdbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdc0:	d103      	bne.n	800bdca <xQueueGenericSend+0x19a>
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdca:	f001 ff85 	bl	800dcd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdce:	1d3a      	adds	r2, r7, #4
 800bdd0:	f107 0314 	add.w	r3, r7, #20
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 faa6 	bl	800d328 <xTaskCheckForTimeOut>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d124      	bne.n	800be2c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bde2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bde4:	f000 fd6a 	bl	800c8bc <prvIsQueueFull>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d018      	beq.n	800be20 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf0:	3310      	adds	r3, #16
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f001 f9f2 	bl	800d1e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bdfe:	f000 fcf5 	bl	800c7ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be02:	f001 f809 	bl	800ce18 <xTaskResumeAll>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f47f af7c 	bne.w	800bd06 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800be0e:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <xQueueGenericSend+0x210>)
 800be10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	e772      	b.n	800bd06 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be22:	f000 fce3 	bl	800c7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be26:	f000 fff7 	bl	800ce18 <xTaskResumeAll>
 800be2a:	e76c      	b.n	800bd06 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be2e:	f000 fcdd 	bl	800c7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be32:	f000 fff1 	bl	800ce18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3738      	adds	r7, #56	@ 0x38
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	e000ed04 	.word	0xe000ed04

0800be44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08e      	sub	sp, #56	@ 0x38
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]
 800be50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10d      	bne.n	800be78 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800be5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be60:	b672      	cpsid	i
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	b662      	cpsie	i
 800be70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be72:	bf00      	nop
 800be74:	bf00      	nop
 800be76:	e7fd      	b.n	800be74 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <xQueueGenericSendFromISR+0x42>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <xQueueGenericSendFromISR+0x46>
 800be86:	2301      	movs	r3, #1
 800be88:	e000      	b.n	800be8c <xQueueGenericSendFromISR+0x48>
 800be8a:	2300      	movs	r3, #0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10d      	bne.n	800beac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	b672      	cpsid	i
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	b662      	cpsie	i
 800bea4:	623b      	str	r3, [r7, #32]
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	e7fd      	b.n	800bea8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d103      	bne.n	800beba <xQueueGenericSendFromISR+0x76>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d101      	bne.n	800bebe <xQueueGenericSendFromISR+0x7a>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <xQueueGenericSendFromISR+0x7c>
 800bebe:	2300      	movs	r3, #0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10d      	bne.n	800bee0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec8:	b672      	cpsid	i
 800beca:	f383 8811 	msr	BASEPRI, r3
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f3bf 8f4f 	dsb	sy
 800bed6:	b662      	cpsie	i
 800bed8:	61fb      	str	r3, [r7, #28]
}
 800beda:	bf00      	nop
 800bedc:	bf00      	nop
 800bede:	e7fd      	b.n	800bedc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bee0:	f001 ffac 	bl	800de3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bee4:	f3ef 8211 	mrs	r2, BASEPRI
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	b672      	cpsid	i
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	b662      	cpsie	i
 800befc:	61ba      	str	r2, [r7, #24]
 800befe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf00:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d302      	bcc.n	800bf16 <xQueueGenericSendFromISR+0xd2>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d12c      	bne.n	800bf70 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf20:	683a      	ldr	r2, [r7, #0]
 800bf22:	68b9      	ldr	r1, [r7, #8]
 800bf24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf26:	f000 fbd1 	bl	800c6cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bf2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf32:	d112      	bne.n	800bf5a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d016      	beq.n	800bf6a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3e:	3324      	adds	r3, #36	@ 0x24
 800bf40:	4618      	mov	r0, r3
 800bf42:	f001 f975 	bl	800d230 <xTaskRemoveFromEventList>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00e      	beq.n	800bf6a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00b      	beq.n	800bf6a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	e007      	b.n	800bf6a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf5e:	3301      	adds	r3, #1
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	b25a      	sxtb	r2, r3
 800bf64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800bf6e:	e001      	b.n	800bf74 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf76:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3738      	adds	r7, #56	@ 0x38
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b08e      	sub	sp, #56	@ 0x38
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10d      	bne.n	800bfba <xQueueGiveFromISR+0x30>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa2:	b672      	cpsid	i
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	b662      	cpsie	i
 800bfb2:	623b      	str	r3, [r7, #32]
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop
 800bfb8:	e7fd      	b.n	800bfb6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00d      	beq.n	800bfde <xQueueGiveFromISR+0x54>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc6:	b672      	cpsid	i
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	b662      	cpsie	i
 800bfd6:	61fb      	str	r3, [r7, #28]
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	e7fd      	b.n	800bfda <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d103      	bne.n	800bfee <xQueueGiveFromISR+0x64>
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <xQueueGiveFromISR+0x68>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e000      	b.n	800bff4 <xQueueGiveFromISR+0x6a>
 800bff2:	2300      	movs	r3, #0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d10d      	bne.n	800c014 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffc:	b672      	cpsid	i
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	b662      	cpsie	i
 800c00c:	61bb      	str	r3, [r7, #24]
}
 800c00e:	bf00      	nop
 800c010:	bf00      	nop
 800c012:	e7fd      	b.n	800c010 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c014:	f001 ff12 	bl	800de3c <vPortValidateInterruptPriority>
	__asm volatile
 800c018:	f3ef 8211 	mrs	r2, BASEPRI
 800c01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c020:	b672      	cpsid	i
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	b662      	cpsie	i
 800c030:	617a      	str	r2, [r7, #20]
 800c032:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c034:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c036:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c044:	429a      	cmp	r2, r3
 800c046:	d22b      	bcs.n	800c0a0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c04e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	1c5a      	adds	r2, r3, #1
 800c056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c058:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c05a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c062:	d112      	bne.n	800c08a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d016      	beq.n	800c09a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06e:	3324      	adds	r3, #36	@ 0x24
 800c070:	4618      	mov	r0, r3
 800c072:	f001 f8dd 	bl	800d230 <xTaskRemoveFromEventList>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00e      	beq.n	800c09a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2201      	movs	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
 800c088:	e007      	b.n	800c09a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c08a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c08e:	3301      	adds	r3, #1
 800c090:	b2db      	uxtb	r3, r3
 800c092:	b25a      	sxtb	r2, r3
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c09a:	2301      	movs	r3, #1
 800c09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c09e:	e001      	b.n	800c0a4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f383 8811 	msr	BASEPRI, r3
}
 800c0ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3738      	adds	r7, #56	@ 0x38
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08c      	sub	sp, #48	@ 0x30
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10d      	bne.n	800c0f2 <xQueueReceive+0x36>
	__asm volatile
 800c0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0da:	b672      	cpsid	i
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	b662      	cpsie	i
 800c0ea:	623b      	str	r3, [r7, #32]
}
 800c0ec:	bf00      	nop
 800c0ee:	bf00      	nop
 800c0f0:	e7fd      	b.n	800c0ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d103      	bne.n	800c100 <xQueueReceive+0x44>
 800c0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <xQueueReceive+0x48>
 800c100:	2301      	movs	r3, #1
 800c102:	e000      	b.n	800c106 <xQueueReceive+0x4a>
 800c104:	2300      	movs	r3, #0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10d      	bne.n	800c126 <xQueueReceive+0x6a>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10e:	b672      	cpsid	i
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	b662      	cpsie	i
 800c11e:	61fb      	str	r3, [r7, #28]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c126:	f001 fa51 	bl	800d5cc <xTaskGetSchedulerState>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <xQueueReceive+0x7a>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <xQueueReceive+0x7e>
 800c136:	2301      	movs	r3, #1
 800c138:	e000      	b.n	800c13c <xQueueReceive+0x80>
 800c13a:	2300      	movs	r3, #0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10d      	bne.n	800c15c <xQueueReceive+0xa0>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c144:	b672      	cpsid	i
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	b662      	cpsie	i
 800c154:	61bb      	str	r3, [r7, #24]
}
 800c156:	bf00      	nop
 800c158:	bf00      	nop
 800c15a:	e7fd      	b.n	800c158 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c15c:	f001 fd86 	bl	800dc6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c164:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01f      	beq.n	800c1ac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c16c:	68b9      	ldr	r1, [r7, #8]
 800c16e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c170:	f000 fb16 	bl	800c7a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c176:	1e5a      	subs	r2, r3, #1
 800c178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	691b      	ldr	r3, [r3, #16]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00f      	beq.n	800c1a4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c186:	3310      	adds	r3, #16
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f851 	bl	800d230 <xTaskRemoveFromEventList>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d007      	beq.n	800c1a4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c194:	4b3c      	ldr	r3, [pc, #240]	@ (800c288 <xQueueReceive+0x1cc>)
 800c196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1a4:	f001 fd98 	bl	800dcd8 <vPortExitCritical>
				return pdPASS;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e069      	b.n	800c280 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d103      	bne.n	800c1ba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1b2:	f001 fd91 	bl	800dcd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e062      	b.n	800c280 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d106      	bne.n	800c1ce <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1c0:	f107 0310 	add.w	r3, r7, #16
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 f899 	bl	800d2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1ce:	f001 fd83 	bl	800dcd8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1d2:	f000 fe13 	bl	800cdfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1d6:	f001 fd49 	bl	800dc6c <vPortEnterCritical>
 800c1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1e0:	b25b      	sxtb	r3, r3
 800c1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e6:	d103      	bne.n	800c1f0 <xQueueReceive+0x134>
 800c1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1f6:	b25b      	sxtb	r3, r3
 800c1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1fc:	d103      	bne.n	800c206 <xQueueReceive+0x14a>
 800c1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c206:	f001 fd67 	bl	800dcd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c20a:	1d3a      	adds	r2, r7, #4
 800c20c:	f107 0310 	add.w	r3, r7, #16
 800c210:	4611      	mov	r1, r2
 800c212:	4618      	mov	r0, r3
 800c214:	f001 f888 	bl	800d328 <xTaskCheckForTimeOut>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d123      	bne.n	800c266 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c21e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c220:	f000 fb36 	bl	800c890 <prvIsQueueEmpty>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d017      	beq.n	800c25a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	3324      	adds	r3, #36	@ 0x24
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f000 ffd4 	bl	800d1e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c238:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c23a:	f000 fad7 	bl	800c7ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c23e:	f000 fdeb 	bl	800ce18 <xTaskResumeAll>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d189      	bne.n	800c15c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c248:	4b0f      	ldr	r3, [pc, #60]	@ (800c288 <xQueueReceive+0x1cc>)
 800c24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	e780      	b.n	800c15c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c25c:	f000 fac6 	bl	800c7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c260:	f000 fdda 	bl	800ce18 <xTaskResumeAll>
 800c264:	e77a      	b.n	800c15c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c268:	f000 fac0 	bl	800c7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c26c:	f000 fdd4 	bl	800ce18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c270:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c272:	f000 fb0d 	bl	800c890 <prvIsQueueEmpty>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f43f af6f 	beq.w	800c15c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c27e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c280:	4618      	mov	r0, r3
 800c282:	3730      	adds	r7, #48	@ 0x30
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08e      	sub	sp, #56	@ 0x38
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c296:	2300      	movs	r3, #0
 800c298:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10d      	bne.n	800c2c4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ac:	b672      	cpsid	i
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	b662      	cpsie	i
 800c2bc:	623b      	str	r3, [r7, #32]
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	e7fd      	b.n	800c2c0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00d      	beq.n	800c2e8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	b672      	cpsid	i
 800c2d2:	f383 8811 	msr	BASEPRI, r3
 800c2d6:	f3bf 8f6f 	isb	sy
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	b662      	cpsie	i
 800c2e0:	61fb      	str	r3, [r7, #28]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e8:	f001 f970 	bl	800d5cc <xTaskGetSchedulerState>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <xQueueSemaphoreTake+0x6c>
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <xQueueSemaphoreTake+0x70>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e000      	b.n	800c2fe <xQueueSemaphoreTake+0x72>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d10d      	bne.n	800c31e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	b672      	cpsid	i
 800c308:	f383 8811 	msr	BASEPRI, r3
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	b662      	cpsie	i
 800c316:	61bb      	str	r3, [r7, #24]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c31e:	f001 fca5 	bl	800dc6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c326:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d024      	beq.n	800c378 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c330:	1e5a      	subs	r2, r3, #1
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c33e:	f001 fb0f 	bl	800d960 <pvTaskIncrementMutexHeldCount>
 800c342:	4602      	mov	r2, r0
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34a:	691b      	ldr	r3, [r3, #16]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00f      	beq.n	800c370 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c352:	3310      	adds	r3, #16
 800c354:	4618      	mov	r0, r3
 800c356:	f000 ff6b 	bl	800d230 <xTaskRemoveFromEventList>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d007      	beq.n	800c370 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c360:	4b55      	ldr	r3, [pc, #340]	@ (800c4b8 <xQueueSemaphoreTake+0x22c>)
 800c362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c366:	601a      	str	r2, [r3, #0]
 800c368:	f3bf 8f4f 	dsb	sy
 800c36c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c370:	f001 fcb2 	bl	800dcd8 <vPortExitCritical>
				return pdPASS;
 800c374:	2301      	movs	r3, #1
 800c376:	e09a      	b.n	800c4ae <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d114      	bne.n	800c3a8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c388:	b672      	cpsid	i
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	b662      	cpsie	i
 800c398:	617b      	str	r3, [r7, #20]
}
 800c39a:	bf00      	nop
 800c39c:	bf00      	nop
 800c39e:	e7fd      	b.n	800c39c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3a0:	f001 fc9a 	bl	800dcd8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e082      	b.n	800c4ae <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ae:	f107 030c 	add.w	r3, r7, #12
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f000 ffa2 	bl	800d2fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3bc:	f001 fc8c 	bl	800dcd8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3c0:	f000 fd1c 	bl	800cdfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3c4:	f001 fc52 	bl	800dc6c <vPortEnterCritical>
 800c3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c3ce:	b25b      	sxtb	r3, r3
 800c3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d4:	d103      	bne.n	800c3de <xQueueSemaphoreTake+0x152>
 800c3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3e4:	b25b      	sxtb	r3, r3
 800c3e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ea:	d103      	bne.n	800c3f4 <xQueueSemaphoreTake+0x168>
 800c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c3f4:	f001 fc70 	bl	800dcd8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3f8:	463a      	mov	r2, r7
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f000 ff91 	bl	800d328 <xTaskCheckForTimeOut>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d132      	bne.n	800c472 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c40e:	f000 fa3f 	bl	800c890 <prvIsQueueEmpty>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d026      	beq.n	800c466 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c420:	f001 fc24 	bl	800dc6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	4618      	mov	r0, r3
 800c42a:	f001 f8ed 	bl	800d608 <xTaskPriorityInherit>
 800c42e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c430:	f001 fc52 	bl	800dcd8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c436:	3324      	adds	r3, #36	@ 0x24
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	4611      	mov	r1, r2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 fecf 	bl	800d1e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c444:	f000 f9d2 	bl	800c7ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c448:	f000 fce6 	bl	800ce18 <xTaskResumeAll>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f47f af65 	bne.w	800c31e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c454:	4b18      	ldr	r3, [pc, #96]	@ (800c4b8 <xQueueSemaphoreTake+0x22c>)
 800c456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	f3bf 8f6f 	isb	sy
 800c464:	e75b      	b.n	800c31e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c468:	f000 f9c0 	bl	800c7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c46c:	f000 fcd4 	bl	800ce18 <xTaskResumeAll>
 800c470:	e755      	b.n	800c31e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c474:	f000 f9ba 	bl	800c7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c478:	f000 fcce 	bl	800ce18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c47c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c47e:	f000 fa07 	bl	800c890 <prvIsQueueEmpty>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	f43f af4a 	beq.w	800c31e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00d      	beq.n	800c4ac <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c490:	f001 fbec 	bl	800dc6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c496:	f000 f901 	bl	800c69c <prvGetDisinheritPriorityAfterTimeout>
 800c49a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f001 f9bc 	bl	800d820 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4a8:	f001 fc16 	bl	800dcd8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3738      	adds	r7, #56	@ 0x38
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	e000ed04 	.word	0xe000ed04

0800c4bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08e      	sub	sp, #56	@ 0x38
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10d      	bne.n	800c4ee <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d6:	b672      	cpsid	i
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	b662      	cpsie	i
 800c4e6:	623b      	str	r3, [r7, #32]
}
 800c4e8:	bf00      	nop
 800c4ea:	bf00      	nop
 800c4ec:	e7fd      	b.n	800c4ea <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d103      	bne.n	800c4fc <xQueueReceiveFromISR+0x40>
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <xQueueReceiveFromISR+0x44>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e000      	b.n	800c502 <xQueueReceiveFromISR+0x46>
 800c500:	2300      	movs	r3, #0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10d      	bne.n	800c522 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50a:	b672      	cpsid	i
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	b662      	cpsie	i
 800c51a:	61fb      	str	r3, [r7, #28]
}
 800c51c:	bf00      	nop
 800c51e:	bf00      	nop
 800c520:	e7fd      	b.n	800c51e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c522:	f001 fc8b 	bl	800de3c <vPortValidateInterruptPriority>
	__asm volatile
 800c526:	f3ef 8211 	mrs	r2, BASEPRI
 800c52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52e:	b672      	cpsid	i
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	b662      	cpsie	i
 800c53e:	61ba      	str	r2, [r7, #24]
 800c540:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c542:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c544:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c54a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d02f      	beq.n	800c5b2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c55c:	68b9      	ldr	r1, [r7, #8]
 800c55e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c560:	f000 f91e 	bl	800c7a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	1e5a      	subs	r2, r3, #1
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c56c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c574:	d112      	bne.n	800c59c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	691b      	ldr	r3, [r3, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d016      	beq.n	800c5ac <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	3310      	adds	r3, #16
 800c582:	4618      	mov	r0, r3
 800c584:	f000 fe54 	bl	800d230 <xTaskRemoveFromEventList>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00e      	beq.n	800c5ac <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	601a      	str	r2, [r3, #0]
 800c59a:	e007      	b.n	800c5ac <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	b25a      	sxtb	r2, r3
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b0:	e001      	b.n	800c5b6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	f383 8811 	msr	BASEPRI, r3
}
 800c5c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3738      	adds	r7, #56	@ 0x38
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10d      	bne.n	800c5f6 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	b672      	cpsid	i
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	b662      	cpsie	i
 800c5ee:	60bb      	str	r3, [r7, #8]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800c5f6:	f001 fb39 	bl	800dc6c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5fe:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c600:	f001 fb6a 	bl	800dcd8 <vPortExitCritical>

	return uxReturn;
 800c604:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c60e:	b480      	push	{r7}
 800c610:	b087      	sub	sp, #28
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10d      	bne.n	800c63c <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c624:	b672      	cpsid	i
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	b662      	cpsie	i
 800c634:	60fb      	str	r3, [r7, #12]
}
 800c636:	bf00      	nop
 800c638:	bf00      	nop
 800c63a:	e7fd      	b.n	800c638 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c640:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800c642:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c644:	4618      	mov	r0, r3
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d10d      	bne.n	800c67e <vQueueDelete+0x2e>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c666:	b672      	cpsid	i
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	b662      	cpsie	i
 800c676:	60bb      	str	r3, [r7, #8]
}
 800c678:	bf00      	nop
 800c67a:	bf00      	nop
 800c67c:	e7fd      	b.n	800c67a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f000 f934 	bl	800c8ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f001 fce8 	bl	800e064 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f1c3 0307 	rsb	r3, r3, #7
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	e001      	b.n	800c6be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6be:	68fb      	ldr	r3, [r7, #12]
	}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3714      	adds	r7, #20
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10d      	bne.n	800c706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d14d      	bne.n	800c78e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f001 f806 	bl	800d708 <xTaskPriorityDisinherit>
 800c6fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	609a      	str	r2, [r3, #8]
 800c704:	e043      	b.n	800c78e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d119      	bne.n	800c740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6858      	ldr	r0, [r3, #4]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c714:	461a      	mov	r2, r3
 800c716:	68b9      	ldr	r1, [r7, #8]
 800c718:	f010 fcc7 	bl	801d0aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c724:	441a      	add	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	685a      	ldr	r2, [r3, #4]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	429a      	cmp	r2, r3
 800c734:	d32b      	bcc.n	800c78e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	605a      	str	r2, [r3, #4]
 800c73e:	e026      	b.n	800c78e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	68d8      	ldr	r0, [r3, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c748:	461a      	mov	r2, r3
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	f010 fcad 	bl	801d0aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	68da      	ldr	r2, [r3, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c758:	425b      	negs	r3, r3
 800c75a:	441a      	add	r2, r3
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	68da      	ldr	r2, [r3, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d207      	bcs.n	800c77c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c774:	425b      	negs	r3, r3
 800c776:	441a      	add	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d105      	bne.n	800c78e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c796:	697b      	ldr	r3, [r7, #20]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d018      	beq.n	800c7e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68da      	ldr	r2, [r3, #12]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ba:	441a      	add	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68da      	ldr	r2, [r3, #12]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d303      	bcc.n	800c7d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	68d9      	ldr	r1, [r3, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7dc:	461a      	mov	r2, r3
 800c7de:	6838      	ldr	r0, [r7, #0]
 800c7e0:	f010 fc63 	bl	801d0aa <memcpy>
	}
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7f4:	f001 fa3a 	bl	800dc6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c800:	e011      	b.n	800c826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	d012      	beq.n	800c830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3324      	adds	r3, #36	@ 0x24
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fd0e 	bl	800d230 <xTaskRemoveFromEventList>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c81a:	f000 fded 	bl	800d3f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
 800c820:	3b01      	subs	r3, #1
 800c822:	b2db      	uxtb	r3, r3
 800c824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dce9      	bgt.n	800c802 <prvUnlockQueue+0x16>
 800c82e:	e000      	b.n	800c832 <prvUnlockQueue+0x46>
					break;
 800c830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	22ff      	movs	r2, #255	@ 0xff
 800c836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c83a:	f001 fa4d 	bl	800dcd8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c83e:	f001 fa15 	bl	800dc6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c84a:	e011      	b.n	800c870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d012      	beq.n	800c87a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	3310      	adds	r3, #16
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fce9 	bl	800d230 <xTaskRemoveFromEventList>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c864:	f000 fdc8 	bl	800d3f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	3b01      	subs	r3, #1
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c874:	2b00      	cmp	r3, #0
 800c876:	dce9      	bgt.n	800c84c <prvUnlockQueue+0x60>
 800c878:	e000      	b.n	800c87c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c87a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	22ff      	movs	r2, #255	@ 0xff
 800c880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c884:	f001 fa28 	bl	800dcd8 <vPortExitCritical>
}
 800c888:	bf00      	nop
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c898:	f001 f9e8 	bl	800dc6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d102      	bne.n	800c8aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	e001      	b.n	800c8ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8ae:	f001 fa13 	bl	800dcd8 <vPortExitCritical>

	return xReturn;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8c4:	f001 f9d2 	bl	800dc6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d102      	bne.n	800c8da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	60fb      	str	r3, [r7, #12]
 800c8d8:	e001      	b.n	800c8de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8de:	f001 f9fb 	bl	800dcd8 <vPortExitCritical>

	return xReturn;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3710      	adds	r7, #16
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b085      	sub	sp, #20
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60fb      	str	r3, [r7, #12]
 800c8f8:	e016      	b.n	800c928 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8fa:	4a10      	ldr	r2, [pc, #64]	@ (800c93c <vQueueUnregisterQueue+0x50>)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	4413      	add	r3, r2
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	429a      	cmp	r2, r3
 800c908:	d10b      	bne.n	800c922 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c90a:	4a0c      	ldr	r2, [pc, #48]	@ (800c93c <vQueueUnregisterQueue+0x50>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2100      	movs	r1, #0
 800c910:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c914:	4a09      	ldr	r2, [pc, #36]	@ (800c93c <vQueueUnregisterQueue+0x50>)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	4413      	add	r3, r2
 800c91c:	2200      	movs	r2, #0
 800c91e:	605a      	str	r2, [r3, #4]
				break;
 800c920:	e006      	b.n	800c930 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b07      	cmp	r3, #7
 800c92c:	d9e5      	bls.n	800c8fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c92e:	bf00      	nop
 800c930:	bf00      	nop
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	20005230 	.word	0x20005230

0800c940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c940:	b580      	push	{r7, lr}
 800c942:	b08e      	sub	sp, #56	@ 0x38
 800c944:	af04      	add	r7, sp, #16
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10d      	bne.n	800c970 <xTaskCreateStatic+0x30>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c958:	b672      	cpsid	i
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	b662      	cpsie	i
 800c968:	623b      	str	r3, [r7, #32]
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	e7fd      	b.n	800c96c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10d      	bne.n	800c992 <xTaskCreateStatic+0x52>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	b672      	cpsid	i
 800c97c:	f383 8811 	msr	BASEPRI, r3
 800c980:	f3bf 8f6f 	isb	sy
 800c984:	f3bf 8f4f 	dsb	sy
 800c988:	b662      	cpsie	i
 800c98a:	61fb      	str	r3, [r7, #28]
}
 800c98c:	bf00      	nop
 800c98e:	bf00      	nop
 800c990:	e7fd      	b.n	800c98e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c992:	23a0      	movs	r3, #160	@ 0xa0
 800c994:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2ba0      	cmp	r3, #160	@ 0xa0
 800c99a:	d00d      	beq.n	800c9b8 <xTaskCreateStatic+0x78>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a0:	b672      	cpsid	i
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	b662      	cpsie	i
 800c9b0:	61bb      	str	r3, [r7, #24]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01e      	beq.n	800c9fe <xTaskCreateStatic+0xbe>
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d01b      	beq.n	800c9fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c9ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	f107 0314 	add.w	r3, r7, #20
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 f851 	bl	800ca98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9f8:	f000 f8f0 	bl	800cbdc <prvAddNewTaskToReadyList>
 800c9fc:	e001      	b.n	800ca02 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca02:	697b      	ldr	r3, [r7, #20]
	}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3728      	adds	r7, #40	@ 0x28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08c      	sub	sp, #48	@ 0x30
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 fa51 	bl	800dec8 <pvPortMalloc>
 800ca26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00e      	beq.n	800ca4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca2e:	20a0      	movs	r0, #160	@ 0xa0
 800ca30:	f001 fa4a 	bl	800dec8 <pvPortMalloc>
 800ca34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca42:	e005      	b.n	800ca50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	f001 fb0d 	bl	800e064 <vPortFree>
 800ca4a:	e001      	b.n	800ca50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d017      	beq.n	800ca86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	2300      	movs	r3, #0
 800ca62:	9303      	str	r3, [sp, #12]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	9302      	str	r3, [sp, #8]
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 f80f 	bl	800ca98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca7a:	69f8      	ldr	r0, [r7, #28]
 800ca7c:	f000 f8ae 	bl	800cbdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca80:	2301      	movs	r3, #1
 800ca82:	61bb      	str	r3, [r7, #24]
 800ca84:	e002      	b.n	800ca8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca86:	f04f 33ff 	mov.w	r3, #4294967295
 800ca8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
	}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
	...

0800ca98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b088      	sub	sp, #32
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cab0:	440b      	add	r3, r1
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	f023 0307 	bic.w	r3, r3, #7
 800cabe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00d      	beq.n	800cae6 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	617b      	str	r3, [r7, #20]
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	e7fd      	b.n	800cae2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01f      	beq.n	800cb2c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800caec:	2300      	movs	r3, #0
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	e012      	b.n	800cb18 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	4413      	add	r3, r2
 800caf8:	7819      	ldrb	r1, [r3, #0]
 800cafa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	4413      	add	r3, r2
 800cb00:	3334      	adds	r3, #52	@ 0x34
 800cb02:	460a      	mov	r2, r1
 800cb04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d006      	beq.n	800cb20 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	3301      	adds	r3, #1
 800cb16:	61fb      	str	r3, [r7, #28]
 800cb18:	69fb      	ldr	r3, [r7, #28]
 800cb1a:	2b0f      	cmp	r3, #15
 800cb1c:	d9e9      	bls.n	800caf2 <prvInitialiseNewTask+0x5a>
 800cb1e:	e000      	b.n	800cb22 <prvInitialiseNewTask+0x8a>
			{
				break;
 800cb20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb2a:	e003      	b.n	800cb34 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d901      	bls.n	800cb3e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb3a:	2306      	movs	r3, #6
 800cb3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb48:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	3304      	adds	r3, #4
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fe34 	bl	800b7c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	3318      	adds	r3, #24
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fe2f 	bl	800b7c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	f1c3 0207 	rsb	r2, r3, #7
 800cb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	334c      	adds	r3, #76	@ 0x4c
 800cb8e:	224c      	movs	r2, #76	@ 0x4c
 800cb90:	2100      	movs	r1, #0
 800cb92:	4618      	mov	r0, r3
 800cb94:	f010 f99f 	bl	801ced6 <memset>
 800cb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9a:	4a0d      	ldr	r2, [pc, #52]	@ (800cbd0 <prvInitialiseNewTask+0x138>)
 800cb9c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba0:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd4 <prvInitialiseNewTask+0x13c>)
 800cba2:	655a      	str	r2, [r3, #84]	@ 0x54
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd8 <prvInitialiseNewTask+0x140>)
 800cba8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	68f9      	ldr	r1, [r7, #12]
 800cbae:	69b8      	ldr	r0, [r7, #24]
 800cbb0:	f000 ff50 	bl	800da54 <pxPortInitialiseStack>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d002      	beq.n	800cbc6 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc6:	bf00      	nop
 800cbc8:	3720      	adds	r7, #32
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	2000f3d0 	.word	0x2000f3d0
 800cbd4:	2000f438 	.word	0x2000f438
 800cbd8:	2000f4a0 	.word	0x2000f4a0

0800cbdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbe4:	f001 f842 	bl	800dc6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbe8:	4b2a      	ldr	r3, [pc, #168]	@ (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3301      	adds	r3, #1
 800cbee:	4a29      	ldr	r2, [pc, #164]	@ (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cbf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbf2:	4b29      	ldr	r3, [pc, #164]	@ (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d109      	bne.n	800cc0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbfa:	4a27      	ldr	r2, [pc, #156]	@ (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc00:	4b24      	ldr	r3, [pc, #144]	@ (800cc94 <prvAddNewTaskToReadyList+0xb8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d110      	bne.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc08:	f000 fc1a 	bl	800d440 <prvInitialiseTaskLists>
 800cc0c:	e00d      	b.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc0e:	4b23      	ldr	r3, [pc, #140]	@ (800cc9c <prvAddNewTaskToReadyList+0xc0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d109      	bne.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc16:	4b20      	ldr	r3, [pc, #128]	@ (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d802      	bhi.n	800cc2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc24:	4a1c      	ldr	r2, [pc, #112]	@ (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800cca0 <prvAddNewTaskToReadyList+0xc4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	4a1b      	ldr	r2, [pc, #108]	@ (800cca0 <prvAddNewTaskToReadyList+0xc4>)
 800cc32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc38:	2201      	movs	r2, #1
 800cc3a:	409a      	lsls	r2, r3
 800cc3c:	4b19      	ldr	r3, [pc, #100]	@ (800cca4 <prvAddNewTaskToReadyList+0xc8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4313      	orrs	r3, r2
 800cc42:	4a18      	ldr	r2, [pc, #96]	@ (800cca4 <prvAddNewTaskToReadyList+0xc8>)
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4a15      	ldr	r2, [pc, #84]	@ (800cca8 <prvAddNewTaskToReadyList+0xcc>)
 800cc54:	441a      	add	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	f7fe fdbd 	bl	800b7dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc62:	f001 f839 	bl	800dcd8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <prvAddNewTaskToReadyList+0xc0>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00e      	beq.n	800cc8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc6e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc98 <prvAddNewTaskToReadyList+0xbc>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d207      	bcs.n	800cc8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800ccac <prvAddNewTaskToReadyList+0xd0>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc8c:	bf00      	nop
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	20005370 	.word	0x20005370
 800cc98:	20005270 	.word	0x20005270
 800cc9c:	2000537c 	.word	0x2000537c
 800cca0:	2000538c 	.word	0x2000538c
 800cca4:	20005378 	.word	0x20005378
 800cca8:	20005274 	.word	0x20005274
 800ccac:	e000ed04 	.word	0xe000ed04

0800ccb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d01a      	beq.n	800ccf8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccc2:	4b15      	ldr	r3, [pc, #84]	@ (800cd18 <vTaskDelay+0x68>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00d      	beq.n	800cce6 <vTaskDelay+0x36>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccce:	b672      	cpsid	i
 800ccd0:	f383 8811 	msr	BASEPRI, r3
 800ccd4:	f3bf 8f6f 	isb	sy
 800ccd8:	f3bf 8f4f 	dsb	sy
 800ccdc:	b662      	cpsie	i
 800ccde:	60bb      	str	r3, [r7, #8]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cce6:	f000 f889 	bl	800cdfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ccea:	2100      	movs	r1, #0
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fe4b 	bl	800d988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ccf2:	f000 f891 	bl	800ce18 <xTaskResumeAll>
 800ccf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d107      	bne.n	800cd0e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800ccfe:	4b07      	ldr	r3, [pc, #28]	@ (800cd1c <vTaskDelay+0x6c>)
 800cd00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd04:	601a      	str	r2, [r3, #0]
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd0e:	bf00      	nop
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20005398 	.word	0x20005398
 800cd1c:	e000ed04 	.word	0xe000ed04

0800cd20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08a      	sub	sp, #40	@ 0x28
 800cd24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd2e:	463a      	mov	r2, r7
 800cd30:	1d39      	adds	r1, r7, #4
 800cd32:	f107 0308 	add.w	r3, r7, #8
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7f5 fa08 	bl	800214c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	9202      	str	r2, [sp, #8]
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	2300      	movs	r3, #0
 800cd48:	9300      	str	r3, [sp, #0]
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	460a      	mov	r2, r1
 800cd4e:	4923      	ldr	r1, [pc, #140]	@ (800cddc <vTaskStartScheduler+0xbc>)
 800cd50:	4823      	ldr	r0, [pc, #140]	@ (800cde0 <vTaskStartScheduler+0xc0>)
 800cd52:	f7ff fdf5 	bl	800c940 <xTaskCreateStatic>
 800cd56:	4603      	mov	r3, r0
 800cd58:	4a22      	ldr	r2, [pc, #136]	@ (800cde4 <vTaskStartScheduler+0xc4>)
 800cd5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd5c:	4b21      	ldr	r3, [pc, #132]	@ (800cde4 <vTaskStartScheduler+0xc4>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd64:	2301      	movs	r3, #1
 800cd66:	617b      	str	r3, [r7, #20]
 800cd68:	e001      	b.n	800cd6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d11d      	bne.n	800cdb0 <vTaskStartScheduler+0x90>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd78:	b672      	cpsid	i
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	b662      	cpsie	i
 800cd88:	613b      	str	r3, [r7, #16]
}
 800cd8a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd8c:	4b16      	ldr	r3, [pc, #88]	@ (800cde8 <vTaskStartScheduler+0xc8>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	334c      	adds	r3, #76	@ 0x4c
 800cd92:	4a16      	ldr	r2, [pc, #88]	@ (800cdec <vTaskStartScheduler+0xcc>)
 800cd94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd96:	4b16      	ldr	r3, [pc, #88]	@ (800cdf0 <vTaskStartScheduler+0xd0>)
 800cd98:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd9e:	4b15      	ldr	r3, [pc, #84]	@ (800cdf4 <vTaskStartScheduler+0xd4>)
 800cda0:	2201      	movs	r2, #1
 800cda2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cda4:	4b14      	ldr	r3, [pc, #80]	@ (800cdf8 <vTaskStartScheduler+0xd8>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdaa:	f000 fee1 	bl	800db70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdae:	e011      	b.n	800cdd4 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb6:	d10d      	bne.n	800cdd4 <vTaskStartScheduler+0xb4>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbc:	b672      	cpsid	i
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	b662      	cpsie	i
 800cdcc:	60fb      	str	r3, [r7, #12]
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <vTaskStartScheduler+0xb0>
}
 800cdd4:	bf00      	nop
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	0801e288 	.word	0x0801e288
 800cde0:	0800d411 	.word	0x0800d411
 800cde4:	20005394 	.word	0x20005394
 800cde8:	20005270 	.word	0x20005270
 800cdec:	20000090 	.word	0x20000090
 800cdf0:	20005390 	.word	0x20005390
 800cdf4:	2000537c 	.word	0x2000537c
 800cdf8:	20005374 	.word	0x20005374

0800cdfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce00:	4b04      	ldr	r3, [pc, #16]	@ (800ce14 <vTaskSuspendAll+0x18>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	3301      	adds	r3, #1
 800ce06:	4a03      	ldr	r2, [pc, #12]	@ (800ce14 <vTaskSuspendAll+0x18>)
 800ce08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ce0a:	bf00      	nop
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	20005398 	.word	0x20005398

0800ce18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce26:	4b43      	ldr	r3, [pc, #268]	@ (800cf34 <xTaskResumeAll+0x11c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10d      	bne.n	800ce4a <xTaskResumeAll+0x32>
	__asm volatile
 800ce2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce32:	b672      	cpsid	i
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	b662      	cpsie	i
 800ce42:	603b      	str	r3, [r7, #0]
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	e7fd      	b.n	800ce46 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce4a:	f000 ff0f 	bl	800dc6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce4e:	4b39      	ldr	r3, [pc, #228]	@ (800cf34 <xTaskResumeAll+0x11c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	4a37      	ldr	r2, [pc, #220]	@ (800cf34 <xTaskResumeAll+0x11c>)
 800ce56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce58:	4b36      	ldr	r3, [pc, #216]	@ (800cf34 <xTaskResumeAll+0x11c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d161      	bne.n	800cf24 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce60:	4b35      	ldr	r3, [pc, #212]	@ (800cf38 <xTaskResumeAll+0x120>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d05d      	beq.n	800cf24 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce68:	e02e      	b.n	800cec8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6a:	4b34      	ldr	r3, [pc, #208]	@ (800cf3c <xTaskResumeAll+0x124>)
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3318      	adds	r3, #24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe fd0d 	bl	800b896 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe fd08 	bl	800b896 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	409a      	lsls	r2, r3
 800ce8e:	4b2c      	ldr	r3, [pc, #176]	@ (800cf40 <xTaskResumeAll+0x128>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	4a2a      	ldr	r2, [pc, #168]	@ (800cf40 <xTaskResumeAll+0x128>)
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4a27      	ldr	r2, [pc, #156]	@ (800cf44 <xTaskResumeAll+0x12c>)
 800cea6:	441a      	add	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	4619      	mov	r1, r3
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f7fe fc94 	bl	800b7dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceb8:	4b23      	ldr	r3, [pc, #140]	@ (800cf48 <xTaskResumeAll+0x130>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d302      	bcc.n	800cec8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800cec2:	4b22      	ldr	r3, [pc, #136]	@ (800cf4c <xTaskResumeAll+0x134>)
 800cec4:	2201      	movs	r2, #1
 800cec6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cec8:	4b1c      	ldr	r3, [pc, #112]	@ (800cf3c <xTaskResumeAll+0x124>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1cc      	bne.n	800ce6a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ced6:	f000 fb59 	bl	800d58c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ceda:	4b1d      	ldr	r3, [pc, #116]	@ (800cf50 <xTaskResumeAll+0x138>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d010      	beq.n	800cf08 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cee6:	f000 f859 	bl	800cf9c <xTaskIncrementTick>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cef0:	4b16      	ldr	r3, [pc, #88]	@ (800cf4c <xTaskResumeAll+0x134>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1f1      	bne.n	800cee6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cf02:	4b13      	ldr	r3, [pc, #76]	@ (800cf50 <xTaskResumeAll+0x138>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf08:	4b10      	ldr	r3, [pc, #64]	@ (800cf4c <xTaskResumeAll+0x134>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d009      	beq.n	800cf24 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf10:	2301      	movs	r3, #1
 800cf12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf14:	4b0f      	ldr	r3, [pc, #60]	@ (800cf54 <xTaskResumeAll+0x13c>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf24:	f000 fed8 	bl	800dcd8 <vPortExitCritical>

	return xAlreadyYielded;
 800cf28:	68bb      	ldr	r3, [r7, #8]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20005398 	.word	0x20005398
 800cf38:	20005370 	.word	0x20005370
 800cf3c:	20005330 	.word	0x20005330
 800cf40:	20005378 	.word	0x20005378
 800cf44:	20005274 	.word	0x20005274
 800cf48:	20005270 	.word	0x20005270
 800cf4c:	20005384 	.word	0x20005384
 800cf50:	20005380 	.word	0x20005380
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf5e:	4b05      	ldr	r3, [pc, #20]	@ (800cf74 <xTaskGetTickCount+0x1c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf64:	687b      	ldr	r3, [r7, #4]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	20005374 	.word	0x20005374

0800cf78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf7e:	f000 ff5d 	bl	800de3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cf82:	2300      	movs	r3, #0
 800cf84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cf86:	4b04      	ldr	r3, [pc, #16]	@ (800cf98 <xTaskGetTickCountFromISR+0x20>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf8c:	683b      	ldr	r3, [r7, #0]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20005374 	.word	0x20005374

0800cf9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b086      	sub	sp, #24
 800cfa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa6:	4b50      	ldr	r3, [pc, #320]	@ (800d0e8 <xTaskIncrementTick+0x14c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f040 808b 	bne.w	800d0c6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfb0:	4b4e      	ldr	r3, [pc, #312]	@ (800d0ec <xTaskIncrementTick+0x150>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfb8:	4a4c      	ldr	r2, [pc, #304]	@ (800d0ec <xTaskIncrementTick+0x150>)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d123      	bne.n	800d00c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfc4:	4b4a      	ldr	r3, [pc, #296]	@ (800d0f0 <xTaskIncrementTick+0x154>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00d      	beq.n	800cfea <xTaskIncrementTick+0x4e>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	b672      	cpsid	i
 800cfd4:	f383 8811 	msr	BASEPRI, r3
 800cfd8:	f3bf 8f6f 	isb	sy
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	b662      	cpsie	i
 800cfe2:	603b      	str	r3, [r7, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	bf00      	nop
 800cfe8:	e7fd      	b.n	800cfe6 <xTaskIncrementTick+0x4a>
 800cfea:	4b41      	ldr	r3, [pc, #260]	@ (800d0f0 <xTaskIncrementTick+0x154>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]
 800cff0:	4b40      	ldr	r3, [pc, #256]	@ (800d0f4 <xTaskIncrementTick+0x158>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0f0 <xTaskIncrementTick+0x154>)
 800cff6:	6013      	str	r3, [r2, #0]
 800cff8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0f4 <xTaskIncrementTick+0x158>)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	4b3e      	ldr	r3, [pc, #248]	@ (800d0f8 <xTaskIncrementTick+0x15c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	3301      	adds	r3, #1
 800d004:	4a3c      	ldr	r2, [pc, #240]	@ (800d0f8 <xTaskIncrementTick+0x15c>)
 800d006:	6013      	str	r3, [r2, #0]
 800d008:	f000 fac0 	bl	800d58c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d00c:	4b3b      	ldr	r3, [pc, #236]	@ (800d0fc <xTaskIncrementTick+0x160>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	429a      	cmp	r2, r3
 800d014:	d348      	bcc.n	800d0a8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d016:	4b36      	ldr	r3, [pc, #216]	@ (800d0f0 <xTaskIncrementTick+0x154>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d104      	bne.n	800d02a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d020:	4b36      	ldr	r3, [pc, #216]	@ (800d0fc <xTaskIncrementTick+0x160>)
 800d022:	f04f 32ff 	mov.w	r2, #4294967295
 800d026:	601a      	str	r2, [r3, #0]
					break;
 800d028:	e03e      	b.n	800d0a8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d02a:	4b31      	ldr	r3, [pc, #196]	@ (800d0f0 <xTaskIncrementTick+0x154>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d03a:	693a      	ldr	r2, [r7, #16]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d203      	bcs.n	800d04a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d042:	4a2e      	ldr	r2, [pc, #184]	@ (800d0fc <xTaskIncrementTick+0x160>)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d048:	e02e      	b.n	800d0a8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3304      	adds	r3, #4
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fe fc21 	bl	800b896 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d004      	beq.n	800d066 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3318      	adds	r3, #24
 800d060:	4618      	mov	r0, r3
 800d062:	f7fe fc18 	bl	800b896 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d06a:	2201      	movs	r2, #1
 800d06c:	409a      	lsls	r2, r3
 800d06e:	4b24      	ldr	r3, [pc, #144]	@ (800d100 <xTaskIncrementTick+0x164>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4313      	orrs	r3, r2
 800d074:	4a22      	ldr	r2, [pc, #136]	@ (800d100 <xTaskIncrementTick+0x164>)
 800d076:	6013      	str	r3, [r2, #0]
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07c:	4613      	mov	r3, r2
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	4413      	add	r3, r2
 800d082:	009b      	lsls	r3, r3, #2
 800d084:	4a1f      	ldr	r2, [pc, #124]	@ (800d104 <xTaskIncrementTick+0x168>)
 800d086:	441a      	add	r2, r3
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	3304      	adds	r3, #4
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7fe fba4 	bl	800b7dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d098:	4b1b      	ldr	r3, [pc, #108]	@ (800d108 <xTaskIncrementTick+0x16c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d3b9      	bcc.n	800d016 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0a6:	e7b6      	b.n	800d016 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d0a8:	4b17      	ldr	r3, [pc, #92]	@ (800d108 <xTaskIncrementTick+0x16c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ae:	4915      	ldr	r1, [pc, #84]	@ (800d104 <xTaskIncrementTick+0x168>)
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	440b      	add	r3, r1
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d907      	bls.n	800d0d0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	617b      	str	r3, [r7, #20]
 800d0c4:	e004      	b.n	800d0d0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0c6:	4b11      	ldr	r3, [pc, #68]	@ (800d10c <xTaskIncrementTick+0x170>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	4a0f      	ldr	r2, [pc, #60]	@ (800d10c <xTaskIncrementTick+0x170>)
 800d0ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d110 <xTaskIncrementTick+0x174>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0dc:	697b      	ldr	r3, [r7, #20]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3718      	adds	r7, #24
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20005398 	.word	0x20005398
 800d0ec:	20005374 	.word	0x20005374
 800d0f0:	20005328 	.word	0x20005328
 800d0f4:	2000532c 	.word	0x2000532c
 800d0f8:	20005388 	.word	0x20005388
 800d0fc:	20005390 	.word	0x20005390
 800d100:	20005378 	.word	0x20005378
 800d104:	20005274 	.word	0x20005274
 800d108:	20005270 	.word	0x20005270
 800d10c:	20005380 	.word	0x20005380
 800d110:	20005384 	.word	0x20005384

0800d114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b087      	sub	sp, #28
 800d118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d11a:	4b2b      	ldr	r3, [pc, #172]	@ (800d1c8 <vTaskSwitchContext+0xb4>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d122:	4b2a      	ldr	r3, [pc, #168]	@ (800d1cc <vTaskSwitchContext+0xb8>)
 800d124:	2201      	movs	r2, #1
 800d126:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d128:	e047      	b.n	800d1ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d12a:	4b28      	ldr	r3, [pc, #160]	@ (800d1cc <vTaskSwitchContext+0xb8>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d130:	4b27      	ldr	r3, [pc, #156]	@ (800d1d0 <vTaskSwitchContext+0xbc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	fab3 f383 	clz	r3, r3
 800d13c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d13e:	7afb      	ldrb	r3, [r7, #11]
 800d140:	f1c3 031f 	rsb	r3, r3, #31
 800d144:	617b      	str	r3, [r7, #20]
 800d146:	4923      	ldr	r1, [pc, #140]	@ (800d1d4 <vTaskSwitchContext+0xc0>)
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	4613      	mov	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4413      	add	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	440b      	add	r3, r1
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10d      	bne.n	800d176 <vTaskSwitchContext+0x62>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15e:	b672      	cpsid	i
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	b662      	cpsie	i
 800d16e:	607b      	str	r3, [r7, #4]
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	e7fd      	b.n	800d172 <vTaskSwitchContext+0x5e>
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4a14      	ldr	r2, [pc, #80]	@ (800d1d4 <vTaskSwitchContext+0xc0>)
 800d182:	4413      	add	r3, r2
 800d184:	613b      	str	r3, [r7, #16]
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	605a      	str	r2, [r3, #4]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	3308      	adds	r3, #8
 800d198:	429a      	cmp	r2, r3
 800d19a:	d104      	bne.n	800d1a6 <vTaskSwitchContext+0x92>
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	605a      	str	r2, [r3, #4]
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d1d8 <vTaskSwitchContext+0xc4>)
 800d1ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d1b0:	4b09      	ldr	r3, [pc, #36]	@ (800d1d8 <vTaskSwitchContext+0xc4>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	334c      	adds	r3, #76	@ 0x4c
 800d1b6:	4a09      	ldr	r2, [pc, #36]	@ (800d1dc <vTaskSwitchContext+0xc8>)
 800d1b8:	6013      	str	r3, [r2, #0]
}
 800d1ba:	bf00      	nop
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	20005398 	.word	0x20005398
 800d1cc:	20005384 	.word	0x20005384
 800d1d0:	20005378 	.word	0x20005378
 800d1d4:	20005274 	.word	0x20005274
 800d1d8:	20005270 	.word	0x20005270
 800d1dc:	20000090 	.word	0x20000090

0800d1e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10d      	bne.n	800d20c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f4:	b672      	cpsid	i
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	b662      	cpsie	i
 800d204:	60fb      	str	r3, [r7, #12]
}
 800d206:	bf00      	nop
 800d208:	bf00      	nop
 800d20a:	e7fd      	b.n	800d208 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d20c:	4b07      	ldr	r3, [pc, #28]	@ (800d22c <vTaskPlaceOnEventList+0x4c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3318      	adds	r3, #24
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7fe fb05 	bl	800b824 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d21a:	2101      	movs	r1, #1
 800d21c:	6838      	ldr	r0, [r7, #0]
 800d21e:	f000 fbb3 	bl	800d988 <prvAddCurrentTaskToDelayedList>
}
 800d222:	bf00      	nop
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20005270 	.word	0x20005270

0800d230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10d      	bne.n	800d262 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24a:	b672      	cpsid	i
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	b662      	cpsie	i
 800d25a:	60fb      	str	r3, [r7, #12]
}
 800d25c:	bf00      	nop
 800d25e:	bf00      	nop
 800d260:	e7fd      	b.n	800d25e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	3318      	adds	r3, #24
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe fb15 	bl	800b896 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d26c:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e4 <xTaskRemoveFromEventList+0xb4>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d11c      	bne.n	800d2ae <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	3304      	adds	r3, #4
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fe fb0c 	bl	800b896 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d282:	2201      	movs	r2, #1
 800d284:	409a      	lsls	r2, r3
 800d286:	4b18      	ldr	r3, [pc, #96]	@ (800d2e8 <xTaskRemoveFromEventList+0xb8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	4a16      	ldr	r2, [pc, #88]	@ (800d2e8 <xTaskRemoveFromEventList+0xb8>)
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4a13      	ldr	r2, [pc, #76]	@ (800d2ec <xTaskRemoveFromEventList+0xbc>)
 800d29e:	441a      	add	r2, r3
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	3304      	adds	r3, #4
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	f7fe fa98 	bl	800b7dc <vListInsertEnd>
 800d2ac:	e005      	b.n	800d2ba <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	3318      	adds	r3, #24
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	480e      	ldr	r0, [pc, #56]	@ (800d2f0 <xTaskRemoveFromEventList+0xc0>)
 800d2b6:	f7fe fa91 	bl	800b7dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2be:	4b0d      	ldr	r3, [pc, #52]	@ (800d2f4 <xTaskRemoveFromEventList+0xc4>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d905      	bls.n	800d2d4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f8 <xTaskRemoveFromEventList+0xc8>)
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	e001      	b.n	800d2d8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2d8:	697b      	ldr	r3, [r7, #20]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20005398 	.word	0x20005398
 800d2e8:	20005378 	.word	0x20005378
 800d2ec:	20005274 	.word	0x20005274
 800d2f0:	20005330 	.word	0x20005330
 800d2f4:	20005270 	.word	0x20005270
 800d2f8:	20005384 	.word	0x20005384

0800d2fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d304:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <vTaskInternalSetTimeOutState+0x24>)
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d30c:	4b05      	ldr	r3, [pc, #20]	@ (800d324 <vTaskInternalSetTimeOutState+0x28>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	605a      	str	r2, [r3, #4]
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20005388 	.word	0x20005388
 800d324:	20005374 	.word	0x20005374

0800d328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10d      	bne.n	800d354 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33c:	b672      	cpsid	i
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	b662      	cpsie	i
 800d34c:	613b      	str	r3, [r7, #16]
}
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
 800d352:	e7fd      	b.n	800d350 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10d      	bne.n	800d376 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d35e:	b672      	cpsid	i
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	b662      	cpsie	i
 800d36e:	60fb      	str	r3, [r7, #12]
}
 800d370:	bf00      	nop
 800d372:	bf00      	nop
 800d374:	e7fd      	b.n	800d372 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d376:	f000 fc79 	bl	800dc6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d37a:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f0 <xTaskCheckForTimeOut+0xc8>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d392:	d102      	bne.n	800d39a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e023      	b.n	800d3e2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4b15      	ldr	r3, [pc, #84]	@ (800d3f4 <xTaskCheckForTimeOut+0xcc>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d007      	beq.n	800d3b6 <xTaskCheckForTimeOut+0x8e>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d302      	bcc.n	800d3b6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	e015      	b.n	800d3e2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d20b      	bcs.n	800d3d8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	1ad2      	subs	r2, r2, r3
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ff95 	bl	800d2fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61fb      	str	r3, [r7, #28]
 800d3d6:	e004      	b.n	800d3e2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3e2:	f000 fc79 	bl	800dcd8 <vPortExitCritical>

	return xReturn;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3720      	adds	r7, #32
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20005374 	.word	0x20005374
 800d3f4:	20005388 	.word	0x20005388

0800d3f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3fc:	4b03      	ldr	r3, [pc, #12]	@ (800d40c <vTaskMissedYield+0x14>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	601a      	str	r2, [r3, #0]
}
 800d402:	bf00      	nop
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	20005384 	.word	0x20005384

0800d410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d418:	f000 f852 	bl	800d4c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d41c:	4b06      	ldr	r3, [pc, #24]	@ (800d438 <prvIdleTask+0x28>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d9f9      	bls.n	800d418 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d424:	4b05      	ldr	r3, [pc, #20]	@ (800d43c <prvIdleTask+0x2c>)
 800d426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d434:	e7f0      	b.n	800d418 <prvIdleTask+0x8>
 800d436:	bf00      	nop
 800d438:	20005274 	.word	0x20005274
 800d43c:	e000ed04 	.word	0xe000ed04

0800d440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d446:	2300      	movs	r3, #0
 800d448:	607b      	str	r3, [r7, #4]
 800d44a:	e00c      	b.n	800d466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	4613      	mov	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	4413      	add	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4a12      	ldr	r2, [pc, #72]	@ (800d4a0 <prvInitialiseTaskLists+0x60>)
 800d458:	4413      	add	r3, r2
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fe f991 	bl	800b782 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3301      	adds	r3, #1
 800d464:	607b      	str	r3, [r7, #4]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b06      	cmp	r3, #6
 800d46a:	d9ef      	bls.n	800d44c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d46c:	480d      	ldr	r0, [pc, #52]	@ (800d4a4 <prvInitialiseTaskLists+0x64>)
 800d46e:	f7fe f988 	bl	800b782 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d472:	480d      	ldr	r0, [pc, #52]	@ (800d4a8 <prvInitialiseTaskLists+0x68>)
 800d474:	f7fe f985 	bl	800b782 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d478:	480c      	ldr	r0, [pc, #48]	@ (800d4ac <prvInitialiseTaskLists+0x6c>)
 800d47a:	f7fe f982 	bl	800b782 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d47e:	480c      	ldr	r0, [pc, #48]	@ (800d4b0 <prvInitialiseTaskLists+0x70>)
 800d480:	f7fe f97f 	bl	800b782 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d484:	480b      	ldr	r0, [pc, #44]	@ (800d4b4 <prvInitialiseTaskLists+0x74>)
 800d486:	f7fe f97c 	bl	800b782 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d48a:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b8 <prvInitialiseTaskLists+0x78>)
 800d48c:	4a05      	ldr	r2, [pc, #20]	@ (800d4a4 <prvInitialiseTaskLists+0x64>)
 800d48e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d490:	4b0a      	ldr	r3, [pc, #40]	@ (800d4bc <prvInitialiseTaskLists+0x7c>)
 800d492:	4a05      	ldr	r2, [pc, #20]	@ (800d4a8 <prvInitialiseTaskLists+0x68>)
 800d494:	601a      	str	r2, [r3, #0]
}
 800d496:	bf00      	nop
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20005274 	.word	0x20005274
 800d4a4:	20005300 	.word	0x20005300
 800d4a8:	20005314 	.word	0x20005314
 800d4ac:	20005330 	.word	0x20005330
 800d4b0:	20005344 	.word	0x20005344
 800d4b4:	2000535c 	.word	0x2000535c
 800d4b8:	20005328 	.word	0x20005328
 800d4bc:	2000532c 	.word	0x2000532c

0800d4c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c6:	e019      	b.n	800d4fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4c8:	f000 fbd0 	bl	800dc6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4cc:	4b10      	ldr	r3, [pc, #64]	@ (800d510 <prvCheckTasksWaitingTermination+0x50>)
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	3304      	adds	r3, #4
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fe f9dc 	bl	800b896 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4de:	4b0d      	ldr	r3, [pc, #52]	@ (800d514 <prvCheckTasksWaitingTermination+0x54>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	4a0b      	ldr	r2, [pc, #44]	@ (800d514 <prvCheckTasksWaitingTermination+0x54>)
 800d4e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d518 <prvCheckTasksWaitingTermination+0x58>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3b01      	subs	r3, #1
 800d4ee:	4a0a      	ldr	r2, [pc, #40]	@ (800d518 <prvCheckTasksWaitingTermination+0x58>)
 800d4f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4f2:	f000 fbf1 	bl	800dcd8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f810 	bl	800d51c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4fc:	4b06      	ldr	r3, [pc, #24]	@ (800d518 <prvCheckTasksWaitingTermination+0x58>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1e1      	bne.n	800d4c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20005344 	.word	0x20005344
 800d514:	20005370 	.word	0x20005370
 800d518:	20005358 	.word	0x20005358

0800d51c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	334c      	adds	r3, #76	@ 0x4c
 800d528:	4618      	mov	r0, r3
 800d52a:	f00f fd0b 	bl	801cf44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d534:	2b00      	cmp	r3, #0
 800d536:	d108      	bne.n	800d54a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fd91 	bl	800e064 <vPortFree>
				vPortFree( pxTCB );
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fd8e 	bl	800e064 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d548:	e01b      	b.n	800d582 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d550:	2b01      	cmp	r3, #1
 800d552:	d103      	bne.n	800d55c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fd85 	bl	800e064 <vPortFree>
	}
 800d55a:	e012      	b.n	800d582 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d562:	2b02      	cmp	r3, #2
 800d564:	d00d      	beq.n	800d582 <prvDeleteTCB+0x66>
	__asm volatile
 800d566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d56a:	b672      	cpsid	i
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	b662      	cpsie	i
 800d57a:	60fb      	str	r3, [r7, #12]
}
 800d57c:	bf00      	nop
 800d57e:	bf00      	nop
 800d580:	e7fd      	b.n	800d57e <prvDeleteTCB+0x62>
	}
 800d582:	bf00      	nop
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
	...

0800d58c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d592:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <prvResetNextTaskUnblockTime+0x38>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d59c:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d59e:	f04f 32ff 	mov.w	r2, #4294967295
 800d5a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5a4:	e008      	b.n	800d5b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a6:	4b07      	ldr	r3, [pc, #28]	@ (800d5c4 <prvResetNextTaskUnblockTime+0x38>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	4a04      	ldr	r2, [pc, #16]	@ (800d5c8 <prvResetNextTaskUnblockTime+0x3c>)
 800d5b6:	6013      	str	r3, [r2, #0]
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr
 800d5c4:	20005328 	.word	0x20005328
 800d5c8:	20005390 	.word	0x20005390

0800d5cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d600 <xTaskGetSchedulerState+0x34>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d102      	bne.n	800d5e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	607b      	str	r3, [r7, #4]
 800d5de:	e008      	b.n	800d5f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5e0:	4b08      	ldr	r3, [pc, #32]	@ (800d604 <xTaskGetSchedulerState+0x38>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d102      	bne.n	800d5ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	607b      	str	r3, [r7, #4]
 800d5ec:	e001      	b.n	800d5f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5f2:	687b      	ldr	r3, [r7, #4]
	}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	2000537c 	.word	0x2000537c
 800d604:	20005398 	.word	0x20005398

0800d608 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d614:	2300      	movs	r3, #0
 800d616:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d069      	beq.n	800d6f2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d622:	4b36      	ldr	r3, [pc, #216]	@ (800d6fc <xTaskPriorityInherit+0xf4>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d628:	429a      	cmp	r2, r3
 800d62a:	d259      	bcs.n	800d6e0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	699b      	ldr	r3, [r3, #24]
 800d630:	2b00      	cmp	r3, #0
 800d632:	db06      	blt.n	800d642 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d634:	4b31      	ldr	r3, [pc, #196]	@ (800d6fc <xTaskPriorityInherit+0xf4>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63a:	f1c3 0207 	rsb	r2, r3, #7
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	6959      	ldr	r1, [r3, #20]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d64a:	4613      	mov	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4413      	add	r3, r2
 800d650:	009b      	lsls	r3, r3, #2
 800d652:	4a2b      	ldr	r2, [pc, #172]	@ (800d700 <xTaskPriorityInherit+0xf8>)
 800d654:	4413      	add	r3, r2
 800d656:	4299      	cmp	r1, r3
 800d658:	d13a      	bne.n	800d6d0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	3304      	adds	r3, #4
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe f919 	bl	800b896 <uxListRemove>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d115      	bne.n	800d696 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d66e:	4924      	ldr	r1, [pc, #144]	@ (800d700 <xTaskPriorityInherit+0xf8>)
 800d670:	4613      	mov	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	440b      	add	r3, r1
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <xTaskPriorityInherit+0x8e>
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d684:	2201      	movs	r2, #1
 800d686:	fa02 f303 	lsl.w	r3, r2, r3
 800d68a:	43da      	mvns	r2, r3
 800d68c:	4b1d      	ldr	r3, [pc, #116]	@ (800d704 <xTaskPriorityInherit+0xfc>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4013      	ands	r3, r2
 800d692:	4a1c      	ldr	r2, [pc, #112]	@ (800d704 <xTaskPriorityInherit+0xfc>)
 800d694:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d696:	4b19      	ldr	r3, [pc, #100]	@ (800d6fc <xTaskPriorityInherit+0xf4>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	409a      	lsls	r2, r3
 800d6a8:	4b16      	ldr	r3, [pc, #88]	@ (800d704 <xTaskPriorityInherit+0xfc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	4a15      	ldr	r2, [pc, #84]	@ (800d704 <xTaskPriorityInherit+0xfc>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4a10      	ldr	r2, [pc, #64]	@ (800d700 <xTaskPriorityInherit+0xf8>)
 800d6c0:	441a      	add	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	f7fe f887 	bl	800b7dc <vListInsertEnd>
 800d6ce:	e004      	b.n	800d6da <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <xTaskPriorityInherit+0xf4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	60fb      	str	r3, [r7, #12]
 800d6de:	e008      	b.n	800d6f2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d6e4:	4b05      	ldr	r3, [pc, #20]	@ (800d6fc <xTaskPriorityInherit+0xf4>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d201      	bcs.n	800d6f2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	20005270 	.word	0x20005270
 800d700:	20005274 	.word	0x20005274
 800d704:	20005378 	.word	0x20005378

0800d708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d714:	2300      	movs	r3, #0
 800d716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d074      	beq.n	800d808 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d71e:	4b3d      	ldr	r3, [pc, #244]	@ (800d814 <xTaskPriorityDisinherit+0x10c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	693a      	ldr	r2, [r7, #16]
 800d724:	429a      	cmp	r2, r3
 800d726:	d00d      	beq.n	800d744 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72c:	b672      	cpsid	i
 800d72e:	f383 8811 	msr	BASEPRI, r3
 800d732:	f3bf 8f6f 	isb	sy
 800d736:	f3bf 8f4f 	dsb	sy
 800d73a:	b662      	cpsie	i
 800d73c:	60fb      	str	r3, [r7, #12]
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	e7fd      	b.n	800d740 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10d      	bne.n	800d768 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d750:	b672      	cpsid	i
 800d752:	f383 8811 	msr	BASEPRI, r3
 800d756:	f3bf 8f6f 	isb	sy
 800d75a:	f3bf 8f4f 	dsb	sy
 800d75e:	b662      	cpsie	i
 800d760:	60bb      	str	r3, [r7, #8]
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	e7fd      	b.n	800d764 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d76c:	1e5a      	subs	r2, r3, #1
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d044      	beq.n	800d808 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d782:	2b00      	cmp	r3, #0
 800d784:	d140      	bne.n	800d808 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	3304      	adds	r3, #4
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fe f883 	bl	800b896 <uxListRemove>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d115      	bne.n	800d7c2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d79a:	491f      	ldr	r1, [pc, #124]	@ (800d818 <xTaskPriorityDisinherit+0x110>)
 800d79c:	4613      	mov	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	440b      	add	r3, r1
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d10a      	bne.n	800d7c2 <xTaskPriorityDisinherit+0xba>
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b6:	43da      	mvns	r2, r3
 800d7b8:	4b18      	ldr	r3, [pc, #96]	@ (800d81c <xTaskPriorityDisinherit+0x114>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4013      	ands	r3, r2
 800d7be:	4a17      	ldr	r2, [pc, #92]	@ (800d81c <xTaskPriorityDisinherit+0x114>)
 800d7c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ce:	f1c3 0207 	rsb	r2, r3, #7
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7da:	2201      	movs	r2, #1
 800d7dc:	409a      	lsls	r2, r3
 800d7de:	4b0f      	ldr	r3, [pc, #60]	@ (800d81c <xTaskPriorityDisinherit+0x114>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	4a0d      	ldr	r2, [pc, #52]	@ (800d81c <xTaskPriorityDisinherit+0x114>)
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	009b      	lsls	r3, r3, #2
 800d7f0:	4413      	add	r3, r2
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4a08      	ldr	r2, [pc, #32]	@ (800d818 <xTaskPriorityDisinherit+0x110>)
 800d7f6:	441a      	add	r2, r3
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f7fd ffec 	bl	800b7dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d804:	2301      	movs	r3, #1
 800d806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d808:	697b      	ldr	r3, [r7, #20]
	}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3718      	adds	r7, #24
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	20005270 	.word	0x20005270
 800d818:	20005274 	.word	0x20005274
 800d81c:	20005378 	.word	0x20005378

0800d820 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d82e:	2301      	movs	r3, #1
 800d830:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 8089 	beq.w	800d94c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10d      	bne.n	800d85e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	60fb      	str	r3, [r7, #12]
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	e7fd      	b.n	800d85a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d862:	683a      	ldr	r2, [r7, #0]
 800d864:	429a      	cmp	r2, r3
 800d866:	d902      	bls.n	800d86e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e002      	b.n	800d874 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d872:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d878:	69fa      	ldr	r2, [r7, #28]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d066      	beq.n	800d94c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	429a      	cmp	r2, r3
 800d886:	d161      	bne.n	800d94c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d888:	4b32      	ldr	r3, [pc, #200]	@ (800d954 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	69ba      	ldr	r2, [r7, #24]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d10d      	bne.n	800d8ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d896:	b672      	cpsid	i
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	b662      	cpsie	i
 800d8a6:	60bb      	str	r3, [r7, #8]
}
 800d8a8:	bf00      	nop
 800d8aa:	bf00      	nop
 800d8ac:	e7fd      	b.n	800d8aa <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	69fa      	ldr	r2, [r7, #28]
 800d8b8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	db04      	blt.n	800d8cc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f1c3 0207 	rsb	r2, r3, #7
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	6959      	ldr	r1, [r3, #20]
 800d8d0:	693a      	ldr	r2, [r7, #16]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4a1f      	ldr	r2, [pc, #124]	@ (800d958 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8dc:	4413      	add	r3, r2
 800d8de:	4299      	cmp	r1, r3
 800d8e0:	d134      	bne.n	800d94c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fd ffd5 	bl	800b896 <uxListRemove>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d115      	bne.n	800d91e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f6:	4918      	ldr	r1, [pc, #96]	@ (800d958 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4413      	add	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	440b      	add	r3, r1
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d908:	69bb      	ldr	r3, [r7, #24]
 800d90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d90c:	2201      	movs	r2, #1
 800d90e:	fa02 f303 	lsl.w	r3, r2, r3
 800d912:	43da      	mvns	r2, r3
 800d914:	4b11      	ldr	r3, [pc, #68]	@ (800d95c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4013      	ands	r3, r2
 800d91a:	4a10      	ldr	r2, [pc, #64]	@ (800d95c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d91c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d922:	2201      	movs	r2, #1
 800d924:	409a      	lsls	r2, r3
 800d926:	4b0d      	ldr	r3, [pc, #52]	@ (800d95c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4313      	orrs	r3, r2
 800d92c:	4a0b      	ldr	r2, [pc, #44]	@ (800d95c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d934:	4613      	mov	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4a06      	ldr	r2, [pc, #24]	@ (800d958 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d93e:	441a      	add	r2, r3
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	3304      	adds	r3, #4
 800d944:	4619      	mov	r1, r3
 800d946:	4610      	mov	r0, r2
 800d948:	f7fd ff48 	bl	800b7dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d94c:	bf00      	nop
 800d94e:	3720      	adds	r7, #32
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	20005270 	.word	0x20005270
 800d958:	20005274 	.word	0x20005274
 800d95c:	20005378 	.word	0x20005378

0800d960 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d960:	b480      	push	{r7}
 800d962:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d964:	4b07      	ldr	r3, [pc, #28]	@ (800d984 <pvTaskIncrementMutexHeldCount+0x24>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d96c:	4b05      	ldr	r3, [pc, #20]	@ (800d984 <pvTaskIncrementMutexHeldCount+0x24>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d972:	3201      	adds	r2, #1
 800d974:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d976:	4b03      	ldr	r3, [pc, #12]	@ (800d984 <pvTaskIncrementMutexHeldCount+0x24>)
 800d978:	681b      	ldr	r3, [r3, #0]
	}
 800d97a:	4618      	mov	r0, r3
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	20005270 	.word	0x20005270

0800d988 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d992:	4b29      	ldr	r3, [pc, #164]	@ (800da38 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d998:	4b28      	ldr	r3, [pc, #160]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3304      	adds	r3, #4
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fd ff79 	bl	800b896 <uxListRemove>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d10b      	bne.n	800d9c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d9aa:	4b24      	ldr	r3, [pc, #144]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b6:	43da      	mvns	r2, r3
 800d9b8:	4b21      	ldr	r3, [pc, #132]	@ (800da40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4013      	ands	r3, r2
 800d9be:	4a20      	ldr	r2, [pc, #128]	@ (800da40 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c8:	d10a      	bne.n	800d9e0 <prvAddCurrentTaskToDelayedList+0x58>
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d007      	beq.n	800d9e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	481a      	ldr	r0, [pc, #104]	@ (800da44 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d9da:	f7fd feff 	bl	800b7dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9de:	e026      	b.n	800da2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9e8:	4b14      	ldr	r3, [pc, #80]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d209      	bcs.n	800da0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9f8:	4b13      	ldr	r3, [pc, #76]	@ (800da48 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7fd ff0d 	bl	800b824 <vListInsert>
}
 800da0a:	e010      	b.n	800da2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da0c:	4b0f      	ldr	r3, [pc, #60]	@ (800da4c <prvAddCurrentTaskToDelayedList+0xc4>)
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	4b0a      	ldr	r3, [pc, #40]	@ (800da3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3304      	adds	r3, #4
 800da16:	4619      	mov	r1, r3
 800da18:	4610      	mov	r0, r2
 800da1a:	f7fd ff03 	bl	800b824 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da1e:	4b0c      	ldr	r3, [pc, #48]	@ (800da50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	429a      	cmp	r2, r3
 800da26:	d202      	bcs.n	800da2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da28:	4a09      	ldr	r2, [pc, #36]	@ (800da50 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	6013      	str	r3, [r2, #0]
}
 800da2e:	bf00      	nop
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	20005374 	.word	0x20005374
 800da3c:	20005270 	.word	0x20005270
 800da40:	20005378 	.word	0x20005378
 800da44:	2000535c 	.word	0x2000535c
 800da48:	2000532c 	.word	0x2000532c
 800da4c:	20005328 	.word	0x20005328
 800da50:	20005390 	.word	0x20005390

0800da54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	3b04      	subs	r3, #4
 800da64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800da6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3b04      	subs	r3, #4
 800da72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	f023 0201 	bic.w	r2, r3, #1
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3b04      	subs	r3, #4
 800da82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da84:	4a0c      	ldr	r2, [pc, #48]	@ (800dab8 <pxPortInitialiseStack+0x64>)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	3b14      	subs	r3, #20
 800da8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	3b04      	subs	r3, #4
 800da9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f06f 0202 	mvn.w	r2, #2
 800daa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	3b20      	subs	r3, #32
 800daa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800daaa:	68fb      	ldr	r3, [r7, #12]
}
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	0800dabd 	.word	0x0800dabd

0800dabc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dac2:	2300      	movs	r3, #0
 800dac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dac6:	4b15      	ldr	r3, [pc, #84]	@ (800db1c <prvTaskExitError+0x60>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dace:	d00d      	beq.n	800daec <prvTaskExitError+0x30>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad4:	b672      	cpsid	i
 800dad6:	f383 8811 	msr	BASEPRI, r3
 800dada:	f3bf 8f6f 	isb	sy
 800dade:	f3bf 8f4f 	dsb	sy
 800dae2:	b662      	cpsie	i
 800dae4:	60fb      	str	r3, [r7, #12]
}
 800dae6:	bf00      	nop
 800dae8:	bf00      	nop
 800daea:	e7fd      	b.n	800dae8 <prvTaskExitError+0x2c>
	__asm volatile
 800daec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daf0:	b672      	cpsid	i
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	b662      	cpsie	i
 800db00:	60bb      	str	r3, [r7, #8]
}
 800db02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db04:	bf00      	nop
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0fc      	beq.n	800db06 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db0c:	bf00      	nop
 800db0e:	bf00      	nop
 800db10:	3714      	adds	r7, #20
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	20000074 	.word	0x20000074

0800db20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db20:	4b07      	ldr	r3, [pc, #28]	@ (800db40 <pxCurrentTCBConst2>)
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	6808      	ldr	r0, [r1, #0]
 800db26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db2a:	f380 8809 	msr	PSP, r0
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f04f 0000 	mov.w	r0, #0
 800db36:	f380 8811 	msr	BASEPRI, r0
 800db3a:	4770      	bx	lr
 800db3c:	f3af 8000 	nop.w

0800db40 <pxCurrentTCBConst2>:
 800db40:	20005270 	.word	0x20005270
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db44:	bf00      	nop
 800db46:	bf00      	nop

0800db48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db48:	4808      	ldr	r0, [pc, #32]	@ (800db6c <prvPortStartFirstTask+0x24>)
 800db4a:	6800      	ldr	r0, [r0, #0]
 800db4c:	6800      	ldr	r0, [r0, #0]
 800db4e:	f380 8808 	msr	MSP, r0
 800db52:	f04f 0000 	mov.w	r0, #0
 800db56:	f380 8814 	msr	CONTROL, r0
 800db5a:	b662      	cpsie	i
 800db5c:	b661      	cpsie	f
 800db5e:	f3bf 8f4f 	dsb	sy
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	df00      	svc	0
 800db68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db6a:	bf00      	nop
 800db6c:	e000ed08 	.word	0xe000ed08

0800db70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db76:	4b37      	ldr	r3, [pc, #220]	@ (800dc54 <xPortStartScheduler+0xe4>)
 800db78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	22ff      	movs	r2, #255	@ 0xff
 800db86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db90:	78fb      	ldrb	r3, [r7, #3]
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	4b2f      	ldr	r3, [pc, #188]	@ (800dc58 <xPortStartScheduler+0xe8>)
 800db9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db9e:	4b2f      	ldr	r3, [pc, #188]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dba0:	2207      	movs	r2, #7
 800dba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dba4:	e009      	b.n	800dbba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dba6:	4b2d      	ldr	r3, [pc, #180]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	4a2b      	ldr	r2, [pc, #172]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dbb0:	78fb      	ldrb	r3, [r7, #3]
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dbba:	78fb      	ldrb	r3, [r7, #3]
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbc2:	2b80      	cmp	r3, #128	@ 0x80
 800dbc4:	d0ef      	beq.n	800dba6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dbc6:	4b25      	ldr	r3, [pc, #148]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f1c3 0307 	rsb	r3, r3, #7
 800dbce:	2b04      	cmp	r3, #4
 800dbd0:	d00d      	beq.n	800dbee <xPortStartScheduler+0x7e>
	__asm volatile
 800dbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd6:	b672      	cpsid	i
 800dbd8:	f383 8811 	msr	BASEPRI, r3
 800dbdc:	f3bf 8f6f 	isb	sy
 800dbe0:	f3bf 8f4f 	dsb	sy
 800dbe4:	b662      	cpsie	i
 800dbe6:	60bb      	str	r3, [r7, #8]
}
 800dbe8:	bf00      	nop
 800dbea:	bf00      	nop
 800dbec:	e7fd      	b.n	800dbea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbee:	4b1b      	ldr	r3, [pc, #108]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	4a19      	ldr	r2, [pc, #100]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dbf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbf8:	4b18      	ldr	r3, [pc, #96]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dc00:	4a16      	ldr	r2, [pc, #88]	@ (800dc5c <xPortStartScheduler+0xec>)
 800dc02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dc0c:	4b14      	ldr	r3, [pc, #80]	@ (800dc60 <xPortStartScheduler+0xf0>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a13      	ldr	r2, [pc, #76]	@ (800dc60 <xPortStartScheduler+0xf0>)
 800dc12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dc16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dc18:	4b11      	ldr	r3, [pc, #68]	@ (800dc60 <xPortStartScheduler+0xf0>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a10      	ldr	r2, [pc, #64]	@ (800dc60 <xPortStartScheduler+0xf0>)
 800dc1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dc22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc24:	f000 f8dc 	bl	800dde0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc28:	4b0e      	ldr	r3, [pc, #56]	@ (800dc64 <xPortStartScheduler+0xf4>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc2e:	f000 f8fb 	bl	800de28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc32:	4b0d      	ldr	r3, [pc, #52]	@ (800dc68 <xPortStartScheduler+0xf8>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4a0c      	ldr	r2, [pc, #48]	@ (800dc68 <xPortStartScheduler+0xf8>)
 800dc38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dc3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc3e:	f7ff ff83 	bl	800db48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc42:	f7ff fa67 	bl	800d114 <vTaskSwitchContext>
	prvTaskExitError();
 800dc46:	f7ff ff39 	bl	800dabc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	e000e400 	.word	0xe000e400
 800dc58:	2000539c 	.word	0x2000539c
 800dc5c:	200053a0 	.word	0x200053a0
 800dc60:	e000ed20 	.word	0xe000ed20
 800dc64:	20000074 	.word	0x20000074
 800dc68:	e000ef34 	.word	0xe000ef34

0800dc6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc76:	b672      	cpsid	i
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	b662      	cpsie	i
 800dc86:	607b      	str	r3, [r7, #4]
}
 800dc88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc8a:	4b11      	ldr	r3, [pc, #68]	@ (800dcd0 <vPortEnterCritical+0x64>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	4a0f      	ldr	r2, [pc, #60]	@ (800dcd0 <vPortEnterCritical+0x64>)
 800dc92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc94:	4b0e      	ldr	r3, [pc, #56]	@ (800dcd0 <vPortEnterCritical+0x64>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d112      	bne.n	800dcc2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc9c:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd4 <vPortEnterCritical+0x68>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00d      	beq.n	800dcc2 <vPortEnterCritical+0x56>
	__asm volatile
 800dca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcaa:	b672      	cpsid	i
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	b662      	cpsie	i
 800dcba:	603b      	str	r3, [r7, #0]
}
 800dcbc:	bf00      	nop
 800dcbe:	bf00      	nop
 800dcc0:	e7fd      	b.n	800dcbe <vPortEnterCritical+0x52>
	}
}
 800dcc2:	bf00      	nop
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	20000074 	.word	0x20000074
 800dcd4:	e000ed04 	.word	0xe000ed04

0800dcd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dcde:	4b13      	ldr	r3, [pc, #76]	@ (800dd2c <vPortExitCritical+0x54>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d10d      	bne.n	800dd02 <vPortExitCritical+0x2a>
	__asm volatile
 800dce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcea:	b672      	cpsid	i
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	b662      	cpsie	i
 800dcfa:	607b      	str	r3, [r7, #4]
}
 800dcfc:	bf00      	nop
 800dcfe:	bf00      	nop
 800dd00:	e7fd      	b.n	800dcfe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dd02:	4b0a      	ldr	r3, [pc, #40]	@ (800dd2c <vPortExitCritical+0x54>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	4a08      	ldr	r2, [pc, #32]	@ (800dd2c <vPortExitCritical+0x54>)
 800dd0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd0c:	4b07      	ldr	r3, [pc, #28]	@ (800dd2c <vPortExitCritical+0x54>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d105      	bne.n	800dd20 <vPortExitCritical+0x48>
 800dd14:	2300      	movs	r3, #0
 800dd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
}
 800dd1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dd20:	bf00      	nop
 800dd22:	370c      	adds	r7, #12
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	20000074 	.word	0x20000074

0800dd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd30:	f3ef 8009 	mrs	r0, PSP
 800dd34:	f3bf 8f6f 	isb	sy
 800dd38:	4b15      	ldr	r3, [pc, #84]	@ (800dd90 <pxCurrentTCBConst>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	f01e 0f10 	tst.w	lr, #16
 800dd40:	bf08      	it	eq
 800dd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	6010      	str	r0, [r2, #0]
 800dd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dd54:	b672      	cpsid	i
 800dd56:	f380 8811 	msr	BASEPRI, r0
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	b662      	cpsie	i
 800dd64:	f7ff f9d6 	bl	800d114 <vTaskSwitchContext>
 800dd68:	f04f 0000 	mov.w	r0, #0
 800dd6c:	f380 8811 	msr	BASEPRI, r0
 800dd70:	bc09      	pop	{r0, r3}
 800dd72:	6819      	ldr	r1, [r3, #0]
 800dd74:	6808      	ldr	r0, [r1, #0]
 800dd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7a:	f01e 0f10 	tst.w	lr, #16
 800dd7e:	bf08      	it	eq
 800dd80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd84:	f380 8809 	msr	PSP, r0
 800dd88:	f3bf 8f6f 	isb	sy
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop

0800dd90 <pxCurrentTCBConst>:
 800dd90:	20005270 	.word	0x20005270
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd94:	bf00      	nop
 800dd96:	bf00      	nop

0800dd98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	b672      	cpsid	i
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	b662      	cpsie	i
 800ddb2:	607b      	str	r3, [r7, #4]
}
 800ddb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ddb6:	f7ff f8f1 	bl	800cf9c <xTaskIncrementTick>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d003      	beq.n	800ddc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ddc0:	4b06      	ldr	r3, [pc, #24]	@ (800dddc <SysTick_Handler+0x44>)
 800ddc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	2300      	movs	r3, #0
 800ddca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	f383 8811 	msr	BASEPRI, r3
}
 800ddd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	e000ed04 	.word	0xe000ed04

0800dde0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dde0:	b480      	push	{r7}
 800dde2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dde4:	4b0b      	ldr	r3, [pc, #44]	@ (800de14 <vPortSetupTimerInterrupt+0x34>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ddea:	4b0b      	ldr	r3, [pc, #44]	@ (800de18 <vPortSetupTimerInterrupt+0x38>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddf0:	4b0a      	ldr	r3, [pc, #40]	@ (800de1c <vPortSetupTimerInterrupt+0x3c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	4a0a      	ldr	r2, [pc, #40]	@ (800de20 <vPortSetupTimerInterrupt+0x40>)
 800ddf6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddfa:	099b      	lsrs	r3, r3, #6
 800ddfc:	4a09      	ldr	r2, [pc, #36]	@ (800de24 <vPortSetupTimerInterrupt+0x44>)
 800ddfe:	3b01      	subs	r3, #1
 800de00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de02:	4b04      	ldr	r3, [pc, #16]	@ (800de14 <vPortSetupTimerInterrupt+0x34>)
 800de04:	2207      	movs	r2, #7
 800de06:	601a      	str	r2, [r3, #0]
}
 800de08:	bf00      	nop
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	e000e010 	.word	0xe000e010
 800de18:	e000e018 	.word	0xe000e018
 800de1c:	20000054 	.word	0x20000054
 800de20:	10624dd3 	.word	0x10624dd3
 800de24:	e000e014 	.word	0xe000e014

0800de28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800de28:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800de38 <vPortEnableVFP+0x10>
 800de2c:	6801      	ldr	r1, [r0, #0]
 800de2e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800de32:	6001      	str	r1, [r0, #0]
 800de34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de36:	bf00      	nop
 800de38:	e000ed88 	.word	0xe000ed88

0800de3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de42:	f3ef 8305 	mrs	r3, IPSR
 800de46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b0f      	cmp	r3, #15
 800de4c:	d917      	bls.n	800de7e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de4e:	4a1a      	ldr	r2, [pc, #104]	@ (800deb8 <vPortValidateInterruptPriority+0x7c>)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4413      	add	r3, r2
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de58:	4b18      	ldr	r3, [pc, #96]	@ (800debc <vPortValidateInterruptPriority+0x80>)
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	7afa      	ldrb	r2, [r7, #11]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d20d      	bcs.n	800de7e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	b672      	cpsid	i
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	b662      	cpsie	i
 800de76:	607b      	str	r3, [r7, #4]
}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	e7fd      	b.n	800de7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de7e:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <vPortValidateInterruptPriority+0x84>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800de86:	4b0f      	ldr	r3, [pc, #60]	@ (800dec4 <vPortValidateInterruptPriority+0x88>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d90d      	bls.n	800deaa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800de8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de92:	b672      	cpsid	i
 800de94:	f383 8811 	msr	BASEPRI, r3
 800de98:	f3bf 8f6f 	isb	sy
 800de9c:	f3bf 8f4f 	dsb	sy
 800dea0:	b662      	cpsie	i
 800dea2:	603b      	str	r3, [r7, #0]
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	e7fd      	b.n	800dea6 <vPortValidateInterruptPriority+0x6a>
	}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	e000e3f0 	.word	0xe000e3f0
 800debc:	2000539c 	.word	0x2000539c
 800dec0:	e000ed0c 	.word	0xe000ed0c
 800dec4:	200053a0 	.word	0x200053a0

0800dec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08a      	sub	sp, #40	@ 0x28
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ded0:	2300      	movs	r3, #0
 800ded2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ded4:	f7fe ff92 	bl	800cdfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ded8:	4b5d      	ldr	r3, [pc, #372]	@ (800e050 <pvPortMalloc+0x188>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d101      	bne.n	800dee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dee0:	f000 f920 	bl	800e124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dee4:	4b5b      	ldr	r3, [pc, #364]	@ (800e054 <pvPortMalloc+0x18c>)
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4013      	ands	r3, r2
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 8094 	bne.w	800e01a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d020      	beq.n	800df3a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800def8:	2208      	movs	r2, #8
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	4413      	add	r3, r2
 800defe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f003 0307 	and.w	r3, r3, #7
 800df06:	2b00      	cmp	r3, #0
 800df08:	d017      	beq.n	800df3a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f023 0307 	bic.w	r3, r3, #7
 800df10:	3308      	adds	r3, #8
 800df12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00d      	beq.n	800df3a <pvPortMalloc+0x72>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df22:	b672      	cpsid	i
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	b662      	cpsie	i
 800df32:	617b      	str	r3, [r7, #20]
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop
 800df38:	e7fd      	b.n	800df36 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d06c      	beq.n	800e01a <pvPortMalloc+0x152>
 800df40:	4b45      	ldr	r3, [pc, #276]	@ (800e058 <pvPortMalloc+0x190>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	687a      	ldr	r2, [r7, #4]
 800df46:	429a      	cmp	r2, r3
 800df48:	d867      	bhi.n	800e01a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800df4a:	4b44      	ldr	r3, [pc, #272]	@ (800e05c <pvPortMalloc+0x194>)
 800df4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800df4e:	4b43      	ldr	r3, [pc, #268]	@ (800e05c <pvPortMalloc+0x194>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df54:	e004      	b.n	800df60 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800df56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	429a      	cmp	r2, r3
 800df68:	d903      	bls.n	800df72 <pvPortMalloc+0xaa>
 800df6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1f1      	bne.n	800df56 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df72:	4b37      	ldr	r3, [pc, #220]	@ (800e050 <pvPortMalloc+0x188>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df78:	429a      	cmp	r2, r3
 800df7a:	d04e      	beq.n	800e01a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2208      	movs	r2, #8
 800df82:	4413      	add	r3, r2
 800df84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	2308      	movs	r3, #8
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d922      	bls.n	800dfe4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	f003 0307 	and.w	r3, r3, #7
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00d      	beq.n	800dfcc <pvPortMalloc+0x104>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb4:	b672      	cpsid	i
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	b662      	cpsie	i
 800dfc4:	613b      	str	r3, [r7, #16]
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfce:	685a      	ldr	r2, [r3, #4]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	1ad2      	subs	r2, r2, r3
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dfde:	69b8      	ldr	r0, [r7, #24]
 800dfe0:	f000 f902 	bl	800e1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dfe4:	4b1c      	ldr	r3, [pc, #112]	@ (800e058 <pvPortMalloc+0x190>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	4a1a      	ldr	r2, [pc, #104]	@ (800e058 <pvPortMalloc+0x190>)
 800dff0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dff2:	4b19      	ldr	r3, [pc, #100]	@ (800e058 <pvPortMalloc+0x190>)
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	4b1a      	ldr	r3, [pc, #104]	@ (800e060 <pvPortMalloc+0x198>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d203      	bcs.n	800e006 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dffe:	4b16      	ldr	r3, [pc, #88]	@ (800e058 <pvPortMalloc+0x190>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a17      	ldr	r2, [pc, #92]	@ (800e060 <pvPortMalloc+0x198>)
 800e004:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	4b12      	ldr	r3, [pc, #72]	@ (800e054 <pvPortMalloc+0x18c>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	431a      	orrs	r2, r3
 800e010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e012:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e01a:	f7fe fefd 	bl	800ce18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	f003 0307 	and.w	r3, r3, #7
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00d      	beq.n	800e044 <pvPortMalloc+0x17c>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02c:	b672      	cpsid	i
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	b662      	cpsie	i
 800e03c:	60fb      	str	r3, [r7, #12]
}
 800e03e:	bf00      	nop
 800e040:	bf00      	nop
 800e042:	e7fd      	b.n	800e040 <pvPortMalloc+0x178>
	return pvReturn;
 800e044:	69fb      	ldr	r3, [r7, #28]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3728      	adds	r7, #40	@ 0x28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2000b6bc 	.word	0x2000b6bc
 800e054:	2000b6c8 	.word	0x2000b6c8
 800e058:	2000b6c0 	.word	0x2000b6c0
 800e05c:	2000b6b4 	.word	0x2000b6b4
 800e060:	2000b6c4 	.word	0x2000b6c4

0800e064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d04e      	beq.n	800e114 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e076:	2308      	movs	r3, #8
 800e078:	425b      	negs	r3, r3
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	4413      	add	r3, r2
 800e07e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	4b24      	ldr	r3, [pc, #144]	@ (800e11c <vPortFree+0xb8>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4013      	ands	r3, r2
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10d      	bne.n	800e0ae <vPortFree+0x4a>
	__asm volatile
 800e092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e096:	b672      	cpsid	i
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	b662      	cpsie	i
 800e0a6:	60fb      	str	r3, [r7, #12]
}
 800e0a8:	bf00      	nop
 800e0aa:	bf00      	nop
 800e0ac:	e7fd      	b.n	800e0aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00d      	beq.n	800e0d2 <vPortFree+0x6e>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0ba:	b672      	cpsid	i
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	b662      	cpsie	i
 800e0ca:	60bb      	str	r3, [r7, #8]
}
 800e0cc:	bf00      	nop
 800e0ce:	bf00      	nop
 800e0d0:	e7fd      	b.n	800e0ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	4b11      	ldr	r3, [pc, #68]	@ (800e11c <vPortFree+0xb8>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4013      	ands	r3, r2
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d019      	beq.n	800e114 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d115      	bne.n	800e114 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	4b0b      	ldr	r3, [pc, #44]	@ (800e11c <vPortFree+0xb8>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	43db      	mvns	r3, r3
 800e0f2:	401a      	ands	r2, r3
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e0f8:	f7fe fe80 	bl	800cdfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	4b07      	ldr	r3, [pc, #28]	@ (800e120 <vPortFree+0xbc>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4413      	add	r3, r2
 800e106:	4a06      	ldr	r2, [pc, #24]	@ (800e120 <vPortFree+0xbc>)
 800e108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e10a:	6938      	ldr	r0, [r7, #16]
 800e10c:	f000 f86c 	bl	800e1e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e110:	f7fe fe82 	bl	800ce18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e114:	bf00      	nop
 800e116:	3718      	adds	r7, #24
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	2000b6c8 	.word	0x2000b6c8
 800e120:	2000b6c0 	.word	0x2000b6c0

0800e124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e12a:	f246 3310 	movw	r3, #25360	@ 0x6310
 800e12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e130:	4b27      	ldr	r3, [pc, #156]	@ (800e1d0 <prvHeapInit+0xac>)
 800e132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3307      	adds	r3, #7
 800e142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	f023 0307 	bic.w	r3, r3, #7
 800e14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e14c:	68ba      	ldr	r2, [r7, #8]
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	4a1f      	ldr	r2, [pc, #124]	@ (800e1d0 <prvHeapInit+0xac>)
 800e154:	4413      	add	r3, r2
 800e156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e15c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1d4 <prvHeapInit+0xb0>)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e162:	4b1c      	ldr	r3, [pc, #112]	@ (800e1d4 <prvHeapInit+0xb0>)
 800e164:	2200      	movs	r2, #0
 800e166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e170:	2208      	movs	r2, #8
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	1a9b      	subs	r3, r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0307 	bic.w	r3, r3, #7
 800e17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4a15      	ldr	r2, [pc, #84]	@ (800e1d8 <prvHeapInit+0xb4>)
 800e184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e186:	4b14      	ldr	r3, [pc, #80]	@ (800e1d8 <prvHeapInit+0xb4>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2200      	movs	r2, #0
 800e18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e18e:	4b12      	ldr	r3, [pc, #72]	@ (800e1d8 <prvHeapInit+0xb4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2200      	movs	r2, #0
 800e194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	1ad2      	subs	r2, r2, r3
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e1d8 <prvHeapInit+0xb4>)
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e1dc <prvHeapInit+0xb8>)
 800e1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	4a09      	ldr	r2, [pc, #36]	@ (800e1e0 <prvHeapInit+0xbc>)
 800e1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e1bc:	4b09      	ldr	r3, [pc, #36]	@ (800e1e4 <prvHeapInit+0xc0>)
 800e1be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	200053a4 	.word	0x200053a4
 800e1d4:	2000b6b4 	.word	0x2000b6b4
 800e1d8:	2000b6bc 	.word	0x2000b6bc
 800e1dc:	2000b6c4 	.word	0x2000b6c4
 800e1e0:	2000b6c0 	.word	0x2000b6c0
 800e1e4:	2000b6c8 	.word	0x2000b6c8

0800e1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1f0:	4b28      	ldr	r3, [pc, #160]	@ (800e294 <prvInsertBlockIntoFreeList+0xac>)
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e002      	b.n	800e1fc <prvInsertBlockIntoFreeList+0x14>
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	429a      	cmp	r2, r3
 800e204:	d8f7      	bhi.n	800e1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	4413      	add	r3, r2
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	429a      	cmp	r2, r3
 800e216:	d108      	bne.n	800e22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685a      	ldr	r2, [r3, #4]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	441a      	add	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	441a      	add	r2, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d118      	bne.n	800e270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	4b15      	ldr	r3, [pc, #84]	@ (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	429a      	cmp	r2, r3
 800e248:	d00d      	beq.n	800e266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	441a      	add	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e008      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e266:	4b0c      	ldr	r3, [pc, #48]	@ (800e298 <prvInsertBlockIntoFreeList+0xb0>)
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e003      	b.n	800e278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d002      	beq.n	800e286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e286:	bf00      	nop
 800e288:	3714      	adds	r7, #20
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	2000b6b4 	.word	0x2000b6b4
 800e298:	2000b6bc 	.word	0x2000b6bc

0800e29c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	330c      	adds	r3, #12
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	6839      	ldr	r1, [r7, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f002 fb67 	bl	8010984 <tcpip_send_msg_wait_sem>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d103      	bne.n	800e2ca <netconn_apimsg+0x2e>
    return apimsg->err;
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e2c8:	e001      	b.n	800e2ce <netconn_apimsg+0x32>
  }
  return err;
 800e2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b08c      	sub	sp, #48	@ 0x30
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	603a      	str	r2, [r7, #0]
 800e2e2:	71fb      	strb	r3, [r7, #7]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e2e8:	79fb      	ldrb	r3, [r7, #7]
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f001 f951 	bl	800f594 <netconn_alloc>
 800e2f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800e2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d054      	beq.n	800e3a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e2fa:	79bb      	ldrb	r3, [r7, #6]
 800e2fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e300:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e302:	f107 0308 	add.w	r3, r7, #8
 800e306:	4619      	mov	r1, r3
 800e308:	4829      	ldr	r0, [pc, #164]	@ (800e3b0 <netconn_new_with_proto_and_callback+0xd8>)
 800e30a:	f7ff ffc7 	bl	800e29c <netconn_apimsg>
 800e30e:	4603      	mov	r3, r0
 800e310:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800e314:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d043      	beq.n	800e3a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d005      	beq.n	800e330 <netconn_new_with_proto_and_callback+0x58>
 800e324:	4b23      	ldr	r3, [pc, #140]	@ (800e3b4 <netconn_new_with_proto_and_callback+0xdc>)
 800e326:	22a3      	movs	r2, #163	@ 0xa3
 800e328:	4923      	ldr	r1, [pc, #140]	@ (800e3b8 <netconn_new_with_proto_and_callback+0xe0>)
 800e32a:	4824      	ldr	r0, [pc, #144]	@ (800e3bc <netconn_new_with_proto_and_callback+0xe4>)
 800e32c:	f00e fd34 	bl	801cd98 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	3310      	adds	r3, #16
 800e334:	4618      	mov	r0, r3
 800e336:	f00e faf6 	bl	801c926 <sys_mbox_valid>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d105      	bne.n	800e34c <netconn_new_with_proto_and_callback+0x74>
 800e340:	4b1c      	ldr	r3, [pc, #112]	@ (800e3b4 <netconn_new_with_proto_and_callback+0xdc>)
 800e342:	22a4      	movs	r2, #164	@ 0xa4
 800e344:	491e      	ldr	r1, [pc, #120]	@ (800e3c0 <netconn_new_with_proto_and_callback+0xe8>)
 800e346:	481d      	ldr	r0, [pc, #116]	@ (800e3bc <netconn_new_with_proto_and_callback+0xe4>)
 800e348:	f00e fd26 	bl	801cd98 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e34e:	3314      	adds	r3, #20
 800e350:	4618      	mov	r0, r3
 800e352:	f00e fae8 	bl	801c926 <sys_mbox_valid>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d005      	beq.n	800e368 <netconn_new_with_proto_and_callback+0x90>
 800e35c:	4b15      	ldr	r3, [pc, #84]	@ (800e3b4 <netconn_new_with_proto_and_callback+0xdc>)
 800e35e:	22a6      	movs	r2, #166	@ 0xa6
 800e360:	4918      	ldr	r1, [pc, #96]	@ (800e3c4 <netconn_new_with_proto_and_callback+0xec>)
 800e362:	4816      	ldr	r0, [pc, #88]	@ (800e3bc <netconn_new_with_proto_and_callback+0xe4>)
 800e364:	f00e fd18 	bl	801cd98 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36a:	330c      	adds	r3, #12
 800e36c:	4618      	mov	r0, r3
 800e36e:	f00e fb6b 	bl	801ca48 <sys_sem_valid>
 800e372:	4603      	mov	r3, r0
 800e374:	2b00      	cmp	r3, #0
 800e376:	d105      	bne.n	800e384 <netconn_new_with_proto_and_callback+0xac>
 800e378:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b4 <netconn_new_with_proto_and_callback+0xdc>)
 800e37a:	22a9      	movs	r2, #169	@ 0xa9
 800e37c:	4912      	ldr	r1, [pc, #72]	@ (800e3c8 <netconn_new_with_proto_and_callback+0xf0>)
 800e37e:	480f      	ldr	r0, [pc, #60]	@ (800e3bc <netconn_new_with_proto_and_callback+0xe4>)
 800e380:	f00e fd0a 	bl	801cd98 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	330c      	adds	r3, #12
 800e388:	4618      	mov	r0, r3
 800e38a:	f00e fb50 	bl	801ca2e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e390:	3310      	adds	r3, #16
 800e392:	4618      	mov	r0, r3
 800e394:	f00e fa40 	bl	801c818 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e39a:	2007      	movs	r0, #7
 800e39c:	f003 fef0 	bl	8012180 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	e000      	b.n	800e3a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3730      	adds	r7, #48	@ 0x30
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0800f569 	.word	0x0800f569
 800e3b4:	0801e290 	.word	0x0801e290
 800e3b8:	0801e2c4 	.word	0x0801e2c4
 800e3bc:	0801e2e8 	.word	0x0801e2e8
 800e3c0:	0801e310 	.word	0x0801e310
 800e3c4:	0801e328 	.word	0x0801e328
 800e3c8:	0801e34c 	.word	0x0801e34c

0800e3cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08c      	sub	sp, #48	@ 0x30
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e014      	b.n	800e408 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e3e2:	2329      	movs	r3, #41	@ 0x29
 800e3e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e3e6:	f107 030c 	add.w	r3, r7, #12
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	4808      	ldr	r0, [pc, #32]	@ (800e410 <netconn_prepare_delete+0x44>)
 800e3ee:	f7ff ff55 	bl	800e29c <netconn_apimsg>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e3f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d002      	beq.n	800e406 <netconn_prepare_delete+0x3a>
    return err;
 800e400:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800e404:	e000      	b.n	800e408 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3730      	adds	r7, #48	@ 0x30
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0800fad5 	.word	0x0800fad5

0800e414 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d101      	bne.n	800e426 <netconn_delete+0x12>
    return ERR_OK;
 800e422:	2300      	movs	r3, #0
 800e424:	e00d      	b.n	800e442 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff ffd0 	bl	800e3cc <netconn_prepare_delete>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d102      	bne.n	800e43e <netconn_delete+0x2a>
    netconn_free(conn);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f001 f919 	bl	800f670 <netconn_free>
  }
  return err;
 800e43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08e      	sub	sp, #56	@ 0x38
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	4613      	mov	r3, r2
 800e458:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d109      	bne.n	800e474 <netconn_bind+0x28>
 800e460:	4b11      	ldr	r3, [pc, #68]	@ (800e4a8 <netconn_bind+0x5c>)
 800e462:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800e466:	4911      	ldr	r1, [pc, #68]	@ (800e4ac <netconn_bind+0x60>)
 800e468:	4811      	ldr	r0, [pc, #68]	@ (800e4b0 <netconn_bind+0x64>)
 800e46a:	f00e fc95 	bl	801cd98 <iprintf>
 800e46e:	f06f 030f 	mvn.w	r3, #15
 800e472:	e015      	b.n	800e4a0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e47a:	4b0e      	ldr	r3, [pc, #56]	@ (800e4b4 <netconn_bind+0x68>)
 800e47c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e486:	88fb      	ldrh	r3, [r7, #6]
 800e488:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e48a:	f107 0314 	add.w	r3, r7, #20
 800e48e:	4619      	mov	r1, r3
 800e490:	4809      	ldr	r0, [pc, #36]	@ (800e4b8 <netconn_bind+0x6c>)
 800e492:	f7ff ff03 	bl	800e29c <netconn_apimsg>
 800e496:	4603      	mov	r3, r0
 800e498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e49c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3738      	adds	r7, #56	@ 0x38
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	0801e290 	.word	0x0801e290
 800e4ac:	0801e3c8 	.word	0x0801e3c8
 800e4b0:	0801e2e8 	.word	0x0801e2e8
 800e4b4:	08022778 	.word	0x08022778
 800e4b8:	0800fc9d 	.word	0x0800fc9d

0800e4bc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08c      	sub	sp, #48	@ 0x30
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d109      	bne.n	800e4e2 <netconn_listen_with_backlog+0x26>
 800e4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e504 <netconn_listen_with_backlog+0x48>)
 800e4d0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800e4d4:	490c      	ldr	r1, [pc, #48]	@ (800e508 <netconn_listen_with_backlog+0x4c>)
 800e4d6:	480d      	ldr	r0, [pc, #52]	@ (800e50c <netconn_listen_with_backlog+0x50>)
 800e4d8:	f00e fc5e 	bl	801cd98 <iprintf>
 800e4dc:	f06f 030f 	mvn.w	r3, #15
 800e4e0:	e00c      	b.n	800e4fc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e4e6:	f107 030c 	add.w	r3, r7, #12
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4808      	ldr	r0, [pc, #32]	@ (800e510 <netconn_listen_with_backlog+0x54>)
 800e4ee:	f7ff fed5 	bl	800e29c <netconn_apimsg>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e4f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3730      	adds	r7, #48	@ 0x30
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	0801e290 	.word	0x0801e290
 800e508:	0801e448 	.word	0x0801e448
 800e50c:	0801e2e8 	.word	0x0801e2e8
 800e510:	0800fd11 	.word	0x0800fd11

0800e514 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d109      	bne.n	800e538 <netconn_accept+0x24>
 800e524:	4b3d      	ldr	r3, [pc, #244]	@ (800e61c <netconn_accept+0x108>)
 800e526:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e52a:	493d      	ldr	r1, [pc, #244]	@ (800e620 <netconn_accept+0x10c>)
 800e52c:	483d      	ldr	r0, [pc, #244]	@ (800e624 <netconn_accept+0x110>)
 800e52e:	f00e fc33 	bl	801cd98 <iprintf>
 800e532:	f06f 030f 	mvn.w	r3, #15
 800e536:	e06c      	b.n	800e612 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d109      	bne.n	800e558 <netconn_accept+0x44>
 800e544:	4b35      	ldr	r3, [pc, #212]	@ (800e61c <netconn_accept+0x108>)
 800e546:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800e54a:	4937      	ldr	r1, [pc, #220]	@ (800e628 <netconn_accept+0x114>)
 800e54c:	4835      	ldr	r0, [pc, #212]	@ (800e624 <netconn_accept+0x110>)
 800e54e:	f00e fc23 	bl	801cd98 <iprintf>
 800e552:	f06f 030f 	mvn.w	r3, #15
 800e556:	e05c      	b.n	800e612 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fb9a 	bl	800ec92 <netconn_err>
 800e55e:	4603      	mov	r3, r0
 800e560:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800e562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800e56a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e56e:	e050      	b.n	800e612 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	3314      	adds	r3, #20
 800e574:	4618      	mov	r0, r3
 800e576:	f00e f9d6 	bl	801c926 <sys_mbox_valid>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d005      	beq.n	800e58c <netconn_accept+0x78>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7f1b      	ldrb	r3, [r3, #28]
 800e584:	f003 0301 	and.w	r3, r3, #1
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800e58c:	f06f 030e 	mvn.w	r3, #14
 800e590:	e03f      	b.n	800e612 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	7f1b      	ldrb	r3, [r3, #28]
 800e596:	f003 0302 	and.w	r3, r3, #2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00e      	beq.n	800e5bc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3314      	adds	r3, #20
 800e5a2:	f107 020c 	add.w	r2, r7, #12
 800e5a6:	4611      	mov	r1, r2
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f00e f9a0 	bl	801c8ee <sys_arch_mbox_tryfetch>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b4:	d10a      	bne.n	800e5cc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800e5b6:	f06f 0306 	mvn.w	r3, #6
 800e5ba:	e02a      	b.n	800e612 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3314      	adds	r3, #20
 800e5c0:	f107 010c 	add.w	r1, r7, #12
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f00e f952 	bl	801c870 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <netconn_accept+0xcc>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5d8:	2200      	movs	r2, #0
 800e5da:	2101      	movs	r1, #1
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f107 0213 	add.w	r2, r7, #19
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f000 fba3 	bl	800ed34 <lwip_netconn_is_err_msg>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800e5f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5f8:	e00b      	b.n	800e612 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d102      	bne.n	800e606 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800e600:	f06f 030e 	mvn.w	r3, #14
 800e604:	e005      	b.n	800e612 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e610:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e612:	4618      	mov	r0, r3
 800e614:	3718      	adds	r7, #24
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	0801e290 	.word	0x0801e290
 800e620:	0801e468 	.word	0x0801e468
 800e624:	0801e2e8 	.word	0x0801e2e8
 800e628:	0801e488 	.word	0x0801e488

0800e62c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d109      	bne.n	800e658 <netconn_recv_data+0x2c>
 800e644:	4b58      	ldr	r3, [pc, #352]	@ (800e7a8 <netconn_recv_data+0x17c>)
 800e646:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800e64a:	4958      	ldr	r1, [pc, #352]	@ (800e7ac <netconn_recv_data+0x180>)
 800e64c:	4858      	ldr	r0, [pc, #352]	@ (800e7b0 <netconn_recv_data+0x184>)
 800e64e:	f00e fba3 	bl	801cd98 <iprintf>
 800e652:	f06f 030f 	mvn.w	r3, #15
 800e656:	e0a2      	b.n	800e79e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d109      	bne.n	800e678 <netconn_recv_data+0x4c>
 800e664:	4b50      	ldr	r3, [pc, #320]	@ (800e7a8 <netconn_recv_data+0x17c>)
 800e666:	f240 224a 	movw	r2, #586	@ 0x24a
 800e66a:	4952      	ldr	r1, [pc, #328]	@ (800e7b4 <netconn_recv_data+0x188>)
 800e66c:	4850      	ldr	r0, [pc, #320]	@ (800e7b0 <netconn_recv_data+0x184>)
 800e66e:	f00e fb93 	bl	801cd98 <iprintf>
 800e672:	f06f 030f 	mvn.w	r3, #15
 800e676:	e092      	b.n	800e79e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3310      	adds	r3, #16
 800e67c:	4618      	mov	r0, r3
 800e67e:	f00e f952 	bl	801c926 <sys_mbox_valid>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10e      	bne.n	800e6a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	f000 fb02 	bl	800ec92 <netconn_err>
 800e68e:	4603      	mov	r3, r0
 800e690:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800e692:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d002      	beq.n	800e6a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800e69a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800e69e:	e07e      	b.n	800e79e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800e6a0:	f06f 030a 	mvn.w	r3, #10
 800e6a4:	e07b      	b.n	800e79e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	7f1b      	ldrb	r3, [r3, #28]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10f      	bne.n	800e6d2 <netconn_recv_data+0xa6>
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10a      	bne.n	800e6d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	7f1b      	ldrb	r3, [r3, #28]
 800e6c0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d104      	bne.n	800e6d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d023      	beq.n	800e71a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3310      	adds	r3, #16
 800e6d6:	f107 0218 	add.w	r2, r7, #24
 800e6da:	4611      	mov	r1, r2
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f00e f906 	bl	801c8ee <sys_arch_mbox_tryfetch>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e8:	d11f      	bne.n	800e72a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 fad1 	bl	800ec92 <netconn_err>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800e6f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d002      	beq.n	800e702 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800e6fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e700:	e04d      	b.n	800e79e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	7f1b      	ldrb	r3, [r3, #28]
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d002      	beq.n	800e714 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800e70e:	f06f 030a 	mvn.w	r3, #10
 800e712:	e044      	b.n	800e79e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800e714:	f06f 0306 	mvn.w	r3, #6
 800e718:	e041      	b.n	800e79e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3310      	adds	r3, #16
 800e71e:	f107 0118 	add.w	r1, r7, #24
 800e722:	2200      	movs	r2, #0
 800e724:	4618      	mov	r0, r3
 800e726:	f00e f8a3 	bl	801c870 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e732:	2b10      	cmp	r3, #16
 800e734:	d117      	bne.n	800e766 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	f107 0217 	add.w	r2, r7, #23
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 faf8 	bl	800ed34 <lwip_netconn_is_err_msg>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d009      	beq.n	800e75e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800e74a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e74e:	f113 0f0f 	cmn.w	r3, #15
 800e752:	d101      	bne.n	800e758 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	e022      	b.n	800e79e <netconn_recv_data+0x172>
      }
      return err;
 800e758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e75c:	e01f      	b.n	800e79e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	891b      	ldrh	r3, [r3, #8]
 800e762:	83fb      	strh	r3, [r7, #30]
 800e764:	e00d      	b.n	800e782 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d106      	bne.n	800e77a <netconn_recv_data+0x14e>
 800e76c:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a8 <netconn_recv_data+0x17c>)
 800e76e:	f240 2291 	movw	r2, #657	@ 0x291
 800e772:	4911      	ldr	r1, [pc, #68]	@ (800e7b8 <netconn_recv_data+0x18c>)
 800e774:	480e      	ldr	r0, [pc, #56]	@ (800e7b0 <netconn_recv_data+0x184>)
 800e776:	f00e fb0f 	bl	801cd98 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	891b      	ldrh	r3, [r3, #8]
 800e780:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e786:	2b00      	cmp	r3, #0
 800e788:	d005      	beq.n	800e796 <netconn_recv_data+0x16a>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e78e:	8bfa      	ldrh	r2, [r7, #30]
 800e790:	2101      	movs	r1, #1
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e796:	69ba      	ldr	r2, [r7, #24]
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3720      	adds	r7, #32
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	0801e290 	.word	0x0801e290
 800e7ac:	0801e4a8 	.word	0x0801e4a8
 800e7b0:	0801e2e8 	.word	0x0801e2e8
 800e7b4:	0801e4c8 	.word	0x0801e4c8
 800e7b8:	0801e4e4 	.word	0x0801e4e4

0800e7bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d005      	beq.n	800e7da <netconn_tcp_recvd_msg+0x1e>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e7d6:	2b10      	cmp	r3, #16
 800e7d8:	d009      	beq.n	800e7ee <netconn_tcp_recvd_msg+0x32>
 800e7da:	4b0c      	ldr	r3, [pc, #48]	@ (800e80c <netconn_tcp_recvd_msg+0x50>)
 800e7dc:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800e7e0:	490b      	ldr	r1, [pc, #44]	@ (800e810 <netconn_tcp_recvd_msg+0x54>)
 800e7e2:	480c      	ldr	r0, [pc, #48]	@ (800e814 <netconn_tcp_recvd_msg+0x58>)
 800e7e4:	f00e fad8 	bl	801cd98 <iprintf>
 800e7e8:	f06f 030f 	mvn.w	r3, #15
 800e7ec:	e00a      	b.n	800e804 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800e7fa:	6879      	ldr	r1, [r7, #4]
 800e7fc:	4806      	ldr	r0, [pc, #24]	@ (800e818 <netconn_tcp_recvd_msg+0x5c>)
 800e7fe:	f7ff fd4d 	bl	800e29c <netconn_apimsg>
 800e802:	4603      	mov	r3, r0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0801e290 	.word	0x0801e290
 800e810:	0801e4f0 	.word	0x0801e4f0
 800e814:	0801e2e8 	.word	0x0801e2e8
 800e818:	0800fedb 	.word	0x0800fedb

0800e81c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b090      	sub	sp, #64	@ 0x40
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	4613      	mov	r3, r2
 800e828:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3310      	adds	r3, #16
 800e82e:	4618      	mov	r0, r3
 800e830:	f00e f879 	bl	801c926 <sys_mbox_valid>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d102      	bne.n	800e840 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800e83a:	f06f 030a 	mvn.w	r3, #10
 800e83e:	e06d      	b.n	800e91c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	7f1b      	ldrb	r3, [r3, #28]
 800e844:	b25b      	sxtb	r3, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	da07      	bge.n	800e85a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	7f1b      	ldrb	r3, [r3, #28]
 800e84e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e852:	b2da      	uxtb	r2, r3
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800e858:	e039      	b.n	800e8ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800e85a:	79fb      	ldrb	r3, [r7, #7]
 800e85c:	461a      	mov	r2, r3
 800e85e:	68b9      	ldr	r1, [r7, #8]
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f7ff fee3 	bl	800e62c <netconn_recv_data>
 800e866:	4603      	mov	r3, r0
 800e868:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800e86c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800e874:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e878:	e050      	b.n	800e91c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800e880:	79fb      	ldrb	r3, [r7, #7]
 800e882:	f003 0308 	and.w	r3, r3, #8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d10e      	bne.n	800e8a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800e88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <netconn_recv_data_tcp+0x7a>
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e892:	891b      	ldrh	r3, [r3, #8]
 800e894:	e000      	b.n	800e898 <netconn_recv_data_tcp+0x7c>
 800e896:	2301      	movs	r3, #1
 800e898:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800e89a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e89c:	f107 0214 	add.w	r2, r7, #20
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f7ff ff8a 	bl	800e7bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800e8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d134      	bne.n	800e918 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	f003 0310 	and.w	r3, r3, #16
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d009      	beq.n	800e8cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	7f1b      	ldrb	r3, [r3, #28]
 800e8bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800e8c6:	f06f 0306 	mvn.w	r3, #6
 800e8ca:	e027      	b.n	800e91c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800e8cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d005      	beq.n	800e8e2 <netconn_recv_data_tcp+0xc6>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8da:	2200      	movs	r2, #0
 800e8dc:	2101      	movs	r1, #1
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d10f      	bne.n	800e90a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f000 f9d1 	bl	800ec92 <netconn_err>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800e8f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d002      	beq.n	800e904 <netconn_recv_data_tcp+0xe8>
          return err;
 800e8fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e902:	e00b      	b.n	800e91c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800e904:	f06f 030d 	mvn.w	r3, #13
 800e908:	e008      	b.n	800e91c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e90a:	2101      	movs	r1, #1
 800e90c:	68f8      	ldr	r0, [r7, #12]
 800e90e:	f000 f983 	bl	800ec18 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e912:	f06f 030e 	mvn.w	r3, #14
 800e916:	e001      	b.n	800e91c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800e918:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3740      	adds	r7, #64	@ 0x40
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d109      	bne.n	800e94c <netconn_recv+0x28>
 800e938:	4b32      	ldr	r3, [pc, #200]	@ (800ea04 <netconn_recv+0xe0>)
 800e93a:	f240 3263 	movw	r2, #867	@ 0x363
 800e93e:	4932      	ldr	r1, [pc, #200]	@ (800ea08 <netconn_recv+0xe4>)
 800e940:	4832      	ldr	r0, [pc, #200]	@ (800ea0c <netconn_recv+0xe8>)
 800e942:	f00e fa29 	bl	801cd98 <iprintf>
 800e946:	f06f 030f 	mvn.w	r3, #15
 800e94a:	e056      	b.n	800e9fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	2200      	movs	r2, #0
 800e950:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d109      	bne.n	800e96c <netconn_recv+0x48>
 800e958:	4b2a      	ldr	r3, [pc, #168]	@ (800ea04 <netconn_recv+0xe0>)
 800e95a:	f240 3265 	movw	r2, #869	@ 0x365
 800e95e:	492c      	ldr	r1, [pc, #176]	@ (800ea10 <netconn_recv+0xec>)
 800e960:	482a      	ldr	r0, [pc, #168]	@ (800ea0c <netconn_recv+0xe8>)
 800e962:	f00e fa19 	bl	801cd98 <iprintf>
 800e966:	f06f 030f 	mvn.w	r3, #15
 800e96a:	e046      	b.n	800e9fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e974:	2b10      	cmp	r3, #16
 800e976:	d13a      	bne.n	800e9ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e978:	2300      	movs	r3, #0
 800e97a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e97c:	2006      	movs	r0, #6
 800e97e:	f003 fb89 	bl	8012094 <memp_malloc>
 800e982:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d102      	bne.n	800e990 <netconn_recv+0x6c>
      return ERR_MEM;
 800e98a:	f04f 33ff 	mov.w	r3, #4294967295
 800e98e:	e034      	b.n	800e9fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800e990:	f107 030c 	add.w	r3, r7, #12
 800e994:	2200      	movs	r2, #0
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7ff ff3f 	bl	800e81c <netconn_recv_data_tcp>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e9a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d006      	beq.n	800e9b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800e9aa:	6979      	ldr	r1, [r7, #20]
 800e9ac:	2006      	movs	r0, #6
 800e9ae:	f003 fbe7 	bl	8012180 <memp_free>
      return err;
 800e9b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9b6:	e020      	b.n	800e9fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d106      	bne.n	800e9cc <netconn_recv+0xa8>
 800e9be:	4b11      	ldr	r3, [pc, #68]	@ (800ea04 <netconn_recv+0xe0>)
 800e9c0:	f240 3279 	movw	r2, #889	@ 0x379
 800e9c4:	4913      	ldr	r1, [pc, #76]	@ (800ea14 <netconn_recv+0xf0>)
 800e9c6:	4811      	ldr	r0, [pc, #68]	@ (800ea0c <netconn_recv+0xe8>)
 800e9c8:	f00e f9e6 	bl	801cd98 <iprintf>

    buf->p = p;
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e005      	b.n	800e9fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7ff fe1a 	bl	800e62c <netconn_recv_data>
 800e9f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3718      	adds	r7, #24
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	0801e290 	.word	0x0801e290
 800ea08:	0801e4a8 	.word	0x0801e4a8
 800ea0c:	0801e2e8 	.word	0x0801e2e8
 800ea10:	0801e4c8 	.word	0x0801e4c8
 800ea14:	0801e540 	.word	0x0801e540

0800ea18 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08c      	sub	sp, #48	@ 0x30
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d109      	bne.n	800ea3c <netconn_send+0x24>
 800ea28:	4b0e      	ldr	r3, [pc, #56]	@ (800ea64 <netconn_send+0x4c>)
 800ea2a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800ea2e:	490e      	ldr	r1, [pc, #56]	@ (800ea68 <netconn_send+0x50>)
 800ea30:	480e      	ldr	r0, [pc, #56]	@ (800ea6c <netconn_send+0x54>)
 800ea32:	f00e f9b1 	bl	801cd98 <iprintf>
 800ea36:	f06f 030f 	mvn.w	r3, #15
 800ea3a:	e00e      	b.n	800ea5a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800ea44:	f107 030c 	add.w	r3, r7, #12
 800ea48:	4619      	mov	r1, r3
 800ea4a:	4809      	ldr	r0, [pc, #36]	@ (800ea70 <netconn_send+0x58>)
 800ea4c:	f7ff fc26 	bl	800e29c <netconn_apimsg>
 800ea50:	4603      	mov	r3, r0
 800ea52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ea56:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3730      	adds	r7, #48	@ 0x30
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	bf00      	nop
 800ea64:	0801e290 	.word	0x0801e290
 800ea68:	0801e54c 	.word	0x0801e54c
 800ea6c:	0801e2e8 	.word	0x0801e2e8
 800ea70:	0800fe41 	.word	0x0800fe41

0800ea74 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b088      	sub	sp, #32
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ea8a:	78fa      	ldrb	r2, [r7, #3]
 800ea8c:	f107 0110 	add.w	r1, r7, #16
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	4613      	mov	r3, r2
 800ea96:	2201      	movs	r2, #1
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f000 f805 	bl	800eaa8 <netconn_write_vectors_partly>
 800ea9e:	4603      	mov	r3, r0
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b092      	sub	sp, #72	@ 0x48
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	4611      	mov	r1, r2
 800eab4:	461a      	mov	r2, r3
 800eab6:	460b      	mov	r3, r1
 800eab8:	80fb      	strh	r3, [r7, #6]
 800eaba:	4613      	mov	r3, r2
 800eabc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d109      	bne.n	800ead8 <netconn_write_vectors_partly+0x30>
 800eac4:	4b4e      	ldr	r3, [pc, #312]	@ (800ec00 <netconn_write_vectors_partly+0x158>)
 800eac6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800eaca:	494e      	ldr	r1, [pc, #312]	@ (800ec04 <netconn_write_vectors_partly+0x15c>)
 800eacc:	484e      	ldr	r0, [pc, #312]	@ (800ec08 <netconn_write_vectors_partly+0x160>)
 800eace:	f00e f963 	bl	801cd98 <iprintf>
 800ead2:	f06f 030f 	mvn.w	r3, #15
 800ead6:	e08e      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eae0:	2b10      	cmp	r3, #16
 800eae2:	d009      	beq.n	800eaf8 <netconn_write_vectors_partly+0x50>
 800eae4:	4b46      	ldr	r3, [pc, #280]	@ (800ec00 <netconn_write_vectors_partly+0x158>)
 800eae6:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800eaea:	4948      	ldr	r1, [pc, #288]	@ (800ec0c <netconn_write_vectors_partly+0x164>)
 800eaec:	4846      	ldr	r0, [pc, #280]	@ (800ec08 <netconn_write_vectors_partly+0x160>)
 800eaee:	f00e f953 	bl	801cd98 <iprintf>
 800eaf2:	f06f 0305 	mvn.w	r3, #5
 800eaf6:	e07e      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	7f1b      	ldrb	r3, [r3, #28]
 800eafc:	f003 0302 	and.w	r3, r3, #2
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d104      	bne.n	800eb0e <netconn_write_vectors_partly+0x66>
 800eb04:	797b      	ldrb	r3, [r7, #5]
 800eb06:	f003 0304 	and.w	r3, r3, #4
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <netconn_write_vectors_partly+0x6a>
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e000      	b.n	800eb14 <netconn_write_vectors_partly+0x6c>
 800eb12:	2300      	movs	r3, #0
 800eb14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800eb18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d005      	beq.n	800eb2c <netconn_write_vectors_partly+0x84>
 800eb20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800eb26:	f06f 0305 	mvn.w	r3, #5
 800eb2a:	e064      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800eb30:	2300      	movs	r3, #0
 800eb32:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb34:	e015      	b.n	800eb62 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800eb36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	68ba      	ldr	r2, [r7, #8]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb42:	4413      	add	r3, r2
 800eb44:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800eb46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb48:	00db      	lsls	r3, r3, #3
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d202      	bcs.n	800eb5c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800eb56:	f06f 0305 	mvn.w	r3, #5
 800eb5a:	e04c      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800eb5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb5e:	3301      	adds	r3, #1
 800eb60:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb62:	88fb      	ldrh	r3, [r7, #6]
 800eb64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb66:	429a      	cmp	r2, r3
 800eb68:	dbe5      	blt.n	800eb36 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800eb6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800eb70:	2300      	movs	r3, #0
 800eb72:	e040      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800eb74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	da0a      	bge.n	800eb90 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800eb7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800eb80:	f06f 0305 	mvn.w	r3, #5
 800eb84:	e037      	b.n	800ebf6 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800eb86:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eb8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800eb8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800eb98:	88fb      	ldrh	r3, [r7, #6]
 800eb9a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800eba0:	797b      	ldrb	r3, [r7, #5]
 800eba2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800eba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ebae:	f107 0314 	add.w	r3, r7, #20
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4816      	ldr	r0, [pc, #88]	@ (800ec10 <netconn_write_vectors_partly+0x168>)
 800ebb6:	f7ff fb71 	bl	800e29c <netconn_apimsg>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800ebc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d114      	bne.n	800ebf2 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800ebc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ebce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebd2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ebd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10a      	bne.n	800ebf2 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ebdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d006      	beq.n	800ebf2 <netconn_write_vectors_partly+0x14a>
 800ebe4:	4b06      	ldr	r3, [pc, #24]	@ (800ec00 <netconn_write_vectors_partly+0x158>)
 800ebe6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ebea:	490a      	ldr	r1, [pc, #40]	@ (800ec14 <netconn_write_vectors_partly+0x16c>)
 800ebec:	4806      	ldr	r0, [pc, #24]	@ (800ec08 <netconn_write_vectors_partly+0x160>)
 800ebee:	f00e f8d3 	bl	801cd98 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ebf2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3748      	adds	r7, #72	@ 0x48
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	0801e290 	.word	0x0801e290
 800ec04:	0801e568 	.word	0x0801e568
 800ec08:	0801e2e8 	.word	0x0801e2e8
 800ec0c:	0801e584 	.word	0x0801e584
 800ec10:	080102dd 	.word	0x080102dd
 800ec14:	0801e5a8 	.word	0x0801e5a8

0800ec18 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08c      	sub	sp, #48	@ 0x30
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	460b      	mov	r3, r1
 800ec22:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d109      	bne.n	800ec3e <netconn_close_shutdown+0x26>
 800ec2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ec68 <netconn_close_shutdown+0x50>)
 800ec2c:	f240 4247 	movw	r2, #1095	@ 0x447
 800ec30:	490e      	ldr	r1, [pc, #56]	@ (800ec6c <netconn_close_shutdown+0x54>)
 800ec32:	480f      	ldr	r0, [pc, #60]	@ (800ec70 <netconn_close_shutdown+0x58>)
 800ec34:	f00e f8b0 	bl	801cd98 <iprintf>
 800ec38:	f06f 030f 	mvn.w	r3, #15
 800ec3c:	e010      	b.n	800ec60 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ec42:	78fb      	ldrb	r3, [r7, #3]
 800ec44:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ec46:	2329      	movs	r3, #41	@ 0x29
 800ec48:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ec4a:	f107 030c 	add.w	r3, r7, #12
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4808      	ldr	r0, [pc, #32]	@ (800ec74 <netconn_close_shutdown+0x5c>)
 800ec52:	f7ff fb23 	bl	800e29c <netconn_apimsg>
 800ec56:	4603      	mov	r3, r0
 800ec58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ec5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3730      	adds	r7, #48	@ 0x30
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	0801e290 	.word	0x0801e290
 800ec6c:	0801e5cc 	.word	0x0801e5cc
 800ec70:	0801e2e8 	.word	0x0801e2e8
 800ec74:	080103f5 	.word	0x080103f5

0800ec78 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ec80:	2103      	movs	r1, #3
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff ffc8 	bl	800ec18 <netconn_close_shutdown>
 800ec88:	4603      	mov	r3, r0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b084      	sub	sp, #16
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <netconn_err+0x12>
    return ERR_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	e00d      	b.n	800ecc0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800eca4:	f00d ff5a 	bl	801cb5c <sys_arch_protect>
 800eca8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	7a1b      	ldrb	r3, [r3, #8]
 800ecae:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f00d ff5e 	bl	801cb78 <sys_arch_unprotect>
  return err;
 800ecbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	4603      	mov	r3, r0
 800ecd0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ecd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecd6:	f113 0f0d 	cmn.w	r3, #13
 800ecda:	d009      	beq.n	800ecf0 <lwip_netconn_err_to_msg+0x28>
 800ecdc:	f113 0f0d 	cmn.w	r3, #13
 800ece0:	dc0c      	bgt.n	800ecfc <lwip_netconn_err_to_msg+0x34>
 800ece2:	f113 0f0f 	cmn.w	r3, #15
 800ece6:	d007      	beq.n	800ecf8 <lwip_netconn_err_to_msg+0x30>
 800ece8:	f113 0f0e 	cmn.w	r3, #14
 800ecec:	d002      	beq.n	800ecf4 <lwip_netconn_err_to_msg+0x2c>
 800ecee:	e005      	b.n	800ecfc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ecf0:	4b0a      	ldr	r3, [pc, #40]	@ (800ed1c <lwip_netconn_err_to_msg+0x54>)
 800ecf2:	e00e      	b.n	800ed12 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ed20 <lwip_netconn_err_to_msg+0x58>)
 800ecf6:	e00c      	b.n	800ed12 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ecf8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed24 <lwip_netconn_err_to_msg+0x5c>)
 800ecfa:	e00a      	b.n	800ed12 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ecfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d005      	beq.n	800ed10 <lwip_netconn_err_to_msg+0x48>
 800ed04:	4b08      	ldr	r3, [pc, #32]	@ (800ed28 <lwip_netconn_err_to_msg+0x60>)
 800ed06:	227d      	movs	r2, #125	@ 0x7d
 800ed08:	4908      	ldr	r1, [pc, #32]	@ (800ed2c <lwip_netconn_err_to_msg+0x64>)
 800ed0a:	4809      	ldr	r0, [pc, #36]	@ (800ed30 <lwip_netconn_err_to_msg+0x68>)
 800ed0c:	f00e f844 	bl	801cd98 <iprintf>
      return NULL;
 800ed10:	2300      	movs	r3, #0
  }
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	080219a4 	.word	0x080219a4
 800ed20:	080219a5 	.word	0x080219a5
 800ed24:	080219a6 	.word	0x080219a6
 800ed28:	0801e5e8 	.word	0x0801e5e8
 800ed2c:	0801e61c 	.word	0x0801e61c
 800ed30:	0801e62c 	.word	0x0801e62c

0800ed34 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d105      	bne.n	800ed50 <lwip_netconn_is_err_msg+0x1c>
 800ed44:	4b12      	ldr	r3, [pc, #72]	@ (800ed90 <lwip_netconn_is_err_msg+0x5c>)
 800ed46:	2285      	movs	r2, #133	@ 0x85
 800ed48:	4912      	ldr	r1, [pc, #72]	@ (800ed94 <lwip_netconn_is_err_msg+0x60>)
 800ed4a:	4813      	ldr	r0, [pc, #76]	@ (800ed98 <lwip_netconn_is_err_msg+0x64>)
 800ed4c:	f00e f824 	bl	801cd98 <iprintf>

  if (msg == &netconn_aborted) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a12      	ldr	r2, [pc, #72]	@ (800ed9c <lwip_netconn_is_err_msg+0x68>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d104      	bne.n	800ed62 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	22f3      	movs	r2, #243	@ 0xf3
 800ed5c:	701a      	strb	r2, [r3, #0]
    return 1;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e012      	b.n	800ed88 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a0e      	ldr	r2, [pc, #56]	@ (800eda0 <lwip_netconn_is_err_msg+0x6c>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d104      	bne.n	800ed74 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	22f2      	movs	r2, #242	@ 0xf2
 800ed6e:	701a      	strb	r2, [r3, #0]
    return 1;
 800ed70:	2301      	movs	r3, #1
 800ed72:	e009      	b.n	800ed88 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	4a0b      	ldr	r2, [pc, #44]	@ (800eda4 <lwip_netconn_is_err_msg+0x70>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d104      	bne.n	800ed86 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	22f1      	movs	r2, #241	@ 0xf1
 800ed80:	701a      	strb	r2, [r3, #0]
    return 1;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e000      	b.n	800ed88 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	0801e5e8 	.word	0x0801e5e8
 800ed94:	0801e654 	.word	0x0801e654
 800ed98:	0801e62c 	.word	0x0801e62c
 800ed9c:	080219a4 	.word	0x080219a4
 800eda0:	080219a5 	.word	0x080219a5
 800eda4:	080219a6 	.word	0x080219a6

0800eda8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d105      	bne.n	800edc8 <recv_udp+0x20>
 800edbc:	4b34      	ldr	r3, [pc, #208]	@ (800ee90 <recv_udp+0xe8>)
 800edbe:	22e5      	movs	r2, #229	@ 0xe5
 800edc0:	4934      	ldr	r1, [pc, #208]	@ (800ee94 <recv_udp+0xec>)
 800edc2:	4835      	ldr	r0, [pc, #212]	@ (800ee98 <recv_udp+0xf0>)
 800edc4:	f00d ffe8 	bl	801cd98 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d105      	bne.n	800edda <recv_udp+0x32>
 800edce:	4b30      	ldr	r3, [pc, #192]	@ (800ee90 <recv_udp+0xe8>)
 800edd0:	22e6      	movs	r2, #230	@ 0xe6
 800edd2:	4932      	ldr	r1, [pc, #200]	@ (800ee9c <recv_udp+0xf4>)
 800edd4:	4830      	ldr	r0, [pc, #192]	@ (800ee98 <recv_udp+0xf0>)
 800edd6:	f00d ffdf 	bl	801cd98 <iprintf>
  conn = (struct netconn *)arg;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d103      	bne.n	800edec <recv_udp+0x44>
    pbuf_free(p);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f004 f86f 	bl	8012ec8 <pbuf_free>
    return;
 800edea:	e04d      	b.n	800ee88 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	685b      	ldr	r3, [r3, #4]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d005      	beq.n	800ee02 <recv_udp+0x5a>
 800edf6:	4b26      	ldr	r3, [pc, #152]	@ (800ee90 <recv_udp+0xe8>)
 800edf8:	22ee      	movs	r2, #238	@ 0xee
 800edfa:	4929      	ldr	r1, [pc, #164]	@ (800eea0 <recv_udp+0xf8>)
 800edfc:	4826      	ldr	r0, [pc, #152]	@ (800ee98 <recv_udp+0xf0>)
 800edfe:	f00d ffcb 	bl	801cd98 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	3310      	adds	r3, #16
 800ee06:	4618      	mov	r0, r3
 800ee08:	f00d fd8d 	bl	801c926 <sys_mbox_valid>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d103      	bne.n	800ee1a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f004 f858 	bl	8012ec8 <pbuf_free>
    return;
 800ee18:	e036      	b.n	800ee88 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ee1a:	2006      	movs	r0, #6
 800ee1c:	f003 f93a 	bl	8012094 <memp_malloc>
 800ee20:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d103      	bne.n	800ee30 <recv_udp+0x88>
    pbuf_free(p);
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f004 f84d 	bl	8012ec8 <pbuf_free>
    return;
 800ee2e:	e02b      	b.n	800ee88 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <recv_udp+0xa0>
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	e000      	b.n	800ee4a <recv_udp+0xa2>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	69ba      	ldr	r2, [r7, #24]
 800ee4c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ee52:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	891b      	ldrh	r3, [r3, #8]
 800ee58:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	3310      	adds	r3, #16
 800ee5e:	69b9      	ldr	r1, [r7, #24]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f00d fceb 	bl	801c83c <sys_mbox_trypost>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d003      	beq.n	800ee74 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ee6c:	69b8      	ldr	r0, [r7, #24]
 800ee6e:	f001 fb4d 	bl	801050c <netbuf_delete>
    return;
 800ee72:	e009      	b.n	800ee88 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ee74:	69fb      	ldr	r3, [r7, #28]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d005      	beq.n	800ee88 <recv_udp+0xe0>
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee80:	8afa      	ldrh	r2, [r7, #22]
 800ee82:	2100      	movs	r1, #0
 800ee84:	69f8      	ldr	r0, [r7, #28]
 800ee86:	4798      	blx	r3
  }
}
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	0801e5e8 	.word	0x0801e5e8
 800ee94:	0801e660 	.word	0x0801e660
 800ee98:	0801e62c 	.word	0x0801e62c
 800ee9c:	0801e684 	.word	0x0801e684
 800eea0:	0801e6a4 	.word	0x0801e6a4

0800eea4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b088      	sub	sp, #32
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	60f8      	str	r0, [r7, #12]
 800eeac:	60b9      	str	r1, [r7, #8]
 800eeae:	607a      	str	r2, [r7, #4]
 800eeb0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d106      	bne.n	800eec6 <recv_tcp+0x22>
 800eeb8:	4b36      	ldr	r3, [pc, #216]	@ (800ef94 <recv_tcp+0xf0>)
 800eeba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800eebe:	4936      	ldr	r1, [pc, #216]	@ (800ef98 <recv_tcp+0xf4>)
 800eec0:	4836      	ldr	r0, [pc, #216]	@ (800ef9c <recv_tcp+0xf8>)
 800eec2:	f00d ff69 	bl	801cd98 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d106      	bne.n	800eeda <recv_tcp+0x36>
 800eecc:	4b31      	ldr	r3, [pc, #196]	@ (800ef94 <recv_tcp+0xf0>)
 800eece:	f240 122d 	movw	r2, #301	@ 0x12d
 800eed2:	4933      	ldr	r1, [pc, #204]	@ (800efa0 <recv_tcp+0xfc>)
 800eed4:	4831      	ldr	r0, [pc, #196]	@ (800ef9c <recv_tcp+0xf8>)
 800eed6:	f00d ff5f 	bl	801cd98 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800eeda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d006      	beq.n	800eef0 <recv_tcp+0x4c>
 800eee2:	4b2c      	ldr	r3, [pc, #176]	@ (800ef94 <recv_tcp+0xf0>)
 800eee4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800eee8:	492e      	ldr	r1, [pc, #184]	@ (800efa4 <recv_tcp+0x100>)
 800eeea:	482c      	ldr	r0, [pc, #176]	@ (800ef9c <recv_tcp+0xf8>)
 800eeec:	f00d ff54 	bl	801cd98 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d102      	bne.n	800ef00 <recv_tcp+0x5c>
    return ERR_VAL;
 800eefa:	f06f 0305 	mvn.w	r3, #5
 800eefe:	e045      	b.n	800ef8c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d006      	beq.n	800ef18 <recv_tcp+0x74>
 800ef0a:	4b22      	ldr	r3, [pc, #136]	@ (800ef94 <recv_tcp+0xf0>)
 800ef0c:	f240 1235 	movw	r2, #309	@ 0x135
 800ef10:	4925      	ldr	r1, [pc, #148]	@ (800efa8 <recv_tcp+0x104>)
 800ef12:	4822      	ldr	r0, [pc, #136]	@ (800ef9c <recv_tcp+0xf8>)
 800ef14:	f00d ff40 	bl	801cd98 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	3310      	adds	r3, #16
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f00d fd02 	bl	801c926 <sys_mbox_valid>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10d      	bne.n	800ef44 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d008      	beq.n	800ef40 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	891b      	ldrh	r3, [r3, #8]
 800ef32:	4619      	mov	r1, r3
 800ef34:	68b8      	ldr	r0, [r7, #8]
 800ef36:	f004 ffa1 	bl	8013e7c <tcp_recved>
      pbuf_free(p);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f003 ffc4 	bl	8012ec8 <pbuf_free>
    }
    return ERR_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	e023      	b.n	800ef8c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d005      	beq.n	800ef56 <recv_tcp+0xb2>
    msg = p;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	83fb      	strh	r3, [r7, #30]
 800ef54:	e003      	b.n	800ef5e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ef56:	4b15      	ldr	r3, [pc, #84]	@ (800efac <recv_tcp+0x108>)
 800ef58:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	3310      	adds	r3, #16
 800ef62:	69b9      	ldr	r1, [r7, #24]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f00d fc69 	bl	801c83c <sys_mbox_trypost>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d002      	beq.n	800ef76 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ef70:	f04f 33ff 	mov.w	r3, #4294967295
 800ef74:	e00a      	b.n	800ef8c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d005      	beq.n	800ef8a <recv_tcp+0xe6>
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef82:	8bfa      	ldrh	r2, [r7, #30]
 800ef84:	2100      	movs	r1, #0
 800ef86:	6978      	ldr	r0, [r7, #20]
 800ef88:	4798      	blx	r3
  }

  return ERR_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3720      	adds	r7, #32
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	0801e5e8 	.word	0x0801e5e8
 800ef98:	0801e6c4 	.word	0x0801e6c4
 800ef9c:	0801e62c 	.word	0x0801e62c
 800efa0:	0801e6e8 	.word	0x0801e6e8
 800efa4:	0801e708 	.word	0x0801e708
 800efa8:	0801e720 	.word	0x0801e720
 800efac:	080219a6 	.word	0x080219a6

0800efb0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <poll_tcp+0x22>
 800efc4:	4b29      	ldr	r3, [pc, #164]	@ (800f06c <poll_tcp+0xbc>)
 800efc6:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800efca:	4929      	ldr	r1, [pc, #164]	@ (800f070 <poll_tcp+0xc0>)
 800efcc:	4829      	ldr	r0, [pc, #164]	@ (800f074 <poll_tcp+0xc4>)
 800efce:	f00d fee3 	bl	801cd98 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	785b      	ldrb	r3, [r3, #1]
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d104      	bne.n	800efe4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800efda:	2101      	movs	r1, #1
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 ffb1 	bl	800ff44 <lwip_netconn_do_writemore>
 800efe2:	e016      	b.n	800f012 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	785b      	ldrb	r3, [r3, #1]
 800efe8:	2b04      	cmp	r3, #4
 800efea:	d112      	bne.n	800f012 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	6a1b      	ldr	r3, [r3, #32]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00a      	beq.n	800f00a <poll_tcp+0x5a>
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	6a1b      	ldr	r3, [r3, #32]
 800eff8:	7a5b      	ldrb	r3, [r3, #9]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	7a5a      	ldrb	r2, [r3, #9]
 800f004:	3a01      	subs	r2, #1
 800f006:	b2d2      	uxtb	r2, r2
 800f008:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f00a:	2101      	movs	r1, #1
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f000 fbf7 	bl	800f800 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	7f1b      	ldrb	r3, [r3, #28]
 800f016:	f003 0310 	and.w	r3, r3, #16
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d021      	beq.n	800f062 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d01d      	beq.n	800f062 <poll_tcp+0xb2>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f02e:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800f032:	d316      	bcc.n	800f062 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f03c:	2b04      	cmp	r3, #4
 800f03e:	d810      	bhi.n	800f062 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	7f1b      	ldrb	r3, [r3, #28]
 800f044:	f023 0310 	bic.w	r3, r3, #16
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <poll_tcp+0xb2>
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f05a:	2200      	movs	r2, #0
 800f05c:	2102      	movs	r1, #2
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	0801e5e8 	.word	0x0801e5e8
 800f070:	0801e740 	.word	0x0801e740
 800f074:	0801e62c 	.word	0x0801e62c

0800f078 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	4613      	mov	r3, r2
 800f084:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d106      	bne.n	800f09e <sent_tcp+0x26>
 800f090:	4b20      	ldr	r3, [pc, #128]	@ (800f114 <sent_tcp+0x9c>)
 800f092:	f240 1293 	movw	r2, #403	@ 0x193
 800f096:	4920      	ldr	r1, [pc, #128]	@ (800f118 <sent_tcp+0xa0>)
 800f098:	4820      	ldr	r0, [pc, #128]	@ (800f11c <sent_tcp+0xa4>)
 800f09a:	f00d fe7d 	bl	801cd98 <iprintf>

  if (conn) {
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d032      	beq.n	800f10a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	785b      	ldrb	r3, [r3, #1]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d104      	bne.n	800f0b6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	6978      	ldr	r0, [r7, #20]
 800f0b0:	f000 ff48 	bl	800ff44 <lwip_netconn_do_writemore>
 800f0b4:	e007      	b.n	800f0c6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	785b      	ldrb	r3, [r3, #1]
 800f0ba:	2b04      	cmp	r3, #4
 800f0bc:	d103      	bne.n	800f0c6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f0be:	2101      	movs	r1, #1
 800f0c0:	6978      	ldr	r0, [r7, #20]
 800f0c2:	f000 fb9d 	bl	800f800 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d01d      	beq.n	800f10a <sent_tcp+0x92>
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f0d6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800f0da:	d316      	bcc.n	800f10a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f0e4:	2b04      	cmp	r3, #4
 800f0e6:	d810      	bhi.n	800f10a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	7f1b      	ldrb	r3, [r3, #28]
 800f0ec:	f023 0310 	bic.w	r3, r3, #16
 800f0f0:	b2da      	uxtb	r2, r3
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d005      	beq.n	800f10a <sent_tcp+0x92>
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f102:	88fa      	ldrh	r2, [r7, #6]
 800f104:	2102      	movs	r1, #2
 800f106:	6978      	ldr	r0, [r7, #20]
 800f108:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f10a:	2300      	movs	r3, #0
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3718      	adds	r7, #24
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	0801e5e8 	.word	0x0801e5e8
 800f118:	0801e740 	.word	0x0801e740
 800f11c:	0801e62c 	.word	0x0801e62c

0800f120 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
 800f128:	460b      	mov	r3, r1
 800f12a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d106      	bne.n	800f144 <err_tcp+0x24>
 800f136:	4b5f      	ldr	r3, [pc, #380]	@ (800f2b4 <err_tcp+0x194>)
 800f138:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f13c:	495e      	ldr	r1, [pc, #376]	@ (800f2b8 <err_tcp+0x198>)
 800f13e:	485f      	ldr	r0, [pc, #380]	@ (800f2bc <err_tcp+0x19c>)
 800f140:	f00d fe2a 	bl	801cd98 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f144:	f00d fd0a 	bl	801cb5c <sys_arch_protect>
 800f148:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	2200      	movs	r2, #0
 800f14e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	78fa      	ldrb	r2, [r7, #3]
 800f154:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	7f1b      	ldrb	r3, [r3, #28]
 800f15a:	f043 0301 	orr.w	r3, r3, #1
 800f15e:	b2da      	uxtb	r2, r3
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	785b      	ldrb	r3, [r3, #1]
 800f168:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	2200      	movs	r2, #0
 800f16e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f170:	69b8      	ldr	r0, [r7, #24]
 800f172:	f00d fd01 	bl	801cb78 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d005      	beq.n	800f18a <err_tcp+0x6a>
 800f17e:	69fb      	ldr	r3, [r7, #28]
 800f180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f182:	2200      	movs	r2, #0
 800f184:	2104      	movs	r1, #4
 800f186:	69f8      	ldr	r0, [r7, #28]
 800f188:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d005      	beq.n	800f19e <err_tcp+0x7e>
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f196:	2200      	movs	r2, #0
 800f198:	2100      	movs	r1, #0
 800f19a:	69f8      	ldr	r0, [r7, #28]
 800f19c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d005      	beq.n	800f1b2 <err_tcp+0x92>
 800f1a6:	69fb      	ldr	r3, [r7, #28]
 800f1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	2102      	movs	r1, #2
 800f1ae:	69f8      	ldr	r0, [r7, #28]
 800f1b0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f1b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fd86 	bl	800ecc8 <lwip_netconn_err_to_msg>
 800f1bc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	3310      	adds	r3, #16
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f00d fbaf 	bl	801c926 <sys_mbox_valid>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d005      	beq.n	800f1da <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	3310      	adds	r3, #16
 800f1d2:	6939      	ldr	r1, [r7, #16]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f00d fb31 	bl	801c83c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	3314      	adds	r3, #20
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f00d fba1 	bl	801c926 <sys_mbox_valid>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d005      	beq.n	800f1f6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	3314      	adds	r3, #20
 800f1ee:	6939      	ldr	r1, [r7, #16]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f00d fb23 	bl	801c83c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d005      	beq.n	800f208 <err_tcp+0xe8>
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
 800f1fe:	2b04      	cmp	r3, #4
 800f200:	d002      	beq.n	800f208 <err_tcp+0xe8>
 800f202:	7dfb      	ldrb	r3, [r7, #23]
 800f204:	2b03      	cmp	r3, #3
 800f206:	d143      	bne.n	800f290 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	7f1b      	ldrb	r3, [r3, #28]
 800f20c:	f003 0304 	and.w	r3, r3, #4
 800f210:	2b00      	cmp	r3, #0
 800f212:	bf14      	ite	ne
 800f214:	2301      	movne	r3, #1
 800f216:	2300      	moveq	r3, #0
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	7f1b      	ldrb	r3, [r3, #28]
 800f220:	f023 0304 	bic.w	r3, r3, #4
 800f224:	b2da      	uxtb	r2, r3
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d13b      	bne.n	800f2a8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d106      	bne.n	800f246 <err_tcp+0x126>
 800f238:	4b1e      	ldr	r3, [pc, #120]	@ (800f2b4 <err_tcp+0x194>)
 800f23a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f23e:	4920      	ldr	r1, [pc, #128]	@ (800f2c0 <err_tcp+0x1a0>)
 800f240:	481e      	ldr	r0, [pc, #120]	@ (800f2bc <err_tcp+0x19c>)
 800f242:	f00d fda9 	bl	801cd98 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	2b04      	cmp	r3, #4
 800f24a:	d104      	bne.n	800f256 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	6a1b      	ldr	r3, [r3, #32]
 800f250:	2200      	movs	r2, #0
 800f252:	711a      	strb	r2, [r3, #4]
 800f254:	e003      	b.n	800f25e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f256:	69fb      	ldr	r3, [r7, #28]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	78fa      	ldrb	r2, [r7, #3]
 800f25c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	6a1b      	ldr	r3, [r3, #32]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	330c      	adds	r3, #12
 800f266:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f268:	68b8      	ldr	r0, [r7, #8]
 800f26a:	f00d fbed 	bl	801ca48 <sys_sem_valid>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <err_tcp+0x162>
 800f274:	4b0f      	ldr	r3, [pc, #60]	@ (800f2b4 <err_tcp+0x194>)
 800f276:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800f27a:	4912      	ldr	r1, [pc, #72]	@ (800f2c4 <err_tcp+0x1a4>)
 800f27c:	480f      	ldr	r0, [pc, #60]	@ (800f2bc <err_tcp+0x19c>)
 800f27e:	f00d fd8b 	bl	801cd98 <iprintf>
      conn->current_msg = NULL;
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	2200      	movs	r2, #0
 800f286:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	f00d fbc3 	bl	801ca14 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f28e:	e00b      	b.n	800f2a8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	6a1b      	ldr	r3, [r3, #32]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d008      	beq.n	800f2aa <err_tcp+0x18a>
 800f298:	4b06      	ldr	r3, [pc, #24]	@ (800f2b4 <err_tcp+0x194>)
 800f29a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800f29e:	490a      	ldr	r1, [pc, #40]	@ (800f2c8 <err_tcp+0x1a8>)
 800f2a0:	4806      	ldr	r0, [pc, #24]	@ (800f2bc <err_tcp+0x19c>)
 800f2a2:	f00d fd79 	bl	801cd98 <iprintf>
  }
}
 800f2a6:	e000      	b.n	800f2aa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f2a8:	bf00      	nop
}
 800f2aa:	bf00      	nop
 800f2ac:	3720      	adds	r7, #32
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0801e5e8 	.word	0x0801e5e8
 800f2b8:	0801e740 	.word	0x0801e740
 800f2bc:	0801e62c 	.word	0x0801e62c
 800f2c0:	0801e750 	.word	0x0801e750
 800f2c4:	0801e76c 	.word	0x0801e76c
 800f2c8:	0801e788 	.word	0x0801e788

0800f2cc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f2da:	6879      	ldr	r1, [r7, #4]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f005 fcb3 	bl	8014c48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f2e2:	490a      	ldr	r1, [pc, #40]	@ (800f30c <setup_tcp+0x40>)
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f005 fcc1 	bl	8014c6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f2ea:	4909      	ldr	r1, [pc, #36]	@ (800f310 <setup_tcp+0x44>)
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f005 fcdf 	bl	8014cb0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f2f2:	2202      	movs	r2, #2
 800f2f4:	4907      	ldr	r1, [pc, #28]	@ (800f314 <setup_tcp+0x48>)
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f005 fd36 	bl	8014d68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f2fc:	4906      	ldr	r1, [pc, #24]	@ (800f318 <setup_tcp+0x4c>)
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f005 fcf8 	bl	8014cf4 <tcp_err>
}
 800f304:	bf00      	nop
 800f306:	3710      	adds	r7, #16
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	0800eea5 	.word	0x0800eea5
 800f310:	0800f079 	.word	0x0800f079
 800f314:	0800efb1 	.word	0x0800efb1
 800f318:	0800f121 	.word	0x0800f121

0800f31c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f31c:	b590      	push	{r4, r7, lr}
 800f31e:	b089      	sub	sp, #36	@ 0x24
 800f320:	af00      	add	r7, sp, #0
 800f322:	60f8      	str	r0, [r7, #12]
 800f324:	60b9      	str	r1, [r7, #8]
 800f326:	4613      	mov	r3, r2
 800f328:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d102      	bne.n	800f33a <accept_function+0x1e>
    return ERR_VAL;
 800f334:	f06f 0305 	mvn.w	r3, #5
 800f338:	e0a1      	b.n	800f47e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	3314      	adds	r3, #20
 800f33e:	4618      	mov	r0, r3
 800f340:	f00d faf1 	bl	801c926 <sys_mbox_valid>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d102      	bne.n	800f350 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f34a:	f06f 0305 	mvn.w	r3, #5
 800f34e:	e096      	b.n	800f47e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d11b      	bne.n	800f38e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	f103 0414 	add.w	r4, r3, #20
 800f35c:	f06f 000c 	mvn.w	r0, #12
 800f360:	f7ff fcb2 	bl	800ecc8 <lwip_netconn_err_to_msg>
 800f364:	4603      	mov	r3, r0
 800f366:	4619      	mov	r1, r3
 800f368:	4620      	mov	r0, r4
 800f36a:	f00d fa67 	bl	801c83c <sys_mbox_trypost>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d109      	bne.n	800f388 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <accept_function+0x6c>
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f380:	2200      	movs	r2, #0
 800f382:	2100      	movs	r1, #0
 800f384:	69f8      	ldr	r0, [r7, #28]
 800f386:	4798      	blx	r3
    }
    return ERR_VAL;
 800f388:	f06f 0305 	mvn.w	r3, #5
 800f38c:	e077      	b.n	800f47e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f38e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d006      	beq.n	800f3a4 <accept_function+0x88>
 800f396:	4b3c      	ldr	r3, [pc, #240]	@ (800f488 <accept_function+0x16c>)
 800f398:	f240 222a 	movw	r2, #554	@ 0x22a
 800f39c:	493b      	ldr	r1, [pc, #236]	@ (800f48c <accept_function+0x170>)
 800f39e:	483c      	ldr	r0, [pc, #240]	@ (800f490 <accept_function+0x174>)
 800f3a0:	f00d fcfa 	bl	801cd98 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	781a      	ldrb	r2, [r3, #0]
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	f000 f8f0 	bl	800f594 <netconn_alloc>
 800f3b4:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d11b      	bne.n	800f3f4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	f103 0414 	add.w	r4, r3, #20
 800f3c2:	f06f 000c 	mvn.w	r0, #12
 800f3c6:	f7ff fc7f 	bl	800ecc8 <lwip_netconn_err_to_msg>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f00d fa34 	bl	801c83c <sys_mbox_trypost>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d005      	beq.n	800f3ee <accept_function+0xd2>
 800f3e2:	69fb      	ldr	r3, [r7, #28]
 800f3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	69f8      	ldr	r0, [r7, #28]
 800f3ec:	4798      	blx	r3
    }
    return ERR_MEM;
 800f3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f2:	e044      	b.n	800f47e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	68ba      	ldr	r2, [r7, #8]
 800f3f8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f3fa:	69b8      	ldr	r0, [r7, #24]
 800f3fc:	f7ff ff66 	bl	800f2cc <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	3314      	adds	r3, #20
 800f404:	69b9      	ldr	r1, [r7, #24]
 800f406:	4618      	mov	r0, r3
 800f408:	f00d fa18 	bl	801c83c <sys_mbox_trypost>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d02a      	beq.n	800f468 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f418:	2100      	movs	r1, #0
 800f41a:	6978      	ldr	r0, [r7, #20]
 800f41c:	f005 fc14 	bl	8014c48 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f420:	2100      	movs	r1, #0
 800f422:	6978      	ldr	r0, [r7, #20]
 800f424:	f005 fc22 	bl	8014c6c <tcp_recv>
    tcp_sent(pcb, NULL);
 800f428:	2100      	movs	r1, #0
 800f42a:	6978      	ldr	r0, [r7, #20]
 800f42c:	f005 fc40 	bl	8014cb0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f430:	2200      	movs	r2, #0
 800f432:	2100      	movs	r1, #0
 800f434:	6978      	ldr	r0, [r7, #20]
 800f436:	f005 fc97 	bl	8014d68 <tcp_poll>
    tcp_err(pcb, NULL);
 800f43a:	2100      	movs	r1, #0
 800f43c:	6978      	ldr	r0, [r7, #20]
 800f43e:	f005 fc59 	bl	8014cf4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	2200      	movs	r2, #0
 800f446:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	3310      	adds	r3, #16
 800f44c:	4618      	mov	r0, r3
 800f44e:	f00d f9e3 	bl	801c818 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	3310      	adds	r3, #16
 800f456:	4618      	mov	r0, r3
 800f458:	f00d fa76 	bl	801c948 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f45c:	69b8      	ldr	r0, [r7, #24]
 800f45e:	f000 f907 	bl	800f670 <netconn_free>
    return ERR_MEM;
 800f462:	f04f 33ff 	mov.w	r3, #4294967295
 800f466:	e00a      	b.n	800f47e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <accept_function+0x160>
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f474:	2200      	movs	r2, #0
 800f476:	2100      	movs	r1, #0
 800f478:	69f8      	ldr	r0, [r7, #28]
 800f47a:	4798      	blx	r3
  }

  return ERR_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3724      	adds	r7, #36	@ 0x24
 800f482:	46bd      	mov	sp, r7
 800f484:	bd90      	pop	{r4, r7, pc}
 800f486:	bf00      	nop
 800f488:	0801e5e8 	.word	0x0801e5e8
 800f48c:	0801e7a4 	.word	0x0801e7a4
 800f490:	0801e62c 	.word	0x0801e62c

0800f494 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f494:	b590      	push	{r4, r7, lr}
 800f496:	b085      	sub	sp, #20
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f49c:	2300      	movs	r3, #0
 800f49e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d006      	beq.n	800f4b8 <pcb_new+0x24>
 800f4aa:	4b2b      	ldr	r3, [pc, #172]	@ (800f558 <pcb_new+0xc4>)
 800f4ac:	f240 2265 	movw	r2, #613	@ 0x265
 800f4b0:	492a      	ldr	r1, [pc, #168]	@ (800f55c <pcb_new+0xc8>)
 800f4b2:	482b      	ldr	r0, [pc, #172]	@ (800f560 <pcb_new+0xcc>)
 800f4b4:	f00d fc70 	bl	801cd98 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f4c2:	2b10      	cmp	r3, #16
 800f4c4:	d022      	beq.n	800f50c <pcb_new+0x78>
 800f4c6:	2b20      	cmp	r3, #32
 800f4c8:	d133      	bne.n	800f532 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681c      	ldr	r4, [r3, #0]
 800f4ce:	7bfb      	ldrb	r3, [r7, #15]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f00a fe7c 	bl	801a1ce <udp_new_ip_type>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d02a      	beq.n	800f53a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	2b22      	cmp	r3, #34	@ 0x22
 800f4ec:	d104      	bne.n	800f4f8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	6858      	ldr	r0, [r3, #4]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	4917      	ldr	r1, [pc, #92]	@ (800f564 <pcb_new+0xd0>)
 800f506:	f00a fde9 	bl	801a0dc <udp_recv>
      }
      break;
 800f50a:	e016      	b.n	800f53a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681c      	ldr	r4, [r3, #0]
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	4618      	mov	r0, r3
 800f514:	f005 fb8a 	bl	8014c2c <tcp_new_ip_type>
 800f518:	4603      	mov	r3, r0
 800f51a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00b      	beq.n	800f53e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff fece 	bl	800f2cc <setup_tcp>
      }
      break;
 800f530:	e005      	b.n	800f53e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	22fa      	movs	r2, #250	@ 0xfa
 800f536:	711a      	strb	r2, [r3, #4]
      return;
 800f538:	e00a      	b.n	800f550 <pcb_new+0xbc>
      break;
 800f53a:	bf00      	nop
 800f53c:	e000      	b.n	800f540 <pcb_new+0xac>
      break;
 800f53e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d102      	bne.n	800f550 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	22ff      	movs	r2, #255	@ 0xff
 800f54e:	711a      	strb	r2, [r3, #4]
  }
}
 800f550:	3714      	adds	r7, #20
 800f552:	46bd      	mov	sp, r7
 800f554:	bd90      	pop	{r4, r7, pc}
 800f556:	bf00      	nop
 800f558:	0801e5e8 	.word	0x0801e5e8
 800f55c:	0801e7cc 	.word	0x0801e7cc
 800f560:	0801e62c 	.word	0x0801e62c
 800f564:	0800eda9 	.word	0x0800eda9

0800f568 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d102      	bne.n	800f58a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f7ff ff85 	bl	800f494 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f58a:	bf00      	nop
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	4603      	mov	r3, r0
 800f59c:	6039      	str	r1, [r7, #0]
 800f59e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f5a4:	2007      	movs	r0, #7
 800f5a6:	f002 fd75 	bl	8012094 <memp_malloc>
 800f5aa:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <netconn_alloc+0x22>
    return NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e052      	b.n	800f65c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	79fa      	ldrb	r2, [r7, #7]
 800f5c0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f5c8:	79fb      	ldrb	r3, [r7, #7]
 800f5ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f5ce:	2b10      	cmp	r3, #16
 800f5d0:	d004      	beq.n	800f5dc <netconn_alloc+0x48>
 800f5d2:	2b20      	cmp	r3, #32
 800f5d4:	d105      	bne.n	800f5e2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f5d6:	2306      	movs	r3, #6
 800f5d8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f5da:	e00a      	b.n	800f5f2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f5dc:	2306      	movs	r3, #6
 800f5de:	617b      	str	r3, [r7, #20]
      break;
 800f5e0:	e007      	b.n	800f5f2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f5e2:	4b20      	ldr	r3, [pc, #128]	@ (800f664 <netconn_alloc+0xd0>)
 800f5e4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800f5e8:	491f      	ldr	r1, [pc, #124]	@ (800f668 <netconn_alloc+0xd4>)
 800f5ea:	4820      	ldr	r0, [pc, #128]	@ (800f66c <netconn_alloc+0xd8>)
 800f5ec:	f00d fbd4 	bl	801cd98 <iprintf>
      goto free_and_return;
 800f5f0:	e02f      	b.n	800f652 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3310      	adds	r3, #16
 800f5f6:	6979      	ldr	r1, [r7, #20]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f00d f8eb 	bl	801c7d4 <sys_mbox_new>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d125      	bne.n	800f650 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	330c      	adds	r3, #12
 800f608:	2100      	movs	r1, #0
 800f60a:	4618      	mov	r0, r3
 800f60c:	f00d f9a9 	bl	801c962 <sys_sem_new>
 800f610:	4603      	mov	r3, r0
 800f612:	2b00      	cmp	r3, #0
 800f614:	d005      	beq.n	800f622 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3310      	adds	r3, #16
 800f61a:	4618      	mov	r0, r3
 800f61c:	f00d f8fc 	bl	801c818 <sys_mbox_free>
    goto free_and_return;
 800f620:	e017      	b.n	800f652 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	3314      	adds	r3, #20
 800f626:	4618      	mov	r0, r3
 800f628:	f00d f98e 	bl	801c948 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f04f 32ff 	mov.w	r2, #4294967295
 800f638:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	683a      	ldr	r2, [r7, #0]
 800f63e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	2200      	movs	r2, #0
 800f644:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	7cfa      	ldrb	r2, [r7, #19]
 800f64a:	771a      	strb	r2, [r3, #28]
  return conn;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	e005      	b.n	800f65c <netconn_alloc+0xc8>
    goto free_and_return;
 800f650:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f652:	68f9      	ldr	r1, [r7, #12]
 800f654:	2007      	movs	r0, #7
 800f656:	f002 fd93 	bl	8012180 <memp_free>
  return NULL;
 800f65a:	2300      	movs	r3, #0
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3718      	adds	r7, #24
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	0801e5e8 	.word	0x0801e5e8
 800f668:	0801e7ec 	.word	0x0801e7ec
 800f66c:	0801e62c 	.word	0x0801e62c

0800f670 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d006      	beq.n	800f68e <netconn_free+0x1e>
 800f680:	4b1b      	ldr	r3, [pc, #108]	@ (800f6f0 <netconn_free+0x80>)
 800f682:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f686:	491b      	ldr	r1, [pc, #108]	@ (800f6f4 <netconn_free+0x84>)
 800f688:	481b      	ldr	r0, [pc, #108]	@ (800f6f8 <netconn_free+0x88>)
 800f68a:	f00d fb85 	bl	801cd98 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3310      	adds	r3, #16
 800f692:	4618      	mov	r0, r3
 800f694:	f00d f947 	bl	801c926 <sys_mbox_valid>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d006      	beq.n	800f6ac <netconn_free+0x3c>
 800f69e:	4b14      	ldr	r3, [pc, #80]	@ (800f6f0 <netconn_free+0x80>)
 800f6a0:	f240 3223 	movw	r2, #803	@ 0x323
 800f6a4:	4915      	ldr	r1, [pc, #84]	@ (800f6fc <netconn_free+0x8c>)
 800f6a6:	4814      	ldr	r0, [pc, #80]	@ (800f6f8 <netconn_free+0x88>)
 800f6a8:	f00d fb76 	bl	801cd98 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	3314      	adds	r3, #20
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f00d f938 	bl	801c926 <sys_mbox_valid>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d006      	beq.n	800f6ca <netconn_free+0x5a>
 800f6bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f6f0 <netconn_free+0x80>)
 800f6be:	f240 3226 	movw	r2, #806	@ 0x326
 800f6c2:	490f      	ldr	r1, [pc, #60]	@ (800f700 <netconn_free+0x90>)
 800f6c4:	480c      	ldr	r0, [pc, #48]	@ (800f6f8 <netconn_free+0x88>)
 800f6c6:	f00d fb67 	bl	801cd98 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	330c      	adds	r3, #12
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f00d f9ad 	bl	801ca2e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	330c      	adds	r3, #12
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f00d f9c6 	bl	801ca6a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	2007      	movs	r0, #7
 800f6e2:	f002 fd4d 	bl	8012180 <memp_free>
}
 800f6e6:	bf00      	nop
 800f6e8:	3708      	adds	r7, #8
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	0801e5e8 	.word	0x0801e5e8
 800f6f4:	0801e814 	.word	0x0801e814
 800f6f8:	0801e62c 	.word	0x0801e62c
 800f6fc:	0801e844 	.word	0x0801e844
 800f700:	0801e880 	.word	0x0801e880

0800f704 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	3310      	adds	r3, #16
 800f710:	4618      	mov	r0, r3
 800f712:	f00d f908 	bl	801c926 <sys_mbox_valid>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d02f      	beq.n	800f77c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f71c:	e018      	b.n	800f750 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f726:	2b10      	cmp	r3, #16
 800f728:	d10e      	bne.n	800f748 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	f107 020f 	add.w	r2, r7, #15
 800f730:	4611      	mov	r1, r2
 800f732:	4618      	mov	r0, r3
 800f734:	f7ff fafe 	bl	800ed34 <lwip_netconn_is_err_msg>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d108      	bne.n	800f750 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	4618      	mov	r0, r3
 800f742:	f003 fbc1 	bl	8012ec8 <pbuf_free>
 800f746:	e003      	b.n	800f750 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f000 fede 	bl	801050c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	3310      	adds	r3, #16
 800f754:	f107 0210 	add.w	r2, r7, #16
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f00d f8c7 	bl	801c8ee <sys_arch_mbox_tryfetch>
 800f760:	4603      	mov	r3, r0
 800f762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f766:	d1da      	bne.n	800f71e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	3310      	adds	r3, #16
 800f76c:	4618      	mov	r0, r3
 800f76e:	f00d f853 	bl	801c818 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	3310      	adds	r3, #16
 800f776:	4618      	mov	r0, r3
 800f778:	f00d f8e6 	bl	801c948 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3314      	adds	r3, #20
 800f780:	4618      	mov	r0, r3
 800f782:	f00d f8d0 	bl	801c926 <sys_mbox_valid>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d034      	beq.n	800f7f6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f78c:	e01d      	b.n	800f7ca <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	f107 020e 	add.w	r2, r7, #14
 800f794:	4611      	mov	r1, r2
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff facc 	bl	800ed34 <lwip_netconn_is_err_msg>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d113      	bne.n	800f7ca <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800f7a6:	6978      	ldr	r0, [r7, #20]
 800f7a8:	f7ff ffac 	bl	800f704 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d007      	beq.n	800f7c4 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f004 f985 	bl	8013ac8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800f7c4:	6978      	ldr	r0, [r7, #20]
 800f7c6:	f7ff ff53 	bl	800f670 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3314      	adds	r3, #20
 800f7ce:	f107 0210 	add.w	r2, r7, #16
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f00d f88a 	bl	801c8ee <sys_arch_mbox_tryfetch>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e0:	d1d5      	bne.n	800f78e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	3314      	adds	r3, #20
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f00d f816 	bl	801c818 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	3314      	adds	r3, #20
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f00d f8a9 	bl	801c948 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f7f6:	bf00      	nop
 800f7f8:	3718      	adds	r7, #24
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
	...

0800f800 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	460b      	mov	r3, r1
 800f80a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d106      	bne.n	800f824 <lwip_netconn_do_close_internal+0x24>
 800f816:	4b87      	ldr	r3, [pc, #540]	@ (800fa34 <lwip_netconn_do_close_internal+0x234>)
 800f818:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800f81c:	4986      	ldr	r1, [pc, #536]	@ (800fa38 <lwip_netconn_do_close_internal+0x238>)
 800f81e:	4887      	ldr	r0, [pc, #540]	@ (800fa3c <lwip_netconn_do_close_internal+0x23c>)
 800f820:	f00d faba 	bl	801cd98 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f82c:	2b10      	cmp	r3, #16
 800f82e:	d006      	beq.n	800f83e <lwip_netconn_do_close_internal+0x3e>
 800f830:	4b80      	ldr	r3, [pc, #512]	@ (800fa34 <lwip_netconn_do_close_internal+0x234>)
 800f832:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800f836:	4982      	ldr	r1, [pc, #520]	@ (800fa40 <lwip_netconn_do_close_internal+0x240>)
 800f838:	4880      	ldr	r0, [pc, #512]	@ (800fa3c <lwip_netconn_do_close_internal+0x23c>)
 800f83a:	f00d faad 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	785b      	ldrb	r3, [r3, #1]
 800f842:	2b04      	cmp	r3, #4
 800f844:	d006      	beq.n	800f854 <lwip_netconn_do_close_internal+0x54>
 800f846:	4b7b      	ldr	r3, [pc, #492]	@ (800fa34 <lwip_netconn_do_close_internal+0x234>)
 800f848:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800f84c:	497d      	ldr	r1, [pc, #500]	@ (800fa44 <lwip_netconn_do_close_internal+0x244>)
 800f84e:	487b      	ldr	r0, [pc, #492]	@ (800fa3c <lwip_netconn_do_close_internal+0x23c>)
 800f850:	f00d faa2 	bl	801cd98 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d106      	bne.n	800f86a <lwip_netconn_do_close_internal+0x6a>
 800f85c:	4b75      	ldr	r3, [pc, #468]	@ (800fa34 <lwip_netconn_do_close_internal+0x234>)
 800f85e:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800f862:	4979      	ldr	r1, [pc, #484]	@ (800fa48 <lwip_netconn_do_close_internal+0x248>)
 800f864:	4875      	ldr	r0, [pc, #468]	@ (800fa3c <lwip_netconn_do_close_internal+0x23c>)
 800f866:	f00d fa97 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6a1b      	ldr	r3, [r3, #32]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d106      	bne.n	800f880 <lwip_netconn_do_close_internal+0x80>
 800f872:	4b70      	ldr	r3, [pc, #448]	@ (800fa34 <lwip_netconn_do_close_internal+0x234>)
 800f874:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800f878:	4974      	ldr	r1, [pc, #464]	@ (800fa4c <lwip_netconn_do_close_internal+0x24c>)
 800f87a:	4870      	ldr	r0, [pc, #448]	@ (800fa3c <lwip_netconn_do_close_internal+0x23c>)
 800f87c:	f00d fa8c 	bl	801cd98 <iprintf>

  tpcb = conn->pcb.tcp;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	7a1b      	ldrb	r3, [r3, #8]
 800f88c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	f003 0301 	and.w	r3, r3, #1
 800f894:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f896:	7bfb      	ldrb	r3, [r7, #15]
 800f898:	f003 0302 	and.w	r3, r3, #2
 800f89c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f89e:	7bfb      	ldrb	r3, [r7, #15]
 800f8a0:	2b03      	cmp	r3, #3
 800f8a2:	d102      	bne.n	800f8aa <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	75bb      	strb	r3, [r7, #22]
 800f8a8:	e01f      	b.n	800f8ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00e      	beq.n	800f8ce <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f8b4:	2b05      	cmp	r3, #5
 800f8b6:	d007      	beq.n	800f8c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f8bc:	2b06      	cmp	r3, #6
 800f8be:	d003      	beq.n	800f8c8 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d102      	bne.n	800f8ce <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	75bb      	strb	r3, [r7, #22]
 800f8cc:	e00d      	b.n	800f8ea <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f8ce:	7b7b      	ldrb	r3, [r7, #13]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d008      	beq.n	800f8e6 <lwip_netconn_do_close_internal+0xe6>
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	8b5b      	ldrh	r3, [r3, #26]
 800f8d8:	f003 0310 	and.w	r3, r3, #16
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d002      	beq.n	800f8e6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	75bb      	strb	r3, [r7, #22]
 800f8e4:	e001      	b.n	800f8ea <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800f8ea:	7dbb      	ldrb	r3, [r7, #22]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d003      	beq.n	800f8f8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	6938      	ldr	r0, [r7, #16]
 800f8f4:	f005 f9a8 	bl	8014c48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	7d1b      	ldrb	r3, [r3, #20]
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	d104      	bne.n	800f90a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f900:	2100      	movs	r1, #0
 800f902:	6938      	ldr	r0, [r7, #16]
 800f904:	f005 fa18 	bl	8014d38 <tcp_accept>
 800f908:	e01d      	b.n	800f946 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f90a:	7bbb      	ldrb	r3, [r7, #14]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d007      	beq.n	800f920 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f910:	2100      	movs	r1, #0
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f005 f9aa 	bl	8014c6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f918:	2100      	movs	r1, #0
 800f91a:	6938      	ldr	r0, [r7, #16]
 800f91c:	f005 fa0c 	bl	8014d38 <tcp_accept>
    }
    if (shut_tx) {
 800f920:	7b7b      	ldrb	r3, [r7, #13]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d003      	beq.n	800f92e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f926:	2100      	movs	r1, #0
 800f928:	6938      	ldr	r0, [r7, #16]
 800f92a:	f005 f9c1 	bl	8014cb0 <tcp_sent>
    }
    if (shut_close) {
 800f92e:	7dbb      	ldrb	r3, [r7, #22]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d008      	beq.n	800f946 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f934:	2200      	movs	r2, #0
 800f936:	2100      	movs	r1, #0
 800f938:	6938      	ldr	r0, [r7, #16]
 800f93a:	f005 fa15 	bl	8014d68 <tcp_poll>
      tcp_err(tpcb, NULL);
 800f93e:	2100      	movs	r1, #0
 800f940:	6938      	ldr	r0, [r7, #16]
 800f942:	f005 f9d7 	bl	8014cf4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800f946:	7dbb      	ldrb	r3, [r7, #22]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d005      	beq.n	800f958 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f94c:	6938      	ldr	r0, [r7, #16]
 800f94e:	f003 ff75 	bl	801383c <tcp_close>
 800f952:	4603      	mov	r3, r0
 800f954:	75fb      	strb	r3, [r7, #23]
 800f956:	e007      	b.n	800f968 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	7b7a      	ldrb	r2, [r7, #13]
 800f95c:	4619      	mov	r1, r3
 800f95e:	6938      	ldr	r0, [r7, #16]
 800f960:	f003 ff98 	bl	8013894 <tcp_shutdown>
 800f964:	4603      	mov	r3, r0
 800f966:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800f968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d102      	bne.n	800f976 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f970:	2301      	movs	r3, #1
 800f972:	757b      	strb	r3, [r7, #21]
 800f974:	e016      	b.n	800f9a4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f97e:	d10f      	bne.n	800f9a0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6a1b      	ldr	r3, [r3, #32]
 800f984:	7a5b      	ldrb	r3, [r3, #9]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d10c      	bne.n	800f9a4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f98a:	2301      	movs	r3, #1
 800f98c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800f98e:	7dbb      	ldrb	r3, [r7, #22]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d007      	beq.n	800f9a4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f994:	6938      	ldr	r0, [r7, #16]
 800f996:	f004 f897 	bl	8013ac8 <tcp_abort>
          err = ERR_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	75fb      	strb	r3, [r7, #23]
 800f99e:	e001      	b.n	800f9a4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800f9a4:	7d7b      	ldrb	r3, [r7, #21]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d052      	beq.n	800fa50 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	330c      	adds	r3, #12
 800f9b2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6a1b      	ldr	r3, [r3, #32]
 800f9b8:	7dfa      	ldrb	r2, [r7, #23]
 800f9ba:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f9c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d129      	bne.n	800fa24 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800f9d0:	7dbb      	ldrb	r3, [r7, #22]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00c      	beq.n	800f9f0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d005      	beq.n	800f9f0 <lwip_netconn_do_close_internal+0x1f0>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	2104      	movs	r1, #4
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	4798      	blx	r3
      }
      if (shut_rx) {
 800f9f0:	7bbb      	ldrb	r3, [r7, #14]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d009      	beq.n	800fa0a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d005      	beq.n	800fa0a <lwip_netconn_do_close_internal+0x20a>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa02:	2200      	movs	r2, #0
 800fa04:	2100      	movs	r1, #0
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	4798      	blx	r3
      }
      if (shut_tx) {
 800fa0a:	7b7b      	ldrb	r3, [r7, #13]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d009      	beq.n	800fa24 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d005      	beq.n	800fa24 <lwip_netconn_do_close_internal+0x224>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	2102      	movs	r1, #2
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fa24:	78fb      	ldrb	r3, [r7, #3]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d002      	beq.n	800fa30 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fa2a:	68b8      	ldr	r0, [r7, #8]
 800fa2c:	f00c fff2 	bl	801ca14 <sys_sem_signal>
    }
    return ERR_OK;
 800fa30:	2300      	movs	r3, #0
 800fa32:	e03c      	b.n	800faae <lwip_netconn_do_close_internal+0x2ae>
 800fa34:	0801e5e8 	.word	0x0801e5e8
 800fa38:	0801e8bc 	.word	0x0801e8bc
 800fa3c:	0801e62c 	.word	0x0801e62c
 800fa40:	0801e8cc 	.word	0x0801e8cc
 800fa44:	0801e8ec 	.word	0x0801e8ec
 800fa48:	0801e910 	.word	0x0801e910
 800fa4c:	0801e750 	.word	0x0801e750
  }
  if (!close_finished) {
 800fa50:	7d7b      	ldrb	r3, [r7, #21]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d11e      	bne.n	800fa94 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	7d1b      	ldrb	r3, [r3, #20]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d106      	bne.n	800fa6c <lwip_netconn_do_close_internal+0x26c>
 800fa5e:	4b16      	ldr	r3, [pc, #88]	@ (800fab8 <lwip_netconn_do_close_internal+0x2b8>)
 800fa60:	f240 4241 	movw	r2, #1089	@ 0x441
 800fa64:	4915      	ldr	r1, [pc, #84]	@ (800fabc <lwip_netconn_do_close_internal+0x2bc>)
 800fa66:	4816      	ldr	r0, [pc, #88]	@ (800fac0 <lwip_netconn_do_close_internal+0x2c0>)
 800fa68:	f00d f996 	bl	801cd98 <iprintf>
    if (shut_tx) {
 800fa6c:	7b7b      	ldrb	r3, [r7, #13]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d003      	beq.n	800fa7a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800fa72:	4914      	ldr	r1, [pc, #80]	@ (800fac4 <lwip_netconn_do_close_internal+0x2c4>)
 800fa74:	6938      	ldr	r0, [r7, #16]
 800fa76:	f005 f91b 	bl	8014cb0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	4912      	ldr	r1, [pc, #72]	@ (800fac8 <lwip_netconn_do_close_internal+0x2c8>)
 800fa7e:	6938      	ldr	r0, [r7, #16]
 800fa80:	f005 f972 	bl	8014d68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800fa84:	4911      	ldr	r1, [pc, #68]	@ (800facc <lwip_netconn_do_close_internal+0x2cc>)
 800fa86:	6938      	ldr	r0, [r7, #16]
 800fa88:	f005 f934 	bl	8014cf4 <tcp_err>
    tcp_arg(tpcb, conn);
 800fa8c:	6879      	ldr	r1, [r7, #4]
 800fa8e:	6938      	ldr	r0, [r7, #16]
 800fa90:	f005 f8da 	bl	8014c48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800fa94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d106      	bne.n	800faaa <lwip_netconn_do_close_internal+0x2aa>
 800fa9c:	4b06      	ldr	r3, [pc, #24]	@ (800fab8 <lwip_netconn_do_close_internal+0x2b8>)
 800fa9e:	f240 424d 	movw	r2, #1101	@ 0x44d
 800faa2:	490b      	ldr	r1, [pc, #44]	@ (800fad0 <lwip_netconn_do_close_internal+0x2d0>)
 800faa4:	4806      	ldr	r0, [pc, #24]	@ (800fac0 <lwip_netconn_do_close_internal+0x2c0>)
 800faa6:	f00d f977 	bl	801cd98 <iprintf>
  return err;
 800faaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3718      	adds	r7, #24
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	0801e5e8 	.word	0x0801e5e8
 800fabc:	0801e924 	.word	0x0801e924
 800fac0:	0801e62c 	.word	0x0801e62c
 800fac4:	0800f079 	.word	0x0800f079
 800fac8:	0800efb1 	.word	0x0800efb1
 800facc:	0800f121 	.word	0x0800f121
 800fad0:	0801e948 	.word	0x0801e948

0800fad4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b084      	sub	sp, #16
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	785b      	ldrb	r3, [r3, #1]
 800fae6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800fae8:	7afb      	ldrb	r3, [r7, #11]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00d      	beq.n	800fb0a <lwip_netconn_do_delconn+0x36>
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800faf8:	2b10      	cmp	r3, #16
 800fafa:	d006      	beq.n	800fb0a <lwip_netconn_do_delconn+0x36>
 800fafc:	4b60      	ldr	r3, [pc, #384]	@ (800fc80 <lwip_netconn_do_delconn+0x1ac>)
 800fafe:	f240 425e 	movw	r2, #1118	@ 0x45e
 800fb02:	4960      	ldr	r1, [pc, #384]	@ (800fc84 <lwip_netconn_do_delconn+0x1b0>)
 800fb04:	4860      	ldr	r0, [pc, #384]	@ (800fc88 <lwip_netconn_do_delconn+0x1b4>)
 800fb06:	f00d f947 	bl	801cd98 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800fb0a:	7afb      	ldrb	r3, [r7, #11]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d005      	beq.n	800fb1c <lwip_netconn_do_delconn+0x48>
 800fb10:	7afb      	ldrb	r3, [r7, #11]
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d002      	beq.n	800fb1c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800fb16:	7afb      	ldrb	r3, [r7, #11]
 800fb18:	2b03      	cmp	r3, #3
 800fb1a:	d109      	bne.n	800fb30 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800fb1c:	7afb      	ldrb	r3, [r7, #11]
 800fb1e:	2b03      	cmp	r3, #3
 800fb20:	d10a      	bne.n	800fb38 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	7f1b      	ldrb	r3, [r3, #28]
 800fb28:	f003 0304 	and.w	r3, r3, #4
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d103      	bne.n	800fb38 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	22fb      	movs	r2, #251	@ 0xfb
 800fb34:	711a      	strb	r2, [r3, #4]
 800fb36:	e097      	b.n	800fc68 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fb38:	7afb      	ldrb	r3, [r7, #11]
 800fb3a:	2b03      	cmp	r3, #3
 800fb3c:	d10d      	bne.n	800fb5a <lwip_netconn_do_delconn+0x86>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	7f1b      	ldrb	r3, [r3, #28]
 800fb44:	f003 0304 	and.w	r3, r3, #4
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d106      	bne.n	800fb5a <lwip_netconn_do_delconn+0x86>
 800fb4c:	4b4c      	ldr	r3, [pc, #304]	@ (800fc80 <lwip_netconn_do_delconn+0x1ac>)
 800fb4e:	f240 427a 	movw	r2, #1146	@ 0x47a
 800fb52:	494e      	ldr	r1, [pc, #312]	@ (800fc8c <lwip_netconn_do_delconn+0x1b8>)
 800fb54:	484c      	ldr	r0, [pc, #304]	@ (800fc88 <lwip_netconn_do_delconn+0x1b4>)
 800fb56:	f00d f91f 	bl	801cd98 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7ff fdcd 	bl	800f704 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d05f      	beq.n	800fc34 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb7e:	2b10      	cmp	r3, #16
 800fb80:	d00d      	beq.n	800fb9e <lwip_netconn_do_delconn+0xca>
 800fb82:	2b20      	cmp	r3, #32
 800fb84:	d151      	bne.n	800fc2a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f00a fac0 	bl	801a11c <udp_remove>
          break;
 800fb9c:	e046      	b.n	800fc2c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6a1b      	ldr	r3, [r3, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d006      	beq.n	800fbb6 <lwip_netconn_do_delconn+0xe2>
 800fba8:	4b35      	ldr	r3, [pc, #212]	@ (800fc80 <lwip_netconn_do_delconn+0x1ac>)
 800fbaa:	f240 4294 	movw	r2, #1172	@ 0x494
 800fbae:	4938      	ldr	r1, [pc, #224]	@ (800fc90 <lwip_netconn_do_delconn+0x1bc>)
 800fbb0:	4835      	ldr	r0, [pc, #212]	@ (800fc88 <lwip_netconn_do_delconn+0x1b4>)
 800fbb2:	f00d f8f1 	bl	801cd98 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2204      	movs	r2, #4
 800fbbc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2203      	movs	r2, #3
 800fbc2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	68fa      	ldr	r2, [r7, #12]
 800fbca:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff fe14 	bl	800f800 <lwip_netconn_do_close_internal>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d04b      	beq.n	800fc76 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	785b      	ldrb	r3, [r3, #1]
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	d006      	beq.n	800fbf6 <lwip_netconn_do_delconn+0x122>
 800fbe8:	4b25      	ldr	r3, [pc, #148]	@ (800fc80 <lwip_netconn_do_delconn+0x1ac>)
 800fbea:	f240 429a 	movw	r2, #1178	@ 0x49a
 800fbee:	4929      	ldr	r1, [pc, #164]	@ (800fc94 <lwip_netconn_do_delconn+0x1c0>)
 800fbf0:	4825      	ldr	r0, [pc, #148]	@ (800fc88 <lwip_netconn_do_delconn+0x1b4>)
 800fbf2:	f00d f8d1 	bl	801cd98 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fbf6:	4828      	ldr	r0, [pc, #160]	@ (800fc98 <lwip_netconn_do_delconn+0x1c4>)
 800fbf8:	f00c ff7d 	bl	801caf6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	330c      	adds	r3, #12
 800fc02:	2100      	movs	r1, #0
 800fc04:	4618      	mov	r0, r3
 800fc06:	f00c fed4 	bl	801c9b2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800fc0a:	4823      	ldr	r0, [pc, #140]	@ (800fc98 <lwip_netconn_do_delconn+0x1c4>)
 800fc0c:	f00c ff64 	bl	801cad8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	785b      	ldrb	r3, [r3, #1]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d02d      	beq.n	800fc76 <lwip_netconn_do_delconn+0x1a2>
 800fc1a:	4b19      	ldr	r3, [pc, #100]	@ (800fc80 <lwip_netconn_do_delconn+0x1ac>)
 800fc1c:	f240 429e 	movw	r2, #1182	@ 0x49e
 800fc20:	491c      	ldr	r1, [pc, #112]	@ (800fc94 <lwip_netconn_do_delconn+0x1c0>)
 800fc22:	4819      	ldr	r0, [pc, #100]	@ (800fc88 <lwip_netconn_do_delconn+0x1b4>)
 800fc24:	f00d f8b8 	bl	801cd98 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fc28:	e025      	b.n	800fc76 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800fc2a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2200      	movs	r2, #0
 800fc32:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d007      	beq.n	800fc4e <lwip_netconn_do_delconn+0x17a>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	6810      	ldr	r0, [r2, #0]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d007      	beq.n	800fc68 <lwip_netconn_do_delconn+0x194>
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	6810      	ldr	r0, [r2, #0]
 800fc62:	2200      	movs	r2, #0
 800fc64:	2102      	movs	r1, #2
 800fc66:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	330c      	adds	r3, #12
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f00c feea 	bl	801ca48 <sys_sem_valid>
 800fc74:	e000      	b.n	800fc78 <lwip_netconn_do_delconn+0x1a4>
          return;
 800fc76:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	0801e5e8 	.word	0x0801e5e8
 800fc84:	0801e958 	.word	0x0801e958
 800fc88:	0801e62c 	.word	0x0801e62c
 800fc8c:	0801e96c 	.word	0x0801e96c
 800fc90:	0801e98c 	.word	0x0801e98c
 800fc94:	0801e9a8 	.word	0x0801e9a8
 800fc98:	2000b6d8 	.word	0x2000b6d8

0800fc9c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d025      	beq.n	800fcfe <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fcbc:	2b10      	cmp	r3, #16
 800fcbe:	d00e      	beq.n	800fcde <lwip_netconn_do_bind+0x42>
 800fcc0:	2b20      	cmp	r3, #32
 800fcc2:	d119      	bne.n	800fcf8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	6858      	ldr	r0, [r3, #4]
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	6899      	ldr	r1, [r3, #8]
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	f00a f97a 	bl	8019fcc <udp_bind>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73fb      	strb	r3, [r7, #15]
        break;
 800fcdc:	e011      	b.n	800fd02 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6858      	ldr	r0, [r3, #4]
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	6899      	ldr	r1, [r3, #8]
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	899b      	ldrh	r3, [r3, #12]
 800fcec:	461a      	mov	r2, r3
 800fcee:	f003 fef7 	bl	8013ae0 <tcp_bind>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	73fb      	strb	r3, [r7, #15]
        break;
 800fcf6:	e004      	b.n	800fd02 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800fcf8:	23fa      	movs	r3, #250	@ 0xfa
 800fcfa:	73fb      	strb	r3, [r7, #15]
        break;
 800fcfc:	e001      	b.n	800fd02 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800fcfe:	23fa      	movs	r3, #250	@ 0xfa
 800fd00:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	7bfa      	ldrb	r2, [r7, #15]
 800fd06:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fd08:	bf00      	nop
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b086      	sub	sp, #24
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d07f      	beq.n	800fe26 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd30:	2b10      	cmp	r3, #16
 800fd32:	d175      	bne.n	800fe20 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	785b      	ldrb	r3, [r3, #1]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d165      	bne.n	800fe0a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	7d1b      	ldrb	r3, [r3, #20]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fd4a:	23fa      	movs	r3, #250	@ 0xfa
 800fd4c:	72fb      	strb	r3, [r7, #11]
 800fd4e:	e06c      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fd50:	23ff      	movs	r3, #255	@ 0xff
 800fd52:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fd54:	697b      	ldr	r3, [r7, #20]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	f107 020b 	add.w	r2, r7, #11
 800fd5e:	7cf9      	ldrb	r1, [r7, #19]
 800fd60:	4618      	mov	r0, r3
 800fd62:	f003 ff87 	bl	8013c74 <tcp_listen_with_backlog_and_err>
 800fd66:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d05d      	beq.n	800fe2a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	3310      	adds	r3, #16
 800fd74:	4618      	mov	r0, r3
 800fd76:	f00c fdd6 	bl	801c926 <sys_mbox_valid>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d00b      	beq.n	800fd98 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3310      	adds	r3, #16
 800fd86:	4618      	mov	r0, r3
 800fd88:	f00c fd46 	bl	801c818 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3310      	adds	r3, #16
 800fd92:	4618      	mov	r0, r3
 800fd94:	f00c fdd8 	bl	801c948 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3314      	adds	r3, #20
 800fda2:	4618      	mov	r0, r3
 800fda4:	f00c fdbf 	bl	801c926 <sys_mbox_valid>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d108      	bne.n	800fdc0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	3314      	adds	r3, #20
 800fdb4:	2106      	movs	r1, #6
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f00c fd0c 	bl	801c7d4 <sys_mbox_new>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800fdc0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d118      	bne.n	800fdfa <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2202      	movs	r2, #2
 800fdce:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	4619      	mov	r1, r3
 800fde4:	4610      	mov	r0, r2
 800fde6:	f004 ff2f 	bl	8014c48 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	4912      	ldr	r1, [pc, #72]	@ (800fe3c <lwip_netconn_do_listen+0x12c>)
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f004 ffa0 	bl	8014d38 <tcp_accept>
 800fdf8:	e017      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f003 fd1e 	bl	801383c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2200      	movs	r2, #0
 800fe06:	605a      	str	r2, [r3, #4]
 800fe08:	e00f      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	785b      	ldrb	r3, [r3, #1]
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d102      	bne.n	800fe1a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	72fb      	strb	r3, [r7, #11]
 800fe18:	e007      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800fe1a:	23f5      	movs	r3, #245	@ 0xf5
 800fe1c:	72fb      	strb	r3, [r7, #11]
 800fe1e:	e004      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800fe20:	23f0      	movs	r3, #240	@ 0xf0
 800fe22:	72fb      	strb	r3, [r7, #11]
 800fe24:	e001      	b.n	800fe2a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800fe26:	23f5      	movs	r3, #245	@ 0xf5
 800fe28:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800fe2a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fe32:	bf00      	nop
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	0800f31d 	.word	0x0800f31d

0800fe40 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fe ff1e 	bl	800ec92 <netconn_err>
 800fe56:	4603      	mov	r3, r0
 800fe58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fe5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d134      	bne.n	800fecc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d02d      	beq.n	800fec8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	781b      	ldrb	r3, [r3, #0]
 800fe72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe76:	2b20      	cmp	r3, #32
 800fe78:	d123      	bne.n	800fec2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	689b      	ldr	r3, [r3, #8]
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10c      	bne.n	800fe9e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4619      	mov	r1, r3
 800fe92:	4610      	mov	r0, r2
 800fe94:	f009 feb0 	bl	8019bf8 <udp_send>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800fe9c:	e016      	b.n	800fecc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800fe9e:	68bb      	ldr	r3, [r7, #8]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6858      	ldr	r0, [r3, #4]
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	6819      	ldr	r1, [r3, #0]
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	f103 0208 	add.w	r2, r3, #8
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	899b      	ldrh	r3, [r3, #12]
 800feb8:	f009 fed2 	bl	8019c60 <udp_sendto>
 800febc:	4603      	mov	r3, r0
 800febe:	73fb      	strb	r3, [r7, #15]
          break;
 800fec0:	e004      	b.n	800fecc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800fec2:	23f5      	movs	r3, #245	@ 0xf5
 800fec4:	73fb      	strb	r3, [r7, #15]
          break;
 800fec6:	e001      	b.n	800fecc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800fec8:	23f5      	movs	r3, #245	@ 0xf5
 800feca:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	7bfa      	ldrb	r2, [r7, #15]
 800fed0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800fed2:	bf00      	nop
 800fed4:	3710      	adds	r7, #16
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b086      	sub	sp, #24
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	2200      	movs	r2, #0
 800feea:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d022      	beq.n	800ff3c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ff00:	2b10      	cmp	r3, #16
 800ff02:	d11b      	bne.n	800ff3c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	689b      	ldr	r3, [r3, #8]
 800ff08:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ff10:	d202      	bcs.n	800ff18 <lwip_netconn_do_recv+0x3e>
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	e001      	b.n	800ff1c <lwip_netconn_do_recv+0x42>
 800ff18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ff1c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	89fa      	ldrh	r2, [r7, #14]
 800ff26:	4611      	mov	r1, r2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f003 ffa7 	bl	8013e7c <tcp_recved>
        remaining -= recved;
 800ff2e:	89fb      	ldrh	r3, [r7, #14]
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	1ad3      	subs	r3, r2, r3
 800ff34:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1e6      	bne.n	800ff0a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ff3c:	bf00      	nop
 800ff3e:	3718      	adds	r7, #24
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b088      	sub	sp, #32
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d106      	bne.n	800ff68 <lwip_netconn_do_writemore+0x24>
 800ff5a:	4b96      	ldr	r3, [pc, #600]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ff5c:	f240 6273 	movw	r2, #1651	@ 0x673
 800ff60:	4995      	ldr	r1, [pc, #596]	@ (80101b8 <lwip_netconn_do_writemore+0x274>)
 800ff62:	4896      	ldr	r0, [pc, #600]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ff64:	f00c ff18 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	785b      	ldrb	r3, [r3, #1]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d006      	beq.n	800ff7e <lwip_netconn_do_writemore+0x3a>
 800ff70:	4b90      	ldr	r3, [pc, #576]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ff72:	f240 6274 	movw	r2, #1652	@ 0x674
 800ff76:	4992      	ldr	r1, [pc, #584]	@ (80101c0 <lwip_netconn_do_writemore+0x27c>)
 800ff78:	4890      	ldr	r0, [pc, #576]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ff7a:	f00c ff0d 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d106      	bne.n	800ff94 <lwip_netconn_do_writemore+0x50>
 800ff86:	4b8b      	ldr	r3, [pc, #556]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ff88:	f240 6275 	movw	r2, #1653	@ 0x675
 800ff8c:	498d      	ldr	r1, [pc, #564]	@ (80101c4 <lwip_netconn_do_writemore+0x280>)
 800ff8e:	488b      	ldr	r0, [pc, #556]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ff90:	f00c ff02 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d106      	bne.n	800ffaa <lwip_netconn_do_writemore+0x66>
 800ff9c:	4b85      	ldr	r3, [pc, #532]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ff9e:	f240 6276 	movw	r2, #1654	@ 0x676
 800ffa2:	4989      	ldr	r1, [pc, #548]	@ (80101c8 <lwip_netconn_do_writemore+0x284>)
 800ffa4:	4885      	ldr	r0, [pc, #532]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ffa6:	f00c fef7 	bl	801cd98 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	699a      	ldr	r2, [r3, #24]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a1b      	ldr	r3, [r3, #32]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d306      	bcc.n	800ffc8 <lwip_netconn_do_writemore+0x84>
 800ffba:	4b7e      	ldr	r3, [pc, #504]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ffbc:	f240 6277 	movw	r2, #1655	@ 0x677
 800ffc0:	4982      	ldr	r1, [pc, #520]	@ (80101cc <lwip_netconn_do_writemore+0x288>)
 800ffc2:	487e      	ldr	r0, [pc, #504]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ffc4:	f00c fee8 	bl	801cd98 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a1b      	ldr	r3, [r3, #32]
 800ffcc:	899b      	ldrh	r3, [r3, #12]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <lwip_netconn_do_writemore+0x9c>
 800ffd2:	4b78      	ldr	r3, [pc, #480]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 800ffd4:	f240 6279 	movw	r2, #1657	@ 0x679
 800ffd8:	497d      	ldr	r1, [pc, #500]	@ (80101d0 <lwip_netconn_do_writemore+0x28c>)
 800ffda:	4878      	ldr	r0, [pc, #480]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 800ffdc:	f00c fedc 	bl	801cd98 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a1b      	ldr	r3, [r3, #32]
 800ffe4:	7f1b      	ldrb	r3, [r3, #28]
 800ffe6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	7f1b      	ldrb	r3, [r3, #28]
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d104      	bne.n	800fffe <lwip_netconn_do_writemore+0xba>
 800fff4:	7ebb      	ldrb	r3, [r7, #26]
 800fff6:	f003 0304 	and.w	r3, r3, #4
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d001      	beq.n	8010002 <lwip_netconn_do_writemore+0xbe>
 800fffe:	2301      	movs	r3, #1
 8010000:	e000      	b.n	8010004 <lwip_netconn_do_writemore+0xc0>
 8010002:	2300      	movs	r3, #0
 8010004:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a1b      	ldr	r3, [r3, #32]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	681a      	ldr	r2, [r3, #0]
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a1b      	ldr	r3, [r3, #32]
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	4413      	add	r3, r2
 8010016:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	685a      	ldr	r2, [r3, #4]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010030:	d307      	bcc.n	8010042 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010032:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010036:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010038:	7ebb      	ldrb	r3, [r7, #26]
 801003a:	f043 0302 	orr.w	r3, r3, #2
 801003e:	76bb      	strb	r3, [r7, #26]
 8010040:	e001      	b.n	8010046 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801004e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010050:	89fa      	ldrh	r2, [r7, #14]
 8010052:	8bbb      	ldrh	r3, [r7, #28]
 8010054:	429a      	cmp	r2, r3
 8010056:	d216      	bcs.n	8010086 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010058:	89fb      	ldrh	r3, [r7, #14]
 801005a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801005c:	7e3b      	ldrb	r3, [r7, #24]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00d      	beq.n	801007e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010062:	8bbb      	ldrh	r3, [r7, #28]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d10e      	bne.n	8010086 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6a1b      	ldr	r3, [r3, #32]
 801006c:	699b      	ldr	r3, [r3, #24]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d102      	bne.n	8010078 <lwip_netconn_do_writemore+0x134>
 8010072:	f06f 0306 	mvn.w	r3, #6
 8010076:	e000      	b.n	801007a <lwip_netconn_do_writemore+0x136>
 8010078:	2300      	movs	r3, #0
 801007a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801007c:	e07d      	b.n	801017a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801007e:	7ebb      	ldrb	r3, [r7, #26]
 8010080:	f043 0302 	orr.w	r3, r3, #2
 8010084:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a1b      	ldr	r3, [r3, #32]
 801008a:	691a      	ldr	r2, [r3, #16]
 801008c:	8bbb      	ldrh	r3, [r7, #28]
 801008e:	441a      	add	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6a1b      	ldr	r3, [r3, #32]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	429a      	cmp	r2, r3
 801009a:	d906      	bls.n	80100aa <lwip_netconn_do_writemore+0x166>
 801009c:	4b45      	ldr	r3, [pc, #276]	@ (80101b4 <lwip_netconn_do_writemore+0x270>)
 801009e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80100a2:	494c      	ldr	r1, [pc, #304]	@ (80101d4 <lwip_netconn_do_writemore+0x290>)
 80100a4:	4845      	ldr	r0, [pc, #276]	@ (80101bc <lwip_netconn_do_writemore+0x278>)
 80100a6:	f00c fe77 	bl	801cd98 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80100aa:	8bbb      	ldrh	r3, [r7, #28]
 80100ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d103      	bne.n	80100bc <lwip_netconn_do_writemore+0x178>
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100ba:	d209      	bcs.n	80100d0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80100c0:	8bba      	ldrh	r2, [r7, #28]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d10b      	bne.n	80100de <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6a1b      	ldr	r3, [r3, #32]
 80100ca:	899b      	ldrh	r3, [r3, #12]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d906      	bls.n	80100de <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80100d0:	2301      	movs	r3, #1
 80100d2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80100d4:	7ebb      	ldrb	r3, [r7, #26]
 80100d6:	f043 0302 	orr.w	r3, r3, #2
 80100da:	76bb      	strb	r3, [r7, #26]
 80100dc:	e001      	b.n	80100e2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6858      	ldr	r0, [r3, #4]
 80100e6:	7ebb      	ldrb	r3, [r7, #26]
 80100e8:	8bba      	ldrh	r2, [r7, #28]
 80100ea:	6979      	ldr	r1, [r7, #20]
 80100ec:	f007 fce8 	bl	8017ac0 <tcp_write>
 80100f0:	4603      	mov	r3, r0
 80100f2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80100f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d12c      	bne.n	8010156 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	6999      	ldr	r1, [r3, #24]
 8010102:	8bba      	ldrh	r2, [r7, #28]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a1b      	ldr	r3, [r3, #32]
 8010108:	440a      	add	r2, r1
 801010a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a1b      	ldr	r3, [r3, #32]
 8010110:	6919      	ldr	r1, [r3, #16]
 8010112:	8bba      	ldrh	r2, [r7, #28]
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a1b      	ldr	r3, [r3, #32]
 8010118:	440a      	add	r2, r1
 801011a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6a1b      	ldr	r3, [r3, #32]
 8010120:	691a      	ldr	r2, [r3, #16]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6a1b      	ldr	r3, [r3, #32]
 8010126:	689b      	ldr	r3, [r3, #8]
 8010128:	685b      	ldr	r3, [r3, #4]
 801012a:	429a      	cmp	r2, r3
 801012c:	d113      	bne.n	8010156 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	899a      	ldrh	r2, [r3, #12]
 8010134:	3a01      	subs	r2, #1
 8010136:	b292      	uxth	r2, r2
 8010138:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	899b      	ldrh	r3, [r3, #12]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d008      	beq.n	8010156 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6a1b      	ldr	r3, [r3, #32]
 8010148:	689a      	ldr	r2, [r3, #8]
 801014a:	3208      	adds	r2, #8
 801014c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	2200      	movs	r2, #0
 8010154:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010156:	7e7b      	ldrb	r3, [r7, #25]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d004      	beq.n	8010166 <lwip_netconn_do_writemore+0x222>
 801015c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010160:	2b00      	cmp	r3, #0
 8010162:	f43f af50 	beq.w	8010006 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010166:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d004      	beq.n	8010178 <lwip_netconn_do_writemore+0x234>
 801016e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010176:	d146      	bne.n	8010206 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010178:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801017a:	7e3b      	ldrb	r3, [r7, #24]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d02b      	beq.n	80101d8 <lwip_netconn_do_writemore+0x294>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a1b      	ldr	r3, [r3, #32]
 8010184:	699a      	ldr	r2, [r3, #24]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a1b      	ldr	r3, [r3, #32]
 801018a:	695b      	ldr	r3, [r3, #20]
 801018c:	429a      	cmp	r2, r3
 801018e:	d223      	bcs.n	80101d8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010194:	2b00      	cmp	r3, #0
 8010196:	d005      	beq.n	80101a4 <lwip_netconn_do_writemore+0x260>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801019c:	2200      	movs	r2, #0
 801019e:	2103      	movs	r1, #3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	7f1b      	ldrb	r3, [r3, #28]
 80101a8:	f043 0310 	orr.w	r3, r3, #16
 80101ac:	b2da      	uxtb	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	771a      	strb	r2, [r3, #28]
 80101b2:	e028      	b.n	8010206 <lwip_netconn_do_writemore+0x2c2>
 80101b4:	0801e5e8 	.word	0x0801e5e8
 80101b8:	0801e740 	.word	0x0801e740
 80101bc:	0801e62c 	.word	0x0801e62c
 80101c0:	0801ea48 	.word	0x0801ea48
 80101c4:	0801e750 	.word	0x0801e750
 80101c8:	0801ea68 	.word	0x0801ea68
 80101cc:	0801ea80 	.word	0x0801ea80
 80101d0:	0801eac0 	.word	0x0801eac0
 80101d4:	0801eae8 	.word	0x0801eae8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80101e0:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80101e4:	d305      	bcc.n	80101f2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80101ee:	2b04      	cmp	r3, #4
 80101f0:	d909      	bls.n	8010206 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d005      	beq.n	8010206 <lwip_netconn_do_writemore+0x2c2>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101fe:	2200      	movs	r2, #0
 8010200:	2103      	movs	r1, #3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010206:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d11d      	bne.n	801024a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	699a      	ldr	r2, [r3, #24]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a1b      	ldr	r3, [r3, #32]
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	429a      	cmp	r2, r3
 801021c:	d002      	beq.n	8010224 <lwip_netconn_do_writemore+0x2e0>
 801021e:	7e3b      	ldrb	r3, [r7, #24]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d001      	beq.n	8010228 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010224:	2301      	movs	r3, #1
 8010226:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f008 fa31 	bl	8018694 <tcp_output>
 8010232:	4603      	mov	r3, r0
 8010234:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010236:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801023a:	f113 0f04 	cmn.w	r3, #4
 801023e:	d12c      	bne.n	801029a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010240:	7b3b      	ldrb	r3, [r7, #12]
 8010242:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010244:	2301      	movs	r3, #1
 8010246:	76fb      	strb	r3, [r7, #27]
 8010248:	e027      	b.n	801029a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801024a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801024e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010252:	d120      	bne.n	8010296 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	4618      	mov	r0, r3
 801025a:	f008 fa1b 	bl	8018694 <tcp_output>
 801025e:	4603      	mov	r3, r0
 8010260:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010262:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010266:	f113 0f04 	cmn.w	r3, #4
 801026a:	d104      	bne.n	8010276 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801026c:	7b7b      	ldrb	r3, [r7, #13]
 801026e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010270:	2301      	movs	r3, #1
 8010272:	76fb      	strb	r3, [r7, #27]
 8010274:	e011      	b.n	801029a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010276:	7e3b      	ldrb	r3, [r7, #24]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00e      	beq.n	801029a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6a1b      	ldr	r3, [r3, #32]
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d102      	bne.n	801028c <lwip_netconn_do_writemore+0x348>
 8010286:	f06f 0306 	mvn.w	r3, #6
 801028a:	e000      	b.n	801028e <lwip_netconn_do_writemore+0x34a>
 801028c:	2300      	movs	r3, #0
 801028e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010290:	2301      	movs	r3, #1
 8010292:	76fb      	strb	r3, [r7, #27]
 8010294:	e001      	b.n	801029a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010296:	2301      	movs	r3, #1
 8010298:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801029a:	7efb      	ldrb	r3, [r7, #27]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d015      	beq.n	80102cc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	330c      	adds	r3, #12
 80102a8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	7ffa      	ldrb	r2, [r7, #31]
 80102b0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80102be:	78fb      	ldrb	r3, [r7, #3]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d006      	beq.n	80102d2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80102c4:	68b8      	ldr	r0, [r7, #8]
 80102c6:	f00c fba5 	bl	801ca14 <sys_sem_signal>
 80102ca:	e002      	b.n	80102d2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80102cc:	f04f 33ff 	mov.w	r3, #4294967295
 80102d0:	e000      	b.n	80102d4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80102d2:	2300      	movs	r3, #0
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3720      	adds	r7, #32
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}

080102dc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fcd0 	bl	800ec92 <netconn_err>
 80102f2:	4603      	mov	r3, r0
 80102f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80102f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d166      	bne.n	80103cc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	781b      	ldrb	r3, [r3, #0]
 8010304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010308:	2b10      	cmp	r3, #16
 801030a:	d15d      	bne.n	80103c8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	785b      	ldrb	r3, [r3, #1]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010316:	23fb      	movs	r3, #251	@ 0xfb
 8010318:	73fb      	strb	r3, [r7, #15]
 801031a:	e057      	b.n	80103cc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d04d      	beq.n	80103c2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2201      	movs	r2, #1
 801032c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6a1b      	ldr	r3, [r3, #32]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d006      	beq.n	8010346 <lwip_netconn_do_write+0x6a>
 8010338:	4b28      	ldr	r3, [pc, #160]	@ (80103dc <lwip_netconn_do_write+0x100>)
 801033a:	f240 7223 	movw	r2, #1827	@ 0x723
 801033e:	4928      	ldr	r1, [pc, #160]	@ (80103e0 <lwip_netconn_do_write+0x104>)
 8010340:	4828      	ldr	r0, [pc, #160]	@ (80103e4 <lwip_netconn_do_write+0x108>)
 8010342:	f00c fd29 	bl	801cd98 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <lwip_netconn_do_write+0x80>
 801034e:	4b23      	ldr	r3, [pc, #140]	@ (80103dc <lwip_netconn_do_write+0x100>)
 8010350:	f240 7224 	movw	r2, #1828	@ 0x724
 8010354:	4924      	ldr	r1, [pc, #144]	@ (80103e8 <lwip_netconn_do_write+0x10c>)
 8010356:	4823      	ldr	r0, [pc, #140]	@ (80103e4 <lwip_netconn_do_write+0x108>)
 8010358:	f00c fd1e 	bl	801cd98 <iprintf>
        msg->conn->current_msg = msg;
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	68ba      	ldr	r2, [r7, #8]
 8010362:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2100      	movs	r1, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff fdea 	bl	800ff44 <lwip_netconn_do_writemore>
 8010370:	4603      	mov	r3, r0
 8010372:	2b00      	cmp	r3, #0
 8010374:	d02e      	beq.n	80103d4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	785b      	ldrb	r3, [r3, #1]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d006      	beq.n	801038e <lwip_netconn_do_write+0xb2>
 8010380:	4b16      	ldr	r3, [pc, #88]	@ (80103dc <lwip_netconn_do_write+0x100>)
 8010382:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 8010386:	4919      	ldr	r1, [pc, #100]	@ (80103ec <lwip_netconn_do_write+0x110>)
 8010388:	4816      	ldr	r0, [pc, #88]	@ (80103e4 <lwip_netconn_do_write+0x108>)
 801038a:	f00c fd05 	bl	801cd98 <iprintf>
          UNLOCK_TCPIP_CORE();
 801038e:	4818      	ldr	r0, [pc, #96]	@ (80103f0 <lwip_netconn_do_write+0x114>)
 8010390:	f00c fbb1 	bl	801caf6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	330c      	adds	r3, #12
 801039a:	2100      	movs	r1, #0
 801039c:	4618      	mov	r0, r3
 801039e:	f00c fb08 	bl	801c9b2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80103a2:	4813      	ldr	r0, [pc, #76]	@ (80103f0 <lwip_netconn_do_write+0x114>)
 80103a4:	f00c fb98 	bl	801cad8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	785b      	ldrb	r3, [r3, #1]
 80103ae:	2b01      	cmp	r3, #1
 80103b0:	d110      	bne.n	80103d4 <lwip_netconn_do_write+0xf8>
 80103b2:	4b0a      	ldr	r3, [pc, #40]	@ (80103dc <lwip_netconn_do_write+0x100>)
 80103b4:	f240 722c 	movw	r2, #1836	@ 0x72c
 80103b8:	490c      	ldr	r1, [pc, #48]	@ (80103ec <lwip_netconn_do_write+0x110>)
 80103ba:	480a      	ldr	r0, [pc, #40]	@ (80103e4 <lwip_netconn_do_write+0x108>)
 80103bc:	f00c fcec 	bl	801cd98 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80103c0:	e008      	b.n	80103d4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80103c2:	23f5      	movs	r3, #245	@ 0xf5
 80103c4:	73fb      	strb	r3, [r7, #15]
 80103c6:	e001      	b.n	80103cc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80103c8:	23fa      	movs	r3, #250	@ 0xfa
 80103ca:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	7bfa      	ldrb	r2, [r7, #15]
 80103d0:	711a      	strb	r2, [r3, #4]
 80103d2:	e000      	b.n	80103d6 <lwip_netconn_do_write+0xfa>
        return;
 80103d4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	0801e5e8 	.word	0x0801e5e8
 80103e0:	0801e98c 	.word	0x0801e98c
 80103e4:	0801e62c 	.word	0x0801e62c
 80103e8:	0801eb14 	.word	0x0801eb14
 80103ec:	0801e9a8 	.word	0x0801e9a8
 80103f0:	2000b6d8 	.word	0x2000b6d8

080103f4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	785b      	ldrb	r3, [r3, #1]
 8010406:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d069      	beq.n	80104e6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801041c:	2b10      	cmp	r3, #16
 801041e:	d162      	bne.n	80104e6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010424:	2b03      	cmp	r3, #3
 8010426:	d002      	beq.n	801042e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010428:	7afb      	ldrb	r3, [r7, #11]
 801042a:	2b02      	cmp	r3, #2
 801042c:	d05b      	beq.n	80104e6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801042e:	7afb      	ldrb	r3, [r7, #11]
 8010430:	2b03      	cmp	r3, #3
 8010432:	d103      	bne.n	801043c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	22f5      	movs	r2, #245	@ 0xf5
 8010438:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801043a:	e059      	b.n	80104f0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801043c:	7afb      	ldrb	r3, [r7, #11]
 801043e:	2b01      	cmp	r3, #1
 8010440:	d103      	bne.n	801044a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	22fb      	movs	r2, #251	@ 0xfb
 8010446:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010448:	e052      	b.n	80104f0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	7a1b      	ldrb	r3, [r3, #8]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d004      	beq.n	8010460 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff f952 	bl	800f704 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d006      	beq.n	8010478 <lwip_netconn_do_close+0x84>
 801046a:	4b23      	ldr	r3, [pc, #140]	@ (80104f8 <lwip_netconn_do_close+0x104>)
 801046c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8010470:	4922      	ldr	r1, [pc, #136]	@ (80104fc <lwip_netconn_do_close+0x108>)
 8010472:	4823      	ldr	r0, [pc, #140]	@ (8010500 <lwip_netconn_do_close+0x10c>)
 8010474:	f00c fc90 	bl	801cd98 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	2204      	movs	r2, #4
 801047e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	68fa      	ldr	r2, [r7, #12]
 8010486:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2100      	movs	r1, #0
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff f9b6 	bl	800f800 <lwip_netconn_do_close_internal>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d029      	beq.n	80104ee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	785b      	ldrb	r3, [r3, #1]
 80104a0:	2b04      	cmp	r3, #4
 80104a2:	d006      	beq.n	80104b2 <lwip_netconn_do_close+0xbe>
 80104a4:	4b14      	ldr	r3, [pc, #80]	@ (80104f8 <lwip_netconn_do_close+0x104>)
 80104a6:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 80104aa:	4916      	ldr	r1, [pc, #88]	@ (8010504 <lwip_netconn_do_close+0x110>)
 80104ac:	4814      	ldr	r0, [pc, #80]	@ (8010500 <lwip_netconn_do_close+0x10c>)
 80104ae:	f00c fc73 	bl	801cd98 <iprintf>
        UNLOCK_TCPIP_CORE();
 80104b2:	4815      	ldr	r0, [pc, #84]	@ (8010508 <lwip_netconn_do_close+0x114>)
 80104b4:	f00c fb1f 	bl	801caf6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	330c      	adds	r3, #12
 80104be:	2100      	movs	r1, #0
 80104c0:	4618      	mov	r0, r3
 80104c2:	f00c fa76 	bl	801c9b2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80104c6:	4810      	ldr	r0, [pc, #64]	@ (8010508 <lwip_netconn_do_close+0x114>)
 80104c8:	f00c fb06 	bl	801cad8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	785b      	ldrb	r3, [r3, #1]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00b      	beq.n	80104ee <lwip_netconn_do_close+0xfa>
 80104d6:	4b08      	ldr	r3, [pc, #32]	@ (80104f8 <lwip_netconn_do_close+0x104>)
 80104d8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80104dc:	4909      	ldr	r1, [pc, #36]	@ (8010504 <lwip_netconn_do_close+0x110>)
 80104de:	4808      	ldr	r0, [pc, #32]	@ (8010500 <lwip_netconn_do_close+0x10c>)
 80104e0:	f00c fc5a 	bl	801cd98 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80104e4:	e003      	b.n	80104ee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	22f5      	movs	r2, #245	@ 0xf5
 80104ea:	711a      	strb	r2, [r3, #4]
 80104ec:	e000      	b.n	80104f0 <lwip_netconn_do_close+0xfc>
      return;
 80104ee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80104f0:	3710      	adds	r7, #16
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	0801e5e8 	.word	0x0801e5e8
 80104fc:	0801e98c 	.word	0x0801e98c
 8010500:	0801e62c 	.word	0x0801e62c
 8010504:	0801e9a8 	.word	0x0801e9a8
 8010508:	2000b6d8 	.word	0x2000b6d8

0801050c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b082      	sub	sp, #8
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d013      	beq.n	8010542 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d00b      	beq.n	801053a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4618      	mov	r0, r3
 8010528:	f002 fcce 	bl	8012ec8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	605a      	str	r2, [r3, #4]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	685a      	ldr	r2, [r3, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	2006      	movs	r0, #6
 801053e:	f001 fe1f 	bl	8012180 <memp_free>
  }
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	4613      	mov	r3, r2
 8010558:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d108      	bne.n	8010572 <netbuf_ref+0x26>
 8010560:	4b1c      	ldr	r3, [pc, #112]	@ (80105d4 <netbuf_ref+0x88>)
 8010562:	2299      	movs	r2, #153	@ 0x99
 8010564:	491c      	ldr	r1, [pc, #112]	@ (80105d8 <netbuf_ref+0x8c>)
 8010566:	481d      	ldr	r0, [pc, #116]	@ (80105dc <netbuf_ref+0x90>)
 8010568:	f00c fc16 	bl	801cd98 <iprintf>
 801056c:	f06f 030f 	mvn.w	r3, #15
 8010570:	e02b      	b.n	80105ca <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d004      	beq.n	8010584 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4618      	mov	r0, r3
 8010580:	f002 fca2 	bl	8012ec8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8010584:	2241      	movs	r2, #65	@ 0x41
 8010586:	2100      	movs	r1, #0
 8010588:	2036      	movs	r0, #54	@ 0x36
 801058a:	f002 f9b9 	bl	8012900 <pbuf_alloc>
 801058e:	4602      	mov	r2, r0
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d105      	bne.n	80105a8 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 80105a2:	f04f 33ff 	mov.w	r3, #4294967295
 80105a6:	e010      	b.n	80105ca <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	88fa      	ldrh	r2, [r7, #6]
 80105b6:	811a      	strh	r2, [r3, #8]
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	6812      	ldr	r2, [r2, #0]
 80105bc:	891b      	ldrh	r3, [r3, #8]
 80105be:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	0801eb40 	.word	0x0801eb40
 80105d8:	0801ebf8 	.word	0x0801ebf8
 80105dc:	0801eb90 	.word	0x0801eb90

080105e0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d108      	bne.n	8010604 <netbuf_data+0x24>
 80105f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010660 <netbuf_data+0x80>)
 80105f4:	22c6      	movs	r2, #198	@ 0xc6
 80105f6:	491b      	ldr	r1, [pc, #108]	@ (8010664 <netbuf_data+0x84>)
 80105f8:	481b      	ldr	r0, [pc, #108]	@ (8010668 <netbuf_data+0x88>)
 80105fa:	f00c fbcd 	bl	801cd98 <iprintf>
 80105fe:	f06f 030f 	mvn.w	r3, #15
 8010602:	e029      	b.n	8010658 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d108      	bne.n	801061c <netbuf_data+0x3c>
 801060a:	4b15      	ldr	r3, [pc, #84]	@ (8010660 <netbuf_data+0x80>)
 801060c:	22c7      	movs	r2, #199	@ 0xc7
 801060e:	4917      	ldr	r1, [pc, #92]	@ (801066c <netbuf_data+0x8c>)
 8010610:	4815      	ldr	r0, [pc, #84]	@ (8010668 <netbuf_data+0x88>)
 8010612:	f00c fbc1 	bl	801cd98 <iprintf>
 8010616:	f06f 030f 	mvn.w	r3, #15
 801061a:	e01d      	b.n	8010658 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d108      	bne.n	8010634 <netbuf_data+0x54>
 8010622:	4b0f      	ldr	r3, [pc, #60]	@ (8010660 <netbuf_data+0x80>)
 8010624:	22c8      	movs	r2, #200	@ 0xc8
 8010626:	4912      	ldr	r1, [pc, #72]	@ (8010670 <netbuf_data+0x90>)
 8010628:	480f      	ldr	r0, [pc, #60]	@ (8010668 <netbuf_data+0x88>)
 801062a:	f00c fbb5 	bl	801cd98 <iprintf>
 801062e:	f06f 030f 	mvn.w	r3, #15
 8010632:	e011      	b.n	8010658 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	685b      	ldr	r3, [r3, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <netbuf_data+0x62>
    return ERR_BUF;
 801063c:	f06f 0301 	mvn.w	r3, #1
 8010640:	e00a      	b.n	8010658 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	685a      	ldr	r2, [r3, #4]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	895a      	ldrh	r2, [r3, #10]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	0801eb40 	.word	0x0801eb40
 8010664:	0801ec48 	.word	0x0801ec48
 8010668:	0801eb90 	.word	0x0801eb90
 801066c:	0801ec64 	.word	0x0801ec64
 8010670:	0801ec84 	.word	0x0801ec84

08010674 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b082      	sub	sp, #8
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d108      	bne.n	8010694 <netbuf_next+0x20>
 8010682:	4b11      	ldr	r3, [pc, #68]	@ (80106c8 <netbuf_next+0x54>)
 8010684:	22e0      	movs	r2, #224	@ 0xe0
 8010686:	4911      	ldr	r1, [pc, #68]	@ (80106cc <netbuf_next+0x58>)
 8010688:	4811      	ldr	r0, [pc, #68]	@ (80106d0 <netbuf_next+0x5c>)
 801068a:	f00c fb85 	bl	801cd98 <iprintf>
 801068e:	f04f 33ff 	mov.w	r3, #4294967295
 8010692:	e014      	b.n	80106be <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	685b      	ldr	r3, [r3, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d102      	bne.n	80106a4 <netbuf_next+0x30>
    return -1;
 801069e:	f04f 33ff 	mov.w	r3, #4294967295
 80106a2:	e00c      	b.n	80106be <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	685b      	ldr	r3, [r3, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d101      	bne.n	80106bc <netbuf_next+0x48>
    return 1;
 80106b8:	2301      	movs	r3, #1
 80106ba:	e000      	b.n	80106be <netbuf_next+0x4a>
  }
  return 0;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	0801eb40 	.word	0x0801eb40
 80106cc:	0801eca0 	.word	0x0801eca0
 80106d0:	0801eb90 	.word	0x0801eb90

080106d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80106de:	f009 f891 	bl	8019804 <sys_timeouts_sleeptime>
 80106e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ea:	d10b      	bne.n	8010704 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80106ec:	4813      	ldr	r0, [pc, #76]	@ (801073c <tcpip_timeouts_mbox_fetch+0x68>)
 80106ee:	f00c fa02 	bl	801caf6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80106f2:	2200      	movs	r2, #0
 80106f4:	6839      	ldr	r1, [r7, #0]
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f00c f8ba 	bl	801c870 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80106fc:	480f      	ldr	r0, [pc, #60]	@ (801073c <tcpip_timeouts_mbox_fetch+0x68>)
 80106fe:	f00c f9eb 	bl	801cad8 <sys_mutex_lock>
    return;
 8010702:	e018      	b.n	8010736 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801070a:	f009 f841 	bl	8019790 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801070e:	e7e6      	b.n	80106de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010710:	480a      	ldr	r0, [pc, #40]	@ (801073c <tcpip_timeouts_mbox_fetch+0x68>)
 8010712:	f00c f9f0 	bl	801caf6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010716:	68fa      	ldr	r2, [r7, #12]
 8010718:	6839      	ldr	r1, [r7, #0]
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f00c f8a8 	bl	801c870 <sys_arch_mbox_fetch>
 8010720:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010722:	4806      	ldr	r0, [pc, #24]	@ (801073c <tcpip_timeouts_mbox_fetch+0x68>)
 8010724:	f00c f9d8 	bl	801cad8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801072e:	d102      	bne.n	8010736 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010730:	f009 f82e 	bl	8019790 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010734:	e7d3      	b.n	80106de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010736:	3710      	adds	r7, #16
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	2000b6d8 	.word	0x2000b6d8

08010740 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010748:	4810      	ldr	r0, [pc, #64]	@ (801078c <tcpip_thread+0x4c>)
 801074a:	f00c f9c5 	bl	801cad8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801074e:	4b10      	ldr	r3, [pc, #64]	@ (8010790 <tcpip_thread+0x50>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d005      	beq.n	8010762 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010756:	4b0e      	ldr	r3, [pc, #56]	@ (8010790 <tcpip_thread+0x50>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	4a0e      	ldr	r2, [pc, #56]	@ (8010794 <tcpip_thread+0x54>)
 801075c:	6812      	ldr	r2, [r2, #0]
 801075e:	4610      	mov	r0, r2
 8010760:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010762:	f107 030c 	add.w	r3, r7, #12
 8010766:	4619      	mov	r1, r3
 8010768:	480b      	ldr	r0, [pc, #44]	@ (8010798 <tcpip_thread+0x58>)
 801076a:	f7ff ffb3 	bl	80106d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d106      	bne.n	8010782 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010774:	4b09      	ldr	r3, [pc, #36]	@ (801079c <tcpip_thread+0x5c>)
 8010776:	2291      	movs	r2, #145	@ 0x91
 8010778:	4909      	ldr	r1, [pc, #36]	@ (80107a0 <tcpip_thread+0x60>)
 801077a:	480a      	ldr	r0, [pc, #40]	@ (80107a4 <tcpip_thread+0x64>)
 801077c:	f00c fb0c 	bl	801cd98 <iprintf>
      continue;
 8010780:	e003      	b.n	801078a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	4618      	mov	r0, r3
 8010786:	f000 f80f 	bl	80107a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801078a:	e7ea      	b.n	8010762 <tcpip_thread+0x22>
 801078c:	2000b6d8 	.word	0x2000b6d8
 8010790:	2000b6cc 	.word	0x2000b6cc
 8010794:	2000b6d0 	.word	0x2000b6d0
 8010798:	2000b6d4 	.word	0x2000b6d4
 801079c:	0801ecd8 	.word	0x0801ecd8
 80107a0:	0801ed08 	.word	0x0801ed08
 80107a4:	0801ed28 	.word	0x0801ed28

080107a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	d026      	beq.n	8010806 <tcpip_thread_handle_msg+0x5e>
 80107b8:	2b02      	cmp	r3, #2
 80107ba:	dc2b      	bgt.n	8010814 <tcpip_thread_handle_msg+0x6c>
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <tcpip_thread_handle_msg+0x1e>
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d015      	beq.n	80107f0 <tcpip_thread_handle_msg+0x48>
 80107c4:	e026      	b.n	8010814 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	6850      	ldr	r0, [r2, #4]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	6892      	ldr	r2, [r2, #8]
 80107d2:	4611      	mov	r1, r2
 80107d4:	4798      	blx	r3
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d004      	beq.n	80107e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	f002 fb71 	bl	8012ec8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80107e6:	6879      	ldr	r1, [r7, #4]
 80107e8:	2009      	movs	r0, #9
 80107ea:	f001 fcc9 	bl	8012180 <memp_free>
      break;
 80107ee:	e018      	b.n	8010822 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	6892      	ldr	r2, [r2, #8]
 80107f8:	4610      	mov	r0, r2
 80107fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80107fc:	6879      	ldr	r1, [r7, #4]
 80107fe:	2008      	movs	r0, #8
 8010800:	f001 fcbe 	bl	8012180 <memp_free>
      break;
 8010804:	e00d      	b.n	8010822 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	6892      	ldr	r2, [r2, #8]
 801080e:	4610      	mov	r0, r2
 8010810:	4798      	blx	r3
      break;
 8010812:	e006      	b.n	8010822 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010814:	4b05      	ldr	r3, [pc, #20]	@ (801082c <tcpip_thread_handle_msg+0x84>)
 8010816:	22cf      	movs	r2, #207	@ 0xcf
 8010818:	4905      	ldr	r1, [pc, #20]	@ (8010830 <tcpip_thread_handle_msg+0x88>)
 801081a:	4806      	ldr	r0, [pc, #24]	@ (8010834 <tcpip_thread_handle_msg+0x8c>)
 801081c:	f00c fabc 	bl	801cd98 <iprintf>
      break;
 8010820:	bf00      	nop
  }
}
 8010822:	bf00      	nop
 8010824:	3708      	adds	r7, #8
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	0801ecd8 	.word	0x0801ecd8
 8010830:	0801ed08 	.word	0x0801ed08
 8010834:	0801ed28 	.word	0x0801ed28

08010838 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b086      	sub	sp, #24
 801083c:	af00      	add	r7, sp, #0
 801083e:	60f8      	str	r0, [r7, #12]
 8010840:	60b9      	str	r1, [r7, #8]
 8010842:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010844:	481a      	ldr	r0, [pc, #104]	@ (80108b0 <tcpip_inpkt+0x78>)
 8010846:	f00c f86e 	bl	801c926 <sys_mbox_valid>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d105      	bne.n	801085c <tcpip_inpkt+0x24>
 8010850:	4b18      	ldr	r3, [pc, #96]	@ (80108b4 <tcpip_inpkt+0x7c>)
 8010852:	22fc      	movs	r2, #252	@ 0xfc
 8010854:	4918      	ldr	r1, [pc, #96]	@ (80108b8 <tcpip_inpkt+0x80>)
 8010856:	4819      	ldr	r0, [pc, #100]	@ (80108bc <tcpip_inpkt+0x84>)
 8010858:	f00c fa9e 	bl	801cd98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801085c:	2009      	movs	r0, #9
 801085e:	f001 fc19 	bl	8012094 <memp_malloc>
 8010862:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d102      	bne.n	8010870 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801086a:	f04f 33ff 	mov.w	r3, #4294967295
 801086e:	e01a      	b.n	80108a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	2200      	movs	r2, #0
 8010874:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	68fa      	ldr	r2, [r7, #12]
 801087a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010888:	6979      	ldr	r1, [r7, #20]
 801088a:	4809      	ldr	r0, [pc, #36]	@ (80108b0 <tcpip_inpkt+0x78>)
 801088c:	f00b ffd6 	bl	801c83c <sys_mbox_trypost>
 8010890:	4603      	mov	r3, r0
 8010892:	2b00      	cmp	r3, #0
 8010894:	d006      	beq.n	80108a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010896:	6979      	ldr	r1, [r7, #20]
 8010898:	2009      	movs	r0, #9
 801089a:	f001 fc71 	bl	8012180 <memp_free>
    return ERR_MEM;
 801089e:	f04f 33ff 	mov.w	r3, #4294967295
 80108a2:	e000      	b.n	80108a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80108a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	2000b6d4 	.word	0x2000b6d4
 80108b4:	0801ecd8 	.word	0x0801ecd8
 80108b8:	0801ed50 	.word	0x0801ed50
 80108bc:	0801ed28 	.word	0x0801ed28

080108c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80108d0:	f003 0318 	and.w	r3, r3, #24
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d006      	beq.n	80108e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80108d8:	4a08      	ldr	r2, [pc, #32]	@ (80108fc <tcpip_input+0x3c>)
 80108da:	6839      	ldr	r1, [r7, #0]
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f7ff ffab 	bl	8010838 <tcpip_inpkt>
 80108e2:	4603      	mov	r3, r0
 80108e4:	e005      	b.n	80108f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80108e6:	4a06      	ldr	r2, [pc, #24]	@ (8010900 <tcpip_input+0x40>)
 80108e8:	6839      	ldr	r1, [r7, #0]
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7ff ffa4 	bl	8010838 <tcpip_inpkt>
 80108f0:	4603      	mov	r3, r0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
 80108fa:	bf00      	nop
 80108fc:	0801c629 	.word	0x0801c629
 8010900:	0801b531 	.word	0x0801b531

08010904 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801090e:	4819      	ldr	r0, [pc, #100]	@ (8010974 <tcpip_try_callback+0x70>)
 8010910:	f00c f809 	bl	801c926 <sys_mbox_valid>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <tcpip_try_callback+0x24>
 801091a:	4b17      	ldr	r3, [pc, #92]	@ (8010978 <tcpip_try_callback+0x74>)
 801091c:	f240 125d 	movw	r2, #349	@ 0x15d
 8010920:	4916      	ldr	r1, [pc, #88]	@ (801097c <tcpip_try_callback+0x78>)
 8010922:	4817      	ldr	r0, [pc, #92]	@ (8010980 <tcpip_try_callback+0x7c>)
 8010924:	f00c fa38 	bl	801cd98 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010928:	2008      	movs	r0, #8
 801092a:	f001 fbb3 	bl	8012094 <memp_malloc>
 801092e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d102      	bne.n	801093c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010936:	f04f 33ff 	mov.w	r3, #4294967295
 801093a:	e017      	b.n	801096c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2201      	movs	r2, #1
 8010940:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801094e:	68f9      	ldr	r1, [r7, #12]
 8010950:	4808      	ldr	r0, [pc, #32]	@ (8010974 <tcpip_try_callback+0x70>)
 8010952:	f00b ff73 	bl	801c83c <sys_mbox_trypost>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d006      	beq.n	801096a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801095c:	68f9      	ldr	r1, [r7, #12]
 801095e:	2008      	movs	r0, #8
 8010960:	f001 fc0e 	bl	8012180 <memp_free>
    return ERR_MEM;
 8010964:	f04f 33ff 	mov.w	r3, #4294967295
 8010968:	e000      	b.n	801096c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	2000b6d4 	.word	0x2000b6d4
 8010978:	0801ecd8 	.word	0x0801ecd8
 801097c:	0801ed50 	.word	0x0801ed50
 8010980:	0801ed28 	.word	0x0801ed28

08010984 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	60b9      	str	r1, [r7, #8]
 801098e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010990:	4806      	ldr	r0, [pc, #24]	@ (80109ac <tcpip_send_msg_wait_sem+0x28>)
 8010992:	f00c f8a1 	bl	801cad8 <sys_mutex_lock>
  fn(apimsg);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	68b8      	ldr	r0, [r7, #8]
 801099a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801099c:	4803      	ldr	r0, [pc, #12]	@ (80109ac <tcpip_send_msg_wait_sem+0x28>)
 801099e:	f00c f8aa 	bl	801caf6 <sys_mutex_unlock>
  return ERR_OK;
 80109a2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	2000b6d8 	.word	0x2000b6d8

080109b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af02      	add	r7, sp, #8
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80109ba:	f000 fec1 	bl	8011740 <lwip_init>

  tcpip_init_done = initfunc;
 80109be:	4a17      	ldr	r2, [pc, #92]	@ (8010a1c <tcpip_init+0x6c>)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80109c4:	4a16      	ldr	r2, [pc, #88]	@ (8010a20 <tcpip_init+0x70>)
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80109ca:	2106      	movs	r1, #6
 80109cc:	4815      	ldr	r0, [pc, #84]	@ (8010a24 <tcpip_init+0x74>)
 80109ce:	f00b ff01 	bl	801c7d4 <sys_mbox_new>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d006      	beq.n	80109e6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80109d8:	4b13      	ldr	r3, [pc, #76]	@ (8010a28 <tcpip_init+0x78>)
 80109da:	f240 2261 	movw	r2, #609	@ 0x261
 80109de:	4913      	ldr	r1, [pc, #76]	@ (8010a2c <tcpip_init+0x7c>)
 80109e0:	4813      	ldr	r0, [pc, #76]	@ (8010a30 <tcpip_init+0x80>)
 80109e2:	f00c f9d9 	bl	801cd98 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80109e6:	4813      	ldr	r0, [pc, #76]	@ (8010a34 <tcpip_init+0x84>)
 80109e8:	f00c f85a 	bl	801caa0 <sys_mutex_new>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d006      	beq.n	8010a00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80109f2:	4b0d      	ldr	r3, [pc, #52]	@ (8010a28 <tcpip_init+0x78>)
 80109f4:	f240 2265 	movw	r2, #613	@ 0x265
 80109f8:	490f      	ldr	r1, [pc, #60]	@ (8010a38 <tcpip_init+0x88>)
 80109fa:	480d      	ldr	r0, [pc, #52]	@ (8010a30 <tcpip_init+0x80>)
 80109fc:	f00c f9cc 	bl	801cd98 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010a00:	2300      	movs	r3, #0
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a08:	2200      	movs	r2, #0
 8010a0a:	490c      	ldr	r1, [pc, #48]	@ (8010a3c <tcpip_init+0x8c>)
 8010a0c:	480c      	ldr	r0, [pc, #48]	@ (8010a40 <tcpip_init+0x90>)
 8010a0e:	f00c f87f 	bl	801cb10 <sys_thread_new>
}
 8010a12:	bf00      	nop
 8010a14:	3708      	adds	r7, #8
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	2000b6cc 	.word	0x2000b6cc
 8010a20:	2000b6d0 	.word	0x2000b6d0
 8010a24:	2000b6d4 	.word	0x2000b6d4
 8010a28:	0801ecd8 	.word	0x0801ecd8
 8010a2c:	0801ed60 	.word	0x0801ed60
 8010a30:	0801ed28 	.word	0x0801ed28
 8010a34:	2000b6d8 	.word	0x2000b6d8
 8010a38:	0801ed84 	.word	0x0801ed84
 8010a3c:	08010741 	.word	0x08010741
 8010a40:	0801eda8 	.word	0x0801eda8

08010a44 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b084      	sub	sp, #16
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d002      	beq.n	8010a5a <fs_open+0x16>
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d102      	bne.n	8010a60 <fs_open+0x1c>
    return ERR_ARG;
 8010a5a:	f06f 030f 	mvn.w	r3, #15
 8010a5e:	e028      	b.n	8010ab2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010a60:	4b16      	ldr	r3, [pc, #88]	@ (8010abc <fs_open+0x78>)
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	e020      	b.n	8010aa8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6838      	ldr	r0, [r7, #0]
 8010a6e:	f7ef fbcf 	bl	8000210 <strcmp>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d114      	bne.n	8010aa2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	689a      	ldr	r2, [r3, #8]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	68da      	ldr	r2, [r3, #12]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	68da      	ldr	r2, [r3, #12]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	7c1a      	ldrb	r2, [r3, #16]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	e007      	b.n	8010ab2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	60fb      	str	r3, [r7, #12]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d1db      	bne.n	8010a66 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8010aae:	f06f 0305 	mvn.w	r3, #5
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3710      	adds	r7, #16
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	0802262c 	.word	0x0802262c

08010ac0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8010ac8:	bf00      	nop
 8010aca:	370c      	adds	r7, #12
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	1ad3      	subs	r3, r2, r3
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	370c      	adds	r7, #12
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr

08010af2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8010afa:	222c      	movs	r2, #44	@ 0x2c
 8010afc:	2100      	movs	r1, #0
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f00c f9e9 	bl	801ced6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8010b04:	bf00      	nop
 8010b06:	3708      	adds	r7, #8
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8010b12:	202c      	movs	r0, #44	@ 0x2c
 8010b14:	f001 f91a 	bl	8011d4c <mem_malloc>
 8010b18:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <http_state_alloc+0x1a>
    http_state_init(ret);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff ffe6 	bl	8010af2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8010b26:	687b      	ldr	r3, [r7, #4]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d007      	beq.n	8010b50 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	695b      	ldr	r3, [r3, #20]
 8010b44:	4618      	mov	r0, r3
 8010b46:	f7ff ffbb 	bl	8010ac0 <fs_close>
    hs->handle = NULL;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6a1b      	ldr	r3, [r3, #32]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d007      	beq.n	8010b68 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a1b      	ldr	r3, [r3, #32]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f002 f9b3 	bl	8012ec8 <pbuf_free>
    hs->req = NULL;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8010b68:	bf00      	nop
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d005      	beq.n	8010b8a <http_state_free+0x1a>
    http_state_eof(hs);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ff ffd6 	bl	8010b30 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f000 ff47 	bl	8011a18 <mem_free>
  }
}
 8010b8a:	bf00      	nop
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b086      	sub	sp, #24
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	607a      	str	r2, [r7, #4]
 8010ba0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d106      	bne.n	8010bb6 <http_write+0x22>
 8010ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8010c5c <http_write+0xc8>)
 8010baa:	f240 2219 	movw	r2, #537	@ 0x219
 8010bae:	492c      	ldr	r1, [pc, #176]	@ (8010c60 <http_write+0xcc>)
 8010bb0:	482c      	ldr	r0, [pc, #176]	@ (8010c64 <http_write+0xd0>)
 8010bb2:	f00c f8f1 	bl	801cd98 <iprintf>
  len = *length;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	881b      	ldrh	r3, [r3, #0]
 8010bba:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8010bbc:	8afb      	ldrh	r3, [r7, #22]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d101      	bne.n	8010bc6 <http_write+0x32>
    return ERR_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e045      	b.n	8010c52 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010bcc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8010bce:	8aba      	ldrh	r2, [r7, #20]
 8010bd0:	8afb      	ldrh	r3, [r7, #22]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d201      	bcs.n	8010bda <http_write+0x46>
    len = max_len;
 8010bd6:	8abb      	ldrh	r3, [r7, #20]
 8010bd8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8010be2:	8afa      	ldrh	r2, [r7, #22]
 8010be4:	8abb      	ldrh	r3, [r7, #20]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d901      	bls.n	8010bee <http_write+0x5a>
    len = max_len;
 8010bea:	8abb      	ldrh	r3, [r7, #20]
 8010bec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8010bee:	78fb      	ldrb	r3, [r7, #3]
 8010bf0:	8afa      	ldrh	r2, [r7, #22]
 8010bf2:	68b9      	ldr	r1, [r7, #8]
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f006 ff63 	bl	8017ac0 <tcp_write>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8010bfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c06:	d10f      	bne.n	8010c28 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d004      	beq.n	8010c1c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8010c18:	2b08      	cmp	r3, #8
 8010c1a:	d902      	bls.n	8010c22 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	82fb      	strh	r3, [r7, #22]
 8010c20:	e002      	b.n	8010c28 <http_write+0x94>
      } else {
        len /= 2;
 8010c22:	8afb      	ldrh	r3, [r7, #22]
 8010c24:	085b      	lsrs	r3, r3, #1
 8010c26:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8010c28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c30:	d102      	bne.n	8010c38 <http_write+0xa4>
 8010c32:	8afb      	ldrh	r3, [r7, #22]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d8da      	bhi.n	8010bee <http_write+0x5a>

  if (err == ERR_OK) {
 8010c38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d103      	bne.n	8010c48 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8afa      	ldrh	r2, [r7, #22]
 8010c44:	801a      	strh	r2, [r3, #0]
 8010c46:	e002      	b.n	8010c4e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8010c4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	0801edf8 	.word	0x0801edf8
 8010c60:	0801ee30 	.word	0x0801ee30
 8010c64:	0801ee40 	.word	0x0801ee40

08010c68 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	4613      	mov	r3, r2
 8010c74:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8010c76:	2100      	movs	r1, #0
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f003 ffe5 	bl	8014c48 <tcp_arg>
  altcp_recv(pcb, NULL);
 8010c7e:	2100      	movs	r1, #0
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f003 fff3 	bl	8014c6c <tcp_recv>
  altcp_err(pcb, NULL);
 8010c86:	2100      	movs	r1, #0
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f004 f833 	bl	8014cf4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8010c8e:	2200      	movs	r2, #0
 8010c90:	2100      	movs	r1, #0
 8010c92:	68f8      	ldr	r0, [r7, #12]
 8010c94:	f004 f868 	bl	8014d68 <tcp_poll>
  altcp_sent(pcb, NULL);
 8010c98:	2100      	movs	r1, #0
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f004 f808 	bl	8014cb0 <tcp_sent>
  if (hs != NULL) {
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d002      	beq.n	8010cac <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8010ca6:	68b8      	ldr	r0, [r7, #8]
 8010ca8:	f7ff ff62 	bl	8010b70 <http_state_free>
  }

  if (abort_conn) {
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d004      	beq.n	8010cbc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f002 ff08 	bl	8013ac8 <tcp_abort>
    return ERR_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	e00f      	b.n	8010cdc <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8010cbc:	68f8      	ldr	r0, [r7, #12]
 8010cbe:	f002 fdbd 	bl	801383c <tcp_close>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8010cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d004      	beq.n	8010cd8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8010cce:	2204      	movs	r2, #4
 8010cd0:	4904      	ldr	r1, [pc, #16]	@ (8010ce4 <http_close_or_abort_conn+0x7c>)
 8010cd2:	68f8      	ldr	r0, [r7, #12]
 8010cd4:	f004 f848 	bl	8014d68 <tcp_poll>
  }
  return err;
 8010cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	080113ab 	.word	0x080113ab

08010ce8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	6839      	ldr	r1, [r7, #0]
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7ff ffb6 	bl	8010c68 <http_close_or_abort_conn>
 8010cfc:	4603      	mov	r3, r0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	3708      	adds	r7, #8
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}

08010d06 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b082      	sub	sp, #8
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
 8010d0e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8010d10:	6839      	ldr	r1, [r7, #0]
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f7ff ffe8 	bl	8010ce8 <http_close_conn>
  }
}
 8010d18:	bf00      	nop
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b084      	sub	sp, #16
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d105      	bne.n	8010d3e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff ffe6 	bl	8010d06 <http_eof>
    return 0;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e016      	b.n	8010d6c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7ff fec6 	bl	8010ad4 <fs_bytes_left>
 8010d48:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	dc05      	bgt.n	8010d5c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010d50:	6839      	ldr	r1, [r7, #0]
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f7ff ffd7 	bl	8010d06 <http_eof>
    return 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e007      	b.n	8010d6c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8010d5c:	4b05      	ldr	r3, [pc, #20]	@ (8010d74 <http_check_eof+0x54>)
 8010d5e:	f240 429d 	movw	r2, #1181	@ 0x49d
 8010d62:	4905      	ldr	r1, [pc, #20]	@ (8010d78 <http_check_eof+0x58>)
 8010d64:	4805      	ldr	r0, [pc, #20]	@ (8010d7c <http_check_eof+0x5c>)
 8010d66:	f00c f817 	bl	801cd98 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8010d6a:	2301      	movs	r3, #1
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	0801edf8 	.word	0x0801edf8
 8010d78:	0801ee68 	.word	0x0801ee68
 8010d7c:	0801ee40 	.word	0x0801ee40

08010d80 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d92:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d803      	bhi.n	8010da2 <http_send_data_nonssi+0x22>
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	e001      	b.n	8010da6 <http_send_data_nonssi+0x26>
 8010da2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010da6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	6999      	ldr	r1, [r3, #24]
 8010dac:	f107 020c 	add.w	r2, r7, #12
 8010db0:	2300      	movs	r3, #0
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7ff feee 	bl	8010b94 <http_write>
 8010db8:	4603      	mov	r3, r0
 8010dba:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8010dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10d      	bne.n	8010de0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	699b      	ldr	r3, [r3, #24]
 8010dcc:	89ba      	ldrh	r2, [r7, #12]
 8010dce:	441a      	add	r2, r3
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dd8:	89ba      	ldrh	r2, [r7, #12]
 8010dda:	1a9a      	subs	r2, r3, r2
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8010de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3710      	adds	r7, #16
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b084      	sub	sp, #16
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8010df4:	2300      	movs	r3, #0
 8010df6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d101      	bne.n	8010e02 <http_send+0x18>
    return 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	e025      	b.n	8010e4e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d108      	bne.n	8010e1c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff ff87 	bl	8010d20 <http_check_eof>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d101      	bne.n	8010e1c <http_send+0x32>
      return 0;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e018      	b.n	8010e4e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8010e1c:	6839      	ldr	r1, [r7, #0]
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff ffae 	bl	8010d80 <http_send_data_nonssi>
 8010e24:	4603      	mov	r3, r0
 8010e26:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d10d      	bne.n	8010e4c <http_send+0x62>
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	695b      	ldr	r3, [r3, #20]
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7ff fe4d 	bl	8010ad4 <fs_bytes_left>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	dc05      	bgt.n	8010e4c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8010e40:	6839      	ldr	r1, [r7, #0]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ff5f 	bl	8010d06 <http_eof>
    return 0;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	e000      	b.n	8010e4e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
	...

08010e58 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	4a1c      	ldr	r2, [pc, #112]	@ (8010ed8 <http_get_404_file+0x80>)
 8010e66:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8010e68:	687a      	ldr	r2, [r7, #4]
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4619      	mov	r1, r3
 8010e70:	4610      	mov	r0, r2
 8010e72:	f7ff fde7 	bl	8010a44 <fs_open>
 8010e76:	4603      	mov	r3, r0
 8010e78:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d024      	beq.n	8010ecc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	4a15      	ldr	r2, [pc, #84]	@ (8010edc <http_get_404_file+0x84>)
 8010e86:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	4619      	mov	r1, r3
 8010e90:	4610      	mov	r0, r2
 8010e92:	f7ff fdd7 	bl	8010a44 <fs_open>
 8010e96:	4603      	mov	r3, r0
 8010e98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d014      	beq.n	8010ecc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8010ee0 <http_get_404_file+0x88>)
 8010ea6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	f7ff fdc7 	bl	8010a44 <fs_open>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8010eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d004      	beq.n	8010ecc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	601a      	str	r2, [r3, #0]
        return NULL;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	e000      	b.n	8010ece <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8010ecc:	687b      	ldr	r3, [r7, #4]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	0801eea0 	.word	0x0801eea0
 8010edc:	0801eeac 	.word	0x0801eeac
 8010ee0:	0801eeb8 	.word	0x0801eeb8

08010ee4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08e      	sub	sp, #56	@ 0x38
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d106      	bne.n	8010f08 <http_parse_request+0x24>
 8010efa:	4b65      	ldr	r3, [pc, #404]	@ (8011090 <http_parse_request+0x1ac>)
 8010efc:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8010f00:	4964      	ldr	r1, [pc, #400]	@ (8011094 <http_parse_request+0x1b0>)
 8010f02:	4865      	ldr	r0, [pc, #404]	@ (8011098 <http_parse_request+0x1b4>)
 8010f04:	f00b ff48 	bl	801cd98 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <http_parse_request+0x38>
 8010f0e:	4b60      	ldr	r3, [pc, #384]	@ (8011090 <http_parse_request+0x1ac>)
 8010f10:	f240 72af 	movw	r2, #1967	@ 0x7af
 8010f14:	4961      	ldr	r1, [pc, #388]	@ (801109c <http_parse_request+0x1b8>)
 8010f16:	4860      	ldr	r0, [pc, #384]	@ (8011098 <http_parse_request+0x1b4>)
 8010f18:	f00b ff3e 	bl	801cd98 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	695b      	ldr	r3, [r3, #20]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d103      	bne.n	8010f2c <http_parse_request+0x48>
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	699b      	ldr	r3, [r3, #24]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8010f2c:	f06f 0307 	mvn.w	r3, #7
 8010f30:	e0a9      	b.n	8011086 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6a1b      	ldr	r3, [r3, #32]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d103      	bne.n	8010f42 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f3e:	621a      	str	r2, [r3, #32]
 8010f40:	e005      	b.n	8010f4e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	6a1b      	ldr	r3, [r3, #32]
 8010f46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f002 f88b 	bl	8013064 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8010f4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f50:	f002 f860 	bl	8013014 <pbuf_ref>

  if (hs->req->next != NULL) {
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	6a1b      	ldr	r3, [r3, #32]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d012      	beq.n	8010f84 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	6a1b      	ldr	r3, [r3, #32]
 8010f62:	891b      	ldrh	r3, [r3, #8]
 8010f64:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	bf28      	it	cs
 8010f6c:	4613      	movcs	r3, r2
 8010f6e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	6a18      	ldr	r0, [r3, #32]
 8010f74:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010f76:	2300      	movs	r3, #0
 8010f78:	4949      	ldr	r1, [pc, #292]	@ (80110a0 <http_parse_request+0x1bc>)
 8010f7a:	f002 f9ab 	bl	80132d4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8010f7e:	4b48      	ldr	r3, [pc, #288]	@ (80110a0 <http_parse_request+0x1bc>)
 8010f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f82:	e005      	b.n	8010f90 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8010f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8010f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f8c:	895b      	ldrh	r3, [r3, #10]
 8010f8e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8010f90:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010f92:	2b06      	cmp	r3, #6
 8010f94:	d962      	bls.n	801105c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8010f96:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4942      	ldr	r1, [pc, #264]	@ (80110a4 <http_parse_request+0x1c0>)
 8010f9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010f9e:	f000 fb99 	bl	80116d4 <lwip_strnstr>
 8010fa2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d058      	beq.n	801105c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8010faa:	2300      	movs	r3, #0
 8010fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8010fae:	2204      	movs	r2, #4
 8010fb0:	493d      	ldr	r1, [pc, #244]	@ (80110a8 <http_parse_request+0x1c4>)
 8010fb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010fb4:	f00b ffa4 	bl	801cf00 <strncmp>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d116      	bne.n	8010fec <http_parse_request+0x108>
        sp1 = data + 3;
 8010fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fc0:	3303      	adds	r3, #3
 8010fc2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	1c5a      	adds	r2, r3, #1
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	8b7a      	ldrh	r2, [r7, #26]
 8010fda:	4934      	ldr	r1, [pc, #208]	@ (80110ac <http_parse_request+0x1c8>)
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f000 fb79 	bl	80116d4 <lwip_strnstr>
 8010fe2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8010fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d111      	bne.n	801100e <http_parse_request+0x12a>
 8010fea:	e006      	b.n	8010ffa <http_parse_request+0x116>
        data[4] = 0;
 8010fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fee:	3304      	adds	r3, #4
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8010ff4:	f06f 030f 	mvn.w	r3, #15
 8010ff8:	e045      	b.n	8011086 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	8b7a      	ldrh	r2, [r7, #26]
 8011000:	4928      	ldr	r1, [pc, #160]	@ (80110a4 <http_parse_request+0x1c0>)
 8011002:	4618      	mov	r0, r3
 8011004:	f000 fb66 	bl	80116d4 <lwip_strnstr>
 8011008:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 801100a:	2301      	movs	r3, #1
 801100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	3301      	adds	r3, #1
 8011012:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8011018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101a:	2b00      	cmp	r3, #0
 801101c:	d01e      	beq.n	801105c <http_parse_request+0x178>
 801101e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	429a      	cmp	r2, r3
 8011024:	d91a      	bls.n	801105c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8011026:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011028:	461a      	mov	r2, r3
 801102a:	4921      	ldr	r1, [pc, #132]	@ (80110b0 <http_parse_request+0x1cc>)
 801102c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801102e:	f000 fb51 	bl	80116d4 <lwip_strnstr>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d011      	beq.n	801105c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	3301      	adds	r3, #1
 801103c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	2200      	movs	r2, #0
 8011042:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8011044:	8b3b      	ldrh	r3, [r7, #24]
 8011046:	697a      	ldr	r2, [r7, #20]
 8011048:	4413      	add	r3, r2
 801104a:	2200      	movs	r2, #0
 801104c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 801104e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011050:	6979      	ldr	r1, [r7, #20]
 8011052:	68b8      	ldr	r0, [r7, #8]
 8011054:	f000 f82e 	bl	80110b4 <http_find_file>
 8011058:	4603      	mov	r3, r0
 801105a:	e014      	b.n	8011086 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	6a1b      	ldr	r3, [r3, #32]
 8011060:	4618      	mov	r0, r3
 8011062:	f001 ffbf 	bl	8012fe4 <pbuf_clen>
 8011066:	4603      	mov	r3, r0
 8011068:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	6a1b      	ldr	r3, [r3, #32]
 801106e:	891b      	ldrh	r3, [r3, #8]
 8011070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011074:	d205      	bcs.n	8011082 <http_parse_request+0x19e>
 8011076:	8a7b      	ldrh	r3, [r7, #18]
 8011078:	2b05      	cmp	r3, #5
 801107a:	d802      	bhi.n	8011082 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 801107c:	f06f 0304 	mvn.w	r3, #4
 8011080:	e001      	b.n	8011086 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8011082:	f06f 030f 	mvn.w	r3, #15
  }
}
 8011086:	4618      	mov	r0, r3
 8011088:	3738      	adds	r7, #56	@ 0x38
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	0801edf8 	.word	0x0801edf8
 8011094:	0801eec4 	.word	0x0801eec4
 8011098:	0801ee40 	.word	0x0801ee40
 801109c:	0801eed0 	.word	0x0801eed0
 80110a0:	2000b6dc 	.word	0x2000b6dc
 80110a4:	0801eedc 	.word	0x0801eedc
 80110a8:	0801eee0 	.word	0x0801eee0
 80110ac:	0801eee8 	.word	0x0801eee8
 80110b0:	0801eeec 	.word	0x0801eeec

080110b4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b092      	sub	sp, #72	@ 0x48
 80110b8:	af02      	add	r7, sp, #8
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80110c0:	2300      	movs	r3, #0
 80110c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80110c4:	2300      	movs	r3, #0
 80110c6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80110c8:	2300      	movs	r3, #0
 80110ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ef f8a7 	bl	8000224 <strlen>
 80110d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80110d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d06b      	beq.n	80111b6 <http_find_file+0x102>
 80110de:	68ba      	ldr	r2, [r7, #8]
 80110e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e2:	3b01      	subs	r3, #1
 80110e4:	4413      	add	r3, r2
 80110e6:	781b      	ldrb	r3, [r3, #0]
 80110e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80110ea:	d164      	bne.n	80111b6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80110ec:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80110ee:	4a53      	ldr	r2, [pc, #332]	@ (801123c <http_find_file+0x188>)
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d102      	bne.n	80110fa <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80110f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d15d      	bne.n	80111b6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80110fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110fc:	3b01      	subs	r3, #1
 80110fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8011100:	bf28      	it	cs
 8011102:	233f      	movcs	r3, #63	@ 0x3f
 8011104:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8011106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00a      	beq.n	8011122 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011110:	4619      	mov	r1, r3
 8011112:	484a      	ldr	r0, [pc, #296]	@ (801123c <http_find_file+0x188>)
 8011114:	f00b ffc9 	bl	801d0aa <memcpy>
      http_uri_buf[copy_len] = 0;
 8011118:	4a48      	ldr	r2, [pc, #288]	@ (801123c <http_find_file+0x188>)
 801111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801111c:	4413      	add	r3, r2
 801111e:	2200      	movs	r2, #0
 8011120:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8011122:	2300      	movs	r3, #0
 8011124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011126:	e043      	b.n	80111b0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8011128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801112a:	2b00      	cmp	r3, #0
 801112c:	d028      	beq.n	8011180 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 801112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011130:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8011134:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8011136:	6a3b      	ldr	r3, [r7, #32]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01e      	beq.n	801117a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801113c:	4a40      	ldr	r2, [pc, #256]	@ (8011240 <http_find_file+0x18c>)
 801113e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011144:	4618      	mov	r0, r3
 8011146:	f7ef f86d 	bl	8000224 <strlen>
 801114a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801114c:	69fa      	ldr	r2, [r7, #28]
 801114e:	6a3b      	ldr	r3, [r7, #32]
 8011150:	4293      	cmp	r3, r2
 8011152:	bf28      	it	cs
 8011154:	4613      	movcs	r3, r2
 8011156:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8011158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115a:	4a38      	ldr	r2, [pc, #224]	@ (801123c <http_find_file+0x188>)
 801115c:	1898      	adds	r0, r3, r2
 801115e:	4a38      	ldr	r2, [pc, #224]	@ (8011240 <http_find_file+0x18c>)
 8011160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011162:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011166:	69ba      	ldr	r2, [r7, #24]
 8011168:	4619      	mov	r1, r3
 801116a:	f00b ff9e 	bl	801d0aa <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801116e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	4413      	add	r3, r2
 8011174:	4a31      	ldr	r2, [pc, #196]	@ (801123c <http_find_file+0x188>)
 8011176:	2100      	movs	r1, #0
 8011178:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 801117a:	4b30      	ldr	r3, [pc, #192]	@ (801123c <http_find_file+0x188>)
 801117c:	633b      	str	r3, [r7, #48]	@ 0x30
 801117e:	e004      	b.n	801118a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8011180:	4a2f      	ldr	r2, [pc, #188]	@ (8011240 <http_find_file+0x18c>)
 8011182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011184:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011188:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801118e:	4618      	mov	r0, r3
 8011190:	f7ff fc58 	bl	8010a44 <fs_open>
 8011194:	4603      	mov	r3, r0
 8011196:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8011198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d104      	bne.n	80111aa <http_find_file+0xf6>
        uri = file_name;
 80111a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80111a8:	e005      	b.n	80111b6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80111aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ac:	3301      	adds	r3, #1
 80111ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80111b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111b2:	2b04      	cmp	r3, #4
 80111b4:	d9b8      	bls.n	8011128 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80111b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d124      	bne.n	8011206 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	213f      	movs	r1, #63	@ 0x3f
 80111c0:	4618      	mov	r0, r3
 80111c2:	f00b fe90 	bl	801cee6 <strchr>
 80111c6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80111c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d005      	beq.n	80111da <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80111ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111d0:	2200      	movs	r2, #0
 80111d2:	701a      	strb	r2, [r3, #0]
      params++;
 80111d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111d6:	3301      	adds	r3, #1
 80111d8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	4611      	mov	r1, r2
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7ff fc2f 	bl	8010a44 <fs_open>
 80111e6:	4603      	mov	r3, r0
 80111e8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80111ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d102      	bne.n	80111f8 <http_find_file+0x144>
      file = &hs->file_handle;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80111f6:	e006      	b.n	8011206 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 80111f8:	f107 0308 	add.w	r3, r7, #8
 80111fc:	4619      	mov	r1, r3
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f7ff fe2a 	bl	8010e58 <http_get_404_file>
 8011204:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8011206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011208:	2b00      	cmp	r3, #0
 801120a:	d106      	bne.n	801121a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 801120c:	f107 0308 	add.w	r3, r7, #8
 8011210:	4619      	mov	r1, r3
 8011212:	68f8      	ldr	r0, [r7, #12]
 8011214:	f7ff fe20 	bl	8010e58 <http_get_404_file>
 8011218:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801121a:	68ba      	ldr	r2, [r7, #8]
 801121c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801121e:	9301      	str	r3, [sp, #4]
 8011220:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011224:	9300      	str	r3, [sp, #0]
 8011226:	4613      	mov	r3, r2
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	f000 f809 	bl	8011244 <http_init_file>
 8011232:	4603      	mov	r3, r0
}
 8011234:	4618      	mov	r0, r3
 8011236:	3740      	adds	r7, #64	@ 0x40
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2000badc 	.word	0x2000badc
 8011240:	08022640 	.word	0x08022640

08011244 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
 8011250:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d05c      	beq.n	8011312 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d106      	bne.n	801126e <http_init_file+0x2a>
 8011260:	4b35      	ldr	r3, [pc, #212]	@ (8011338 <http_init_file+0xf4>)
 8011262:	f640 120b 	movw	r2, #2315	@ 0x90b
 8011266:	4935      	ldr	r1, [pc, #212]	@ (801133c <http_init_file+0xf8>)
 8011268:	4835      	ldr	r0, [pc, #212]	@ (8011340 <http_init_file+0xfc>)
 801126a:	f00b fd95 	bl	801cd98 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	68ba      	ldr	r2, [r7, #8]
 8011272:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	2b00      	cmp	r3, #0
 8011282:	da06      	bge.n	8011292 <http_init_file+0x4e>
 8011284:	4b2c      	ldr	r3, [pc, #176]	@ (8011338 <http_init_file+0xf4>)
 8011286:	f640 1234 	movw	r2, #2356	@ 0x934
 801128a:	492e      	ldr	r1, [pc, #184]	@ (8011344 <http_init_file+0x100>)
 801128c:	482c      	ldr	r0, [pc, #176]	@ (8011340 <http_init_file+0xfc>)
 801128e:	f00b fd83 	bl	801cd98 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	461a      	mov	r2, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	695b      	ldr	r3, [r3, #20]
 80112a8:	7c1b      	ldrb	r3, [r3, #16]
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <http_init_file+0x7c>
 80112b2:	4b21      	ldr	r3, [pc, #132]	@ (8011338 <http_init_file+0xf4>)
 80112b4:	f640 1243 	movw	r2, #2371	@ 0x943
 80112b8:	4923      	ldr	r1, [pc, #140]	@ (8011348 <http_init_file+0x104>)
 80112ba:	4821      	ldr	r0, [pc, #132]	@ (8011340 <http_init_file+0xfc>)
 80112bc:	f00b fd6c 	bl	801cd98 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d032      	beq.n	801132c <http_init_file+0xe8>
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	7c1b      	ldrb	r3, [r3, #16]
 80112cc:	f003 0301 	and.w	r3, r3, #1
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d02b      	beq.n	801132c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	6998      	ldr	r0, [r3, #24]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112dc:	461a      	mov	r2, r3
 80112de:	491b      	ldr	r1, [pc, #108]	@ (801134c <http_init_file+0x108>)
 80112e0:	f000 f9f8 	bl	80116d4 <lwip_strnstr>
 80112e4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d01f      	beq.n	801132c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	1d1a      	adds	r2, r3, #4
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	1ad3      	subs	r3, r2, r3
 80112f6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	699a      	ldr	r2, [r3, #24]
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	441a      	add	r2, r3
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	1ad2      	subs	r2, r2, r3
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	625a      	str	r2, [r3, #36]	@ 0x24
 8011310:	e00c      	b.n	801132c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2200      	movs	r2, #0
 801131c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2200      	movs	r2, #0
 8011322:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2200      	movs	r2, #0
 8011328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 801132c:	2300      	movs	r3, #0
}
 801132e:	4618      	mov	r0, r3
 8011330:	3718      	adds	r7, #24
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	0801edf8 	.word	0x0801edf8
 801133c:	0801eef4 	.word	0x0801eef4
 8011340:	0801ee40 	.word	0x0801ee40
 8011344:	0801ef08 	.word	0x0801ef08
 8011348:	0801ef28 	.word	0x0801ef28
 801134c:	0801eeec 	.word	0x0801eeec

08011350 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b084      	sub	sp, #16
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	460b      	mov	r3, r1
 801135a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d002      	beq.n	801136c <http_err+0x1c>
    http_state_free(hs);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f7ff fc02 	bl	8010b70 <http_state_free>
  }
}
 801136c:	bf00      	nop
 801136e:	3710      	adds	r7, #16
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}

08011374 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b086      	sub	sp, #24
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	4613      	mov	r3, r2
 8011380:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d101      	bne.n	8011390 <http_sent+0x1c>
    return ERR_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	e008      	b.n	80113a2 <http_sent+0x2e>
  }

  hs->retries = 0;
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	2200      	movs	r2, #0
 8011394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8011398:	6979      	ldr	r1, [r7, #20]
 801139a:	68b8      	ldr	r0, [r7, #8]
 801139c:	f7ff fd25 	bl	8010dea <http_send>

  return ERR_OK;
 80113a0:	2300      	movs	r3, #0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}

080113aa <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80113aa:	b580      	push	{r7, lr}
 80113ac:	b084      	sub	sp, #16
 80113ae:	af00      	add	r7, sp, #0
 80113b0:	6078      	str	r0, [r7, #4]
 80113b2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d107      	bne.n	80113ce <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80113be:	2100      	movs	r1, #0
 80113c0:	6838      	ldr	r0, [r7, #0]
 80113c2:	f7ff fc91 	bl	8010ce8 <http_close_conn>
 80113c6:	4603      	mov	r3, r0
 80113c8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	e021      	b.n	8011412 <http_poll+0x68>
  } else {
    hs->retries++;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80113d4:	3301      	adds	r3, #1
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	d105      	bne.n	80113f4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80113e8:	68f9      	ldr	r1, [r7, #12]
 80113ea:	6838      	ldr	r0, [r7, #0]
 80113ec:	f7ff fc7c 	bl	8010ce8 <http_close_conn>
      return ERR_OK;
 80113f0:	2300      	movs	r3, #0
 80113f2:	e00e      	b.n	8011412 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	695b      	ldr	r3, [r3, #20]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d009      	beq.n	8011410 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80113fc:	68f9      	ldr	r1, [r7, #12]
 80113fe:	6838      	ldr	r0, [r7, #0]
 8011400:	f7ff fcf3 	bl	8010dea <http_send>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d002      	beq.n	8011410 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 801140a:	6838      	ldr	r0, [r7, #0]
 801140c:	f007 f942 	bl	8018694 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8011410:	2300      	movs	r3, #0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3710      	adds	r7, #16
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
	...

0801141c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b086      	sub	sp, #24
 8011420:	af00      	add	r7, sp, #0
 8011422:	60f8      	str	r0, [r7, #12]
 8011424:	60b9      	str	r1, [r7, #8]
 8011426:	607a      	str	r2, [r7, #4]
 8011428:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801142e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d105      	bne.n	8011442 <http_recv+0x26>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <http_recv+0x26>
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d111      	bne.n	8011466 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d008      	beq.n	801145a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	891b      	ldrh	r3, [r3, #8]
 801144c:	4619      	mov	r1, r3
 801144e:	68b8      	ldr	r0, [r7, #8]
 8011450:	f002 fd14 	bl	8013e7c <tcp_recved>
      pbuf_free(p);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f001 fd37 	bl	8012ec8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 801145a:	6979      	ldr	r1, [r7, #20]
 801145c:	68b8      	ldr	r0, [r7, #8]
 801145e:	f7ff fc43 	bl	8010ce8 <http_close_conn>
    return ERR_OK;
 8011462:	2300      	movs	r3, #0
 8011464:	e055      	b.n	8011512 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	891b      	ldrh	r3, [r3, #8]
 801146a:	4619      	mov	r1, r3
 801146c:	68b8      	ldr	r0, [r7, #8]
 801146e:	f002 fd05 	bl	8013e7c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	695b      	ldr	r3, [r3, #20]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d147      	bne.n	801150a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	6979      	ldr	r1, [r7, #20]
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7ff fd30 	bl	8010ee4 <http_parse_request>
 8011484:	4603      	mov	r3, r0
 8011486:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8011488:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d015      	beq.n	80114bc <http_recv+0xa0>
 8011490:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011494:	f113 0f05 	cmn.w	r3, #5
 8011498:	d010      	beq.n	80114bc <http_recv+0xa0>
 801149a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801149e:	f113 0f10 	cmn.w	r3, #16
 80114a2:	d00b      	beq.n	80114bc <http_recv+0xa0>
 80114a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114a8:	f113 0f08 	cmn.w	r3, #8
 80114ac:	d006      	beq.n	80114bc <http_recv+0xa0>
 80114ae:	4b1b      	ldr	r3, [pc, #108]	@ (801151c <http_recv+0x100>)
 80114b0:	f640 2204 	movw	r2, #2564	@ 0xa04
 80114b4:	491a      	ldr	r1, [pc, #104]	@ (8011520 <http_recv+0x104>)
 80114b6:	481b      	ldr	r0, [pc, #108]	@ (8011524 <http_recv+0x108>)
 80114b8:	f00b fc6e 	bl	801cd98 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80114bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114c0:	f113 0f05 	cmn.w	r3, #5
 80114c4:	d00b      	beq.n	80114de <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	6a1b      	ldr	r3, [r3, #32]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d007      	beq.n	80114de <http_recv+0xc2>
          pbuf_free(hs->req);
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	6a1b      	ldr	r3, [r3, #32]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f001 fcf8 	bl	8012ec8 <pbuf_free>
          hs->req = NULL;
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	2200      	movs	r2, #0
 80114dc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f001 fcf2 	bl	8012ec8 <pbuf_free>
      if (parsed == ERR_OK) {
 80114e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d104      	bne.n	80114f6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80114ec:	6979      	ldr	r1, [r7, #20]
 80114ee:	68b8      	ldr	r0, [r7, #8]
 80114f0:	f7ff fc7b 	bl	8010dea <http_send>
 80114f4:	e00c      	b.n	8011510 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80114f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114fa:	f113 0f10 	cmn.w	r3, #16
 80114fe:	d107      	bne.n	8011510 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8011500:	6979      	ldr	r1, [r7, #20]
 8011502:	68b8      	ldr	r0, [r7, #8]
 8011504:	f7ff fbf0 	bl	8010ce8 <http_close_conn>
 8011508:	e002      	b.n	8011510 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f001 fcdc 	bl	8012ec8 <pbuf_free>
    }
  }
  return ERR_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3718      	adds	r7, #24
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}
 801151a:	bf00      	nop
 801151c:	0801edf8 	.word	0x0801edf8
 8011520:	0801ef54 	.word	0x0801ef54
 8011524:	0801ee40 	.word	0x0801ee40

08011528 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8011536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d102      	bne.n	8011544 <http_accept+0x1c>
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d102      	bne.n	801154a <http_accept+0x22>
    return ERR_VAL;
 8011544:	f06f 0305 	mvn.w	r3, #5
 8011548:	e025      	b.n	8011596 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 801154a:	2101      	movs	r1, #1
 801154c:	68b8      	ldr	r0, [r7, #8]
 801154e:	f003 f97b 	bl	8014848 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8011552:	f7ff fadb 	bl	8010b0c <http_state_alloc>
 8011556:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d102      	bne.n	8011564 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 801155e:	f04f 33ff 	mov.w	r3, #4294967295
 8011562:	e018      	b.n	8011596 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801156a:	6979      	ldr	r1, [r7, #20]
 801156c:	68b8      	ldr	r0, [r7, #8]
 801156e:	f003 fb6b 	bl	8014c48 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8011572:	490b      	ldr	r1, [pc, #44]	@ (80115a0 <http_accept+0x78>)
 8011574:	68b8      	ldr	r0, [r7, #8]
 8011576:	f003 fb79 	bl	8014c6c <tcp_recv>
  altcp_err(pcb, http_err);
 801157a:	490a      	ldr	r1, [pc, #40]	@ (80115a4 <http_accept+0x7c>)
 801157c:	68b8      	ldr	r0, [r7, #8]
 801157e:	f003 fbb9 	bl	8014cf4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8011582:	2204      	movs	r2, #4
 8011584:	4908      	ldr	r1, [pc, #32]	@ (80115a8 <http_accept+0x80>)
 8011586:	68b8      	ldr	r0, [r7, #8]
 8011588:	f003 fbee 	bl	8014d68 <tcp_poll>
  altcp_sent(pcb, http_sent);
 801158c:	4907      	ldr	r1, [pc, #28]	@ (80115ac <http_accept+0x84>)
 801158e:	68b8      	ldr	r0, [r7, #8]
 8011590:	f003 fb8e 	bl	8014cb0 <tcp_sent>

  return ERR_OK;
 8011594:	2300      	movs	r3, #0
}
 8011596:	4618      	mov	r0, r3
 8011598:	3718      	adds	r7, #24
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	0801141d 	.word	0x0801141d
 80115a4:	08011351 	.word	0x08011351
 80115a8:	080113ab 	.word	0x080113ab
 80115ac:	08011375 	.word	0x08011375

080115b0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b084      	sub	sp, #16
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d029      	beq.n	8011616 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80115c2:	2101      	movs	r1, #1
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f003 f93f 	bl	8014848 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80115ca:	887b      	ldrh	r3, [r7, #2]
 80115cc:	461a      	mov	r2, r3
 80115ce:	4914      	ldr	r1, [pc, #80]	@ (8011620 <httpd_init_pcb+0x70>)
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f002 fa85 	bl	8013ae0 <tcp_bind>
 80115d6:	4603      	mov	r3, r0
 80115d8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80115da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d006      	beq.n	80115f0 <httpd_init_pcb+0x40>
 80115e2:	4b10      	ldr	r3, [pc, #64]	@ (8011624 <httpd_init_pcb+0x74>)
 80115e4:	f640 2257 	movw	r2, #2647	@ 0xa57
 80115e8:	490f      	ldr	r1, [pc, #60]	@ (8011628 <httpd_init_pcb+0x78>)
 80115ea:	4810      	ldr	r0, [pc, #64]	@ (801162c <httpd_init_pcb+0x7c>)
 80115ec:	f00b fbd4 	bl	801cd98 <iprintf>
    pcb = altcp_listen(pcb);
 80115f0:	21ff      	movs	r1, #255	@ 0xff
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f002 fb2c 	bl	8013c50 <tcp_listen_with_backlog>
 80115f8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d106      	bne.n	801160e <httpd_init_pcb+0x5e>
 8011600:	4b08      	ldr	r3, [pc, #32]	@ (8011624 <httpd_init_pcb+0x74>)
 8011602:	f640 2259 	movw	r2, #2649	@ 0xa59
 8011606:	490a      	ldr	r1, [pc, #40]	@ (8011630 <httpd_init_pcb+0x80>)
 8011608:	4808      	ldr	r0, [pc, #32]	@ (801162c <httpd_init_pcb+0x7c>)
 801160a:	f00b fbc5 	bl	801cd98 <iprintf>
    altcp_accept(pcb, http_accept);
 801160e:	4909      	ldr	r1, [pc, #36]	@ (8011634 <httpd_init_pcb+0x84>)
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f003 fb91 	bl	8014d38 <tcp_accept>
  }
}
 8011616:	bf00      	nop
 8011618:	3710      	adds	r7, #16
 801161a:	46bd      	mov	sp, r7
 801161c:	bd80      	pop	{r7, pc}
 801161e:	bf00      	nop
 8011620:	08022778 	.word	0x08022778
 8011624:	0801edf8 	.word	0x0801edf8
 8011628:	0801ef80 	.word	0x0801ef80
 801162c:	0801ee40 	.word	0x0801ee40
 8011630:	0801ef9c 	.word	0x0801ef9c
 8011634:	08011529 	.word	0x08011529

08011638 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801163e:	202e      	movs	r0, #46	@ 0x2e
 8011640:	f003 faf4 	bl	8014c2c <tcp_new_ip_type>
 8011644:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d106      	bne.n	801165a <httpd_init+0x22>
 801164c:	4b07      	ldr	r3, [pc, #28]	@ (801166c <httpd_init+0x34>)
 801164e:	f640 2272 	movw	r2, #2674	@ 0xa72
 8011652:	4907      	ldr	r1, [pc, #28]	@ (8011670 <httpd_init+0x38>)
 8011654:	4807      	ldr	r0, [pc, #28]	@ (8011674 <httpd_init+0x3c>)
 8011656:	f00b fb9f 	bl	801cd98 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 801165a:	2150      	movs	r1, #80	@ 0x50
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff ffa7 	bl	80115b0 <httpd_init_pcb>
}
 8011662:	bf00      	nop
 8011664:	3708      	adds	r7, #8
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	0801edf8 	.word	0x0801edf8
 8011670:	0801efbc 	.word	0x0801efbc
 8011674:	0801ee40 	.word	0x0801ee40

08011678 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011682:	88fb      	ldrh	r3, [r7, #6]
 8011684:	021b      	lsls	r3, r3, #8
 8011686:	b21a      	sxth	r2, r3
 8011688:	88fb      	ldrh	r3, [r7, #6]
 801168a:	0a1b      	lsrs	r3, r3, #8
 801168c:	b29b      	uxth	r3, r3
 801168e:	b21b      	sxth	r3, r3
 8011690:	4313      	orrs	r3, r2
 8011692:	b21b      	sxth	r3, r3
 8011694:	b29b      	uxth	r3, r3
}
 8011696:	4618      	mov	r0, r3
 8011698:	370c      	adds	r7, #12
 801169a:	46bd      	mov	sp, r7
 801169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a0:	4770      	bx	lr

080116a2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80116a2:	b480      	push	{r7}
 80116a4:	b083      	sub	sp, #12
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	061a      	lsls	r2, r3, #24
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	021b      	lsls	r3, r3, #8
 80116b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80116b6:	431a      	orrs	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	0a1b      	lsrs	r3, r3, #8
 80116bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80116c0:	431a      	orrs	r2, r3
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	0e1b      	lsrs	r3, r3, #24
 80116c6:	4313      	orrs	r3, r2
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b086      	sub	sp, #24
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7ee fd9f 	bl	8000224 <strlen>
 80116e6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d101      	bne.n	80116f2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	e022      	b.n	8011738 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	617b      	str	r3, [r7, #20]
 80116f6:	e012      	b.n	801171e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	781a      	ldrb	r2, [r3, #0]
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	429a      	cmp	r2, r3
 8011702:	d109      	bne.n	8011718 <lwip_strnstr+0x44>
 8011704:	693a      	ldr	r2, [r7, #16]
 8011706:	68b9      	ldr	r1, [r7, #8]
 8011708:	6978      	ldr	r0, [r7, #20]
 801170a:	f00b fbf9 	bl	801cf00 <strncmp>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d101      	bne.n	8011718 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	e00f      	b.n	8011738 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	3301      	adds	r3, #1
 801171c:	617b      	str	r3, [r7, #20]
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	781b      	ldrb	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d007      	beq.n	8011736 <lwip_strnstr+0x62>
 8011726:	697a      	ldr	r2, [r7, #20]
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	441a      	add	r2, r3
 801172c:	68f9      	ldr	r1, [r7, #12]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	440b      	add	r3, r1
 8011732:	429a      	cmp	r2, r3
 8011734:	d9e0      	bls.n	80116f8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8011736:	2300      	movs	r3, #0
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801174a:	f00b f99b 	bl	801ca84 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801174e:	f000 f8d5 	bl	80118fc <mem_init>
  memp_init();
 8011752:	f000 fc31 	bl	8011fb8 <memp_init>
  pbuf_init();
  netif_init();
 8011756:	f000 fd3d 	bl	80121d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801175a:	f008 f88b 	bl	8019874 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801175e:	f001 fe5d 	bl	801341c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011762:	f007 ffcd 	bl	8019700 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011766:	bf00      	nop
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
	...

08011770 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	4603      	mov	r3, r0
 8011778:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801177a:	4b05      	ldr	r3, [pc, #20]	@ (8011790 <ptr_to_mem+0x20>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	88fb      	ldrh	r3, [r7, #6]
 8011780:	4413      	add	r3, r2
}
 8011782:	4618      	mov	r0, r3
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop
 8011790:	2000c188 	.word	0x2000c188

08011794 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801179c:	4b05      	ldr	r3, [pc, #20]	@ (80117b4 <mem_to_ptr+0x20>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	1ad3      	subs	r3, r2, r3
 80117a4:	b29b      	uxth	r3, r3
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	370c      	adds	r7, #12
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	2000c188 	.word	0x2000c188

080117b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80117b8:	b590      	push	{r4, r7, lr}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80117c0:	4b45      	ldr	r3, [pc, #276]	@ (80118d8 <plug_holes+0x120>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d206      	bcs.n	80117d8 <plug_holes+0x20>
 80117ca:	4b44      	ldr	r3, [pc, #272]	@ (80118dc <plug_holes+0x124>)
 80117cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80117d0:	4943      	ldr	r1, [pc, #268]	@ (80118e0 <plug_holes+0x128>)
 80117d2:	4844      	ldr	r0, [pc, #272]	@ (80118e4 <plug_holes+0x12c>)
 80117d4:	f00b fae0 	bl	801cd98 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80117d8:	4b43      	ldr	r3, [pc, #268]	@ (80118e8 <plug_holes+0x130>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d306      	bcc.n	80117f0 <plug_holes+0x38>
 80117e2:	4b3e      	ldr	r3, [pc, #248]	@ (80118dc <plug_holes+0x124>)
 80117e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80117e8:	4940      	ldr	r1, [pc, #256]	@ (80118ec <plug_holes+0x134>)
 80117ea:	483e      	ldr	r0, [pc, #248]	@ (80118e4 <plug_holes+0x12c>)
 80117ec:	f00b fad4 	bl	801cd98 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	791b      	ldrb	r3, [r3, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d006      	beq.n	8011806 <plug_holes+0x4e>
 80117f8:	4b38      	ldr	r3, [pc, #224]	@ (80118dc <plug_holes+0x124>)
 80117fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80117fe:	493c      	ldr	r1, [pc, #240]	@ (80118f0 <plug_holes+0x138>)
 8011800:	4838      	ldr	r0, [pc, #224]	@ (80118e4 <plug_holes+0x12c>)
 8011802:	f00b fac9 	bl	801cd98 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801180e:	d906      	bls.n	801181e <plug_holes+0x66>
 8011810:	4b32      	ldr	r3, [pc, #200]	@ (80118dc <plug_holes+0x124>)
 8011812:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011816:	4937      	ldr	r1, [pc, #220]	@ (80118f4 <plug_holes+0x13c>)
 8011818:	4832      	ldr	r0, [pc, #200]	@ (80118e4 <plug_holes+0x12c>)
 801181a:	f00b fabd 	bl	801cd98 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	4618      	mov	r0, r3
 8011824:	f7ff ffa4 	bl	8011770 <ptr_to_mem>
 8011828:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	429a      	cmp	r2, r3
 8011830:	d024      	beq.n	801187c <plug_holes+0xc4>
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	791b      	ldrb	r3, [r3, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d120      	bne.n	801187c <plug_holes+0xc4>
 801183a:	4b2b      	ldr	r3, [pc, #172]	@ (80118e8 <plug_holes+0x130>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	429a      	cmp	r2, r3
 8011842:	d01b      	beq.n	801187c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011844:	4b2c      	ldr	r3, [pc, #176]	@ (80118f8 <plug_holes+0x140>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	429a      	cmp	r2, r3
 801184c:	d102      	bne.n	8011854 <plug_holes+0x9c>
      lfree = mem;
 801184e:	4a2a      	ldr	r2, [pc, #168]	@ (80118f8 <plug_holes+0x140>)
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	881a      	ldrh	r2, [r3, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	881b      	ldrh	r3, [r3, #0]
 8011860:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011864:	d00a      	beq.n	801187c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	4618      	mov	r0, r3
 801186c:	f7ff ff80 	bl	8011770 <ptr_to_mem>
 8011870:	4604      	mov	r4, r0
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff ff8e 	bl	8011794 <mem_to_ptr>
 8011878:	4603      	mov	r3, r0
 801187a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	885b      	ldrh	r3, [r3, #2]
 8011880:	4618      	mov	r0, r3
 8011882:	f7ff ff75 	bl	8011770 <ptr_to_mem>
 8011886:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	429a      	cmp	r2, r3
 801188e:	d01f      	beq.n	80118d0 <plug_holes+0x118>
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	791b      	ldrb	r3, [r3, #4]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d11b      	bne.n	80118d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011898:	4b17      	ldr	r3, [pc, #92]	@ (80118f8 <plug_holes+0x140>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d102      	bne.n	80118a8 <plug_holes+0xf0>
      lfree = pmem;
 80118a2:	4a15      	ldr	r2, [pc, #84]	@ (80118f8 <plug_holes+0x140>)
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	881a      	ldrh	r2, [r3, #0]
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80118b8:	d00a      	beq.n	80118d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	4618      	mov	r0, r3
 80118c0:	f7ff ff56 	bl	8011770 <ptr_to_mem>
 80118c4:	4604      	mov	r4, r0
 80118c6:	68b8      	ldr	r0, [r7, #8]
 80118c8:	f7ff ff64 	bl	8011794 <mem_to_ptr>
 80118cc:	4603      	mov	r3, r0
 80118ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80118d0:	bf00      	nop
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd90      	pop	{r4, r7, pc}
 80118d8:	2000c188 	.word	0x2000c188
 80118dc:	0801efd8 	.word	0x0801efd8
 80118e0:	0801f008 	.word	0x0801f008
 80118e4:	0801f020 	.word	0x0801f020
 80118e8:	2000c18c 	.word	0x2000c18c
 80118ec:	0801f048 	.word	0x0801f048
 80118f0:	0801f064 	.word	0x0801f064
 80118f4:	0801f080 	.word	0x0801f080
 80118f8:	2000c194 	.word	0x2000c194

080118fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011902:	4b1f      	ldr	r3, [pc, #124]	@ (8011980 <mem_init+0x84>)
 8011904:	3303      	adds	r3, #3
 8011906:	f023 0303 	bic.w	r3, r3, #3
 801190a:	461a      	mov	r2, r3
 801190c:	4b1d      	ldr	r3, [pc, #116]	@ (8011984 <mem_init+0x88>)
 801190e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011910:	4b1c      	ldr	r3, [pc, #112]	@ (8011984 <mem_init+0x88>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 801191c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2200      	movs	r2, #0
 8011928:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801192a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 801192e:	f7ff ff1f 	bl	8011770 <ptr_to_mem>
 8011932:	4603      	mov	r3, r0
 8011934:	4a14      	ldr	r2, [pc, #80]	@ (8011988 <mem_init+0x8c>)
 8011936:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011938:	4b13      	ldr	r3, [pc, #76]	@ (8011988 <mem_init+0x8c>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2201      	movs	r2, #1
 801193e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011940:	4b11      	ldr	r3, [pc, #68]	@ (8011988 <mem_init+0x8c>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011948:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801194a:	4b0f      	ldr	r3, [pc, #60]	@ (8011988 <mem_init+0x8c>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8011952:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011954:	4b0b      	ldr	r3, [pc, #44]	@ (8011984 <mem_init+0x88>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	4a0c      	ldr	r2, [pc, #48]	@ (801198c <mem_init+0x90>)
 801195a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801195c:	480c      	ldr	r0, [pc, #48]	@ (8011990 <mem_init+0x94>)
 801195e:	f00b f89f 	bl	801caa0 <sys_mutex_new>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d006      	beq.n	8011976 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011968:	4b0a      	ldr	r3, [pc, #40]	@ (8011994 <mem_init+0x98>)
 801196a:	f240 221f 	movw	r2, #543	@ 0x21f
 801196e:	490a      	ldr	r1, [pc, #40]	@ (8011998 <mem_init+0x9c>)
 8011970:	480a      	ldr	r0, [pc, #40]	@ (801199c <mem_init+0xa0>)
 8011972:	f00b fa11 	bl	801cd98 <iprintf>
  }
}
 8011976:	bf00      	nop
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	2000bb34 	.word	0x2000bb34
 8011984:	2000c188 	.word	0x2000c188
 8011988:	2000c18c 	.word	0x2000c18c
 801198c:	2000c194 	.word	0x2000c194
 8011990:	2000c190 	.word	0x2000c190
 8011994:	0801efd8 	.word	0x0801efd8
 8011998:	0801f0ac 	.word	0x0801f0ac
 801199c:	0801f020 	.word	0x0801f020

080119a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f7ff fef3 	bl	8011794 <mem_to_ptr>
 80119ae:	4603      	mov	r3, r0
 80119b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7ff feda 	bl	8011770 <ptr_to_mem>
 80119bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	885b      	ldrh	r3, [r3, #2]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7ff fed4 	bl	8011770 <ptr_to_mem>
 80119c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80119d2:	d818      	bhi.n	8011a06 <mem_link_valid+0x66>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	885b      	ldrh	r3, [r3, #2]
 80119d8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80119dc:	d813      	bhi.n	8011a06 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80119e2:	8afa      	ldrh	r2, [r7, #22]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d004      	beq.n	80119f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	8afa      	ldrh	r2, [r7, #22]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d109      	bne.n	8011a06 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80119f2:	4b08      	ldr	r3, [pc, #32]	@ (8011a14 <mem_link_valid+0x74>)
 80119f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80119f6:	693a      	ldr	r2, [r7, #16]
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d006      	beq.n	8011a0a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	885b      	ldrh	r3, [r3, #2]
 8011a00:	8afa      	ldrh	r2, [r7, #22]
 8011a02:	429a      	cmp	r2, r3
 8011a04:	d001      	beq.n	8011a0a <mem_link_valid+0x6a>
    return 0;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e000      	b.n	8011a0c <mem_link_valid+0x6c>
  }
  return 1;
 8011a0a:	2301      	movs	r3, #1
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	2000c18c 	.word	0x2000c18c

08011a18 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b088      	sub	sp, #32
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d070      	beq.n	8011b08 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f003 0303 	and.w	r3, r3, #3
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00d      	beq.n	8011a4c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011a30:	4b37      	ldr	r3, [pc, #220]	@ (8011b10 <mem_free+0xf8>)
 8011a32:	f240 2273 	movw	r2, #627	@ 0x273
 8011a36:	4937      	ldr	r1, [pc, #220]	@ (8011b14 <mem_free+0xfc>)
 8011a38:	4837      	ldr	r0, [pc, #220]	@ (8011b18 <mem_free+0x100>)
 8011a3a:	f00b f9ad 	bl	801cd98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a3e:	f00b f88d 	bl	801cb5c <sys_arch_protect>
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f00b f897 	bl	801cb78 <sys_arch_unprotect>
    return;
 8011a4a:	e05e      	b.n	8011b0a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	3b08      	subs	r3, #8
 8011a50:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011a52:	4b32      	ldr	r3, [pc, #200]	@ (8011b1c <mem_free+0x104>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	69fa      	ldr	r2, [r7, #28]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d306      	bcc.n	8011a6a <mem_free+0x52>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f103 020c 	add.w	r2, r3, #12
 8011a62:	4b2f      	ldr	r3, [pc, #188]	@ (8011b20 <mem_free+0x108>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d90d      	bls.n	8011a86 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011a6a:	4b29      	ldr	r3, [pc, #164]	@ (8011b10 <mem_free+0xf8>)
 8011a6c:	f240 227f 	movw	r2, #639	@ 0x27f
 8011a70:	492c      	ldr	r1, [pc, #176]	@ (8011b24 <mem_free+0x10c>)
 8011a72:	4829      	ldr	r0, [pc, #164]	@ (8011b18 <mem_free+0x100>)
 8011a74:	f00b f990 	bl	801cd98 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011a78:	f00b f870 	bl	801cb5c <sys_arch_protect>
 8011a7c:	6138      	str	r0, [r7, #16]
 8011a7e:	6938      	ldr	r0, [r7, #16]
 8011a80:	f00b f87a 	bl	801cb78 <sys_arch_unprotect>
    return;
 8011a84:	e041      	b.n	8011b0a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011a86:	4828      	ldr	r0, [pc, #160]	@ (8011b28 <mem_free+0x110>)
 8011a88:	f00b f826 	bl	801cad8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	791b      	ldrb	r3, [r3, #4]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d110      	bne.n	8011ab6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011a94:	4b1e      	ldr	r3, [pc, #120]	@ (8011b10 <mem_free+0xf8>)
 8011a96:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8011a9a:	4924      	ldr	r1, [pc, #144]	@ (8011b2c <mem_free+0x114>)
 8011a9c:	481e      	ldr	r0, [pc, #120]	@ (8011b18 <mem_free+0x100>)
 8011a9e:	f00b f97b 	bl	801cd98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011aa2:	4821      	ldr	r0, [pc, #132]	@ (8011b28 <mem_free+0x110>)
 8011aa4:	f00b f827 	bl	801caf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011aa8:	f00b f858 	bl	801cb5c <sys_arch_protect>
 8011aac:	6178      	str	r0, [r7, #20]
 8011aae:	6978      	ldr	r0, [r7, #20]
 8011ab0:	f00b f862 	bl	801cb78 <sys_arch_unprotect>
    return;
 8011ab4:	e029      	b.n	8011b0a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011ab6:	69f8      	ldr	r0, [r7, #28]
 8011ab8:	f7ff ff72 	bl	80119a0 <mem_link_valid>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d110      	bne.n	8011ae4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011ac2:	4b13      	ldr	r3, [pc, #76]	@ (8011b10 <mem_free+0xf8>)
 8011ac4:	f240 2295 	movw	r2, #661	@ 0x295
 8011ac8:	4919      	ldr	r1, [pc, #100]	@ (8011b30 <mem_free+0x118>)
 8011aca:	4813      	ldr	r0, [pc, #76]	@ (8011b18 <mem_free+0x100>)
 8011acc:	f00b f964 	bl	801cd98 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011ad0:	4815      	ldr	r0, [pc, #84]	@ (8011b28 <mem_free+0x110>)
 8011ad2:	f00b f810 	bl	801caf6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ad6:	f00b f841 	bl	801cb5c <sys_arch_protect>
 8011ada:	61b8      	str	r0, [r7, #24]
 8011adc:	69b8      	ldr	r0, [r7, #24]
 8011ade:	f00b f84b 	bl	801cb78 <sys_arch_unprotect>
    return;
 8011ae2:	e012      	b.n	8011b0a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011aea:	4b12      	ldr	r3, [pc, #72]	@ (8011b34 <mem_free+0x11c>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	69fa      	ldr	r2, [r7, #28]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d202      	bcs.n	8011afa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011af4:	4a0f      	ldr	r2, [pc, #60]	@ (8011b34 <mem_free+0x11c>)
 8011af6:	69fb      	ldr	r3, [r7, #28]
 8011af8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011afa:	69f8      	ldr	r0, [r7, #28]
 8011afc:	f7ff fe5c 	bl	80117b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011b00:	4809      	ldr	r0, [pc, #36]	@ (8011b28 <mem_free+0x110>)
 8011b02:	f00a fff8 	bl	801caf6 <sys_mutex_unlock>
 8011b06:	e000      	b.n	8011b0a <mem_free+0xf2>
    return;
 8011b08:	bf00      	nop
}
 8011b0a:	3720      	adds	r7, #32
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	0801efd8 	.word	0x0801efd8
 8011b14:	0801f0c8 	.word	0x0801f0c8
 8011b18:	0801f020 	.word	0x0801f020
 8011b1c:	2000c188 	.word	0x2000c188
 8011b20:	2000c18c 	.word	0x2000c18c
 8011b24:	0801f0ec 	.word	0x0801f0ec
 8011b28:	2000c190 	.word	0x2000c190
 8011b2c:	0801f108 	.word	0x0801f108
 8011b30:	0801f130 	.word	0x0801f130
 8011b34:	2000c194 	.word	0x2000c194

08011b38 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b088      	sub	sp, #32
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	460b      	mov	r3, r1
 8011b42:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011b44:	887b      	ldrh	r3, [r7, #2]
 8011b46:	3303      	adds	r3, #3
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	f023 0303 	bic.w	r3, r3, #3
 8011b4e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011b50:	8bfb      	ldrh	r3, [r7, #30]
 8011b52:	2b0b      	cmp	r3, #11
 8011b54:	d801      	bhi.n	8011b5a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011b56:	230c      	movs	r3, #12
 8011b58:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011b5a:	8bfb      	ldrh	r3, [r7, #30]
 8011b5c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011b60:	d803      	bhi.n	8011b6a <mem_trim+0x32>
 8011b62:	8bfa      	ldrh	r2, [r7, #30]
 8011b64:	887b      	ldrh	r3, [r7, #2]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d201      	bcs.n	8011b6e <mem_trim+0x36>
    return NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	e0d8      	b.n	8011d20 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8011d28 <mem_trim+0x1f0>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d304      	bcc.n	8011b82 <mem_trim+0x4a>
 8011b78:	4b6c      	ldr	r3, [pc, #432]	@ (8011d2c <mem_trim+0x1f4>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d306      	bcc.n	8011b90 <mem_trim+0x58>
 8011b82:	4b6b      	ldr	r3, [pc, #428]	@ (8011d30 <mem_trim+0x1f8>)
 8011b84:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8011b88:	496a      	ldr	r1, [pc, #424]	@ (8011d34 <mem_trim+0x1fc>)
 8011b8a:	486b      	ldr	r0, [pc, #428]	@ (8011d38 <mem_trim+0x200>)
 8011b8c:	f00b f904 	bl	801cd98 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011b90:	4b65      	ldr	r3, [pc, #404]	@ (8011d28 <mem_trim+0x1f0>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d304      	bcc.n	8011ba4 <mem_trim+0x6c>
 8011b9a:	4b64      	ldr	r3, [pc, #400]	@ (8011d2c <mem_trim+0x1f4>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d307      	bcc.n	8011bb4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ba4:	f00a ffda 	bl	801cb5c <sys_arch_protect>
 8011ba8:	60b8      	str	r0, [r7, #8]
 8011baa:	68b8      	ldr	r0, [r7, #8]
 8011bac:	f00a ffe4 	bl	801cb78 <sys_arch_unprotect>
    return rmem;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	e0b5      	b.n	8011d20 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	3b08      	subs	r3, #8
 8011bb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011bba:	69b8      	ldr	r0, [r7, #24]
 8011bbc:	f7ff fdea 	bl	8011794 <mem_to_ptr>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	881a      	ldrh	r2, [r3, #0]
 8011bc8:	8afb      	ldrh	r3, [r7, #22]
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	3b08      	subs	r3, #8
 8011bd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011bd2:	8bfa      	ldrh	r2, [r7, #30]
 8011bd4:	8abb      	ldrh	r3, [r7, #20]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d906      	bls.n	8011be8 <mem_trim+0xb0>
 8011bda:	4b55      	ldr	r3, [pc, #340]	@ (8011d30 <mem_trim+0x1f8>)
 8011bdc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011be0:	4956      	ldr	r1, [pc, #344]	@ (8011d3c <mem_trim+0x204>)
 8011be2:	4855      	ldr	r0, [pc, #340]	@ (8011d38 <mem_trim+0x200>)
 8011be4:	f00b f8d8 	bl	801cd98 <iprintf>
  if (newsize > size) {
 8011be8:	8bfa      	ldrh	r2, [r7, #30]
 8011bea:	8abb      	ldrh	r3, [r7, #20]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d901      	bls.n	8011bf4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	e095      	b.n	8011d20 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011bf4:	8bfa      	ldrh	r2, [r7, #30]
 8011bf6:	8abb      	ldrh	r3, [r7, #20]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d101      	bne.n	8011c00 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	e08f      	b.n	8011d20 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011c00:	484f      	ldr	r0, [pc, #316]	@ (8011d40 <mem_trim+0x208>)
 8011c02:	f00a ff69 	bl	801cad8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7ff fdb0 	bl	8011770 <ptr_to_mem>
 8011c10:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	791b      	ldrb	r3, [r3, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d13f      	bne.n	8011c9a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c22:	d106      	bne.n	8011c32 <mem_trim+0xfa>
 8011c24:	4b42      	ldr	r3, [pc, #264]	@ (8011d30 <mem_trim+0x1f8>)
 8011c26:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011c2a:	4946      	ldr	r1, [pc, #280]	@ (8011d44 <mem_trim+0x20c>)
 8011c2c:	4842      	ldr	r0, [pc, #264]	@ (8011d38 <mem_trim+0x200>)
 8011c2e:	f00b f8b3 	bl	801cd98 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011c38:	8afa      	ldrh	r2, [r7, #22]
 8011c3a:	8bfb      	ldrh	r3, [r7, #30]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	3308      	adds	r3, #8
 8011c42:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011c44:	4b40      	ldr	r3, [pc, #256]	@ (8011d48 <mem_trim+0x210>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	693a      	ldr	r2, [r7, #16]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d106      	bne.n	8011c5c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011c4e:	89fb      	ldrh	r3, [r7, #14]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7ff fd8d 	bl	8011770 <ptr_to_mem>
 8011c56:	4603      	mov	r3, r0
 8011c58:	4a3b      	ldr	r2, [pc, #236]	@ (8011d48 <mem_trim+0x210>)
 8011c5a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011c5c:	89fb      	ldrh	r3, [r7, #14]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7ff fd86 	bl	8011770 <ptr_to_mem>
 8011c64:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	2200      	movs	r2, #0
 8011c6a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011c6c:	693b      	ldr	r3, [r7, #16]
 8011c6e:	89ba      	ldrh	r2, [r7, #12]
 8011c70:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	8afa      	ldrh	r2, [r7, #22]
 8011c76:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	89fa      	ldrh	r2, [r7, #14]
 8011c7c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011c86:	d047      	beq.n	8011d18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7ff fd6f 	bl	8011770 <ptr_to_mem>
 8011c92:	4602      	mov	r2, r0
 8011c94:	89fb      	ldrh	r3, [r7, #14]
 8011c96:	8053      	strh	r3, [r2, #2]
 8011c98:	e03e      	b.n	8011d18 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011c9a:	8bfb      	ldrh	r3, [r7, #30]
 8011c9c:	f103 0214 	add.w	r2, r3, #20
 8011ca0:	8abb      	ldrh	r3, [r7, #20]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d838      	bhi.n	8011d18 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011ca6:	8afa      	ldrh	r2, [r7, #22]
 8011ca8:	8bfb      	ldrh	r3, [r7, #30]
 8011caa:	4413      	add	r3, r2
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	3308      	adds	r3, #8
 8011cb0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011cba:	d106      	bne.n	8011cca <mem_trim+0x192>
 8011cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8011d30 <mem_trim+0x1f8>)
 8011cbe:	f240 3216 	movw	r2, #790	@ 0x316
 8011cc2:	4920      	ldr	r1, [pc, #128]	@ (8011d44 <mem_trim+0x20c>)
 8011cc4:	481c      	ldr	r0, [pc, #112]	@ (8011d38 <mem_trim+0x200>)
 8011cc6:	f00b f867 	bl	801cd98 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011cca:	89fb      	ldrh	r3, [r7, #14]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7ff fd4f 	bl	8011770 <ptr_to_mem>
 8011cd2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8011d48 <mem_trim+0x210>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	693a      	ldr	r2, [r7, #16]
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d202      	bcs.n	8011ce4 <mem_trim+0x1ac>
      lfree = mem2;
 8011cde:	4a1a      	ldr	r2, [pc, #104]	@ (8011d48 <mem_trim+0x210>)
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	881a      	ldrh	r2, [r3, #0]
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	8afa      	ldrh	r2, [r7, #22]
 8011cf6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	89fa      	ldrh	r2, [r7, #14]
 8011cfc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	881b      	ldrh	r3, [r3, #0]
 8011d02:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011d06:	d007      	beq.n	8011d18 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	881b      	ldrh	r3, [r3, #0]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7ff fd2f 	bl	8011770 <ptr_to_mem>
 8011d12:	4602      	mov	r2, r0
 8011d14:	89fb      	ldrh	r3, [r7, #14]
 8011d16:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011d18:	4809      	ldr	r0, [pc, #36]	@ (8011d40 <mem_trim+0x208>)
 8011d1a:	f00a feec 	bl	801caf6 <sys_mutex_unlock>
  return rmem;
 8011d1e:	687b      	ldr	r3, [r7, #4]
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3720      	adds	r7, #32
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	2000c188 	.word	0x2000c188
 8011d2c:	2000c18c 	.word	0x2000c18c
 8011d30:	0801efd8 	.word	0x0801efd8
 8011d34:	0801f164 	.word	0x0801f164
 8011d38:	0801f020 	.word	0x0801f020
 8011d3c:	0801f17c 	.word	0x0801f17c
 8011d40:	2000c190 	.word	0x2000c190
 8011d44:	0801f19c 	.word	0x0801f19c
 8011d48:	2000c194 	.word	0x2000c194

08011d4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b088      	sub	sp, #32
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011d56:	88fb      	ldrh	r3, [r7, #6]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d101      	bne.n	8011d60 <mem_malloc+0x14>
    return NULL;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	e0e2      	b.n	8011f26 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011d60:	88fb      	ldrh	r3, [r7, #6]
 8011d62:	3303      	adds	r3, #3
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	f023 0303 	bic.w	r3, r3, #3
 8011d6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011d6c:	8bbb      	ldrh	r3, [r7, #28]
 8011d6e:	2b0b      	cmp	r3, #11
 8011d70:	d801      	bhi.n	8011d76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011d72:	230c      	movs	r3, #12
 8011d74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011d76:	8bbb      	ldrh	r3, [r7, #28]
 8011d78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011d7c:	d803      	bhi.n	8011d86 <mem_malloc+0x3a>
 8011d7e:	8bba      	ldrh	r2, [r7, #28]
 8011d80:	88fb      	ldrh	r3, [r7, #6]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d201      	bcs.n	8011d8a <mem_malloc+0x3e>
    return NULL;
 8011d86:	2300      	movs	r3, #0
 8011d88:	e0cd      	b.n	8011f26 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011d8a:	4869      	ldr	r0, [pc, #420]	@ (8011f30 <mem_malloc+0x1e4>)
 8011d8c:	f00a fea4 	bl	801cad8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011d90:	4b68      	ldr	r3, [pc, #416]	@ (8011f34 <mem_malloc+0x1e8>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7ff fcfd 	bl	8011794 <mem_to_ptr>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	83fb      	strh	r3, [r7, #30]
 8011d9e:	e0b7      	b.n	8011f10 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011da0:	8bfb      	ldrh	r3, [r7, #30]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7ff fce4 	bl	8011770 <ptr_to_mem>
 8011da8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	791b      	ldrb	r3, [r3, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f040 80a7 	bne.w	8011f02 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	461a      	mov	r2, r3
 8011dba:	8bfb      	ldrh	r3, [r7, #30]
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	f1a3 0208 	sub.w	r2, r3, #8
 8011dc2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	f0c0 809c 	bcc.w	8011f02 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	8bfb      	ldrh	r3, [r7, #30]
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	f1a3 0208 	sub.w	r2, r3, #8
 8011dd8:	8bbb      	ldrh	r3, [r7, #28]
 8011dda:	3314      	adds	r3, #20
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d333      	bcc.n	8011e48 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011de0:	8bfa      	ldrh	r2, [r7, #30]
 8011de2:	8bbb      	ldrh	r3, [r7, #28]
 8011de4:	4413      	add	r3, r2
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	3308      	adds	r3, #8
 8011dea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011dec:	8a7b      	ldrh	r3, [r7, #18]
 8011dee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011df2:	d106      	bne.n	8011e02 <mem_malloc+0xb6>
 8011df4:	4b50      	ldr	r3, [pc, #320]	@ (8011f38 <mem_malloc+0x1ec>)
 8011df6:	f240 3287 	movw	r2, #903	@ 0x387
 8011dfa:	4950      	ldr	r1, [pc, #320]	@ (8011f3c <mem_malloc+0x1f0>)
 8011dfc:	4850      	ldr	r0, [pc, #320]	@ (8011f40 <mem_malloc+0x1f4>)
 8011dfe:	f00a ffcb 	bl	801cd98 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011e02:	8a7b      	ldrh	r3, [r7, #18]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7ff fcb3 	bl	8011770 <ptr_to_mem>
 8011e0a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	881a      	ldrh	r2, [r3, #0]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	8bfa      	ldrh	r2, [r7, #30]
 8011e1e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	8a7a      	ldrh	r2, [r7, #18]
 8011e24:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	2201      	movs	r2, #1
 8011e2a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011e34:	d00b      	beq.n	8011e4e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fc98 	bl	8011770 <ptr_to_mem>
 8011e40:	4602      	mov	r2, r0
 8011e42:	8a7b      	ldrh	r3, [r7, #18]
 8011e44:	8053      	strh	r3, [r2, #2]
 8011e46:	e002      	b.n	8011e4e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011e4e:	4b39      	ldr	r3, [pc, #228]	@ (8011f34 <mem_malloc+0x1e8>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	697a      	ldr	r2, [r7, #20]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d127      	bne.n	8011ea8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011e58:	4b36      	ldr	r3, [pc, #216]	@ (8011f34 <mem_malloc+0x1e8>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011e5e:	e005      	b.n	8011e6c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	881b      	ldrh	r3, [r3, #0]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff fc83 	bl	8011770 <ptr_to_mem>
 8011e6a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011e6c:	69bb      	ldr	r3, [r7, #24]
 8011e6e:	791b      	ldrb	r3, [r3, #4]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d004      	beq.n	8011e7e <mem_malloc+0x132>
 8011e74:	4b33      	ldr	r3, [pc, #204]	@ (8011f44 <mem_malloc+0x1f8>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	69ba      	ldr	r2, [r7, #24]
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d1f0      	bne.n	8011e60 <mem_malloc+0x114>
          }
          lfree = cur;
 8011e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8011f34 <mem_malloc+0x1e8>)
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011e84:	4b2b      	ldr	r3, [pc, #172]	@ (8011f34 <mem_malloc+0x1e8>)
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	4b2e      	ldr	r3, [pc, #184]	@ (8011f44 <mem_malloc+0x1f8>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d00b      	beq.n	8011ea8 <mem_malloc+0x15c>
 8011e90:	4b28      	ldr	r3, [pc, #160]	@ (8011f34 <mem_malloc+0x1e8>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	791b      	ldrb	r3, [r3, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d006      	beq.n	8011ea8 <mem_malloc+0x15c>
 8011e9a:	4b27      	ldr	r3, [pc, #156]	@ (8011f38 <mem_malloc+0x1ec>)
 8011e9c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011ea0:	4929      	ldr	r1, [pc, #164]	@ (8011f48 <mem_malloc+0x1fc>)
 8011ea2:	4827      	ldr	r0, [pc, #156]	@ (8011f40 <mem_malloc+0x1f4>)
 8011ea4:	f00a ff78 	bl	801cd98 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011ea8:	4821      	ldr	r0, [pc, #132]	@ (8011f30 <mem_malloc+0x1e4>)
 8011eaa:	f00a fe24 	bl	801caf6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011eae:	8bba      	ldrh	r2, [r7, #28]
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	4a23      	ldr	r2, [pc, #140]	@ (8011f44 <mem_malloc+0x1f8>)
 8011eb8:	6812      	ldr	r2, [r2, #0]
 8011eba:	4293      	cmp	r3, r2
 8011ebc:	d906      	bls.n	8011ecc <mem_malloc+0x180>
 8011ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8011f38 <mem_malloc+0x1ec>)
 8011ec0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011ec4:	4921      	ldr	r1, [pc, #132]	@ (8011f4c <mem_malloc+0x200>)
 8011ec6:	481e      	ldr	r0, [pc, #120]	@ (8011f40 <mem_malloc+0x1f4>)
 8011ec8:	f00a ff66 	bl	801cd98 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	f003 0303 	and.w	r3, r3, #3
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d006      	beq.n	8011ee4 <mem_malloc+0x198>
 8011ed6:	4b18      	ldr	r3, [pc, #96]	@ (8011f38 <mem_malloc+0x1ec>)
 8011ed8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011edc:	491c      	ldr	r1, [pc, #112]	@ (8011f50 <mem_malloc+0x204>)
 8011ede:	4818      	ldr	r0, [pc, #96]	@ (8011f40 <mem_malloc+0x1f4>)
 8011ee0:	f00a ff5a 	bl	801cd98 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	f003 0303 	and.w	r3, r3, #3
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d006      	beq.n	8011efc <mem_malloc+0x1b0>
 8011eee:	4b12      	ldr	r3, [pc, #72]	@ (8011f38 <mem_malloc+0x1ec>)
 8011ef0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011ef4:	4917      	ldr	r1, [pc, #92]	@ (8011f54 <mem_malloc+0x208>)
 8011ef6:	4812      	ldr	r0, [pc, #72]	@ (8011f40 <mem_malloc+0x1f4>)
 8011ef8:	f00a ff4e 	bl	801cd98 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	3308      	adds	r3, #8
 8011f00:	e011      	b.n	8011f26 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011f02:	8bfb      	ldrh	r3, [r7, #30]
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7ff fc33 	bl	8011770 <ptr_to_mem>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	881b      	ldrh	r3, [r3, #0]
 8011f0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011f10:	8bfa      	ldrh	r2, [r7, #30]
 8011f12:	8bbb      	ldrh	r3, [r7, #28]
 8011f14:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	f4ff af41 	bcc.w	8011da0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011f1e:	4804      	ldr	r0, [pc, #16]	@ (8011f30 <mem_malloc+0x1e4>)
 8011f20:	f00a fde9 	bl	801caf6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3720      	adds	r7, #32
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	2000c190 	.word	0x2000c190
 8011f34:	2000c194 	.word	0x2000c194
 8011f38:	0801efd8 	.word	0x0801efd8
 8011f3c:	0801f19c 	.word	0x0801f19c
 8011f40:	0801f020 	.word	0x0801f020
 8011f44:	2000c18c 	.word	0x2000c18c
 8011f48:	0801f1b0 	.word	0x0801f1b0
 8011f4c:	0801f1cc 	.word	0x0801f1cc
 8011f50:	0801f1fc 	.word	0x0801f1fc
 8011f54:	0801f22c 	.word	0x0801f22c

08011f58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	2200      	movs	r2, #0
 8011f66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	3303      	adds	r3, #3
 8011f6e:	f023 0303 	bic.w	r3, r3, #3
 8011f72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011f74:	2300      	movs	r3, #0
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	e011      	b.n	8011f9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	881b      	ldrh	r3, [r3, #0]
 8011f90:	461a      	mov	r2, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	4413      	add	r3, r2
 8011f96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	885b      	ldrh	r3, [r3, #2]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	dbe7      	blt.n	8011f7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8011faa:	bf00      	nop
 8011fac:	bf00      	nop
 8011fae:	3714      	adds	r7, #20
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	80fb      	strh	r3, [r7, #6]
 8011fc2:	e009      	b.n	8011fd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011fc4:	88fb      	ldrh	r3, [r7, #6]
 8011fc6:	4a08      	ldr	r2, [pc, #32]	@ (8011fe8 <memp_init+0x30>)
 8011fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff ffc3 	bl	8011f58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011fd2:	88fb      	ldrh	r3, [r7, #6]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	80fb      	strh	r3, [r7, #6]
 8011fd8:	88fb      	ldrh	r3, [r7, #6]
 8011fda:	2b0c      	cmp	r3, #12
 8011fdc:	d9f2      	bls.n	8011fc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011fde:	bf00      	nop
 8011fe0:	bf00      	nop
 8011fe2:	3708      	adds	r7, #8
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	08022704 	.word	0x08022704

08011fec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011ff4:	f00a fdb2 	bl	801cb5c <sys_arch_protect>
 8011ff8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d015      	beq.n	8012034 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	6812      	ldr	r2, [r2, #0]
 8012010:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	f003 0303 	and.w	r3, r3, #3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d006      	beq.n	801202a <do_memp_malloc_pool+0x3e>
 801201c:	4b09      	ldr	r3, [pc, #36]	@ (8012044 <do_memp_malloc_pool+0x58>)
 801201e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8012022:	4909      	ldr	r1, [pc, #36]	@ (8012048 <do_memp_malloc_pool+0x5c>)
 8012024:	4809      	ldr	r0, [pc, #36]	@ (801204c <do_memp_malloc_pool+0x60>)
 8012026:	f00a feb7 	bl	801cd98 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f00a fda4 	bl	801cb78 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	e003      	b.n	801203c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f00a fd9f 	bl	801cb78 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3710      	adds	r7, #16
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}
 8012044:	0801f250 	.word	0x0801f250
 8012048:	0801f280 	.word	0x0801f280
 801204c:	0801f2a4 	.word	0x0801f2a4

08012050 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <memp_malloc_pool+0x1c>
 801205e:	4b0a      	ldr	r3, [pc, #40]	@ (8012088 <memp_malloc_pool+0x38>)
 8012060:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8012064:	4909      	ldr	r1, [pc, #36]	@ (801208c <memp_malloc_pool+0x3c>)
 8012066:	480a      	ldr	r0, [pc, #40]	@ (8012090 <memp_malloc_pool+0x40>)
 8012068:	f00a fe96 	bl	801cd98 <iprintf>
  if (desc == NULL) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d101      	bne.n	8012076 <memp_malloc_pool+0x26>
    return NULL;
 8012072:	2300      	movs	r3, #0
 8012074:	e003      	b.n	801207e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff ffb8 	bl	8011fec <do_memp_malloc_pool>
 801207c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801207e:	4618      	mov	r0, r3
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	0801f250 	.word	0x0801f250
 801208c:	0801f2cc 	.word	0x0801f2cc
 8012090:	0801f2a4 	.word	0x0801f2a4

08012094 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	4603      	mov	r3, r0
 801209c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801209e:	79fb      	ldrb	r3, [r7, #7]
 80120a0:	2b0c      	cmp	r3, #12
 80120a2:	d908      	bls.n	80120b6 <memp_malloc+0x22>
 80120a4:	4b0a      	ldr	r3, [pc, #40]	@ (80120d0 <memp_malloc+0x3c>)
 80120a6:	f240 1257 	movw	r2, #343	@ 0x157
 80120aa:	490a      	ldr	r1, [pc, #40]	@ (80120d4 <memp_malloc+0x40>)
 80120ac:	480a      	ldr	r0, [pc, #40]	@ (80120d8 <memp_malloc+0x44>)
 80120ae:	f00a fe73 	bl	801cd98 <iprintf>
 80120b2:	2300      	movs	r3, #0
 80120b4:	e008      	b.n	80120c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80120b6:	79fb      	ldrb	r3, [r7, #7]
 80120b8:	4a08      	ldr	r2, [pc, #32]	@ (80120dc <memp_malloc+0x48>)
 80120ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff ff94 	bl	8011fec <do_memp_malloc_pool>
 80120c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80120c6:	68fb      	ldr	r3, [r7, #12]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3710      	adds	r7, #16
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	0801f250 	.word	0x0801f250
 80120d4:	0801f2e0 	.word	0x0801f2e0
 80120d8:	0801f2a4 	.word	0x0801f2a4
 80120dc:	08022704 	.word	0x08022704

080120e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	f003 0303 	and.w	r3, r3, #3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d006      	beq.n	8012102 <do_memp_free_pool+0x22>
 80120f4:	4b0d      	ldr	r3, [pc, #52]	@ (801212c <do_memp_free_pool+0x4c>)
 80120f6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80120fa:	490d      	ldr	r1, [pc, #52]	@ (8012130 <do_memp_free_pool+0x50>)
 80120fc:	480d      	ldr	r0, [pc, #52]	@ (8012134 <do_memp_free_pool+0x54>)
 80120fe:	f00a fe4b 	bl	801cd98 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012106:	f00a fd29 	bl	801cb5c <sys_arch_protect>
 801210a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	68fa      	ldr	r2, [r7, #12]
 801211c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801211e:	68b8      	ldr	r0, [r7, #8]
 8012120:	f00a fd2a 	bl	801cb78 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012124:	bf00      	nop
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	0801f250 	.word	0x0801f250
 8012130:	0801f300 	.word	0x0801f300
 8012134:	0801f2a4 	.word	0x0801f2a4

08012138 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b082      	sub	sp, #8
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d106      	bne.n	8012156 <memp_free_pool+0x1e>
 8012148:	4b0a      	ldr	r3, [pc, #40]	@ (8012174 <memp_free_pool+0x3c>)
 801214a:	f240 1295 	movw	r2, #405	@ 0x195
 801214e:	490a      	ldr	r1, [pc, #40]	@ (8012178 <memp_free_pool+0x40>)
 8012150:	480a      	ldr	r0, [pc, #40]	@ (801217c <memp_free_pool+0x44>)
 8012152:	f00a fe21 	bl	801cd98 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d007      	beq.n	801216c <memp_free_pool+0x34>
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d004      	beq.n	801216c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012162:	6839      	ldr	r1, [r7, #0]
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff ffbb 	bl	80120e0 <do_memp_free_pool>
 801216a:	e000      	b.n	801216e <memp_free_pool+0x36>
    return;
 801216c:	bf00      	nop
}
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	0801f250 	.word	0x0801f250
 8012178:	0801f2cc 	.word	0x0801f2cc
 801217c:	0801f2a4 	.word	0x0801f2a4

08012180 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	4603      	mov	r3, r0
 8012188:	6039      	str	r1, [r7, #0]
 801218a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801218c:	79fb      	ldrb	r3, [r7, #7]
 801218e:	2b0c      	cmp	r3, #12
 8012190:	d907      	bls.n	80121a2 <memp_free+0x22>
 8012192:	4b0c      	ldr	r3, [pc, #48]	@ (80121c4 <memp_free+0x44>)
 8012194:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012198:	490b      	ldr	r1, [pc, #44]	@ (80121c8 <memp_free+0x48>)
 801219a:	480c      	ldr	r0, [pc, #48]	@ (80121cc <memp_free+0x4c>)
 801219c:	f00a fdfc 	bl	801cd98 <iprintf>
 80121a0:	e00c      	b.n	80121bc <memp_free+0x3c>

  if (mem == NULL) {
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d008      	beq.n	80121ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80121a8:	79fb      	ldrb	r3, [r7, #7]
 80121aa:	4a09      	ldr	r2, [pc, #36]	@ (80121d0 <memp_free+0x50>)
 80121ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7ff ff94 	bl	80120e0 <do_memp_free_pool>
 80121b8:	e000      	b.n	80121bc <memp_free+0x3c>
    return;
 80121ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	0801f250 	.word	0x0801f250
 80121c8:	0801f320 	.word	0x0801f320
 80121cc:	0801f2a4 	.word	0x0801f2a4
 80121d0:	08022704 	.word	0x08022704

080121d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80121d4:	b480      	push	{r7}
 80121d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80121d8:	bf00      	nop
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
	...

080121e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d108      	bne.n	801220a <netif_add+0x26>
 80121f8:	4b57      	ldr	r3, [pc, #348]	@ (8012358 <netif_add+0x174>)
 80121fa:	f240 1227 	movw	r2, #295	@ 0x127
 80121fe:	4957      	ldr	r1, [pc, #348]	@ (801235c <netif_add+0x178>)
 8012200:	4857      	ldr	r0, [pc, #348]	@ (8012360 <netif_add+0x17c>)
 8012202:	f00a fdc9 	bl	801cd98 <iprintf>
 8012206:	2300      	movs	r3, #0
 8012208:	e0a2      	b.n	8012350 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220c:	2b00      	cmp	r3, #0
 801220e:	d108      	bne.n	8012222 <netif_add+0x3e>
 8012210:	4b51      	ldr	r3, [pc, #324]	@ (8012358 <netif_add+0x174>)
 8012212:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8012216:	4953      	ldr	r1, [pc, #332]	@ (8012364 <netif_add+0x180>)
 8012218:	4851      	ldr	r0, [pc, #324]	@ (8012360 <netif_add+0x17c>)
 801221a:	f00a fdbd 	bl	801cd98 <iprintf>
 801221e:	2300      	movs	r3, #0
 8012220:	e096      	b.n	8012350 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d101      	bne.n	801222c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012228:	4b4f      	ldr	r3, [pc, #316]	@ (8012368 <netif_add+0x184>)
 801222a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d101      	bne.n	8012236 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012232:	4b4d      	ldr	r3, [pc, #308]	@ (8012368 <netif_add+0x184>)
 8012234:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d101      	bne.n	8012240 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801223c:	4b4a      	ldr	r3, [pc, #296]	@ (8012368 <netif_add+0x184>)
 801223e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2200      	movs	r2, #0
 8012244:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	2200      	movs	r2, #0
 801224a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	4a45      	ldr	r2, [pc, #276]	@ (801236c <netif_add+0x188>)
 8012256:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2200      	movs	r2, #0
 801225c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2200      	movs	r2, #0
 801226a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6a3a      	ldr	r2, [r7, #32]
 8012270:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012272:	4b3f      	ldr	r3, [pc, #252]	@ (8012370 <netif_add+0x18c>)
 8012274:	781a      	ldrb	r2, [r3, #0]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012280:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	68b9      	ldr	r1, [r7, #8]
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	f000 f913 	bl	80124b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	4798      	blx	r3
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d001      	beq.n	801229e <netif_add+0xba>
    return NULL;
 801229a:	2300      	movs	r3, #0
 801229c:	e058      	b.n	8012350 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80122a4:	2bff      	cmp	r3, #255	@ 0xff
 80122a6:	d103      	bne.n	80122b0 <netif_add+0xcc>
        netif->num = 0;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2200      	movs	r2, #0
 80122ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80122b0:	2300      	movs	r3, #0
 80122b2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80122b4:	4b2f      	ldr	r3, [pc, #188]	@ (8012374 <netif_add+0x190>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	617b      	str	r3, [r7, #20]
 80122ba:	e02b      	b.n	8012314 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d106      	bne.n	80122d2 <netif_add+0xee>
 80122c4:	4b24      	ldr	r3, [pc, #144]	@ (8012358 <netif_add+0x174>)
 80122c6:	f240 128b 	movw	r2, #395	@ 0x18b
 80122ca:	492b      	ldr	r1, [pc, #172]	@ (8012378 <netif_add+0x194>)
 80122cc:	4824      	ldr	r0, [pc, #144]	@ (8012360 <netif_add+0x17c>)
 80122ce:	f00a fd63 	bl	801cd98 <iprintf>
        num_netifs++;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	3301      	adds	r3, #1
 80122d6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	2bff      	cmp	r3, #255	@ 0xff
 80122dc:	dd06      	ble.n	80122ec <netif_add+0x108>
 80122de:	4b1e      	ldr	r3, [pc, #120]	@ (8012358 <netif_add+0x174>)
 80122e0:	f240 128d 	movw	r2, #397	@ 0x18d
 80122e4:	4925      	ldr	r1, [pc, #148]	@ (801237c <netif_add+0x198>)
 80122e6:	481e      	ldr	r0, [pc, #120]	@ (8012360 <netif_add+0x17c>)
 80122e8:	f00a fd56 	bl	801cd98 <iprintf>
        if (netif2->num == netif->num) {
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d108      	bne.n	801230e <netif_add+0x12a>
          netif->num++;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012302:	3301      	adds	r3, #1
 8012304:	b2da      	uxtb	r2, r3
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801230c:	e005      	b.n	801231a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	617b      	str	r3, [r7, #20]
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1d0      	bne.n	80122bc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1be      	bne.n	801229e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012326:	2bfe      	cmp	r3, #254	@ 0xfe
 8012328:	d103      	bne.n	8012332 <netif_add+0x14e>
    netif_num = 0;
 801232a:	4b11      	ldr	r3, [pc, #68]	@ (8012370 <netif_add+0x18c>)
 801232c:	2200      	movs	r2, #0
 801232e:	701a      	strb	r2, [r3, #0]
 8012330:	e006      	b.n	8012340 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012338:	3301      	adds	r3, #1
 801233a:	b2da      	uxtb	r2, r3
 801233c:	4b0c      	ldr	r3, [pc, #48]	@ (8012370 <netif_add+0x18c>)
 801233e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012340:	4b0c      	ldr	r3, [pc, #48]	@ (8012374 <netif_add+0x190>)
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012348:	4a0a      	ldr	r2, [pc, #40]	@ (8012374 <netif_add+0x190>)
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801234e:	68fb      	ldr	r3, [r7, #12]
}
 8012350:	4618      	mov	r0, r3
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	0801f33c 	.word	0x0801f33c
 801235c:	0801f3d0 	.word	0x0801f3d0
 8012360:	0801f38c 	.word	0x0801f38c
 8012364:	0801f3ec 	.word	0x0801f3ec
 8012368:	08022778 	.word	0x08022778
 801236c:	0801278f 	.word	0x0801278f
 8012370:	2000f26c 	.word	0x2000f26c
 8012374:	2000f264 	.word	0x2000f264
 8012378:	0801f410 	.word	0x0801f410
 801237c:	0801f424 	.word	0x0801f424

08012380 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801238a:	6839      	ldr	r1, [r7, #0]
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f002 fe91 	bl	80150b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f007 ff27 	bl	801a1e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801239a:	bf00      	nop
 801239c:	3708      	adds	r7, #8
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
	...

080123a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b086      	sub	sp, #24
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d106      	bne.n	80123c4 <netif_do_set_ipaddr+0x20>
 80123b6:	4b1d      	ldr	r3, [pc, #116]	@ (801242c <netif_do_set_ipaddr+0x88>)
 80123b8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80123bc:	491c      	ldr	r1, [pc, #112]	@ (8012430 <netif_do_set_ipaddr+0x8c>)
 80123be:	481d      	ldr	r0, [pc, #116]	@ (8012434 <netif_do_set_ipaddr+0x90>)
 80123c0:	f00a fcea 	bl	801cd98 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <netif_do_set_ipaddr+0x34>
 80123ca:	4b18      	ldr	r3, [pc, #96]	@ (801242c <netif_do_set_ipaddr+0x88>)
 80123cc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80123d0:	4917      	ldr	r1, [pc, #92]	@ (8012430 <netif_do_set_ipaddr+0x8c>)
 80123d2:	4818      	ldr	r0, [pc, #96]	@ (8012434 <netif_do_set_ipaddr+0x90>)
 80123d4:	f00a fce0 	bl	801cd98 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	3304      	adds	r3, #4
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d01c      	beq.n	8012420 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	3304      	adds	r3, #4
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80123f6:	f107 0314 	add.w	r3, r7, #20
 80123fa:	4619      	mov	r1, r3
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ffbf 	bl	8012380 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d002      	beq.n	801240e <netif_do_set_ipaddr+0x6a>
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	e000      	b.n	8012410 <netif_do_set_ipaddr+0x6c>
 801240e:	2300      	movs	r3, #0
 8012410:	68fa      	ldr	r2, [r7, #12]
 8012412:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012414:	2101      	movs	r1, #1
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	f000 f8d2 	bl	80125c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801241c:	2301      	movs	r3, #1
 801241e:	e000      	b.n	8012422 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012420:	2300      	movs	r3, #0
}
 8012422:	4618      	mov	r0, r3
 8012424:	3718      	adds	r7, #24
 8012426:	46bd      	mov	sp, r7
 8012428:	bd80      	pop	{r7, pc}
 801242a:	bf00      	nop
 801242c:	0801f33c 	.word	0x0801f33c
 8012430:	0801f454 	.word	0x0801f454
 8012434:	0801f38c 	.word	0x0801f38c

08012438 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
 801243e:	60f8      	str	r0, [r7, #12]
 8012440:	60b9      	str	r1, [r7, #8]
 8012442:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	3308      	adds	r3, #8
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	429a      	cmp	r2, r3
 8012450:	d00a      	beq.n	8012468 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d002      	beq.n	801245e <netif_do_set_netmask+0x26>
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	e000      	b.n	8012460 <netif_do_set_netmask+0x28>
 801245e:	2300      	movs	r3, #0
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012464:	2301      	movs	r3, #1
 8012466:	e000      	b.n	801246a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012468:	2300      	movs	r3, #0
}
 801246a:	4618      	mov	r0, r3
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr

08012476 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012476:	b480      	push	{r7}
 8012478:	b085      	sub	sp, #20
 801247a:	af00      	add	r7, sp, #0
 801247c:	60f8      	str	r0, [r7, #12]
 801247e:	60b9      	str	r1, [r7, #8]
 8012480:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	330c      	adds	r3, #12
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	429a      	cmp	r2, r3
 801248e:	d00a      	beq.n	80124a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012490:	68bb      	ldr	r3, [r7, #8]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d002      	beq.n	801249c <netif_do_set_gw+0x26>
 8012496:	68bb      	ldr	r3, [r7, #8]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	e000      	b.n	801249e <netif_do_set_gw+0x28>
 801249c:	2300      	movs	r3, #0
 801249e:	68fa      	ldr	r2, [r7, #12]
 80124a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80124a2:	2301      	movs	r3, #1
 80124a4:	e000      	b.n	80124a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80124a6:	2300      	movs	r3, #0
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3714      	adds	r7, #20
 80124ac:	46bd      	mov	sp, r7
 80124ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b2:	4770      	bx	lr

080124b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80124c2:	2300      	movs	r3, #0
 80124c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80124c6:	2300      	movs	r3, #0
 80124c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d101      	bne.n	80124d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80124d0:	4b1c      	ldr	r3, [pc, #112]	@ (8012544 <netif_set_addr+0x90>)
 80124d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d101      	bne.n	80124de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80124da:	4b1a      	ldr	r3, [pc, #104]	@ (8012544 <netif_set_addr+0x90>)
 80124dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d101      	bne.n	80124e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80124e4:	4b17      	ldr	r3, [pc, #92]	@ (8012544 <netif_set_addr+0x90>)
 80124e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d003      	beq.n	80124f6 <netif_set_addr+0x42>
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d101      	bne.n	80124fa <netif_set_addr+0x46>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e000      	b.n	80124fc <netif_set_addr+0x48>
 80124fa:	2300      	movs	r3, #0
 80124fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d006      	beq.n	8012512 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012504:	f107 0310 	add.w	r3, r7, #16
 8012508:	461a      	mov	r2, r3
 801250a:	68b9      	ldr	r1, [r7, #8]
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f7ff ff49 	bl	80123a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012512:	69fa      	ldr	r2, [r7, #28]
 8012514:	6879      	ldr	r1, [r7, #4]
 8012516:	68f8      	ldr	r0, [r7, #12]
 8012518:	f7ff ff8e 	bl	8012438 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801251c:	69ba      	ldr	r2, [r7, #24]
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f7ff ffa8 	bl	8012476 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d106      	bne.n	801253a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801252c:	f107 0310 	add.w	r3, r7, #16
 8012530:	461a      	mov	r2, r3
 8012532:	68b9      	ldr	r1, [r7, #8]
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f7ff ff35 	bl	80123a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801253a:	bf00      	nop
 801253c:	3720      	adds	r7, #32
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
 8012542:	bf00      	nop
 8012544:	08022778 	.word	0x08022778

08012548 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012548:	b480      	push	{r7}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012550:	4a04      	ldr	r2, [pc, #16]	@ (8012564 <netif_set_default+0x1c>)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012556:	bf00      	nop
 8012558:	370c      	adds	r7, #12
 801255a:	46bd      	mov	sp, r7
 801255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012560:	4770      	bx	lr
 8012562:	bf00      	nop
 8012564:	2000f268 	.word	0x2000f268

08012568 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d107      	bne.n	8012586 <netif_set_up+0x1e>
 8012576:	4b0f      	ldr	r3, [pc, #60]	@ (80125b4 <netif_set_up+0x4c>)
 8012578:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801257c:	490e      	ldr	r1, [pc, #56]	@ (80125b8 <netif_set_up+0x50>)
 801257e:	480f      	ldr	r0, [pc, #60]	@ (80125bc <netif_set_up+0x54>)
 8012580:	f00a fc0a 	bl	801cd98 <iprintf>
 8012584:	e013      	b.n	80125ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801258c:	f003 0301 	and.w	r3, r3, #1
 8012590:	2b00      	cmp	r3, #0
 8012592:	d10c      	bne.n	80125ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801259a:	f043 0301 	orr.w	r3, r3, #1
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80125a6:	2103      	movs	r1, #3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 f809 	bl	80125c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80125ae:	3708      	adds	r7, #8
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	0801f33c 	.word	0x0801f33c
 80125b8:	0801f4c4 	.word	0x0801f4c4
 80125bc:	0801f38c 	.word	0x0801f38c

080125c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d106      	bne.n	80125e0 <netif_issue_reports+0x20>
 80125d2:	4b18      	ldr	r3, [pc, #96]	@ (8012634 <netif_issue_reports+0x74>)
 80125d4:	f240 326d 	movw	r2, #877	@ 0x36d
 80125d8:	4917      	ldr	r1, [pc, #92]	@ (8012638 <netif_issue_reports+0x78>)
 80125da:	4818      	ldr	r0, [pc, #96]	@ (801263c <netif_issue_reports+0x7c>)
 80125dc:	f00a fbdc 	bl	801cd98 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80125e6:	f003 0304 	and.w	r3, r3, #4
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d01e      	beq.n	801262c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80125f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d017      	beq.n	801262c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80125fc:	78fb      	ldrb	r3, [r7, #3]
 80125fe:	f003 0301 	and.w	r3, r3, #1
 8012602:	2b00      	cmp	r3, #0
 8012604:	d013      	beq.n	801262e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	3304      	adds	r3, #4
 801260a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00e      	beq.n	801262e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012616:	f003 0308 	and.w	r3, r3, #8
 801261a:	2b00      	cmp	r3, #0
 801261c:	d007      	beq.n	801262e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	3304      	adds	r3, #4
 8012622:	4619      	mov	r1, r3
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f008 fd49 	bl	801b0bc <etharp_request>
 801262a:	e000      	b.n	801262e <netif_issue_reports+0x6e>
    return;
 801262c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	0801f33c 	.word	0x0801f33c
 8012638:	0801f4e0 	.word	0x0801f4e0
 801263c:	0801f38c 	.word	0x0801f38c

08012640 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d107      	bne.n	801265e <netif_set_down+0x1e>
 801264e:	4b12      	ldr	r3, [pc, #72]	@ (8012698 <netif_set_down+0x58>)
 8012650:	f240 329b 	movw	r2, #923	@ 0x39b
 8012654:	4911      	ldr	r1, [pc, #68]	@ (801269c <netif_set_down+0x5c>)
 8012656:	4812      	ldr	r0, [pc, #72]	@ (80126a0 <netif_set_down+0x60>)
 8012658:	f00a fb9e 	bl	801cd98 <iprintf>
 801265c:	e019      	b.n	8012692 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012664:	f003 0301 	and.w	r3, r3, #1
 8012668:	2b00      	cmp	r3, #0
 801266a:	d012      	beq.n	8012692 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012672:	f023 0301 	bic.w	r3, r3, #1
 8012676:	b2da      	uxtb	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012684:	f003 0308 	and.w	r3, r3, #8
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f008 f8d3 	bl	801a838 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012692:	3708      	adds	r7, #8
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	0801f33c 	.word	0x0801f33c
 801269c:	0801f504 	.word	0x0801f504
 80126a0:	0801f38c 	.word	0x0801f38c

080126a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d107      	bne.n	80126c2 <netif_set_link_up+0x1e>
 80126b2:	4b13      	ldr	r3, [pc, #76]	@ (8012700 <netif_set_link_up+0x5c>)
 80126b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80126b8:	4912      	ldr	r1, [pc, #72]	@ (8012704 <netif_set_link_up+0x60>)
 80126ba:	4813      	ldr	r0, [pc, #76]	@ (8012708 <netif_set_link_up+0x64>)
 80126bc:	f00a fb6c 	bl	801cd98 <iprintf>
 80126c0:	e01b      	b.n	80126fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80126c8:	f003 0304 	and.w	r3, r3, #4
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d114      	bne.n	80126fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80126d6:	f043 0304 	orr.w	r3, r3, #4
 80126da:	b2da      	uxtb	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80126e2:	2103      	movs	r1, #3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff ff6b 	bl	80125c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	69db      	ldr	r3, [r3, #28]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d003      	beq.n	80126fa <netif_set_link_up+0x56>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	69db      	ldr	r3, [r3, #28]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	0801f33c 	.word	0x0801f33c
 8012704:	0801f524 	.word	0x0801f524
 8012708:	0801f38c 	.word	0x0801f38c

0801270c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b082      	sub	sp, #8
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d107      	bne.n	801272a <netif_set_link_down+0x1e>
 801271a:	4b11      	ldr	r3, [pc, #68]	@ (8012760 <netif_set_link_down+0x54>)
 801271c:	f240 4206 	movw	r2, #1030	@ 0x406
 8012720:	4910      	ldr	r1, [pc, #64]	@ (8012764 <netif_set_link_down+0x58>)
 8012722:	4811      	ldr	r0, [pc, #68]	@ (8012768 <netif_set_link_down+0x5c>)
 8012724:	f00a fb38 	bl	801cd98 <iprintf>
 8012728:	e017      	b.n	801275a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012730:	f003 0304 	and.w	r3, r3, #4
 8012734:	2b00      	cmp	r3, #0
 8012736:	d010      	beq.n	801275a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801273e:	f023 0304 	bic.w	r3, r3, #4
 8012742:	b2da      	uxtb	r2, r3
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	69db      	ldr	r3, [r3, #28]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d003      	beq.n	801275a <netif_set_link_down+0x4e>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	69db      	ldr	r3, [r3, #28]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	0801f33c 	.word	0x0801f33c
 8012764:	0801f548 	.word	0x0801f548
 8012768:	0801f38c 	.word	0x0801f38c

0801276c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	683a      	ldr	r2, [r7, #0]
 8012780:	61da      	str	r2, [r3, #28]
  }
}
 8012782:	bf00      	nop
 8012784:	370c      	adds	r7, #12
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr

0801278e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801278e:	b480      	push	{r7}
 8012790:	b085      	sub	sp, #20
 8012792:	af00      	add	r7, sp, #0
 8012794:	60f8      	str	r0, [r7, #12]
 8012796:	60b9      	str	r1, [r7, #8]
 8012798:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801279a:	f06f 030b 	mvn.w	r3, #11
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3714      	adds	r7, #20
 80127a2:	46bd      	mov	sp, r7
 80127a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a8:	4770      	bx	lr
	...

080127ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80127ac:	b480      	push	{r7}
 80127ae:	b085      	sub	sp, #20
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	4603      	mov	r3, r0
 80127b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80127b6:	79fb      	ldrb	r3, [r7, #7]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d013      	beq.n	80127e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80127bc:	4b0d      	ldr	r3, [pc, #52]	@ (80127f4 <netif_get_by_index+0x48>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	60fb      	str	r3, [r7, #12]
 80127c2:	e00c      	b.n	80127de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80127ca:	3301      	adds	r3, #1
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	79fa      	ldrb	r2, [r7, #7]
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d101      	bne.n	80127d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	e006      	b.n	80127e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	60fb      	str	r3, [r7, #12]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1ef      	bne.n	80127c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80127e4:	2300      	movs	r3, #0
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	2000f264 	.word	0x2000f264

080127f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80127fe:	f00a f9ad 	bl	801cb5c <sys_arch_protect>
 8012802:	6038      	str	r0, [r7, #0]
 8012804:	4b0d      	ldr	r3, [pc, #52]	@ (801283c <pbuf_free_ooseq+0x44>)
 8012806:	2200      	movs	r2, #0
 8012808:	701a      	strb	r2, [r3, #0]
 801280a:	6838      	ldr	r0, [r7, #0]
 801280c:	f00a f9b4 	bl	801cb78 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012810:	4b0b      	ldr	r3, [pc, #44]	@ (8012840 <pbuf_free_ooseq+0x48>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	607b      	str	r3, [r7, #4]
 8012816:	e00a      	b.n	801282e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801281c:	2b00      	cmp	r3, #0
 801281e:	d003      	beq.n	8012828 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f002 fc85 	bl	8015130 <tcp_free_ooseq>
      return;
 8012826:	e005      	b.n	8012834 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	607b      	str	r3, [r7, #4]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d1f1      	bne.n	8012818 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012834:	3708      	adds	r7, #8
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	2000f26d 	.word	0x2000f26d
 8012840:	2000f27c 	.word	0x2000f27c

08012844 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801284c:	f7ff ffd4 	bl	80127f8 <pbuf_free_ooseq>
}
 8012850:	bf00      	nop
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}

08012858 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801285e:	f00a f97d 	bl	801cb5c <sys_arch_protect>
 8012862:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012864:	4b0f      	ldr	r3, [pc, #60]	@ (80128a4 <pbuf_pool_is_empty+0x4c>)
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801286a:	4b0e      	ldr	r3, [pc, #56]	@ (80128a4 <pbuf_pool_is_empty+0x4c>)
 801286c:	2201      	movs	r2, #1
 801286e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f00a f981 	bl	801cb78 <sys_arch_unprotect>

  if (!queued) {
 8012876:	78fb      	ldrb	r3, [r7, #3]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d10f      	bne.n	801289c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801287c:	2100      	movs	r1, #0
 801287e:	480a      	ldr	r0, [pc, #40]	@ (80128a8 <pbuf_pool_is_empty+0x50>)
 8012880:	f7fe f840 	bl	8010904 <tcpip_try_callback>
 8012884:	4603      	mov	r3, r0
 8012886:	2b00      	cmp	r3, #0
 8012888:	d008      	beq.n	801289c <pbuf_pool_is_empty+0x44>
 801288a:	f00a f967 	bl	801cb5c <sys_arch_protect>
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	4b04      	ldr	r3, [pc, #16]	@ (80128a4 <pbuf_pool_is_empty+0x4c>)
 8012892:	2200      	movs	r2, #0
 8012894:	701a      	strb	r2, [r3, #0]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f00a f96e 	bl	801cb78 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801289c:	bf00      	nop
 801289e:	3708      	adds	r7, #8
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	2000f26d 	.word	0x2000f26d
 80128a8:	08012845 	.word	0x08012845

080128ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b085      	sub	sp, #20
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	4611      	mov	r1, r2
 80128b8:	461a      	mov	r2, r3
 80128ba:	460b      	mov	r3, r1
 80128bc:	80fb      	strh	r3, [r7, #6]
 80128be:	4613      	mov	r3, r2
 80128c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2200      	movs	r2, #0
 80128c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	88fa      	ldrh	r2, [r7, #6]
 80128d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	88ba      	ldrh	r2, [r7, #4]
 80128d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80128da:	8b3b      	ldrh	r3, [r7, #24]
 80128dc:	b2da      	uxtb	r2, r3
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	7f3a      	ldrb	r2, [r7, #28]
 80128e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2201      	movs	r2, #1
 80128ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	73da      	strb	r2, [r3, #15]
}
 80128f4:	bf00      	nop
 80128f6:	3714      	adds	r7, #20
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b08c      	sub	sp, #48	@ 0x30
 8012904:	af02      	add	r7, sp, #8
 8012906:	4603      	mov	r3, r0
 8012908:	71fb      	strb	r3, [r7, #7]
 801290a:	460b      	mov	r3, r1
 801290c:	80bb      	strh	r3, [r7, #4]
 801290e:	4613      	mov	r3, r2
 8012910:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012912:	79fb      	ldrb	r3, [r7, #7]
 8012914:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012916:	887b      	ldrh	r3, [r7, #2]
 8012918:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 801291c:	d07f      	beq.n	8012a1e <pbuf_alloc+0x11e>
 801291e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8012922:	f300 80c8 	bgt.w	8012ab6 <pbuf_alloc+0x1b6>
 8012926:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801292a:	d010      	beq.n	801294e <pbuf_alloc+0x4e>
 801292c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012930:	f300 80c1 	bgt.w	8012ab6 <pbuf_alloc+0x1b6>
 8012934:	2b01      	cmp	r3, #1
 8012936:	d002      	beq.n	801293e <pbuf_alloc+0x3e>
 8012938:	2b41      	cmp	r3, #65	@ 0x41
 801293a:	f040 80bc 	bne.w	8012ab6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801293e:	887a      	ldrh	r2, [r7, #2]
 8012940:	88bb      	ldrh	r3, [r7, #4]
 8012942:	4619      	mov	r1, r3
 8012944:	2000      	movs	r0, #0
 8012946:	f000 f8d1 	bl	8012aec <pbuf_alloc_reference>
 801294a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 801294c:	e0bd      	b.n	8012aca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801294e:	2300      	movs	r3, #0
 8012950:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8012952:	2300      	movs	r3, #0
 8012954:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012956:	88bb      	ldrh	r3, [r7, #4]
 8012958:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801295a:	200c      	movs	r0, #12
 801295c:	f7ff fb9a 	bl	8012094 <memp_malloc>
 8012960:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012962:	693b      	ldr	r3, [r7, #16]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d109      	bne.n	801297c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012968:	f7ff ff76 	bl	8012858 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296e:	2b00      	cmp	r3, #0
 8012970:	d002      	beq.n	8012978 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012972:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012974:	f000 faa8 	bl	8012ec8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012978:	2300      	movs	r3, #0
 801297a:	e0a7      	b.n	8012acc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801297c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801297e:	3303      	adds	r3, #3
 8012980:	b29b      	uxth	r3, r3
 8012982:	f023 0303 	bic.w	r3, r3, #3
 8012986:	b29b      	uxth	r3, r3
 8012988:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801298c:	b29b      	uxth	r3, r3
 801298e:	8b7a      	ldrh	r2, [r7, #26]
 8012990:	4293      	cmp	r3, r2
 8012992:	bf28      	it	cs
 8012994:	4613      	movcs	r3, r2
 8012996:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012998:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801299a:	3310      	adds	r3, #16
 801299c:	693a      	ldr	r2, [r7, #16]
 801299e:	4413      	add	r3, r2
 80129a0:	3303      	adds	r3, #3
 80129a2:	f023 0303 	bic.w	r3, r3, #3
 80129a6:	4618      	mov	r0, r3
 80129a8:	89f9      	ldrh	r1, [r7, #14]
 80129aa:	8b7a      	ldrh	r2, [r7, #26]
 80129ac:	2300      	movs	r3, #0
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	887b      	ldrh	r3, [r7, #2]
 80129b2:	9300      	str	r3, [sp, #0]
 80129b4:	460b      	mov	r3, r1
 80129b6:	4601      	mov	r1, r0
 80129b8:	6938      	ldr	r0, [r7, #16]
 80129ba:	f7ff ff77 	bl	80128ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	f003 0303 	and.w	r3, r3, #3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d006      	beq.n	80129d8 <pbuf_alloc+0xd8>
 80129ca:	4b42      	ldr	r3, [pc, #264]	@ (8012ad4 <pbuf_alloc+0x1d4>)
 80129cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80129d0:	4941      	ldr	r1, [pc, #260]	@ (8012ad8 <pbuf_alloc+0x1d8>)
 80129d2:	4842      	ldr	r0, [pc, #264]	@ (8012adc <pbuf_alloc+0x1dc>)
 80129d4:	f00a f9e0 	bl	801cd98 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80129d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80129da:	3303      	adds	r3, #3
 80129dc:	f023 0303 	bic.w	r3, r3, #3
 80129e0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80129e4:	d106      	bne.n	80129f4 <pbuf_alloc+0xf4>
 80129e6:	4b3b      	ldr	r3, [pc, #236]	@ (8012ad4 <pbuf_alloc+0x1d4>)
 80129e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80129ec:	493c      	ldr	r1, [pc, #240]	@ (8012ae0 <pbuf_alloc+0x1e0>)
 80129ee:	483b      	ldr	r0, [pc, #236]	@ (8012adc <pbuf_alloc+0x1dc>)
 80129f0:	f00a f9d2 	bl	801cd98 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80129f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d102      	bne.n	8012a00 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80129fe:	e002      	b.n	8012a06 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012a00:	69fb      	ldr	r3, [r7, #28]
 8012a02:	693a      	ldr	r2, [r7, #16]
 8012a04:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012a0a:	8b7a      	ldrh	r2, [r7, #26]
 8012a0c:	89fb      	ldrh	r3, [r7, #14]
 8012a0e:	1ad3      	subs	r3, r2, r3
 8012a10:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012a12:	2300      	movs	r3, #0
 8012a14:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8012a16:	8b7b      	ldrh	r3, [r7, #26]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d19e      	bne.n	801295a <pbuf_alloc+0x5a>
      break;
 8012a1c:	e055      	b.n	8012aca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012a1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a20:	3303      	adds	r3, #3
 8012a22:	b29b      	uxth	r3, r3
 8012a24:	f023 0303 	bic.w	r3, r3, #3
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	88bb      	ldrh	r3, [r7, #4]
 8012a2c:	3303      	adds	r3, #3
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	f023 0303 	bic.w	r3, r3, #3
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	4413      	add	r3, r2
 8012a38:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012a3a:	8b3b      	ldrh	r3, [r7, #24]
 8012a3c:	3310      	adds	r3, #16
 8012a3e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012a40:	8b3a      	ldrh	r2, [r7, #24]
 8012a42:	88bb      	ldrh	r3, [r7, #4]
 8012a44:	3303      	adds	r3, #3
 8012a46:	f023 0303 	bic.w	r3, r3, #3
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d306      	bcc.n	8012a5c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012a4e:	8afa      	ldrh	r2, [r7, #22]
 8012a50:	88bb      	ldrh	r3, [r7, #4]
 8012a52:	3303      	adds	r3, #3
 8012a54:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d201      	bcs.n	8012a60 <pbuf_alloc+0x160>
        return NULL;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e035      	b.n	8012acc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012a60:	8afb      	ldrh	r3, [r7, #22]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7ff f972 	bl	8011d4c <mem_malloc>
 8012a68:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d101      	bne.n	8012a74 <pbuf_alloc+0x174>
        return NULL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	e02b      	b.n	8012acc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012a74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012a76:	3310      	adds	r3, #16
 8012a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a7a:	4413      	add	r3, r2
 8012a7c:	3303      	adds	r3, #3
 8012a7e:	f023 0303 	bic.w	r3, r3, #3
 8012a82:	4618      	mov	r0, r3
 8012a84:	88b9      	ldrh	r1, [r7, #4]
 8012a86:	88ba      	ldrh	r2, [r7, #4]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	9301      	str	r3, [sp, #4]
 8012a8c:	887b      	ldrh	r3, [r7, #2]
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	460b      	mov	r3, r1
 8012a92:	4601      	mov	r1, r0
 8012a94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012a96:	f7ff ff09 	bl	80128ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	f003 0303 	and.w	r3, r3, #3
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d010      	beq.n	8012ac8 <pbuf_alloc+0x1c8>
 8012aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8012ad4 <pbuf_alloc+0x1d4>)
 8012aa8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012aac:	490d      	ldr	r1, [pc, #52]	@ (8012ae4 <pbuf_alloc+0x1e4>)
 8012aae:	480b      	ldr	r0, [pc, #44]	@ (8012adc <pbuf_alloc+0x1dc>)
 8012ab0:	f00a f972 	bl	801cd98 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012ab4:	e008      	b.n	8012ac8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012ab6:	4b07      	ldr	r3, [pc, #28]	@ (8012ad4 <pbuf_alloc+0x1d4>)
 8012ab8:	f240 1227 	movw	r2, #295	@ 0x127
 8012abc:	490a      	ldr	r1, [pc, #40]	@ (8012ae8 <pbuf_alloc+0x1e8>)
 8012abe:	4807      	ldr	r0, [pc, #28]	@ (8012adc <pbuf_alloc+0x1dc>)
 8012ac0:	f00a f96a 	bl	801cd98 <iprintf>
      return NULL;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e001      	b.n	8012acc <pbuf_alloc+0x1cc>
      break;
 8012ac8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3728      	adds	r7, #40	@ 0x28
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	0801f56c 	.word	0x0801f56c
 8012ad8:	0801f59c 	.word	0x0801f59c
 8012adc:	0801f5cc 	.word	0x0801f5cc
 8012ae0:	0801f5f4 	.word	0x0801f5f4
 8012ae4:	0801f628 	.word	0x0801f628
 8012ae8:	0801f654 	.word	0x0801f654

08012aec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b086      	sub	sp, #24
 8012af0:	af02      	add	r7, sp, #8
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	460b      	mov	r3, r1
 8012af6:	807b      	strh	r3, [r7, #2]
 8012af8:	4613      	mov	r3, r2
 8012afa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012afc:	883b      	ldrh	r3, [r7, #0]
 8012afe:	2b41      	cmp	r3, #65	@ 0x41
 8012b00:	d009      	beq.n	8012b16 <pbuf_alloc_reference+0x2a>
 8012b02:	883b      	ldrh	r3, [r7, #0]
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	d006      	beq.n	8012b16 <pbuf_alloc_reference+0x2a>
 8012b08:	4b0f      	ldr	r3, [pc, #60]	@ (8012b48 <pbuf_alloc_reference+0x5c>)
 8012b0a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8012b0e:	490f      	ldr	r1, [pc, #60]	@ (8012b4c <pbuf_alloc_reference+0x60>)
 8012b10:	480f      	ldr	r0, [pc, #60]	@ (8012b50 <pbuf_alloc_reference+0x64>)
 8012b12:	f00a f941 	bl	801cd98 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012b16:	200b      	movs	r0, #11
 8012b18:	f7ff fabc 	bl	8012094 <memp_malloc>
 8012b1c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012b24:	2300      	movs	r3, #0
 8012b26:	e00b      	b.n	8012b40 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012b28:	8879      	ldrh	r1, [r7, #2]
 8012b2a:	887a      	ldrh	r2, [r7, #2]
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	883b      	ldrh	r3, [r7, #0]
 8012b32:	9300      	str	r3, [sp, #0]
 8012b34:	460b      	mov	r3, r1
 8012b36:	6879      	ldr	r1, [r7, #4]
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f7ff feb7 	bl	80128ac <pbuf_init_alloced_pbuf>
  return p;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	3710      	adds	r7, #16
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	0801f56c 	.word	0x0801f56c
 8012b4c:	0801f670 	.word	0x0801f670
 8012b50:	0801f5cc 	.word	0x0801f5cc

08012b54 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b088      	sub	sp, #32
 8012b58:	af02      	add	r7, sp, #8
 8012b5a:	607b      	str	r3, [r7, #4]
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	73fb      	strb	r3, [r7, #15]
 8012b60:	460b      	mov	r3, r1
 8012b62:	81bb      	strh	r3, [r7, #12]
 8012b64:	4613      	mov	r3, r2
 8012b66:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012b68:	7bfb      	ldrb	r3, [r7, #15]
 8012b6a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012b6c:	8a7b      	ldrh	r3, [r7, #18]
 8012b6e:	3303      	adds	r3, #3
 8012b70:	f023 0203 	bic.w	r2, r3, #3
 8012b74:	89bb      	ldrh	r3, [r7, #12]
 8012b76:	441a      	add	r2, r3
 8012b78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d901      	bls.n	8012b82 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	e018      	b.n	8012bb4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012b82:	6a3b      	ldr	r3, [r7, #32]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d007      	beq.n	8012b98 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012b88:	8a7b      	ldrh	r3, [r7, #18]
 8012b8a:	3303      	adds	r3, #3
 8012b8c:	f023 0303 	bic.w	r3, r3, #3
 8012b90:	6a3a      	ldr	r2, [r7, #32]
 8012b92:	4413      	add	r3, r2
 8012b94:	617b      	str	r3, [r7, #20]
 8012b96:	e001      	b.n	8012b9c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	89b9      	ldrh	r1, [r7, #12]
 8012ba0:	89ba      	ldrh	r2, [r7, #12]
 8012ba2:	2302      	movs	r3, #2
 8012ba4:	9301      	str	r3, [sp, #4]
 8012ba6:	897b      	ldrh	r3, [r7, #10]
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	460b      	mov	r3, r1
 8012bac:	6979      	ldr	r1, [r7, #20]
 8012bae:	f7ff fe7d 	bl	80128ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012bb2:	687b      	ldr	r3, [r7, #4]
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3718      	adds	r7, #24
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d106      	bne.n	8012bdc <pbuf_realloc+0x20>
 8012bce:	4b3a      	ldr	r3, [pc, #232]	@ (8012cb8 <pbuf_realloc+0xfc>)
 8012bd0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012bd4:	4939      	ldr	r1, [pc, #228]	@ (8012cbc <pbuf_realloc+0x100>)
 8012bd6:	483a      	ldr	r0, [pc, #232]	@ (8012cc0 <pbuf_realloc+0x104>)
 8012bd8:	f00a f8de 	bl	801cd98 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	891b      	ldrh	r3, [r3, #8]
 8012be0:	887a      	ldrh	r2, [r7, #2]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d263      	bcs.n	8012cae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	891a      	ldrh	r2, [r3, #8]
 8012bea:	887b      	ldrh	r3, [r7, #2]
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012bf0:	887b      	ldrh	r3, [r7, #2]
 8012bf2:	817b      	strh	r3, [r7, #10]
  q = p;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012bf8:	e018      	b.n	8012c2c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	895b      	ldrh	r3, [r3, #10]
 8012bfe:	897a      	ldrh	r2, [r7, #10]
 8012c00:	1ad3      	subs	r3, r2, r3
 8012c02:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	891a      	ldrh	r2, [r3, #8]
 8012c08:	893b      	ldrh	r3, [r7, #8]
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	b29a      	uxth	r2, r3
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d106      	bne.n	8012c2c <pbuf_realloc+0x70>
 8012c1e:	4b26      	ldr	r3, [pc, #152]	@ (8012cb8 <pbuf_realloc+0xfc>)
 8012c20:	f240 12af 	movw	r2, #431	@ 0x1af
 8012c24:	4927      	ldr	r1, [pc, #156]	@ (8012cc4 <pbuf_realloc+0x108>)
 8012c26:	4826      	ldr	r0, [pc, #152]	@ (8012cc0 <pbuf_realloc+0x104>)
 8012c28:	f00a f8b6 	bl	801cd98 <iprintf>
  while (rem_len > q->len) {
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	895b      	ldrh	r3, [r3, #10]
 8012c30:	897a      	ldrh	r2, [r7, #10]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d8e1      	bhi.n	8012bfa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	7b1b      	ldrb	r3, [r3, #12]
 8012c3a:	f003 030f 	and.w	r3, r3, #15
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d121      	bne.n	8012c86 <pbuf_realloc+0xca>
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	895b      	ldrh	r3, [r3, #10]
 8012c46:	897a      	ldrh	r2, [r7, #10]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d01c      	beq.n	8012c86 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	7b5b      	ldrb	r3, [r3, #13]
 8012c50:	f003 0302 	and.w	r3, r3, #2
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d116      	bne.n	8012c86 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	685a      	ldr	r2, [r3, #4]
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	1ad3      	subs	r3, r2, r3
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	897b      	ldrh	r3, [r7, #10]
 8012c64:	4413      	add	r3, r2
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	4619      	mov	r1, r3
 8012c6a:	68f8      	ldr	r0, [r7, #12]
 8012c6c:	f7fe ff64 	bl	8011b38 <mem_trim>
 8012c70:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d106      	bne.n	8012c86 <pbuf_realloc+0xca>
 8012c78:	4b0f      	ldr	r3, [pc, #60]	@ (8012cb8 <pbuf_realloc+0xfc>)
 8012c7a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012c7e:	4912      	ldr	r1, [pc, #72]	@ (8012cc8 <pbuf_realloc+0x10c>)
 8012c80:	480f      	ldr	r0, [pc, #60]	@ (8012cc0 <pbuf_realloc+0x104>)
 8012c82:	f00a f889 	bl	801cd98 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	897a      	ldrh	r2, [r7, #10]
 8012c8a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	895a      	ldrh	r2, [r3, #10]
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d004      	beq.n	8012ca6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f000 f911 	bl	8012ec8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2200      	movs	r2, #0
 8012caa:	601a      	str	r2, [r3, #0]
 8012cac:	e000      	b.n	8012cb0 <pbuf_realloc+0xf4>
    return;
 8012cae:	bf00      	nop

}
 8012cb0:	3710      	adds	r7, #16
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	0801f56c 	.word	0x0801f56c
 8012cbc:	0801f684 	.word	0x0801f684
 8012cc0:	0801f5cc 	.word	0x0801f5cc
 8012cc4:	0801f69c 	.word	0x0801f69c
 8012cc8:	0801f6b4 	.word	0x0801f6b4

08012ccc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b086      	sub	sp, #24
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	4613      	mov	r3, r2
 8012cd8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d106      	bne.n	8012cee <pbuf_add_header_impl+0x22>
 8012ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8012d90 <pbuf_add_header_impl+0xc4>)
 8012ce2:	f240 12df 	movw	r2, #479	@ 0x1df
 8012ce6:	492b      	ldr	r1, [pc, #172]	@ (8012d94 <pbuf_add_header_impl+0xc8>)
 8012ce8:	482b      	ldr	r0, [pc, #172]	@ (8012d98 <pbuf_add_header_impl+0xcc>)
 8012cea:	f00a f855 	bl	801cd98 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d003      	beq.n	8012cfc <pbuf_add_header_impl+0x30>
 8012cf4:	68bb      	ldr	r3, [r7, #8]
 8012cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012cfa:	d301      	bcc.n	8012d00 <pbuf_add_header_impl+0x34>
    return 1;
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e043      	b.n	8012d88 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d101      	bne.n	8012d0a <pbuf_add_header_impl+0x3e>
    return 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	e03e      	b.n	8012d88 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	891a      	ldrh	r2, [r3, #8]
 8012d12:	8a7b      	ldrh	r3, [r7, #18]
 8012d14:	4413      	add	r3, r2
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	8a7a      	ldrh	r2, [r7, #18]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d901      	bls.n	8012d22 <pbuf_add_header_impl+0x56>
    return 1;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e032      	b.n	8012d88 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	7b1b      	ldrb	r3, [r3, #12]
 8012d26:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012d28:	8a3b      	ldrh	r3, [r7, #16]
 8012d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d00c      	beq.n	8012d4c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	425b      	negs	r3, r3
 8012d3a:	4413      	add	r3, r2
 8012d3c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	3310      	adds	r3, #16
 8012d42:	697a      	ldr	r2, [r7, #20]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d20d      	bcs.n	8012d64 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	e01d      	b.n	8012d88 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012d4c:	79fb      	ldrb	r3, [r7, #7]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d006      	beq.n	8012d60 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	685a      	ldr	r2, [r3, #4]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	425b      	negs	r3, r3
 8012d5a:	4413      	add	r3, r2
 8012d5c:	617b      	str	r3, [r7, #20]
 8012d5e:	e001      	b.n	8012d64 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012d60:	2301      	movs	r3, #1
 8012d62:	e011      	b.n	8012d88 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	697a      	ldr	r2, [r7, #20]
 8012d68:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	895a      	ldrh	r2, [r3, #10]
 8012d6e:	8a7b      	ldrh	r3, [r7, #18]
 8012d70:	4413      	add	r3, r2
 8012d72:	b29a      	uxth	r2, r3
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	891a      	ldrh	r2, [r3, #8]
 8012d7c:	8a7b      	ldrh	r3, [r7, #18]
 8012d7e:	4413      	add	r3, r2
 8012d80:	b29a      	uxth	r2, r3
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	811a      	strh	r2, [r3, #8]


  return 0;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3718      	adds	r7, #24
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	0801f56c 	.word	0x0801f56c
 8012d94:	0801f6d0 	.word	0x0801f6d0
 8012d98:	0801f5cc 	.word	0x0801f5cc

08012d9c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b082      	sub	sp, #8
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012da6:	2200      	movs	r2, #0
 8012da8:	6839      	ldr	r1, [r7, #0]
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7ff ff8e 	bl	8012ccc <pbuf_add_header_impl>
 8012db0:	4603      	mov	r3, r0
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
	...

08012dbc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d106      	bne.n	8012dda <pbuf_remove_header+0x1e>
 8012dcc:	4b20      	ldr	r3, [pc, #128]	@ (8012e50 <pbuf_remove_header+0x94>)
 8012dce:	f240 224b 	movw	r2, #587	@ 0x24b
 8012dd2:	4920      	ldr	r1, [pc, #128]	@ (8012e54 <pbuf_remove_header+0x98>)
 8012dd4:	4820      	ldr	r0, [pc, #128]	@ (8012e58 <pbuf_remove_header+0x9c>)
 8012dd6:	f009 ffdf 	bl	801cd98 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d003      	beq.n	8012de8 <pbuf_remove_header+0x2c>
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012de6:	d301      	bcc.n	8012dec <pbuf_remove_header+0x30>
    return 1;
 8012de8:	2301      	movs	r3, #1
 8012dea:	e02c      	b.n	8012e46 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d101      	bne.n	8012df6 <pbuf_remove_header+0x3a>
    return 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	e027      	b.n	8012e46 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	895b      	ldrh	r3, [r3, #10]
 8012dfe:	89fa      	ldrh	r2, [r7, #14]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d908      	bls.n	8012e16 <pbuf_remove_header+0x5a>
 8012e04:	4b12      	ldr	r3, [pc, #72]	@ (8012e50 <pbuf_remove_header+0x94>)
 8012e06:	f240 2255 	movw	r2, #597	@ 0x255
 8012e0a:	4914      	ldr	r1, [pc, #80]	@ (8012e5c <pbuf_remove_header+0xa0>)
 8012e0c:	4812      	ldr	r0, [pc, #72]	@ (8012e58 <pbuf_remove_header+0x9c>)
 8012e0e:	f009 ffc3 	bl	801cd98 <iprintf>
 8012e12:	2301      	movs	r3, #1
 8012e14:	e017      	b.n	8012e46 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	685a      	ldr	r2, [r3, #4]
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	441a      	add	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	895a      	ldrh	r2, [r3, #10]
 8012e2c:	89fb      	ldrh	r3, [r7, #14]
 8012e2e:	1ad3      	subs	r3, r2, r3
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	891a      	ldrh	r2, [r3, #8]
 8012e3a:	89fb      	ldrh	r3, [r7, #14]
 8012e3c:	1ad3      	subs	r3, r2, r3
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012e44:	2300      	movs	r3, #0
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	0801f56c 	.word	0x0801f56c
 8012e54:	0801f6d0 	.word	0x0801f6d0
 8012e58:	0801f5cc 	.word	0x0801f5cc
 8012e5c:	0801f6dc 	.word	0x0801f6dc

08012e60 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	460b      	mov	r3, r1
 8012e6a:	807b      	strh	r3, [r7, #2]
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012e70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	da08      	bge.n	8012e8a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012e78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e7c:	425b      	negs	r3, r3
 8012e7e:	4619      	mov	r1, r3
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7ff ff9b 	bl	8012dbc <pbuf_remove_header>
 8012e86:	4603      	mov	r3, r0
 8012e88:	e007      	b.n	8012e9a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012e8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e8e:	787a      	ldrb	r2, [r7, #1]
 8012e90:	4619      	mov	r1, r3
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f7ff ff1a 	bl	8012ccc <pbuf_add_header_impl>
 8012e98:	4603      	mov	r3, r0
  }
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3708      	adds	r7, #8
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
 8012eaa:	460b      	mov	r3, r1
 8012eac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012eae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f7ff ffd2 	bl	8012e60 <pbuf_header_impl>
 8012ebc:	4603      	mov	r3, r0
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3708      	adds	r7, #8
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
	...

08012ec8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d10b      	bne.n	8012eee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d106      	bne.n	8012eea <pbuf_free+0x22>
 8012edc:	4b3b      	ldr	r3, [pc, #236]	@ (8012fcc <pbuf_free+0x104>)
 8012ede:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8012ee2:	493b      	ldr	r1, [pc, #236]	@ (8012fd0 <pbuf_free+0x108>)
 8012ee4:	483b      	ldr	r0, [pc, #236]	@ (8012fd4 <pbuf_free+0x10c>)
 8012ee6:	f009 ff57 	bl	801cd98 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012eea:	2300      	movs	r3, #0
 8012eec:	e069      	b.n	8012fc2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012ef2:	e062      	b.n	8012fba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012ef4:	f009 fe32 	bl	801cb5c <sys_arch_protect>
 8012ef8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	7b9b      	ldrb	r3, [r3, #14]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d106      	bne.n	8012f10 <pbuf_free+0x48>
 8012f02:	4b32      	ldr	r3, [pc, #200]	@ (8012fcc <pbuf_free+0x104>)
 8012f04:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8012f08:	4933      	ldr	r1, [pc, #204]	@ (8012fd8 <pbuf_free+0x110>)
 8012f0a:	4832      	ldr	r0, [pc, #200]	@ (8012fd4 <pbuf_free+0x10c>)
 8012f0c:	f009 ff44 	bl	801cd98 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	7b9b      	ldrb	r3, [r3, #14]
 8012f14:	3b01      	subs	r3, #1
 8012f16:	b2da      	uxtb	r2, r3
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	739a      	strb	r2, [r3, #14]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	7b9b      	ldrb	r3, [r3, #14]
 8012f20:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012f22:	69b8      	ldr	r0, [r7, #24]
 8012f24:	f009 fe28 	bl	801cb78 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012f28:	7dfb      	ldrb	r3, [r7, #23]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d143      	bne.n	8012fb6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	7b1b      	ldrb	r3, [r3, #12]
 8012f38:	f003 030f 	and.w	r3, r3, #15
 8012f3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	7b5b      	ldrb	r3, [r3, #13]
 8012f42:	f003 0302 	and.w	r3, r3, #2
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d011      	beq.n	8012f6e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	691b      	ldr	r3, [r3, #16]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d106      	bne.n	8012f64 <pbuf_free+0x9c>
 8012f56:	4b1d      	ldr	r3, [pc, #116]	@ (8012fcc <pbuf_free+0x104>)
 8012f58:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012f5c:	491f      	ldr	r1, [pc, #124]	@ (8012fdc <pbuf_free+0x114>)
 8012f5e:	481d      	ldr	r0, [pc, #116]	@ (8012fd4 <pbuf_free+0x10c>)
 8012f60:	f009 ff1a 	bl	801cd98 <iprintf>
        pc->custom_free_function(p);
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	691b      	ldr	r3, [r3, #16]
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	4798      	blx	r3
 8012f6c:	e01d      	b.n	8012faa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012f6e:	7bfb      	ldrb	r3, [r7, #15]
 8012f70:	2b02      	cmp	r3, #2
 8012f72:	d104      	bne.n	8012f7e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012f74:	6879      	ldr	r1, [r7, #4]
 8012f76:	200c      	movs	r0, #12
 8012f78:	f7ff f902 	bl	8012180 <memp_free>
 8012f7c:	e015      	b.n	8012faa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012f7e:	7bfb      	ldrb	r3, [r7, #15]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d104      	bne.n	8012f8e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012f84:	6879      	ldr	r1, [r7, #4]
 8012f86:	200b      	movs	r0, #11
 8012f88:	f7ff f8fa 	bl	8012180 <memp_free>
 8012f8c:	e00d      	b.n	8012faa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012f8e:	7bfb      	ldrb	r3, [r7, #15]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d103      	bne.n	8012f9c <pbuf_free+0xd4>
          mem_free(p);
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f7fe fd3f 	bl	8011a18 <mem_free>
 8012f9a:	e006      	b.n	8012faa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8012fcc <pbuf_free+0x104>)
 8012f9e:	f240 320f 	movw	r2, #783	@ 0x30f
 8012fa2:	490f      	ldr	r1, [pc, #60]	@ (8012fe0 <pbuf_free+0x118>)
 8012fa4:	480b      	ldr	r0, [pc, #44]	@ (8012fd4 <pbuf_free+0x10c>)
 8012fa6:	f009 fef7 	bl	801cd98 <iprintf>
        }
      }
      count++;
 8012faa:	7ffb      	ldrb	r3, [r7, #31]
 8012fac:	3301      	adds	r3, #1
 8012fae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	607b      	str	r3, [r7, #4]
 8012fb4:	e001      	b.n	8012fba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d199      	bne.n	8012ef4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3720      	adds	r7, #32
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	0801f56c 	.word	0x0801f56c
 8012fd0:	0801f6d0 	.word	0x0801f6d0
 8012fd4:	0801f5cc 	.word	0x0801f5cc
 8012fd8:	0801f6fc 	.word	0x0801f6fc
 8012fdc:	0801f714 	.word	0x0801f714
 8012fe0:	0801f738 	.word	0x0801f738

08012fe4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012ff0:	e005      	b.n	8012ffe <pbuf_clen+0x1a>
    ++len;
 8012ff2:	89fb      	ldrh	r3, [r7, #14]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d1f6      	bne.n	8012ff2 <pbuf_clen+0xe>
  }
  return len;
 8013004:	89fb      	ldrh	r3, [r7, #14]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3714      	adds	r7, #20
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr
	...

08013014 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d016      	beq.n	8013050 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013022:	f009 fd9b 	bl	801cb5c <sys_arch_protect>
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	7b9b      	ldrb	r3, [r3, #14]
 801302c:	3301      	adds	r3, #1
 801302e:	b2da      	uxtb	r2, r3
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	739a      	strb	r2, [r3, #14]
 8013034:	68f8      	ldr	r0, [r7, #12]
 8013036:	f009 fd9f 	bl	801cb78 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	7b9b      	ldrb	r3, [r3, #14]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d106      	bne.n	8013050 <pbuf_ref+0x3c>
 8013042:	4b05      	ldr	r3, [pc, #20]	@ (8013058 <pbuf_ref+0x44>)
 8013044:	f240 3242 	movw	r2, #834	@ 0x342
 8013048:	4904      	ldr	r1, [pc, #16]	@ (801305c <pbuf_ref+0x48>)
 801304a:	4805      	ldr	r0, [pc, #20]	@ (8013060 <pbuf_ref+0x4c>)
 801304c:	f009 fea4 	bl	801cd98 <iprintf>
  }
}
 8013050:	bf00      	nop
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	0801f56c 	.word	0x0801f56c
 801305c:	0801f74c 	.word	0x0801f74c
 8013060:	0801f5cc 	.word	0x0801f5cc

08013064 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d002      	beq.n	801307a <pbuf_cat+0x16>
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d107      	bne.n	801308a <pbuf_cat+0x26>
 801307a:	4b20      	ldr	r3, [pc, #128]	@ (80130fc <pbuf_cat+0x98>)
 801307c:	f240 3259 	movw	r2, #857	@ 0x359
 8013080:	491f      	ldr	r1, [pc, #124]	@ (8013100 <pbuf_cat+0x9c>)
 8013082:	4820      	ldr	r0, [pc, #128]	@ (8013104 <pbuf_cat+0xa0>)
 8013084:	f009 fe88 	bl	801cd98 <iprintf>
 8013088:	e034      	b.n	80130f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	60fb      	str	r3, [r7, #12]
 801308e:	e00a      	b.n	80130a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	891a      	ldrh	r2, [r3, #8]
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	891b      	ldrh	r3, [r3, #8]
 8013098:	4413      	add	r3, r2
 801309a:	b29a      	uxth	r2, r3
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	60fb      	str	r3, [r7, #12]
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1f0      	bne.n	8013090 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	891a      	ldrh	r2, [r3, #8]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	895b      	ldrh	r3, [r3, #10]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d006      	beq.n	80130c8 <pbuf_cat+0x64>
 80130ba:	4b10      	ldr	r3, [pc, #64]	@ (80130fc <pbuf_cat+0x98>)
 80130bc:	f240 3262 	movw	r2, #866	@ 0x362
 80130c0:	4911      	ldr	r1, [pc, #68]	@ (8013108 <pbuf_cat+0xa4>)
 80130c2:	4810      	ldr	r0, [pc, #64]	@ (8013104 <pbuf_cat+0xa0>)
 80130c4:	f009 fe68 	bl	801cd98 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d006      	beq.n	80130de <pbuf_cat+0x7a>
 80130d0:	4b0a      	ldr	r3, [pc, #40]	@ (80130fc <pbuf_cat+0x98>)
 80130d2:	f240 3263 	movw	r2, #867	@ 0x363
 80130d6:	490d      	ldr	r1, [pc, #52]	@ (801310c <pbuf_cat+0xa8>)
 80130d8:	480a      	ldr	r0, [pc, #40]	@ (8013104 <pbuf_cat+0xa0>)
 80130da:	f009 fe5d 	bl	801cd98 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	891a      	ldrh	r2, [r3, #8]
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	891b      	ldrh	r3, [r3, #8]
 80130e6:	4413      	add	r3, r2
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	683a      	ldr	r2, [r7, #0]
 80130f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	0801f56c 	.word	0x0801f56c
 8013100:	0801f760 	.word	0x0801f760
 8013104:	0801f5cc 	.word	0x0801f5cc
 8013108:	0801f798 	.word	0x0801f798
 801310c:	0801f7c8 	.word	0x0801f7c8

08013110 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801311a:	6839      	ldr	r1, [r7, #0]
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7ff ffa1 	bl	8013064 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013122:	6838      	ldr	r0, [r7, #0]
 8013124:	f7ff ff76 	bl	8013014 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013128:	bf00      	nop
 801312a:	3708      	adds	r7, #8
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801313a:	2300      	movs	r3, #0
 801313c:	617b      	str	r3, [r7, #20]
 801313e:	2300      	movs	r3, #0
 8013140:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d008      	beq.n	801315a <pbuf_copy+0x2a>
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d005      	beq.n	801315a <pbuf_copy+0x2a>
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	891a      	ldrh	r2, [r3, #8]
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	891b      	ldrh	r3, [r3, #8]
 8013156:	429a      	cmp	r2, r3
 8013158:	d209      	bcs.n	801316e <pbuf_copy+0x3e>
 801315a:	4b57      	ldr	r3, [pc, #348]	@ (80132b8 <pbuf_copy+0x188>)
 801315c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013160:	4956      	ldr	r1, [pc, #344]	@ (80132bc <pbuf_copy+0x18c>)
 8013162:	4857      	ldr	r0, [pc, #348]	@ (80132c0 <pbuf_copy+0x190>)
 8013164:	f009 fe18 	bl	801cd98 <iprintf>
 8013168:	f06f 030f 	mvn.w	r3, #15
 801316c:	e09f      	b.n	80132ae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	895b      	ldrh	r3, [r3, #10]
 8013172:	461a      	mov	r2, r3
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	1ad2      	subs	r2, r2, r3
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	895b      	ldrh	r3, [r3, #10]
 801317c:	4619      	mov	r1, r3
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	1acb      	subs	r3, r1, r3
 8013182:	429a      	cmp	r2, r3
 8013184:	d306      	bcc.n	8013194 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	895b      	ldrh	r3, [r3, #10]
 801318a:	461a      	mov	r2, r3
 801318c:	693b      	ldr	r3, [r7, #16]
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	60fb      	str	r3, [r7, #12]
 8013192:	e005      	b.n	80131a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	895b      	ldrh	r3, [r3, #10]
 8013198:	461a      	mov	r2, r3
 801319a:	697b      	ldr	r3, [r7, #20]
 801319c:	1ad3      	subs	r3, r2, r3
 801319e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	685a      	ldr	r2, [r3, #4]
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	18d0      	adds	r0, r2, r3
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	685a      	ldr	r2, [r3, #4]
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	4413      	add	r3, r2
 80131b0:	68fa      	ldr	r2, [r7, #12]
 80131b2:	4619      	mov	r1, r3
 80131b4:	f009 ff79 	bl	801d0aa <memcpy>
    offset_to += len;
 80131b8:	697a      	ldr	r2, [r7, #20]
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	4413      	add	r3, r2
 80131be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80131c0:	693a      	ldr	r2, [r7, #16]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	4413      	add	r3, r2
 80131c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	895b      	ldrh	r3, [r3, #10]
 80131cc:	461a      	mov	r2, r3
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d906      	bls.n	80131e2 <pbuf_copy+0xb2>
 80131d4:	4b38      	ldr	r3, [pc, #224]	@ (80132b8 <pbuf_copy+0x188>)
 80131d6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80131da:	493a      	ldr	r1, [pc, #232]	@ (80132c4 <pbuf_copy+0x194>)
 80131dc:	4838      	ldr	r0, [pc, #224]	@ (80132c0 <pbuf_copy+0x190>)
 80131de:	f009 fddb 	bl	801cd98 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	895b      	ldrh	r3, [r3, #10]
 80131e6:	461a      	mov	r2, r3
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d906      	bls.n	80131fc <pbuf_copy+0xcc>
 80131ee:	4b32      	ldr	r3, [pc, #200]	@ (80132b8 <pbuf_copy+0x188>)
 80131f0:	f240 32da 	movw	r2, #986	@ 0x3da
 80131f4:	4934      	ldr	r1, [pc, #208]	@ (80132c8 <pbuf_copy+0x198>)
 80131f6:	4832      	ldr	r0, [pc, #200]	@ (80132c0 <pbuf_copy+0x190>)
 80131f8:	f009 fdce 	bl	801cd98 <iprintf>
    if (offset_from >= p_from->len) {
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	895b      	ldrh	r3, [r3, #10]
 8013200:	461a      	mov	r2, r3
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	4293      	cmp	r3, r2
 8013206:	d304      	bcc.n	8013212 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013208:	2300      	movs	r3, #0
 801320a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	895b      	ldrh	r3, [r3, #10]
 8013216:	461a      	mov	r2, r3
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	4293      	cmp	r3, r2
 801321c:	d114      	bne.n	8013248 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801321e:	2300      	movs	r3, #0
 8013220:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d10c      	bne.n	8013248 <pbuf_copy+0x118>
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d009      	beq.n	8013248 <pbuf_copy+0x118>
 8013234:	4b20      	ldr	r3, [pc, #128]	@ (80132b8 <pbuf_copy+0x188>)
 8013236:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801323a:	4924      	ldr	r1, [pc, #144]	@ (80132cc <pbuf_copy+0x19c>)
 801323c:	4820      	ldr	r0, [pc, #128]	@ (80132c0 <pbuf_copy+0x190>)
 801323e:	f009 fdab 	bl	801cd98 <iprintf>
 8013242:	f06f 030f 	mvn.w	r3, #15
 8013246:	e032      	b.n	80132ae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d013      	beq.n	8013276 <pbuf_copy+0x146>
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	895a      	ldrh	r2, [r3, #10]
 8013252:	683b      	ldr	r3, [r7, #0]
 8013254:	891b      	ldrh	r3, [r3, #8]
 8013256:	429a      	cmp	r2, r3
 8013258:	d10d      	bne.n	8013276 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d009      	beq.n	8013276 <pbuf_copy+0x146>
 8013262:	4b15      	ldr	r3, [pc, #84]	@ (80132b8 <pbuf_copy+0x188>)
 8013264:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8013268:	4919      	ldr	r1, [pc, #100]	@ (80132d0 <pbuf_copy+0x1a0>)
 801326a:	4815      	ldr	r0, [pc, #84]	@ (80132c0 <pbuf_copy+0x190>)
 801326c:	f009 fd94 	bl	801cd98 <iprintf>
 8013270:	f06f 0305 	mvn.w	r3, #5
 8013274:	e01b      	b.n	80132ae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d013      	beq.n	80132a4 <pbuf_copy+0x174>
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	895a      	ldrh	r2, [r3, #10]
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	891b      	ldrh	r3, [r3, #8]
 8013284:	429a      	cmp	r2, r3
 8013286:	d10d      	bne.n	80132a4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d009      	beq.n	80132a4 <pbuf_copy+0x174>
 8013290:	4b09      	ldr	r3, [pc, #36]	@ (80132b8 <pbuf_copy+0x188>)
 8013292:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8013296:	490e      	ldr	r1, [pc, #56]	@ (80132d0 <pbuf_copy+0x1a0>)
 8013298:	4809      	ldr	r0, [pc, #36]	@ (80132c0 <pbuf_copy+0x190>)
 801329a:	f009 fd7d 	bl	801cd98 <iprintf>
 801329e:	f06f 0305 	mvn.w	r3, #5
 80132a2:	e004      	b.n	80132ae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	f47f af61 	bne.w	801316e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3718      	adds	r7, #24
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	0801f56c 	.word	0x0801f56c
 80132bc:	0801f814 	.word	0x0801f814
 80132c0:	0801f5cc 	.word	0x0801f5cc
 80132c4:	0801f844 	.word	0x0801f844
 80132c8:	0801f85c 	.word	0x0801f85c
 80132cc:	0801f878 	.word	0x0801f878
 80132d0:	0801f888 	.word	0x0801f888

080132d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b088      	sub	sp, #32
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	4611      	mov	r1, r2
 80132e0:	461a      	mov	r2, r3
 80132e2:	460b      	mov	r3, r1
 80132e4:	80fb      	strh	r3, [r7, #6]
 80132e6:	4613      	mov	r3, r2
 80132e8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80132ea:	2300      	movs	r3, #0
 80132ec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80132ee:	2300      	movs	r3, #0
 80132f0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d108      	bne.n	801330a <pbuf_copy_partial+0x36>
 80132f8:	4b2b      	ldr	r3, [pc, #172]	@ (80133a8 <pbuf_copy_partial+0xd4>)
 80132fa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80132fe:	492b      	ldr	r1, [pc, #172]	@ (80133ac <pbuf_copy_partial+0xd8>)
 8013300:	482b      	ldr	r0, [pc, #172]	@ (80133b0 <pbuf_copy_partial+0xdc>)
 8013302:	f009 fd49 	bl	801cd98 <iprintf>
 8013306:	2300      	movs	r3, #0
 8013308:	e04a      	b.n	80133a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d108      	bne.n	8013322 <pbuf_copy_partial+0x4e>
 8013310:	4b25      	ldr	r3, [pc, #148]	@ (80133a8 <pbuf_copy_partial+0xd4>)
 8013312:	f240 420b 	movw	r2, #1035	@ 0x40b
 8013316:	4927      	ldr	r1, [pc, #156]	@ (80133b4 <pbuf_copy_partial+0xe0>)
 8013318:	4825      	ldr	r0, [pc, #148]	@ (80133b0 <pbuf_copy_partial+0xdc>)
 801331a:	f009 fd3d 	bl	801cd98 <iprintf>
 801331e:	2300      	movs	r3, #0
 8013320:	e03e      	b.n	80133a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	61fb      	str	r3, [r7, #28]
 8013326:	e034      	b.n	8013392 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013328:	88bb      	ldrh	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00a      	beq.n	8013344 <pbuf_copy_partial+0x70>
 801332e:	69fb      	ldr	r3, [r7, #28]
 8013330:	895b      	ldrh	r3, [r3, #10]
 8013332:	88ba      	ldrh	r2, [r7, #4]
 8013334:	429a      	cmp	r2, r3
 8013336:	d305      	bcc.n	8013344 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013338:	69fb      	ldr	r3, [r7, #28]
 801333a:	895b      	ldrh	r3, [r3, #10]
 801333c:	88ba      	ldrh	r2, [r7, #4]
 801333e:	1ad3      	subs	r3, r2, r3
 8013340:	80bb      	strh	r3, [r7, #4]
 8013342:	e023      	b.n	801338c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	895a      	ldrh	r2, [r3, #10]
 8013348:	88bb      	ldrh	r3, [r7, #4]
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801334e:	8b3a      	ldrh	r2, [r7, #24]
 8013350:	88fb      	ldrh	r3, [r7, #6]
 8013352:	429a      	cmp	r2, r3
 8013354:	d901      	bls.n	801335a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013356:	88fb      	ldrh	r3, [r7, #6]
 8013358:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801335a:	8b7b      	ldrh	r3, [r7, #26]
 801335c:	68ba      	ldr	r2, [r7, #8]
 801335e:	18d0      	adds	r0, r2, r3
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	88bb      	ldrh	r3, [r7, #4]
 8013366:	4413      	add	r3, r2
 8013368:	8b3a      	ldrh	r2, [r7, #24]
 801336a:	4619      	mov	r1, r3
 801336c:	f009 fe9d 	bl	801d0aa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013370:	8afa      	ldrh	r2, [r7, #22]
 8013372:	8b3b      	ldrh	r3, [r7, #24]
 8013374:	4413      	add	r3, r2
 8013376:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013378:	8b7a      	ldrh	r2, [r7, #26]
 801337a:	8b3b      	ldrh	r3, [r7, #24]
 801337c:	4413      	add	r3, r2
 801337e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013380:	88fa      	ldrh	r2, [r7, #6]
 8013382:	8b3b      	ldrh	r3, [r7, #24]
 8013384:	1ad3      	subs	r3, r2, r3
 8013386:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013388:	2300      	movs	r3, #0
 801338a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	61fb      	str	r3, [r7, #28]
 8013392:	88fb      	ldrh	r3, [r7, #6]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d002      	beq.n	801339e <pbuf_copy_partial+0xca>
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1c4      	bne.n	8013328 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801339e:	8afb      	ldrh	r3, [r7, #22]
}
 80133a0:	4618      	mov	r0, r3
 80133a2:	3720      	adds	r7, #32
 80133a4:	46bd      	mov	sp, r7
 80133a6:	bd80      	pop	{r7, pc}
 80133a8:	0801f56c 	.word	0x0801f56c
 80133ac:	0801f8b4 	.word	0x0801f8b4
 80133b0:	0801f5cc 	.word	0x0801f5cc
 80133b4:	0801f8d4 	.word	0x0801f8d4

080133b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	4603      	mov	r3, r0
 80133c0:	603a      	str	r2, [r7, #0]
 80133c2:	71fb      	strb	r3, [r7, #7]
 80133c4:	460b      	mov	r3, r1
 80133c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	8919      	ldrh	r1, [r3, #8]
 80133cc:	88ba      	ldrh	r2, [r7, #4]
 80133ce:	79fb      	ldrb	r3, [r7, #7]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7ff fa95 	bl	8012900 <pbuf_alloc>
 80133d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d101      	bne.n	80133e2 <pbuf_clone+0x2a>
    return NULL;
 80133de:	2300      	movs	r3, #0
 80133e0:	e011      	b.n	8013406 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80133e2:	6839      	ldr	r1, [r7, #0]
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ff fea3 	bl	8013130 <pbuf_copy>
 80133ea:	4603      	mov	r3, r0
 80133ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80133ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d006      	beq.n	8013404 <pbuf_clone+0x4c>
 80133f6:	4b06      	ldr	r3, [pc, #24]	@ (8013410 <pbuf_clone+0x58>)
 80133f8:	f240 5224 	movw	r2, #1316	@ 0x524
 80133fc:	4905      	ldr	r1, [pc, #20]	@ (8013414 <pbuf_clone+0x5c>)
 80133fe:	4806      	ldr	r0, [pc, #24]	@ (8013418 <pbuf_clone+0x60>)
 8013400:	f009 fcca 	bl	801cd98 <iprintf>
  return q;
 8013404:	68fb      	ldr	r3, [r7, #12]
}
 8013406:	4618      	mov	r0, r3
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	0801f56c 	.word	0x0801f56c
 8013414:	0801f9e0 	.word	0x0801f9e0
 8013418:	0801f5cc 	.word	0x0801f5cc

0801341c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013420:	f009 fbba 	bl	801cb98 <rand>
 8013424:	4603      	mov	r3, r0
 8013426:	b29b      	uxth	r3, r3
 8013428:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801342c:	b29b      	uxth	r3, r3
 801342e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013432:	b29a      	uxth	r2, r3
 8013434:	4b01      	ldr	r3, [pc, #4]	@ (801343c <tcp_init+0x20>)
 8013436:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013438:	bf00      	nop
 801343a:	bd80      	pop	{r7, pc}
 801343c:	20000078 	.word	0x20000078

08013440 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b082      	sub	sp, #8
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b01      	cmp	r3, #1
 801344e:	d105      	bne.n	801345c <tcp_free+0x1c>
 8013450:	4b06      	ldr	r3, [pc, #24]	@ (801346c <tcp_free+0x2c>)
 8013452:	22d4      	movs	r2, #212	@ 0xd4
 8013454:	4906      	ldr	r1, [pc, #24]	@ (8013470 <tcp_free+0x30>)
 8013456:	4807      	ldr	r0, [pc, #28]	@ (8013474 <tcp_free+0x34>)
 8013458:	f009 fc9e 	bl	801cd98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801345c:	6879      	ldr	r1, [r7, #4]
 801345e:	2001      	movs	r0, #1
 8013460:	f7fe fe8e 	bl	8012180 <memp_free>
}
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	0801fa6c 	.word	0x0801fa6c
 8013470:	0801fa9c 	.word	0x0801fa9c
 8013474:	0801fab0 	.word	0x0801fab0

08013478 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	7d1b      	ldrb	r3, [r3, #20]
 8013484:	2b01      	cmp	r3, #1
 8013486:	d105      	bne.n	8013494 <tcp_free_listen+0x1c>
 8013488:	4b06      	ldr	r3, [pc, #24]	@ (80134a4 <tcp_free_listen+0x2c>)
 801348a:	22df      	movs	r2, #223	@ 0xdf
 801348c:	4906      	ldr	r1, [pc, #24]	@ (80134a8 <tcp_free_listen+0x30>)
 801348e:	4807      	ldr	r0, [pc, #28]	@ (80134ac <tcp_free_listen+0x34>)
 8013490:	f009 fc82 	bl	801cd98 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013494:	6879      	ldr	r1, [r7, #4]
 8013496:	2002      	movs	r0, #2
 8013498:	f7fe fe72 	bl	8012180 <memp_free>
}
 801349c:	bf00      	nop
 801349e:	3708      	adds	r7, #8
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	0801fa6c 	.word	0x0801fa6c
 80134a8:	0801fad8 	.word	0x0801fad8
 80134ac:	0801fab0 	.word	0x0801fab0

080134b0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80134b4:	f001 f8ba 	bl	801462c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80134b8:	4b07      	ldr	r3, [pc, #28]	@ (80134d8 <tcp_tmr+0x28>)
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	3301      	adds	r3, #1
 80134be:	b2da      	uxtb	r2, r3
 80134c0:	4b05      	ldr	r3, [pc, #20]	@ (80134d8 <tcp_tmr+0x28>)
 80134c2:	701a      	strb	r2, [r3, #0]
 80134c4:	4b04      	ldr	r3, [pc, #16]	@ (80134d8 <tcp_tmr+0x28>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	f003 0301 	and.w	r3, r3, #1
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d001      	beq.n	80134d4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80134d0:	f000 fd6a 	bl	8013fa8 <tcp_slowtmr>
  }
}
 80134d4:	bf00      	nop
 80134d6:	bd80      	pop	{r7, pc}
 80134d8:	2000f285 	.word	0x2000f285

080134dc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b084      	sub	sp, #16
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d105      	bne.n	80134f8 <tcp_remove_listener+0x1c>
 80134ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013524 <tcp_remove_listener+0x48>)
 80134ee:	22ff      	movs	r2, #255	@ 0xff
 80134f0:	490d      	ldr	r1, [pc, #52]	@ (8013528 <tcp_remove_listener+0x4c>)
 80134f2:	480e      	ldr	r0, [pc, #56]	@ (801352c <tcp_remove_listener+0x50>)
 80134f4:	f009 fc50 	bl	801cd98 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	60fb      	str	r3, [r7, #12]
 80134fc:	e00a      	b.n	8013514 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013502:	683a      	ldr	r2, [r7, #0]
 8013504:	429a      	cmp	r2, r3
 8013506:	d102      	bne.n	801350e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2200      	movs	r2, #0
 801350c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	68db      	ldr	r3, [r3, #12]
 8013512:	60fb      	str	r3, [r7, #12]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d1f1      	bne.n	80134fe <tcp_remove_listener+0x22>
    }
  }
}
 801351a:	bf00      	nop
 801351c:	bf00      	nop
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801fa6c 	.word	0x0801fa6c
 8013528:	0801faf4 	.word	0x0801faf4
 801352c:	0801fab0 	.word	0x0801fab0

08013530 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b084      	sub	sp, #16
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d106      	bne.n	801354c <tcp_listen_closed+0x1c>
 801353e:	4b14      	ldr	r3, [pc, #80]	@ (8013590 <tcp_listen_closed+0x60>)
 8013540:	f240 1211 	movw	r2, #273	@ 0x111
 8013544:	4913      	ldr	r1, [pc, #76]	@ (8013594 <tcp_listen_closed+0x64>)
 8013546:	4814      	ldr	r0, [pc, #80]	@ (8013598 <tcp_listen_closed+0x68>)
 8013548:	f009 fc26 	bl	801cd98 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	7d1b      	ldrb	r3, [r3, #20]
 8013550:	2b01      	cmp	r3, #1
 8013552:	d006      	beq.n	8013562 <tcp_listen_closed+0x32>
 8013554:	4b0e      	ldr	r3, [pc, #56]	@ (8013590 <tcp_listen_closed+0x60>)
 8013556:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801355a:	4910      	ldr	r1, [pc, #64]	@ (801359c <tcp_listen_closed+0x6c>)
 801355c:	480e      	ldr	r0, [pc, #56]	@ (8013598 <tcp_listen_closed+0x68>)
 801355e:	f009 fc1b 	bl	801cd98 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013562:	2301      	movs	r3, #1
 8013564:	60fb      	str	r3, [r7, #12]
 8013566:	e00b      	b.n	8013580 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013568:	4a0d      	ldr	r2, [pc, #52]	@ (80135a0 <tcp_listen_closed+0x70>)
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	4618      	mov	r0, r3
 8013576:	f7ff ffb1 	bl	80134dc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	3301      	adds	r3, #1
 801357e:	60fb      	str	r3, [r7, #12]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2b03      	cmp	r3, #3
 8013584:	d9f0      	bls.n	8013568 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013586:	bf00      	nop
 8013588:	bf00      	nop
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	0801fa6c 	.word	0x0801fa6c
 8013594:	0801fb1c 	.word	0x0801fb1c
 8013598:	0801fab0 	.word	0x0801fab0
 801359c:	0801fb28 	.word	0x0801fb28
 80135a0:	08022750 	.word	0x08022750

080135a4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80135a4:	b5b0      	push	{r4, r5, r7, lr}
 80135a6:	b088      	sub	sp, #32
 80135a8:	af04      	add	r7, sp, #16
 80135aa:	6078      	str	r0, [r7, #4]
 80135ac:	460b      	mov	r3, r1
 80135ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d106      	bne.n	80135c4 <tcp_close_shutdown+0x20>
 80135b6:	4b63      	ldr	r3, [pc, #396]	@ (8013744 <tcp_close_shutdown+0x1a0>)
 80135b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80135bc:	4962      	ldr	r1, [pc, #392]	@ (8013748 <tcp_close_shutdown+0x1a4>)
 80135be:	4863      	ldr	r0, [pc, #396]	@ (801374c <tcp_close_shutdown+0x1a8>)
 80135c0:	f009 fbea 	bl	801cd98 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80135c4:	78fb      	ldrb	r3, [r7, #3]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d066      	beq.n	8013698 <tcp_close_shutdown+0xf4>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	7d1b      	ldrb	r3, [r3, #20]
 80135ce:	2b04      	cmp	r3, #4
 80135d0:	d003      	beq.n	80135da <tcp_close_shutdown+0x36>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	7d1b      	ldrb	r3, [r3, #20]
 80135d6:	2b07      	cmp	r3, #7
 80135d8:	d15e      	bne.n	8013698 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d104      	bne.n	80135ec <tcp_close_shutdown+0x48>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80135e6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80135ea:	d055      	beq.n	8013698 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	8b5b      	ldrh	r3, [r3, #26]
 80135f0:	f003 0310 	and.w	r3, r3, #16
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d106      	bne.n	8013606 <tcp_close_shutdown+0x62>
 80135f8:	4b52      	ldr	r3, [pc, #328]	@ (8013744 <tcp_close_shutdown+0x1a0>)
 80135fa:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80135fe:	4954      	ldr	r1, [pc, #336]	@ (8013750 <tcp_close_shutdown+0x1ac>)
 8013600:	4852      	ldr	r0, [pc, #328]	@ (801374c <tcp_close_shutdown+0x1a8>)
 8013602:	f009 fbc9 	bl	801cd98 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801360e:	687d      	ldr	r5, [r7, #4]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	3304      	adds	r3, #4
 8013614:	687a      	ldr	r2, [r7, #4]
 8013616:	8ad2      	ldrh	r2, [r2, #22]
 8013618:	6879      	ldr	r1, [r7, #4]
 801361a:	8b09      	ldrh	r1, [r1, #24]
 801361c:	9102      	str	r1, [sp, #8]
 801361e:	9201      	str	r2, [sp, #4]
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	462b      	mov	r3, r5
 8013624:	4622      	mov	r2, r4
 8013626:	4601      	mov	r1, r0
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f005 fde7 	bl	80191fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f001 fbca 	bl	8014dc8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013634:	4b47      	ldr	r3, [pc, #284]	@ (8013754 <tcp_close_shutdown+0x1b0>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	429a      	cmp	r2, r3
 801363c:	d105      	bne.n	801364a <tcp_close_shutdown+0xa6>
 801363e:	4b45      	ldr	r3, [pc, #276]	@ (8013754 <tcp_close_shutdown+0x1b0>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	4a43      	ldr	r2, [pc, #268]	@ (8013754 <tcp_close_shutdown+0x1b0>)
 8013646:	6013      	str	r3, [r2, #0]
 8013648:	e013      	b.n	8013672 <tcp_close_shutdown+0xce>
 801364a:	4b42      	ldr	r3, [pc, #264]	@ (8013754 <tcp_close_shutdown+0x1b0>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	60fb      	str	r3, [r7, #12]
 8013650:	e00c      	b.n	801366c <tcp_close_shutdown+0xc8>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	68db      	ldr	r3, [r3, #12]
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	429a      	cmp	r2, r3
 801365a:	d104      	bne.n	8013666 <tcp_close_shutdown+0xc2>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	68da      	ldr	r2, [r3, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	60da      	str	r2, [r3, #12]
 8013664:	e005      	b.n	8013672 <tcp_close_shutdown+0xce>
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	60fb      	str	r3, [r7, #12]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1ef      	bne.n	8013652 <tcp_close_shutdown+0xae>
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	60da      	str	r2, [r3, #12]
 8013678:	4b37      	ldr	r3, [pc, #220]	@ (8013758 <tcp_close_shutdown+0x1b4>)
 801367a:	2201      	movs	r2, #1
 801367c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801367e:	4b37      	ldr	r3, [pc, #220]	@ (801375c <tcp_close_shutdown+0x1b8>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	429a      	cmp	r2, r3
 8013686:	d102      	bne.n	801368e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013688:	f004 f85e 	bl	8017748 <tcp_trigger_input_pcb_close>
 801368c:	e002      	b.n	8013694 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7ff fed6 	bl	8013440 <tcp_free>
      }
      return ERR_OK;
 8013694:	2300      	movs	r3, #0
 8013696:	e050      	b.n	801373a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	7d1b      	ldrb	r3, [r3, #20]
 801369c:	2b02      	cmp	r3, #2
 801369e:	d03b      	beq.n	8013718 <tcp_close_shutdown+0x174>
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	dc44      	bgt.n	801372e <tcp_close_shutdown+0x18a>
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <tcp_close_shutdown+0x10a>
 80136a8:	2b01      	cmp	r3, #1
 80136aa:	d02a      	beq.n	8013702 <tcp_close_shutdown+0x15e>
 80136ac:	e03f      	b.n	801372e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	8adb      	ldrh	r3, [r3, #22]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d021      	beq.n	80136fa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80136b6:	4b2a      	ldr	r3, [pc, #168]	@ (8013760 <tcp_close_shutdown+0x1bc>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	687a      	ldr	r2, [r7, #4]
 80136bc:	429a      	cmp	r2, r3
 80136be:	d105      	bne.n	80136cc <tcp_close_shutdown+0x128>
 80136c0:	4b27      	ldr	r3, [pc, #156]	@ (8013760 <tcp_close_shutdown+0x1bc>)
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	4a26      	ldr	r2, [pc, #152]	@ (8013760 <tcp_close_shutdown+0x1bc>)
 80136c8:	6013      	str	r3, [r2, #0]
 80136ca:	e013      	b.n	80136f4 <tcp_close_shutdown+0x150>
 80136cc:	4b24      	ldr	r3, [pc, #144]	@ (8013760 <tcp_close_shutdown+0x1bc>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	60bb      	str	r3, [r7, #8]
 80136d2:	e00c      	b.n	80136ee <tcp_close_shutdown+0x14a>
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	68db      	ldr	r3, [r3, #12]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d104      	bne.n	80136e8 <tcp_close_shutdown+0x144>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	68da      	ldr	r2, [r3, #12]
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	60da      	str	r2, [r3, #12]
 80136e6:	e005      	b.n	80136f4 <tcp_close_shutdown+0x150>
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	60bb      	str	r3, [r7, #8]
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d1ef      	bne.n	80136d4 <tcp_close_shutdown+0x130>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2200      	movs	r2, #0
 80136f8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80136fa:	6878      	ldr	r0, [r7, #4]
 80136fc:	f7ff fea0 	bl	8013440 <tcp_free>
      break;
 8013700:	e01a      	b.n	8013738 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f7ff ff14 	bl	8013530 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013708:	6879      	ldr	r1, [r7, #4]
 801370a:	4816      	ldr	r0, [pc, #88]	@ (8013764 <tcp_close_shutdown+0x1c0>)
 801370c:	f001 fbac 	bl	8014e68 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f7ff feb1 	bl	8013478 <tcp_free_listen>
      break;
 8013716:	e00f      	b.n	8013738 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	480e      	ldr	r0, [pc, #56]	@ (8013754 <tcp_close_shutdown+0x1b0>)
 801371c:	f001 fba4 	bl	8014e68 <tcp_pcb_remove>
 8013720:	4b0d      	ldr	r3, [pc, #52]	@ (8013758 <tcp_close_shutdown+0x1b4>)
 8013722:	2201      	movs	r2, #1
 8013724:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff fe8a 	bl	8013440 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801372c:	e004      	b.n	8013738 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 f81a 	bl	8013768 <tcp_close_shutdown_fin>
 8013734:	4603      	mov	r3, r0
 8013736:	e000      	b.n	801373a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	3710      	adds	r7, #16
 801373e:	46bd      	mov	sp, r7
 8013740:	bdb0      	pop	{r4, r5, r7, pc}
 8013742:	bf00      	nop
 8013744:	0801fa6c 	.word	0x0801fa6c
 8013748:	0801fb40 	.word	0x0801fb40
 801374c:	0801fab0 	.word	0x0801fab0
 8013750:	0801fb60 	.word	0x0801fb60
 8013754:	2000f27c 	.word	0x2000f27c
 8013758:	2000f284 	.word	0x2000f284
 801375c:	2000f2bc 	.word	0x2000f2bc
 8013760:	2000f274 	.word	0x2000f274
 8013764:	2000f278 	.word	0x2000f278

08013768 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d106      	bne.n	8013784 <tcp_close_shutdown_fin+0x1c>
 8013776:	4b2e      	ldr	r3, [pc, #184]	@ (8013830 <tcp_close_shutdown_fin+0xc8>)
 8013778:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801377c:	492d      	ldr	r1, [pc, #180]	@ (8013834 <tcp_close_shutdown_fin+0xcc>)
 801377e:	482e      	ldr	r0, [pc, #184]	@ (8013838 <tcp_close_shutdown_fin+0xd0>)
 8013780:	f009 fb0a 	bl	801cd98 <iprintf>

  switch (pcb->state) {
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	7d1b      	ldrb	r3, [r3, #20]
 8013788:	2b07      	cmp	r3, #7
 801378a:	d020      	beq.n	80137ce <tcp_close_shutdown_fin+0x66>
 801378c:	2b07      	cmp	r3, #7
 801378e:	dc2b      	bgt.n	80137e8 <tcp_close_shutdown_fin+0x80>
 8013790:	2b03      	cmp	r3, #3
 8013792:	d002      	beq.n	801379a <tcp_close_shutdown_fin+0x32>
 8013794:	2b04      	cmp	r3, #4
 8013796:	d00d      	beq.n	80137b4 <tcp_close_shutdown_fin+0x4c>
 8013798:	e026      	b.n	80137e8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f004 fe3c 	bl	8018418 <tcp_send_fin>
 80137a0:	4603      	mov	r3, r0
 80137a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80137a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d11f      	bne.n	80137ec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	2205      	movs	r2, #5
 80137b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137b2:	e01b      	b.n	80137ec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f004 fe2f 	bl	8018418 <tcp_send_fin>
 80137ba:	4603      	mov	r3, r0
 80137bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80137be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d114      	bne.n	80137f0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	2205      	movs	r2, #5
 80137ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137cc:	e010      	b.n	80137f0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f004 fe22 	bl	8018418 <tcp_send_fin>
 80137d4:	4603      	mov	r3, r0
 80137d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80137d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d109      	bne.n	80137f4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2209      	movs	r2, #9
 80137e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137e6:	e005      	b.n	80137f4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80137e8:	2300      	movs	r3, #0
 80137ea:	e01c      	b.n	8013826 <tcp_close_shutdown_fin+0xbe>
      break;
 80137ec:	bf00      	nop
 80137ee:	e002      	b.n	80137f6 <tcp_close_shutdown_fin+0x8e>
      break;
 80137f0:	bf00      	nop
 80137f2:	e000      	b.n	80137f6 <tcp_close_shutdown_fin+0x8e>
      break;
 80137f4:	bf00      	nop
  }

  if (err == ERR_OK) {
 80137f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d103      	bne.n	8013806 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f004 ff48 	bl	8018694 <tcp_output>
 8013804:	e00d      	b.n	8013822 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801380e:	d108      	bne.n	8013822 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	8b5b      	ldrh	r3, [r3, #26]
 8013814:	f043 0308 	orr.w	r3, r3, #8
 8013818:	b29a      	uxth	r2, r3
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801381e:	2300      	movs	r3, #0
 8013820:	e001      	b.n	8013826 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013826:	4618      	mov	r0, r3
 8013828:	3710      	adds	r7, #16
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	0801fa6c 	.word	0x0801fa6c
 8013834:	0801fb1c 	.word	0x0801fb1c
 8013838:	0801fab0 	.word	0x0801fab0

0801383c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d109      	bne.n	801385e <tcp_close+0x22>
 801384a:	4b0f      	ldr	r3, [pc, #60]	@ (8013888 <tcp_close+0x4c>)
 801384c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013850:	490e      	ldr	r1, [pc, #56]	@ (801388c <tcp_close+0x50>)
 8013852:	480f      	ldr	r0, [pc, #60]	@ (8013890 <tcp_close+0x54>)
 8013854:	f009 faa0 	bl	801cd98 <iprintf>
 8013858:	f06f 030f 	mvn.w	r3, #15
 801385c:	e00f      	b.n	801387e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	7d1b      	ldrb	r3, [r3, #20]
 8013862:	2b01      	cmp	r3, #1
 8013864:	d006      	beq.n	8013874 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8b5b      	ldrh	r3, [r3, #26]
 801386a:	f043 0310 	orr.w	r3, r3, #16
 801386e:	b29a      	uxth	r2, r3
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013874:	2101      	movs	r1, #1
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f7ff fe94 	bl	80135a4 <tcp_close_shutdown>
 801387c:	4603      	mov	r3, r0
}
 801387e:	4618      	mov	r0, r3
 8013880:	3708      	adds	r7, #8
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	0801fa6c 	.word	0x0801fa6c
 801388c:	0801fb7c 	.word	0x0801fb7c
 8013890:	0801fab0 	.word	0x0801fab0

08013894 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d109      	bne.n	80138ba <tcp_shutdown+0x26>
 80138a6:	4b26      	ldr	r3, [pc, #152]	@ (8013940 <tcp_shutdown+0xac>)
 80138a8:	f240 2207 	movw	r2, #519	@ 0x207
 80138ac:	4925      	ldr	r1, [pc, #148]	@ (8013944 <tcp_shutdown+0xb0>)
 80138ae:	4826      	ldr	r0, [pc, #152]	@ (8013948 <tcp_shutdown+0xb4>)
 80138b0:	f009 fa72 	bl	801cd98 <iprintf>
 80138b4:	f06f 030f 	mvn.w	r3, #15
 80138b8:	e03d      	b.n	8013936 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	7d1b      	ldrb	r3, [r3, #20]
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d102      	bne.n	80138c8 <tcp_shutdown+0x34>
    return ERR_CONN;
 80138c2:	f06f 030a 	mvn.w	r3, #10
 80138c6:	e036      	b.n	8013936 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d01b      	beq.n	8013906 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	8b5b      	ldrh	r3, [r3, #26]
 80138d2:	f043 0310 	orr.w	r3, r3, #16
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d005      	beq.n	80138ee <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80138e2:	2101      	movs	r1, #1
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f7ff fe5d 	bl	80135a4 <tcp_close_shutdown>
 80138ea:	4603      	mov	r3, r0
 80138ec:	e023      	b.n	8013936 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d007      	beq.n	8013906 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7ff fae4 	bl	8012ec8 <pbuf_free>
      pcb->refused_data = NULL;
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	2200      	movs	r2, #0
 8013904:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d013      	beq.n	8013934 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	7d1b      	ldrb	r3, [r3, #20]
 8013910:	2b04      	cmp	r3, #4
 8013912:	dc02      	bgt.n	801391a <tcp_shutdown+0x86>
 8013914:	2b03      	cmp	r3, #3
 8013916:	da02      	bge.n	801391e <tcp_shutdown+0x8a>
 8013918:	e009      	b.n	801392e <tcp_shutdown+0x9a>
 801391a:	2b07      	cmp	r3, #7
 801391c:	d107      	bne.n	801392e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	b2db      	uxtb	r3, r3
 8013922:	4619      	mov	r1, r3
 8013924:	68f8      	ldr	r0, [r7, #12]
 8013926:	f7ff fe3d 	bl	80135a4 <tcp_close_shutdown>
 801392a:	4603      	mov	r3, r0
 801392c:	e003      	b.n	8013936 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801392e:	f06f 030a 	mvn.w	r3, #10
 8013932:	e000      	b.n	8013936 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013934:	2300      	movs	r3, #0
}
 8013936:	4618      	mov	r0, r3
 8013938:	3710      	adds	r7, #16
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	0801fa6c 	.word	0x0801fa6c
 8013944:	0801fb94 	.word	0x0801fb94
 8013948:	0801fab0 	.word	0x0801fab0

0801394c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b08e      	sub	sp, #56	@ 0x38
 8013950:	af04      	add	r7, sp, #16
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d107      	bne.n	801396c <tcp_abandon+0x20>
 801395c:	4b52      	ldr	r3, [pc, #328]	@ (8013aa8 <tcp_abandon+0x15c>)
 801395e:	f240 223d 	movw	r2, #573	@ 0x23d
 8013962:	4952      	ldr	r1, [pc, #328]	@ (8013aac <tcp_abandon+0x160>)
 8013964:	4852      	ldr	r0, [pc, #328]	@ (8013ab0 <tcp_abandon+0x164>)
 8013966:	f009 fa17 	bl	801cd98 <iprintf>
 801396a:	e099      	b.n	8013aa0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	7d1b      	ldrb	r3, [r3, #20]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d106      	bne.n	8013982 <tcp_abandon+0x36>
 8013974:	4b4c      	ldr	r3, [pc, #304]	@ (8013aa8 <tcp_abandon+0x15c>)
 8013976:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801397a:	494e      	ldr	r1, [pc, #312]	@ (8013ab4 <tcp_abandon+0x168>)
 801397c:	484c      	ldr	r0, [pc, #304]	@ (8013ab0 <tcp_abandon+0x164>)
 801397e:	f009 fa0b 	bl	801cd98 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	7d1b      	ldrb	r3, [r3, #20]
 8013986:	2b0a      	cmp	r3, #10
 8013988:	d107      	bne.n	801399a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801398a:	6879      	ldr	r1, [r7, #4]
 801398c:	484a      	ldr	r0, [pc, #296]	@ (8013ab8 <tcp_abandon+0x16c>)
 801398e:	f001 fa6b 	bl	8014e68 <tcp_pcb_remove>
    tcp_free(pcb);
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff fd54 	bl	8013440 <tcp_free>
 8013998:	e082      	b.n	8013aa0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801399a:	2300      	movs	r3, #0
 801399c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801399e:	2300      	movs	r3, #0
 80139a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80139b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	691b      	ldr	r3, [r3, #16]
 80139ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	7d1b      	ldrb	r3, [r3, #20]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d126      	bne.n	8013a12 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	8adb      	ldrh	r3, [r3, #22]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d02e      	beq.n	8013a2a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80139cc:	4b3b      	ldr	r3, [pc, #236]	@ (8013abc <tcp_abandon+0x170>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d105      	bne.n	80139e2 <tcp_abandon+0x96>
 80139d6:	4b39      	ldr	r3, [pc, #228]	@ (8013abc <tcp_abandon+0x170>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	4a37      	ldr	r2, [pc, #220]	@ (8013abc <tcp_abandon+0x170>)
 80139de:	6013      	str	r3, [r2, #0]
 80139e0:	e013      	b.n	8013a0a <tcp_abandon+0xbe>
 80139e2:	4b36      	ldr	r3, [pc, #216]	@ (8013abc <tcp_abandon+0x170>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	61fb      	str	r3, [r7, #28]
 80139e8:	e00c      	b.n	8013a04 <tcp_abandon+0xb8>
 80139ea:	69fb      	ldr	r3, [r7, #28]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d104      	bne.n	80139fe <tcp_abandon+0xb2>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	68da      	ldr	r2, [r3, #12]
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	60da      	str	r2, [r3, #12]
 80139fc:	e005      	b.n	8013a0a <tcp_abandon+0xbe>
 80139fe:	69fb      	ldr	r3, [r7, #28]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	61fb      	str	r3, [r7, #28]
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1ef      	bne.n	80139ea <tcp_abandon+0x9e>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	60da      	str	r2, [r3, #12]
 8013a10:	e00b      	b.n	8013a2a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	8adb      	ldrh	r3, [r3, #22]
 8013a1a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013a1c:	6879      	ldr	r1, [r7, #4]
 8013a1e:	4828      	ldr	r0, [pc, #160]	@ (8013ac0 <tcp_abandon+0x174>)
 8013a20:	f001 fa22 	bl	8014e68 <tcp_pcb_remove>
 8013a24:	4b27      	ldr	r3, [pc, #156]	@ (8013ac4 <tcp_abandon+0x178>)
 8013a26:	2201      	movs	r2, #1
 8013a28:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d004      	beq.n	8013a3c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a36:	4618      	mov	r0, r3
 8013a38:	f000 fed8 	bl	80147ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d004      	beq.n	8013a4e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f000 fecf 	bl	80147ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d004      	beq.n	8013a60 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f000 fec6 	bl	80147ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00e      	beq.n	8013a84 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013a66:	6879      	ldr	r1, [r7, #4]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3304      	adds	r3, #4
 8013a6c:	687a      	ldr	r2, [r7, #4]
 8013a6e:	8b12      	ldrh	r2, [r2, #24]
 8013a70:	9202      	str	r2, [sp, #8]
 8013a72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013a74:	9201      	str	r2, [sp, #4]
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	460b      	mov	r3, r1
 8013a7a:	697a      	ldr	r2, [r7, #20]
 8013a7c:	69b9      	ldr	r1, [r7, #24]
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f005 fbbc 	bl	80191fc <tcp_rst>
    }
    last_state = pcb->state;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	7d1b      	ldrb	r3, [r3, #20]
 8013a88:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f7ff fcd8 	bl	8013440 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d004      	beq.n	8013aa0 <tcp_abandon+0x154>
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	f06f 010c 	mvn.w	r1, #12
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	4798      	blx	r3
  }
}
 8013aa0:	3728      	adds	r7, #40	@ 0x28
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	0801fa6c 	.word	0x0801fa6c
 8013aac:	0801fbb0 	.word	0x0801fbb0
 8013ab0:	0801fab0 	.word	0x0801fab0
 8013ab4:	0801fbcc 	.word	0x0801fbcc
 8013ab8:	2000f280 	.word	0x2000f280
 8013abc:	2000f274 	.word	0x2000f274
 8013ac0:	2000f27c 	.word	0x2000f27c
 8013ac4:	2000f284 	.word	0x2000f284

08013ac8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f7ff ff3a 	bl	801394c <tcp_abandon>
}
 8013ad8:	bf00      	nop
 8013ada:	3708      	adds	r7, #8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b088      	sub	sp, #32
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	60b9      	str	r1, [r7, #8]
 8013aea:	4613      	mov	r3, r2
 8013aec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013aee:	2304      	movs	r3, #4
 8013af0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013af8:	4b3e      	ldr	r3, [pc, #248]	@ (8013bf4 <tcp_bind+0x114>)
 8013afa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d109      	bne.n	8013b16 <tcp_bind+0x36>
 8013b02:	4b3d      	ldr	r3, [pc, #244]	@ (8013bf8 <tcp_bind+0x118>)
 8013b04:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8013b08:	493c      	ldr	r1, [pc, #240]	@ (8013bfc <tcp_bind+0x11c>)
 8013b0a:	483d      	ldr	r0, [pc, #244]	@ (8013c00 <tcp_bind+0x120>)
 8013b0c:	f009 f944 	bl	801cd98 <iprintf>
 8013b10:	f06f 030f 	mvn.w	r3, #15
 8013b14:	e06a      	b.n	8013bec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	7d1b      	ldrb	r3, [r3, #20]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d009      	beq.n	8013b32 <tcp_bind+0x52>
 8013b1e:	4b36      	ldr	r3, [pc, #216]	@ (8013bf8 <tcp_bind+0x118>)
 8013b20:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8013b24:	4937      	ldr	r1, [pc, #220]	@ (8013c04 <tcp_bind+0x124>)
 8013b26:	4836      	ldr	r0, [pc, #216]	@ (8013c00 <tcp_bind+0x120>)
 8013b28:	f009 f936 	bl	801cd98 <iprintf>
 8013b2c:	f06f 0305 	mvn.w	r3, #5
 8013b30:	e05c      	b.n	8013bec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013b32:	88fb      	ldrh	r3, [r7, #6]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d109      	bne.n	8013b4c <tcp_bind+0x6c>
    port = tcp_new_port();
 8013b38:	f000 f9f0 	bl	8013f1c <tcp_new_port>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013b40:	88fb      	ldrh	r3, [r7, #6]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d135      	bne.n	8013bb2 <tcp_bind+0xd2>
      return ERR_BUF;
 8013b46:	f06f 0301 	mvn.w	r3, #1
 8013b4a:	e04f      	b.n	8013bec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	61fb      	str	r3, [r7, #28]
 8013b50:	e02b      	b.n	8013baa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013b52:	4a2d      	ldr	r2, [pc, #180]	@ (8013c08 <tcp_bind+0x128>)
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	61bb      	str	r3, [r7, #24]
 8013b5e:	e01e      	b.n	8013b9e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013b60:	69bb      	ldr	r3, [r7, #24]
 8013b62:	8adb      	ldrh	r3, [r3, #22]
 8013b64:	88fa      	ldrh	r2, [r7, #6]
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d116      	bne.n	8013b98 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013b6a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d010      	beq.n	8013b92 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00c      	beq.n	8013b92 <tcp_bind+0xb2>
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d009      	beq.n	8013b92 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d005      	beq.n	8013b92 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013b8e:	429a      	cmp	r2, r3
 8013b90:	d102      	bne.n	8013b98 <tcp_bind+0xb8>
              return ERR_USE;
 8013b92:	f06f 0307 	mvn.w	r3, #7
 8013b96:	e029      	b.n	8013bec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	61bb      	str	r3, [r7, #24]
 8013b9e:	69bb      	ldr	r3, [r7, #24]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d1dd      	bne.n	8013b60 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	61fb      	str	r3, [r7, #28]
 8013baa:	69fa      	ldr	r2, [r7, #28]
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	dbcf      	blt.n	8013b52 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d00c      	beq.n	8013bd2 <tcp_bind+0xf2>
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d008      	beq.n	8013bd2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d002      	beq.n	8013bcc <tcp_bind+0xec>
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	e000      	b.n	8013bce <tcp_bind+0xee>
 8013bcc:	2300      	movs	r3, #0
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	88fa      	ldrh	r2, [r7, #6]
 8013bd6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8013c0c <tcp_bind+0x12c>)
 8013bda:	681a      	ldr	r2, [r3, #0]
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	60da      	str	r2, [r3, #12]
 8013be0:	4a0a      	ldr	r2, [pc, #40]	@ (8013c0c <tcp_bind+0x12c>)
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	6013      	str	r3, [r2, #0]
 8013be6:	f005 fccb 	bl	8019580 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013bea:	2300      	movs	r3, #0
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3720      	adds	r7, #32
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	08022778 	.word	0x08022778
 8013bf8:	0801fa6c 	.word	0x0801fa6c
 8013bfc:	0801fc00 	.word	0x0801fc00
 8013c00:	0801fab0 	.word	0x0801fab0
 8013c04:	0801fc18 	.word	0x0801fc18
 8013c08:	08022750 	.word	0x08022750
 8013c0c:	2000f274 	.word	0x2000f274

08013c10 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013c10:	b580      	push	{r7, lr}
 8013c12:	b084      	sub	sp, #16
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	60f8      	str	r0, [r7, #12]
 8013c18:	60b9      	str	r1, [r7, #8]
 8013c1a:	4613      	mov	r3, r2
 8013c1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d106      	bne.n	8013c32 <tcp_accept_null+0x22>
 8013c24:	4b07      	ldr	r3, [pc, #28]	@ (8013c44 <tcp_accept_null+0x34>)
 8013c26:	f240 320f 	movw	r2, #783	@ 0x30f
 8013c2a:	4907      	ldr	r1, [pc, #28]	@ (8013c48 <tcp_accept_null+0x38>)
 8013c2c:	4807      	ldr	r0, [pc, #28]	@ (8013c4c <tcp_accept_null+0x3c>)
 8013c2e:	f009 f8b3 	bl	801cd98 <iprintf>

  tcp_abort(pcb);
 8013c32:	68b8      	ldr	r0, [r7, #8]
 8013c34:	f7ff ff48 	bl	8013ac8 <tcp_abort>

  return ERR_ABRT;
 8013c38:	f06f 030c 	mvn.w	r3, #12
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	0801fa6c 	.word	0x0801fa6c
 8013c48:	0801fc40 	.word	0x0801fc40
 8013c4c:	0801fab0 	.word	0x0801fab0

08013c50 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b082      	sub	sp, #8
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8013c5c:	78fb      	ldrb	r3, [r7, #3]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4619      	mov	r1, r3
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f000 f806 	bl	8013c74 <tcp_listen_with_backlog_and_err>
 8013c68:	4603      	mov	r3, r0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3708      	adds	r7, #8
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
	...

08013c74 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	607a      	str	r2, [r7, #4]
 8013c80:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013c82:	2300      	movs	r3, #0
 8013c84:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d109      	bne.n	8013ca0 <tcp_listen_with_backlog_and_err+0x2c>
 8013c8c:	4b47      	ldr	r3, [pc, #284]	@ (8013dac <tcp_listen_with_backlog_and_err+0x138>)
 8013c8e:	f240 3259 	movw	r2, #857	@ 0x359
 8013c92:	4947      	ldr	r1, [pc, #284]	@ (8013db0 <tcp_listen_with_backlog_and_err+0x13c>)
 8013c94:	4847      	ldr	r0, [pc, #284]	@ (8013db4 <tcp_listen_with_backlog_and_err+0x140>)
 8013c96:	f009 f87f 	bl	801cd98 <iprintf>
 8013c9a:	23f0      	movs	r3, #240	@ 0xf0
 8013c9c:	76fb      	strb	r3, [r7, #27]
 8013c9e:	e079      	b.n	8013d94 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	7d1b      	ldrb	r3, [r3, #20]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d009      	beq.n	8013cbc <tcp_listen_with_backlog_and_err+0x48>
 8013ca8:	4b40      	ldr	r3, [pc, #256]	@ (8013dac <tcp_listen_with_backlog_and_err+0x138>)
 8013caa:	f240 325a 	movw	r2, #858	@ 0x35a
 8013cae:	4942      	ldr	r1, [pc, #264]	@ (8013db8 <tcp_listen_with_backlog_and_err+0x144>)
 8013cb0:	4840      	ldr	r0, [pc, #256]	@ (8013db4 <tcp_listen_with_backlog_and_err+0x140>)
 8013cb2:	f009 f871 	bl	801cd98 <iprintf>
 8013cb6:	23f1      	movs	r3, #241	@ 0xf1
 8013cb8:	76fb      	strb	r3, [r7, #27]
 8013cba:	e06b      	b.n	8013d94 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	7d1b      	ldrb	r3, [r3, #20]
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d104      	bne.n	8013cce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013cc8:	23f7      	movs	r3, #247	@ 0xf7
 8013cca:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ccc:	e062      	b.n	8013d94 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013cce:	2002      	movs	r0, #2
 8013cd0:	f7fe f9e0 	bl	8012094 <memp_malloc>
 8013cd4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d102      	bne.n	8013ce2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013cdc:	23ff      	movs	r3, #255	@ 0xff
 8013cde:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ce0:	e058      	b.n	8013d94 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	691a      	ldr	r2, [r3, #16]
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	8ada      	ldrh	r2, [r3, #22]
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	7d5a      	ldrb	r2, [r3, #21]
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	7a5a      	ldrb	r2, [r3, #9]
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	7ada      	ldrb	r2, [r3, #11]
 8013d12:	69fb      	ldr	r3, [r7, #28]
 8013d14:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	7a9a      	ldrb	r2, [r3, #10]
 8013d1a:	69fb      	ldr	r3, [r7, #28]
 8013d1c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	8adb      	ldrh	r3, [r3, #22]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d021      	beq.n	8013d72 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013d2e:	4b23      	ldr	r3, [pc, #140]	@ (8013dbc <tcp_listen_with_backlog_and_err+0x148>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68fa      	ldr	r2, [r7, #12]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d105      	bne.n	8013d44 <tcp_listen_with_backlog_and_err+0xd0>
 8013d38:	4b20      	ldr	r3, [pc, #128]	@ (8013dbc <tcp_listen_with_backlog_and_err+0x148>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	68db      	ldr	r3, [r3, #12]
 8013d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8013dbc <tcp_listen_with_backlog_and_err+0x148>)
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	e013      	b.n	8013d6c <tcp_listen_with_backlog_and_err+0xf8>
 8013d44:	4b1d      	ldr	r3, [pc, #116]	@ (8013dbc <tcp_listen_with_backlog_and_err+0x148>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	617b      	str	r3, [r7, #20]
 8013d4a:	e00c      	b.n	8013d66 <tcp_listen_with_backlog_and_err+0xf2>
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d104      	bne.n	8013d60 <tcp_listen_with_backlog_and_err+0xec>
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	68da      	ldr	r2, [r3, #12]
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	60da      	str	r2, [r3, #12]
 8013d5e:	e005      	b.n	8013d6c <tcp_listen_with_backlog_and_err+0xf8>
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	68db      	ldr	r3, [r3, #12]
 8013d64:	617b      	str	r3, [r7, #20]
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1ef      	bne.n	8013d4c <tcp_listen_with_backlog_and_err+0xd8>
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013d72:	68f8      	ldr	r0, [r7, #12]
 8013d74:	f7ff fb64 	bl	8013440 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	4a11      	ldr	r2, [pc, #68]	@ (8013dc0 <tcp_listen_with_backlog_and_err+0x14c>)
 8013d7c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013d7e:	4b11      	ldr	r3, [pc, #68]	@ (8013dc4 <tcp_listen_with_backlog_and_err+0x150>)
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	60da      	str	r2, [r3, #12]
 8013d86:	4a0f      	ldr	r2, [pc, #60]	@ (8013dc4 <tcp_listen_with_backlog_and_err+0x150>)
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	6013      	str	r3, [r2, #0]
 8013d8c:	f005 fbf8 	bl	8019580 <tcp_timer_needed>
  res = ERR_OK;
 8013d90:	2300      	movs	r3, #0
 8013d92:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d002      	beq.n	8013da0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	7efa      	ldrb	r2, [r7, #27]
 8013d9e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013da0:	69fb      	ldr	r3, [r7, #28]
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3720      	adds	r7, #32
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	0801fa6c 	.word	0x0801fa6c
 8013db0:	0801fc60 	.word	0x0801fc60
 8013db4:	0801fab0 	.word	0x0801fab0
 8013db8:	0801fc90 	.word	0x0801fc90
 8013dbc:	2000f274 	.word	0x2000f274
 8013dc0:	08013c11 	.word	0x08013c11
 8013dc4:	2000f278 	.word	0x2000f278

08013dc8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d106      	bne.n	8013de4 <tcp_update_rcv_ann_wnd+0x1c>
 8013dd6:	4b25      	ldr	r3, [pc, #148]	@ (8013e6c <tcp_update_rcv_ann_wnd+0xa4>)
 8013dd8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8013ddc:	4924      	ldr	r1, [pc, #144]	@ (8013e70 <tcp_update_rcv_ann_wnd+0xa8>)
 8013dde:	4825      	ldr	r0, [pc, #148]	@ (8013e74 <tcp_update_rcv_ann_wnd+0xac>)
 8013de0:	f008 ffda 	bl	801cd98 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013de8:	687a      	ldr	r2, [r7, #4]
 8013dea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8013dec:	4413      	add	r3, r2
 8013dee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8013df8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8013dfc:	bf28      	it	cs
 8013dfe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8013e02:	b292      	uxth	r2, r2
 8013e04:	4413      	add	r3, r2
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	1ad3      	subs	r3, r2, r3
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	db08      	blt.n	8013e20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e1a:	68fa      	ldr	r2, [r7, #12]
 8013e1c:	1ad3      	subs	r3, r2, r3
 8013e1e:	e020      	b.n	8013e62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e28:	1ad3      	subs	r3, r2, r3
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	dd03      	ble.n	8013e36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2200      	movs	r2, #0
 8013e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013e34:	e014      	b.n	8013e60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e3e:	1ad3      	subs	r3, r2, r3
 8013e40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e48:	d306      	bcc.n	8013e58 <tcp_update_rcv_ann_wnd+0x90>
 8013e4a:	4b08      	ldr	r3, [pc, #32]	@ (8013e6c <tcp_update_rcv_ann_wnd+0xa4>)
 8013e4c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013e50:	4909      	ldr	r1, [pc, #36]	@ (8013e78 <tcp_update_rcv_ann_wnd+0xb0>)
 8013e52:	4808      	ldr	r0, [pc, #32]	@ (8013e74 <tcp_update_rcv_ann_wnd+0xac>)
 8013e54:	f008 ffa0 	bl	801cd98 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013e60:	2300      	movs	r3, #0
  }
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}
 8013e6a:	bf00      	nop
 8013e6c:	0801fa6c 	.word	0x0801fa6c
 8013e70:	0801fcc8 	.word	0x0801fcc8
 8013e74:	0801fab0 	.word	0x0801fab0
 8013e78:	0801fcec 	.word	0x0801fcec

08013e7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	460b      	mov	r3, r1
 8013e86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d107      	bne.n	8013e9e <tcp_recved+0x22>
 8013e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8013f0c <tcp_recved+0x90>)
 8013e90:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013e94:	491e      	ldr	r1, [pc, #120]	@ (8013f10 <tcp_recved+0x94>)
 8013e96:	481f      	ldr	r0, [pc, #124]	@ (8013f14 <tcp_recved+0x98>)
 8013e98:	f008 ff7e 	bl	801cd98 <iprintf>
 8013e9c:	e032      	b.n	8013f04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	7d1b      	ldrb	r3, [r3, #20]
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d106      	bne.n	8013eb4 <tcp_recved+0x38>
 8013ea6:	4b19      	ldr	r3, [pc, #100]	@ (8013f0c <tcp_recved+0x90>)
 8013ea8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013eac:	491a      	ldr	r1, [pc, #104]	@ (8013f18 <tcp_recved+0x9c>)
 8013eae:	4819      	ldr	r0, [pc, #100]	@ (8013f14 <tcp_recved+0x98>)
 8013eb0:	f008 ff72 	bl	801cd98 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013eb8:	887b      	ldrh	r3, [r7, #2]
 8013eba:	4413      	add	r3, r2
 8013ebc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013ebe:	89fb      	ldrh	r3, [r7, #14]
 8013ec0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013ec4:	d804      	bhi.n	8013ed0 <tcp_recved+0x54>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013eca:	89fa      	ldrh	r2, [r7, #14]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d204      	bcs.n	8013eda <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013ed8:	e002      	b.n	8013ee0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	89fa      	ldrh	r2, [r7, #14]
 8013ede:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7ff ff71 	bl	8013dc8 <tcp_update_rcv_ann_wnd>
 8013ee6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013eee:	d309      	bcc.n	8013f04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	8b5b      	ldrh	r3, [r3, #26]
 8013ef4:	f043 0302 	orr.w	r3, r3, #2
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f004 fbc8 	bl	8018694 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	0801fa6c 	.word	0x0801fa6c
 8013f10:	0801fd08 	.word	0x0801fd08
 8013f14:	0801fab0 	.word	0x0801fab0
 8013f18:	0801fd20 	.word	0x0801fd20

08013f1c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013f22:	2300      	movs	r3, #0
 8013f24:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013f26:	4b1e      	ldr	r3, [pc, #120]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f28:	881b      	ldrh	r3, [r3, #0]
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f30:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013f32:	4b1b      	ldr	r3, [pc, #108]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d103      	bne.n	8013f46 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013f3e:	4b18      	ldr	r3, [pc, #96]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f40:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013f44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013f46:	2300      	movs	r3, #0
 8013f48:	71fb      	strb	r3, [r7, #7]
 8013f4a:	e01e      	b.n	8013f8a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013f4c:	79fb      	ldrb	r3, [r7, #7]
 8013f4e:	4a15      	ldr	r2, [pc, #84]	@ (8013fa4 <tcp_new_port+0x88>)
 8013f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	603b      	str	r3, [r7, #0]
 8013f58:	e011      	b.n	8013f7e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	8ada      	ldrh	r2, [r3, #22]
 8013f5e:	4b10      	ldr	r3, [pc, #64]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f60:	881b      	ldrh	r3, [r3, #0]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d108      	bne.n	8013f78 <tcp_new_port+0x5c>
        n++;
 8013f66:	88bb      	ldrh	r3, [r7, #4]
 8013f68:	3301      	adds	r3, #1
 8013f6a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013f6c:	88bb      	ldrh	r3, [r7, #4]
 8013f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013f72:	d3d8      	bcc.n	8013f26 <tcp_new_port+0xa>
          return 0;
 8013f74:	2300      	movs	r3, #0
 8013f76:	e00d      	b.n	8013f94 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	603b      	str	r3, [r7, #0]
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d1ea      	bne.n	8013f5a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013f84:	79fb      	ldrb	r3, [r7, #7]
 8013f86:	3301      	adds	r3, #1
 8013f88:	71fb      	strb	r3, [r7, #7]
 8013f8a:	79fb      	ldrb	r3, [r7, #7]
 8013f8c:	2b03      	cmp	r3, #3
 8013f8e:	d9dd      	bls.n	8013f4c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013f90:	4b03      	ldr	r3, [pc, #12]	@ (8013fa0 <tcp_new_port+0x84>)
 8013f92:	881b      	ldrh	r3, [r3, #0]
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	370c      	adds	r7, #12
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr
 8013fa0:	20000078 	.word	0x20000078
 8013fa4:	08022750 	.word	0x08022750

08013fa8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8013fa8:	b5b0      	push	{r4, r5, r7, lr}
 8013faa:	b090      	sub	sp, #64	@ 0x40
 8013fac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8013fb4:	4b95      	ldr	r3, [pc, #596]	@ (801420c <tcp_slowtmr+0x264>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	4a94      	ldr	r2, [pc, #592]	@ (801420c <tcp_slowtmr+0x264>)
 8013fbc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013fbe:	4b94      	ldr	r3, [pc, #592]	@ (8014210 <tcp_slowtmr+0x268>)
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	3301      	adds	r3, #1
 8013fc4:	b2da      	uxtb	r2, r3
 8013fc6:	4b92      	ldr	r3, [pc, #584]	@ (8014210 <tcp_slowtmr+0x268>)
 8013fc8:	701a      	strb	r2, [r3, #0]
 8013fca:	e000      	b.n	8013fce <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013fcc:	bf00      	nop
  prev = NULL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013fd2:	4b90      	ldr	r3, [pc, #576]	@ (8014214 <tcp_slowtmr+0x26c>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013fd8:	e29d      	b.n	8014516 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fdc:	7d1b      	ldrb	r3, [r3, #20]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d106      	bne.n	8013ff0 <tcp_slowtmr+0x48>
 8013fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8014218 <tcp_slowtmr+0x270>)
 8013fe4:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013fe8:	498c      	ldr	r1, [pc, #560]	@ (801421c <tcp_slowtmr+0x274>)
 8013fea:	488d      	ldr	r0, [pc, #564]	@ (8014220 <tcp_slowtmr+0x278>)
 8013fec:	f008 fed4 	bl	801cd98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff2:	7d1b      	ldrb	r3, [r3, #20]
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d106      	bne.n	8014006 <tcp_slowtmr+0x5e>
 8013ff8:	4b87      	ldr	r3, [pc, #540]	@ (8014218 <tcp_slowtmr+0x270>)
 8013ffa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013ffe:	4989      	ldr	r1, [pc, #548]	@ (8014224 <tcp_slowtmr+0x27c>)
 8014000:	4887      	ldr	r0, [pc, #540]	@ (8014220 <tcp_slowtmr+0x278>)
 8014002:	f008 fec9 	bl	801cd98 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014008:	7d1b      	ldrb	r3, [r3, #20]
 801400a:	2b0a      	cmp	r3, #10
 801400c:	d106      	bne.n	801401c <tcp_slowtmr+0x74>
 801400e:	4b82      	ldr	r3, [pc, #520]	@ (8014218 <tcp_slowtmr+0x270>)
 8014010:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014014:	4984      	ldr	r1, [pc, #528]	@ (8014228 <tcp_slowtmr+0x280>)
 8014016:	4882      	ldr	r0, [pc, #520]	@ (8014220 <tcp_slowtmr+0x278>)
 8014018:	f008 febe 	bl	801cd98 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801401e:	7f9a      	ldrb	r2, [r3, #30]
 8014020:	4b7b      	ldr	r3, [pc, #492]	@ (8014210 <tcp_slowtmr+0x268>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	429a      	cmp	r2, r3
 8014026:	d105      	bne.n	8014034 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 801402c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8014032:	e270      	b.n	8014516 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8014034:	4b76      	ldr	r3, [pc, #472]	@ (8014210 <tcp_slowtmr+0x268>)
 8014036:	781a      	ldrb	r2, [r3, #0]
 8014038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801403a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 801403c:	2300      	movs	r3, #0
 801403e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8014042:	2300      	movs	r3, #0
 8014044:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801404a:	7d1b      	ldrb	r3, [r3, #20]
 801404c:	2b02      	cmp	r3, #2
 801404e:	d10a      	bne.n	8014066 <tcp_slowtmr+0xbe>
 8014050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014056:	2b05      	cmp	r3, #5
 8014058:	d905      	bls.n	8014066 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801405a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801405e:	3301      	adds	r3, #1
 8014060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014064:	e11e      	b.n	80142a4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801406c:	2b0b      	cmp	r3, #11
 801406e:	d905      	bls.n	801407c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8014070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014074:	3301      	adds	r3, #1
 8014076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801407a:	e113      	b.n	80142a4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 801407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801407e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014082:	2b00      	cmp	r3, #0
 8014084:	d075      	beq.n	8014172 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801408a:	2b00      	cmp	r3, #0
 801408c:	d006      	beq.n	801409c <tcp_slowtmr+0xf4>
 801408e:	4b62      	ldr	r3, [pc, #392]	@ (8014218 <tcp_slowtmr+0x270>)
 8014090:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8014094:	4965      	ldr	r1, [pc, #404]	@ (801422c <tcp_slowtmr+0x284>)
 8014096:	4862      	ldr	r0, [pc, #392]	@ (8014220 <tcp_slowtmr+0x278>)
 8014098:	f008 fe7e 	bl	801cd98 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801409e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d106      	bne.n	80140b2 <tcp_slowtmr+0x10a>
 80140a4:	4b5c      	ldr	r3, [pc, #368]	@ (8014218 <tcp_slowtmr+0x270>)
 80140a6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80140aa:	4961      	ldr	r1, [pc, #388]	@ (8014230 <tcp_slowtmr+0x288>)
 80140ac:	485c      	ldr	r0, [pc, #368]	@ (8014220 <tcp_slowtmr+0x278>)
 80140ae:	f008 fe73 	bl	801cd98 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80140b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80140b8:	2b0b      	cmp	r3, #11
 80140ba:	d905      	bls.n	80140c8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80140bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140c0:	3301      	adds	r3, #1
 80140c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80140c6:	e0ed      	b.n	80142a4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80140c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80140ce:	3b01      	subs	r3, #1
 80140d0:	4a58      	ldr	r2, [pc, #352]	@ (8014234 <tcp_slowtmr+0x28c>)
 80140d2:	5cd3      	ldrb	r3, [r2, r3]
 80140d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80140d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80140dc:	7c7a      	ldrb	r2, [r7, #17]
 80140de:	429a      	cmp	r2, r3
 80140e0:	d907      	bls.n	80140f2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80140e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80140e8:	3301      	adds	r3, #1
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80140f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80140f8:	7c7a      	ldrb	r2, [r7, #17]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	f200 80d2 	bhi.w	80142a4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8014100:	2301      	movs	r3, #1
 8014102:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801410a:	2b00      	cmp	r3, #0
 801410c:	d108      	bne.n	8014120 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801410e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014110:	f005 f968 	bl	80193e4 <tcp_zero_window_probe>
 8014114:	4603      	mov	r3, r0
 8014116:	2b00      	cmp	r3, #0
 8014118:	d014      	beq.n	8014144 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801411a:	2300      	movs	r3, #0
 801411c:	623b      	str	r3, [r7, #32]
 801411e:	e011      	b.n	8014144 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014126:	4619      	mov	r1, r3
 8014128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801412a:	f004 f82d 	bl	8018188 <tcp_split_unsent_seg>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d107      	bne.n	8014144 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014136:	f004 faad 	bl	8018694 <tcp_output>
 801413a:	4603      	mov	r3, r0
 801413c:	2b00      	cmp	r3, #0
 801413e:	d101      	bne.n	8014144 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8014140:	2300      	movs	r3, #0
 8014142:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014144:	6a3b      	ldr	r3, [r7, #32]
 8014146:	2b00      	cmp	r3, #0
 8014148:	f000 80ac 	beq.w	80142a4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 801414c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801414e:	2200      	movs	r2, #0
 8014150:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014156:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801415a:	2b06      	cmp	r3, #6
 801415c:	f200 80a2 	bhi.w	80142a4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8014160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014162:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014166:	3301      	adds	r3, #1
 8014168:	b2da      	uxtb	r2, r3
 801416a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801416c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8014170:	e098      	b.n	80142a4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014174:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014178:	2b00      	cmp	r3, #0
 801417a:	db0f      	blt.n	801419c <tcp_slowtmr+0x1f4>
 801417c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801417e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014182:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014186:	4293      	cmp	r3, r2
 8014188:	d008      	beq.n	801419c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801418a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801418c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014190:	b29b      	uxth	r3, r3
 8014192:	3301      	adds	r3, #1
 8014194:	b29b      	uxth	r3, r3
 8014196:	b21a      	sxth	r2, r3
 8014198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801419a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 801419c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801419e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80141a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80141a8:	429a      	cmp	r2, r3
 80141aa:	db7b      	blt.n	80142a4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80141ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80141ae:	f004 fd65 	bl	8018c7c <tcp_rexmit_rto_prepare>
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d007      	beq.n	80141c8 <tcp_slowtmr+0x220>
 80141b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d171      	bne.n	80142a4 <tcp_slowtmr+0x2fc>
 80141c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d06d      	beq.n	80142a4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80141c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ca:	7d1b      	ldrb	r3, [r3, #20]
 80141cc:	2b02      	cmp	r3, #2
 80141ce:	d03a      	beq.n	8014246 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80141d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80141d6:	2b0c      	cmp	r3, #12
 80141d8:	bf28      	it	cs
 80141da:	230c      	movcs	r3, #12
 80141dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80141de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80141e4:	10db      	asrs	r3, r3, #3
 80141e6:	b21b      	sxth	r3, r3
 80141e8:	461a      	mov	r2, r3
 80141ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80141f0:	4413      	add	r3, r2
 80141f2:	7efa      	ldrb	r2, [r7, #27]
 80141f4:	4910      	ldr	r1, [pc, #64]	@ (8014238 <tcp_slowtmr+0x290>)
 80141f6:	5c8a      	ldrb	r2, [r1, r2]
 80141f8:	4093      	lsls	r3, r2
 80141fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8014202:	4293      	cmp	r3, r2
 8014204:	dc1a      	bgt.n	801423c <tcp_slowtmr+0x294>
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	b21a      	sxth	r2, r3
 801420a:	e019      	b.n	8014240 <tcp_slowtmr+0x298>
 801420c:	2000f270 	.word	0x2000f270
 8014210:	2000f286 	.word	0x2000f286
 8014214:	2000f27c 	.word	0x2000f27c
 8014218:	0801fa6c 	.word	0x0801fa6c
 801421c:	0801fdb0 	.word	0x0801fdb0
 8014220:	0801fab0 	.word	0x0801fab0
 8014224:	0801fddc 	.word	0x0801fddc
 8014228:	0801fe08 	.word	0x0801fe08
 801422c:	0801fe38 	.word	0x0801fe38
 8014230:	0801fe6c 	.word	0x0801fe6c
 8014234:	08022748 	.word	0x08022748
 8014238:	08022738 	.word	0x08022738
 801423c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8014240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014242:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014248:	2200      	movs	r2, #0
 801424a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014254:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014258:	4293      	cmp	r3, r2
 801425a:	bf28      	it	cs
 801425c:	4613      	movcs	r3, r2
 801425e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014260:	8a7b      	ldrh	r3, [r7, #18]
 8014262:	085b      	lsrs	r3, r3, #1
 8014264:	b29a      	uxth	r2, r3
 8014266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014268:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801426c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801426e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014274:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	b29b      	uxth	r3, r3
 801427a:	429a      	cmp	r2, r3
 801427c:	d206      	bcs.n	801428c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801427e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	b29a      	uxth	r2, r3
 8014286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014288:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8014290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014292:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8014296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014298:	2200      	movs	r2, #0
 801429a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 801429e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80142a0:	f004 fd5c 	bl	8018d5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80142a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a6:	7d1b      	ldrb	r3, [r3, #20]
 80142a8:	2b06      	cmp	r3, #6
 80142aa:	d111      	bne.n	80142d0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80142ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ae:	8b5b      	ldrh	r3, [r3, #26]
 80142b0:	f003 0310 	and.w	r3, r3, #16
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00b      	beq.n	80142d0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80142b8:	4b9c      	ldr	r3, [pc, #624]	@ (801452c <tcp_slowtmr+0x584>)
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142be:	6a1b      	ldr	r3, [r3, #32]
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	2b28      	cmp	r3, #40	@ 0x28
 80142c4:	d904      	bls.n	80142d0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80142c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80142ca:	3301      	adds	r3, #1
 80142cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80142d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d2:	7a5b      	ldrb	r3, [r3, #9]
 80142d4:	f003 0308 	and.w	r3, r3, #8
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d04a      	beq.n	8014372 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80142dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	d003      	beq.n	80142ec <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80142e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80142e8:	2b07      	cmp	r3, #7
 80142ea:	d142      	bne.n	8014372 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80142ec:	4b8f      	ldr	r3, [pc, #572]	@ (801452c <tcp_slowtmr+0x584>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f2:	6a1b      	ldr	r3, [r3, #32]
 80142f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80142f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142f8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80142fc:	4b8c      	ldr	r3, [pc, #560]	@ (8014530 <tcp_slowtmr+0x588>)
 80142fe:	440b      	add	r3, r1
 8014300:	498c      	ldr	r1, [pc, #560]	@ (8014534 <tcp_slowtmr+0x58c>)
 8014302:	fba1 1303 	umull	r1, r3, r1, r3
 8014306:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014308:	429a      	cmp	r2, r3
 801430a:	d90a      	bls.n	8014322 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 801430c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014310:	3301      	adds	r3, #1
 8014312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801431a:	3301      	adds	r3, #1
 801431c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014320:	e027      	b.n	8014372 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014322:	4b82      	ldr	r3, [pc, #520]	@ (801452c <tcp_slowtmr+0x584>)
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014328:	6a1b      	ldr	r3, [r3, #32]
 801432a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801432c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801432e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014334:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014338:	4618      	mov	r0, r3
 801433a:	4b7f      	ldr	r3, [pc, #508]	@ (8014538 <tcp_slowtmr+0x590>)
 801433c:	fb00 f303 	mul.w	r3, r0, r3
 8014340:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014342:	497c      	ldr	r1, [pc, #496]	@ (8014534 <tcp_slowtmr+0x58c>)
 8014344:	fba1 1303 	umull	r1, r3, r1, r3
 8014348:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801434a:	429a      	cmp	r2, r3
 801434c:	d911      	bls.n	8014372 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801434e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014350:	f005 f808 	bl	8019364 <tcp_keepalive>
 8014354:	4603      	mov	r3, r0
 8014356:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801435a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801435e:	2b00      	cmp	r3, #0
 8014360:	d107      	bne.n	8014372 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8014362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014364:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014368:	3301      	adds	r3, #1
 801436a:	b2da      	uxtb	r2, r3
 801436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801436e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8014372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014376:	2b00      	cmp	r3, #0
 8014378:	d011      	beq.n	801439e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801437a:	4b6c      	ldr	r3, [pc, #432]	@ (801452c <tcp_slowtmr+0x584>)
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014380:	6a1b      	ldr	r3, [r3, #32]
 8014382:	1ad2      	subs	r2, r2, r3
 8014384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014386:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801438a:	4619      	mov	r1, r3
 801438c:	460b      	mov	r3, r1
 801438e:	005b      	lsls	r3, r3, #1
 8014390:	440b      	add	r3, r1
 8014392:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014394:	429a      	cmp	r2, r3
 8014396:	d302      	bcc.n	801439e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8014398:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801439a:	f000 fec9 	bl	8015130 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 801439e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143a0:	7d1b      	ldrb	r3, [r3, #20]
 80143a2:	2b03      	cmp	r3, #3
 80143a4:	d10b      	bne.n	80143be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80143a6:	4b61      	ldr	r3, [pc, #388]	@ (801452c <tcp_slowtmr+0x584>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ac:	6a1b      	ldr	r3, [r3, #32]
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	2b28      	cmp	r3, #40	@ 0x28
 80143b2:	d904      	bls.n	80143be <tcp_slowtmr+0x416>
        ++pcb_remove;
 80143b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143b8:	3301      	adds	r3, #1
 80143ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80143be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c0:	7d1b      	ldrb	r3, [r3, #20]
 80143c2:	2b09      	cmp	r3, #9
 80143c4:	d10b      	bne.n	80143de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80143c6:	4b59      	ldr	r3, [pc, #356]	@ (801452c <tcp_slowtmr+0x584>)
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143cc:	6a1b      	ldr	r3, [r3, #32]
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80143d2:	d904      	bls.n	80143de <tcp_slowtmr+0x436>
        ++pcb_remove;
 80143d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143d8:	3301      	adds	r3, #1
 80143da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80143de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d060      	beq.n	80144a8 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80143e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80143ec:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80143ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80143f0:	f000 fcea 	bl	8014dc8 <tcp_pcb_purge>
      if (prev != NULL) {
 80143f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d010      	beq.n	801441c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80143fa:	4b50      	ldr	r3, [pc, #320]	@ (801453c <tcp_slowtmr+0x594>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014400:	429a      	cmp	r2, r3
 8014402:	d106      	bne.n	8014412 <tcp_slowtmr+0x46a>
 8014404:	4b4e      	ldr	r3, [pc, #312]	@ (8014540 <tcp_slowtmr+0x598>)
 8014406:	f240 526d 	movw	r2, #1389	@ 0x56d
 801440a:	494e      	ldr	r1, [pc, #312]	@ (8014544 <tcp_slowtmr+0x59c>)
 801440c:	484e      	ldr	r0, [pc, #312]	@ (8014548 <tcp_slowtmr+0x5a0>)
 801440e:	f008 fcc3 	bl	801cd98 <iprintf>
        prev->next = pcb->next;
 8014412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014414:	68da      	ldr	r2, [r3, #12]
 8014416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014418:	60da      	str	r2, [r3, #12]
 801441a:	e00f      	b.n	801443c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801441c:	4b47      	ldr	r3, [pc, #284]	@ (801453c <tcp_slowtmr+0x594>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014422:	429a      	cmp	r2, r3
 8014424:	d006      	beq.n	8014434 <tcp_slowtmr+0x48c>
 8014426:	4b46      	ldr	r3, [pc, #280]	@ (8014540 <tcp_slowtmr+0x598>)
 8014428:	f240 5271 	movw	r2, #1393	@ 0x571
 801442c:	4947      	ldr	r1, [pc, #284]	@ (801454c <tcp_slowtmr+0x5a4>)
 801442e:	4846      	ldr	r0, [pc, #280]	@ (8014548 <tcp_slowtmr+0x5a0>)
 8014430:	f008 fcb2 	bl	801cd98 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014436:	68db      	ldr	r3, [r3, #12]
 8014438:	4a40      	ldr	r2, [pc, #256]	@ (801453c <tcp_slowtmr+0x594>)
 801443a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801443c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014440:	2b00      	cmp	r3, #0
 8014442:	d013      	beq.n	801446c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014446:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801444a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801444c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014450:	3304      	adds	r3, #4
 8014452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014454:	8ad2      	ldrh	r2, [r2, #22]
 8014456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014458:	8b09      	ldrh	r1, [r1, #24]
 801445a:	9102      	str	r1, [sp, #8]
 801445c:	9201      	str	r2, [sp, #4]
 801445e:	9300      	str	r3, [sp, #0]
 8014460:	462b      	mov	r3, r5
 8014462:	4622      	mov	r2, r4
 8014464:	4601      	mov	r1, r0
 8014466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014468:	f004 fec8 	bl	80191fc <tcp_rst>
      err_arg = pcb->callback_arg;
 801446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446e:	691b      	ldr	r3, [r3, #16]
 8014470:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014474:	7d1b      	ldrb	r3, [r3, #20]
 8014476:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801447a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801447c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801447e:	68db      	ldr	r3, [r3, #12]
 8014480:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014482:	6838      	ldr	r0, [r7, #0]
 8014484:	f7fe ffdc 	bl	8013440 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014488:	4b31      	ldr	r3, [pc, #196]	@ (8014550 <tcp_slowtmr+0x5a8>)
 801448a:	2200      	movs	r2, #0
 801448c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d004      	beq.n	801449e <tcp_slowtmr+0x4f6>
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	f06f 010c 	mvn.w	r1, #12
 801449a:	68b8      	ldr	r0, [r7, #8]
 801449c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801449e:	4b2c      	ldr	r3, [pc, #176]	@ (8014550 <tcp_slowtmr+0x5a8>)
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d037      	beq.n	8014516 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80144a6:	e592      	b.n	8013fce <tcp_slowtmr+0x26>
      prev = pcb;
 80144a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80144ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80144b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b4:	7f1b      	ldrb	r3, [r3, #28]
 80144b6:	3301      	adds	r3, #1
 80144b8:	b2da      	uxtb	r2, r3
 80144ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80144be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c0:	7f1a      	ldrb	r2, [r3, #28]
 80144c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144c4:	7f5b      	ldrb	r3, [r3, #29]
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d325      	bcc.n	8014516 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80144ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144cc:	2200      	movs	r2, #0
 80144ce:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80144d0:	4b1f      	ldr	r3, [pc, #124]	@ (8014550 <tcp_slowtmr+0x5a8>)
 80144d2:	2200      	movs	r2, #0
 80144d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80144d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00b      	beq.n	80144f8 <tcp_slowtmr+0x550>
 80144e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80144e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144e8:	6912      	ldr	r2, [r2, #16]
 80144ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80144ec:	4610      	mov	r0, r2
 80144ee:	4798      	blx	r3
 80144f0:	4603      	mov	r3, r0
 80144f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80144f6:	e002      	b.n	80144fe <tcp_slowtmr+0x556>
 80144f8:	2300      	movs	r3, #0
 80144fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80144fe:	4b14      	ldr	r3, [pc, #80]	@ (8014550 <tcp_slowtmr+0x5a8>)
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	2b00      	cmp	r3, #0
 8014504:	f47f ad62 	bne.w	8013fcc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014508:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801450c:	2b00      	cmp	r3, #0
 801450e:	d102      	bne.n	8014516 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8014510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014512:	f004 f8bf 	bl	8018694 <tcp_output>
  while (pcb != NULL) {
 8014516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014518:	2b00      	cmp	r3, #0
 801451a:	f47f ad5e 	bne.w	8013fda <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801451e:	2300      	movs	r3, #0
 8014520:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8014522:	4b0c      	ldr	r3, [pc, #48]	@ (8014554 <tcp_slowtmr+0x5ac>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014528:	e069      	b.n	80145fe <tcp_slowtmr+0x656>
 801452a:	bf00      	nop
 801452c:	2000f270 	.word	0x2000f270
 8014530:	000a4cb8 	.word	0x000a4cb8
 8014534:	10624dd3 	.word	0x10624dd3
 8014538:	000124f8 	.word	0x000124f8
 801453c:	2000f27c 	.word	0x2000f27c
 8014540:	0801fa6c 	.word	0x0801fa6c
 8014544:	0801fea4 	.word	0x0801fea4
 8014548:	0801fab0 	.word	0x0801fab0
 801454c:	0801fed0 	.word	0x0801fed0
 8014550:	2000f284 	.word	0x2000f284
 8014554:	2000f280 	.word	0x2000f280
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801455a:	7d1b      	ldrb	r3, [r3, #20]
 801455c:	2b0a      	cmp	r3, #10
 801455e:	d006      	beq.n	801456e <tcp_slowtmr+0x5c6>
 8014560:	4b2b      	ldr	r3, [pc, #172]	@ (8014610 <tcp_slowtmr+0x668>)
 8014562:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8014566:	492b      	ldr	r1, [pc, #172]	@ (8014614 <tcp_slowtmr+0x66c>)
 8014568:	482b      	ldr	r0, [pc, #172]	@ (8014618 <tcp_slowtmr+0x670>)
 801456a:	f008 fc15 	bl	801cd98 <iprintf>
    pcb_remove = 0;
 801456e:	2300      	movs	r3, #0
 8014570:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014574:	4b29      	ldr	r3, [pc, #164]	@ (801461c <tcp_slowtmr+0x674>)
 8014576:	681a      	ldr	r2, [r3, #0]
 8014578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801457a:	6a1b      	ldr	r3, [r3, #32]
 801457c:	1ad3      	subs	r3, r2, r3
 801457e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014580:	d904      	bls.n	801458c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8014582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014586:	3301      	adds	r3, #1
 8014588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014590:	2b00      	cmp	r3, #0
 8014592:	d02f      	beq.n	80145f4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014596:	f000 fc17 	bl	8014dc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459c:	2b00      	cmp	r3, #0
 801459e:	d010      	beq.n	80145c2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80145a0:	4b1f      	ldr	r3, [pc, #124]	@ (8014620 <tcp_slowtmr+0x678>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145a6:	429a      	cmp	r2, r3
 80145a8:	d106      	bne.n	80145b8 <tcp_slowtmr+0x610>
 80145aa:	4b19      	ldr	r3, [pc, #100]	@ (8014610 <tcp_slowtmr+0x668>)
 80145ac:	f240 52af 	movw	r2, #1455	@ 0x5af
 80145b0:	491c      	ldr	r1, [pc, #112]	@ (8014624 <tcp_slowtmr+0x67c>)
 80145b2:	4819      	ldr	r0, [pc, #100]	@ (8014618 <tcp_slowtmr+0x670>)
 80145b4:	f008 fbf0 	bl	801cd98 <iprintf>
        prev->next = pcb->next;
 80145b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ba:	68da      	ldr	r2, [r3, #12]
 80145bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145be:	60da      	str	r2, [r3, #12]
 80145c0:	e00f      	b.n	80145e2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80145c2:	4b17      	ldr	r3, [pc, #92]	@ (8014620 <tcp_slowtmr+0x678>)
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d006      	beq.n	80145da <tcp_slowtmr+0x632>
 80145cc:	4b10      	ldr	r3, [pc, #64]	@ (8014610 <tcp_slowtmr+0x668>)
 80145ce:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80145d2:	4915      	ldr	r1, [pc, #84]	@ (8014628 <tcp_slowtmr+0x680>)
 80145d4:	4810      	ldr	r0, [pc, #64]	@ (8014618 <tcp_slowtmr+0x670>)
 80145d6:	f008 fbdf 	bl	801cd98 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80145da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	4a10      	ldr	r2, [pc, #64]	@ (8014620 <tcp_slowtmr+0x678>)
 80145e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80145e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80145e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e8:	68db      	ldr	r3, [r3, #12]
 80145ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80145ec:	69f8      	ldr	r0, [r7, #28]
 80145ee:	f7fe ff27 	bl	8013440 <tcp_free>
 80145f2:	e004      	b.n	80145fe <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80145f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80145f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80145fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014600:	2b00      	cmp	r3, #0
 8014602:	d1a9      	bne.n	8014558 <tcp_slowtmr+0x5b0>
    }
  }
}
 8014604:	bf00      	nop
 8014606:	bf00      	nop
 8014608:	3730      	adds	r7, #48	@ 0x30
 801460a:	46bd      	mov	sp, r7
 801460c:	bdb0      	pop	{r4, r5, r7, pc}
 801460e:	bf00      	nop
 8014610:	0801fa6c 	.word	0x0801fa6c
 8014614:	0801fefc 	.word	0x0801fefc
 8014618:	0801fab0 	.word	0x0801fab0
 801461c:	2000f270 	.word	0x2000f270
 8014620:	2000f280 	.word	0x2000f280
 8014624:	0801ff2c 	.word	0x0801ff2c
 8014628:	0801ff54 	.word	0x0801ff54

0801462c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b082      	sub	sp, #8
 8014630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014632:	4b2d      	ldr	r3, [pc, #180]	@ (80146e8 <tcp_fasttmr+0xbc>)
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	3301      	adds	r3, #1
 8014638:	b2da      	uxtb	r2, r3
 801463a:	4b2b      	ldr	r3, [pc, #172]	@ (80146e8 <tcp_fasttmr+0xbc>)
 801463c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801463e:	4b2b      	ldr	r3, [pc, #172]	@ (80146ec <tcp_fasttmr+0xc0>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014644:	e048      	b.n	80146d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	7f9a      	ldrb	r2, [r3, #30]
 801464a:	4b27      	ldr	r3, [pc, #156]	@ (80146e8 <tcp_fasttmr+0xbc>)
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	429a      	cmp	r2, r3
 8014650:	d03f      	beq.n	80146d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014652:	4b25      	ldr	r3, [pc, #148]	@ (80146e8 <tcp_fasttmr+0xbc>)
 8014654:	781a      	ldrb	r2, [r3, #0]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	8b5b      	ldrh	r3, [r3, #26]
 801465e:	f003 0301 	and.w	r3, r3, #1
 8014662:	2b00      	cmp	r3, #0
 8014664:	d010      	beq.n	8014688 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	8b5b      	ldrh	r3, [r3, #26]
 801466a:	f043 0302 	orr.w	r3, r3, #2
 801466e:	b29a      	uxth	r2, r3
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f004 f80d 	bl	8018694 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	8b5b      	ldrh	r3, [r3, #26]
 801467e:	f023 0303 	bic.w	r3, r3, #3
 8014682:	b29a      	uxth	r2, r3
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	8b5b      	ldrh	r3, [r3, #26]
 801468c:	f003 0308 	and.w	r3, r3, #8
 8014690:	2b00      	cmp	r3, #0
 8014692:	d009      	beq.n	80146a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	8b5b      	ldrh	r3, [r3, #26]
 8014698:	f023 0308 	bic.w	r3, r3, #8
 801469c:	b29a      	uxth	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f7ff f860 	bl	8013768 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d00a      	beq.n	80146cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80146b6:	4b0e      	ldr	r3, [pc, #56]	@ (80146f0 <tcp_fasttmr+0xc4>)
 80146b8:	2200      	movs	r2, #0
 80146ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80146bc:	6878      	ldr	r0, [r7, #4]
 80146be:	f000 f819 	bl	80146f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80146c2:	4b0b      	ldr	r3, [pc, #44]	@ (80146f0 <tcp_fasttmr+0xc4>)
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d000      	beq.n	80146cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80146ca:	e7b8      	b.n	801463e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	607b      	str	r3, [r7, #4]
 80146d0:	e002      	b.n	80146d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d1b3      	bne.n	8014646 <tcp_fasttmr+0x1a>
    }
  }
}
 80146de:	bf00      	nop
 80146e0:	bf00      	nop
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}
 80146e8:	2000f286 	.word	0x2000f286
 80146ec:	2000f27c 	.word	0x2000f27c
 80146f0:	2000f284 	.word	0x2000f284

080146f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80146f4:	b590      	push	{r4, r7, lr}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d109      	bne.n	8014716 <tcp_process_refused_data+0x22>
 8014702:	4b37      	ldr	r3, [pc, #220]	@ (80147e0 <tcp_process_refused_data+0xec>)
 8014704:	f240 6209 	movw	r2, #1545	@ 0x609
 8014708:	4936      	ldr	r1, [pc, #216]	@ (80147e4 <tcp_process_refused_data+0xf0>)
 801470a:	4837      	ldr	r0, [pc, #220]	@ (80147e8 <tcp_process_refused_data+0xf4>)
 801470c:	f008 fb44 	bl	801cd98 <iprintf>
 8014710:	f06f 030f 	mvn.w	r3, #15
 8014714:	e060      	b.n	80147d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801471a:	7b5b      	ldrb	r3, [r3, #13]
 801471c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014722:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00b      	beq.n	801474c <tcp_process_refused_data+0x58>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6918      	ldr	r0, [r3, #16]
 801473e:	2300      	movs	r3, #0
 8014740:	68ba      	ldr	r2, [r7, #8]
 8014742:	6879      	ldr	r1, [r7, #4]
 8014744:	47a0      	blx	r4
 8014746:	4603      	mov	r3, r0
 8014748:	73fb      	strb	r3, [r7, #15]
 801474a:	e007      	b.n	801475c <tcp_process_refused_data+0x68>
 801474c:	2300      	movs	r3, #0
 801474e:	68ba      	ldr	r2, [r7, #8]
 8014750:	6879      	ldr	r1, [r7, #4]
 8014752:	2000      	movs	r0, #0
 8014754:	f000 f8c2 	bl	80148dc <tcp_recv_null>
 8014758:	4603      	mov	r3, r0
 801475a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801475c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d12a      	bne.n	80147ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014764:	7bbb      	ldrb	r3, [r7, #14]
 8014766:	f003 0320 	and.w	r3, r3, #32
 801476a:	2b00      	cmp	r3, #0
 801476c:	d033      	beq.n	80147d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014772:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014776:	d005      	beq.n	8014784 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801477c:	3301      	adds	r3, #1
 801477e:	b29a      	uxth	r2, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00b      	beq.n	80147a6 <tcp_process_refused_data+0xb2>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6918      	ldr	r0, [r3, #16]
 8014798:	2300      	movs	r3, #0
 801479a:	2200      	movs	r2, #0
 801479c:	6879      	ldr	r1, [r7, #4]
 801479e:	47a0      	blx	r4
 80147a0:	4603      	mov	r3, r0
 80147a2:	73fb      	strb	r3, [r7, #15]
 80147a4:	e001      	b.n	80147aa <tcp_process_refused_data+0xb6>
 80147a6:	2300      	movs	r3, #0
 80147a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80147aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ae:	f113 0f0d 	cmn.w	r3, #13
 80147b2:	d110      	bne.n	80147d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80147b4:	f06f 030c 	mvn.w	r3, #12
 80147b8:	e00e      	b.n	80147d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80147ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147be:	f113 0f0d 	cmn.w	r3, #13
 80147c2:	d102      	bne.n	80147ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80147c4:	f06f 030c 	mvn.w	r3, #12
 80147c8:	e006      	b.n	80147d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80147d0:	f06f 0304 	mvn.w	r3, #4
 80147d4:	e000      	b.n	80147d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80147d6:	2300      	movs	r3, #0
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd90      	pop	{r4, r7, pc}
 80147e0:	0801fa6c 	.word	0x0801fa6c
 80147e4:	0801ff7c 	.word	0x0801ff7c
 80147e8:	0801fab0 	.word	0x0801fab0

080147ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b084      	sub	sp, #16
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80147f4:	e007      	b.n	8014806 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 f80a 	bl	8014816 <tcp_seg_free>
    seg = next;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d1f4      	bne.n	80147f6 <tcp_segs_free+0xa>
  }
}
 801480c:	bf00      	nop
 801480e:	bf00      	nop
 8014810:	3710      	adds	r7, #16
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}

08014816 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014816:	b580      	push	{r7, lr}
 8014818:	b082      	sub	sp, #8
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d00c      	beq.n	801483e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	685b      	ldr	r3, [r3, #4]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d004      	beq.n	8014836 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	685b      	ldr	r3, [r3, #4]
 8014830:	4618      	mov	r0, r3
 8014832:	f7fe fb49 	bl	8012ec8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014836:	6879      	ldr	r1, [r7, #4]
 8014838:	2003      	movs	r0, #3
 801483a:	f7fd fca1 	bl	8012180 <memp_free>
  }
}
 801483e:	bf00      	nop
 8014840:	3708      	adds	r7, #8
 8014842:	46bd      	mov	sp, r7
 8014844:	bd80      	pop	{r7, pc}
	...

08014848 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	460b      	mov	r3, r1
 8014852:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d107      	bne.n	801486a <tcp_setprio+0x22>
 801485a:	4b07      	ldr	r3, [pc, #28]	@ (8014878 <tcp_setprio+0x30>)
 801485c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8014860:	4906      	ldr	r1, [pc, #24]	@ (801487c <tcp_setprio+0x34>)
 8014862:	4807      	ldr	r0, [pc, #28]	@ (8014880 <tcp_setprio+0x38>)
 8014864:	f008 fa98 	bl	801cd98 <iprintf>
 8014868:	e002      	b.n	8014870 <tcp_setprio+0x28>

  pcb->prio = prio;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	78fa      	ldrb	r2, [r7, #3]
 801486e:	755a      	strb	r2, [r3, #21]
}
 8014870:	3708      	adds	r7, #8
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}
 8014876:	bf00      	nop
 8014878:	0801fa6c 	.word	0x0801fa6c
 801487c:	0801ffa4 	.word	0x0801ffa4
 8014880:	0801fab0 	.word	0x0801fab0

08014884 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b084      	sub	sp, #16
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d106      	bne.n	80148a0 <tcp_seg_copy+0x1c>
 8014892:	4b0f      	ldr	r3, [pc, #60]	@ (80148d0 <tcp_seg_copy+0x4c>)
 8014894:	f240 6282 	movw	r2, #1666	@ 0x682
 8014898:	490e      	ldr	r1, [pc, #56]	@ (80148d4 <tcp_seg_copy+0x50>)
 801489a:	480f      	ldr	r0, [pc, #60]	@ (80148d8 <tcp_seg_copy+0x54>)
 801489c:	f008 fa7c 	bl	801cd98 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80148a0:	2003      	movs	r0, #3
 80148a2:	f7fd fbf7 	bl	8012094 <memp_malloc>
 80148a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d101      	bne.n	80148b2 <tcp_seg_copy+0x2e>
    return NULL;
 80148ae:	2300      	movs	r3, #0
 80148b0:	e00a      	b.n	80148c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80148b2:	2210      	movs	r2, #16
 80148b4:	6879      	ldr	r1, [r7, #4]
 80148b6:	68f8      	ldr	r0, [r7, #12]
 80148b8:	f008 fbf7 	bl	801d0aa <memcpy>
  pbuf_ref(cseg->p);
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fba7 	bl	8013014 <pbuf_ref>
  return cseg;
 80148c6:	68fb      	ldr	r3, [r7, #12]
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	0801fa6c 	.word	0x0801fa6c
 80148d4:	0801ffc0 	.word	0x0801ffc0
 80148d8:	0801fab0 	.word	0x0801fab0

080148dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
 80148e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d109      	bne.n	8014904 <tcp_recv_null+0x28>
 80148f0:	4b12      	ldr	r3, [pc, #72]	@ (801493c <tcp_recv_null+0x60>)
 80148f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80148f6:	4912      	ldr	r1, [pc, #72]	@ (8014940 <tcp_recv_null+0x64>)
 80148f8:	4812      	ldr	r0, [pc, #72]	@ (8014944 <tcp_recv_null+0x68>)
 80148fa:	f008 fa4d 	bl	801cd98 <iprintf>
 80148fe:	f06f 030f 	mvn.w	r3, #15
 8014902:	e016      	b.n	8014932 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d009      	beq.n	801491e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	891b      	ldrh	r3, [r3, #8]
 801490e:	4619      	mov	r1, r3
 8014910:	68b8      	ldr	r0, [r7, #8]
 8014912:	f7ff fab3 	bl	8013e7c <tcp_recved>
    pbuf_free(p);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f7fe fad6 	bl	8012ec8 <pbuf_free>
 801491c:	e008      	b.n	8014930 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801491e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d104      	bne.n	8014930 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014926:	68b8      	ldr	r0, [r7, #8]
 8014928:	f7fe ff88 	bl	801383c <tcp_close>
 801492c:	4603      	mov	r3, r0
 801492e:	e000      	b.n	8014932 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014930:	2300      	movs	r3, #0
}
 8014932:	4618      	mov	r0, r3
 8014934:	3710      	adds	r7, #16
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	0801fa6c 	.word	0x0801fa6c
 8014940:	0801ffdc 	.word	0x0801ffdc
 8014944:	0801fab0 	.word	0x0801fab0

08014948 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	4603      	mov	r3, r0
 8014950:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014956:	2b00      	cmp	r3, #0
 8014958:	db01      	blt.n	801495e <tcp_kill_prio+0x16>
 801495a:	79fb      	ldrb	r3, [r7, #7]
 801495c:	e000      	b.n	8014960 <tcp_kill_prio+0x18>
 801495e:	237f      	movs	r3, #127	@ 0x7f
 8014960:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014962:	7afb      	ldrb	r3, [r7, #11]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d034      	beq.n	80149d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014968:	7afb      	ldrb	r3, [r7, #11]
 801496a:	3b01      	subs	r3, #1
 801496c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801496e:	2300      	movs	r3, #0
 8014970:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014972:	2300      	movs	r3, #0
 8014974:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014976:	4b19      	ldr	r3, [pc, #100]	@ (80149dc <tcp_kill_prio+0x94>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	617b      	str	r3, [r7, #20]
 801497c:	e01f      	b.n	80149be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	7d5b      	ldrb	r3, [r3, #21]
 8014982:	7afa      	ldrb	r2, [r7, #11]
 8014984:	429a      	cmp	r2, r3
 8014986:	d80c      	bhi.n	80149a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801498c:	7afa      	ldrb	r2, [r7, #11]
 801498e:	429a      	cmp	r2, r3
 8014990:	d112      	bne.n	80149b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014992:	4b13      	ldr	r3, [pc, #76]	@ (80149e0 <tcp_kill_prio+0x98>)
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	6a1b      	ldr	r3, [r3, #32]
 801499a:	1ad3      	subs	r3, r2, r3
 801499c:	68fa      	ldr	r2, [r7, #12]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d80a      	bhi.n	80149b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80149a2:	4b0f      	ldr	r3, [pc, #60]	@ (80149e0 <tcp_kill_prio+0x98>)
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	697b      	ldr	r3, [r7, #20]
 80149a8:	6a1b      	ldr	r3, [r3, #32]
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	7d5b      	ldrb	r3, [r3, #21]
 80149b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	617b      	str	r3, [r7, #20]
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d1dc      	bne.n	801497e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d004      	beq.n	80149d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80149ca:	6938      	ldr	r0, [r7, #16]
 80149cc:	f7ff f87c 	bl	8013ac8 <tcp_abort>
 80149d0:	e000      	b.n	80149d4 <tcp_kill_prio+0x8c>
    return;
 80149d2:	bf00      	nop
  }
}
 80149d4:	3718      	adds	r7, #24
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	2000f27c 	.word	0x2000f27c
 80149e0:	2000f270 	.word	0x2000f270

080149e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	4603      	mov	r3, r0
 80149ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80149ee:	79fb      	ldrb	r3, [r7, #7]
 80149f0:	2b08      	cmp	r3, #8
 80149f2:	d009      	beq.n	8014a08 <tcp_kill_state+0x24>
 80149f4:	79fb      	ldrb	r3, [r7, #7]
 80149f6:	2b09      	cmp	r3, #9
 80149f8:	d006      	beq.n	8014a08 <tcp_kill_state+0x24>
 80149fa:	4b1a      	ldr	r3, [pc, #104]	@ (8014a64 <tcp_kill_state+0x80>)
 80149fc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8014a00:	4919      	ldr	r1, [pc, #100]	@ (8014a68 <tcp_kill_state+0x84>)
 8014a02:	481a      	ldr	r0, [pc, #104]	@ (8014a6c <tcp_kill_state+0x88>)
 8014a04:	f008 f9c8 	bl	801cd98 <iprintf>

  inactivity = 0;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a10:	4b17      	ldr	r3, [pc, #92]	@ (8014a70 <tcp_kill_state+0x8c>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	617b      	str	r3, [r7, #20]
 8014a16:	e017      	b.n	8014a48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	7d1b      	ldrb	r3, [r3, #20]
 8014a1c:	79fa      	ldrb	r2, [r7, #7]
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d10f      	bne.n	8014a42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014a22:	4b14      	ldr	r3, [pc, #80]	@ (8014a74 <tcp_kill_state+0x90>)
 8014a24:	681a      	ldr	r2, [r3, #0]
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	68fa      	ldr	r2, [r7, #12]
 8014a2e:	429a      	cmp	r2, r3
 8014a30:	d807      	bhi.n	8014a42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014a32:	4b10      	ldr	r3, [pc, #64]	@ (8014a74 <tcp_kill_state+0x90>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	6a1b      	ldr	r3, [r3, #32]
 8014a3a:	1ad3      	subs	r3, r2, r3
 8014a3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	68db      	ldr	r3, [r3, #12]
 8014a46:	617b      	str	r3, [r7, #20]
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d1e4      	bne.n	8014a18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d003      	beq.n	8014a5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014a54:	2100      	movs	r1, #0
 8014a56:	6938      	ldr	r0, [r7, #16]
 8014a58:	f7fe ff78 	bl	801394c <tcp_abandon>
  }
}
 8014a5c:	bf00      	nop
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	0801fa6c 	.word	0x0801fa6c
 8014a68:	0801fff8 	.word	0x0801fff8
 8014a6c:	0801fab0 	.word	0x0801fab0
 8014a70:	2000f27c 	.word	0x2000f27c
 8014a74:	2000f270 	.word	0x2000f270

08014a78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014a82:	2300      	movs	r3, #0
 8014a84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a86:	4b12      	ldr	r3, [pc, #72]	@ (8014ad0 <tcp_kill_timewait+0x58>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	60fb      	str	r3, [r7, #12]
 8014a8c:	e012      	b.n	8014ab4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014a8e:	4b11      	ldr	r3, [pc, #68]	@ (8014ad4 <tcp_kill_timewait+0x5c>)
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	6a1b      	ldr	r3, [r3, #32]
 8014a96:	1ad3      	subs	r3, r2, r3
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d807      	bhi.n	8014aae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ad4 <tcp_kill_timewait+0x5c>)
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	6a1b      	ldr	r3, [r3, #32]
 8014aa6:	1ad3      	subs	r3, r2, r3
 8014aa8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	68db      	ldr	r3, [r3, #12]
 8014ab2:	60fb      	str	r3, [r7, #12]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d1e9      	bne.n	8014a8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014ac0:	68b8      	ldr	r0, [r7, #8]
 8014ac2:	f7ff f801 	bl	8013ac8 <tcp_abort>
  }
}
 8014ac6:	bf00      	nop
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	2000f280 	.word	0x2000f280
 8014ad4:	2000f270 	.word	0x2000f270

08014ad8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b082      	sub	sp, #8
 8014adc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014ade:	4b10      	ldr	r3, [pc, #64]	@ (8014b20 <tcp_handle_closepend+0x48>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014ae4:	e014      	b.n	8014b10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	8b5b      	ldrh	r3, [r3, #26]
 8014af0:	f003 0308 	and.w	r3, r3, #8
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d009      	beq.n	8014b0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	8b5b      	ldrh	r3, [r3, #26]
 8014afc:	f023 0308 	bic.w	r3, r3, #8
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7fe fe2e 	bl	8013768 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d1e7      	bne.n	8014ae6 <tcp_handle_closepend+0xe>
  }
}
 8014b16:	bf00      	nop
 8014b18:	bf00      	nop
 8014b1a:	3708      	adds	r7, #8
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	bd80      	pop	{r7, pc}
 8014b20:	2000f27c 	.word	0x2000f27c

08014b24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014b2e:	2001      	movs	r0, #1
 8014b30:	f7fd fab0 	bl	8012094 <memp_malloc>
 8014b34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d126      	bne.n	8014b8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014b3c:	f7ff ffcc 	bl	8014ad8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014b40:	f7ff ff9a 	bl	8014a78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014b44:	2001      	movs	r0, #1
 8014b46:	f7fd faa5 	bl	8012094 <memp_malloc>
 8014b4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d11b      	bne.n	8014b8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014b52:	2009      	movs	r0, #9
 8014b54:	f7ff ff46 	bl	80149e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014b58:	2001      	movs	r0, #1
 8014b5a:	f7fd fa9b 	bl	8012094 <memp_malloc>
 8014b5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d111      	bne.n	8014b8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014b66:	2008      	movs	r0, #8
 8014b68:	f7ff ff3c 	bl	80149e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014b6c:	2001      	movs	r0, #1
 8014b6e:	f7fd fa91 	bl	8012094 <memp_malloc>
 8014b72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d107      	bne.n	8014b8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014b7a:	79fb      	ldrb	r3, [r7, #7]
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7ff fee3 	bl	8014948 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014b82:	2001      	movs	r0, #1
 8014b84:	f7fd fa86 	bl	8012094 <memp_malloc>
 8014b88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d03f      	beq.n	8014c10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014b90:	229c      	movs	r2, #156	@ 0x9c
 8014b92:	2100      	movs	r1, #0
 8014b94:	68f8      	ldr	r0, [r7, #12]
 8014b96:	f008 f99e 	bl	801ced6 <memset>
    pcb->prio = prio;
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	79fa      	ldrb	r2, [r7, #7]
 8014b9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014ba6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	22ff      	movs	r2, #255	@ 0xff
 8014bbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014bc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	2206      	movs	r2, #6
 8014bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2206      	movs	r2, #6
 8014bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014bdc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2201      	movs	r2, #1
 8014be2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8014be6:	4b0d      	ldr	r3, [pc, #52]	@ (8014c1c <tcp_alloc+0xf8>)
 8014be8:	681a      	ldr	r2, [r3, #0]
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014bee:	4b0c      	ldr	r3, [pc, #48]	@ (8014c20 <tcp_alloc+0xfc>)
 8014bf0:	781a      	ldrb	r2, [r3, #0]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8014bfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	4a08      	ldr	r2, [pc, #32]	@ (8014c24 <tcp_alloc+0x100>)
 8014c04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	4a07      	ldr	r2, [pc, #28]	@ (8014c28 <tcp_alloc+0x104>)
 8014c0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014c10:	68fb      	ldr	r3, [r7, #12]
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3710      	adds	r7, #16
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}
 8014c1a:	bf00      	nop
 8014c1c:	2000f270 	.word	0x2000f270
 8014c20:	2000f286 	.word	0x2000f286
 8014c24:	080148dd 	.word	0x080148dd
 8014c28:	006ddd00 	.word	0x006ddd00

08014c2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	4603      	mov	r3, r0
 8014c34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014c36:	2040      	movs	r0, #64	@ 0x40
 8014c38:	f7ff ff74 	bl	8014b24 <tcp_alloc>
 8014c3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d002      	beq.n	8014c5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	683a      	ldr	r2, [r7, #0]
 8014c5c:	611a      	str	r2, [r3, #16]
  }
}
 8014c5e:	bf00      	nop
 8014c60:	370c      	adds	r7, #12
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr
	...

08014c6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d00e      	beq.n	8014c9a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	7d1b      	ldrb	r3, [r3, #20]
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d106      	bne.n	8014c92 <tcp_recv+0x26>
 8014c84:	4b07      	ldr	r3, [pc, #28]	@ (8014ca4 <tcp_recv+0x38>)
 8014c86:	f240 72df 	movw	r2, #2015	@ 0x7df
 8014c8a:	4907      	ldr	r1, [pc, #28]	@ (8014ca8 <tcp_recv+0x3c>)
 8014c8c:	4807      	ldr	r0, [pc, #28]	@ (8014cac <tcp_recv+0x40>)
 8014c8e:	f008 f883 	bl	801cd98 <iprintf>
    pcb->recv = recv;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	683a      	ldr	r2, [r7, #0]
 8014c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8014c9a:	bf00      	nop
 8014c9c:	3708      	adds	r7, #8
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
 8014ca2:	bf00      	nop
 8014ca4:	0801fa6c 	.word	0x0801fa6c
 8014ca8:	08020008 	.word	0x08020008
 8014cac:	0801fab0 	.word	0x0801fab0

08014cb0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d00e      	beq.n	8014cde <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	7d1b      	ldrb	r3, [r3, #20]
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d106      	bne.n	8014cd6 <tcp_sent+0x26>
 8014cc8:	4b07      	ldr	r3, [pc, #28]	@ (8014ce8 <tcp_sent+0x38>)
 8014cca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8014cce:	4907      	ldr	r1, [pc, #28]	@ (8014cec <tcp_sent+0x3c>)
 8014cd0:	4807      	ldr	r0, [pc, #28]	@ (8014cf0 <tcp_sent+0x40>)
 8014cd2:	f008 f861 	bl	801cd98 <iprintf>
    pcb->sent = sent;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8014cde:	bf00      	nop
 8014ce0:	3708      	adds	r7, #8
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801fa6c 	.word	0x0801fa6c
 8014cec:	08020030 	.word	0x08020030
 8014cf0:	0801fab0 	.word	0x0801fab0

08014cf4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b082      	sub	sp, #8
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d00e      	beq.n	8014d22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	7d1b      	ldrb	r3, [r3, #20]
 8014d08:	2b01      	cmp	r3, #1
 8014d0a:	d106      	bne.n	8014d1a <tcp_err+0x26>
 8014d0c:	4b07      	ldr	r3, [pc, #28]	@ (8014d2c <tcp_err+0x38>)
 8014d0e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8014d12:	4907      	ldr	r1, [pc, #28]	@ (8014d30 <tcp_err+0x3c>)
 8014d14:	4807      	ldr	r0, [pc, #28]	@ (8014d34 <tcp_err+0x40>)
 8014d16:	f008 f83f 	bl	801cd98 <iprintf>
    pcb->errf = err;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	683a      	ldr	r2, [r7, #0]
 8014d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8014d22:	bf00      	nop
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	0801fa6c 	.word	0x0801fa6c
 8014d30:	08020058 	.word	0x08020058
 8014d34:	0801fab0 	.word	0x0801fab0

08014d38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b085      	sub	sp, #20
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d008      	beq.n	8014d5a <tcp_accept+0x22>
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	7d1b      	ldrb	r3, [r3, #20]
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d104      	bne.n	8014d5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	619a      	str	r2, [r3, #24]
  }
}
 8014d5a:	bf00      	nop
 8014d5c:	3714      	adds	r7, #20
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
	...

08014d68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b084      	sub	sp, #16
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	4613      	mov	r3, r2
 8014d74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d107      	bne.n	8014d8c <tcp_poll+0x24>
 8014d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8014db8 <tcp_poll+0x50>)
 8014d7e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8014d82:	490e      	ldr	r1, [pc, #56]	@ (8014dbc <tcp_poll+0x54>)
 8014d84:	480e      	ldr	r0, [pc, #56]	@ (8014dc0 <tcp_poll+0x58>)
 8014d86:	f008 f807 	bl	801cd98 <iprintf>
 8014d8a:	e011      	b.n	8014db0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	7d1b      	ldrb	r3, [r3, #20]
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d106      	bne.n	8014da2 <tcp_poll+0x3a>
 8014d94:	4b08      	ldr	r3, [pc, #32]	@ (8014db8 <tcp_poll+0x50>)
 8014d96:	f640 023e 	movw	r2, #2110	@ 0x83e
 8014d9a:	490a      	ldr	r1, [pc, #40]	@ (8014dc4 <tcp_poll+0x5c>)
 8014d9c:	4808      	ldr	r0, [pc, #32]	@ (8014dc0 <tcp_poll+0x58>)
 8014d9e:	f007 fffb 	bl	801cd98 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	79fa      	ldrb	r2, [r7, #7]
 8014dae:	775a      	strb	r2, [r3, #29]
}
 8014db0:	3710      	adds	r7, #16
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	0801fa6c 	.word	0x0801fa6c
 8014dbc:	08020080 	.word	0x08020080
 8014dc0:	0801fab0 	.word	0x0801fab0
 8014dc4:	08020098 	.word	0x08020098

08014dc8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d107      	bne.n	8014de6 <tcp_pcb_purge+0x1e>
 8014dd6:	4b21      	ldr	r3, [pc, #132]	@ (8014e5c <tcp_pcb_purge+0x94>)
 8014dd8:	f640 0251 	movw	r2, #2129	@ 0x851
 8014ddc:	4920      	ldr	r1, [pc, #128]	@ (8014e60 <tcp_pcb_purge+0x98>)
 8014dde:	4821      	ldr	r0, [pc, #132]	@ (8014e64 <tcp_pcb_purge+0x9c>)
 8014de0:	f007 ffda 	bl	801cd98 <iprintf>
 8014de4:	e037      	b.n	8014e56 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	7d1b      	ldrb	r3, [r3, #20]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d033      	beq.n	8014e56 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014df2:	2b0a      	cmp	r3, #10
 8014df4:	d02f      	beq.n	8014e56 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d02b      	beq.n	8014e56 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d007      	beq.n	8014e16 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7fe f85c 	bl	8012ec8 <pbuf_free>
      pcb->refused_data = NULL;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d002      	beq.n	8014e24 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 f986 	bl	8015130 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff fcdb 	bl	80147ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	f7ff fcd6 	bl	80147ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	2200      	movs	r2, #0
 8014e44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2200      	movs	r2, #0
 8014e52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014e56:	3708      	adds	r7, #8
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	0801fa6c 	.word	0x0801fa6c
 8014e60:	080200b8 	.word	0x080200b8
 8014e64:	0801fab0 	.word	0x0801fab0

08014e68 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <tcp_pcb_remove+0x1e>
 8014e78:	4b3e      	ldr	r3, [pc, #248]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014e7a:	f640 0283 	movw	r2, #2179	@ 0x883
 8014e7e:	493e      	ldr	r1, [pc, #248]	@ (8014f78 <tcp_pcb_remove+0x110>)
 8014e80:	483e      	ldr	r0, [pc, #248]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014e82:	f007 ff89 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d106      	bne.n	8014e9a <tcp_pcb_remove+0x32>
 8014e8c:	4b39      	ldr	r3, [pc, #228]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014e8e:	f640 0284 	movw	r2, #2180	@ 0x884
 8014e92:	493b      	ldr	r1, [pc, #236]	@ (8014f80 <tcp_pcb_remove+0x118>)
 8014e94:	4839      	ldr	r0, [pc, #228]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014e96:	f007 ff7f 	bl	801cd98 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	683a      	ldr	r2, [r7, #0]
 8014ea0:	429a      	cmp	r2, r3
 8014ea2:	d105      	bne.n	8014eb0 <tcp_pcb_remove+0x48>
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	68da      	ldr	r2, [r3, #12]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	601a      	str	r2, [r3, #0]
 8014eae:	e013      	b.n	8014ed8 <tcp_pcb_remove+0x70>
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	60fb      	str	r3, [r7, #12]
 8014eb6:	e00c      	b.n	8014ed2 <tcp_pcb_remove+0x6a>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	683a      	ldr	r2, [r7, #0]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d104      	bne.n	8014ecc <tcp_pcb_remove+0x64>
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	68da      	ldr	r2, [r3, #12]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	60da      	str	r2, [r3, #12]
 8014eca:	e005      	b.n	8014ed8 <tcp_pcb_remove+0x70>
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	60fb      	str	r3, [r7, #12]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d1ef      	bne.n	8014eb8 <tcp_pcb_remove+0x50>
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	2200      	movs	r2, #0
 8014edc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014ede:	6838      	ldr	r0, [r7, #0]
 8014ee0:	f7ff ff72 	bl	8014dc8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	7d1b      	ldrb	r3, [r3, #20]
 8014ee8:	2b0a      	cmp	r3, #10
 8014eea:	d013      	beq.n	8014f14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d00f      	beq.n	8014f14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	8b5b      	ldrh	r3, [r3, #26]
 8014ef8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d009      	beq.n	8014f14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	8b5b      	ldrh	r3, [r3, #26]
 8014f04:	f043 0302 	orr.w	r3, r3, #2
 8014f08:	b29a      	uxth	r2, r3
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f0e:	6838      	ldr	r0, [r7, #0]
 8014f10:	f003 fbc0 	bl	8018694 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	7d1b      	ldrb	r3, [r3, #20]
 8014f18:	2b01      	cmp	r3, #1
 8014f1a:	d020      	beq.n	8014f5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d006      	beq.n	8014f32 <tcp_pcb_remove+0xca>
 8014f24:	4b13      	ldr	r3, [pc, #76]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f26:	f640 0293 	movw	r2, #2195	@ 0x893
 8014f2a:	4916      	ldr	r1, [pc, #88]	@ (8014f84 <tcp_pcb_remove+0x11c>)
 8014f2c:	4813      	ldr	r0, [pc, #76]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f2e:	f007 ff33 	bl	801cd98 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d006      	beq.n	8014f48 <tcp_pcb_remove+0xe0>
 8014f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f3c:	f640 0294 	movw	r2, #2196	@ 0x894
 8014f40:	4911      	ldr	r1, [pc, #68]	@ (8014f88 <tcp_pcb_remove+0x120>)
 8014f42:	480e      	ldr	r0, [pc, #56]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f44:	f007 ff28 	bl	801cd98 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d006      	beq.n	8014f5e <tcp_pcb_remove+0xf6>
 8014f50:	4b08      	ldr	r3, [pc, #32]	@ (8014f74 <tcp_pcb_remove+0x10c>)
 8014f52:	f640 0296 	movw	r2, #2198	@ 0x896
 8014f56:	490d      	ldr	r1, [pc, #52]	@ (8014f8c <tcp_pcb_remove+0x124>)
 8014f58:	4808      	ldr	r0, [pc, #32]	@ (8014f7c <tcp_pcb_remove+0x114>)
 8014f5a:	f007 ff1d 	bl	801cd98 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	2200      	movs	r2, #0
 8014f62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2200      	movs	r2, #0
 8014f68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014f6a:	bf00      	nop
 8014f6c:	3710      	adds	r7, #16
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	0801fa6c 	.word	0x0801fa6c
 8014f78:	080200d4 	.word	0x080200d4
 8014f7c:	0801fab0 	.word	0x0801fab0
 8014f80:	080200f0 	.word	0x080200f0
 8014f84:	08020110 	.word	0x08020110
 8014f88:	08020128 	.word	0x08020128
 8014f8c:	08020144 	.word	0x08020144

08014f90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_next_iss+0x1c>
 8014f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8014fc8 <tcp_next_iss+0x38>)
 8014fa0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014fa4:	4909      	ldr	r1, [pc, #36]	@ (8014fcc <tcp_next_iss+0x3c>)
 8014fa6:	480a      	ldr	r0, [pc, #40]	@ (8014fd0 <tcp_next_iss+0x40>)
 8014fa8:	f007 fef6 	bl	801cd98 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014fac:	4b09      	ldr	r3, [pc, #36]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fae:	681a      	ldr	r2, [r3, #0]
 8014fb0:	4b09      	ldr	r3, [pc, #36]	@ (8014fd8 <tcp_next_iss+0x48>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	4a07      	ldr	r2, [pc, #28]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fb8:	6013      	str	r3, [r2, #0]
  return iss;
 8014fba:	4b06      	ldr	r3, [pc, #24]	@ (8014fd4 <tcp_next_iss+0x44>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	0801fa6c 	.word	0x0801fa6c
 8014fcc:	0802015c 	.word	0x0802015c
 8014fd0:	0801fab0 	.word	0x0801fab0
 8014fd4:	2000007c 	.word	0x2000007c
 8014fd8:	2000f270 	.word	0x2000f270

08014fdc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b086      	sub	sp, #24
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d106      	bne.n	8014ffe <tcp_eff_send_mss_netif+0x22>
 8014ff0:	4b14      	ldr	r3, [pc, #80]	@ (8015044 <tcp_eff_send_mss_netif+0x68>)
 8014ff2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014ff6:	4914      	ldr	r1, [pc, #80]	@ (8015048 <tcp_eff_send_mss_netif+0x6c>)
 8014ff8:	4814      	ldr	r0, [pc, #80]	@ (801504c <tcp_eff_send_mss_netif+0x70>)
 8014ffa:	f007 fecd 	bl	801cd98 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d101      	bne.n	8015008 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015004:	89fb      	ldrh	r3, [r7, #14]
 8015006:	e019      	b.n	801503c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801500c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801500e:	8afb      	ldrh	r3, [r7, #22]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d012      	beq.n	801503a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015014:	2328      	movs	r3, #40	@ 0x28
 8015016:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015018:	8afa      	ldrh	r2, [r7, #22]
 801501a:	8abb      	ldrh	r3, [r7, #20]
 801501c:	429a      	cmp	r2, r3
 801501e:	d904      	bls.n	801502a <tcp_eff_send_mss_netif+0x4e>
 8015020:	8afa      	ldrh	r2, [r7, #22]
 8015022:	8abb      	ldrh	r3, [r7, #20]
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	b29b      	uxth	r3, r3
 8015028:	e000      	b.n	801502c <tcp_eff_send_mss_netif+0x50>
 801502a:	2300      	movs	r3, #0
 801502c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801502e:	8a7a      	ldrh	r2, [r7, #18]
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	4293      	cmp	r3, r2
 8015034:	bf28      	it	cs
 8015036:	4613      	movcs	r3, r2
 8015038:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801503a:	89fb      	ldrh	r3, [r7, #14]
}
 801503c:	4618      	mov	r0, r3
 801503e:	3718      	adds	r7, #24
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}
 8015044:	0801fa6c 	.word	0x0801fa6c
 8015048:	08020178 	.word	0x08020178
 801504c:	0801fab0 	.word	0x0801fab0

08015050 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015050:	b580      	push	{r7, lr}
 8015052:	b084      	sub	sp, #16
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
 8015058:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d119      	bne.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015064:	4b10      	ldr	r3, [pc, #64]	@ (80150a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015066:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801506a:	4910      	ldr	r1, [pc, #64]	@ (80150ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801506c:	4810      	ldr	r0, [pc, #64]	@ (80150b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801506e:	f007 fe93 	bl	801cd98 <iprintf>

  while (pcb != NULL) {
 8015072:	e011      	b.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	429a      	cmp	r2, r3
 801507e:	d108      	bne.n	8015092 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7fe fd1e 	bl	8013ac8 <tcp_abort>
      pcb = next;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	60fb      	str	r3, [r7, #12]
 8015090:	e002      	b.n	8015098 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d1ea      	bne.n	8015074 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801509e:	bf00      	nop
 80150a0:	bf00      	nop
 80150a2:	3710      	adds	r7, #16
 80150a4:	46bd      	mov	sp, r7
 80150a6:	bd80      	pop	{r7, pc}
 80150a8:	0801fa6c 	.word	0x0801fa6c
 80150ac:	080201a0 	.word	0x080201a0
 80150b0:	0801fab0 	.word	0x0801fab0

080150b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b084      	sub	sp, #16
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
 80150bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d02a      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d026      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80150cc:	4b15      	ldr	r3, [pc, #84]	@ (8015124 <tcp_netif_ip_addr_changed+0x70>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	4619      	mov	r1, r3
 80150d2:	6878      	ldr	r0, [r7, #4]
 80150d4:	f7ff ffbc 	bl	8015050 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80150d8:	4b13      	ldr	r3, [pc, #76]	@ (8015128 <tcp_netif_ip_addr_changed+0x74>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4619      	mov	r1, r3
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f7ff ffb6 	bl	8015050 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d017      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d013      	beq.n	801511a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80150f2:	4b0e      	ldr	r3, [pc, #56]	@ (801512c <tcp_netif_ip_addr_changed+0x78>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	60fb      	str	r3, [r7, #12]
 80150f8:	e00c      	b.n	8015114 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	429a      	cmp	r2, r3
 8015104:	d103      	bne.n	801510e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	60fb      	str	r3, [r7, #12]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d1ef      	bne.n	80150fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801511a:	bf00      	nop
 801511c:	3710      	adds	r7, #16
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	2000f27c 	.word	0x2000f27c
 8015128:	2000f274 	.word	0x2000f274
 801512c:	2000f278 	.word	0x2000f278

08015130 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801513c:	2b00      	cmp	r3, #0
 801513e:	d007      	beq.n	8015150 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015144:	4618      	mov	r0, r3
 8015146:	f7ff fb51 	bl	80147ec <tcp_segs_free>
    pcb->ooseq = NULL;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2200      	movs	r2, #0
 801514e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015150:	bf00      	nop
 8015152:	3708      	adds	r7, #8
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}

08015158 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015158:	b590      	push	{r4, r7, lr}
 801515a:	b08d      	sub	sp, #52	@ 0x34
 801515c:	af04      	add	r7, sp, #16
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d105      	bne.n	8015174 <tcp_input+0x1c>
 8015168:	4b9b      	ldr	r3, [pc, #620]	@ (80153d8 <tcp_input+0x280>)
 801516a:	2283      	movs	r2, #131	@ 0x83
 801516c:	499b      	ldr	r1, [pc, #620]	@ (80153dc <tcp_input+0x284>)
 801516e:	489c      	ldr	r0, [pc, #624]	@ (80153e0 <tcp_input+0x288>)
 8015170:	f007 fe12 	bl	801cd98 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	4a9a      	ldr	r2, [pc, #616]	@ (80153e4 <tcp_input+0x28c>)
 801517a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	895b      	ldrh	r3, [r3, #10]
 8015180:	2b13      	cmp	r3, #19
 8015182:	f240 83d1 	bls.w	8015928 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015186:	4b98      	ldr	r3, [pc, #608]	@ (80153e8 <tcp_input+0x290>)
 8015188:	695b      	ldr	r3, [r3, #20]
 801518a:	4a97      	ldr	r2, [pc, #604]	@ (80153e8 <tcp_input+0x290>)
 801518c:	6812      	ldr	r2, [r2, #0]
 801518e:	4611      	mov	r1, r2
 8015190:	4618      	mov	r0, r3
 8015192:	f006 fbc9 	bl	801b928 <ip4_addr_isbroadcast_u32>
 8015196:	4603      	mov	r3, r0
 8015198:	2b00      	cmp	r3, #0
 801519a:	f040 83c7 	bne.w	801592c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801519e:	4b92      	ldr	r3, [pc, #584]	@ (80153e8 <tcp_input+0x290>)
 80151a0:	695b      	ldr	r3, [r3, #20]
 80151a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80151a6:	2be0      	cmp	r3, #224	@ 0xe0
 80151a8:	f000 83c0 	beq.w	801592c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80151ac:	4b8d      	ldr	r3, [pc, #564]	@ (80153e4 <tcp_input+0x28c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	899b      	ldrh	r3, [r3, #12]
 80151b2:	b29b      	uxth	r3, r3
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7fc fa5f 	bl	8011678 <lwip_htons>
 80151ba:	4603      	mov	r3, r0
 80151bc:	0b1b      	lsrs	r3, r3, #12
 80151be:	b29b      	uxth	r3, r3
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80151c6:	7cbb      	ldrb	r3, [r7, #18]
 80151c8:	2b13      	cmp	r3, #19
 80151ca:	f240 83b1 	bls.w	8015930 <tcp_input+0x7d8>
 80151ce:	7cbb      	ldrb	r3, [r7, #18]
 80151d0:	b29a      	uxth	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	891b      	ldrh	r3, [r3, #8]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	f200 83aa 	bhi.w	8015930 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80151dc:	7cbb      	ldrb	r3, [r7, #18]
 80151de:	b29b      	uxth	r3, r3
 80151e0:	3b14      	subs	r3, #20
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	4b81      	ldr	r3, [pc, #516]	@ (80153ec <tcp_input+0x294>)
 80151e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80151e8:	4b81      	ldr	r3, [pc, #516]	@ (80153f0 <tcp_input+0x298>)
 80151ea:	2200      	movs	r2, #0
 80151ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	895a      	ldrh	r2, [r3, #10]
 80151f2:	7cbb      	ldrb	r3, [r7, #18]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d309      	bcc.n	801520e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80151fa:	4b7c      	ldr	r3, [pc, #496]	@ (80153ec <tcp_input+0x294>)
 80151fc:	881a      	ldrh	r2, [r3, #0]
 80151fe:	4b7d      	ldr	r3, [pc, #500]	@ (80153f4 <tcp_input+0x29c>)
 8015200:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015202:	7cbb      	ldrb	r3, [r7, #18]
 8015204:	4619      	mov	r1, r3
 8015206:	6878      	ldr	r0, [r7, #4]
 8015208:	f7fd fdd8 	bl	8012dbc <pbuf_remove_header>
 801520c:	e04e      	b.n	80152ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d105      	bne.n	8015222 <tcp_input+0xca>
 8015216:	4b70      	ldr	r3, [pc, #448]	@ (80153d8 <tcp_input+0x280>)
 8015218:	22c2      	movs	r2, #194	@ 0xc2
 801521a:	4977      	ldr	r1, [pc, #476]	@ (80153f8 <tcp_input+0x2a0>)
 801521c:	4870      	ldr	r0, [pc, #448]	@ (80153e0 <tcp_input+0x288>)
 801521e:	f007 fdbb 	bl	801cd98 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015222:	2114      	movs	r1, #20
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7fd fdc9 	bl	8012dbc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	895a      	ldrh	r2, [r3, #10]
 801522e:	4b71      	ldr	r3, [pc, #452]	@ (80153f4 <tcp_input+0x29c>)
 8015230:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015232:	4b6e      	ldr	r3, [pc, #440]	@ (80153ec <tcp_input+0x294>)
 8015234:	881a      	ldrh	r2, [r3, #0]
 8015236:	4b6f      	ldr	r3, [pc, #444]	@ (80153f4 <tcp_input+0x29c>)
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	1ad3      	subs	r3, r2, r3
 801523c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801523e:	4b6d      	ldr	r3, [pc, #436]	@ (80153f4 <tcp_input+0x29c>)
 8015240:	881b      	ldrh	r3, [r3, #0]
 8015242:	4619      	mov	r1, r3
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7fd fdb9 	bl	8012dbc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	895b      	ldrh	r3, [r3, #10]
 8015250:	8a3a      	ldrh	r2, [r7, #16]
 8015252:	429a      	cmp	r2, r3
 8015254:	f200 836e 	bhi.w	8015934 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	4a64      	ldr	r2, [pc, #400]	@ (80153f0 <tcp_input+0x298>)
 8015260:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	8a3a      	ldrh	r2, [r7, #16]
 8015268:	4611      	mov	r1, r2
 801526a:	4618      	mov	r0, r3
 801526c:	f7fd fda6 	bl	8012dbc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	891a      	ldrh	r2, [r3, #8]
 8015274:	8a3b      	ldrh	r3, [r7, #16]
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	b29a      	uxth	r2, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	895b      	ldrh	r3, [r3, #10]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d005      	beq.n	8015292 <tcp_input+0x13a>
 8015286:	4b54      	ldr	r3, [pc, #336]	@ (80153d8 <tcp_input+0x280>)
 8015288:	22df      	movs	r2, #223	@ 0xdf
 801528a:	495c      	ldr	r1, [pc, #368]	@ (80153fc <tcp_input+0x2a4>)
 801528c:	4854      	ldr	r0, [pc, #336]	@ (80153e0 <tcp_input+0x288>)
 801528e:	f007 fd83 	bl	801cd98 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	891a      	ldrh	r2, [r3, #8]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	891b      	ldrh	r3, [r3, #8]
 801529c:	429a      	cmp	r2, r3
 801529e:	d005      	beq.n	80152ac <tcp_input+0x154>
 80152a0:	4b4d      	ldr	r3, [pc, #308]	@ (80153d8 <tcp_input+0x280>)
 80152a2:	22e0      	movs	r2, #224	@ 0xe0
 80152a4:	4956      	ldr	r1, [pc, #344]	@ (8015400 <tcp_input+0x2a8>)
 80152a6:	484e      	ldr	r0, [pc, #312]	@ (80153e0 <tcp_input+0x288>)
 80152a8:	f007 fd76 	bl	801cd98 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80152ac:	4b4d      	ldr	r3, [pc, #308]	@ (80153e4 <tcp_input+0x28c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	881b      	ldrh	r3, [r3, #0]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4a4b      	ldr	r2, [pc, #300]	@ (80153e4 <tcp_input+0x28c>)
 80152b6:	6814      	ldr	r4, [r2, #0]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fc f9dd 	bl	8011678 <lwip_htons>
 80152be:	4603      	mov	r3, r0
 80152c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80152c2:	4b48      	ldr	r3, [pc, #288]	@ (80153e4 <tcp_input+0x28c>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	885b      	ldrh	r3, [r3, #2]
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	4a46      	ldr	r2, [pc, #280]	@ (80153e4 <tcp_input+0x28c>)
 80152cc:	6814      	ldr	r4, [r2, #0]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7fc f9d2 	bl	8011678 <lwip_htons>
 80152d4:	4603      	mov	r3, r0
 80152d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80152d8:	4b42      	ldr	r3, [pc, #264]	@ (80153e4 <tcp_input+0x28c>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4a41      	ldr	r2, [pc, #260]	@ (80153e4 <tcp_input+0x28c>)
 80152e0:	6814      	ldr	r4, [r2, #0]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7fc f9dd 	bl	80116a2 <lwip_htonl>
 80152e8:	4603      	mov	r3, r0
 80152ea:	6063      	str	r3, [r4, #4]
 80152ec:	6863      	ldr	r3, [r4, #4]
 80152ee:	4a45      	ldr	r2, [pc, #276]	@ (8015404 <tcp_input+0x2ac>)
 80152f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80152f2:	4b3c      	ldr	r3, [pc, #240]	@ (80153e4 <tcp_input+0x28c>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	689b      	ldr	r3, [r3, #8]
 80152f8:	4a3a      	ldr	r2, [pc, #232]	@ (80153e4 <tcp_input+0x28c>)
 80152fa:	6814      	ldr	r4, [r2, #0]
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fc f9d0 	bl	80116a2 <lwip_htonl>
 8015302:	4603      	mov	r3, r0
 8015304:	60a3      	str	r3, [r4, #8]
 8015306:	68a3      	ldr	r3, [r4, #8]
 8015308:	4a3f      	ldr	r2, [pc, #252]	@ (8015408 <tcp_input+0x2b0>)
 801530a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801530c:	4b35      	ldr	r3, [pc, #212]	@ (80153e4 <tcp_input+0x28c>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	89db      	ldrh	r3, [r3, #14]
 8015312:	b29b      	uxth	r3, r3
 8015314:	4a33      	ldr	r2, [pc, #204]	@ (80153e4 <tcp_input+0x28c>)
 8015316:	6814      	ldr	r4, [r2, #0]
 8015318:	4618      	mov	r0, r3
 801531a:	f7fc f9ad 	bl	8011678 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015322:	4b30      	ldr	r3, [pc, #192]	@ (80153e4 <tcp_input+0x28c>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	899b      	ldrh	r3, [r3, #12]
 8015328:	b29b      	uxth	r3, r3
 801532a:	4618      	mov	r0, r3
 801532c:	f7fc f9a4 	bl	8011678 <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015338:	b2da      	uxtb	r2, r3
 801533a:	4b34      	ldr	r3, [pc, #208]	@ (801540c <tcp_input+0x2b4>)
 801533c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	891a      	ldrh	r2, [r3, #8]
 8015342:	4b33      	ldr	r3, [pc, #204]	@ (8015410 <tcp_input+0x2b8>)
 8015344:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015346:	4b31      	ldr	r3, [pc, #196]	@ (801540c <tcp_input+0x2b4>)
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	f003 0303 	and.w	r3, r3, #3
 801534e:	2b00      	cmp	r3, #0
 8015350:	d00c      	beq.n	801536c <tcp_input+0x214>
    tcplen++;
 8015352:	4b2f      	ldr	r3, [pc, #188]	@ (8015410 <tcp_input+0x2b8>)
 8015354:	881b      	ldrh	r3, [r3, #0]
 8015356:	3301      	adds	r3, #1
 8015358:	b29a      	uxth	r2, r3
 801535a:	4b2d      	ldr	r3, [pc, #180]	@ (8015410 <tcp_input+0x2b8>)
 801535c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	891a      	ldrh	r2, [r3, #8]
 8015362:	4b2b      	ldr	r3, [pc, #172]	@ (8015410 <tcp_input+0x2b8>)
 8015364:	881b      	ldrh	r3, [r3, #0]
 8015366:	429a      	cmp	r2, r3
 8015368:	f200 82e6 	bhi.w	8015938 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801536c:	2300      	movs	r3, #0
 801536e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015370:	4b28      	ldr	r3, [pc, #160]	@ (8015414 <tcp_input+0x2bc>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	61fb      	str	r3, [r7, #28]
 8015376:	e09d      	b.n	80154b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	7d1b      	ldrb	r3, [r3, #20]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d105      	bne.n	801538c <tcp_input+0x234>
 8015380:	4b15      	ldr	r3, [pc, #84]	@ (80153d8 <tcp_input+0x280>)
 8015382:	22fb      	movs	r2, #251	@ 0xfb
 8015384:	4924      	ldr	r1, [pc, #144]	@ (8015418 <tcp_input+0x2c0>)
 8015386:	4816      	ldr	r0, [pc, #88]	@ (80153e0 <tcp_input+0x288>)
 8015388:	f007 fd06 	bl	801cd98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	7d1b      	ldrb	r3, [r3, #20]
 8015390:	2b0a      	cmp	r3, #10
 8015392:	d105      	bne.n	80153a0 <tcp_input+0x248>
 8015394:	4b10      	ldr	r3, [pc, #64]	@ (80153d8 <tcp_input+0x280>)
 8015396:	22fc      	movs	r2, #252	@ 0xfc
 8015398:	4920      	ldr	r1, [pc, #128]	@ (801541c <tcp_input+0x2c4>)
 801539a:	4811      	ldr	r0, [pc, #68]	@ (80153e0 <tcp_input+0x288>)
 801539c:	f007 fcfc 	bl	801cd98 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	7d1b      	ldrb	r3, [r3, #20]
 80153a4:	2b01      	cmp	r3, #1
 80153a6:	d105      	bne.n	80153b4 <tcp_input+0x25c>
 80153a8:	4b0b      	ldr	r3, [pc, #44]	@ (80153d8 <tcp_input+0x280>)
 80153aa:	22fd      	movs	r2, #253	@ 0xfd
 80153ac:	491c      	ldr	r1, [pc, #112]	@ (8015420 <tcp_input+0x2c8>)
 80153ae:	480c      	ldr	r0, [pc, #48]	@ (80153e0 <tcp_input+0x288>)
 80153b0:	f007 fcf2 	bl	801cd98 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	7a1b      	ldrb	r3, [r3, #8]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d033      	beq.n	8015424 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	7a1a      	ldrb	r2, [r3, #8]
 80153c0:	4b09      	ldr	r3, [pc, #36]	@ (80153e8 <tcp_input+0x290>)
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80153c8:	3301      	adds	r3, #1
 80153ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d029      	beq.n	8015424 <tcp_input+0x2cc>
      prev = pcb;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	61bb      	str	r3, [r7, #24]
      continue;
 80153d4:	e06b      	b.n	80154ae <tcp_input+0x356>
 80153d6:	bf00      	nop
 80153d8:	080201d4 	.word	0x080201d4
 80153dc:	08020208 	.word	0x08020208
 80153e0:	08020220 	.word	0x08020220
 80153e4:	2000f298 	.word	0x2000f298
 80153e8:	2000bb1c 	.word	0x2000bb1c
 80153ec:	2000f29c 	.word	0x2000f29c
 80153f0:	2000f2a0 	.word	0x2000f2a0
 80153f4:	2000f29e 	.word	0x2000f29e
 80153f8:	08020248 	.word	0x08020248
 80153fc:	08020258 	.word	0x08020258
 8015400:	08020264 	.word	0x08020264
 8015404:	2000f2a8 	.word	0x2000f2a8
 8015408:	2000f2ac 	.word	0x2000f2ac
 801540c:	2000f2b4 	.word	0x2000f2b4
 8015410:	2000f2b2 	.word	0x2000f2b2
 8015414:	2000f27c 	.word	0x2000f27c
 8015418:	08020284 	.word	0x08020284
 801541c:	080202ac 	.word	0x080202ac
 8015420:	080202d8 	.word	0x080202d8
    }

    if (pcb->remote_port == tcphdr->src &&
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	8b1a      	ldrh	r2, [r3, #24]
 8015428:	4b72      	ldr	r3, [pc, #456]	@ (80155f4 <tcp_input+0x49c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	b29b      	uxth	r3, r3
 8015430:	429a      	cmp	r2, r3
 8015432:	d13a      	bne.n	80154aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	8ada      	ldrh	r2, [r3, #22]
 8015438:	4b6e      	ldr	r3, [pc, #440]	@ (80155f4 <tcp_input+0x49c>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	885b      	ldrh	r3, [r3, #2]
 801543e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015440:	429a      	cmp	r2, r3
 8015442:	d132      	bne.n	80154aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015444:	69fb      	ldr	r3, [r7, #28]
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	4b6b      	ldr	r3, [pc, #428]	@ (80155f8 <tcp_input+0x4a0>)
 801544a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801544c:	429a      	cmp	r2, r3
 801544e:	d12c      	bne.n	80154aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015450:	69fb      	ldr	r3, [r7, #28]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	4b68      	ldr	r3, [pc, #416]	@ (80155f8 <tcp_input+0x4a0>)
 8015456:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015458:	429a      	cmp	r2, r3
 801545a:	d126      	bne.n	80154aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	429a      	cmp	r2, r3
 8015464:	d106      	bne.n	8015474 <tcp_input+0x31c>
 8015466:	4b65      	ldr	r3, [pc, #404]	@ (80155fc <tcp_input+0x4a4>)
 8015468:	f240 120d 	movw	r2, #269	@ 0x10d
 801546c:	4964      	ldr	r1, [pc, #400]	@ (8015600 <tcp_input+0x4a8>)
 801546e:	4865      	ldr	r0, [pc, #404]	@ (8015604 <tcp_input+0x4ac>)
 8015470:	f007 fc92 	bl	801cd98 <iprintf>
      if (prev != NULL) {
 8015474:	69bb      	ldr	r3, [r7, #24]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00a      	beq.n	8015490 <tcp_input+0x338>
        prev->next = pcb->next;
 801547a:	69fb      	ldr	r3, [r7, #28]
 801547c:	68da      	ldr	r2, [r3, #12]
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015482:	4b61      	ldr	r3, [pc, #388]	@ (8015608 <tcp_input+0x4b0>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	69fb      	ldr	r3, [r7, #28]
 8015488:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801548a:	4a5f      	ldr	r2, [pc, #380]	@ (8015608 <tcp_input+0x4b0>)
 801548c:	69fb      	ldr	r3, [r7, #28]
 801548e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	69fa      	ldr	r2, [r7, #28]
 8015496:	429a      	cmp	r2, r3
 8015498:	d111      	bne.n	80154be <tcp_input+0x366>
 801549a:	4b58      	ldr	r3, [pc, #352]	@ (80155fc <tcp_input+0x4a4>)
 801549c:	f240 1215 	movw	r2, #277	@ 0x115
 80154a0:	495a      	ldr	r1, [pc, #360]	@ (801560c <tcp_input+0x4b4>)
 80154a2:	4858      	ldr	r0, [pc, #352]	@ (8015604 <tcp_input+0x4ac>)
 80154a4:	f007 fc78 	bl	801cd98 <iprintf>
      break;
 80154a8:	e009      	b.n	80154be <tcp_input+0x366>
    }
    prev = pcb;
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154ae:	69fb      	ldr	r3, [r7, #28]
 80154b0:	68db      	ldr	r3, [r3, #12]
 80154b2:	61fb      	str	r3, [r7, #28]
 80154b4:	69fb      	ldr	r3, [r7, #28]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	f47f af5e 	bne.w	8015378 <tcp_input+0x220>
 80154bc:	e000      	b.n	80154c0 <tcp_input+0x368>
      break;
 80154be:	bf00      	nop
  }

  if (pcb == NULL) {
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	f040 80aa 	bne.w	801561c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80154c8:	4b51      	ldr	r3, [pc, #324]	@ (8015610 <tcp_input+0x4b8>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	61fb      	str	r3, [r7, #28]
 80154ce:	e03f      	b.n	8015550 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	7d1b      	ldrb	r3, [r3, #20]
 80154d4:	2b0a      	cmp	r3, #10
 80154d6:	d006      	beq.n	80154e6 <tcp_input+0x38e>
 80154d8:	4b48      	ldr	r3, [pc, #288]	@ (80155fc <tcp_input+0x4a4>)
 80154da:	f240 121f 	movw	r2, #287	@ 0x11f
 80154de:	494d      	ldr	r1, [pc, #308]	@ (8015614 <tcp_input+0x4bc>)
 80154e0:	4848      	ldr	r0, [pc, #288]	@ (8015604 <tcp_input+0x4ac>)
 80154e2:	f007 fc59 	bl	801cd98 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	7a1b      	ldrb	r3, [r3, #8]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d009      	beq.n	8015502 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	7a1a      	ldrb	r2, [r3, #8]
 80154f2:	4b41      	ldr	r3, [pc, #260]	@ (80155f8 <tcp_input+0x4a0>)
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80154fa:	3301      	adds	r3, #1
 80154fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154fe:	429a      	cmp	r2, r3
 8015500:	d122      	bne.n	8015548 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	8b1a      	ldrh	r2, [r3, #24]
 8015506:	4b3b      	ldr	r3, [pc, #236]	@ (80155f4 <tcp_input+0x49c>)
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	b29b      	uxth	r3, r3
 801550e:	429a      	cmp	r2, r3
 8015510:	d11b      	bne.n	801554a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	8ada      	ldrh	r2, [r3, #22]
 8015516:	4b37      	ldr	r3, [pc, #220]	@ (80155f4 <tcp_input+0x49c>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	885b      	ldrh	r3, [r3, #2]
 801551c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801551e:	429a      	cmp	r2, r3
 8015520:	d113      	bne.n	801554a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015522:	69fb      	ldr	r3, [r7, #28]
 8015524:	685a      	ldr	r2, [r3, #4]
 8015526:	4b34      	ldr	r3, [pc, #208]	@ (80155f8 <tcp_input+0x4a0>)
 8015528:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801552a:	429a      	cmp	r2, r3
 801552c:	d10d      	bne.n	801554a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801552e:	69fb      	ldr	r3, [r7, #28]
 8015530:	681a      	ldr	r2, [r3, #0]
 8015532:	4b31      	ldr	r3, [pc, #196]	@ (80155f8 <tcp_input+0x4a0>)
 8015534:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015536:	429a      	cmp	r2, r3
 8015538:	d107      	bne.n	801554a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801553a:	69f8      	ldr	r0, [r7, #28]
 801553c:	f000 fb56 	bl	8015bec <tcp_timewait_input>
        }
        pbuf_free(p);
 8015540:	6878      	ldr	r0, [r7, #4]
 8015542:	f7fd fcc1 	bl	8012ec8 <pbuf_free>
        return;
 8015546:	e1fd      	b.n	8015944 <tcp_input+0x7ec>
        continue;
 8015548:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801554a:	69fb      	ldr	r3, [r7, #28]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	61fb      	str	r3, [r7, #28]
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d1bc      	bne.n	80154d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015556:	2300      	movs	r3, #0
 8015558:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801555a:	4b2f      	ldr	r3, [pc, #188]	@ (8015618 <tcp_input+0x4c0>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	617b      	str	r3, [r7, #20]
 8015560:	e02a      	b.n	80155b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	7a1b      	ldrb	r3, [r3, #8]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00c      	beq.n	8015584 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	7a1a      	ldrb	r2, [r3, #8]
 801556e:	4b22      	ldr	r3, [pc, #136]	@ (80155f8 <tcp_input+0x4a0>)
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015576:	3301      	adds	r3, #1
 8015578:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801557a:	429a      	cmp	r2, r3
 801557c:	d002      	beq.n	8015584 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	61bb      	str	r3, [r7, #24]
        continue;
 8015582:	e016      	b.n	80155b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	8ada      	ldrh	r2, [r3, #22]
 8015588:	4b1a      	ldr	r3, [pc, #104]	@ (80155f4 <tcp_input+0x49c>)
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	885b      	ldrh	r3, [r3, #2]
 801558e:	b29b      	uxth	r3, r3
 8015590:	429a      	cmp	r2, r3
 8015592:	d10c      	bne.n	80155ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	4b17      	ldr	r3, [pc, #92]	@ (80155f8 <tcp_input+0x4a0>)
 801559a:	695b      	ldr	r3, [r3, #20]
 801559c:	429a      	cmp	r2, r3
 801559e:	d00f      	beq.n	80155c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00d      	beq.n	80155c2 <tcp_input+0x46a>
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d009      	beq.n	80155c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	68db      	ldr	r3, [r3, #12]
 80155b6:	617b      	str	r3, [r7, #20]
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d1d1      	bne.n	8015562 <tcp_input+0x40a>
 80155be:	e000      	b.n	80155c2 <tcp_input+0x46a>
            break;
 80155c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d029      	beq.n	801561c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d00a      	beq.n	80155e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	68da      	ldr	r2, [r3, #12]
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80155d6:	4b10      	ldr	r3, [pc, #64]	@ (8015618 <tcp_input+0x4c0>)
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80155de:	4a0e      	ldr	r2, [pc, #56]	@ (8015618 <tcp_input+0x4c0>)
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80155e4:	6978      	ldr	r0, [r7, #20]
 80155e6:	f000 fa03 	bl	80159f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7fd fc6c 	bl	8012ec8 <pbuf_free>
      return;
 80155f0:	e1a8      	b.n	8015944 <tcp_input+0x7ec>
 80155f2:	bf00      	nop
 80155f4:	2000f298 	.word	0x2000f298
 80155f8:	2000bb1c 	.word	0x2000bb1c
 80155fc:	080201d4 	.word	0x080201d4
 8015600:	08020300 	.word	0x08020300
 8015604:	08020220 	.word	0x08020220
 8015608:	2000f27c 	.word	0x2000f27c
 801560c:	0802032c 	.word	0x0802032c
 8015610:	2000f280 	.word	0x2000f280
 8015614:	08020358 	.word	0x08020358
 8015618:	2000f278 	.word	0x2000f278
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	2b00      	cmp	r3, #0
 8015620:	f000 8158 	beq.w	80158d4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015624:	4b95      	ldr	r3, [pc, #596]	@ (801587c <tcp_input+0x724>)
 8015626:	2200      	movs	r2, #0
 8015628:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	891a      	ldrh	r2, [r3, #8]
 801562e:	4b93      	ldr	r3, [pc, #588]	@ (801587c <tcp_input+0x724>)
 8015630:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015632:	4a92      	ldr	r2, [pc, #584]	@ (801587c <tcp_input+0x724>)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015638:	4b91      	ldr	r3, [pc, #580]	@ (8015880 <tcp_input+0x728>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4a8f      	ldr	r2, [pc, #572]	@ (801587c <tcp_input+0x724>)
 801563e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015640:	4b90      	ldr	r3, [pc, #576]	@ (8015884 <tcp_input+0x72c>)
 8015642:	2200      	movs	r2, #0
 8015644:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015646:	4b90      	ldr	r3, [pc, #576]	@ (8015888 <tcp_input+0x730>)
 8015648:	2200      	movs	r2, #0
 801564a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801564c:	4b8f      	ldr	r3, [pc, #572]	@ (801588c <tcp_input+0x734>)
 801564e:	2200      	movs	r2, #0
 8015650:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015652:	4b8f      	ldr	r3, [pc, #572]	@ (8015890 <tcp_input+0x738>)
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	f003 0308 	and.w	r3, r3, #8
 801565a:	2b00      	cmp	r3, #0
 801565c:	d006      	beq.n	801566c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	7b5b      	ldrb	r3, [r3, #13]
 8015662:	f043 0301 	orr.w	r3, r3, #1
 8015666:	b2da      	uxtb	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015670:	2b00      	cmp	r3, #0
 8015672:	d017      	beq.n	80156a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015674:	69f8      	ldr	r0, [r7, #28]
 8015676:	f7ff f83d 	bl	80146f4 <tcp_process_refused_data>
 801567a:	4603      	mov	r3, r0
 801567c:	f113 0f0d 	cmn.w	r3, #13
 8015680:	d007      	beq.n	8015692 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015682:	69fb      	ldr	r3, [r7, #28]
 8015684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015686:	2b00      	cmp	r3, #0
 8015688:	d00c      	beq.n	80156a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801568a:	4b82      	ldr	r3, [pc, #520]	@ (8015894 <tcp_input+0x73c>)
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d008      	beq.n	80156a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015696:	2b00      	cmp	r3, #0
 8015698:	f040 80e3 	bne.w	8015862 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801569c:	69f8      	ldr	r0, [r7, #28]
 801569e:	f003 fdff 	bl	80192a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80156a2:	e0de      	b.n	8015862 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80156a4:	4a7c      	ldr	r2, [pc, #496]	@ (8015898 <tcp_input+0x740>)
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80156aa:	69f8      	ldr	r0, [r7, #28]
 80156ac:	f000 fb18 	bl	8015ce0 <tcp_process>
 80156b0:	4603      	mov	r3, r0
 80156b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80156b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156b8:	f113 0f0d 	cmn.w	r3, #13
 80156bc:	f000 80d3 	beq.w	8015866 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80156c0:	4b71      	ldr	r3, [pc, #452]	@ (8015888 <tcp_input+0x730>)
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	f003 0308 	and.w	r3, r3, #8
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d015      	beq.n	80156f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d008      	beq.n	80156e8 <tcp_input+0x590>
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80156dc:	69fa      	ldr	r2, [r7, #28]
 80156de:	6912      	ldr	r2, [r2, #16]
 80156e0:	f06f 010d 	mvn.w	r1, #13
 80156e4:	4610      	mov	r0, r2
 80156e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80156e8:	69f9      	ldr	r1, [r7, #28]
 80156ea:	486c      	ldr	r0, [pc, #432]	@ (801589c <tcp_input+0x744>)
 80156ec:	f7ff fbbc 	bl	8014e68 <tcp_pcb_remove>
        tcp_free(pcb);
 80156f0:	69f8      	ldr	r0, [r7, #28]
 80156f2:	f7fd fea5 	bl	8013440 <tcp_free>
 80156f6:	e0da      	b.n	80158ae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80156f8:	2300      	movs	r3, #0
 80156fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80156fc:	4b63      	ldr	r3, [pc, #396]	@ (801588c <tcp_input+0x734>)
 80156fe:	881b      	ldrh	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d01d      	beq.n	8015740 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015704:	4b61      	ldr	r3, [pc, #388]	@ (801588c <tcp_input+0x734>)
 8015706:	881b      	ldrh	r3, [r3, #0]
 8015708:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801570a:	69fb      	ldr	r3, [r7, #28]
 801570c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015710:	2b00      	cmp	r3, #0
 8015712:	d00a      	beq.n	801572a <tcp_input+0x5d2>
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801571a:	69fa      	ldr	r2, [r7, #28]
 801571c:	6910      	ldr	r0, [r2, #16]
 801571e:	89fa      	ldrh	r2, [r7, #14]
 8015720:	69f9      	ldr	r1, [r7, #28]
 8015722:	4798      	blx	r3
 8015724:	4603      	mov	r3, r0
 8015726:	74fb      	strb	r3, [r7, #19]
 8015728:	e001      	b.n	801572e <tcp_input+0x5d6>
 801572a:	2300      	movs	r3, #0
 801572c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801572e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015732:	f113 0f0d 	cmn.w	r3, #13
 8015736:	f000 8098 	beq.w	801586a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801573a:	4b54      	ldr	r3, [pc, #336]	@ (801588c <tcp_input+0x734>)
 801573c:	2200      	movs	r2, #0
 801573e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015740:	69f8      	ldr	r0, [r7, #28]
 8015742:	f000 f915 	bl	8015970 <tcp_input_delayed_close>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	f040 8090 	bne.w	801586e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801574e:	4b4d      	ldr	r3, [pc, #308]	@ (8015884 <tcp_input+0x72c>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d041      	beq.n	80157da <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801575a:	2b00      	cmp	r3, #0
 801575c:	d006      	beq.n	801576c <tcp_input+0x614>
 801575e:	4b50      	ldr	r3, [pc, #320]	@ (80158a0 <tcp_input+0x748>)
 8015760:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015764:	494f      	ldr	r1, [pc, #316]	@ (80158a4 <tcp_input+0x74c>)
 8015766:	4850      	ldr	r0, [pc, #320]	@ (80158a8 <tcp_input+0x750>)
 8015768:	f007 fb16 	bl	801cd98 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801576c:	69fb      	ldr	r3, [r7, #28]
 801576e:	8b5b      	ldrh	r3, [r3, #26]
 8015770:	f003 0310 	and.w	r3, r3, #16
 8015774:	2b00      	cmp	r3, #0
 8015776:	d008      	beq.n	801578a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015778:	4b42      	ldr	r3, [pc, #264]	@ (8015884 <tcp_input+0x72c>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd fba3 	bl	8012ec8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015782:	69f8      	ldr	r0, [r7, #28]
 8015784:	f7fe f9a0 	bl	8013ac8 <tcp_abort>
            goto aborted;
 8015788:	e091      	b.n	80158ae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00c      	beq.n	80157ae <tcp_input+0x656>
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801579a:	69fb      	ldr	r3, [r7, #28]
 801579c:	6918      	ldr	r0, [r3, #16]
 801579e:	4b39      	ldr	r3, [pc, #228]	@ (8015884 <tcp_input+0x72c>)
 80157a0:	681a      	ldr	r2, [r3, #0]
 80157a2:	2300      	movs	r3, #0
 80157a4:	69f9      	ldr	r1, [r7, #28]
 80157a6:	47a0      	blx	r4
 80157a8:	4603      	mov	r3, r0
 80157aa:	74fb      	strb	r3, [r7, #19]
 80157ac:	e008      	b.n	80157c0 <tcp_input+0x668>
 80157ae:	4b35      	ldr	r3, [pc, #212]	@ (8015884 <tcp_input+0x72c>)
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	2300      	movs	r3, #0
 80157b4:	69f9      	ldr	r1, [r7, #28]
 80157b6:	2000      	movs	r0, #0
 80157b8:	f7ff f890 	bl	80148dc <tcp_recv_null>
 80157bc:	4603      	mov	r3, r0
 80157be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80157c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157c4:	f113 0f0d 	cmn.w	r3, #13
 80157c8:	d053      	beq.n	8015872 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80157ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d003      	beq.n	80157da <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80157d2:	4b2c      	ldr	r3, [pc, #176]	@ (8015884 <tcp_input+0x72c>)
 80157d4:	681a      	ldr	r2, [r3, #0]
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80157da:	4b2b      	ldr	r3, [pc, #172]	@ (8015888 <tcp_input+0x730>)
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	f003 0320 	and.w	r3, r3, #32
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d030      	beq.n	8015848 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d009      	beq.n	8015802 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80157ee:	69fb      	ldr	r3, [r7, #28]
 80157f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157f2:	7b5a      	ldrb	r2, [r3, #13]
 80157f4:	69fb      	ldr	r3, [r7, #28]
 80157f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80157f8:	f042 0220 	orr.w	r2, r2, #32
 80157fc:	b2d2      	uxtb	r2, r2
 80157fe:	735a      	strb	r2, [r3, #13]
 8015800:	e022      	b.n	8015848 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015806:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801580a:	d005      	beq.n	8015818 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015810:	3301      	adds	r3, #1
 8015812:	b29a      	uxth	r2, r3
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801581e:	2b00      	cmp	r3, #0
 8015820:	d00b      	beq.n	801583a <tcp_input+0x6e2>
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015828:	69fb      	ldr	r3, [r7, #28]
 801582a:	6918      	ldr	r0, [r3, #16]
 801582c:	2300      	movs	r3, #0
 801582e:	2200      	movs	r2, #0
 8015830:	69f9      	ldr	r1, [r7, #28]
 8015832:	47a0      	blx	r4
 8015834:	4603      	mov	r3, r0
 8015836:	74fb      	strb	r3, [r7, #19]
 8015838:	e001      	b.n	801583e <tcp_input+0x6e6>
 801583a:	2300      	movs	r3, #0
 801583c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801583e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015842:	f113 0f0d 	cmn.w	r3, #13
 8015846:	d016      	beq.n	8015876 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015848:	4b13      	ldr	r3, [pc, #76]	@ (8015898 <tcp_input+0x740>)
 801584a:	2200      	movs	r2, #0
 801584c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801584e:	69f8      	ldr	r0, [r7, #28]
 8015850:	f000 f88e 	bl	8015970 <tcp_input_delayed_close>
 8015854:	4603      	mov	r3, r0
 8015856:	2b00      	cmp	r3, #0
 8015858:	d128      	bne.n	80158ac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801585a:	69f8      	ldr	r0, [r7, #28]
 801585c:	f002 ff1a 	bl	8018694 <tcp_output>
 8015860:	e025      	b.n	80158ae <tcp_input+0x756>
        goto aborted;
 8015862:	bf00      	nop
 8015864:	e023      	b.n	80158ae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015866:	bf00      	nop
 8015868:	e021      	b.n	80158ae <tcp_input+0x756>
              goto aborted;
 801586a:	bf00      	nop
 801586c:	e01f      	b.n	80158ae <tcp_input+0x756>
          goto aborted;
 801586e:	bf00      	nop
 8015870:	e01d      	b.n	80158ae <tcp_input+0x756>
            goto aborted;
 8015872:	bf00      	nop
 8015874:	e01b      	b.n	80158ae <tcp_input+0x756>
              goto aborted;
 8015876:	bf00      	nop
 8015878:	e019      	b.n	80158ae <tcp_input+0x756>
 801587a:	bf00      	nop
 801587c:	2000f288 	.word	0x2000f288
 8015880:	2000f298 	.word	0x2000f298
 8015884:	2000f2b8 	.word	0x2000f2b8
 8015888:	2000f2b5 	.word	0x2000f2b5
 801588c:	2000f2b0 	.word	0x2000f2b0
 8015890:	2000f2b4 	.word	0x2000f2b4
 8015894:	2000f2b2 	.word	0x2000f2b2
 8015898:	2000f2bc 	.word	0x2000f2bc
 801589c:	2000f27c 	.word	0x2000f27c
 80158a0:	080201d4 	.word	0x080201d4
 80158a4:	08020388 	.word	0x08020388
 80158a8:	08020220 	.word	0x08020220
          goto aborted;
 80158ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80158ae:	4b27      	ldr	r3, [pc, #156]	@ (801594c <tcp_input+0x7f4>)
 80158b0:	2200      	movs	r2, #0
 80158b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80158b4:	4b26      	ldr	r3, [pc, #152]	@ (8015950 <tcp_input+0x7f8>)
 80158b6:	2200      	movs	r2, #0
 80158b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80158ba:	4b26      	ldr	r3, [pc, #152]	@ (8015954 <tcp_input+0x7fc>)
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d03f      	beq.n	8015942 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80158c2:	4b24      	ldr	r3, [pc, #144]	@ (8015954 <tcp_input+0x7fc>)
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fd fafe 	bl	8012ec8 <pbuf_free>
      inseg.p = NULL;
 80158cc:	4b21      	ldr	r3, [pc, #132]	@ (8015954 <tcp_input+0x7fc>)
 80158ce:	2200      	movs	r2, #0
 80158d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80158d2:	e036      	b.n	8015942 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80158d4:	4b20      	ldr	r3, [pc, #128]	@ (8015958 <tcp_input+0x800>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	899b      	ldrh	r3, [r3, #12]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fb fecb 	bl	8011678 <lwip_htons>
 80158e2:	4603      	mov	r3, r0
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	f003 0304 	and.w	r3, r3, #4
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d118      	bne.n	8015920 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158ee:	4b1b      	ldr	r3, [pc, #108]	@ (801595c <tcp_input+0x804>)
 80158f0:	6819      	ldr	r1, [r3, #0]
 80158f2:	4b1b      	ldr	r3, [pc, #108]	@ (8015960 <tcp_input+0x808>)
 80158f4:	881b      	ldrh	r3, [r3, #0]
 80158f6:	461a      	mov	r2, r3
 80158f8:	4b1a      	ldr	r3, [pc, #104]	@ (8015964 <tcp_input+0x80c>)
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158fe:	4b16      	ldr	r3, [pc, #88]	@ (8015958 <tcp_input+0x800>)
 8015900:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015902:	885b      	ldrh	r3, [r3, #2]
 8015904:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015906:	4a14      	ldr	r2, [pc, #80]	@ (8015958 <tcp_input+0x800>)
 8015908:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801590a:	8812      	ldrh	r2, [r2, #0]
 801590c:	b292      	uxth	r2, r2
 801590e:	9202      	str	r2, [sp, #8]
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	4b15      	ldr	r3, [pc, #84]	@ (8015968 <tcp_input+0x810>)
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	4b15      	ldr	r3, [pc, #84]	@ (801596c <tcp_input+0x814>)
 8015918:	4602      	mov	r2, r0
 801591a:	2000      	movs	r0, #0
 801591c:	f003 fc6e 	bl	80191fc <tcp_rst>
    pbuf_free(p);
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f7fd fad1 	bl	8012ec8 <pbuf_free>
  return;
 8015926:	e00c      	b.n	8015942 <tcp_input+0x7ea>
    goto dropped;
 8015928:	bf00      	nop
 801592a:	e006      	b.n	801593a <tcp_input+0x7e2>
    goto dropped;
 801592c:	bf00      	nop
 801592e:	e004      	b.n	801593a <tcp_input+0x7e2>
    goto dropped;
 8015930:	bf00      	nop
 8015932:	e002      	b.n	801593a <tcp_input+0x7e2>
      goto dropped;
 8015934:	bf00      	nop
 8015936:	e000      	b.n	801593a <tcp_input+0x7e2>
      goto dropped;
 8015938:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7fd fac4 	bl	8012ec8 <pbuf_free>
 8015940:	e000      	b.n	8015944 <tcp_input+0x7ec>
  return;
 8015942:	bf00      	nop
}
 8015944:	3724      	adds	r7, #36	@ 0x24
 8015946:	46bd      	mov	sp, r7
 8015948:	bd90      	pop	{r4, r7, pc}
 801594a:	bf00      	nop
 801594c:	2000f2bc 	.word	0x2000f2bc
 8015950:	2000f2b8 	.word	0x2000f2b8
 8015954:	2000f288 	.word	0x2000f288
 8015958:	2000f298 	.word	0x2000f298
 801595c:	2000f2ac 	.word	0x2000f2ac
 8015960:	2000f2b2 	.word	0x2000f2b2
 8015964:	2000f2a8 	.word	0x2000f2a8
 8015968:	2000bb2c 	.word	0x2000bb2c
 801596c:	2000bb30 	.word	0x2000bb30

08015970 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	2b00      	cmp	r3, #0
 801597c:	d106      	bne.n	801598c <tcp_input_delayed_close+0x1c>
 801597e:	4b17      	ldr	r3, [pc, #92]	@ (80159dc <tcp_input_delayed_close+0x6c>)
 8015980:	f240 225a 	movw	r2, #602	@ 0x25a
 8015984:	4916      	ldr	r1, [pc, #88]	@ (80159e0 <tcp_input_delayed_close+0x70>)
 8015986:	4817      	ldr	r0, [pc, #92]	@ (80159e4 <tcp_input_delayed_close+0x74>)
 8015988:	f007 fa06 	bl	801cd98 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801598c:	4b16      	ldr	r3, [pc, #88]	@ (80159e8 <tcp_input_delayed_close+0x78>)
 801598e:	781b      	ldrb	r3, [r3, #0]
 8015990:	f003 0310 	and.w	r3, r3, #16
 8015994:	2b00      	cmp	r3, #0
 8015996:	d01c      	beq.n	80159d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	8b5b      	ldrh	r3, [r3, #26]
 801599c:	f003 0310 	and.w	r3, r3, #16
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d10d      	bne.n	80159c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d008      	beq.n	80159c0 <tcp_input_delayed_close+0x50>
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	6912      	ldr	r2, [r2, #16]
 80159b8:	f06f 010e 	mvn.w	r1, #14
 80159bc:	4610      	mov	r0, r2
 80159be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80159c0:	6879      	ldr	r1, [r7, #4]
 80159c2:	480a      	ldr	r0, [pc, #40]	@ (80159ec <tcp_input_delayed_close+0x7c>)
 80159c4:	f7ff fa50 	bl	8014e68 <tcp_pcb_remove>
    tcp_free(pcb);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7fd fd39 	bl	8013440 <tcp_free>
    return 1;
 80159ce:	2301      	movs	r3, #1
 80159d0:	e000      	b.n	80159d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3708      	adds	r7, #8
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	080201d4 	.word	0x080201d4
 80159e0:	080203a4 	.word	0x080203a4
 80159e4:	08020220 	.word	0x08020220
 80159e8:	2000f2b5 	.word	0x2000f2b5
 80159ec:	2000f27c 	.word	0x2000f27c

080159f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80159f0:	b590      	push	{r4, r7, lr}
 80159f2:	b08b      	sub	sp, #44	@ 0x2c
 80159f4:	af04      	add	r7, sp, #16
 80159f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80159f8:	4b6f      	ldr	r3, [pc, #444]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	f003 0304 	and.w	r3, r3, #4
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f040 80d2 	bne.w	8015baa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d106      	bne.n	8015a1a <tcp_listen_input+0x2a>
 8015a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8015bbc <tcp_listen_input+0x1cc>)
 8015a0e:	f240 2281 	movw	r2, #641	@ 0x281
 8015a12:	496b      	ldr	r1, [pc, #428]	@ (8015bc0 <tcp_listen_input+0x1d0>)
 8015a14:	486b      	ldr	r0, [pc, #428]	@ (8015bc4 <tcp_listen_input+0x1d4>)
 8015a16:	f007 f9bf 	bl	801cd98 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015a1a:	4b67      	ldr	r3, [pc, #412]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	f003 0310 	and.w	r3, r3, #16
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d019      	beq.n	8015a5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a26:	4b68      	ldr	r3, [pc, #416]	@ (8015bc8 <tcp_listen_input+0x1d8>)
 8015a28:	6819      	ldr	r1, [r3, #0]
 8015a2a:	4b68      	ldr	r3, [pc, #416]	@ (8015bcc <tcp_listen_input+0x1dc>)
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	461a      	mov	r2, r3
 8015a30:	4b67      	ldr	r3, [pc, #412]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a36:	4b67      	ldr	r3, [pc, #412]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015a38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a3a:	885b      	ldrh	r3, [r3, #2]
 8015a3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a3e:	4a65      	ldr	r2, [pc, #404]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015a40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a42:	8812      	ldrh	r2, [r2, #0]
 8015a44:	b292      	uxth	r2, r2
 8015a46:	9202      	str	r2, [sp, #8]
 8015a48:	9301      	str	r3, [sp, #4]
 8015a4a:	4b63      	ldr	r3, [pc, #396]	@ (8015bd8 <tcp_listen_input+0x1e8>)
 8015a4c:	9300      	str	r3, [sp, #0]
 8015a4e:	4b63      	ldr	r3, [pc, #396]	@ (8015bdc <tcp_listen_input+0x1ec>)
 8015a50:	4602      	mov	r2, r0
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f003 fbd2 	bl	80191fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015a58:	e0a9      	b.n	8015bae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015a5a:	4b57      	ldr	r3, [pc, #348]	@ (8015bb8 <tcp_listen_input+0x1c8>)
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	f003 0302 	and.w	r3, r3, #2
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f000 80a3 	beq.w	8015bae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7d5b      	ldrb	r3, [r3, #21]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff f859 	bl	8014b24 <tcp_alloc>
 8015a72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d111      	bne.n	8015a9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	699b      	ldr	r3, [r3, #24]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d00a      	beq.n	8015a98 <tcp_listen_input+0xa8>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	699b      	ldr	r3, [r3, #24]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	6910      	ldr	r0, [r2, #16]
 8015a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4798      	blx	r3
 8015a92:	4603      	mov	r3, r0
 8015a94:	73bb      	strb	r3, [r7, #14]
      return;
 8015a96:	e08b      	b.n	8015bb0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a98:	23f0      	movs	r3, #240	@ 0xf0
 8015a9a:	73bb      	strb	r3, [r7, #14]
      return;
 8015a9c:	e088      	b.n	8015bb0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015a9e:	4b50      	ldr	r3, [pc, #320]	@ (8015be0 <tcp_listen_input+0x1f0>)
 8015aa0:	695a      	ldr	r2, [r3, #20]
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8015be0 <tcp_listen_input+0x1f0>)
 8015aa8:	691a      	ldr	r2, [r3, #16]
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	8ada      	ldrh	r2, [r3, #22]
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015ab6:	4b47      	ldr	r3, [pc, #284]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	881b      	ldrh	r3, [r3, #0]
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	2203      	movs	r2, #3
 8015ac6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015ac8:	4b41      	ldr	r3, [pc, #260]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	1c5a      	adds	r2, r3, #1
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015ad2:	697b      	ldr	r3, [r7, #20]
 8015ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8015ada:	6978      	ldr	r0, [r7, #20]
 8015adc:	f7ff fa58 	bl	8014f90 <tcp_next_iss>
 8015ae0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	693a      	ldr	r2, [r7, #16]
 8015ae6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8015ae8:	697b      	ldr	r3, [r7, #20]
 8015aea:	693a      	ldr	r2, [r7, #16]
 8015aec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8015aee:	697b      	ldr	r3, [r7, #20]
 8015af0:	693a      	ldr	r2, [r7, #16]
 8015af2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	693a      	ldr	r2, [r7, #16]
 8015af8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015afa:	4b35      	ldr	r3, [pc, #212]	@ (8015bd0 <tcp_listen_input+0x1e0>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	1e5a      	subs	r2, r3, #1
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	691a      	ldr	r2, [r3, #16]
 8015b08:	697b      	ldr	r3, [r7, #20]
 8015b0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	7a5b      	ldrb	r3, [r3, #9]
 8015b16:	f003 030c 	and.w	r3, r3, #12
 8015b1a:	b2da      	uxtb	r2, r3
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	7a1a      	ldrb	r2, [r3, #8]
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015b28:	4b2e      	ldr	r3, [pc, #184]	@ (8015be4 <tcp_listen_input+0x1f4>)
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	60da      	str	r2, [r3, #12]
 8015b30:	4a2c      	ldr	r2, [pc, #176]	@ (8015be4 <tcp_listen_input+0x1f4>)
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	6013      	str	r3, [r2, #0]
 8015b36:	f003 fd23 	bl	8019580 <tcp_timer_needed>
 8015b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8015be8 <tcp_listen_input+0x1f8>)
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015b40:	6978      	ldr	r0, [r7, #20]
 8015b42:	f001 fd8b 	bl	801765c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015b46:	4b23      	ldr	r3, [pc, #140]	@ (8015bd4 <tcp_listen_input+0x1e4>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	89db      	ldrh	r3, [r3, #14]
 8015b4c:	b29a      	uxth	r2, r3
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015b60:	697b      	ldr	r3, [r7, #20]
 8015b62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	3304      	adds	r3, #4
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f005 fc47 	bl	801b3fc <ip4_route>
 8015b6e:	4601      	mov	r1, r0
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	3304      	adds	r3, #4
 8015b74:	461a      	mov	r2, r3
 8015b76:	4620      	mov	r0, r4
 8015b78:	f7ff fa30 	bl	8014fdc <tcp_eff_send_mss_netif>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	461a      	mov	r2, r3
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015b84:	2112      	movs	r1, #18
 8015b86:	6978      	ldr	r0, [r7, #20]
 8015b88:	f002 fc96 	bl	80184b8 <tcp_enqueue_flags>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d004      	beq.n	8015ba2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015b98:	2100      	movs	r1, #0
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f7fd fed6 	bl	801394c <tcp_abandon>
      return;
 8015ba0:	e006      	b.n	8015bb0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015ba2:	6978      	ldr	r0, [r7, #20]
 8015ba4:	f002 fd76 	bl	8018694 <tcp_output>
  return;
 8015ba8:	e001      	b.n	8015bae <tcp_listen_input+0x1be>
    return;
 8015baa:	bf00      	nop
 8015bac:	e000      	b.n	8015bb0 <tcp_listen_input+0x1c0>
  return;
 8015bae:	bf00      	nop
}
 8015bb0:	371c      	adds	r7, #28
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd90      	pop	{r4, r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	2000f2b4 	.word	0x2000f2b4
 8015bbc:	080201d4 	.word	0x080201d4
 8015bc0:	080203cc 	.word	0x080203cc
 8015bc4:	08020220 	.word	0x08020220
 8015bc8:	2000f2ac 	.word	0x2000f2ac
 8015bcc:	2000f2b2 	.word	0x2000f2b2
 8015bd0:	2000f2a8 	.word	0x2000f2a8
 8015bd4:	2000f298 	.word	0x2000f298
 8015bd8:	2000bb2c 	.word	0x2000bb2c
 8015bdc:	2000bb30 	.word	0x2000bb30
 8015be0:	2000bb1c 	.word	0x2000bb1c
 8015be4:	2000f27c 	.word	0x2000f27c
 8015be8:	2000f284 	.word	0x2000f284

08015bec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b086      	sub	sp, #24
 8015bf0:	af04      	add	r7, sp, #16
 8015bf2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	f003 0304 	and.w	r3, r3, #4
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d153      	bne.n	8015ca8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d106      	bne.n	8015c14 <tcp_timewait_input+0x28>
 8015c06:	4b2c      	ldr	r3, [pc, #176]	@ (8015cb8 <tcp_timewait_input+0xcc>)
 8015c08:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015c0c:	492b      	ldr	r1, [pc, #172]	@ (8015cbc <tcp_timewait_input+0xd0>)
 8015c0e:	482c      	ldr	r0, [pc, #176]	@ (8015cc0 <tcp_timewait_input+0xd4>)
 8015c10:	f007 f8c2 	bl	801cd98 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015c14:	4b27      	ldr	r3, [pc, #156]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015c16:	781b      	ldrb	r3, [r3, #0]
 8015c18:	f003 0302 	and.w	r3, r3, #2
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d02a      	beq.n	8015c76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015c20:	4b28      	ldr	r3, [pc, #160]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	db2d      	blt.n	8015c8a <tcp_timewait_input+0x9e>
 8015c2e:	4b25      	ldr	r3, [pc, #148]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015c3a:	440b      	add	r3, r1
 8015c3c:	1ad3      	subs	r3, r2, r3
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	dc23      	bgt.n	8015c8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c42:	4b21      	ldr	r3, [pc, #132]	@ (8015cc8 <tcp_timewait_input+0xdc>)
 8015c44:	6819      	ldr	r1, [r3, #0]
 8015c46:	4b21      	ldr	r3, [pc, #132]	@ (8015ccc <tcp_timewait_input+0xe0>)
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8015cc4 <tcp_timewait_input+0xd8>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c52:	4b1f      	ldr	r3, [pc, #124]	@ (8015cd0 <tcp_timewait_input+0xe4>)
 8015c54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c56:	885b      	ldrh	r3, [r3, #2]
 8015c58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8015cd0 <tcp_timewait_input+0xe4>)
 8015c5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c5e:	8812      	ldrh	r2, [r2, #0]
 8015c60:	b292      	uxth	r2, r2
 8015c62:	9202      	str	r2, [sp, #8]
 8015c64:	9301      	str	r3, [sp, #4]
 8015c66:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd4 <tcp_timewait_input+0xe8>)
 8015c68:	9300      	str	r3, [sp, #0]
 8015c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8015cd8 <tcp_timewait_input+0xec>)
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f003 fac4 	bl	80191fc <tcp_rst>
      return;
 8015c74:	e01b      	b.n	8015cae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015c76:	4b0f      	ldr	r3, [pc, #60]	@ (8015cb4 <tcp_timewait_input+0xc8>)
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	f003 0301 	and.w	r3, r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d003      	beq.n	8015c8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015c82:	4b16      	ldr	r3, [pc, #88]	@ (8015cdc <tcp_timewait_input+0xf0>)
 8015c84:	681a      	ldr	r2, [r3, #0]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015c8a:	4b10      	ldr	r3, [pc, #64]	@ (8015ccc <tcp_timewait_input+0xe0>)
 8015c8c:	881b      	ldrh	r3, [r3, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d00c      	beq.n	8015cac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	8b5b      	ldrh	r3, [r3, #26]
 8015c96:	f043 0302 	orr.w	r3, r3, #2
 8015c9a:	b29a      	uxth	r2, r3
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f002 fcf7 	bl	8018694 <tcp_output>
  }
  return;
 8015ca6:	e001      	b.n	8015cac <tcp_timewait_input+0xc0>
    return;
 8015ca8:	bf00      	nop
 8015caa:	e000      	b.n	8015cae <tcp_timewait_input+0xc2>
  return;
 8015cac:	bf00      	nop
}
 8015cae:	3708      	adds	r7, #8
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	bd80      	pop	{r7, pc}
 8015cb4:	2000f2b4 	.word	0x2000f2b4
 8015cb8:	080201d4 	.word	0x080201d4
 8015cbc:	080203ec 	.word	0x080203ec
 8015cc0:	08020220 	.word	0x08020220
 8015cc4:	2000f2a8 	.word	0x2000f2a8
 8015cc8:	2000f2ac 	.word	0x2000f2ac
 8015ccc:	2000f2b2 	.word	0x2000f2b2
 8015cd0:	2000f298 	.word	0x2000f298
 8015cd4:	2000bb2c 	.word	0x2000bb2c
 8015cd8:	2000bb30 	.word	0x2000bb30
 8015cdc:	2000f270 	.word	0x2000f270

08015ce0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015ce0:	b590      	push	{r4, r7, lr}
 8015ce2:	b08d      	sub	sp, #52	@ 0x34
 8015ce4:	af04      	add	r7, sp, #16
 8015ce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015cec:	2300      	movs	r3, #0
 8015cee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d106      	bne.n	8015d04 <tcp_process+0x24>
 8015cf6:	4b9d      	ldr	r3, [pc, #628]	@ (8015f6c <tcp_process+0x28c>)
 8015cf8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015cfc:	499c      	ldr	r1, [pc, #624]	@ (8015f70 <tcp_process+0x290>)
 8015cfe:	489d      	ldr	r0, [pc, #628]	@ (8015f74 <tcp_process+0x294>)
 8015d00:	f007 f84a 	bl	801cd98 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015d04:	4b9c      	ldr	r3, [pc, #624]	@ (8015f78 <tcp_process+0x298>)
 8015d06:	781b      	ldrb	r3, [r3, #0]
 8015d08:	f003 0304 	and.w	r3, r3, #4
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d04e      	beq.n	8015dae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	7d1b      	ldrb	r3, [r3, #20]
 8015d14:	2b02      	cmp	r3, #2
 8015d16:	d108      	bne.n	8015d2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d1c:	4b97      	ldr	r3, [pc, #604]	@ (8015f7c <tcp_process+0x29c>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d123      	bne.n	8015d6c <tcp_process+0x8c>
        acceptable = 1;
 8015d24:	2301      	movs	r3, #1
 8015d26:	76fb      	strb	r3, [r7, #27]
 8015d28:	e020      	b.n	8015d6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015d2e:	4b94      	ldr	r3, [pc, #592]	@ (8015f80 <tcp_process+0x2a0>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d102      	bne.n	8015d3c <tcp_process+0x5c>
        acceptable = 1;
 8015d36:	2301      	movs	r3, #1
 8015d38:	76fb      	strb	r3, [r7, #27]
 8015d3a:	e017      	b.n	8015d6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d3c:	4b90      	ldr	r3, [pc, #576]	@ (8015f80 <tcp_process+0x2a0>)
 8015d3e:	681a      	ldr	r2, [r3, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	db10      	blt.n	8015d6c <tcp_process+0x8c>
 8015d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8015f80 <tcp_process+0x2a0>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015d56:	440b      	add	r3, r1
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	dc06      	bgt.n	8015d6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	8b5b      	ldrh	r3, [r3, #26]
 8015d62:	f043 0302 	orr.w	r3, r3, #2
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015d6c:	7efb      	ldrb	r3, [r7, #27]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d01b      	beq.n	8015daa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	7d1b      	ldrb	r3, [r3, #20]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d106      	bne.n	8015d88 <tcp_process+0xa8>
 8015d7a:	4b7c      	ldr	r3, [pc, #496]	@ (8015f6c <tcp_process+0x28c>)
 8015d7c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8015d80:	4980      	ldr	r1, [pc, #512]	@ (8015f84 <tcp_process+0x2a4>)
 8015d82:	487c      	ldr	r0, [pc, #496]	@ (8015f74 <tcp_process+0x294>)
 8015d84:	f007 f808 	bl	801cd98 <iprintf>
      recv_flags |= TF_RESET;
 8015d88:	4b7f      	ldr	r3, [pc, #508]	@ (8015f88 <tcp_process+0x2a8>)
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	f043 0308 	orr.w	r3, r3, #8
 8015d90:	b2da      	uxtb	r2, r3
 8015d92:	4b7d      	ldr	r3, [pc, #500]	@ (8015f88 <tcp_process+0x2a8>)
 8015d94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	8b5b      	ldrh	r3, [r3, #26]
 8015d9a:	f023 0301 	bic.w	r3, r3, #1
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015da4:	f06f 030d 	mvn.w	r3, #13
 8015da8:	e37a      	b.n	80164a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015daa:	2300      	movs	r3, #0
 8015dac:	e378      	b.n	80164a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015dae:	4b72      	ldr	r3, [pc, #456]	@ (8015f78 <tcp_process+0x298>)
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	f003 0302 	and.w	r3, r3, #2
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d010      	beq.n	8015ddc <tcp_process+0xfc>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7d1b      	ldrb	r3, [r3, #20]
 8015dbe:	2b02      	cmp	r3, #2
 8015dc0:	d00c      	beq.n	8015ddc <tcp_process+0xfc>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	7d1b      	ldrb	r3, [r3, #20]
 8015dc6:	2b03      	cmp	r3, #3
 8015dc8:	d008      	beq.n	8015ddc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	8b5b      	ldrh	r3, [r3, #26]
 8015dce:	f043 0302 	orr.w	r3, r3, #2
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015dd8:	2300      	movs	r3, #0
 8015dda:	e361      	b.n	80164a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	8b5b      	ldrh	r3, [r3, #26]
 8015de0:	f003 0310 	and.w	r3, r3, #16
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d103      	bne.n	8015df0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015de8:	4b68      	ldr	r3, [pc, #416]	@ (8015f8c <tcp_process+0x2ac>)
 8015dea:	681a      	ldr	r2, [r3, #0]
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f001 fc2b 	bl	801765c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
 8015e0a:	3b02      	subs	r3, #2
 8015e0c:	2b07      	cmp	r3, #7
 8015e0e:	f200 8337 	bhi.w	8016480 <tcp_process+0x7a0>
 8015e12:	a201      	add	r2, pc, #4	@ (adr r2, 8015e18 <tcp_process+0x138>)
 8015e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e18:	08015e39 	.word	0x08015e39
 8015e1c:	08016069 	.word	0x08016069
 8015e20:	080161e1 	.word	0x080161e1
 8015e24:	0801620b 	.word	0x0801620b
 8015e28:	0801632f 	.word	0x0801632f
 8015e2c:	080161e1 	.word	0x080161e1
 8015e30:	080163bb 	.word	0x080163bb
 8015e34:	0801644b 	.word	0x0801644b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015e38:	4b4f      	ldr	r3, [pc, #316]	@ (8015f78 <tcp_process+0x298>)
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	f003 0310 	and.w	r3, r3, #16
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 80e4 	beq.w	801600e <tcp_process+0x32e>
 8015e46:	4b4c      	ldr	r3, [pc, #304]	@ (8015f78 <tcp_process+0x298>)
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f003 0302 	and.w	r3, r3, #2
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 80dd 	beq.w	801600e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e58:	1c5a      	adds	r2, r3, #1
 8015e5a:	4b48      	ldr	r3, [pc, #288]	@ (8015f7c <tcp_process+0x29c>)
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	429a      	cmp	r2, r3
 8015e60:	f040 80d5 	bne.w	801600e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015e64:	4b46      	ldr	r3, [pc, #280]	@ (8015f80 <tcp_process+0x2a0>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	1c5a      	adds	r2, r3, #1
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8015e76:	4b41      	ldr	r3, [pc, #260]	@ (8015f7c <tcp_process+0x29c>)
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015e7e:	4b44      	ldr	r3, [pc, #272]	@ (8015f90 <tcp_process+0x2b0>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	89db      	ldrh	r3, [r3, #14]
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015e98:	4b39      	ldr	r3, [pc, #228]	@ (8015f80 <tcp_process+0x2a0>)
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	1e5a      	subs	r2, r3, #1
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2204      	movs	r2, #4
 8015ea6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	3304      	adds	r3, #4
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f005 faa3 	bl	801b3fc <ip4_route>
 8015eb6:	4601      	mov	r1, r0
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	3304      	adds	r3, #4
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f7ff f88c 	bl	8014fdc <tcp_eff_send_mss_netif>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	461a      	mov	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ed0:	009a      	lsls	r2, r3, #2
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ed6:	005b      	lsls	r3, r3, #1
 8015ed8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015edc:	428b      	cmp	r3, r1
 8015ede:	bf38      	it	cc
 8015ee0:	460b      	movcc	r3, r1
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d204      	bcs.n	8015ef0 <tcp_process+0x210>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	e00d      	b.n	8015f0c <tcp_process+0x22c>
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d904      	bls.n	8015f08 <tcp_process+0x228>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f02:	005b      	lsls	r3, r3, #1
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	e001      	b.n	8015f0c <tcp_process+0x22c>
 8015f08:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d106      	bne.n	8015f2a <tcp_process+0x24a>
 8015f1c:	4b13      	ldr	r3, [pc, #76]	@ (8015f6c <tcp_process+0x28c>)
 8015f1e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015f22:	491c      	ldr	r1, [pc, #112]	@ (8015f94 <tcp_process+0x2b4>)
 8015f24:	4813      	ldr	r0, [pc, #76]	@ (8015f74 <tcp_process+0x294>)
 8015f26:	f006 ff37 	bl	801cd98 <iprintf>
        --pcb->snd_queuelen;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f30:	3b01      	subs	r3, #1
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f3e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015f40:	69fb      	ldr	r3, [r7, #28]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d12a      	bne.n	8015f9c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f4a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015f4c:	69fb      	ldr	r3, [r7, #28]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d106      	bne.n	8015f60 <tcp_process+0x280>
 8015f52:	4b06      	ldr	r3, [pc, #24]	@ (8015f6c <tcp_process+0x28c>)
 8015f54:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8015f58:	490f      	ldr	r1, [pc, #60]	@ (8015f98 <tcp_process+0x2b8>)
 8015f5a:	4806      	ldr	r0, [pc, #24]	@ (8015f74 <tcp_process+0x294>)
 8015f5c:	f006 ff1c 	bl	801cd98 <iprintf>
          pcb->unsent = rseg->next;
 8015f60:	69fb      	ldr	r3, [r7, #28]
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015f68:	e01c      	b.n	8015fa4 <tcp_process+0x2c4>
 8015f6a:	bf00      	nop
 8015f6c:	080201d4 	.word	0x080201d4
 8015f70:	0802040c 	.word	0x0802040c
 8015f74:	08020220 	.word	0x08020220
 8015f78:	2000f2b4 	.word	0x2000f2b4
 8015f7c:	2000f2ac 	.word	0x2000f2ac
 8015f80:	2000f2a8 	.word	0x2000f2a8
 8015f84:	08020428 	.word	0x08020428
 8015f88:	2000f2b5 	.word	0x2000f2b5
 8015f8c:	2000f270 	.word	0x2000f270
 8015f90:	2000f298 	.word	0x2000f298
 8015f94:	08020448 	.word	0x08020448
 8015f98:	08020460 	.word	0x08020460
        } else {
          pcb->unacked = rseg->next;
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015fa4:	69f8      	ldr	r0, [r7, #28]
 8015fa6:	f7fe fc36 	bl	8014816 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d104      	bne.n	8015fbc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015fb8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015fba:	e006      	b.n	8015fca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00a      	beq.n	8015fea <tcp_process+0x30a>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	6910      	ldr	r0, [r2, #16]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	6879      	ldr	r1, [r7, #4]
 8015fe2:	4798      	blx	r3
 8015fe4:	4603      	mov	r3, r0
 8015fe6:	76bb      	strb	r3, [r7, #26]
 8015fe8:	e001      	b.n	8015fee <tcp_process+0x30e>
 8015fea:	2300      	movs	r3, #0
 8015fec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015fee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015ff2:	f113 0f0d 	cmn.w	r3, #13
 8015ff6:	d102      	bne.n	8015ffe <tcp_process+0x31e>
          return ERR_ABRT;
 8015ff8:	f06f 030c 	mvn.w	r3, #12
 8015ffc:	e250      	b.n	80164a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	8b5b      	ldrh	r3, [r3, #26]
 8016002:	f043 0302 	orr.w	r3, r3, #2
 8016006:	b29a      	uxth	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801600c:	e23a      	b.n	8016484 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801600e:	4b98      	ldr	r3, [pc, #608]	@ (8016270 <tcp_process+0x590>)
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	f003 0310 	and.w	r3, r3, #16
 8016016:	2b00      	cmp	r3, #0
 8016018:	f000 8234 	beq.w	8016484 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801601c:	4b95      	ldr	r3, [pc, #596]	@ (8016274 <tcp_process+0x594>)
 801601e:	6819      	ldr	r1, [r3, #0]
 8016020:	4b95      	ldr	r3, [pc, #596]	@ (8016278 <tcp_process+0x598>)
 8016022:	881b      	ldrh	r3, [r3, #0]
 8016024:	461a      	mov	r2, r3
 8016026:	4b95      	ldr	r3, [pc, #596]	@ (801627c <tcp_process+0x59c>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801602c:	4b94      	ldr	r3, [pc, #592]	@ (8016280 <tcp_process+0x5a0>)
 801602e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016030:	885b      	ldrh	r3, [r3, #2]
 8016032:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016034:	4a92      	ldr	r2, [pc, #584]	@ (8016280 <tcp_process+0x5a0>)
 8016036:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016038:	8812      	ldrh	r2, [r2, #0]
 801603a:	b292      	uxth	r2, r2
 801603c:	9202      	str	r2, [sp, #8]
 801603e:	9301      	str	r3, [sp, #4]
 8016040:	4b90      	ldr	r3, [pc, #576]	@ (8016284 <tcp_process+0x5a4>)
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	4b90      	ldr	r3, [pc, #576]	@ (8016288 <tcp_process+0x5a8>)
 8016046:	4602      	mov	r2, r0
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f003 f8d7 	bl	80191fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016054:	2b05      	cmp	r3, #5
 8016056:	f200 8215 	bhi.w	8016484 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f002 fea3 	bl	8018dac <tcp_rexmit_rto>
      break;
 8016066:	e20d      	b.n	8016484 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016068:	4b81      	ldr	r3, [pc, #516]	@ (8016270 <tcp_process+0x590>)
 801606a:	781b      	ldrb	r3, [r3, #0]
 801606c:	f003 0310 	and.w	r3, r3, #16
 8016070:	2b00      	cmp	r3, #0
 8016072:	f000 80a1 	beq.w	80161b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016076:	4b7f      	ldr	r3, [pc, #508]	@ (8016274 <tcp_process+0x594>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801607e:	1ad3      	subs	r3, r2, r3
 8016080:	3b01      	subs	r3, #1
 8016082:	2b00      	cmp	r3, #0
 8016084:	db7e      	blt.n	8016184 <tcp_process+0x4a4>
 8016086:	4b7b      	ldr	r3, [pc, #492]	@ (8016274 <tcp_process+0x594>)
 8016088:	681a      	ldr	r2, [r3, #0]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	dc77      	bgt.n	8016184 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2204      	movs	r2, #4
 8016098:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d102      	bne.n	80160a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80160a2:	23fa      	movs	r3, #250	@ 0xfa
 80160a4:	76bb      	strb	r3, [r7, #26]
 80160a6:	e01d      	b.n	80160e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160ac:	699b      	ldr	r3, [r3, #24]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d106      	bne.n	80160c0 <tcp_process+0x3e0>
 80160b2:	4b76      	ldr	r3, [pc, #472]	@ (801628c <tcp_process+0x5ac>)
 80160b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80160b8:	4975      	ldr	r1, [pc, #468]	@ (8016290 <tcp_process+0x5b0>)
 80160ba:	4876      	ldr	r0, [pc, #472]	@ (8016294 <tcp_process+0x5b4>)
 80160bc:	f006 fe6c 	bl	801cd98 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160c4:	699b      	ldr	r3, [r3, #24]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00a      	beq.n	80160e0 <tcp_process+0x400>
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80160ce:	699b      	ldr	r3, [r3, #24]
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	6910      	ldr	r0, [r2, #16]
 80160d4:	2200      	movs	r2, #0
 80160d6:	6879      	ldr	r1, [r7, #4]
 80160d8:	4798      	blx	r3
 80160da:	4603      	mov	r3, r0
 80160dc:	76bb      	strb	r3, [r7, #26]
 80160de:	e001      	b.n	80160e4 <tcp_process+0x404>
 80160e0:	23f0      	movs	r3, #240	@ 0xf0
 80160e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80160e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d00a      	beq.n	8016102 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80160ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160f0:	f113 0f0d 	cmn.w	r3, #13
 80160f4:	d002      	beq.n	80160fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80160f6:	6878      	ldr	r0, [r7, #4]
 80160f8:	f7fd fce6 	bl	8013ac8 <tcp_abort>
            }
            return ERR_ABRT;
 80160fc:	f06f 030c 	mvn.w	r3, #12
 8016100:	e1ce      	b.n	80164a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f000 fae0 	bl	80166c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016108:	4b63      	ldr	r3, [pc, #396]	@ (8016298 <tcp_process+0x5b8>)
 801610a:	881b      	ldrh	r3, [r3, #0]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d005      	beq.n	801611c <tcp_process+0x43c>
            recv_acked--;
 8016110:	4b61      	ldr	r3, [pc, #388]	@ (8016298 <tcp_process+0x5b8>)
 8016112:	881b      	ldrh	r3, [r3, #0]
 8016114:	3b01      	subs	r3, #1
 8016116:	b29a      	uxth	r2, r3
 8016118:	4b5f      	ldr	r3, [pc, #380]	@ (8016298 <tcp_process+0x5b8>)
 801611a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016120:	009a      	lsls	r2, r3, #2
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	f241 111c 	movw	r1, #4380	@ 0x111c
 801612c:	428b      	cmp	r3, r1
 801612e:	bf38      	it	cc
 8016130:	460b      	movcc	r3, r1
 8016132:	429a      	cmp	r2, r3
 8016134:	d204      	bcs.n	8016140 <tcp_process+0x460>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801613a:	009b      	lsls	r3, r3, #2
 801613c:	b29b      	uxth	r3, r3
 801613e:	e00d      	b.n	801615c <tcp_process+0x47c>
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	f241 121c 	movw	r2, #4380	@ 0x111c
 801614a:	4293      	cmp	r3, r2
 801614c:	d904      	bls.n	8016158 <tcp_process+0x478>
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	b29b      	uxth	r3, r3
 8016156:	e001      	b.n	801615c <tcp_process+0x47c>
 8016158:	f241 131c 	movw	r3, #4380	@ 0x111c
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8016162:	4b4e      	ldr	r3, [pc, #312]	@ (801629c <tcp_process+0x5bc>)
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	f003 0320 	and.w	r3, r3, #32
 801616a:	2b00      	cmp	r3, #0
 801616c:	d037      	beq.n	80161de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	8b5b      	ldrh	r3, [r3, #26]
 8016172:	f043 0302 	orr.w	r3, r3, #2
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2207      	movs	r2, #7
 8016180:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8016182:	e02c      	b.n	80161de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016184:	4b3b      	ldr	r3, [pc, #236]	@ (8016274 <tcp_process+0x594>)
 8016186:	6819      	ldr	r1, [r3, #0]
 8016188:	4b3b      	ldr	r3, [pc, #236]	@ (8016278 <tcp_process+0x598>)
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	461a      	mov	r2, r3
 801618e:	4b3b      	ldr	r3, [pc, #236]	@ (801627c <tcp_process+0x59c>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016194:	4b3a      	ldr	r3, [pc, #232]	@ (8016280 <tcp_process+0x5a0>)
 8016196:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016198:	885b      	ldrh	r3, [r3, #2]
 801619a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801619c:	4a38      	ldr	r2, [pc, #224]	@ (8016280 <tcp_process+0x5a0>)
 801619e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161a0:	8812      	ldrh	r2, [r2, #0]
 80161a2:	b292      	uxth	r2, r2
 80161a4:	9202      	str	r2, [sp, #8]
 80161a6:	9301      	str	r3, [sp, #4]
 80161a8:	4b36      	ldr	r3, [pc, #216]	@ (8016284 <tcp_process+0x5a4>)
 80161aa:	9300      	str	r3, [sp, #0]
 80161ac:	4b36      	ldr	r3, [pc, #216]	@ (8016288 <tcp_process+0x5a8>)
 80161ae:	4602      	mov	r2, r0
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f003 f823 	bl	80191fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80161b6:	e167      	b.n	8016488 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80161b8:	4b2d      	ldr	r3, [pc, #180]	@ (8016270 <tcp_process+0x590>)
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	f003 0302 	and.w	r3, r3, #2
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	f000 8161 	beq.w	8016488 <tcp_process+0x7a8>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ca:	1e5a      	subs	r2, r3, #1
 80161cc:	4b2b      	ldr	r3, [pc, #172]	@ (801627c <tcp_process+0x59c>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	f040 8159 	bne.w	8016488 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f002 fe0a 	bl	8018df0 <tcp_rexmit>
      break;
 80161dc:	e154      	b.n	8016488 <tcp_process+0x7a8>
 80161de:	e153      	b.n	8016488 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 fa71 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80161e6:	4b2d      	ldr	r3, [pc, #180]	@ (801629c <tcp_process+0x5bc>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	f003 0320 	and.w	r3, r3, #32
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	f000 814c 	beq.w	801648c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	8b5b      	ldrh	r3, [r3, #26]
 80161f8:	f043 0302 	orr.w	r3, r3, #2
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2207      	movs	r2, #7
 8016206:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016208:	e140      	b.n	801648c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f000 fa5c 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016210:	4b22      	ldr	r3, [pc, #136]	@ (801629c <tcp_process+0x5bc>)
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	f003 0320 	and.w	r3, r3, #32
 8016218:	2b00      	cmp	r3, #0
 801621a:	d071      	beq.n	8016300 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801621c:	4b14      	ldr	r3, [pc, #80]	@ (8016270 <tcp_process+0x590>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	f003 0310 	and.w	r3, r3, #16
 8016224:	2b00      	cmp	r3, #0
 8016226:	d060      	beq.n	80162ea <tcp_process+0x60a>
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801622c:	4b11      	ldr	r3, [pc, #68]	@ (8016274 <tcp_process+0x594>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	429a      	cmp	r2, r3
 8016232:	d15a      	bne.n	80162ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016238:	2b00      	cmp	r3, #0
 801623a:	d156      	bne.n	80162ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	8b5b      	ldrh	r3, [r3, #26]
 8016240:	f043 0302 	orr.w	r3, r3, #2
 8016244:	b29a      	uxth	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7fe fdbc 	bl	8014dc8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016250:	4b13      	ldr	r3, [pc, #76]	@ (80162a0 <tcp_process+0x5c0>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	429a      	cmp	r2, r3
 8016258:	d105      	bne.n	8016266 <tcp_process+0x586>
 801625a:	4b11      	ldr	r3, [pc, #68]	@ (80162a0 <tcp_process+0x5c0>)
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	4a0f      	ldr	r2, [pc, #60]	@ (80162a0 <tcp_process+0x5c0>)
 8016262:	6013      	str	r3, [r2, #0]
 8016264:	e02e      	b.n	80162c4 <tcp_process+0x5e4>
 8016266:	4b0e      	ldr	r3, [pc, #56]	@ (80162a0 <tcp_process+0x5c0>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	617b      	str	r3, [r7, #20]
 801626c:	e027      	b.n	80162be <tcp_process+0x5de>
 801626e:	bf00      	nop
 8016270:	2000f2b4 	.word	0x2000f2b4
 8016274:	2000f2ac 	.word	0x2000f2ac
 8016278:	2000f2b2 	.word	0x2000f2b2
 801627c:	2000f2a8 	.word	0x2000f2a8
 8016280:	2000f298 	.word	0x2000f298
 8016284:	2000bb2c 	.word	0x2000bb2c
 8016288:	2000bb30 	.word	0x2000bb30
 801628c:	080201d4 	.word	0x080201d4
 8016290:	08020474 	.word	0x08020474
 8016294:	08020220 	.word	0x08020220
 8016298:	2000f2b0 	.word	0x2000f2b0
 801629c:	2000f2b5 	.word	0x2000f2b5
 80162a0:	2000f27c 	.word	0x2000f27c
 80162a4:	697b      	ldr	r3, [r7, #20]
 80162a6:	68db      	ldr	r3, [r3, #12]
 80162a8:	687a      	ldr	r2, [r7, #4]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d104      	bne.n	80162b8 <tcp_process+0x5d8>
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	68da      	ldr	r2, [r3, #12]
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	60da      	str	r2, [r3, #12]
 80162b6:	e005      	b.n	80162c4 <tcp_process+0x5e4>
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	617b      	str	r3, [r7, #20]
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1ef      	bne.n	80162a4 <tcp_process+0x5c4>
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	2200      	movs	r2, #0
 80162c8:	60da      	str	r2, [r3, #12]
 80162ca:	4b77      	ldr	r3, [pc, #476]	@ (80164a8 <tcp_process+0x7c8>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	220a      	movs	r2, #10
 80162d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80162d6:	4b75      	ldr	r3, [pc, #468]	@ (80164ac <tcp_process+0x7cc>)
 80162d8:	681a      	ldr	r2, [r3, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	60da      	str	r2, [r3, #12]
 80162de:	4a73      	ldr	r2, [pc, #460]	@ (80164ac <tcp_process+0x7cc>)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6013      	str	r3, [r2, #0]
 80162e4:	f003 f94c 	bl	8019580 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80162e8:	e0d2      	b.n	8016490 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	8b5b      	ldrh	r3, [r3, #26]
 80162ee:	f043 0302 	orr.w	r3, r3, #2
 80162f2:	b29a      	uxth	r2, r3
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	2208      	movs	r2, #8
 80162fc:	751a      	strb	r2, [r3, #20]
      break;
 80162fe:	e0c7      	b.n	8016490 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016300:	4b6b      	ldr	r3, [pc, #428]	@ (80164b0 <tcp_process+0x7d0>)
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	f003 0310 	and.w	r3, r3, #16
 8016308:	2b00      	cmp	r3, #0
 801630a:	f000 80c1 	beq.w	8016490 <tcp_process+0x7b0>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016312:	4b68      	ldr	r3, [pc, #416]	@ (80164b4 <tcp_process+0x7d4>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	429a      	cmp	r2, r3
 8016318:	f040 80ba 	bne.w	8016490 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016320:	2b00      	cmp	r3, #0
 8016322:	f040 80b5 	bne.w	8016490 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2206      	movs	r2, #6
 801632a:	751a      	strb	r2, [r3, #20]
      break;
 801632c:	e0b0      	b.n	8016490 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801632e:	6878      	ldr	r0, [r7, #4]
 8016330:	f000 f9ca 	bl	80166c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016334:	4b60      	ldr	r3, [pc, #384]	@ (80164b8 <tcp_process+0x7d8>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f003 0320 	and.w	r3, r3, #32
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 80a9 	beq.w	8016494 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	8b5b      	ldrh	r3, [r3, #26]
 8016346:	f043 0302 	orr.w	r3, r3, #2
 801634a:	b29a      	uxth	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f7fe fd39 	bl	8014dc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016356:	4b59      	ldr	r3, [pc, #356]	@ (80164bc <tcp_process+0x7dc>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	429a      	cmp	r2, r3
 801635e:	d105      	bne.n	801636c <tcp_process+0x68c>
 8016360:	4b56      	ldr	r3, [pc, #344]	@ (80164bc <tcp_process+0x7dc>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	4a55      	ldr	r2, [pc, #340]	@ (80164bc <tcp_process+0x7dc>)
 8016368:	6013      	str	r3, [r2, #0]
 801636a:	e013      	b.n	8016394 <tcp_process+0x6b4>
 801636c:	4b53      	ldr	r3, [pc, #332]	@ (80164bc <tcp_process+0x7dc>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	613b      	str	r3, [r7, #16]
 8016372:	e00c      	b.n	801638e <tcp_process+0x6ae>
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	68db      	ldr	r3, [r3, #12]
 8016378:	687a      	ldr	r2, [r7, #4]
 801637a:	429a      	cmp	r2, r3
 801637c:	d104      	bne.n	8016388 <tcp_process+0x6a8>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	68da      	ldr	r2, [r3, #12]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	60da      	str	r2, [r3, #12]
 8016386:	e005      	b.n	8016394 <tcp_process+0x6b4>
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	613b      	str	r3, [r7, #16]
 801638e:	693b      	ldr	r3, [r7, #16]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d1ef      	bne.n	8016374 <tcp_process+0x694>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2200      	movs	r2, #0
 8016398:	60da      	str	r2, [r3, #12]
 801639a:	4b43      	ldr	r3, [pc, #268]	@ (80164a8 <tcp_process+0x7c8>)
 801639c:	2201      	movs	r2, #1
 801639e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	220a      	movs	r2, #10
 80163a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80163a6:	4b41      	ldr	r3, [pc, #260]	@ (80164ac <tcp_process+0x7cc>)
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	60da      	str	r2, [r3, #12]
 80163ae:	4a3f      	ldr	r2, [pc, #252]	@ (80164ac <tcp_process+0x7cc>)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6013      	str	r3, [r2, #0]
 80163b4:	f003 f8e4 	bl	8019580 <tcp_timer_needed>
      }
      break;
 80163b8:	e06c      	b.n	8016494 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 f984 	bl	80166c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80163c0:	4b3b      	ldr	r3, [pc, #236]	@ (80164b0 <tcp_process+0x7d0>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 0310 	and.w	r3, r3, #16
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d065      	beq.n	8016498 <tcp_process+0x7b8>
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80163d0:	4b38      	ldr	r3, [pc, #224]	@ (80164b4 <tcp_process+0x7d4>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d15f      	bne.n	8016498 <tcp_process+0x7b8>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d15b      	bne.n	8016498 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f7fe fcf1 	bl	8014dc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80163e6:	4b35      	ldr	r3, [pc, #212]	@ (80164bc <tcp_process+0x7dc>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	687a      	ldr	r2, [r7, #4]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d105      	bne.n	80163fc <tcp_process+0x71c>
 80163f0:	4b32      	ldr	r3, [pc, #200]	@ (80164bc <tcp_process+0x7dc>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	68db      	ldr	r3, [r3, #12]
 80163f6:	4a31      	ldr	r2, [pc, #196]	@ (80164bc <tcp_process+0x7dc>)
 80163f8:	6013      	str	r3, [r2, #0]
 80163fa:	e013      	b.n	8016424 <tcp_process+0x744>
 80163fc:	4b2f      	ldr	r3, [pc, #188]	@ (80164bc <tcp_process+0x7dc>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	60fb      	str	r3, [r7, #12]
 8016402:	e00c      	b.n	801641e <tcp_process+0x73e>
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	68db      	ldr	r3, [r3, #12]
 8016408:	687a      	ldr	r2, [r7, #4]
 801640a:	429a      	cmp	r2, r3
 801640c:	d104      	bne.n	8016418 <tcp_process+0x738>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68da      	ldr	r2, [r3, #12]
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	60da      	str	r2, [r3, #12]
 8016416:	e005      	b.n	8016424 <tcp_process+0x744>
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68db      	ldr	r3, [r3, #12]
 801641c:	60fb      	str	r3, [r7, #12]
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d1ef      	bne.n	8016404 <tcp_process+0x724>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	2200      	movs	r2, #0
 8016428:	60da      	str	r2, [r3, #12]
 801642a:	4b1f      	ldr	r3, [pc, #124]	@ (80164a8 <tcp_process+0x7c8>)
 801642c:	2201      	movs	r2, #1
 801642e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	220a      	movs	r2, #10
 8016434:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016436:	4b1d      	ldr	r3, [pc, #116]	@ (80164ac <tcp_process+0x7cc>)
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	60da      	str	r2, [r3, #12]
 801643e:	4a1b      	ldr	r2, [pc, #108]	@ (80164ac <tcp_process+0x7cc>)
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	6013      	str	r3, [r2, #0]
 8016444:	f003 f89c 	bl	8019580 <tcp_timer_needed>
      }
      break;
 8016448:	e026      	b.n	8016498 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801644a:	6878      	ldr	r0, [r7, #4]
 801644c:	f000 f93c 	bl	80166c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016450:	4b17      	ldr	r3, [pc, #92]	@ (80164b0 <tcp_process+0x7d0>)
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	f003 0310 	and.w	r3, r3, #16
 8016458:	2b00      	cmp	r3, #0
 801645a:	d01f      	beq.n	801649c <tcp_process+0x7bc>
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016460:	4b14      	ldr	r3, [pc, #80]	@ (80164b4 <tcp_process+0x7d4>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	429a      	cmp	r2, r3
 8016466:	d119      	bne.n	801649c <tcp_process+0x7bc>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801646c:	2b00      	cmp	r3, #0
 801646e:	d115      	bne.n	801649c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016470:	4b11      	ldr	r3, [pc, #68]	@ (80164b8 <tcp_process+0x7d8>)
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	f043 0310 	orr.w	r3, r3, #16
 8016478:	b2da      	uxtb	r2, r3
 801647a:	4b0f      	ldr	r3, [pc, #60]	@ (80164b8 <tcp_process+0x7d8>)
 801647c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801647e:	e00d      	b.n	801649c <tcp_process+0x7bc>
    default:
      break;
 8016480:	bf00      	nop
 8016482:	e00c      	b.n	801649e <tcp_process+0x7be>
      break;
 8016484:	bf00      	nop
 8016486:	e00a      	b.n	801649e <tcp_process+0x7be>
      break;
 8016488:	bf00      	nop
 801648a:	e008      	b.n	801649e <tcp_process+0x7be>
      break;
 801648c:	bf00      	nop
 801648e:	e006      	b.n	801649e <tcp_process+0x7be>
      break;
 8016490:	bf00      	nop
 8016492:	e004      	b.n	801649e <tcp_process+0x7be>
      break;
 8016494:	bf00      	nop
 8016496:	e002      	b.n	801649e <tcp_process+0x7be>
      break;
 8016498:	bf00      	nop
 801649a:	e000      	b.n	801649e <tcp_process+0x7be>
      break;
 801649c:	bf00      	nop
  }
  return ERR_OK;
 801649e:	2300      	movs	r3, #0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3724      	adds	r7, #36	@ 0x24
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd90      	pop	{r4, r7, pc}
 80164a8:	2000f284 	.word	0x2000f284
 80164ac:	2000f280 	.word	0x2000f280
 80164b0:	2000f2b4 	.word	0x2000f2b4
 80164b4:	2000f2ac 	.word	0x2000f2ac
 80164b8:	2000f2b5 	.word	0x2000f2b5
 80164bc:	2000f27c 	.word	0x2000f27c

080164c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80164c0:	b590      	push	{r4, r7, lr}
 80164c2:	b085      	sub	sp, #20
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d106      	bne.n	80164de <tcp_oos_insert_segment+0x1e>
 80164d0:	4b3b      	ldr	r3, [pc, #236]	@ (80165c0 <tcp_oos_insert_segment+0x100>)
 80164d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80164d6:	493b      	ldr	r1, [pc, #236]	@ (80165c4 <tcp_oos_insert_segment+0x104>)
 80164d8:	483b      	ldr	r0, [pc, #236]	@ (80165c8 <tcp_oos_insert_segment+0x108>)
 80164da:	f006 fc5d 	bl	801cd98 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	899b      	ldrh	r3, [r3, #12]
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7fb f8c6 	bl	8011678 <lwip_htons>
 80164ec:	4603      	mov	r3, r0
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	f003 0301 	and.w	r3, r3, #1
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d028      	beq.n	801654a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80164f8:	6838      	ldr	r0, [r7, #0]
 80164fa:	f7fe f977 	bl	80147ec <tcp_segs_free>
    next = NULL;
 80164fe:	2300      	movs	r3, #0
 8016500:	603b      	str	r3, [r7, #0]
 8016502:	e056      	b.n	80165b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016504:	683b      	ldr	r3, [r7, #0]
 8016506:	68db      	ldr	r3, [r3, #12]
 8016508:	899b      	ldrh	r3, [r3, #12]
 801650a:	b29b      	uxth	r3, r3
 801650c:	4618      	mov	r0, r3
 801650e:	f7fb f8b3 	bl	8011678 <lwip_htons>
 8016512:	4603      	mov	r3, r0
 8016514:	b2db      	uxtb	r3, r3
 8016516:	f003 0301 	and.w	r3, r3, #1
 801651a:	2b00      	cmp	r3, #0
 801651c:	d00d      	beq.n	801653a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	899b      	ldrh	r3, [r3, #12]
 8016524:	b29c      	uxth	r4, r3
 8016526:	2001      	movs	r0, #1
 8016528:	f7fb f8a6 	bl	8011678 <lwip_htons>
 801652c:	4603      	mov	r3, r0
 801652e:	461a      	mov	r2, r3
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	68db      	ldr	r3, [r3, #12]
 8016534:	4322      	orrs	r2, r4
 8016536:	b292      	uxth	r2, r2
 8016538:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801653e:	683b      	ldr	r3, [r7, #0]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016544:	68f8      	ldr	r0, [r7, #12]
 8016546:	f7fe f966 	bl	8014816 <tcp_seg_free>
    while (next &&
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d00e      	beq.n	801656e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	891b      	ldrh	r3, [r3, #8]
 8016554:	461a      	mov	r2, r3
 8016556:	4b1d      	ldr	r3, [pc, #116]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	441a      	add	r2, r3
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	6839      	ldr	r1, [r7, #0]
 8016564:	8909      	ldrh	r1, [r1, #8]
 8016566:	440b      	add	r3, r1
 8016568:	1ad3      	subs	r3, r2, r3
    while (next &&
 801656a:	2b00      	cmp	r3, #0
 801656c:	daca      	bge.n	8016504 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d01e      	beq.n	80165b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	891b      	ldrh	r3, [r3, #8]
 8016578:	461a      	mov	r2, r3
 801657a:	4b14      	ldr	r3, [pc, #80]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	441a      	add	r2, r3
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	68db      	ldr	r3, [r3, #12]
 8016584:	685b      	ldr	r3, [r3, #4]
 8016586:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016588:	2b00      	cmp	r3, #0
 801658a:	dd12      	ble.n	80165b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	68db      	ldr	r3, [r3, #12]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	b29a      	uxth	r2, r3
 8016594:	4b0d      	ldr	r3, [pc, #52]	@ (80165cc <tcp_oos_insert_segment+0x10c>)
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	b29b      	uxth	r3, r3
 801659a:	1ad3      	subs	r3, r2, r3
 801659c:	b29a      	uxth	r2, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	685a      	ldr	r2, [r3, #4]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	891b      	ldrh	r3, [r3, #8]
 80165aa:	4619      	mov	r1, r3
 80165ac:	4610      	mov	r0, r2
 80165ae:	f7fc fb05 	bl	8012bbc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	683a      	ldr	r2, [r7, #0]
 80165b6:	601a      	str	r2, [r3, #0]
}
 80165b8:	bf00      	nop
 80165ba:	3714      	adds	r7, #20
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd90      	pop	{r4, r7, pc}
 80165c0:	080201d4 	.word	0x080201d4
 80165c4:	08020494 	.word	0x08020494
 80165c8:	08020220 	.word	0x08020220
 80165cc:	2000f2a8 	.word	0x2000f2a8

080165d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80165d0:	b5b0      	push	{r4, r5, r7, lr}
 80165d2:	b086      	sub	sp, #24
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
 80165dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80165de:	e03e      	b.n	801665e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7fc fcf8 	bl	8012fe4 <pbuf_clen>
 80165f4:	4603      	mov	r3, r0
 80165f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80165fe:	8a7a      	ldrh	r2, [r7, #18]
 8016600:	429a      	cmp	r2, r3
 8016602:	d906      	bls.n	8016612 <tcp_free_acked_segments+0x42>
 8016604:	4b2a      	ldr	r3, [pc, #168]	@ (80166b0 <tcp_free_acked_segments+0xe0>)
 8016606:	f240 4257 	movw	r2, #1111	@ 0x457
 801660a:	492a      	ldr	r1, [pc, #168]	@ (80166b4 <tcp_free_acked_segments+0xe4>)
 801660c:	482a      	ldr	r0, [pc, #168]	@ (80166b8 <tcp_free_acked_segments+0xe8>)
 801660e:	f006 fbc3 	bl	801cd98 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016618:	8a7b      	ldrh	r3, [r7, #18]
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	b29a      	uxth	r2, r3
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	891a      	ldrh	r2, [r3, #8]
 8016628:	4b24      	ldr	r3, [pc, #144]	@ (80166bc <tcp_free_acked_segments+0xec>)
 801662a:	881b      	ldrh	r3, [r3, #0]
 801662c:	4413      	add	r3, r2
 801662e:	b29a      	uxth	r2, r3
 8016630:	4b22      	ldr	r3, [pc, #136]	@ (80166bc <tcp_free_acked_segments+0xec>)
 8016632:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016634:	6978      	ldr	r0, [r7, #20]
 8016636:	f7fe f8ee 	bl	8014816 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016640:	2b00      	cmp	r3, #0
 8016642:	d00c      	beq.n	801665e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d109      	bne.n	801665e <tcp_free_acked_segments+0x8e>
 801664a:	683b      	ldr	r3, [r7, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d106      	bne.n	801665e <tcp_free_acked_segments+0x8e>
 8016650:	4b17      	ldr	r3, [pc, #92]	@ (80166b0 <tcp_free_acked_segments+0xe0>)
 8016652:	f240 4261 	movw	r2, #1121	@ 0x461
 8016656:	491a      	ldr	r1, [pc, #104]	@ (80166c0 <tcp_free_acked_segments+0xf0>)
 8016658:	4817      	ldr	r0, [pc, #92]	@ (80166b8 <tcp_free_acked_segments+0xe8>)
 801665a:	f006 fb9d 	bl	801cd98 <iprintf>
  while (seg_list != NULL &&
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d020      	beq.n	80166a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	4618      	mov	r0, r3
 801666c:	f7fb f819 	bl	80116a2 <lwip_htonl>
 8016670:	4604      	mov	r4, r0
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	891b      	ldrh	r3, [r3, #8]
 8016676:	461d      	mov	r5, r3
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	68db      	ldr	r3, [r3, #12]
 801667c:	899b      	ldrh	r3, [r3, #12]
 801667e:	b29b      	uxth	r3, r3
 8016680:	4618      	mov	r0, r3
 8016682:	f7fa fff9 	bl	8011678 <lwip_htons>
 8016686:	4603      	mov	r3, r0
 8016688:	b2db      	uxtb	r3, r3
 801668a:	f003 0303 	and.w	r3, r3, #3
 801668e:	2b00      	cmp	r3, #0
 8016690:	d001      	beq.n	8016696 <tcp_free_acked_segments+0xc6>
 8016692:	2301      	movs	r3, #1
 8016694:	e000      	b.n	8016698 <tcp_free_acked_segments+0xc8>
 8016696:	2300      	movs	r3, #0
 8016698:	442b      	add	r3, r5
 801669a:	18e2      	adds	r2, r4, r3
 801669c:	4b09      	ldr	r3, [pc, #36]	@ (80166c4 <tcp_free_acked_segments+0xf4>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	dd9c      	ble.n	80165e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80166a6:	68bb      	ldr	r3, [r7, #8]
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3718      	adds	r7, #24
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bdb0      	pop	{r4, r5, r7, pc}
 80166b0:	080201d4 	.word	0x080201d4
 80166b4:	080204bc 	.word	0x080204bc
 80166b8:	08020220 	.word	0x08020220
 80166bc:	2000f2b0 	.word	0x2000f2b0
 80166c0:	080204e4 	.word	0x080204e4
 80166c4:	2000f2ac 	.word	0x2000f2ac

080166c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80166c8:	b5b0      	push	{r4, r5, r7, lr}
 80166ca:	b094      	sub	sp, #80	@ 0x50
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80166d0:	2300      	movs	r3, #0
 80166d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <tcp_receive+0x20>
 80166da:	4b91      	ldr	r3, [pc, #580]	@ (8016920 <tcp_receive+0x258>)
 80166dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80166e0:	4990      	ldr	r1, [pc, #576]	@ (8016924 <tcp_receive+0x25c>)
 80166e2:	4891      	ldr	r0, [pc, #580]	@ (8016928 <tcp_receive+0x260>)
 80166e4:	f006 fb58 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	7d1b      	ldrb	r3, [r3, #20]
 80166ec:	2b03      	cmp	r3, #3
 80166ee:	d806      	bhi.n	80166fe <tcp_receive+0x36>
 80166f0:	4b8b      	ldr	r3, [pc, #556]	@ (8016920 <tcp_receive+0x258>)
 80166f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80166f6:	498d      	ldr	r1, [pc, #564]	@ (801692c <tcp_receive+0x264>)
 80166f8:	488b      	ldr	r0, [pc, #556]	@ (8016928 <tcp_receive+0x260>)
 80166fa:	f006 fb4d 	bl	801cd98 <iprintf>

  if (flags & TCP_ACK) {
 80166fe:	4b8c      	ldr	r3, [pc, #560]	@ (8016930 <tcp_receive+0x268>)
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	f003 0310 	and.w	r3, r3, #16
 8016706:	2b00      	cmp	r3, #0
 8016708:	f000 8264 	beq.w	8016bd4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016718:	4413      	add	r3, r2
 801671a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016720:	4b84      	ldr	r3, [pc, #528]	@ (8016934 <tcp_receive+0x26c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	1ad3      	subs	r3, r2, r3
 8016726:	2b00      	cmp	r3, #0
 8016728:	db1b      	blt.n	8016762 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801672e:	4b81      	ldr	r3, [pc, #516]	@ (8016934 <tcp_receive+0x26c>)
 8016730:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016732:	429a      	cmp	r2, r3
 8016734:	d106      	bne.n	8016744 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801673a:	4b7f      	ldr	r3, [pc, #508]	@ (8016938 <tcp_receive+0x270>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	1ad3      	subs	r3, r2, r3
 8016740:	2b00      	cmp	r3, #0
 8016742:	db0e      	blt.n	8016762 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016748:	4b7b      	ldr	r3, [pc, #492]	@ (8016938 <tcp_receive+0x270>)
 801674a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801674c:	429a      	cmp	r2, r3
 801674e:	d125      	bne.n	801679c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016750:	4b7a      	ldr	r3, [pc, #488]	@ (801693c <tcp_receive+0x274>)
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	89db      	ldrh	r3, [r3, #14]
 8016756:	b29a      	uxth	r2, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801675e:	429a      	cmp	r2, r3
 8016760:	d91c      	bls.n	801679c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016762:	4b76      	ldr	r3, [pc, #472]	@ (801693c <tcp_receive+0x274>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	89db      	ldrh	r3, [r3, #14]
 8016768:	b29a      	uxth	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801677c:	429a      	cmp	r2, r3
 801677e:	d205      	bcs.n	801678c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801678c:	4b69      	ldr	r3, [pc, #420]	@ (8016934 <tcp_receive+0x26c>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016794:	4b68      	ldr	r3, [pc, #416]	@ (8016938 <tcp_receive+0x270>)
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801679c:	4b66      	ldr	r3, [pc, #408]	@ (8016938 <tcp_receive+0x270>)
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	dc58      	bgt.n	801685c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80167aa:	4b65      	ldr	r3, [pc, #404]	@ (8016940 <tcp_receive+0x278>)
 80167ac:	881b      	ldrh	r3, [r3, #0]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d14b      	bne.n	801684a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80167bc:	4413      	add	r3, r2
 80167be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80167c0:	429a      	cmp	r2, r3
 80167c2:	d142      	bne.n	801684a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	db3d      	blt.n	801684a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167d2:	4b59      	ldr	r3, [pc, #356]	@ (8016938 <tcp_receive+0x270>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d137      	bne.n	801684a <tcp_receive+0x182>
              found_dupack = 1;
 80167da:	2301      	movs	r3, #1
 80167dc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167e4:	2bff      	cmp	r3, #255	@ 0xff
 80167e6:	d007      	beq.n	80167f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167ee:	3301      	adds	r3, #1
 80167f0:	b2da      	uxtb	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80167fe:	2b03      	cmp	r3, #3
 8016800:	d91b      	bls.n	801683a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801680c:	4413      	add	r3, r2
 801680e:	b29a      	uxth	r2, r3
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016816:	429a      	cmp	r2, r3
 8016818:	d30a      	bcc.n	8016830 <tcp_receive+0x168>
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016824:	4413      	add	r3, r2
 8016826:	b29a      	uxth	r2, r3
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801682e:	e004      	b.n	801683a <tcp_receive+0x172>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016836:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016840:	2b02      	cmp	r3, #2
 8016842:	d902      	bls.n	801684a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f002 fb3f 	bl	8018ec8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801684a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801684c:	2b00      	cmp	r3, #0
 801684e:	f040 8161 	bne.w	8016b14 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801685a:	e15b      	b.n	8016b14 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801685c:	4b36      	ldr	r3, [pc, #216]	@ (8016938 <tcp_receive+0x270>)
 801685e:	681a      	ldr	r2, [r3, #0]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	3b01      	subs	r3, #1
 8016868:	2b00      	cmp	r3, #0
 801686a:	f2c0 814e 	blt.w	8016b0a <tcp_receive+0x442>
 801686e:	4b32      	ldr	r3, [pc, #200]	@ (8016938 <tcp_receive+0x270>)
 8016870:	681a      	ldr	r2, [r3, #0]
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016876:	1ad3      	subs	r3, r2, r3
 8016878:	2b00      	cmp	r3, #0
 801687a:	f300 8146 	bgt.w	8016b0a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	8b5b      	ldrh	r3, [r3, #26]
 8016882:	f003 0304 	and.w	r3, r3, #4
 8016886:	2b00      	cmp	r3, #0
 8016888:	d010      	beq.n	80168ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8b5b      	ldrh	r3, [r3, #26]
 801688e:	f023 0304 	bic.w	r3, r3, #4
 8016892:	b29a      	uxth	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2200      	movs	r2, #0
 80168a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168ba:	10db      	asrs	r3, r3, #3
 80168bc:	b21b      	sxth	r3, r3
 80168be:	b29a      	uxth	r2, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	4413      	add	r3, r2
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	b21a      	sxth	r2, r3
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80168d4:	4b18      	ldr	r3, [pc, #96]	@ (8016938 <tcp_receive+0x270>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	b29a      	uxth	r2, r3
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80168de:	b29b      	uxth	r3, r3
 80168e0:	1ad3      	subs	r3, r2, r3
 80168e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80168ec:	4b12      	ldr	r3, [pc, #72]	@ (8016938 <tcp_receive+0x270>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	7d1b      	ldrb	r3, [r3, #20]
 80168f8:	2b03      	cmp	r3, #3
 80168fa:	f240 8097 	bls.w	8016a2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801690a:	429a      	cmp	r2, r3
 801690c:	d245      	bcs.n	801699a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	8b5b      	ldrh	r3, [r3, #26]
 8016912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016916:	2b00      	cmp	r3, #0
 8016918:	d014      	beq.n	8016944 <tcp_receive+0x27c>
 801691a:	2301      	movs	r3, #1
 801691c:	e013      	b.n	8016946 <tcp_receive+0x27e>
 801691e:	bf00      	nop
 8016920:	080201d4 	.word	0x080201d4
 8016924:	08020504 	.word	0x08020504
 8016928:	08020220 	.word	0x08020220
 801692c:	08020520 	.word	0x08020520
 8016930:	2000f2b4 	.word	0x2000f2b4
 8016934:	2000f2a8 	.word	0x2000f2a8
 8016938:	2000f2ac 	.word	0x2000f2ac
 801693c:	2000f298 	.word	0x2000f298
 8016940:	2000f2b2 	.word	0x2000f2b2
 8016944:	2302      	movs	r3, #2
 8016946:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801694a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801694e:	b29a      	uxth	r2, r3
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016954:	fb12 f303 	smulbb	r3, r2, r3
 8016958:	b29b      	uxth	r3, r3
 801695a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801695c:	4293      	cmp	r3, r2
 801695e:	bf28      	it	cs
 8016960:	4613      	movcs	r3, r2
 8016962:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801696a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801696c:	4413      	add	r3, r2
 801696e:	b29a      	uxth	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016976:	429a      	cmp	r2, r3
 8016978:	d309      	bcc.n	801698e <tcp_receive+0x2c6>
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016980:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016982:	4413      	add	r3, r2
 8016984:	b29a      	uxth	r2, r3
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801698c:	e04e      	b.n	8016a2c <tcp_receive+0x364>
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016994:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016998:	e048      	b.n	8016a2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169a2:	4413      	add	r3, r2
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d309      	bcc.n	80169c4 <tcp_receive+0x2fc>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80169b8:	4413      	add	r3, r2
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80169c2:	e004      	b.n	80169ce <tcp_receive+0x306>
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80169ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80169da:	429a      	cmp	r2, r3
 80169dc:	d326      	bcc.n	8016a2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80169ea:	1ad3      	subs	r3, r2, r3
 80169ec:	b29a      	uxth	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80169fe:	4413      	add	r3, r2
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d30a      	bcc.n	8016a22 <tcp_receive+0x35a>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016a16:	4413      	add	r3, r2
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016a20:	e004      	b.n	8016a2c <tcp_receive+0x364>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a34:	4a98      	ldr	r2, [pc, #608]	@ (8016c98 <tcp_receive+0x5d0>)
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7ff fdca 	bl	80165d0 <tcp_free_acked_segments>
 8016a3c:	4602      	mov	r2, r0
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a4a:	4a94      	ldr	r2, [pc, #592]	@ (8016c9c <tcp_receive+0x5d4>)
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff fdbf 	bl	80165d0 <tcp_free_acked_segments>
 8016a52:	4602      	mov	r2, r0
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d104      	bne.n	8016a6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a66:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016a68:	e002      	b.n	8016a70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d103      	bne.n	8016a86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2200      	movs	r2, #0
 8016a82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016a8c:	4b84      	ldr	r3, [pc, #528]	@ (8016ca0 <tcp_receive+0x5d8>)
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	4413      	add	r3, r2
 8016a92:	b29a      	uxth	r2, r3
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d035      	beq.n	8016b12 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d118      	bne.n	8016ae0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d00c      	beq.n	8016ad0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	685b      	ldr	r3, [r3, #4]
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f7fa fded 	bl	80116a2 <lwip_htonl>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	dc20      	bgt.n	8016b12 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	8b5b      	ldrh	r3, [r3, #26]
 8016ad4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016ade:	e018      	b.n	8016b12 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ae8:	68db      	ldr	r3, [r3, #12]
 8016aea:	685b      	ldr	r3, [r3, #4]
 8016aec:	4618      	mov	r0, r3
 8016aee:	f7fa fdd8 	bl	80116a2 <lwip_htonl>
 8016af2:	4603      	mov	r3, r0
 8016af4:	1ae3      	subs	r3, r4, r3
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	dc0b      	bgt.n	8016b12 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	8b5b      	ldrh	r3, [r3, #26]
 8016afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8016b02:	b29a      	uxth	r2, r3
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b08:	e003      	b.n	8016b12 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f002 fbc8 	bl	80192a0 <tcp_send_empty_ack>
 8016b10:	e000      	b.n	8016b14 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b12:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d05b      	beq.n	8016bd4 <tcp_receive+0x50c>
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016b20:	4b60      	ldr	r3, [pc, #384]	@ (8016ca4 <tcp_receive+0x5dc>)
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	1ad3      	subs	r3, r2, r3
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	da54      	bge.n	8016bd4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016b2a:	4b5f      	ldr	r3, [pc, #380]	@ (8016ca8 <tcp_receive+0x5e0>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	1ad3      	subs	r3, r2, r3
 8016b38:	b29b      	uxth	r3, r3
 8016b3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016b3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016b48:	10db      	asrs	r3, r3, #3
 8016b4a:	b21b      	sxth	r3, r3
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016b62:	4413      	add	r3, r2
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	b21a      	sxth	r2, r3
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8016b6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	da05      	bge.n	8016b80 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016b74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016b78:	425b      	negs	r3, r3
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016b80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016b8a:	109b      	asrs	r3, r3, #2
 8016b8c:	b21b      	sxth	r3, r3
 8016b8e:	b29b      	uxth	r3, r3
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016ba4:	4413      	add	r3, r2
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	b21a      	sxth	r2, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016bb4:	10db      	asrs	r3, r3, #3
 8016bb6:	b21b      	sxth	r3, r3
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	4413      	add	r3, r2
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	b21a      	sxth	r2, r3
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016bd4:	4b35      	ldr	r3, [pc, #212]	@ (8016cac <tcp_receive+0x5e4>)
 8016bd6:	881b      	ldrh	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	f000 84df 	beq.w	801759c <tcp_receive+0xed4>
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	7d1b      	ldrb	r3, [r3, #20]
 8016be2:	2b06      	cmp	r3, #6
 8016be4:	f200 84da 	bhi.w	801759c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bec:	4b30      	ldr	r3, [pc, #192]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	1ad3      	subs	r3, r2, r3
 8016bf2:	3b01      	subs	r3, #1
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	f2c0 808f 	blt.w	8016d18 <tcp_receive+0x650>
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8016cac <tcp_receive+0x5e4>)
 8016c00:	881b      	ldrh	r3, [r3, #0]
 8016c02:	4619      	mov	r1, r3
 8016c04:	4b2a      	ldr	r3, [pc, #168]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	440b      	add	r3, r1
 8016c0a:	1ad3      	subs	r3, r2, r3
 8016c0c:	3301      	adds	r3, #1
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f300 8082 	bgt.w	8016d18 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016c14:	4b27      	ldr	r3, [pc, #156]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c16:	685b      	ldr	r3, [r3, #4]
 8016c18:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c1e:	4b24      	ldr	r3, [pc, #144]	@ (8016cb0 <tcp_receive+0x5e8>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	1ad3      	subs	r3, r2, r3
 8016c24:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016c26:	4b23      	ldr	r3, [pc, #140]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c28:	685b      	ldr	r3, [r3, #4]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d106      	bne.n	8016c3c <tcp_receive+0x574>
 8016c2e:	4b22      	ldr	r3, [pc, #136]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c30:	f240 5294 	movw	r2, #1428	@ 0x594
 8016c34:	4921      	ldr	r1, [pc, #132]	@ (8016cbc <tcp_receive+0x5f4>)
 8016c36:	4822      	ldr	r0, [pc, #136]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c38:	f006 f8ae 	bl	801cd98 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d906      	bls.n	8016c54 <tcp_receive+0x58c>
 8016c46:	4b1c      	ldr	r3, [pc, #112]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c48:	f240 5295 	movw	r2, #1429	@ 0x595
 8016c4c:	491d      	ldr	r1, [pc, #116]	@ (8016cc4 <tcp_receive+0x5fc>)
 8016c4e:	481c      	ldr	r0, [pc, #112]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c50:	f006 f8a2 	bl	801cd98 <iprintf>
      off = (u16_t)off32;
 8016c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016c5a:	4b16      	ldr	r3, [pc, #88]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c5c:	685b      	ldr	r3, [r3, #4]
 8016c5e:	891b      	ldrh	r3, [r3, #8]
 8016c60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016c64:	429a      	cmp	r2, r3
 8016c66:	d906      	bls.n	8016c76 <tcp_receive+0x5ae>
 8016c68:	4b13      	ldr	r3, [pc, #76]	@ (8016cb8 <tcp_receive+0x5f0>)
 8016c6a:	f240 5297 	movw	r2, #1431	@ 0x597
 8016c6e:	4916      	ldr	r1, [pc, #88]	@ (8016cc8 <tcp_receive+0x600>)
 8016c70:	4813      	ldr	r0, [pc, #76]	@ (8016cc0 <tcp_receive+0x5f8>)
 8016c72:	f006 f891 	bl	801cd98 <iprintf>
      inseg.len -= off;
 8016c76:	4b0f      	ldr	r3, [pc, #60]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c78:	891a      	ldrh	r2, [r3, #8]
 8016c7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016c7e:	1ad3      	subs	r3, r2, r3
 8016c80:	b29a      	uxth	r2, r3
 8016c82:	4b0c      	ldr	r3, [pc, #48]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c84:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016c86:	4b0b      	ldr	r3, [pc, #44]	@ (8016cb4 <tcp_receive+0x5ec>)
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	891a      	ldrh	r2, [r3, #8]
 8016c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8016c94:	e02a      	b.n	8016cec <tcp_receive+0x624>
 8016c96:	bf00      	nop
 8016c98:	0802053c 	.word	0x0802053c
 8016c9c:	08020544 	.word	0x08020544
 8016ca0:	2000f2b0 	.word	0x2000f2b0
 8016ca4:	2000f2ac 	.word	0x2000f2ac
 8016ca8:	2000f270 	.word	0x2000f270
 8016cac:	2000f2b2 	.word	0x2000f2b2
 8016cb0:	2000f2a8 	.word	0x2000f2a8
 8016cb4:	2000f288 	.word	0x2000f288
 8016cb8:	080201d4 	.word	0x080201d4
 8016cbc:	0802054c 	.word	0x0802054c
 8016cc0:	08020220 	.word	0x08020220
 8016cc4:	0802055c 	.word	0x0802055c
 8016cc8:	0802056c 	.word	0x0802056c
        off -= p->len;
 8016ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cce:	895b      	ldrh	r3, [r3, #10]
 8016cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016cd4:	1ad3      	subs	r3, r2, r3
 8016cd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cdc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016cde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016cee:	895b      	ldrh	r3, [r3, #10]
 8016cf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d8e9      	bhi.n	8016ccc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016cf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016cfc:	4619      	mov	r1, r3
 8016cfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016d00:	f7fc f85c 	bl	8012dbc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d08:	4a90      	ldr	r2, [pc, #576]	@ (8016f4c <tcp_receive+0x884>)
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	4b90      	ldr	r3, [pc, #576]	@ (8016f50 <tcp_receive+0x888>)
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	4a8e      	ldr	r2, [pc, #568]	@ (8016f4c <tcp_receive+0x884>)
 8016d12:	6812      	ldr	r2, [r2, #0]
 8016d14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016d16:	e00d      	b.n	8016d34 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016d18:	4b8c      	ldr	r3, [pc, #560]	@ (8016f4c <tcp_receive+0x884>)
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d20:	1ad3      	subs	r3, r2, r3
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	da06      	bge.n	8016d34 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	8b5b      	ldrh	r3, [r3, #26]
 8016d2a:	f043 0302 	orr.w	r3, r3, #2
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d34:	4b85      	ldr	r3, [pc, #532]	@ (8016f4c <tcp_receive+0x884>)
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	f2c0 8427 	blt.w	8017592 <tcp_receive+0xeca>
 8016d44:	4b81      	ldr	r3, [pc, #516]	@ (8016f4c <tcp_receive+0x884>)
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d4c:	6879      	ldr	r1, [r7, #4]
 8016d4e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d50:	440b      	add	r3, r1
 8016d52:	1ad3      	subs	r3, r2, r3
 8016d54:	3301      	adds	r3, #1
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	f300 841b 	bgt.w	8017592 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d60:	4b7a      	ldr	r3, [pc, #488]	@ (8016f4c <tcp_receive+0x884>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	429a      	cmp	r2, r3
 8016d66:	f040 8298 	bne.w	801729a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016d6a:	4b79      	ldr	r3, [pc, #484]	@ (8016f50 <tcp_receive+0x888>)
 8016d6c:	891c      	ldrh	r4, [r3, #8]
 8016d6e:	4b78      	ldr	r3, [pc, #480]	@ (8016f50 <tcp_receive+0x888>)
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	899b      	ldrh	r3, [r3, #12]
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fa fc7e 	bl	8011678 <lwip_htons>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	b2db      	uxtb	r3, r3
 8016d80:	f003 0303 	and.w	r3, r3, #3
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d001      	beq.n	8016d8c <tcp_receive+0x6c4>
 8016d88:	2301      	movs	r3, #1
 8016d8a:	e000      	b.n	8016d8e <tcp_receive+0x6c6>
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	4423      	add	r3, r4
 8016d90:	b29a      	uxth	r2, r3
 8016d92:	4b70      	ldr	r3, [pc, #448]	@ (8016f54 <tcp_receive+0x88c>)
 8016d94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8016f54 <tcp_receive+0x88c>)
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	429a      	cmp	r2, r3
 8016da0:	d274      	bcs.n	8016e8c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016da2:	4b6b      	ldr	r3, [pc, #428]	@ (8016f50 <tcp_receive+0x888>)
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	899b      	ldrh	r3, [r3, #12]
 8016da8:	b29b      	uxth	r3, r3
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7fa fc64 	bl	8011678 <lwip_htons>
 8016db0:	4603      	mov	r3, r0
 8016db2:	b2db      	uxtb	r3, r3
 8016db4:	f003 0301 	and.w	r3, r3, #1
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d01e      	beq.n	8016dfa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016dbc:	4b64      	ldr	r3, [pc, #400]	@ (8016f50 <tcp_receive+0x888>)
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	899b      	ldrh	r3, [r3, #12]
 8016dc2:	b29b      	uxth	r3, r3
 8016dc4:	b21b      	sxth	r3, r3
 8016dc6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016dca:	b21c      	sxth	r4, r3
 8016dcc:	4b60      	ldr	r3, [pc, #384]	@ (8016f50 <tcp_receive+0x888>)
 8016dce:	68db      	ldr	r3, [r3, #12]
 8016dd0:	899b      	ldrh	r3, [r3, #12]
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fa fc4f 	bl	8011678 <lwip_htons>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7fa fc47 	bl	8011678 <lwip_htons>
 8016dea:	4603      	mov	r3, r0
 8016dec:	b21b      	sxth	r3, r3
 8016dee:	4323      	orrs	r3, r4
 8016df0:	b21a      	sxth	r2, r3
 8016df2:	4b57      	ldr	r3, [pc, #348]	@ (8016f50 <tcp_receive+0x888>)
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	b292      	uxth	r2, r2
 8016df8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016dfe:	4b54      	ldr	r3, [pc, #336]	@ (8016f50 <tcp_receive+0x888>)
 8016e00:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e02:	4b53      	ldr	r3, [pc, #332]	@ (8016f50 <tcp_receive+0x888>)
 8016e04:	68db      	ldr	r3, [r3, #12]
 8016e06:	899b      	ldrh	r3, [r3, #12]
 8016e08:	b29b      	uxth	r3, r3
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7fa fc34 	bl	8011678 <lwip_htons>
 8016e10:	4603      	mov	r3, r0
 8016e12:	b2db      	uxtb	r3, r3
 8016e14:	f003 0302 	and.w	r3, r3, #2
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d005      	beq.n	8016e28 <tcp_receive+0x760>
            inseg.len -= 1;
 8016e1c:	4b4c      	ldr	r3, [pc, #304]	@ (8016f50 <tcp_receive+0x888>)
 8016e1e:	891b      	ldrh	r3, [r3, #8]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	b29a      	uxth	r2, r3
 8016e24:	4b4a      	ldr	r3, [pc, #296]	@ (8016f50 <tcp_receive+0x888>)
 8016e26:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016e28:	4b49      	ldr	r3, [pc, #292]	@ (8016f50 <tcp_receive+0x888>)
 8016e2a:	685b      	ldr	r3, [r3, #4]
 8016e2c:	4a48      	ldr	r2, [pc, #288]	@ (8016f50 <tcp_receive+0x888>)
 8016e2e:	8912      	ldrh	r2, [r2, #8]
 8016e30:	4611      	mov	r1, r2
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7fb fec2 	bl	8012bbc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016e38:	4b45      	ldr	r3, [pc, #276]	@ (8016f50 <tcp_receive+0x888>)
 8016e3a:	891c      	ldrh	r4, [r3, #8]
 8016e3c:	4b44      	ldr	r3, [pc, #272]	@ (8016f50 <tcp_receive+0x888>)
 8016e3e:	68db      	ldr	r3, [r3, #12]
 8016e40:	899b      	ldrh	r3, [r3, #12]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7fa fc17 	bl	8011678 <lwip_htons>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	f003 0303 	and.w	r3, r3, #3
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d001      	beq.n	8016e5a <tcp_receive+0x792>
 8016e56:	2301      	movs	r3, #1
 8016e58:	e000      	b.n	8016e5c <tcp_receive+0x794>
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	4423      	add	r3, r4
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	4b3c      	ldr	r3, [pc, #240]	@ (8016f54 <tcp_receive+0x88c>)
 8016e62:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016e64:	4b3b      	ldr	r3, [pc, #236]	@ (8016f54 <tcp_receive+0x88c>)
 8016e66:	881b      	ldrh	r3, [r3, #0]
 8016e68:	461a      	mov	r2, r3
 8016e6a:	4b38      	ldr	r3, [pc, #224]	@ (8016f4c <tcp_receive+0x884>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	441a      	add	r2, r3
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016e78:	440b      	add	r3, r1
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d006      	beq.n	8016e8c <tcp_receive+0x7c4>
 8016e7e:	4b36      	ldr	r3, [pc, #216]	@ (8016f58 <tcp_receive+0x890>)
 8016e80:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8016e84:	4935      	ldr	r1, [pc, #212]	@ (8016f5c <tcp_receive+0x894>)
 8016e86:	4836      	ldr	r0, [pc, #216]	@ (8016f60 <tcp_receive+0x898>)
 8016e88:	f005 ff86 	bl	801cd98 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 80e6 	beq.w	8017062 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e96:	4b2e      	ldr	r3, [pc, #184]	@ (8016f50 <tcp_receive+0x888>)
 8016e98:	68db      	ldr	r3, [r3, #12]
 8016e9a:	899b      	ldrh	r3, [r3, #12]
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fa fbea 	bl	8011678 <lwip_htons>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	f003 0301 	and.w	r3, r3, #1
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d010      	beq.n	8016ed2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016eb0:	e00a      	b.n	8016ec8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016eb6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ebc:	681a      	ldr	r2, [r3, #0]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016ec2:	68f8      	ldr	r0, [r7, #12]
 8016ec4:	f7fd fca7 	bl	8014816 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d1f0      	bne.n	8016eb2 <tcp_receive+0x7ea>
 8016ed0:	e0c7      	b.n	8017062 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016ed8:	e051      	b.n	8016f7e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	899b      	ldrh	r3, [r3, #12]
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fa fbc8 	bl	8011678 <lwip_htons>
 8016ee8:	4603      	mov	r3, r0
 8016eea:	b2db      	uxtb	r3, r3
 8016eec:	f003 0301 	and.w	r3, r3, #1
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d03c      	beq.n	8016f6e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016ef4:	4b16      	ldr	r3, [pc, #88]	@ (8016f50 <tcp_receive+0x888>)
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	899b      	ldrh	r3, [r3, #12]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7fa fbbb 	bl	8011678 <lwip_htons>
 8016f02:	4603      	mov	r3, r0
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d12f      	bne.n	8016f6e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016f0e:	4b10      	ldr	r3, [pc, #64]	@ (8016f50 <tcp_receive+0x888>)
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	899b      	ldrh	r3, [r3, #12]
 8016f14:	b29c      	uxth	r4, r3
 8016f16:	2001      	movs	r0, #1
 8016f18:	f7fa fbae 	bl	8011678 <lwip_htons>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	461a      	mov	r2, r3
 8016f20:	4b0b      	ldr	r3, [pc, #44]	@ (8016f50 <tcp_receive+0x888>)
 8016f22:	68db      	ldr	r3, [r3, #12]
 8016f24:	4322      	orrs	r2, r4
 8016f26:	b292      	uxth	r2, r2
 8016f28:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016f2a:	4b09      	ldr	r3, [pc, #36]	@ (8016f50 <tcp_receive+0x888>)
 8016f2c:	891c      	ldrh	r4, [r3, #8]
 8016f2e:	4b08      	ldr	r3, [pc, #32]	@ (8016f50 <tcp_receive+0x888>)
 8016f30:	68db      	ldr	r3, [r3, #12]
 8016f32:	899b      	ldrh	r3, [r3, #12]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7fa fb9e 	bl	8011678 <lwip_htons>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	b2db      	uxtb	r3, r3
 8016f40:	f003 0303 	and.w	r3, r3, #3
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00d      	beq.n	8016f64 <tcp_receive+0x89c>
 8016f48:	2301      	movs	r3, #1
 8016f4a:	e00c      	b.n	8016f66 <tcp_receive+0x89e>
 8016f4c:	2000f2a8 	.word	0x2000f2a8
 8016f50:	2000f288 	.word	0x2000f288
 8016f54:	2000f2b2 	.word	0x2000f2b2
 8016f58:	080201d4 	.word	0x080201d4
 8016f5c:	0802057c 	.word	0x0802057c
 8016f60:	08020220 	.word	0x08020220
 8016f64:	2300      	movs	r3, #0
 8016f66:	4423      	add	r3, r4
 8016f68:	b29a      	uxth	r2, r3
 8016f6a:	4b98      	ldr	r3, [pc, #608]	@ (80171cc <tcp_receive+0xb04>)
 8016f6c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f70:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8016f78:	6938      	ldr	r0, [r7, #16]
 8016f7a:	f7fd fc4c 	bl	8014816 <tcp_seg_free>
            while (next &&
 8016f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d00e      	beq.n	8016fa2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016f84:	4b91      	ldr	r3, [pc, #580]	@ (80171cc <tcp_receive+0xb04>)
 8016f86:	881b      	ldrh	r3, [r3, #0]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	4b91      	ldr	r3, [pc, #580]	@ (80171d0 <tcp_receive+0xb08>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	441a      	add	r2, r3
 8016f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016f98:	8909      	ldrh	r1, [r1, #8]
 8016f9a:	440b      	add	r3, r1
 8016f9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	da9b      	bge.n	8016eda <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d059      	beq.n	801705c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016fa8:	4b88      	ldr	r3, [pc, #544]	@ (80171cc <tcp_receive+0xb04>)
 8016faa:	881b      	ldrh	r3, [r3, #0]
 8016fac:	461a      	mov	r2, r3
 8016fae:	4b88      	ldr	r3, [pc, #544]	@ (80171d0 <tcp_receive+0xb08>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	441a      	add	r2, r3
 8016fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	dd4d      	ble.n	801705c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fc2:	68db      	ldr	r3, [r3, #12]
 8016fc4:	685b      	ldr	r3, [r3, #4]
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	4b81      	ldr	r3, [pc, #516]	@ (80171d0 <tcp_receive+0xb08>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	1ad3      	subs	r3, r2, r3
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	4b80      	ldr	r3, [pc, #512]	@ (80171d4 <tcp_receive+0xb0c>)
 8016fd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80171d4 <tcp_receive+0xb0c>)
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fb4a 	bl	8011678 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	f003 0302 	and.w	r3, r3, #2
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d005      	beq.n	8016ffc <tcp_receive+0x934>
                inseg.len -= 1;
 8016ff0:	4b78      	ldr	r3, [pc, #480]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ff2:	891b      	ldrh	r3, [r3, #8]
 8016ff4:	3b01      	subs	r3, #1
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	4b76      	ldr	r3, [pc, #472]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ffa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016ffc:	4b75      	ldr	r3, [pc, #468]	@ (80171d4 <tcp_receive+0xb0c>)
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	4a74      	ldr	r2, [pc, #464]	@ (80171d4 <tcp_receive+0xb0c>)
 8017002:	8912      	ldrh	r2, [r2, #8]
 8017004:	4611      	mov	r1, r2
 8017006:	4618      	mov	r0, r3
 8017008:	f7fb fdd8 	bl	8012bbc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801700c:	4b71      	ldr	r3, [pc, #452]	@ (80171d4 <tcp_receive+0xb0c>)
 801700e:	891c      	ldrh	r4, [r3, #8]
 8017010:	4b70      	ldr	r3, [pc, #448]	@ (80171d4 <tcp_receive+0xb0c>)
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	899b      	ldrh	r3, [r3, #12]
 8017016:	b29b      	uxth	r3, r3
 8017018:	4618      	mov	r0, r3
 801701a:	f7fa fb2d 	bl	8011678 <lwip_htons>
 801701e:	4603      	mov	r3, r0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	f003 0303 	and.w	r3, r3, #3
 8017026:	2b00      	cmp	r3, #0
 8017028:	d001      	beq.n	801702e <tcp_receive+0x966>
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <tcp_receive+0x968>
 801702e:	2300      	movs	r3, #0
 8017030:	4423      	add	r3, r4
 8017032:	b29a      	uxth	r2, r3
 8017034:	4b65      	ldr	r3, [pc, #404]	@ (80171cc <tcp_receive+0xb04>)
 8017036:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017038:	4b64      	ldr	r3, [pc, #400]	@ (80171cc <tcp_receive+0xb04>)
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	4b64      	ldr	r3, [pc, #400]	@ (80171d0 <tcp_receive+0xb08>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	441a      	add	r2, r3
 8017044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	429a      	cmp	r2, r3
 801704c:	d006      	beq.n	801705c <tcp_receive+0x994>
 801704e:	4b62      	ldr	r3, [pc, #392]	@ (80171d8 <tcp_receive+0xb10>)
 8017050:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8017054:	4961      	ldr	r1, [pc, #388]	@ (80171dc <tcp_receive+0xb14>)
 8017056:	4862      	ldr	r0, [pc, #392]	@ (80171e0 <tcp_receive+0xb18>)
 8017058:	f005 fe9e 	bl	801cd98 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017060:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8017062:	4b5a      	ldr	r3, [pc, #360]	@ (80171cc <tcp_receive+0xb04>)
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	461a      	mov	r2, r3
 8017068:	4b59      	ldr	r3, [pc, #356]	@ (80171d0 <tcp_receive+0xb08>)
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	441a      	add	r2, r3
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017076:	4b55      	ldr	r3, [pc, #340]	@ (80171cc <tcp_receive+0xb04>)
 8017078:	881b      	ldrh	r3, [r3, #0]
 801707a:	429a      	cmp	r2, r3
 801707c:	d206      	bcs.n	801708c <tcp_receive+0x9c4>
 801707e:	4b56      	ldr	r3, [pc, #344]	@ (80171d8 <tcp_receive+0xb10>)
 8017080:	f240 6207 	movw	r2, #1543	@ 0x607
 8017084:	4957      	ldr	r1, [pc, #348]	@ (80171e4 <tcp_receive+0xb1c>)
 8017086:	4856      	ldr	r0, [pc, #344]	@ (80171e0 <tcp_receive+0xb18>)
 8017088:	f005 fe86 	bl	801cd98 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017090:	4b4e      	ldr	r3, [pc, #312]	@ (80171cc <tcp_receive+0xb04>)
 8017092:	881b      	ldrh	r3, [r3, #0]
 8017094:	1ad3      	subs	r3, r2, r3
 8017096:	b29a      	uxth	r2, r3
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7fc fe93 	bl	8013dc8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80170a2:	4b4c      	ldr	r3, [pc, #304]	@ (80171d4 <tcp_receive+0xb0c>)
 80170a4:	685b      	ldr	r3, [r3, #4]
 80170a6:	891b      	ldrh	r3, [r3, #8]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d006      	beq.n	80170ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80170ac:	4b49      	ldr	r3, [pc, #292]	@ (80171d4 <tcp_receive+0xb0c>)
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	4a4d      	ldr	r2, [pc, #308]	@ (80171e8 <tcp_receive+0xb20>)
 80170b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80170b4:	4b47      	ldr	r3, [pc, #284]	@ (80171d4 <tcp_receive+0xb0c>)
 80170b6:	2200      	movs	r2, #0
 80170b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80170ba:	4b46      	ldr	r3, [pc, #280]	@ (80171d4 <tcp_receive+0xb0c>)
 80170bc:	68db      	ldr	r3, [r3, #12]
 80170be:	899b      	ldrh	r3, [r3, #12]
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fa fad8 	bl	8011678 <lwip_htons>
 80170c8:	4603      	mov	r3, r0
 80170ca:	b2db      	uxtb	r3, r3
 80170cc:	f003 0301 	and.w	r3, r3, #1
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	f000 80b8 	beq.w	8017246 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80170d6:	4b45      	ldr	r3, [pc, #276]	@ (80171ec <tcp_receive+0xb24>)
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	f043 0320 	orr.w	r3, r3, #32
 80170de:	b2da      	uxtb	r2, r3
 80170e0:	4b42      	ldr	r3, [pc, #264]	@ (80171ec <tcp_receive+0xb24>)
 80170e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80170e4:	e0af      	b.n	8017246 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80170f0:	68db      	ldr	r3, [r3, #12]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	4a36      	ldr	r2, [pc, #216]	@ (80171d0 <tcp_receive+0xb08>)
 80170f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	891b      	ldrh	r3, [r3, #8]
 80170fc:	461c      	mov	r4, r3
 80170fe:	68bb      	ldr	r3, [r7, #8]
 8017100:	68db      	ldr	r3, [r3, #12]
 8017102:	899b      	ldrh	r3, [r3, #12]
 8017104:	b29b      	uxth	r3, r3
 8017106:	4618      	mov	r0, r3
 8017108:	f7fa fab6 	bl	8011678 <lwip_htons>
 801710c:	4603      	mov	r3, r0
 801710e:	b2db      	uxtb	r3, r3
 8017110:	f003 0303 	and.w	r3, r3, #3
 8017114:	2b00      	cmp	r3, #0
 8017116:	d001      	beq.n	801711c <tcp_receive+0xa54>
 8017118:	2301      	movs	r3, #1
 801711a:	e000      	b.n	801711e <tcp_receive+0xa56>
 801711c:	2300      	movs	r3, #0
 801711e:	191a      	adds	r2, r3, r4
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017124:	441a      	add	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801712e:	461c      	mov	r4, r3
 8017130:	68bb      	ldr	r3, [r7, #8]
 8017132:	891b      	ldrh	r3, [r3, #8]
 8017134:	461d      	mov	r5, r3
 8017136:	68bb      	ldr	r3, [r7, #8]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	899b      	ldrh	r3, [r3, #12]
 801713c:	b29b      	uxth	r3, r3
 801713e:	4618      	mov	r0, r3
 8017140:	f7fa fa9a 	bl	8011678 <lwip_htons>
 8017144:	4603      	mov	r3, r0
 8017146:	b2db      	uxtb	r3, r3
 8017148:	f003 0303 	and.w	r3, r3, #3
 801714c:	2b00      	cmp	r3, #0
 801714e:	d001      	beq.n	8017154 <tcp_receive+0xa8c>
 8017150:	2301      	movs	r3, #1
 8017152:	e000      	b.n	8017156 <tcp_receive+0xa8e>
 8017154:	2300      	movs	r3, #0
 8017156:	442b      	add	r3, r5
 8017158:	429c      	cmp	r4, r3
 801715a:	d206      	bcs.n	801716a <tcp_receive+0xaa2>
 801715c:	4b1e      	ldr	r3, [pc, #120]	@ (80171d8 <tcp_receive+0xb10>)
 801715e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8017162:	4923      	ldr	r1, [pc, #140]	@ (80171f0 <tcp_receive+0xb28>)
 8017164:	481e      	ldr	r0, [pc, #120]	@ (80171e0 <tcp_receive+0xb18>)
 8017166:	f005 fe17 	bl	801cd98 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	891b      	ldrh	r3, [r3, #8]
 801716e:	461c      	mov	r4, r3
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	899b      	ldrh	r3, [r3, #12]
 8017176:	b29b      	uxth	r3, r3
 8017178:	4618      	mov	r0, r3
 801717a:	f7fa fa7d 	bl	8011678 <lwip_htons>
 801717e:	4603      	mov	r3, r0
 8017180:	b2db      	uxtb	r3, r3
 8017182:	f003 0303 	and.w	r3, r3, #3
 8017186:	2b00      	cmp	r3, #0
 8017188:	d001      	beq.n	801718e <tcp_receive+0xac6>
 801718a:	2301      	movs	r3, #1
 801718c:	e000      	b.n	8017190 <tcp_receive+0xac8>
 801718e:	2300      	movs	r3, #0
 8017190:	1919      	adds	r1, r3, r4
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017196:	b28b      	uxth	r3, r1
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	b29a      	uxth	r2, r3
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f7fc fe11 	bl	8013dc8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	891b      	ldrh	r3, [r3, #8]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d028      	beq.n	8017202 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80171b0:	4b0d      	ldr	r3, [pc, #52]	@ (80171e8 <tcp_receive+0xb20>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d01d      	beq.n	80171f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80171b8:	4b0b      	ldr	r3, [pc, #44]	@ (80171e8 <tcp_receive+0xb20>)
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	4619      	mov	r1, r3
 80171c2:	4610      	mov	r0, r2
 80171c4:	f7fb ff4e 	bl	8013064 <pbuf_cat>
 80171c8:	e018      	b.n	80171fc <tcp_receive+0xb34>
 80171ca:	bf00      	nop
 80171cc:	2000f2b2 	.word	0x2000f2b2
 80171d0:	2000f2a8 	.word	0x2000f2a8
 80171d4:	2000f288 	.word	0x2000f288
 80171d8:	080201d4 	.word	0x080201d4
 80171dc:	080205b4 	.word	0x080205b4
 80171e0:	08020220 	.word	0x08020220
 80171e4:	080205f0 	.word	0x080205f0
 80171e8:	2000f2b8 	.word	0x2000f2b8
 80171ec:	2000f2b5 	.word	0x2000f2b5
 80171f0:	08020610 	.word	0x08020610
            } else {
              recv_data = cseg->p;
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	4a70      	ldr	r2, [pc, #448]	@ (80173bc <tcp_receive+0xcf4>)
 80171fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	2200      	movs	r2, #0
 8017200:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	68db      	ldr	r3, [r3, #12]
 8017206:	899b      	ldrh	r3, [r3, #12]
 8017208:	b29b      	uxth	r3, r3
 801720a:	4618      	mov	r0, r3
 801720c:	f7fa fa34 	bl	8011678 <lwip_htons>
 8017210:	4603      	mov	r3, r0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	f003 0301 	and.w	r3, r3, #1
 8017218:	2b00      	cmp	r3, #0
 801721a:	d00d      	beq.n	8017238 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801721c:	4b68      	ldr	r3, [pc, #416]	@ (80173c0 <tcp_receive+0xcf8>)
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	f043 0320 	orr.w	r3, r3, #32
 8017224:	b2da      	uxtb	r2, r3
 8017226:	4b66      	ldr	r3, [pc, #408]	@ (80173c0 <tcp_receive+0xcf8>)
 8017228:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	7d1b      	ldrb	r3, [r3, #20]
 801722e:	2b04      	cmp	r3, #4
 8017230:	d102      	bne.n	8017238 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2207      	movs	r2, #7
 8017236:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017238:	68bb      	ldr	r3, [r7, #8]
 801723a:	681a      	ldr	r2, [r3, #0]
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8017240:	68b8      	ldr	r0, [r7, #8]
 8017242:	f7fd fae8 	bl	8014816 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801724a:	2b00      	cmp	r3, #0
 801724c:	d008      	beq.n	8017260 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017252:	68db      	ldr	r3, [r3, #12]
 8017254:	685a      	ldr	r2, [r3, #4]
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801725a:	429a      	cmp	r2, r3
 801725c:	f43f af43 	beq.w	80170e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	8b5b      	ldrh	r3, [r3, #26]
 8017264:	f003 0301 	and.w	r3, r3, #1
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00e      	beq.n	801728a <tcp_receive+0xbc2>
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	8b5b      	ldrh	r3, [r3, #26]
 8017270:	f023 0301 	bic.w	r3, r3, #1
 8017274:	b29a      	uxth	r2, r3
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	835a      	strh	r2, [r3, #26]
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f043 0302 	orr.w	r3, r3, #2
 8017282:	b29a      	uxth	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017288:	e187      	b.n	801759a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	8b5b      	ldrh	r3, [r3, #26]
 801728e:	f043 0301 	orr.w	r3, r3, #1
 8017292:	b29a      	uxth	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017298:	e17f      	b.n	801759a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d106      	bne.n	80172b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80172a2:	4848      	ldr	r0, [pc, #288]	@ (80173c4 <tcp_receive+0xcfc>)
 80172a4:	f7fd faee 	bl	8014884 <tcp_seg_copy>
 80172a8:	4602      	mov	r2, r0
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80172ae:	e16c      	b.n	801758a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80172b0:	2300      	movs	r3, #0
 80172b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80172b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80172ba:	e156      	b.n	801756a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80172bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	685a      	ldr	r2, [r3, #4]
 80172c2:	4b41      	ldr	r3, [pc, #260]	@ (80173c8 <tcp_receive+0xd00>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d11d      	bne.n	8017306 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80172ca:	4b3e      	ldr	r3, [pc, #248]	@ (80173c4 <tcp_receive+0xcfc>)
 80172cc:	891a      	ldrh	r2, [r3, #8]
 80172ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172d0:	891b      	ldrh	r3, [r3, #8]
 80172d2:	429a      	cmp	r2, r3
 80172d4:	f240 814e 	bls.w	8017574 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80172d8:	483a      	ldr	r0, [pc, #232]	@ (80173c4 <tcp_receive+0xcfc>)
 80172da:	f7fd fad3 	bl	8014884 <tcp_seg_copy>
 80172de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	f000 8148 	beq.w	8017578 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80172e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d003      	beq.n	80172f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80172ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80172f0:	697a      	ldr	r2, [r7, #20]
 80172f2:	601a      	str	r2, [r3, #0]
 80172f4:	e002      	b.n	80172fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	697a      	ldr	r2, [r7, #20]
 80172fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80172fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80172fe:	6978      	ldr	r0, [r7, #20]
 8017300:	f7ff f8de 	bl	80164c0 <tcp_oos_insert_segment>
                }
                break;
 8017304:	e138      	b.n	8017578 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017308:	2b00      	cmp	r3, #0
 801730a:	d117      	bne.n	801733c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801730c:	4b2e      	ldr	r3, [pc, #184]	@ (80173c8 <tcp_receive+0xd00>)
 801730e:	681a      	ldr	r2, [r3, #0]
 8017310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017312:	68db      	ldr	r3, [r3, #12]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	1ad3      	subs	r3, r2, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	da57      	bge.n	80173cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801731c:	4829      	ldr	r0, [pc, #164]	@ (80173c4 <tcp_receive+0xcfc>)
 801731e:	f7fd fab1 	bl	8014884 <tcp_seg_copy>
 8017322:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017324:	69bb      	ldr	r3, [r7, #24]
 8017326:	2b00      	cmp	r3, #0
 8017328:	f000 8128 	beq.w	801757c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	69ba      	ldr	r2, [r7, #24]
 8017330:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017332:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017334:	69b8      	ldr	r0, [r7, #24]
 8017336:	f7ff f8c3 	bl	80164c0 <tcp_oos_insert_segment>
                  }
                  break;
 801733a:	e11f      	b.n	801757c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801733c:	4b22      	ldr	r3, [pc, #136]	@ (80173c8 <tcp_receive+0xd00>)
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	685b      	ldr	r3, [r3, #4]
 8017346:	1ad3      	subs	r3, r2, r3
 8017348:	3b01      	subs	r3, #1
 801734a:	2b00      	cmp	r3, #0
 801734c:	db3e      	blt.n	80173cc <tcp_receive+0xd04>
 801734e:	4b1e      	ldr	r3, [pc, #120]	@ (80173c8 <tcp_receive+0xd00>)
 8017350:	681a      	ldr	r2, [r3, #0]
 8017352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	3301      	adds	r3, #1
 801735c:	2b00      	cmp	r3, #0
 801735e:	dc35      	bgt.n	80173cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017360:	4818      	ldr	r0, [pc, #96]	@ (80173c4 <tcp_receive+0xcfc>)
 8017362:	f7fd fa8f 	bl	8014884 <tcp_seg_copy>
 8017366:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017368:	69fb      	ldr	r3, [r7, #28]
 801736a:	2b00      	cmp	r3, #0
 801736c:	f000 8108 	beq.w	8017580 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017372:	68db      	ldr	r3, [r3, #12]
 8017374:	685b      	ldr	r3, [r3, #4]
 8017376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017378:	8912      	ldrh	r2, [r2, #8]
 801737a:	441a      	add	r2, r3
 801737c:	4b12      	ldr	r3, [pc, #72]	@ (80173c8 <tcp_receive+0xd00>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	1ad3      	subs	r3, r2, r3
 8017382:	2b00      	cmp	r3, #0
 8017384:	dd12      	ble.n	80173ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017386:	4b10      	ldr	r3, [pc, #64]	@ (80173c8 <tcp_receive+0xd00>)
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	b29a      	uxth	r2, r3
 801738c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	685b      	ldr	r3, [r3, #4]
 8017392:	b29b      	uxth	r3, r3
 8017394:	1ad3      	subs	r3, r2, r3
 8017396:	b29a      	uxth	r2, r3
 8017398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801739a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801739e:	685a      	ldr	r2, [r3, #4]
 80173a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173a2:	891b      	ldrh	r3, [r3, #8]
 80173a4:	4619      	mov	r1, r3
 80173a6:	4610      	mov	r0, r2
 80173a8:	f7fb fc08 	bl	8012bbc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80173ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173ae:	69fa      	ldr	r2, [r7, #28]
 80173b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80173b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80173b4:	69f8      	ldr	r0, [r7, #28]
 80173b6:	f7ff f883 	bl	80164c0 <tcp_oos_insert_segment>
                  }
                  break;
 80173ba:	e0e1      	b.n	8017580 <tcp_receive+0xeb8>
 80173bc:	2000f2b8 	.word	0x2000f2b8
 80173c0:	2000f2b5 	.word	0x2000f2b5
 80173c4:	2000f288 	.word	0x2000f288
 80173c8:	2000f2a8 	.word	0x2000f2a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80173cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80173d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	f040 80c5 	bne.w	8017564 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80173da:	4b7f      	ldr	r3, [pc, #508]	@ (80175d8 <tcp_receive+0xf10>)
 80173dc:	681a      	ldr	r2, [r3, #0]
 80173de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173e0:	68db      	ldr	r3, [r3, #12]
 80173e2:	685b      	ldr	r3, [r3, #4]
 80173e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f340 80bc 	ble.w	8017564 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80173ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173ee:	68db      	ldr	r3, [r3, #12]
 80173f0:	899b      	ldrh	r3, [r3, #12]
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	4618      	mov	r0, r3
 80173f6:	f7fa f93f 	bl	8011678 <lwip_htons>
 80173fa:	4603      	mov	r3, r0
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	2b00      	cmp	r3, #0
 8017404:	f040 80be 	bne.w	8017584 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017408:	4874      	ldr	r0, [pc, #464]	@ (80175dc <tcp_receive+0xf14>)
 801740a:	f7fd fa3b 	bl	8014884 <tcp_seg_copy>
 801740e:	4602      	mov	r2, r0
 8017410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017412:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	f000 80b5 	beq.w	8017588 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017420:	68db      	ldr	r3, [r3, #12]
 8017422:	685b      	ldr	r3, [r3, #4]
 8017424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017426:	8912      	ldrh	r2, [r2, #8]
 8017428:	441a      	add	r2, r3
 801742a:	4b6b      	ldr	r3, [pc, #428]	@ (80175d8 <tcp_receive+0xf10>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	2b00      	cmp	r3, #0
 8017432:	dd12      	ble.n	801745a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017434:	4b68      	ldr	r3, [pc, #416]	@ (80175d8 <tcp_receive+0xf10>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	b29a      	uxth	r2, r3
 801743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801743c:	68db      	ldr	r3, [r3, #12]
 801743e:	685b      	ldr	r3, [r3, #4]
 8017440:	b29b      	uxth	r3, r3
 8017442:	1ad3      	subs	r3, r2, r3
 8017444:	b29a      	uxth	r2, r3
 8017446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017448:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801744a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801744c:	685a      	ldr	r2, [r3, #4]
 801744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017450:	891b      	ldrh	r3, [r3, #8]
 8017452:	4619      	mov	r1, r3
 8017454:	4610      	mov	r0, r2
 8017456:	f7fb fbb1 	bl	8012bbc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801745a:	4b61      	ldr	r3, [pc, #388]	@ (80175e0 <tcp_receive+0xf18>)
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	461a      	mov	r2, r3
 8017460:	4b5d      	ldr	r3, [pc, #372]	@ (80175d8 <tcp_receive+0xf10>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	441a      	add	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801746a:	6879      	ldr	r1, [r7, #4]
 801746c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801746e:	440b      	add	r3, r1
 8017470:	1ad3      	subs	r3, r2, r3
 8017472:	2b00      	cmp	r3, #0
 8017474:	f340 8088 	ble.w	8017588 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	68db      	ldr	r3, [r3, #12]
 801747e:	899b      	ldrh	r3, [r3, #12]
 8017480:	b29b      	uxth	r3, r3
 8017482:	4618      	mov	r0, r3
 8017484:	f7fa f8f8 	bl	8011678 <lwip_htons>
 8017488:	4603      	mov	r3, r0
 801748a:	b2db      	uxtb	r3, r3
 801748c:	f003 0301 	and.w	r3, r3, #1
 8017490:	2b00      	cmp	r3, #0
 8017492:	d021      	beq.n	80174d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	899b      	ldrh	r3, [r3, #12]
 801749c:	b29b      	uxth	r3, r3
 801749e:	b21b      	sxth	r3, r3
 80174a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80174a4:	b21c      	sxth	r4, r3
 80174a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	899b      	ldrh	r3, [r3, #12]
 80174ae:	b29b      	uxth	r3, r3
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7fa f8e1 	bl	8011678 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80174be:	b29b      	uxth	r3, r3
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7fa f8d9 	bl	8011678 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	b21b      	sxth	r3, r3
 80174ca:	4323      	orrs	r3, r4
 80174cc:	b21a      	sxth	r2, r3
 80174ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	68db      	ldr	r3, [r3, #12]
 80174d4:	b292      	uxth	r2, r2
 80174d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174dc:	b29a      	uxth	r2, r3
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80174e2:	4413      	add	r3, r2
 80174e4:	b299      	uxth	r1, r3
 80174e6:	4b3c      	ldr	r3, [pc, #240]	@ (80175d8 <tcp_receive+0xf10>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	b29a      	uxth	r2, r3
 80174ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	1a8a      	subs	r2, r1, r2
 80174f2:	b292      	uxth	r2, r2
 80174f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80174f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	685a      	ldr	r2, [r3, #4]
 80174fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	891b      	ldrh	r3, [r3, #8]
 8017502:	4619      	mov	r1, r3
 8017504:	4610      	mov	r0, r2
 8017506:	f7fb fb59 	bl	8012bbc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801750a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	891c      	ldrh	r4, [r3, #8]
 8017510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	68db      	ldr	r3, [r3, #12]
 8017516:	899b      	ldrh	r3, [r3, #12]
 8017518:	b29b      	uxth	r3, r3
 801751a:	4618      	mov	r0, r3
 801751c:	f7fa f8ac 	bl	8011678 <lwip_htons>
 8017520:	4603      	mov	r3, r0
 8017522:	b2db      	uxtb	r3, r3
 8017524:	f003 0303 	and.w	r3, r3, #3
 8017528:	2b00      	cmp	r3, #0
 801752a:	d001      	beq.n	8017530 <tcp_receive+0xe68>
 801752c:	2301      	movs	r3, #1
 801752e:	e000      	b.n	8017532 <tcp_receive+0xe6a>
 8017530:	2300      	movs	r3, #0
 8017532:	4423      	add	r3, r4
 8017534:	b29a      	uxth	r2, r3
 8017536:	4b2a      	ldr	r3, [pc, #168]	@ (80175e0 <tcp_receive+0xf18>)
 8017538:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801753a:	4b29      	ldr	r3, [pc, #164]	@ (80175e0 <tcp_receive+0xf18>)
 801753c:	881b      	ldrh	r3, [r3, #0]
 801753e:	461a      	mov	r2, r3
 8017540:	4b25      	ldr	r3, [pc, #148]	@ (80175d8 <tcp_receive+0xf10>)
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	441a      	add	r2, r3
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801754a:	6879      	ldr	r1, [r7, #4]
 801754c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801754e:	440b      	add	r3, r1
 8017550:	429a      	cmp	r2, r3
 8017552:	d019      	beq.n	8017588 <tcp_receive+0xec0>
 8017554:	4b23      	ldr	r3, [pc, #140]	@ (80175e4 <tcp_receive+0xf1c>)
 8017556:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801755a:	4923      	ldr	r1, [pc, #140]	@ (80175e8 <tcp_receive+0xf20>)
 801755c:	4823      	ldr	r0, [pc, #140]	@ (80175ec <tcp_receive+0xf24>)
 801755e:	f005 fc1b 	bl	801cd98 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017562:	e011      	b.n	8017588 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	63bb      	str	r3, [r7, #56]	@ 0x38
 801756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801756c:	2b00      	cmp	r3, #0
 801756e:	f47f aea5 	bne.w	80172bc <tcp_receive+0xbf4>
 8017572:	e00a      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017574:	bf00      	nop
 8017576:	e008      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017578:	bf00      	nop
 801757a:	e006      	b.n	801758a <tcp_receive+0xec2>
                  break;
 801757c:	bf00      	nop
 801757e:	e004      	b.n	801758a <tcp_receive+0xec2>
                  break;
 8017580:	bf00      	nop
 8017582:	e002      	b.n	801758a <tcp_receive+0xec2>
                  break;
 8017584:	bf00      	nop
 8017586:	e000      	b.n	801758a <tcp_receive+0xec2>
                break;
 8017588:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f001 fe88 	bl	80192a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017590:	e003      	b.n	801759a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f001 fe84 	bl	80192a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017598:	e01a      	b.n	80175d0 <tcp_receive+0xf08>
 801759a:	e019      	b.n	80175d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801759c:	4b0e      	ldr	r3, [pc, #56]	@ (80175d8 <tcp_receive+0xf10>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175a4:	1ad3      	subs	r3, r2, r3
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	db0a      	blt.n	80175c0 <tcp_receive+0xef8>
 80175aa:	4b0b      	ldr	r3, [pc, #44]	@ (80175d8 <tcp_receive+0xf10>)
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175b2:	6879      	ldr	r1, [r7, #4]
 80175b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80175b6:	440b      	add	r3, r1
 80175b8:	1ad3      	subs	r3, r2, r3
 80175ba:	3301      	adds	r3, #1
 80175bc:	2b00      	cmp	r3, #0
 80175be:	dd07      	ble.n	80175d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	8b5b      	ldrh	r3, [r3, #26]
 80175c4:	f043 0302 	orr.w	r3, r3, #2
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80175ce:	e7ff      	b.n	80175d0 <tcp_receive+0xf08>
 80175d0:	bf00      	nop
 80175d2:	3750      	adds	r7, #80	@ 0x50
 80175d4:	46bd      	mov	sp, r7
 80175d6:	bdb0      	pop	{r4, r5, r7, pc}
 80175d8:	2000f2a8 	.word	0x2000f2a8
 80175dc:	2000f288 	.word	0x2000f288
 80175e0:	2000f2b2 	.word	0x2000f2b2
 80175e4:	080201d4 	.word	0x080201d4
 80175e8:	0802057c 	.word	0x0802057c
 80175ec:	08020220 	.word	0x08020220

080175f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80175f6:	4b15      	ldr	r3, [pc, #84]	@ (801764c <tcp_get_next_optbyte+0x5c>)
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	1c5a      	adds	r2, r3, #1
 80175fc:	b291      	uxth	r1, r2
 80175fe:	4a13      	ldr	r2, [pc, #76]	@ (801764c <tcp_get_next_optbyte+0x5c>)
 8017600:	8011      	strh	r1, [r2, #0]
 8017602:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017604:	4b12      	ldr	r3, [pc, #72]	@ (8017650 <tcp_get_next_optbyte+0x60>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d004      	beq.n	8017616 <tcp_get_next_optbyte+0x26>
 801760c:	4b11      	ldr	r3, [pc, #68]	@ (8017654 <tcp_get_next_optbyte+0x64>)
 801760e:	881b      	ldrh	r3, [r3, #0]
 8017610:	88fa      	ldrh	r2, [r7, #6]
 8017612:	429a      	cmp	r2, r3
 8017614:	d208      	bcs.n	8017628 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017616:	4b10      	ldr	r3, [pc, #64]	@ (8017658 <tcp_get_next_optbyte+0x68>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	3314      	adds	r3, #20
 801761c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801761e:	88fb      	ldrh	r3, [r7, #6]
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	4413      	add	r3, r2
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	e00b      	b.n	8017640 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017628:	88fb      	ldrh	r3, [r7, #6]
 801762a:	b2da      	uxtb	r2, r3
 801762c:	4b09      	ldr	r3, [pc, #36]	@ (8017654 <tcp_get_next_optbyte+0x64>)
 801762e:	881b      	ldrh	r3, [r3, #0]
 8017630:	b2db      	uxtb	r3, r3
 8017632:	1ad3      	subs	r3, r2, r3
 8017634:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017636:	4b06      	ldr	r3, [pc, #24]	@ (8017650 <tcp_get_next_optbyte+0x60>)
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	797b      	ldrb	r3, [r7, #5]
 801763c:	4413      	add	r3, r2
 801763e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017640:	4618      	mov	r0, r3
 8017642:	370c      	adds	r7, #12
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr
 801764c:	2000f2a4 	.word	0x2000f2a4
 8017650:	2000f2a0 	.word	0x2000f2a0
 8017654:	2000f29e 	.word	0x2000f29e
 8017658:	2000f298 	.word	0x2000f298

0801765c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d106      	bne.n	8017678 <tcp_parseopt+0x1c>
 801766a:	4b32      	ldr	r3, [pc, #200]	@ (8017734 <tcp_parseopt+0xd8>)
 801766c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017670:	4931      	ldr	r1, [pc, #196]	@ (8017738 <tcp_parseopt+0xdc>)
 8017672:	4832      	ldr	r0, [pc, #200]	@ (801773c <tcp_parseopt+0xe0>)
 8017674:	f005 fb90 	bl	801cd98 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017678:	4b31      	ldr	r3, [pc, #196]	@ (8017740 <tcp_parseopt+0xe4>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d056      	beq.n	801772e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017680:	4b30      	ldr	r3, [pc, #192]	@ (8017744 <tcp_parseopt+0xe8>)
 8017682:	2200      	movs	r2, #0
 8017684:	801a      	strh	r2, [r3, #0]
 8017686:	e046      	b.n	8017716 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8017688:	f7ff ffb2 	bl	80175f0 <tcp_get_next_optbyte>
 801768c:	4603      	mov	r3, r0
 801768e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017690:	7bfb      	ldrb	r3, [r7, #15]
 8017692:	2b02      	cmp	r3, #2
 8017694:	d006      	beq.n	80176a4 <tcp_parseopt+0x48>
 8017696:	2b02      	cmp	r3, #2
 8017698:	dc2a      	bgt.n	80176f0 <tcp_parseopt+0x94>
 801769a:	2b00      	cmp	r3, #0
 801769c:	d042      	beq.n	8017724 <tcp_parseopt+0xc8>
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d038      	beq.n	8017714 <tcp_parseopt+0xb8>
 80176a2:	e025      	b.n	80176f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80176a4:	f7ff ffa4 	bl	80175f0 <tcp_get_next_optbyte>
 80176a8:	4603      	mov	r3, r0
 80176aa:	2b04      	cmp	r3, #4
 80176ac:	d13c      	bne.n	8017728 <tcp_parseopt+0xcc>
 80176ae:	4b25      	ldr	r3, [pc, #148]	@ (8017744 <tcp_parseopt+0xe8>)
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	3301      	adds	r3, #1
 80176b4:	4a22      	ldr	r2, [pc, #136]	@ (8017740 <tcp_parseopt+0xe4>)
 80176b6:	8812      	ldrh	r2, [r2, #0]
 80176b8:	4293      	cmp	r3, r2
 80176ba:	da35      	bge.n	8017728 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80176bc:	f7ff ff98 	bl	80175f0 <tcp_get_next_optbyte>
 80176c0:	4603      	mov	r3, r0
 80176c2:	021b      	lsls	r3, r3, #8
 80176c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80176c6:	f7ff ff93 	bl	80175f0 <tcp_get_next_optbyte>
 80176ca:	4603      	mov	r3, r0
 80176cc:	461a      	mov	r2, r3
 80176ce:	89bb      	ldrh	r3, [r7, #12]
 80176d0:	4313      	orrs	r3, r2
 80176d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80176d4:	89bb      	ldrh	r3, [r7, #12]
 80176d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80176da:	d804      	bhi.n	80176e6 <tcp_parseopt+0x8a>
 80176dc:	89bb      	ldrh	r3, [r7, #12]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d001      	beq.n	80176e6 <tcp_parseopt+0x8a>
 80176e2:	89ba      	ldrh	r2, [r7, #12]
 80176e4:	e001      	b.n	80176ea <tcp_parseopt+0x8e>
 80176e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80176ee:	e012      	b.n	8017716 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80176f0:	f7ff ff7e 	bl	80175f0 <tcp_get_next_optbyte>
 80176f4:	4603      	mov	r3, r0
 80176f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80176f8:	7afb      	ldrb	r3, [r7, #11]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d916      	bls.n	801772c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80176fe:	7afb      	ldrb	r3, [r7, #11]
 8017700:	b29a      	uxth	r2, r3
 8017702:	4b10      	ldr	r3, [pc, #64]	@ (8017744 <tcp_parseopt+0xe8>)
 8017704:	881b      	ldrh	r3, [r3, #0]
 8017706:	4413      	add	r3, r2
 8017708:	b29b      	uxth	r3, r3
 801770a:	3b02      	subs	r3, #2
 801770c:	b29a      	uxth	r2, r3
 801770e:	4b0d      	ldr	r3, [pc, #52]	@ (8017744 <tcp_parseopt+0xe8>)
 8017710:	801a      	strh	r2, [r3, #0]
 8017712:	e000      	b.n	8017716 <tcp_parseopt+0xba>
          break;
 8017714:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017716:	4b0b      	ldr	r3, [pc, #44]	@ (8017744 <tcp_parseopt+0xe8>)
 8017718:	881a      	ldrh	r2, [r3, #0]
 801771a:	4b09      	ldr	r3, [pc, #36]	@ (8017740 <tcp_parseopt+0xe4>)
 801771c:	881b      	ldrh	r3, [r3, #0]
 801771e:	429a      	cmp	r2, r3
 8017720:	d3b2      	bcc.n	8017688 <tcp_parseopt+0x2c>
 8017722:	e004      	b.n	801772e <tcp_parseopt+0xd2>
          return;
 8017724:	bf00      	nop
 8017726:	e002      	b.n	801772e <tcp_parseopt+0xd2>
            return;
 8017728:	bf00      	nop
 801772a:	e000      	b.n	801772e <tcp_parseopt+0xd2>
            return;
 801772c:	bf00      	nop
      }
    }
  }
}
 801772e:	3710      	adds	r7, #16
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	080201d4 	.word	0x080201d4
 8017738:	08020638 	.word	0x08020638
 801773c:	08020220 	.word	0x08020220
 8017740:	2000f29c 	.word	0x2000f29c
 8017744:	2000f2a4 	.word	0x2000f2a4

08017748 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017748:	b480      	push	{r7}
 801774a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801774c:	4b05      	ldr	r3, [pc, #20]	@ (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f043 0310 	orr.w	r3, r3, #16
 8017754:	b2da      	uxtb	r2, r3
 8017756:	4b03      	ldr	r3, [pc, #12]	@ (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 8017758:	701a      	strb	r2, [r3, #0]
}
 801775a:	bf00      	nop
 801775c:	46bd      	mov	sp, r7
 801775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017762:	4770      	bx	lr
 8017764:	2000f2b5 	.word	0x2000f2b5

08017768 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	60f8      	str	r0, [r7, #12]
 8017770:	60b9      	str	r1, [r7, #8]
 8017772:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00a      	beq.n	8017790 <tcp_route+0x28>
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7a1b      	ldrb	r3, [r3, #8]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d006      	beq.n	8017790 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7a1b      	ldrb	r3, [r3, #8]
 8017786:	4618      	mov	r0, r3
 8017788:	f7fb f810 	bl	80127ac <netif_get_by_index>
 801778c:	4603      	mov	r3, r0
 801778e:	e003      	b.n	8017798 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f003 fe33 	bl	801b3fc <ip4_route>
 8017796:	4603      	mov	r3, r0
  }
}
 8017798:	4618      	mov	r0, r3
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}

080177a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b087      	sub	sp, #28
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	603b      	str	r3, [r7, #0]
 80177ac:	4613      	mov	r3, r2
 80177ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d105      	bne.n	80177c2 <tcp_create_segment+0x22>
 80177b6:	4b43      	ldr	r3, [pc, #268]	@ (80178c4 <tcp_create_segment+0x124>)
 80177b8:	22a3      	movs	r2, #163	@ 0xa3
 80177ba:	4943      	ldr	r1, [pc, #268]	@ (80178c8 <tcp_create_segment+0x128>)
 80177bc:	4843      	ldr	r0, [pc, #268]	@ (80178cc <tcp_create_segment+0x12c>)
 80177be:	f005 faeb 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d105      	bne.n	80177d4 <tcp_create_segment+0x34>
 80177c8:	4b3e      	ldr	r3, [pc, #248]	@ (80178c4 <tcp_create_segment+0x124>)
 80177ca:	22a4      	movs	r2, #164	@ 0xa4
 80177cc:	4940      	ldr	r1, [pc, #256]	@ (80178d0 <tcp_create_segment+0x130>)
 80177ce:	483f      	ldr	r0, [pc, #252]	@ (80178cc <tcp_create_segment+0x12c>)
 80177d0:	f005 fae2 	bl	801cd98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80177d8:	009b      	lsls	r3, r3, #2
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	f003 0304 	and.w	r3, r3, #4
 80177e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80177e2:	2003      	movs	r0, #3
 80177e4:	f7fa fc56 	bl	8012094 <memp_malloc>
 80177e8:	6138      	str	r0, [r7, #16]
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d104      	bne.n	80177fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80177f0:	68b8      	ldr	r0, [r7, #8]
 80177f2:	f7fb fb69 	bl	8012ec8 <pbuf_free>
    return NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	e060      	b.n	80178bc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017800:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	2200      	movs	r2, #0
 8017806:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	68ba      	ldr	r2, [r7, #8]
 801780c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	891a      	ldrh	r2, [r3, #8]
 8017812:	7dfb      	ldrb	r3, [r7, #23]
 8017814:	b29b      	uxth	r3, r3
 8017816:	429a      	cmp	r2, r3
 8017818:	d205      	bcs.n	8017826 <tcp_create_segment+0x86>
 801781a:	4b2a      	ldr	r3, [pc, #168]	@ (80178c4 <tcp_create_segment+0x124>)
 801781c:	22b0      	movs	r2, #176	@ 0xb0
 801781e:	492d      	ldr	r1, [pc, #180]	@ (80178d4 <tcp_create_segment+0x134>)
 8017820:	482a      	ldr	r0, [pc, #168]	@ (80178cc <tcp_create_segment+0x12c>)
 8017822:	f005 fab9 	bl	801cd98 <iprintf>
  seg->len = p->tot_len - optlen;
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	891a      	ldrh	r2, [r3, #8]
 801782a:	7dfb      	ldrb	r3, [r7, #23]
 801782c:	b29b      	uxth	r3, r3
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	b29a      	uxth	r2, r3
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017836:	2114      	movs	r1, #20
 8017838:	68b8      	ldr	r0, [r7, #8]
 801783a:	f7fb faaf 	bl	8012d9c <pbuf_add_header>
 801783e:	4603      	mov	r3, r0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d004      	beq.n	801784e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017844:	6938      	ldr	r0, [r7, #16]
 8017846:	f7fc ffe6 	bl	8014816 <tcp_seg_free>
    return NULL;
 801784a:	2300      	movs	r3, #0
 801784c:	e036      	b.n	80178bc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	685a      	ldr	r2, [r3, #4]
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	8ada      	ldrh	r2, [r3, #22]
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	68dc      	ldr	r4, [r3, #12]
 8017860:	4610      	mov	r0, r2
 8017862:	f7f9 ff09 	bl	8011678 <lwip_htons>
 8017866:	4603      	mov	r3, r0
 8017868:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	8b1a      	ldrh	r2, [r3, #24]
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	68dc      	ldr	r4, [r3, #12]
 8017872:	4610      	mov	r0, r2
 8017874:	f7f9 ff00 	bl	8011678 <lwip_htons>
 8017878:	4603      	mov	r3, r0
 801787a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	68dc      	ldr	r4, [r3, #12]
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	f7f9 ff0e 	bl	80116a2 <lwip_htonl>
 8017886:	4603      	mov	r3, r0
 8017888:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801788a:	7dfb      	ldrb	r3, [r7, #23]
 801788c:	089b      	lsrs	r3, r3, #2
 801788e:	b2db      	uxtb	r3, r3
 8017890:	3305      	adds	r3, #5
 8017892:	b29b      	uxth	r3, r3
 8017894:	031b      	lsls	r3, r3, #12
 8017896:	b29a      	uxth	r2, r3
 8017898:	79fb      	ldrb	r3, [r7, #7]
 801789a:	b29b      	uxth	r3, r3
 801789c:	4313      	orrs	r3, r2
 801789e:	b29a      	uxth	r2, r3
 80178a0:	693b      	ldr	r3, [r7, #16]
 80178a2:	68dc      	ldr	r4, [r3, #12]
 80178a4:	4610      	mov	r0, r2
 80178a6:	f7f9 fee7 	bl	8011678 <lwip_htons>
 80178aa:	4603      	mov	r3, r0
 80178ac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80178ae:	693b      	ldr	r3, [r7, #16]
 80178b0:	68db      	ldr	r3, [r3, #12]
 80178b2:	2200      	movs	r2, #0
 80178b4:	749a      	strb	r2, [r3, #18]
 80178b6:	2200      	movs	r2, #0
 80178b8:	74da      	strb	r2, [r3, #19]
  return seg;
 80178ba:	693b      	ldr	r3, [r7, #16]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	371c      	adds	r7, #28
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd90      	pop	{r4, r7, pc}
 80178c4:	08020654 	.word	0x08020654
 80178c8:	08020688 	.word	0x08020688
 80178cc:	080206a8 	.word	0x080206a8
 80178d0:	080206d0 	.word	0x080206d0
 80178d4:	080206f4 	.word	0x080206f4

080178d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b086      	sub	sp, #24
 80178dc:	af00      	add	r7, sp, #0
 80178de:	607b      	str	r3, [r7, #4]
 80178e0:	4603      	mov	r3, r0
 80178e2:	73fb      	strb	r3, [r7, #15]
 80178e4:	460b      	mov	r3, r1
 80178e6:	81bb      	strh	r3, [r7, #12]
 80178e8:	4613      	mov	r3, r2
 80178ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80178ec:	89bb      	ldrh	r3, [r7, #12]
 80178ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d105      	bne.n	8017902 <tcp_pbuf_prealloc+0x2a>
 80178f6:	4b30      	ldr	r3, [pc, #192]	@ (80179b8 <tcp_pbuf_prealloc+0xe0>)
 80178f8:	22e8      	movs	r2, #232	@ 0xe8
 80178fa:	4930      	ldr	r1, [pc, #192]	@ (80179bc <tcp_pbuf_prealloc+0xe4>)
 80178fc:	4830      	ldr	r0, [pc, #192]	@ (80179c0 <tcp_pbuf_prealloc+0xe8>)
 80178fe:	f005 fa4b 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017902:	6a3b      	ldr	r3, [r7, #32]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d105      	bne.n	8017914 <tcp_pbuf_prealloc+0x3c>
 8017908:	4b2b      	ldr	r3, [pc, #172]	@ (80179b8 <tcp_pbuf_prealloc+0xe0>)
 801790a:	22e9      	movs	r2, #233	@ 0xe9
 801790c:	492d      	ldr	r1, [pc, #180]	@ (80179c4 <tcp_pbuf_prealloc+0xec>)
 801790e:	482c      	ldr	r0, [pc, #176]	@ (80179c0 <tcp_pbuf_prealloc+0xe8>)
 8017910:	f005 fa42 	bl	801cd98 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017914:	89ba      	ldrh	r2, [r7, #12]
 8017916:	897b      	ldrh	r3, [r7, #10]
 8017918:	429a      	cmp	r2, r3
 801791a:	d221      	bcs.n	8017960 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801791c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017920:	f003 0302 	and.w	r3, r3, #2
 8017924:	2b00      	cmp	r3, #0
 8017926:	d111      	bne.n	801794c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017928:	6a3b      	ldr	r3, [r7, #32]
 801792a:	8b5b      	ldrh	r3, [r3, #26]
 801792c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017930:	2b00      	cmp	r3, #0
 8017932:	d115      	bne.n	8017960 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017934:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017938:	2b00      	cmp	r3, #0
 801793a:	d007      	beq.n	801794c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801793c:	6a3b      	ldr	r3, [r7, #32]
 801793e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8017940:	2b00      	cmp	r3, #0
 8017942:	d103      	bne.n	801794c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017944:	6a3b      	ldr	r3, [r7, #32]
 8017946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8017948:	2b00      	cmp	r3, #0
 801794a:	d009      	beq.n	8017960 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801794c:	89bb      	ldrh	r3, [r7, #12]
 801794e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017952:	f023 0203 	bic.w	r2, r3, #3
 8017956:	897b      	ldrh	r3, [r7, #10]
 8017958:	4293      	cmp	r3, r2
 801795a:	bf28      	it	cs
 801795c:	4613      	movcs	r3, r2
 801795e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017960:	8af9      	ldrh	r1, [r7, #22]
 8017962:	7bfb      	ldrb	r3, [r7, #15]
 8017964:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017968:	4618      	mov	r0, r3
 801796a:	f7fa ffc9 	bl	8012900 <pbuf_alloc>
 801796e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017970:	693b      	ldr	r3, [r7, #16]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d101      	bne.n	801797a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017976:	2300      	movs	r3, #0
 8017978:	e019      	b.n	80179ae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d006      	beq.n	8017990 <tcp_pbuf_prealloc+0xb8>
 8017982:	4b0d      	ldr	r3, [pc, #52]	@ (80179b8 <tcp_pbuf_prealloc+0xe0>)
 8017984:	f240 120b 	movw	r2, #267	@ 0x10b
 8017988:	490f      	ldr	r1, [pc, #60]	@ (80179c8 <tcp_pbuf_prealloc+0xf0>)
 801798a:	480d      	ldr	r0, [pc, #52]	@ (80179c0 <tcp_pbuf_prealloc+0xe8>)
 801798c:	f005 fa04 	bl	801cd98 <iprintf>
  *oversize = p->len - length;
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	895a      	ldrh	r2, [r3, #10]
 8017994:	89bb      	ldrh	r3, [r7, #12]
 8017996:	1ad3      	subs	r3, r2, r3
 8017998:	b29a      	uxth	r2, r3
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	89ba      	ldrh	r2, [r7, #12]
 80179a2:	811a      	strh	r2, [r3, #8]
 80179a4:	693b      	ldr	r3, [r7, #16]
 80179a6:	891a      	ldrh	r2, [r3, #8]
 80179a8:	693b      	ldr	r3, [r7, #16]
 80179aa:	815a      	strh	r2, [r3, #10]
  return p;
 80179ac:	693b      	ldr	r3, [r7, #16]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3718      	adds	r7, #24
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	08020654 	.word	0x08020654
 80179bc:	0802070c 	.word	0x0802070c
 80179c0:	080206a8 	.word	0x080206a8
 80179c4:	08020730 	.word	0x08020730
 80179c8:	08020750 	.word	0x08020750

080179cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	460b      	mov	r3, r1
 80179d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d106      	bne.n	80179ec <tcp_write_checks+0x20>
 80179de:	4b33      	ldr	r3, [pc, #204]	@ (8017aac <tcp_write_checks+0xe0>)
 80179e0:	f240 1233 	movw	r2, #307	@ 0x133
 80179e4:	4932      	ldr	r1, [pc, #200]	@ (8017ab0 <tcp_write_checks+0xe4>)
 80179e6:	4833      	ldr	r0, [pc, #204]	@ (8017ab4 <tcp_write_checks+0xe8>)
 80179e8:	f005 f9d6 	bl	801cd98 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	7d1b      	ldrb	r3, [r3, #20]
 80179f0:	2b04      	cmp	r3, #4
 80179f2:	d00e      	beq.n	8017a12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80179f8:	2b07      	cmp	r3, #7
 80179fa:	d00a      	beq.n	8017a12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017a00:	2b02      	cmp	r3, #2
 8017a02:	d006      	beq.n	8017a12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017a08:	2b03      	cmp	r3, #3
 8017a0a:	d002      	beq.n	8017a12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017a0c:	f06f 030a 	mvn.w	r3, #10
 8017a10:	e048      	b.n	8017aa4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017a12:	887b      	ldrh	r3, [r7, #2]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d101      	bne.n	8017a1c <tcp_write_checks+0x50>
    return ERR_OK;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	e043      	b.n	8017aa4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017a22:	887a      	ldrh	r2, [r7, #2]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d909      	bls.n	8017a3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	8b5b      	ldrh	r3, [r3, #26]
 8017a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017a36:	f04f 33ff 	mov.w	r3, #4294967295
 8017a3a:	e033      	b.n	8017aa4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a42:	2b08      	cmp	r3, #8
 8017a44:	d909      	bls.n	8017a5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	8b5b      	ldrh	r3, [r3, #26]
 8017a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a4e:	b29a      	uxth	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017a54:	f04f 33ff 	mov.w	r3, #4294967295
 8017a58:	e024      	b.n	8017aa4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d00f      	beq.n	8017a84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d11a      	bne.n	8017aa2 <tcp_write_checks+0xd6>
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d116      	bne.n	8017aa2 <tcp_write_checks+0xd6>
 8017a74:	4b0d      	ldr	r3, [pc, #52]	@ (8017aac <tcp_write_checks+0xe0>)
 8017a76:	f240 1255 	movw	r2, #341	@ 0x155
 8017a7a:	490f      	ldr	r1, [pc, #60]	@ (8017ab8 <tcp_write_checks+0xec>)
 8017a7c:	480d      	ldr	r0, [pc, #52]	@ (8017ab4 <tcp_write_checks+0xe8>)
 8017a7e:	f005 f98b 	bl	801cd98 <iprintf>
 8017a82:	e00e      	b.n	8017aa2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d103      	bne.n	8017a94 <tcp_write_checks+0xc8>
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d006      	beq.n	8017aa2 <tcp_write_checks+0xd6>
 8017a94:	4b05      	ldr	r3, [pc, #20]	@ (8017aac <tcp_write_checks+0xe0>)
 8017a96:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8017a9a:	4908      	ldr	r1, [pc, #32]	@ (8017abc <tcp_write_checks+0xf0>)
 8017a9c:	4805      	ldr	r0, [pc, #20]	@ (8017ab4 <tcp_write_checks+0xe8>)
 8017a9e:	f005 f97b 	bl	801cd98 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017aa2:	2300      	movs	r3, #0
}
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}
 8017aac:	08020654 	.word	0x08020654
 8017ab0:	08020764 	.word	0x08020764
 8017ab4:	080206a8 	.word	0x080206a8
 8017ab8:	08020784 	.word	0x08020784
 8017abc:	080207c0 	.word	0x080207c0

08017ac0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017ac0:	b590      	push	{r4, r7, lr}
 8017ac2:	b09b      	sub	sp, #108	@ 0x6c
 8017ac4:	af04      	add	r7, sp, #16
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	4611      	mov	r1, r2
 8017acc:	461a      	mov	r2, r3
 8017ace:	460b      	mov	r3, r1
 8017ad0:	80fb      	strh	r3, [r7, #6]
 8017ad2:	4613      	mov	r3, r2
 8017ad4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017ada:	2300      	movs	r3, #0
 8017adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8017ade:	2300      	movs	r3, #0
 8017ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017aea:	2300      	movs	r3, #0
 8017aec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017af0:	2300      	movs	r3, #0
 8017af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017af6:	2300      	movs	r3, #0
 8017af8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017afa:	2300      	movs	r3, #0
 8017afc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017afe:	2300      	movs	r3, #0
 8017b00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d109      	bne.n	8017b1c <tcp_write+0x5c>
 8017b08:	4ba4      	ldr	r3, [pc, #656]	@ (8017d9c <tcp_write+0x2dc>)
 8017b0a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8017b0e:	49a4      	ldr	r1, [pc, #656]	@ (8017da0 <tcp_write+0x2e0>)
 8017b10:	48a4      	ldr	r0, [pc, #656]	@ (8017da4 <tcp_write+0x2e4>)
 8017b12:	f005 f941 	bl	801cd98 <iprintf>
 8017b16:	f06f 030f 	mvn.w	r3, #15
 8017b1a:	e32a      	b.n	8018172 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8017b22:	085b      	lsrs	r3, r3, #1
 8017b24:	b29a      	uxth	r2, r3
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	bf28      	it	cs
 8017b2e:	4613      	movcs	r3, r2
 8017b30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d102      	bne.n	8017b3e <tcp_write+0x7e>
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b3c:	e000      	b.n	8017b40 <tcp_write+0x80>
 8017b3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017b40:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d109      	bne.n	8017b5c <tcp_write+0x9c>
 8017b48:	4b94      	ldr	r3, [pc, #592]	@ (8017d9c <tcp_write+0x2dc>)
 8017b4a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8017b4e:	4996      	ldr	r1, [pc, #600]	@ (8017da8 <tcp_write+0x2e8>)
 8017b50:	4894      	ldr	r0, [pc, #592]	@ (8017da4 <tcp_write+0x2e4>)
 8017b52:	f005 f921 	bl	801cd98 <iprintf>
 8017b56:	f06f 030f 	mvn.w	r3, #15
 8017b5a:	e30a      	b.n	8018172 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017b5c:	88fb      	ldrh	r3, [r7, #6]
 8017b5e:	4619      	mov	r1, r3
 8017b60:	68f8      	ldr	r0, [r7, #12]
 8017b62:	f7ff ff33 	bl	80179cc <tcp_write_checks>
 8017b66:	4603      	mov	r3, r0
 8017b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8017b6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d002      	beq.n	8017b7a <tcp_write+0xba>
    return err;
 8017b74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8017b78:	e2fb      	b.n	8018172 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017b84:	2300      	movs	r3, #0
 8017b86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	f000 80f6 	beq.w	8017d80 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8017b9a:	e002      	b.n	8017ba2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d1f8      	bne.n	8017b9c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017bac:	7a9b      	ldrb	r3, [r3, #10]
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	f003 0304 	and.w	r3, r3, #4
 8017bb6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017bb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017bbc:	891b      	ldrh	r3, [r3, #8]
 8017bbe:	4619      	mov	r1, r3
 8017bc0:	8c3b      	ldrh	r3, [r7, #32]
 8017bc2:	440b      	add	r3, r1
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	da06      	bge.n	8017bd6 <tcp_write+0x116>
 8017bc8:	4b74      	ldr	r3, [pc, #464]	@ (8017d9c <tcp_write+0x2dc>)
 8017bca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017bce:	4977      	ldr	r1, [pc, #476]	@ (8017dac <tcp_write+0x2ec>)
 8017bd0:	4874      	ldr	r0, [pc, #464]	@ (8017da4 <tcp_write+0x2e4>)
 8017bd2:	f005 f8e1 	bl	801cd98 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017bd8:	891a      	ldrh	r2, [r3, #8]
 8017bda:	8c3b      	ldrh	r3, [r7, #32]
 8017bdc:	4413      	add	r3, r2
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017bec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017bee:	8a7b      	ldrh	r3, [r7, #18]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d026      	beq.n	8017c42 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017bf4:	8a7b      	ldrh	r3, [r7, #18]
 8017bf6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d206      	bcs.n	8017c0a <tcp_write+0x14a>
 8017bfc:	4b67      	ldr	r3, [pc, #412]	@ (8017d9c <tcp_write+0x2dc>)
 8017bfe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8017c02:	496b      	ldr	r1, [pc, #428]	@ (8017db0 <tcp_write+0x2f0>)
 8017c04:	4867      	ldr	r0, [pc, #412]	@ (8017da4 <tcp_write+0x2e4>)
 8017c06:	f005 f8c7 	bl	801cd98 <iprintf>
      seg = last_unsent;
 8017c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017c0e:	8a7b      	ldrh	r3, [r7, #18]
 8017c10:	88fa      	ldrh	r2, [r7, #6]
 8017c12:	4293      	cmp	r3, r2
 8017c14:	bf28      	it	cs
 8017c16:	4613      	movcs	r3, r2
 8017c18:	b29b      	uxth	r3, r3
 8017c1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	bf28      	it	cs
 8017c20:	4613      	movcs	r3, r2
 8017c22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8017c24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c2a:	4413      	add	r3, r2
 8017c2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8017c30:	8a7a      	ldrh	r2, [r7, #18]
 8017c32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c34:	1ad3      	subs	r3, r2, r3
 8017c36:	b29b      	uxth	r3, r3
 8017c38:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017c3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017c3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017c3e:	1ad3      	subs	r3, r2, r3
 8017c40:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017c42:	8a7b      	ldrh	r3, [r7, #18]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d00b      	beq.n	8017c60 <tcp_write+0x1a0>
 8017c48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c4c:	88fb      	ldrh	r3, [r7, #6]
 8017c4e:	429a      	cmp	r2, r3
 8017c50:	d006      	beq.n	8017c60 <tcp_write+0x1a0>
 8017c52:	4b52      	ldr	r3, [pc, #328]	@ (8017d9c <tcp_write+0x2dc>)
 8017c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017c58:	4956      	ldr	r1, [pc, #344]	@ (8017db4 <tcp_write+0x2f4>)
 8017c5a:	4852      	ldr	r0, [pc, #328]	@ (8017da4 <tcp_write+0x2e4>)
 8017c5c:	f005 f89c 	bl	801cd98 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017c60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c64:	88fb      	ldrh	r3, [r7, #6]
 8017c66:	429a      	cmp	r2, r3
 8017c68:	f080 8167 	bcs.w	8017f3a <tcp_write+0x47a>
 8017c6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	f000 8163 	beq.w	8017f3a <tcp_write+0x47a>
 8017c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c76:	891b      	ldrh	r3, [r3, #8]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	f000 815e 	beq.w	8017f3a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017c7e:	88fa      	ldrh	r2, [r7, #6]
 8017c80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c84:	1ad2      	subs	r2, r2, r3
 8017c86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	bfa8      	it	ge
 8017c8c:	4613      	movge	r3, r2
 8017c8e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017c92:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017c94:	797b      	ldrb	r3, [r7, #5]
 8017c96:	f003 0301 	and.w	r3, r3, #1
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d027      	beq.n	8017cee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017c9e:	f107 0012 	add.w	r0, r7, #18
 8017ca2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017ca4:	8bf9      	ldrh	r1, [r7, #30]
 8017ca6:	2301      	movs	r3, #1
 8017ca8:	9302      	str	r3, [sp, #8]
 8017caa:	797b      	ldrb	r3, [r7, #5]
 8017cac:	9301      	str	r3, [sp, #4]
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	9300      	str	r3, [sp, #0]
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2000      	movs	r0, #0
 8017cb6:	f7ff fe0f 	bl	80178d8 <tcp_pbuf_prealloc>
 8017cba:	6578      	str	r0, [r7, #84]	@ 0x54
 8017cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	f000 8225 	beq.w	801810e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017cc6:	6858      	ldr	r0, [r3, #4]
 8017cc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ccc:	68ba      	ldr	r2, [r7, #8]
 8017cce:	4413      	add	r3, r2
 8017cd0:	8bfa      	ldrh	r2, [r7, #30]
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	f005 f9e9 	bl	801d0aa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017cd8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017cda:	f7fb f983 	bl	8012fe4 <pbuf_clen>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	461a      	mov	r2, r3
 8017ce2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017ce6:	4413      	add	r3, r2
 8017ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8017cec:	e041      	b.n	8017d72 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017cee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017cf0:	685b      	ldr	r3, [r3, #4]
 8017cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8017cf4:	e002      	b.n	8017cfc <tcp_write+0x23c>
 8017cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8017cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1f8      	bne.n	8017cf6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d06:	7b1b      	ldrb	r3, [r3, #12]
 8017d08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d115      	bne.n	8017d3c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017d16:	8952      	ldrh	r2, [r2, #10]
 8017d18:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017d1a:	68ba      	ldr	r2, [r7, #8]
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	d10d      	bne.n	8017d3c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017d20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d006      	beq.n	8017d36 <tcp_write+0x276>
 8017d28:	4b1c      	ldr	r3, [pc, #112]	@ (8017d9c <tcp_write+0x2dc>)
 8017d2a:	f240 2231 	movw	r2, #561	@ 0x231
 8017d2e:	4922      	ldr	r1, [pc, #136]	@ (8017db8 <tcp_write+0x2f8>)
 8017d30:	481c      	ldr	r0, [pc, #112]	@ (8017da4 <tcp_write+0x2e4>)
 8017d32:	f005 f831 	bl	801cd98 <iprintf>
          extendlen = seglen;
 8017d36:	8bfb      	ldrh	r3, [r7, #30]
 8017d38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8017d3a:	e01a      	b.n	8017d72 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017d3c:	8bfb      	ldrh	r3, [r7, #30]
 8017d3e:	2201      	movs	r2, #1
 8017d40:	4619      	mov	r1, r3
 8017d42:	2000      	movs	r0, #0
 8017d44:	f7fa fddc 	bl	8012900 <pbuf_alloc>
 8017d48:	6578      	str	r0, [r7, #84]	@ 0x54
 8017d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	f000 81e0 	beq.w	8018112 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017d52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d56:	68ba      	ldr	r2, [r7, #8]
 8017d58:	441a      	add	r2, r3
 8017d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017d5c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017d5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017d60:	f7fb f940 	bl	8012fe4 <pbuf_clen>
 8017d64:	4603      	mov	r3, r0
 8017d66:	461a      	mov	r2, r3
 8017d68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017d6c:	4413      	add	r3, r2
 8017d6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017d72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d76:	8bfb      	ldrh	r3, [r7, #30]
 8017d78:	4413      	add	r3, r2
 8017d7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8017d7e:	e0dc      	b.n	8017f3a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	f000 80d7 	beq.w	8017f3a <tcp_write+0x47a>
 8017d8c:	4b03      	ldr	r3, [pc, #12]	@ (8017d9c <tcp_write+0x2dc>)
 8017d8e:	f240 224a 	movw	r2, #586	@ 0x24a
 8017d92:	490a      	ldr	r1, [pc, #40]	@ (8017dbc <tcp_write+0x2fc>)
 8017d94:	4803      	ldr	r0, [pc, #12]	@ (8017da4 <tcp_write+0x2e4>)
 8017d96:	f004 ffff 	bl	801cd98 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017d9a:	e0ce      	b.n	8017f3a <tcp_write+0x47a>
 8017d9c:	08020654 	.word	0x08020654
 8017da0:	080207f4 	.word	0x080207f4
 8017da4:	080206a8 	.word	0x080206a8
 8017da8:	0802080c 	.word	0x0802080c
 8017dac:	08020840 	.word	0x08020840
 8017db0:	08020858 	.word	0x08020858
 8017db4:	08020878 	.word	0x08020878
 8017db8:	08020898 	.word	0x08020898
 8017dbc:	080208c4 	.word	0x080208c4
    struct pbuf *p;
    u16_t left = len - pos;
 8017dc0:	88fa      	ldrh	r2, [r7, #6]
 8017dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017dc6:	1ad3      	subs	r3, r2, r3
 8017dc8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017dca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017dd2:	1ad3      	subs	r3, r2, r3
 8017dd4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017dd6:	8b7a      	ldrh	r2, [r7, #26]
 8017dd8:	8bbb      	ldrh	r3, [r7, #28]
 8017dda:	4293      	cmp	r3, r2
 8017ddc:	bf28      	it	cs
 8017dde:	4613      	movcs	r3, r2
 8017de0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017de2:	797b      	ldrb	r3, [r7, #5]
 8017de4:	f003 0301 	and.w	r3, r3, #1
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d036      	beq.n	8017e5a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017dec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017df0:	b29a      	uxth	r2, r3
 8017df2:	8b3b      	ldrh	r3, [r7, #24]
 8017df4:	4413      	add	r3, r2
 8017df6:	b299      	uxth	r1, r3
 8017df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	bf0c      	ite	eq
 8017dfe:	2301      	moveq	r3, #1
 8017e00:	2300      	movne	r3, #0
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	f107 0012 	add.w	r0, r7, #18
 8017e08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017e0a:	9302      	str	r3, [sp, #8]
 8017e0c:	797b      	ldrb	r3, [r7, #5]
 8017e0e:	9301      	str	r3, [sp, #4]
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	9300      	str	r3, [sp, #0]
 8017e14:	4603      	mov	r3, r0
 8017e16:	2036      	movs	r0, #54	@ 0x36
 8017e18:	f7ff fd5e 	bl	80178d8 <tcp_pbuf_prealloc>
 8017e1c:	6338      	str	r0, [r7, #48]	@ 0x30
 8017e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	f000 8178 	beq.w	8018116 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e28:	895b      	ldrh	r3, [r3, #10]
 8017e2a:	8b3a      	ldrh	r2, [r7, #24]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d906      	bls.n	8017e3e <tcp_write+0x37e>
 8017e30:	4b8c      	ldr	r3, [pc, #560]	@ (8018064 <tcp_write+0x5a4>)
 8017e32:	f240 2266 	movw	r2, #614	@ 0x266
 8017e36:	498c      	ldr	r1, [pc, #560]	@ (8018068 <tcp_write+0x5a8>)
 8017e38:	488c      	ldr	r0, [pc, #560]	@ (801806c <tcp_write+0x5ac>)
 8017e3a:	f004 ffad 	bl	801cd98 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e40:	685a      	ldr	r2, [r3, #4]
 8017e42:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017e46:	18d0      	adds	r0, r2, r3
 8017e48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e4c:	68ba      	ldr	r2, [r7, #8]
 8017e4e:	4413      	add	r3, r2
 8017e50:	8b3a      	ldrh	r2, [r7, #24]
 8017e52:	4619      	mov	r1, r3
 8017e54:	f005 f929 	bl	801d0aa <memcpy>
 8017e58:	e02f      	b.n	8017eba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017e5a:	8a7b      	ldrh	r3, [r7, #18]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d006      	beq.n	8017e6e <tcp_write+0x3ae>
 8017e60:	4b80      	ldr	r3, [pc, #512]	@ (8018064 <tcp_write+0x5a4>)
 8017e62:	f240 2271 	movw	r2, #625	@ 0x271
 8017e66:	4982      	ldr	r1, [pc, #520]	@ (8018070 <tcp_write+0x5b0>)
 8017e68:	4880      	ldr	r0, [pc, #512]	@ (801806c <tcp_write+0x5ac>)
 8017e6a:	f004 ff95 	bl	801cd98 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017e6e:	8b3b      	ldrh	r3, [r7, #24]
 8017e70:	2201      	movs	r2, #1
 8017e72:	4619      	mov	r1, r3
 8017e74:	2036      	movs	r0, #54	@ 0x36
 8017e76:	f7fa fd43 	bl	8012900 <pbuf_alloc>
 8017e7a:	6178      	str	r0, [r7, #20]
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	f000 814b 	beq.w	801811a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017e84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017e88:	68ba      	ldr	r2, [r7, #8]
 8017e8a:	441a      	add	r2, r3
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017e90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8017e94:	b29b      	uxth	r3, r3
 8017e96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	2036      	movs	r0, #54	@ 0x36
 8017e9e:	f7fa fd2f 	bl	8012900 <pbuf_alloc>
 8017ea2:	6338      	str	r0, [r7, #48]	@ 0x30
 8017ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d103      	bne.n	8017eb2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017eaa:	6978      	ldr	r0, [r7, #20]
 8017eac:	f7fb f80c 	bl	8012ec8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017eb0:	e136      	b.n	8018120 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017eb2:	6979      	ldr	r1, [r7, #20]
 8017eb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017eb6:	f7fb f8d5 	bl	8013064 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ebc:	f7fb f892 	bl	8012fe4 <pbuf_clen>
 8017ec0:	4603      	mov	r3, r0
 8017ec2:	461a      	mov	r2, r3
 8017ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017ec8:	4413      	add	r3, r2
 8017eca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017ed2:	2b09      	cmp	r3, #9
 8017ed4:	d903      	bls.n	8017ede <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017ed6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ed8:	f7fa fff6 	bl	8012ec8 <pbuf_free>
      goto memerr;
 8017edc:	e120      	b.n	8018120 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8017ee2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ee6:	441a      	add	r2, r3
 8017ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017eec:	9300      	str	r3, [sp, #0]
 8017eee:	4613      	mov	r3, r2
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017ef4:	68f8      	ldr	r0, [r7, #12]
 8017ef6:	f7ff fc53 	bl	80177a0 <tcp_create_segment>
 8017efa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8017efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	f000 810d 	beq.w	801811e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d102      	bne.n	8017f10 <tcp_write+0x450>
      queue = seg;
 8017f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f0e:	e00c      	b.n	8017f2a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d106      	bne.n	8017f24 <tcp_write+0x464>
 8017f16:	4b53      	ldr	r3, [pc, #332]	@ (8018064 <tcp_write+0x5a4>)
 8017f18:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8017f1c:	4955      	ldr	r1, [pc, #340]	@ (8018074 <tcp_write+0x5b4>)
 8017f1e:	4853      	ldr	r0, [pc, #332]	@ (801806c <tcp_write+0x5ac>)
 8017f20:	f004 ff3a 	bl	801cd98 <iprintf>
      prev_seg->next = seg;
 8017f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017f28:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017f2c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017f2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f32:	8b3b      	ldrh	r3, [r7, #24]
 8017f34:	4413      	add	r3, r2
 8017f36:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8017f3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017f3e:	88fb      	ldrh	r3, [r7, #6]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	f4ff af3d 	bcc.w	8017dc0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017f46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d02c      	beq.n	8017fa6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f4e:	685b      	ldr	r3, [r3, #4]
 8017f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f52:	e01e      	b.n	8017f92 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f56:	891a      	ldrh	r2, [r3, #8]
 8017f58:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f5a:	4413      	add	r3, r2
 8017f5c:	b29a      	uxth	r2, r3
 8017f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f60:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d110      	bne.n	8017f8c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f6c:	685b      	ldr	r3, [r3, #4]
 8017f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f70:	8952      	ldrh	r2, [r2, #10]
 8017f72:	4413      	add	r3, r2
 8017f74:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017f76:	68b9      	ldr	r1, [r7, #8]
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f005 f896 	bl	801d0aa <memcpy>
        p->len += oversize_used;
 8017f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f80:	895a      	ldrh	r2, [r3, #10]
 8017f82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f84:	4413      	add	r3, r2
 8017f86:	b29a      	uxth	r2, r3
 8017f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8017f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d1dd      	bne.n	8017f54 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8017f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f9a:	891a      	ldrh	r2, [r3, #8]
 8017f9c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017f9e:	4413      	add	r3, r2
 8017fa0:	b29a      	uxth	r2, r3
 8017fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fa4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8017fa6:	8a7a      	ldrh	r2, [r7, #18]
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8017fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d018      	beq.n	8017fe6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d106      	bne.n	8017fc8 <tcp_write+0x508>
 8017fba:	4b2a      	ldr	r3, [pc, #168]	@ (8018064 <tcp_write+0x5a4>)
 8017fbc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8017fc0:	492d      	ldr	r1, [pc, #180]	@ (8018078 <tcp_write+0x5b8>)
 8017fc2:	482a      	ldr	r0, [pc, #168]	@ (801806c <tcp_write+0x5ac>)
 8017fc4:	f004 fee8 	bl	801cd98 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8017fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fca:	685b      	ldr	r3, [r3, #4]
 8017fcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fb f848 	bl	8013064 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8017fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fd6:	891a      	ldrh	r2, [r3, #8]
 8017fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017fda:	891b      	ldrh	r3, [r3, #8]
 8017fdc:	4413      	add	r3, r2
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fe2:	811a      	strh	r2, [r3, #8]
 8017fe4:	e037      	b.n	8018056 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8017fe6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d034      	beq.n	8018056 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d003      	beq.n	8017ffa <tcp_write+0x53a>
 8017ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017ff4:	685b      	ldr	r3, [r3, #4]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d106      	bne.n	8018008 <tcp_write+0x548>
 8017ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8018064 <tcp_write+0x5a4>)
 8017ffc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8018000:	491e      	ldr	r1, [pc, #120]	@ (801807c <tcp_write+0x5bc>)
 8018002:	481a      	ldr	r0, [pc, #104]	@ (801806c <tcp_write+0x5ac>)
 8018004:	f004 fec8 	bl	801cd98 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801800a:	685b      	ldr	r3, [r3, #4]
 801800c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801800e:	e009      	b.n	8018024 <tcp_write+0x564>
      p->tot_len += extendlen;
 8018010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018012:	891a      	ldrh	r2, [r3, #8]
 8018014:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018016:	4413      	add	r3, r2
 8018018:	b29a      	uxth	r2, r3
 801801a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801801c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801801e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	2b00      	cmp	r3, #0
 801802a:	d1f1      	bne.n	8018010 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801802e:	891a      	ldrh	r2, [r3, #8]
 8018030:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018032:	4413      	add	r3, r2
 8018034:	b29a      	uxth	r2, r3
 8018036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018038:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801803c:	895a      	ldrh	r2, [r3, #10]
 801803e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018040:	4413      	add	r3, r2
 8018042:	b29a      	uxth	r2, r3
 8018044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018046:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8018048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801804a:	891a      	ldrh	r2, [r3, #8]
 801804c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801804e:	4413      	add	r3, r2
 8018050:	b29a      	uxth	r2, r3
 8018052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018054:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8018056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018058:	2b00      	cmp	r3, #0
 801805a:	d111      	bne.n	8018080 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018060:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018062:	e010      	b.n	8018086 <tcp_write+0x5c6>
 8018064:	08020654 	.word	0x08020654
 8018068:	080208f4 	.word	0x080208f4
 801806c:	080206a8 	.word	0x080206a8
 8018070:	08020934 	.word	0x08020934
 8018074:	08020944 	.word	0x08020944
 8018078:	08020958 	.word	0x08020958
 801807c:	08020990 	.word	0x08020990
  } else {
    last_unsent->next = queue;
 8018080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018084:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801808a:	88fb      	ldrh	r3, [r7, #6]
 801808c:	441a      	add	r2, r3
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018098:	88fb      	ldrh	r3, [r7, #6]
 801809a:	1ad3      	subs	r3, r2, r3
 801809c:	b29a      	uxth	r2, r3
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80180aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d00e      	beq.n	80180d6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d10a      	bne.n	80180d6 <tcp_write+0x616>
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d106      	bne.n	80180d6 <tcp_write+0x616>
 80180c8:	4b2c      	ldr	r3, [pc, #176]	@ (801817c <tcp_write+0x6bc>)
 80180ca:	f240 3212 	movw	r2, #786	@ 0x312
 80180ce:	492c      	ldr	r1, [pc, #176]	@ (8018180 <tcp_write+0x6c0>)
 80180d0:	482c      	ldr	r0, [pc, #176]	@ (8018184 <tcp_write+0x6c4>)
 80180d2:	f004 fe61 	bl	801cd98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80180d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d016      	beq.n	801810a <tcp_write+0x64a>
 80180dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180de:	68db      	ldr	r3, [r3, #12]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d012      	beq.n	801810a <tcp_write+0x64a>
 80180e4:	797b      	ldrb	r3, [r7, #5]
 80180e6:	f003 0302 	and.w	r3, r3, #2
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d10d      	bne.n	801810a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80180ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80180f0:	68db      	ldr	r3, [r3, #12]
 80180f2:	899b      	ldrh	r3, [r3, #12]
 80180f4:	b29c      	uxth	r4, r3
 80180f6:	2008      	movs	r0, #8
 80180f8:	f7f9 fabe 	bl	8011678 <lwip_htons>
 80180fc:	4603      	mov	r3, r0
 80180fe:	461a      	mov	r2, r3
 8018100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018102:	68db      	ldr	r3, [r3, #12]
 8018104:	4322      	orrs	r2, r4
 8018106:	b292      	uxth	r2, r2
 8018108:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801810a:	2300      	movs	r3, #0
 801810c:	e031      	b.n	8018172 <tcp_write+0x6b2>
          goto memerr;
 801810e:	bf00      	nop
 8018110:	e006      	b.n	8018120 <tcp_write+0x660>
            goto memerr;
 8018112:	bf00      	nop
 8018114:	e004      	b.n	8018120 <tcp_write+0x660>
        goto memerr;
 8018116:	bf00      	nop
 8018118:	e002      	b.n	8018120 <tcp_write+0x660>
        goto memerr;
 801811a:	bf00      	nop
 801811c:	e000      	b.n	8018120 <tcp_write+0x660>
      goto memerr;
 801811e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	8b5b      	ldrh	r3, [r3, #26]
 8018124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018128:	b29a      	uxth	r2, r3
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801812e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018130:	2b00      	cmp	r3, #0
 8018132:	d002      	beq.n	801813a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8018134:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018136:	f7fa fec7 	bl	8012ec8 <pbuf_free>
  }
  if (queue != NULL) {
 801813a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801813c:	2b00      	cmp	r3, #0
 801813e:	d002      	beq.n	8018146 <tcp_write+0x686>
    tcp_segs_free(queue);
 8018140:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018142:	f7fc fb53 	bl	80147ec <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801814c:	2b00      	cmp	r3, #0
 801814e:	d00e      	beq.n	801816e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018154:	2b00      	cmp	r3, #0
 8018156:	d10a      	bne.n	801816e <tcp_write+0x6ae>
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801815c:	2b00      	cmp	r3, #0
 801815e:	d106      	bne.n	801816e <tcp_write+0x6ae>
 8018160:	4b06      	ldr	r3, [pc, #24]	@ (801817c <tcp_write+0x6bc>)
 8018162:	f240 3227 	movw	r2, #807	@ 0x327
 8018166:	4906      	ldr	r1, [pc, #24]	@ (8018180 <tcp_write+0x6c0>)
 8018168:	4806      	ldr	r0, [pc, #24]	@ (8018184 <tcp_write+0x6c4>)
 801816a:	f004 fe15 	bl	801cd98 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801816e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018172:	4618      	mov	r0, r3
 8018174:	375c      	adds	r7, #92	@ 0x5c
 8018176:	46bd      	mov	sp, r7
 8018178:	bd90      	pop	{r4, r7, pc}
 801817a:	bf00      	nop
 801817c:	08020654 	.word	0x08020654
 8018180:	080209c8 	.word	0x080209c8
 8018184:	080206a8 	.word	0x080206a8

08018188 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018188:	b590      	push	{r4, r7, lr}
 801818a:	b08b      	sub	sp, #44	@ 0x2c
 801818c:	af02      	add	r7, sp, #8
 801818e:	6078      	str	r0, [r7, #4]
 8018190:	460b      	mov	r3, r1
 8018192:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018194:	2300      	movs	r3, #0
 8018196:	61fb      	str	r3, [r7, #28]
 8018198:	2300      	movs	r3, #0
 801819a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801819c:	2300      	movs	r3, #0
 801819e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d106      	bne.n	80181b4 <tcp_split_unsent_seg+0x2c>
 80181a6:	4b95      	ldr	r3, [pc, #596]	@ (80183fc <tcp_split_unsent_seg+0x274>)
 80181a8:	f240 324b 	movw	r2, #843	@ 0x34b
 80181ac:	4994      	ldr	r1, [pc, #592]	@ (8018400 <tcp_split_unsent_seg+0x278>)
 80181ae:	4895      	ldr	r0, [pc, #596]	@ (8018404 <tcp_split_unsent_seg+0x27c>)
 80181b0:	f004 fdf2 	bl	801cd98 <iprintf>

  useg = pcb->unsent;
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80181ba:	697b      	ldr	r3, [r7, #20]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d102      	bne.n	80181c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80181c0:	f04f 33ff 	mov.w	r3, #4294967295
 80181c4:	e116      	b.n	80183f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80181c6:	887b      	ldrh	r3, [r7, #2]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d109      	bne.n	80181e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80181cc:	4b8b      	ldr	r3, [pc, #556]	@ (80183fc <tcp_split_unsent_seg+0x274>)
 80181ce:	f240 3253 	movw	r2, #851	@ 0x353
 80181d2:	498d      	ldr	r1, [pc, #564]	@ (8018408 <tcp_split_unsent_seg+0x280>)
 80181d4:	488b      	ldr	r0, [pc, #556]	@ (8018404 <tcp_split_unsent_seg+0x27c>)
 80181d6:	f004 fddf 	bl	801cd98 <iprintf>
    return ERR_VAL;
 80181da:	f06f 0305 	mvn.w	r3, #5
 80181de:	e109      	b.n	80183f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80181e0:	697b      	ldr	r3, [r7, #20]
 80181e2:	891b      	ldrh	r3, [r3, #8]
 80181e4:	887a      	ldrh	r2, [r7, #2]
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d301      	bcc.n	80181ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80181ea:	2300      	movs	r3, #0
 80181ec:	e102      	b.n	80183f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80181f2:	887a      	ldrh	r2, [r7, #2]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d906      	bls.n	8018206 <tcp_split_unsent_seg+0x7e>
 80181f8:	4b80      	ldr	r3, [pc, #512]	@ (80183fc <tcp_split_unsent_seg+0x274>)
 80181fa:	f240 325b 	movw	r2, #859	@ 0x35b
 80181fe:	4983      	ldr	r1, [pc, #524]	@ (801840c <tcp_split_unsent_seg+0x284>)
 8018200:	4880      	ldr	r0, [pc, #512]	@ (8018404 <tcp_split_unsent_seg+0x27c>)
 8018202:	f004 fdc9 	bl	801cd98 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018206:	697b      	ldr	r3, [r7, #20]
 8018208:	891b      	ldrh	r3, [r3, #8]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d106      	bne.n	801821c <tcp_split_unsent_seg+0x94>
 801820e:	4b7b      	ldr	r3, [pc, #492]	@ (80183fc <tcp_split_unsent_seg+0x274>)
 8018210:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018214:	497e      	ldr	r1, [pc, #504]	@ (8018410 <tcp_split_unsent_seg+0x288>)
 8018216:	487b      	ldr	r0, [pc, #492]	@ (8018404 <tcp_split_unsent_seg+0x27c>)
 8018218:	f004 fdbe 	bl	801cd98 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	7a9b      	ldrb	r3, [r3, #10]
 8018220:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018222:	7bfb      	ldrb	r3, [r7, #15]
 8018224:	009b      	lsls	r3, r3, #2
 8018226:	b2db      	uxtb	r3, r3
 8018228:	f003 0304 	and.w	r3, r3, #4
 801822c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801822e:	697b      	ldr	r3, [r7, #20]
 8018230:	891a      	ldrh	r2, [r3, #8]
 8018232:	887b      	ldrh	r3, [r7, #2]
 8018234:	1ad3      	subs	r3, r2, r3
 8018236:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018238:	7bbb      	ldrb	r3, [r7, #14]
 801823a:	b29a      	uxth	r2, r3
 801823c:	89bb      	ldrh	r3, [r7, #12]
 801823e:	4413      	add	r3, r2
 8018240:	b29b      	uxth	r3, r3
 8018242:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018246:	4619      	mov	r1, r3
 8018248:	2036      	movs	r0, #54	@ 0x36
 801824a:	f7fa fb59 	bl	8012900 <pbuf_alloc>
 801824e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	2b00      	cmp	r3, #0
 8018254:	f000 80b7 	beq.w	80183c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	685b      	ldr	r3, [r3, #4]
 801825c:	891a      	ldrh	r2, [r3, #8]
 801825e:	697b      	ldr	r3, [r7, #20]
 8018260:	891b      	ldrh	r3, [r3, #8]
 8018262:	1ad3      	subs	r3, r2, r3
 8018264:	b29a      	uxth	r2, r3
 8018266:	887b      	ldrh	r3, [r7, #2]
 8018268:	4413      	add	r3, r2
 801826a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	6858      	ldr	r0, [r3, #4]
 8018270:	693b      	ldr	r3, [r7, #16]
 8018272:	685a      	ldr	r2, [r3, #4]
 8018274:	7bbb      	ldrb	r3, [r7, #14]
 8018276:	18d1      	adds	r1, r2, r3
 8018278:	897b      	ldrh	r3, [r7, #10]
 801827a:	89ba      	ldrh	r2, [r7, #12]
 801827c:	f7fb f82a 	bl	80132d4 <pbuf_copy_partial>
 8018280:	4603      	mov	r3, r0
 8018282:	461a      	mov	r2, r3
 8018284:	89bb      	ldrh	r3, [r7, #12]
 8018286:	4293      	cmp	r3, r2
 8018288:	f040 809f 	bne.w	80183ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	68db      	ldr	r3, [r3, #12]
 8018290:	899b      	ldrh	r3, [r3, #12]
 8018292:	b29b      	uxth	r3, r3
 8018294:	4618      	mov	r0, r3
 8018296:	f7f9 f9ef 	bl	8011678 <lwip_htons>
 801829a:	4603      	mov	r3, r0
 801829c:	b2db      	uxtb	r3, r3
 801829e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80182a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80182a4:	2300      	movs	r3, #0
 80182a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80182a8:	7efb      	ldrb	r3, [r7, #27]
 80182aa:	f003 0308 	and.w	r3, r3, #8
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d007      	beq.n	80182c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80182b2:	7efb      	ldrb	r3, [r7, #27]
 80182b4:	f023 0308 	bic.w	r3, r3, #8
 80182b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80182ba:	7ebb      	ldrb	r3, [r7, #26]
 80182bc:	f043 0308 	orr.w	r3, r3, #8
 80182c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80182c2:	7efb      	ldrb	r3, [r7, #27]
 80182c4:	f003 0301 	and.w	r3, r3, #1
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d007      	beq.n	80182dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80182cc:	7efb      	ldrb	r3, [r7, #27]
 80182ce:	f023 0301 	bic.w	r3, r3, #1
 80182d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80182d4:	7ebb      	ldrb	r3, [r7, #26]
 80182d6:	f043 0301 	orr.w	r3, r3, #1
 80182da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	68db      	ldr	r3, [r3, #12]
 80182e0:	685b      	ldr	r3, [r3, #4]
 80182e2:	4618      	mov	r0, r3
 80182e4:	f7f9 f9dd 	bl	80116a2 <lwip_htonl>
 80182e8:	4602      	mov	r2, r0
 80182ea:	887b      	ldrh	r3, [r7, #2]
 80182ec:	18d1      	adds	r1, r2, r3
 80182ee:	7eba      	ldrb	r2, [r7, #26]
 80182f0:	7bfb      	ldrb	r3, [r7, #15]
 80182f2:	9300      	str	r3, [sp, #0]
 80182f4:	460b      	mov	r3, r1
 80182f6:	6939      	ldr	r1, [r7, #16]
 80182f8:	6878      	ldr	r0, [r7, #4]
 80182fa:	f7ff fa51 	bl	80177a0 <tcp_create_segment>
 80182fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018300:	69fb      	ldr	r3, [r7, #28]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d063      	beq.n	80183ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018306:	697b      	ldr	r3, [r7, #20]
 8018308:	685b      	ldr	r3, [r3, #4]
 801830a:	4618      	mov	r0, r3
 801830c:	f7fa fe6a 	bl	8012fe4 <pbuf_clen>
 8018310:	4603      	mov	r3, r0
 8018312:	461a      	mov	r2, r3
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801831a:	1a9b      	subs	r3, r3, r2
 801831c:	b29a      	uxth	r2, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	6858      	ldr	r0, [r3, #4]
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	685b      	ldr	r3, [r3, #4]
 801832c:	891a      	ldrh	r2, [r3, #8]
 801832e:	89bb      	ldrh	r3, [r7, #12]
 8018330:	1ad3      	subs	r3, r2, r3
 8018332:	b29b      	uxth	r3, r3
 8018334:	4619      	mov	r1, r3
 8018336:	f7fa fc41 	bl	8012bbc <pbuf_realloc>
  useg->len -= remainder;
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	891a      	ldrh	r2, [r3, #8]
 801833e:	89bb      	ldrh	r3, [r7, #12]
 8018340:	1ad3      	subs	r3, r2, r3
 8018342:	b29a      	uxth	r2, r3
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	899b      	ldrh	r3, [r3, #12]
 801834e:	b29c      	uxth	r4, r3
 8018350:	7efb      	ldrb	r3, [r7, #27]
 8018352:	b29b      	uxth	r3, r3
 8018354:	4618      	mov	r0, r3
 8018356:	f7f9 f98f 	bl	8011678 <lwip_htons>
 801835a:	4603      	mov	r3, r0
 801835c:	461a      	mov	r2, r3
 801835e:	697b      	ldr	r3, [r7, #20]
 8018360:	68db      	ldr	r3, [r3, #12]
 8018362:	4322      	orrs	r2, r4
 8018364:	b292      	uxth	r2, r2
 8018366:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018368:	697b      	ldr	r3, [r7, #20]
 801836a:	685b      	ldr	r3, [r3, #4]
 801836c:	4618      	mov	r0, r3
 801836e:	f7fa fe39 	bl	8012fe4 <pbuf_clen>
 8018372:	4603      	mov	r3, r0
 8018374:	461a      	mov	r2, r3
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801837c:	4413      	add	r3, r2
 801837e:	b29a      	uxth	r2, r3
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018386:	69fb      	ldr	r3, [r7, #28]
 8018388:	685b      	ldr	r3, [r3, #4]
 801838a:	4618      	mov	r0, r3
 801838c:	f7fa fe2a 	bl	8012fe4 <pbuf_clen>
 8018390:	4603      	mov	r3, r0
 8018392:	461a      	mov	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801839a:	4413      	add	r3, r2
 801839c:	b29a      	uxth	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	681a      	ldr	r2, [r3, #0]
 80183a8:	69fb      	ldr	r3, [r7, #28]
 80183aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80183ac:	697b      	ldr	r3, [r7, #20]
 80183ae:	69fa      	ldr	r2, [r7, #28]
 80183b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80183b2:	69fb      	ldr	r3, [r7, #28]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d103      	bne.n	80183c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	2200      	movs	r2, #0
 80183be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80183c2:	2300      	movs	r3, #0
 80183c4:	e016      	b.n	80183f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80183c6:	bf00      	nop
 80183c8:	e002      	b.n	80183d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80183ca:	bf00      	nop
 80183cc:	e000      	b.n	80183d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80183ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80183d0:	69fb      	ldr	r3, [r7, #28]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d006      	beq.n	80183e4 <tcp_split_unsent_seg+0x25c>
 80183d6:	4b09      	ldr	r3, [pc, #36]	@ (80183fc <tcp_split_unsent_seg+0x274>)
 80183d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80183dc:	490d      	ldr	r1, [pc, #52]	@ (8018414 <tcp_split_unsent_seg+0x28c>)
 80183de:	4809      	ldr	r0, [pc, #36]	@ (8018404 <tcp_split_unsent_seg+0x27c>)
 80183e0:	f004 fcda 	bl	801cd98 <iprintf>
  if (p != NULL) {
 80183e4:	693b      	ldr	r3, [r7, #16]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d002      	beq.n	80183f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80183ea:	6938      	ldr	r0, [r7, #16]
 80183ec:	f7fa fd6c 	bl	8012ec8 <pbuf_free>
  }

  return ERR_MEM;
 80183f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183f4:	4618      	mov	r0, r3
 80183f6:	3724      	adds	r7, #36	@ 0x24
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd90      	pop	{r4, r7, pc}
 80183fc:	08020654 	.word	0x08020654
 8018400:	080209e8 	.word	0x080209e8
 8018404:	080206a8 	.word	0x080206a8
 8018408:	08020a0c 	.word	0x08020a0c
 801840c:	08020a30 	.word	0x08020a30
 8018410:	08020a40 	.word	0x08020a40
 8018414:	08020a50 	.word	0x08020a50

08018418 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018418:	b590      	push	{r4, r7, lr}
 801841a:	b085      	sub	sp, #20
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d106      	bne.n	8018434 <tcp_send_fin+0x1c>
 8018426:	4b21      	ldr	r3, [pc, #132]	@ (80184ac <tcp_send_fin+0x94>)
 8018428:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801842c:	4920      	ldr	r1, [pc, #128]	@ (80184b0 <tcp_send_fin+0x98>)
 801842e:	4821      	ldr	r0, [pc, #132]	@ (80184b4 <tcp_send_fin+0x9c>)
 8018430:	f004 fcb2 	bl	801cd98 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018438:	2b00      	cmp	r3, #0
 801843a:	d02e      	beq.n	801849a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018440:	60fb      	str	r3, [r7, #12]
 8018442:	e002      	b.n	801844a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d1f8      	bne.n	8018444 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	68db      	ldr	r3, [r3, #12]
 8018456:	899b      	ldrh	r3, [r3, #12]
 8018458:	b29b      	uxth	r3, r3
 801845a:	4618      	mov	r0, r3
 801845c:	f7f9 f90c 	bl	8011678 <lwip_htons>
 8018460:	4603      	mov	r3, r0
 8018462:	b2db      	uxtb	r3, r3
 8018464:	f003 0307 	and.w	r3, r3, #7
 8018468:	2b00      	cmp	r3, #0
 801846a:	d116      	bne.n	801849a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	68db      	ldr	r3, [r3, #12]
 8018470:	899b      	ldrh	r3, [r3, #12]
 8018472:	b29c      	uxth	r4, r3
 8018474:	2001      	movs	r0, #1
 8018476:	f7f9 f8ff 	bl	8011678 <lwip_htons>
 801847a:	4603      	mov	r3, r0
 801847c:	461a      	mov	r2, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	68db      	ldr	r3, [r3, #12]
 8018482:	4322      	orrs	r2, r4
 8018484:	b292      	uxth	r2, r2
 8018486:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	8b5b      	ldrh	r3, [r3, #26]
 801848c:	f043 0320 	orr.w	r3, r3, #32
 8018490:	b29a      	uxth	r2, r3
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018496:	2300      	movs	r3, #0
 8018498:	e004      	b.n	80184a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801849a:	2101      	movs	r1, #1
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f000 f80b 	bl	80184b8 <tcp_enqueue_flags>
 80184a2:	4603      	mov	r3, r0
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3714      	adds	r7, #20
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd90      	pop	{r4, r7, pc}
 80184ac:	08020654 	.word	0x08020654
 80184b0:	08020a5c 	.word	0x08020a5c
 80184b4:	080206a8 	.word	0x080206a8

080184b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80184b8:	b580      	push	{r7, lr}
 80184ba:	b08a      	sub	sp, #40	@ 0x28
 80184bc:	af02      	add	r7, sp, #8
 80184be:	6078      	str	r0, [r7, #4]
 80184c0:	460b      	mov	r3, r1
 80184c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80184c4:	2300      	movs	r3, #0
 80184c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80184c8:	2300      	movs	r3, #0
 80184ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80184cc:	78fb      	ldrb	r3, [r7, #3]
 80184ce:	f003 0303 	and.w	r3, r3, #3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d106      	bne.n	80184e4 <tcp_enqueue_flags+0x2c>
 80184d6:	4b67      	ldr	r3, [pc, #412]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 80184d8:	f240 4211 	movw	r2, #1041	@ 0x411
 80184dc:	4966      	ldr	r1, [pc, #408]	@ (8018678 <tcp_enqueue_flags+0x1c0>)
 80184de:	4867      	ldr	r0, [pc, #412]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 80184e0:	f004 fc5a 	bl	801cd98 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d106      	bne.n	80184f8 <tcp_enqueue_flags+0x40>
 80184ea:	4b62      	ldr	r3, [pc, #392]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 80184ec:	f240 4213 	movw	r2, #1043	@ 0x413
 80184f0:	4963      	ldr	r1, [pc, #396]	@ (8018680 <tcp_enqueue_flags+0x1c8>)
 80184f2:	4862      	ldr	r0, [pc, #392]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 80184f4:	f004 fc50 	bl	801cd98 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80184f8:	78fb      	ldrb	r3, [r7, #3]
 80184fa:	f003 0302 	and.w	r3, r3, #2
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d001      	beq.n	8018506 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018502:	2301      	movs	r3, #1
 8018504:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018506:	7ffb      	ldrb	r3, [r7, #31]
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	b2db      	uxtb	r3, r3
 801850c:	f003 0304 	and.w	r3, r3, #4
 8018510:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018512:	7dfb      	ldrb	r3, [r7, #23]
 8018514:	b29b      	uxth	r3, r3
 8018516:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801851a:	4619      	mov	r1, r3
 801851c:	2036      	movs	r0, #54	@ 0x36
 801851e:	f7fa f9ef 	bl	8012900 <pbuf_alloc>
 8018522:	6138      	str	r0, [r7, #16]
 8018524:	693b      	ldr	r3, [r7, #16]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d109      	bne.n	801853e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	8b5b      	ldrh	r3, [r3, #26]
 801852e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018532:	b29a      	uxth	r2, r3
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018538:	f04f 33ff 	mov.w	r3, #4294967295
 801853c:	e095      	b.n	801866a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801853e:	693b      	ldr	r3, [r7, #16]
 8018540:	895a      	ldrh	r2, [r3, #10]
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	b29b      	uxth	r3, r3
 8018546:	429a      	cmp	r2, r3
 8018548:	d206      	bcs.n	8018558 <tcp_enqueue_flags+0xa0>
 801854a:	4b4a      	ldr	r3, [pc, #296]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 801854c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018550:	494c      	ldr	r1, [pc, #304]	@ (8018684 <tcp_enqueue_flags+0x1cc>)
 8018552:	484a      	ldr	r0, [pc, #296]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 8018554:	f004 fc20 	bl	801cd98 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801855c:	78fa      	ldrb	r2, [r7, #3]
 801855e:	7ffb      	ldrb	r3, [r7, #31]
 8018560:	9300      	str	r3, [sp, #0]
 8018562:	460b      	mov	r3, r1
 8018564:	6939      	ldr	r1, [r7, #16]
 8018566:	6878      	ldr	r0, [r7, #4]
 8018568:	f7ff f91a 	bl	80177a0 <tcp_create_segment>
 801856c:	60f8      	str	r0, [r7, #12]
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d109      	bne.n	8018588 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	8b5b      	ldrh	r3, [r3, #26]
 8018578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801857c:	b29a      	uxth	r2, r3
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018582:	f04f 33ff 	mov.w	r3, #4294967295
 8018586:	e070      	b.n	801866a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	68db      	ldr	r3, [r3, #12]
 801858c:	f003 0303 	and.w	r3, r3, #3
 8018590:	2b00      	cmp	r3, #0
 8018592:	d006      	beq.n	80185a2 <tcp_enqueue_flags+0xea>
 8018594:	4b37      	ldr	r3, [pc, #220]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 8018596:	f240 4242 	movw	r2, #1090	@ 0x442
 801859a:	493b      	ldr	r1, [pc, #236]	@ (8018688 <tcp_enqueue_flags+0x1d0>)
 801859c:	4837      	ldr	r0, [pc, #220]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 801859e:	f004 fbfb 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	891b      	ldrh	r3, [r3, #8]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d006      	beq.n	80185b8 <tcp_enqueue_flags+0x100>
 80185aa:	4b32      	ldr	r3, [pc, #200]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 80185ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80185b0:	4936      	ldr	r1, [pc, #216]	@ (801868c <tcp_enqueue_flags+0x1d4>)
 80185b2:	4832      	ldr	r0, [pc, #200]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 80185b4:	f004 fbf0 	bl	801cd98 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d103      	bne.n	80185c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	68fa      	ldr	r2, [r7, #12]
 80185c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80185c6:	e00d      	b.n	80185e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80185cc:	61bb      	str	r3, [r7, #24]
 80185ce:	e002      	b.n	80185d6 <tcp_enqueue_flags+0x11e>
 80185d0:	69bb      	ldr	r3, [r7, #24]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	61bb      	str	r3, [r7, #24]
 80185d6:	69bb      	ldr	r3, [r7, #24]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d1f8      	bne.n	80185d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80185de:	69bb      	ldr	r3, [r7, #24]
 80185e0:	68fa      	ldr	r2, [r7, #12]
 80185e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	2200      	movs	r2, #0
 80185e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80185ec:	78fb      	ldrb	r3, [r7, #3]
 80185ee:	f003 0302 	and.w	r3, r3, #2
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d104      	bne.n	8018600 <tcp_enqueue_flags+0x148>
 80185f6:	78fb      	ldrb	r3, [r7, #3]
 80185f8:	f003 0301 	and.w	r3, r3, #1
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d004      	beq.n	801860a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018604:	1c5a      	adds	r2, r3, #1
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801860a:	78fb      	ldrb	r3, [r7, #3]
 801860c:	f003 0301 	and.w	r3, r3, #1
 8018610:	2b00      	cmp	r3, #0
 8018612:	d006      	beq.n	8018622 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	8b5b      	ldrh	r3, [r3, #26]
 8018618:	f043 0320 	orr.w	r3, r3, #32
 801861c:	b29a      	uxth	r2, r3
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	4618      	mov	r0, r3
 8018628:	f7fa fcdc 	bl	8012fe4 <pbuf_clen>
 801862c:	4603      	mov	r3, r0
 801862e:	461a      	mov	r2, r3
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018636:	4413      	add	r3, r2
 8018638:	b29a      	uxth	r2, r3
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018646:	2b00      	cmp	r3, #0
 8018648:	d00e      	beq.n	8018668 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801864e:	2b00      	cmp	r3, #0
 8018650:	d10a      	bne.n	8018668 <tcp_enqueue_flags+0x1b0>
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018656:	2b00      	cmp	r3, #0
 8018658:	d106      	bne.n	8018668 <tcp_enqueue_flags+0x1b0>
 801865a:	4b06      	ldr	r3, [pc, #24]	@ (8018674 <tcp_enqueue_flags+0x1bc>)
 801865c:	f240 4265 	movw	r2, #1125	@ 0x465
 8018660:	490b      	ldr	r1, [pc, #44]	@ (8018690 <tcp_enqueue_flags+0x1d8>)
 8018662:	4806      	ldr	r0, [pc, #24]	@ (801867c <tcp_enqueue_flags+0x1c4>)
 8018664:	f004 fb98 	bl	801cd98 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018668:	2300      	movs	r3, #0
}
 801866a:	4618      	mov	r0, r3
 801866c:	3720      	adds	r7, #32
 801866e:	46bd      	mov	sp, r7
 8018670:	bd80      	pop	{r7, pc}
 8018672:	bf00      	nop
 8018674:	08020654 	.word	0x08020654
 8018678:	08020a78 	.word	0x08020a78
 801867c:	080206a8 	.word	0x080206a8
 8018680:	08020ad0 	.word	0x08020ad0
 8018684:	08020af0 	.word	0x08020af0
 8018688:	08020b2c 	.word	0x08020b2c
 801868c:	08020b44 	.word	0x08020b44
 8018690:	08020b70 	.word	0x08020b70

08018694 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018694:	b5b0      	push	{r4, r5, r7, lr}
 8018696:	b08a      	sub	sp, #40	@ 0x28
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d106      	bne.n	80186b0 <tcp_output+0x1c>
 80186a2:	4b8a      	ldr	r3, [pc, #552]	@ (80188cc <tcp_output+0x238>)
 80186a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80186a8:	4989      	ldr	r1, [pc, #548]	@ (80188d0 <tcp_output+0x23c>)
 80186aa:	488a      	ldr	r0, [pc, #552]	@ (80188d4 <tcp_output+0x240>)
 80186ac:	f004 fb74 	bl	801cd98 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	7d1b      	ldrb	r3, [r3, #20]
 80186b4:	2b01      	cmp	r3, #1
 80186b6:	d106      	bne.n	80186c6 <tcp_output+0x32>
 80186b8:	4b84      	ldr	r3, [pc, #528]	@ (80188cc <tcp_output+0x238>)
 80186ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80186be:	4986      	ldr	r1, [pc, #536]	@ (80188d8 <tcp_output+0x244>)
 80186c0:	4884      	ldr	r0, [pc, #528]	@ (80188d4 <tcp_output+0x240>)
 80186c2:	f004 fb69 	bl	801cd98 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80186c6:	4b85      	ldr	r3, [pc, #532]	@ (80188dc <tcp_output+0x248>)
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	687a      	ldr	r2, [r7, #4]
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d101      	bne.n	80186d4 <tcp_output+0x40>
    return ERR_OK;
 80186d0:	2300      	movs	r3, #0
 80186d2:	e1ce      	b.n	8018a72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80186e0:	4293      	cmp	r3, r2
 80186e2:	bf28      	it	cs
 80186e4:	4613      	movcs	r3, r2
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80186f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d10b      	bne.n	801870e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	8b5b      	ldrh	r3, [r3, #26]
 80186fa:	f003 0302 	and.w	r3, r3, #2
 80186fe:	2b00      	cmp	r3, #0
 8018700:	f000 81aa 	beq.w	8018a58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 fdcb 	bl	80192a0 <tcp_send_empty_ack>
 801870a:	4603      	mov	r3, r0
 801870c:	e1b1      	b.n	8018a72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801870e:	6879      	ldr	r1, [r7, #4]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	3304      	adds	r3, #4
 8018714:	461a      	mov	r2, r3
 8018716:	6878      	ldr	r0, [r7, #4]
 8018718:	f7ff f826 	bl	8017768 <tcp_route>
 801871c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801871e:	697b      	ldr	r3, [r7, #20]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d102      	bne.n	801872a <tcp_output+0x96>
    return ERR_RTE;
 8018724:	f06f 0303 	mvn.w	r3, #3
 8018728:	e1a3      	b.n	8018a72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d003      	beq.n	8018738 <tcp_output+0xa4>
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d111      	bne.n	801875c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d002      	beq.n	8018744 <tcp_output+0xb0>
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	3304      	adds	r3, #4
 8018742:	e000      	b.n	8018746 <tcp_output+0xb2>
 8018744:	2300      	movs	r3, #0
 8018746:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d102      	bne.n	8018754 <tcp_output+0xc0>
      return ERR_RTE;
 801874e:	f06f 0303 	mvn.w	r3, #3
 8018752:	e18e      	b.n	8018a72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	681a      	ldr	r2, [r3, #0]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801875e:	68db      	ldr	r3, [r3, #12]
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	4618      	mov	r0, r3
 8018764:	f7f8 ff9d 	bl	80116a2 <lwip_htonl>
 8018768:	4602      	mov	r2, r0
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801876e:	1ad3      	subs	r3, r2, r3
 8018770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018772:	8912      	ldrh	r2, [r2, #8]
 8018774:	4413      	add	r3, r2
 8018776:	69ba      	ldr	r2, [r7, #24]
 8018778:	429a      	cmp	r2, r3
 801877a:	d227      	bcs.n	80187cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018782:	461a      	mov	r2, r3
 8018784:	69bb      	ldr	r3, [r7, #24]
 8018786:	4293      	cmp	r3, r2
 8018788:	d114      	bne.n	80187b4 <tcp_output+0x120>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801878e:	2b00      	cmp	r3, #0
 8018790:	d110      	bne.n	80187b4 <tcp_output+0x120>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018798:	2b00      	cmp	r3, #0
 801879a:	d10b      	bne.n	80187b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2200      	movs	r2, #0
 80187a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2201      	movs	r2, #1
 80187a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2200      	movs	r2, #0
 80187b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	8b5b      	ldrh	r3, [r3, #26]
 80187b8:	f003 0302 	and.w	r3, r3, #2
 80187bc:	2b00      	cmp	r3, #0
 80187be:	f000 814d 	beq.w	8018a5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 fd6c 	bl	80192a0 <tcp_send_empty_ack>
 80187c8:	4603      	mov	r3, r0
 80187ca:	e152      	b.n	8018a72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80187d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80187da:	6a3b      	ldr	r3, [r7, #32]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	f000 811c 	beq.w	8018a1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80187e2:	e002      	b.n	80187ea <tcp_output+0x156>
 80187e4:	6a3b      	ldr	r3, [r7, #32]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	623b      	str	r3, [r7, #32]
 80187ea:	6a3b      	ldr	r3, [r7, #32]
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	d1f8      	bne.n	80187e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80187f2:	e112      	b.n	8018a1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80187f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187f6:	68db      	ldr	r3, [r3, #12]
 80187f8:	899b      	ldrh	r3, [r3, #12]
 80187fa:	b29b      	uxth	r3, r3
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7f8 ff3b 	bl	8011678 <lwip_htons>
 8018802:	4603      	mov	r3, r0
 8018804:	b2db      	uxtb	r3, r3
 8018806:	f003 0304 	and.w	r3, r3, #4
 801880a:	2b00      	cmp	r3, #0
 801880c:	d006      	beq.n	801881c <tcp_output+0x188>
 801880e:	4b2f      	ldr	r3, [pc, #188]	@ (80188cc <tcp_output+0x238>)
 8018810:	f240 5236 	movw	r2, #1334	@ 0x536
 8018814:	4932      	ldr	r1, [pc, #200]	@ (80188e0 <tcp_output+0x24c>)
 8018816:	482f      	ldr	r0, [pc, #188]	@ (80188d4 <tcp_output+0x240>)
 8018818:	f004 fabe 	bl	801cd98 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018820:	2b00      	cmp	r3, #0
 8018822:	d01f      	beq.n	8018864 <tcp_output+0x1d0>
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	8b5b      	ldrh	r3, [r3, #26]
 8018828:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801882c:	2b00      	cmp	r3, #0
 801882e:	d119      	bne.n	8018864 <tcp_output+0x1d0>
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018834:	2b00      	cmp	r3, #0
 8018836:	d00b      	beq.n	8018850 <tcp_output+0x1bc>
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d110      	bne.n	8018864 <tcp_output+0x1d0>
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018846:	891a      	ldrh	r2, [r3, #8]
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801884c:	429a      	cmp	r2, r3
 801884e:	d209      	bcs.n	8018864 <tcp_output+0x1d0>
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018856:	2b00      	cmp	r3, #0
 8018858:	d004      	beq.n	8018864 <tcp_output+0x1d0>
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018860:	2b08      	cmp	r3, #8
 8018862:	d901      	bls.n	8018868 <tcp_output+0x1d4>
 8018864:	2301      	movs	r3, #1
 8018866:	e000      	b.n	801886a <tcp_output+0x1d6>
 8018868:	2300      	movs	r3, #0
 801886a:	2b00      	cmp	r3, #0
 801886c:	d106      	bne.n	801887c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	8b5b      	ldrh	r3, [r3, #26]
 8018872:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018876:	2b00      	cmp	r3, #0
 8018878:	f000 80e4 	beq.w	8018a44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	7d1b      	ldrb	r3, [r3, #20]
 8018880:	2b02      	cmp	r3, #2
 8018882:	d00d      	beq.n	80188a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018886:	68db      	ldr	r3, [r3, #12]
 8018888:	899b      	ldrh	r3, [r3, #12]
 801888a:	b29c      	uxth	r4, r3
 801888c:	2010      	movs	r0, #16
 801888e:	f7f8 fef3 	bl	8011678 <lwip_htons>
 8018892:	4603      	mov	r3, r0
 8018894:	461a      	mov	r2, r3
 8018896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018898:	68db      	ldr	r3, [r3, #12]
 801889a:	4322      	orrs	r2, r4
 801889c:	b292      	uxth	r2, r2
 801889e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80188a0:	697a      	ldr	r2, [r7, #20]
 80188a2:	6879      	ldr	r1, [r7, #4]
 80188a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80188a6:	f000 f909 	bl	8018abc <tcp_output_segment>
 80188aa:	4603      	mov	r3, r0
 80188ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80188ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d016      	beq.n	80188e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	8b5b      	ldrh	r3, [r3, #26]
 80188ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188be:	b29a      	uxth	r2, r3
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	835a      	strh	r2, [r3, #26]
      return err;
 80188c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80188c8:	e0d3      	b.n	8018a72 <tcp_output+0x3de>
 80188ca:	bf00      	nop
 80188cc:	08020654 	.word	0x08020654
 80188d0:	08020b98 	.word	0x08020b98
 80188d4:	080206a8 	.word	0x080206a8
 80188d8:	08020bb0 	.word	0x08020bb0
 80188dc:	2000f2bc 	.word	0x2000f2bc
 80188e0:	08020bd8 	.word	0x08020bd8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80188e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188e6:	681a      	ldr	r2, [r3, #0]
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	7d1b      	ldrb	r3, [r3, #20]
 80188f0:	2b02      	cmp	r3, #2
 80188f2:	d006      	beq.n	8018902 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	8b5b      	ldrh	r3, [r3, #26]
 80188f8:	f023 0303 	bic.w	r3, r3, #3
 80188fc:	b29a      	uxth	r2, r3
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018904:	68db      	ldr	r3, [r3, #12]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	4618      	mov	r0, r3
 801890a:	f7f8 feca 	bl	80116a2 <lwip_htonl>
 801890e:	4604      	mov	r4, r0
 8018910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018912:	891b      	ldrh	r3, [r3, #8]
 8018914:	461d      	mov	r5, r3
 8018916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018918:	68db      	ldr	r3, [r3, #12]
 801891a:	899b      	ldrh	r3, [r3, #12]
 801891c:	b29b      	uxth	r3, r3
 801891e:	4618      	mov	r0, r3
 8018920:	f7f8 feaa 	bl	8011678 <lwip_htons>
 8018924:	4603      	mov	r3, r0
 8018926:	b2db      	uxtb	r3, r3
 8018928:	f003 0303 	and.w	r3, r3, #3
 801892c:	2b00      	cmp	r3, #0
 801892e:	d001      	beq.n	8018934 <tcp_output+0x2a0>
 8018930:	2301      	movs	r3, #1
 8018932:	e000      	b.n	8018936 <tcp_output+0x2a2>
 8018934:	2300      	movs	r3, #0
 8018936:	442b      	add	r3, r5
 8018938:	4423      	add	r3, r4
 801893a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018940:	68bb      	ldr	r3, [r7, #8]
 8018942:	1ad3      	subs	r3, r2, r3
 8018944:	2b00      	cmp	r3, #0
 8018946:	da02      	bge.n	801894e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	68ba      	ldr	r2, [r7, #8]
 801894c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018950:	891b      	ldrh	r3, [r3, #8]
 8018952:	461c      	mov	r4, r3
 8018954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018956:	68db      	ldr	r3, [r3, #12]
 8018958:	899b      	ldrh	r3, [r3, #12]
 801895a:	b29b      	uxth	r3, r3
 801895c:	4618      	mov	r0, r3
 801895e:	f7f8 fe8b 	bl	8011678 <lwip_htons>
 8018962:	4603      	mov	r3, r0
 8018964:	b2db      	uxtb	r3, r3
 8018966:	f003 0303 	and.w	r3, r3, #3
 801896a:	2b00      	cmp	r3, #0
 801896c:	d001      	beq.n	8018972 <tcp_output+0x2de>
 801896e:	2301      	movs	r3, #1
 8018970:	e000      	b.n	8018974 <tcp_output+0x2e0>
 8018972:	2300      	movs	r3, #0
 8018974:	4423      	add	r3, r4
 8018976:	2b00      	cmp	r3, #0
 8018978:	d049      	beq.n	8018a0e <tcp_output+0x37a>
      seg->next = NULL;
 801897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801897c:	2200      	movs	r2, #0
 801897e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018984:	2b00      	cmp	r3, #0
 8018986:	d105      	bne.n	8018994 <tcp_output+0x300>
        pcb->unacked = seg;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801898c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018990:	623b      	str	r3, [r7, #32]
 8018992:	e03f      	b.n	8018a14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018996:	68db      	ldr	r3, [r3, #12]
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	4618      	mov	r0, r3
 801899c:	f7f8 fe81 	bl	80116a2 <lwip_htonl>
 80189a0:	4604      	mov	r4, r0
 80189a2:	6a3b      	ldr	r3, [r7, #32]
 80189a4:	68db      	ldr	r3, [r3, #12]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7f8 fe7a 	bl	80116a2 <lwip_htonl>
 80189ae:	4603      	mov	r3, r0
 80189b0:	1ae3      	subs	r3, r4, r3
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	da24      	bge.n	8018a00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	3370      	adds	r3, #112	@ 0x70
 80189ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80189bc:	e002      	b.n	80189c4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80189be:	69fb      	ldr	r3, [r7, #28]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80189c4:	69fb      	ldr	r3, [r7, #28]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d011      	beq.n	80189f0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80189cc:	69fb      	ldr	r3, [r7, #28]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	68db      	ldr	r3, [r3, #12]
 80189d2:	685b      	ldr	r3, [r3, #4]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7f8 fe64 	bl	80116a2 <lwip_htonl>
 80189da:	4604      	mov	r4, r0
 80189dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189de:	68db      	ldr	r3, [r3, #12]
 80189e0:	685b      	ldr	r3, [r3, #4]
 80189e2:	4618      	mov	r0, r3
 80189e4:	f7f8 fe5d 	bl	80116a2 <lwip_htonl>
 80189e8:	4603      	mov	r3, r0
 80189ea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	dbe6      	blt.n	80189be <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80189f0:	69fb      	ldr	r3, [r7, #28]
 80189f2:	681a      	ldr	r2, [r3, #0]
 80189f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189f6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80189f8:	69fb      	ldr	r3, [r7, #28]
 80189fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80189fc:	601a      	str	r2, [r3, #0]
 80189fe:	e009      	b.n	8018a14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018a00:	6a3b      	ldr	r3, [r7, #32]
 8018a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018a06:	6a3b      	ldr	r3, [r7, #32]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	623b      	str	r3, [r7, #32]
 8018a0c:	e002      	b.n	8018a14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018a0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018a10:	f7fb ff01 	bl	8014816 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8018a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d012      	beq.n	8018a46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a22:	68db      	ldr	r3, [r3, #12]
 8018a24:	685b      	ldr	r3, [r3, #4]
 8018a26:	4618      	mov	r0, r3
 8018a28:	f7f8 fe3b 	bl	80116a2 <lwip_htonl>
 8018a2c:	4602      	mov	r2, r0
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a32:	1ad3      	subs	r3, r2, r3
 8018a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018a36:	8912      	ldrh	r2, [r2, #8]
 8018a38:	4413      	add	r3, r2
  while (seg != NULL &&
 8018a3a:	69ba      	ldr	r2, [r7, #24]
 8018a3c:	429a      	cmp	r2, r3
 8018a3e:	f4bf aed9 	bcs.w	80187f4 <tcp_output+0x160>
 8018a42:	e000      	b.n	8018a46 <tcp_output+0x3b2>
      break;
 8018a44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d108      	bne.n	8018a60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2200      	movs	r2, #0
 8018a52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018a56:	e004      	b.n	8018a62 <tcp_output+0x3ce>
    goto output_done;
 8018a58:	bf00      	nop
 8018a5a:	e002      	b.n	8018a62 <tcp_output+0x3ce>
    goto output_done;
 8018a5c:	bf00      	nop
 8018a5e:	e000      	b.n	8018a62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018a60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	8b5b      	ldrh	r3, [r3, #26]
 8018a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018a6a:	b29a      	uxth	r2, r3
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018a70:	2300      	movs	r3, #0
}
 8018a72:	4618      	mov	r0, r3
 8018a74:	3728      	adds	r7, #40	@ 0x28
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bdb0      	pop	{r4, r5, r7, pc}
 8018a7a:	bf00      	nop

08018a7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b082      	sub	sp, #8
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d106      	bne.n	8018a98 <tcp_output_segment_busy+0x1c>
 8018a8a:	4b09      	ldr	r3, [pc, #36]	@ (8018ab0 <tcp_output_segment_busy+0x34>)
 8018a8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8018a90:	4908      	ldr	r1, [pc, #32]	@ (8018ab4 <tcp_output_segment_busy+0x38>)
 8018a92:	4809      	ldr	r0, [pc, #36]	@ (8018ab8 <tcp_output_segment_busy+0x3c>)
 8018a94:	f004 f980 	bl	801cd98 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	7b9b      	ldrb	r3, [r3, #14]
 8018a9e:	2b01      	cmp	r3, #1
 8018aa0:	d001      	beq.n	8018aa6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	e000      	b.n	8018aa8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018aa6:	2300      	movs	r3, #0
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3708      	adds	r7, #8
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	08020654 	.word	0x08020654
 8018ab4:	08020bf0 	.word	0x08020bf0
 8018ab8:	080206a8 	.word	0x080206a8

08018abc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018abc:	b5b0      	push	{r4, r5, r7, lr}
 8018abe:	b08c      	sub	sp, #48	@ 0x30
 8018ac0:	af04      	add	r7, sp, #16
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d106      	bne.n	8018adc <tcp_output_segment+0x20>
 8018ace:	4b64      	ldr	r3, [pc, #400]	@ (8018c60 <tcp_output_segment+0x1a4>)
 8018ad0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8018ad4:	4963      	ldr	r1, [pc, #396]	@ (8018c64 <tcp_output_segment+0x1a8>)
 8018ad6:	4864      	ldr	r0, [pc, #400]	@ (8018c68 <tcp_output_segment+0x1ac>)
 8018ad8:	f004 f95e 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d106      	bne.n	8018af0 <tcp_output_segment+0x34>
 8018ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8018c60 <tcp_output_segment+0x1a4>)
 8018ae4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8018ae8:	4960      	ldr	r1, [pc, #384]	@ (8018c6c <tcp_output_segment+0x1b0>)
 8018aea:	485f      	ldr	r0, [pc, #380]	@ (8018c68 <tcp_output_segment+0x1ac>)
 8018aec:	f004 f954 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d106      	bne.n	8018b04 <tcp_output_segment+0x48>
 8018af6:	4b5a      	ldr	r3, [pc, #360]	@ (8018c60 <tcp_output_segment+0x1a4>)
 8018af8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8018afc:	495c      	ldr	r1, [pc, #368]	@ (8018c70 <tcp_output_segment+0x1b4>)
 8018afe:	485a      	ldr	r0, [pc, #360]	@ (8018c68 <tcp_output_segment+0x1ac>)
 8018b00:	f004 f94a 	bl	801cd98 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018b04:	68f8      	ldr	r0, [r7, #12]
 8018b06:	f7ff ffb9 	bl	8018a7c <tcp_output_segment_busy>
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d001      	beq.n	8018b14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018b10:	2300      	movs	r3, #0
 8018b12:	e0a1      	b.n	8018c58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018b14:	68bb      	ldr	r3, [r7, #8]
 8018b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	68dc      	ldr	r4, [r3, #12]
 8018b1c:	4610      	mov	r0, r2
 8018b1e:	f7f8 fdc0 	bl	80116a2 <lwip_htonl>
 8018b22:	4603      	mov	r3, r0
 8018b24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018b26:	68bb      	ldr	r3, [r7, #8]
 8018b28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	68dc      	ldr	r4, [r3, #12]
 8018b2e:	4610      	mov	r0, r2
 8018b30:	f7f8 fda2 	bl	8011678 <lwip_htons>
 8018b34:	4603      	mov	r3, r0
 8018b36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b3c:	68ba      	ldr	r2, [r7, #8]
 8018b3e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8018b40:	441a      	add	r2, r3
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	3314      	adds	r3, #20
 8018b4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	7a9b      	ldrb	r3, [r3, #10]
 8018b52:	f003 0301 	and.w	r3, r3, #1
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d015      	beq.n	8018b86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018b5a:	68bb      	ldr	r3, [r7, #8]
 8018b5c:	3304      	adds	r3, #4
 8018b5e:	461a      	mov	r2, r3
 8018b60:	6879      	ldr	r1, [r7, #4]
 8018b62:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8018b66:	f7fc fa39 	bl	8014fdc <tcp_eff_send_mss_netif>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018b6e:	8b7b      	ldrh	r3, [r7, #26]
 8018b70:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7f8 fd94 	bl	80116a2 <lwip_htonl>
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	69fb      	ldr	r3, [r7, #28]
 8018b7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018b80:	69fb      	ldr	r3, [r7, #28]
 8018b82:	3304      	adds	r3, #4
 8018b84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018b86:	68bb      	ldr	r3, [r7, #8]
 8018b88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	da02      	bge.n	8018b96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	2200      	movs	r2, #0
 8018b94:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d10c      	bne.n	8018bb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018b9e:	4b35      	ldr	r3, [pc, #212]	@ (8018c74 <tcp_output_segment+0x1b8>)
 8018ba0:	681a      	ldr	r2, [r3, #0]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	68db      	ldr	r3, [r3, #12]
 8018baa:	685b      	ldr	r3, [r3, #4]
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7f8 fd78 	bl	80116a2 <lwip_htonl>
 8018bb2:	4602      	mov	r2, r0
 8018bb4:	68bb      	ldr	r3, [r7, #8]
 8018bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	68da      	ldr	r2, [r3, #12]
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	1ad3      	subs	r3, r2, r3
 8018bc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	685b      	ldr	r3, [r3, #4]
 8018bca:	8959      	ldrh	r1, [r3, #10]
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	685b      	ldr	r3, [r3, #4]
 8018bd0:	8b3a      	ldrh	r2, [r7, #24]
 8018bd2:	1a8a      	subs	r2, r1, r2
 8018bd4:	b292      	uxth	r2, r2
 8018bd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	8919      	ldrh	r1, [r3, #8]
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	8b3a      	ldrh	r2, [r7, #24]
 8018be4:	1a8a      	subs	r2, r1, r2
 8018be6:	b292      	uxth	r2, r2
 8018be8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	68fa      	ldr	r2, [r7, #12]
 8018bf0:	68d2      	ldr	r2, [r2, #12]
 8018bf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	68db      	ldr	r3, [r3, #12]
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	741a      	strb	r2, [r3, #16]
 8018bfc:	2200      	movs	r2, #0
 8018bfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	68da      	ldr	r2, [r3, #12]
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	7a9b      	ldrb	r3, [r3, #10]
 8018c08:	f003 0301 	and.w	r3, r3, #1
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d001      	beq.n	8018c14 <tcp_output_segment+0x158>
 8018c10:	2318      	movs	r3, #24
 8018c12:	e000      	b.n	8018c16 <tcp_output_segment+0x15a>
 8018c14:	2314      	movs	r3, #20
 8018c16:	4413      	add	r3, r2
 8018c18:	69fa      	ldr	r2, [r7, #28]
 8018c1a:	429a      	cmp	r2, r3
 8018c1c:	d006      	beq.n	8018c2c <tcp_output_segment+0x170>
 8018c1e:	4b10      	ldr	r3, [pc, #64]	@ (8018c60 <tcp_output_segment+0x1a4>)
 8018c20:	f240 621c 	movw	r2, #1564	@ 0x61c
 8018c24:	4914      	ldr	r1, [pc, #80]	@ (8018c78 <tcp_output_segment+0x1bc>)
 8018c26:	4810      	ldr	r0, [pc, #64]	@ (8018c68 <tcp_output_segment+0x1ac>)
 8018c28:	f004 f8b6 	bl	801cd98 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	6858      	ldr	r0, [r3, #4]
 8018c30:	68b9      	ldr	r1, [r7, #8]
 8018c32:	68bb      	ldr	r3, [r7, #8]
 8018c34:	1d1c      	adds	r4, r3, #4
 8018c36:	68bb      	ldr	r3, [r7, #8]
 8018c38:	7add      	ldrb	r5, [r3, #11]
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	7a9b      	ldrb	r3, [r3, #10]
 8018c3e:	687a      	ldr	r2, [r7, #4]
 8018c40:	9202      	str	r2, [sp, #8]
 8018c42:	2206      	movs	r2, #6
 8018c44:	9201      	str	r2, [sp, #4]
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	462b      	mov	r3, r5
 8018c4a:	4622      	mov	r2, r4
 8018c4c:	f002 fd94 	bl	801b778 <ip4_output_if>
 8018c50:	4603      	mov	r3, r0
 8018c52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3720      	adds	r7, #32
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8018c60:	08020654 	.word	0x08020654
 8018c64:	08020c18 	.word	0x08020c18
 8018c68:	080206a8 	.word	0x080206a8
 8018c6c:	08020c38 	.word	0x08020c38
 8018c70:	08020c58 	.word	0x08020c58
 8018c74:	2000f270 	.word	0x2000f270
 8018c78:	08020c7c 	.word	0x08020c7c

08018c7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018c7c:	b5b0      	push	{r4, r5, r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <tcp_rexmit_rto_prepare+0x1c>
 8018c8a:	4b31      	ldr	r3, [pc, #196]	@ (8018d50 <tcp_rexmit_rto_prepare+0xd4>)
 8018c8c:	f240 6263 	movw	r2, #1635	@ 0x663
 8018c90:	4930      	ldr	r1, [pc, #192]	@ (8018d54 <tcp_rexmit_rto_prepare+0xd8>)
 8018c92:	4831      	ldr	r0, [pc, #196]	@ (8018d58 <tcp_rexmit_rto_prepare+0xdc>)
 8018c94:	f004 f880 	bl	801cd98 <iprintf>

  if (pcb->unacked == NULL) {
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018ca0:	f06f 0305 	mvn.w	r3, #5
 8018ca4:	e050      	b.n	8018d48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018caa:	60fb      	str	r3, [r7, #12]
 8018cac:	e00b      	b.n	8018cc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018cae:	68f8      	ldr	r0, [r7, #12]
 8018cb0:	f7ff fee4 	bl	8018a7c <tcp_output_segment_busy>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d002      	beq.n	8018cc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018cba:	f06f 0305 	mvn.w	r3, #5
 8018cbe:	e043      	b.n	8018d48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	60fb      	str	r3, [r7, #12]
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d1ef      	bne.n	8018cae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018cce:	68f8      	ldr	r0, [r7, #12]
 8018cd0:	f7ff fed4 	bl	8018a7c <tcp_output_segment_busy>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d002      	beq.n	8018ce0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018cda:	f06f 0305 	mvn.w	r3, #5
 8018cde:	e033      	b.n	8018d48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	8b5b      	ldrh	r3, [r3, #26]
 8018cfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8018cfe:	b29a      	uxth	r2, r3
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	68db      	ldr	r3, [r3, #12]
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7f8 fcc9 	bl	80116a2 <lwip_htonl>
 8018d10:	4604      	mov	r4, r0
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	891b      	ldrh	r3, [r3, #8]
 8018d16:	461d      	mov	r5, r3
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	68db      	ldr	r3, [r3, #12]
 8018d1c:	899b      	ldrh	r3, [r3, #12]
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	4618      	mov	r0, r3
 8018d22:	f7f8 fca9 	bl	8011678 <lwip_htons>
 8018d26:	4603      	mov	r3, r0
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	f003 0303 	and.w	r3, r3, #3
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d001      	beq.n	8018d36 <tcp_rexmit_rto_prepare+0xba>
 8018d32:	2301      	movs	r3, #1
 8018d34:	e000      	b.n	8018d38 <tcp_rexmit_rto_prepare+0xbc>
 8018d36:	2300      	movs	r3, #0
 8018d38:	442b      	add	r3, r5
 8018d3a:	18e2      	adds	r2, r4, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2200      	movs	r2, #0
 8018d44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8018d46:	2300      	movs	r3, #0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3710      	adds	r7, #16
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8018d50:	08020654 	.word	0x08020654
 8018d54:	08020c90 	.word	0x08020c90
 8018d58:	080206a8 	.word	0x080206a8

08018d5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d106      	bne.n	8018d78 <tcp_rexmit_rto_commit+0x1c>
 8018d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8018da0 <tcp_rexmit_rto_commit+0x44>)
 8018d6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8018d70:	490c      	ldr	r1, [pc, #48]	@ (8018da4 <tcp_rexmit_rto_commit+0x48>)
 8018d72:	480d      	ldr	r0, [pc, #52]	@ (8018da8 <tcp_rexmit_rto_commit+0x4c>)
 8018d74:	f004 f810 	bl	801cd98 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018d7e:	2bff      	cmp	r3, #255	@ 0xff
 8018d80:	d007      	beq.n	8018d92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018d88:	3301      	adds	r3, #1
 8018d8a:	b2da      	uxtb	r2, r3
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018d92:	6878      	ldr	r0, [r7, #4]
 8018d94:	f7ff fc7e 	bl	8018694 <tcp_output>
}
 8018d98:	bf00      	nop
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	08020654 	.word	0x08020654
 8018da4:	08020cb4 	.word	0x08020cb4
 8018da8:	080206a8 	.word	0x080206a8

08018dac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d106      	bne.n	8018dc8 <tcp_rexmit_rto+0x1c>
 8018dba:	4b0a      	ldr	r3, [pc, #40]	@ (8018de4 <tcp_rexmit_rto+0x38>)
 8018dbc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8018dc0:	4909      	ldr	r1, [pc, #36]	@ (8018de8 <tcp_rexmit_rto+0x3c>)
 8018dc2:	480a      	ldr	r0, [pc, #40]	@ (8018dec <tcp_rexmit_rto+0x40>)
 8018dc4:	f003 ffe8 	bl	801cd98 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7ff ff57 	bl	8018c7c <tcp_rexmit_rto_prepare>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d102      	bne.n	8018dda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018dd4:	6878      	ldr	r0, [r7, #4]
 8018dd6:	f7ff ffc1 	bl	8018d5c <tcp_rexmit_rto_commit>
  }
}
 8018dda:	bf00      	nop
 8018ddc:	3708      	adds	r7, #8
 8018dde:	46bd      	mov	sp, r7
 8018de0:	bd80      	pop	{r7, pc}
 8018de2:	bf00      	nop
 8018de4:	08020654 	.word	0x08020654
 8018de8:	08020cd8 	.word	0x08020cd8
 8018dec:	080206a8 	.word	0x080206a8

08018df0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018df0:	b590      	push	{r4, r7, lr}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d106      	bne.n	8018e0c <tcp_rexmit+0x1c>
 8018dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8018ebc <tcp_rexmit+0xcc>)
 8018e00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8018e04:	492e      	ldr	r1, [pc, #184]	@ (8018ec0 <tcp_rexmit+0xd0>)
 8018e06:	482f      	ldr	r0, [pc, #188]	@ (8018ec4 <tcp_rexmit+0xd4>)
 8018e08:	f003 ffc6 	bl	801cd98 <iprintf>

  if (pcb->unacked == NULL) {
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d102      	bne.n	8018e1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018e14:	f06f 0305 	mvn.w	r3, #5
 8018e18:	e04c      	b.n	8018eb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018e1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018e20:	68b8      	ldr	r0, [r7, #8]
 8018e22:	f7ff fe2b 	bl	8018a7c <tcp_output_segment_busy>
 8018e26:	4603      	mov	r3, r0
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d002      	beq.n	8018e32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018e2c:	f06f 0305 	mvn.w	r3, #5
 8018e30:	e040      	b.n	8018eb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018e32:	68bb      	ldr	r3, [r7, #8]
 8018e34:	681a      	ldr	r2, [r3, #0]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	336c      	adds	r3, #108	@ 0x6c
 8018e3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018e40:	e002      	b.n	8018e48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d011      	beq.n	8018e74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	68db      	ldr	r3, [r3, #12]
 8018e56:	685b      	ldr	r3, [r3, #4]
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f7f8 fc22 	bl	80116a2 <lwip_htonl>
 8018e5e:	4604      	mov	r4, r0
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	68db      	ldr	r3, [r3, #12]
 8018e64:	685b      	ldr	r3, [r3, #4]
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7f8 fc1b 	bl	80116a2 <lwip_htonl>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	dbe6      	blt.n	8018e42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	68bb      	ldr	r3, [r7, #8]
 8018e7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	68ba      	ldr	r2, [r7, #8]
 8018e80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d103      	bne.n	8018e92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018e98:	2bff      	cmp	r3, #255	@ 0xff
 8018e9a:	d007      	beq.n	8018eac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	b2da      	uxtb	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	2200      	movs	r2, #0
 8018eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018eb2:	2300      	movs	r3, #0
}
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	3714      	adds	r7, #20
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	bd90      	pop	{r4, r7, pc}
 8018ebc:	08020654 	.word	0x08020654
 8018ec0:	08020cf4 	.word	0x08020cf4
 8018ec4:	080206a8 	.word	0x080206a8

08018ec8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d106      	bne.n	8018ee4 <tcp_rexmit_fast+0x1c>
 8018ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8018f80 <tcp_rexmit_fast+0xb8>)
 8018ed8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8018edc:	4929      	ldr	r1, [pc, #164]	@ (8018f84 <tcp_rexmit_fast+0xbc>)
 8018ede:	482a      	ldr	r0, [pc, #168]	@ (8018f88 <tcp_rexmit_fast+0xc0>)
 8018ee0:	f003 ff5a 	bl	801cd98 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d045      	beq.n	8018f78 <tcp_rexmit_fast+0xb0>
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	8b5b      	ldrh	r3, [r3, #26]
 8018ef0:	f003 0304 	and.w	r3, r3, #4
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d13f      	bne.n	8018f78 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f7ff ff79 	bl	8018df0 <tcp_rexmit>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d139      	bne.n	8018f78 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018f10:	4293      	cmp	r3, r2
 8018f12:	bf28      	it	cs
 8018f14:	4613      	movcs	r3, r2
 8018f16:	b29b      	uxth	r3, r3
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	da00      	bge.n	8018f1e <tcp_rexmit_fast+0x56>
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	105b      	asrs	r3, r3, #1
 8018f20:	b29a      	uxth	r2, r3
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018f2e:	461a      	mov	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	429a      	cmp	r2, r3
 8018f38:	d206      	bcs.n	8018f48 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f3e:	005b      	lsls	r3, r3, #1
 8018f40:	b29a      	uxth	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f52:	4619      	mov	r1, r3
 8018f54:	0049      	lsls	r1, r1, #1
 8018f56:	440b      	add	r3, r1
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	4413      	add	r3, r2
 8018f5c:	b29a      	uxth	r2, r3
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	8b5b      	ldrh	r3, [r3, #26]
 8018f68:	f043 0304 	orr.w	r3, r3, #4
 8018f6c:	b29a      	uxth	r2, r3
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	2200      	movs	r2, #0
 8018f76:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8018f78:	bf00      	nop
 8018f7a:	3708      	adds	r7, #8
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	08020654 	.word	0x08020654
 8018f84:	08020d0c 	.word	0x08020d0c
 8018f88:	080206a8 	.word	0x080206a8

08018f8c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	607b      	str	r3, [r7, #4]
 8018f96:	460b      	mov	r3, r1
 8018f98:	817b      	strh	r3, [r7, #10]
 8018f9a:	4613      	mov	r3, r2
 8018f9c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018f9e:	897a      	ldrh	r2, [r7, #10]
 8018fa0:	893b      	ldrh	r3, [r7, #8]
 8018fa2:	4413      	add	r3, r2
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	3314      	adds	r3, #20
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018fae:	4619      	mov	r1, r3
 8018fb0:	2022      	movs	r0, #34	@ 0x22
 8018fb2:	f7f9 fca5 	bl	8012900 <pbuf_alloc>
 8018fb6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d04d      	beq.n	801905a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018fbe:	897b      	ldrh	r3, [r7, #10]
 8018fc0:	3313      	adds	r3, #19
 8018fc2:	697a      	ldr	r2, [r7, #20]
 8018fc4:	8952      	ldrh	r2, [r2, #10]
 8018fc6:	4293      	cmp	r3, r2
 8018fc8:	db06      	blt.n	8018fd8 <tcp_output_alloc_header_common+0x4c>
 8018fca:	4b26      	ldr	r3, [pc, #152]	@ (8019064 <tcp_output_alloc_header_common+0xd8>)
 8018fcc:	f240 7223 	movw	r2, #1827	@ 0x723
 8018fd0:	4925      	ldr	r1, [pc, #148]	@ (8019068 <tcp_output_alloc_header_common+0xdc>)
 8018fd2:	4826      	ldr	r0, [pc, #152]	@ (801906c <tcp_output_alloc_header_common+0xe0>)
 8018fd4:	f003 fee0 	bl	801cd98 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	685b      	ldr	r3, [r3, #4]
 8018fdc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018fde:	8c3b      	ldrh	r3, [r7, #32]
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7f8 fb49 	bl	8011678 <lwip_htons>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	461a      	mov	r2, r3
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018fee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7f8 fb41 	bl	8011678 <lwip_htons>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	461a      	mov	r2, r3
 8018ffa:	693b      	ldr	r3, [r7, #16]
 8018ffc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	687a      	ldr	r2, [r7, #4]
 8019002:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019004:	68f8      	ldr	r0, [r7, #12]
 8019006:	f7f8 fb4c 	bl	80116a2 <lwip_htonl>
 801900a:	4602      	mov	r2, r0
 801900c:	693b      	ldr	r3, [r7, #16]
 801900e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019010:	897b      	ldrh	r3, [r7, #10]
 8019012:	089b      	lsrs	r3, r3, #2
 8019014:	b29b      	uxth	r3, r3
 8019016:	3305      	adds	r3, #5
 8019018:	b29b      	uxth	r3, r3
 801901a:	031b      	lsls	r3, r3, #12
 801901c:	b29a      	uxth	r2, r3
 801901e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019022:	b29b      	uxth	r3, r3
 8019024:	4313      	orrs	r3, r2
 8019026:	b29b      	uxth	r3, r3
 8019028:	4618      	mov	r0, r3
 801902a:	f7f8 fb25 	bl	8011678 <lwip_htons>
 801902e:	4603      	mov	r3, r0
 8019030:	461a      	mov	r2, r3
 8019032:	693b      	ldr	r3, [r7, #16]
 8019034:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019036:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019038:	4618      	mov	r0, r3
 801903a:	f7f8 fb1d 	bl	8011678 <lwip_htons>
 801903e:	4603      	mov	r3, r0
 8019040:	461a      	mov	r2, r3
 8019042:	693b      	ldr	r3, [r7, #16]
 8019044:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	2200      	movs	r2, #0
 801904a:	741a      	strb	r2, [r3, #16]
 801904c:	2200      	movs	r2, #0
 801904e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	2200      	movs	r2, #0
 8019054:	749a      	strb	r2, [r3, #18]
 8019056:	2200      	movs	r2, #0
 8019058:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801905a:	697b      	ldr	r3, [r7, #20]
}
 801905c:	4618      	mov	r0, r3
 801905e:	3718      	adds	r7, #24
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}
 8019064:	08020654 	.word	0x08020654
 8019068:	08020d2c 	.word	0x08020d2c
 801906c:	080206a8 	.word	0x080206a8

08019070 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019070:	b5b0      	push	{r4, r5, r7, lr}
 8019072:	b08a      	sub	sp, #40	@ 0x28
 8019074:	af04      	add	r7, sp, #16
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	607b      	str	r3, [r7, #4]
 801907a:	460b      	mov	r3, r1
 801907c:	817b      	strh	r3, [r7, #10]
 801907e:	4613      	mov	r3, r2
 8019080:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	2b00      	cmp	r3, #0
 8019086:	d106      	bne.n	8019096 <tcp_output_alloc_header+0x26>
 8019088:	4b15      	ldr	r3, [pc, #84]	@ (80190e0 <tcp_output_alloc_header+0x70>)
 801908a:	f240 7242 	movw	r2, #1858	@ 0x742
 801908e:	4915      	ldr	r1, [pc, #84]	@ (80190e4 <tcp_output_alloc_header+0x74>)
 8019090:	4815      	ldr	r0, [pc, #84]	@ (80190e8 <tcp_output_alloc_header+0x78>)
 8019092:	f003 fe81 	bl	801cd98 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	8adb      	ldrh	r3, [r3, #22]
 801909e:	68fa      	ldr	r2, [r7, #12]
 80190a0:	8b12      	ldrh	r2, [r2, #24]
 80190a2:	68f9      	ldr	r1, [r7, #12]
 80190a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80190a6:	893d      	ldrh	r5, [r7, #8]
 80190a8:	897c      	ldrh	r4, [r7, #10]
 80190aa:	9103      	str	r1, [sp, #12]
 80190ac:	2110      	movs	r1, #16
 80190ae:	9102      	str	r1, [sp, #8]
 80190b0:	9201      	str	r2, [sp, #4]
 80190b2:	9300      	str	r3, [sp, #0]
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	462a      	mov	r2, r5
 80190b8:	4621      	mov	r1, r4
 80190ba:	f7ff ff67 	bl	8018f8c <tcp_output_alloc_header_common>
 80190be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d006      	beq.n	80190d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190ca:	68fa      	ldr	r2, [r7, #12]
 80190cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80190ce:	441a      	add	r2, r3
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80190d4:	697b      	ldr	r3, [r7, #20]
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3718      	adds	r7, #24
 80190da:	46bd      	mov	sp, r7
 80190dc:	bdb0      	pop	{r4, r5, r7, pc}
 80190de:	bf00      	nop
 80190e0:	08020654 	.word	0x08020654
 80190e4:	08020d5c 	.word	0x08020d5c
 80190e8:	080206a8 	.word	0x080206a8

080190ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b088      	sub	sp, #32
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	60f8      	str	r0, [r7, #12]
 80190f4:	60b9      	str	r1, [r7, #8]
 80190f6:	4611      	mov	r1, r2
 80190f8:	461a      	mov	r2, r3
 80190fa:	460b      	mov	r3, r1
 80190fc:	71fb      	strb	r3, [r7, #7]
 80190fe:	4613      	mov	r3, r2
 8019100:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019102:	2300      	movs	r3, #0
 8019104:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019106:	68bb      	ldr	r3, [r7, #8]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d106      	bne.n	801911a <tcp_output_fill_options+0x2e>
 801910c:	4b12      	ldr	r3, [pc, #72]	@ (8019158 <tcp_output_fill_options+0x6c>)
 801910e:	f240 7256 	movw	r2, #1878	@ 0x756
 8019112:	4912      	ldr	r1, [pc, #72]	@ (801915c <tcp_output_fill_options+0x70>)
 8019114:	4812      	ldr	r0, [pc, #72]	@ (8019160 <tcp_output_fill_options+0x74>)
 8019116:	f003 fe3f 	bl	801cd98 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801911a:	68bb      	ldr	r3, [r7, #8]
 801911c:	685b      	ldr	r3, [r3, #4]
 801911e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019120:	69bb      	ldr	r3, [r7, #24]
 8019122:	3314      	adds	r3, #20
 8019124:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019126:	8bfb      	ldrh	r3, [r7, #30]
 8019128:	009b      	lsls	r3, r3, #2
 801912a:	461a      	mov	r2, r3
 801912c:	79fb      	ldrb	r3, [r7, #7]
 801912e:	009b      	lsls	r3, r3, #2
 8019130:	f003 0304 	and.w	r3, r3, #4
 8019134:	4413      	add	r3, r2
 8019136:	3314      	adds	r3, #20
 8019138:	69ba      	ldr	r2, [r7, #24]
 801913a:	4413      	add	r3, r2
 801913c:	697a      	ldr	r2, [r7, #20]
 801913e:	429a      	cmp	r2, r3
 8019140:	d006      	beq.n	8019150 <tcp_output_fill_options+0x64>
 8019142:	4b05      	ldr	r3, [pc, #20]	@ (8019158 <tcp_output_fill_options+0x6c>)
 8019144:	f240 7275 	movw	r2, #1909	@ 0x775
 8019148:	4906      	ldr	r1, [pc, #24]	@ (8019164 <tcp_output_fill_options+0x78>)
 801914a:	4805      	ldr	r0, [pc, #20]	@ (8019160 <tcp_output_fill_options+0x74>)
 801914c:	f003 fe24 	bl	801cd98 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019150:	bf00      	nop
 8019152:	3720      	adds	r7, #32
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	08020654 	.word	0x08020654
 801915c:	08020d84 	.word	0x08020d84
 8019160:	080206a8 	.word	0x080206a8
 8019164:	08020c7c 	.word	0x08020c7c

08019168 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b08a      	sub	sp, #40	@ 0x28
 801916c:	af04      	add	r7, sp, #16
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	60b9      	str	r1, [r7, #8]
 8019172:	607a      	str	r2, [r7, #4]
 8019174:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019176:	68bb      	ldr	r3, [r7, #8]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d106      	bne.n	801918a <tcp_output_control_segment+0x22>
 801917c:	4b1c      	ldr	r3, [pc, #112]	@ (80191f0 <tcp_output_control_segment+0x88>)
 801917e:	f240 7287 	movw	r2, #1927	@ 0x787
 8019182:	491c      	ldr	r1, [pc, #112]	@ (80191f4 <tcp_output_control_segment+0x8c>)
 8019184:	481c      	ldr	r0, [pc, #112]	@ (80191f8 <tcp_output_control_segment+0x90>)
 8019186:	f003 fe07 	bl	801cd98 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801918a:	683a      	ldr	r2, [r7, #0]
 801918c:	6879      	ldr	r1, [r7, #4]
 801918e:	68f8      	ldr	r0, [r7, #12]
 8019190:	f7fe faea 	bl	8017768 <tcp_route>
 8019194:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019196:	693b      	ldr	r3, [r7, #16]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d102      	bne.n	80191a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801919c:	23fc      	movs	r3, #252	@ 0xfc
 801919e:	75fb      	strb	r3, [r7, #23]
 80191a0:	e01c      	b.n	80191dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d006      	beq.n	80191b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80191a8:	68fb      	ldr	r3, [r7, #12]
 80191aa:	7adb      	ldrb	r3, [r3, #11]
 80191ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	7a9b      	ldrb	r3, [r3, #10]
 80191b2:	757b      	strb	r3, [r7, #21]
 80191b4:	e003      	b.n	80191be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80191b6:	23ff      	movs	r3, #255	@ 0xff
 80191b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80191ba:	2300      	movs	r3, #0
 80191bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80191be:	7dba      	ldrb	r2, [r7, #22]
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	9302      	str	r3, [sp, #8]
 80191c4:	2306      	movs	r3, #6
 80191c6:	9301      	str	r3, [sp, #4]
 80191c8:	7d7b      	ldrb	r3, [r7, #21]
 80191ca:	9300      	str	r3, [sp, #0]
 80191cc:	4613      	mov	r3, r2
 80191ce:	683a      	ldr	r2, [r7, #0]
 80191d0:	6879      	ldr	r1, [r7, #4]
 80191d2:	68b8      	ldr	r0, [r7, #8]
 80191d4:	f002 fad0 	bl	801b778 <ip4_output_if>
 80191d8:	4603      	mov	r3, r0
 80191da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80191dc:	68b8      	ldr	r0, [r7, #8]
 80191de:	f7f9 fe73 	bl	8012ec8 <pbuf_free>
  return err;
 80191e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80191e6:	4618      	mov	r0, r3
 80191e8:	3718      	adds	r7, #24
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	bf00      	nop
 80191f0:	08020654 	.word	0x08020654
 80191f4:	08020dac 	.word	0x08020dac
 80191f8:	080206a8 	.word	0x080206a8

080191fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80191fc:	b590      	push	{r4, r7, lr}
 80191fe:	b08b      	sub	sp, #44	@ 0x2c
 8019200:	af04      	add	r7, sp, #16
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	60b9      	str	r1, [r7, #8]
 8019206:	607a      	str	r2, [r7, #4]
 8019208:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	2b00      	cmp	r3, #0
 801920e:	d106      	bne.n	801921e <tcp_rst+0x22>
 8019210:	4b1f      	ldr	r3, [pc, #124]	@ (8019290 <tcp_rst+0x94>)
 8019212:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019216:	491f      	ldr	r1, [pc, #124]	@ (8019294 <tcp_rst+0x98>)
 8019218:	481f      	ldr	r0, [pc, #124]	@ (8019298 <tcp_rst+0x9c>)
 801921a:	f003 fdbd 	bl	801cd98 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019220:	2b00      	cmp	r3, #0
 8019222:	d106      	bne.n	8019232 <tcp_rst+0x36>
 8019224:	4b1a      	ldr	r3, [pc, #104]	@ (8019290 <tcp_rst+0x94>)
 8019226:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801922a:	491c      	ldr	r1, [pc, #112]	@ (801929c <tcp_rst+0xa0>)
 801922c:	481a      	ldr	r0, [pc, #104]	@ (8019298 <tcp_rst+0x9c>)
 801922e:	f003 fdb3 	bl	801cd98 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019232:	2300      	movs	r3, #0
 8019234:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019236:	f246 0308 	movw	r3, #24584	@ 0x6008
 801923a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801923c:	7dfb      	ldrb	r3, [r7, #23]
 801923e:	b29c      	uxth	r4, r3
 8019240:	68b8      	ldr	r0, [r7, #8]
 8019242:	f7f8 fa2e 	bl	80116a2 <lwip_htonl>
 8019246:	4602      	mov	r2, r0
 8019248:	8abb      	ldrh	r3, [r7, #20]
 801924a:	9303      	str	r3, [sp, #12]
 801924c:	2314      	movs	r3, #20
 801924e:	9302      	str	r3, [sp, #8]
 8019250:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019252:	9301      	str	r3, [sp, #4]
 8019254:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019256:	9300      	str	r3, [sp, #0]
 8019258:	4613      	mov	r3, r2
 801925a:	2200      	movs	r2, #0
 801925c:	4621      	mov	r1, r4
 801925e:	6878      	ldr	r0, [r7, #4]
 8019260:	f7ff fe94 	bl	8018f8c <tcp_output_alloc_header_common>
 8019264:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d00c      	beq.n	8019286 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801926c:	7dfb      	ldrb	r3, [r7, #23]
 801926e:	2200      	movs	r2, #0
 8019270:	6939      	ldr	r1, [r7, #16]
 8019272:	68f8      	ldr	r0, [r7, #12]
 8019274:	f7ff ff3a 	bl	80190ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801927a:	683a      	ldr	r2, [r7, #0]
 801927c:	6939      	ldr	r1, [r7, #16]
 801927e:	68f8      	ldr	r0, [r7, #12]
 8019280:	f7ff ff72 	bl	8019168 <tcp_output_control_segment>
 8019284:	e000      	b.n	8019288 <tcp_rst+0x8c>
    return;
 8019286:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019288:	371c      	adds	r7, #28
 801928a:	46bd      	mov	sp, r7
 801928c:	bd90      	pop	{r4, r7, pc}
 801928e:	bf00      	nop
 8019290:	08020654 	.word	0x08020654
 8019294:	08020dd8 	.word	0x08020dd8
 8019298:	080206a8 	.word	0x080206a8
 801929c:	08020df4 	.word	0x08020df4

080192a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80192a0:	b590      	push	{r4, r7, lr}
 80192a2:	b087      	sub	sp, #28
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80192a8:	2300      	movs	r3, #0
 80192aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80192ac:	2300      	movs	r3, #0
 80192ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d106      	bne.n	80192c4 <tcp_send_empty_ack+0x24>
 80192b6:	4b28      	ldr	r3, [pc, #160]	@ (8019358 <tcp_send_empty_ack+0xb8>)
 80192b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80192bc:	4927      	ldr	r1, [pc, #156]	@ (801935c <tcp_send_empty_ack+0xbc>)
 80192be:	4828      	ldr	r0, [pc, #160]	@ (8019360 <tcp_send_empty_ack+0xc0>)
 80192c0:	f003 fd6a 	bl	801cd98 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80192c4:	7dfb      	ldrb	r3, [r7, #23]
 80192c6:	009b      	lsls	r3, r3, #2
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	f003 0304 	and.w	r3, r3, #4
 80192ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80192d0:	7d7b      	ldrb	r3, [r7, #21]
 80192d2:	b29c      	uxth	r4, r3
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80192d8:	4618      	mov	r0, r3
 80192da:	f7f8 f9e2 	bl	80116a2 <lwip_htonl>
 80192de:	4603      	mov	r3, r0
 80192e0:	2200      	movs	r2, #0
 80192e2:	4621      	mov	r1, r4
 80192e4:	6878      	ldr	r0, [r7, #4]
 80192e6:	f7ff fec3 	bl	8019070 <tcp_output_alloc_header>
 80192ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80192ec:	693b      	ldr	r3, [r7, #16]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d109      	bne.n	8019306 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	8b5b      	ldrh	r3, [r3, #26]
 80192f6:	f043 0303 	orr.w	r3, r3, #3
 80192fa:	b29a      	uxth	r2, r3
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019300:	f06f 0301 	mvn.w	r3, #1
 8019304:	e023      	b.n	801934e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019306:	7dbb      	ldrb	r3, [r7, #22]
 8019308:	7dfa      	ldrb	r2, [r7, #23]
 801930a:	6939      	ldr	r1, [r7, #16]
 801930c:	6878      	ldr	r0, [r7, #4]
 801930e:	f7ff feed 	bl	80190ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019312:	687a      	ldr	r2, [r7, #4]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	3304      	adds	r3, #4
 8019318:	6939      	ldr	r1, [r7, #16]
 801931a:	6878      	ldr	r0, [r7, #4]
 801931c:	f7ff ff24 	bl	8019168 <tcp_output_control_segment>
 8019320:	4603      	mov	r3, r0
 8019322:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d007      	beq.n	801933c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	8b5b      	ldrh	r3, [r3, #26]
 8019330:	f043 0303 	orr.w	r3, r3, #3
 8019334:	b29a      	uxth	r2, r3
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	835a      	strh	r2, [r3, #26]
 801933a:	e006      	b.n	801934a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	8b5b      	ldrh	r3, [r3, #26]
 8019340:	f023 0303 	bic.w	r3, r3, #3
 8019344:	b29a      	uxth	r2, r3
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801934a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801934e:	4618      	mov	r0, r3
 8019350:	371c      	adds	r7, #28
 8019352:	46bd      	mov	sp, r7
 8019354:	bd90      	pop	{r4, r7, pc}
 8019356:	bf00      	nop
 8019358:	08020654 	.word	0x08020654
 801935c:	08020e10 	.word	0x08020e10
 8019360:	080206a8 	.word	0x080206a8

08019364 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019364:	b590      	push	{r4, r7, lr}
 8019366:	b087      	sub	sp, #28
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801936c:	2300      	movs	r3, #0
 801936e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d106      	bne.n	8019384 <tcp_keepalive+0x20>
 8019376:	4b18      	ldr	r3, [pc, #96]	@ (80193d8 <tcp_keepalive+0x74>)
 8019378:	f640 0224 	movw	r2, #2084	@ 0x824
 801937c:	4917      	ldr	r1, [pc, #92]	@ (80193dc <tcp_keepalive+0x78>)
 801937e:	4818      	ldr	r0, [pc, #96]	@ (80193e0 <tcp_keepalive+0x7c>)
 8019380:	f003 fd0a 	bl	801cd98 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019384:	7dfb      	ldrb	r3, [r7, #23]
 8019386:	b29c      	uxth	r4, r3
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801938c:	3b01      	subs	r3, #1
 801938e:	4618      	mov	r0, r3
 8019390:	f7f8 f987 	bl	80116a2 <lwip_htonl>
 8019394:	4603      	mov	r3, r0
 8019396:	2200      	movs	r2, #0
 8019398:	4621      	mov	r1, r4
 801939a:	6878      	ldr	r0, [r7, #4]
 801939c:	f7ff fe68 	bl	8019070 <tcp_output_alloc_header>
 80193a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80193a2:	693b      	ldr	r3, [r7, #16]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d102      	bne.n	80193ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80193a8:	f04f 33ff 	mov.w	r3, #4294967295
 80193ac:	e010      	b.n	80193d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80193ae:	7dfb      	ldrb	r3, [r7, #23]
 80193b0:	2200      	movs	r2, #0
 80193b2:	6939      	ldr	r1, [r7, #16]
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f7ff fe99 	bl	80190ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	3304      	adds	r3, #4
 80193c0:	6939      	ldr	r1, [r7, #16]
 80193c2:	6878      	ldr	r0, [r7, #4]
 80193c4:	f7ff fed0 	bl	8019168 <tcp_output_control_segment>
 80193c8:	4603      	mov	r3, r0
 80193ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80193cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80193d0:	4618      	mov	r0, r3
 80193d2:	371c      	adds	r7, #28
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd90      	pop	{r4, r7, pc}
 80193d8:	08020654 	.word	0x08020654
 80193dc:	08020e30 	.word	0x08020e30
 80193e0:	080206a8 	.word	0x080206a8

080193e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80193e4:	b590      	push	{r4, r7, lr}
 80193e6:	b08b      	sub	sp, #44	@ 0x2c
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80193ec:	2300      	movs	r3, #0
 80193ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	d106      	bne.n	8019406 <tcp_zero_window_probe+0x22>
 80193f8:	4b4c      	ldr	r3, [pc, #304]	@ (801952c <tcp_zero_window_probe+0x148>)
 80193fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80193fe:	494c      	ldr	r1, [pc, #304]	@ (8019530 <tcp_zero_window_probe+0x14c>)
 8019400:	484c      	ldr	r0, [pc, #304]	@ (8019534 <tcp_zero_window_probe+0x150>)
 8019402:	f003 fcc9 	bl	801cd98 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801940a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801940c:	6a3b      	ldr	r3, [r7, #32]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d101      	bne.n	8019416 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019412:	2300      	movs	r3, #0
 8019414:	e086      	b.n	8019524 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801941c:	2bff      	cmp	r3, #255	@ 0xff
 801941e:	d007      	beq.n	8019430 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019426:	3301      	adds	r3, #1
 8019428:	b2da      	uxtb	r2, r3
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019430:	6a3b      	ldr	r3, [r7, #32]
 8019432:	68db      	ldr	r3, [r3, #12]
 8019434:	899b      	ldrh	r3, [r3, #12]
 8019436:	b29b      	uxth	r3, r3
 8019438:	4618      	mov	r0, r3
 801943a:	f7f8 f91d 	bl	8011678 <lwip_htons>
 801943e:	4603      	mov	r3, r0
 8019440:	b2db      	uxtb	r3, r3
 8019442:	f003 0301 	and.w	r3, r3, #1
 8019446:	2b00      	cmp	r3, #0
 8019448:	d005      	beq.n	8019456 <tcp_zero_window_probe+0x72>
 801944a:	6a3b      	ldr	r3, [r7, #32]
 801944c:	891b      	ldrh	r3, [r3, #8]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d101      	bne.n	8019456 <tcp_zero_window_probe+0x72>
 8019452:	2301      	movs	r3, #1
 8019454:	e000      	b.n	8019458 <tcp_zero_window_probe+0x74>
 8019456:	2300      	movs	r3, #0
 8019458:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801945a:	7ffb      	ldrb	r3, [r7, #31]
 801945c:	2b00      	cmp	r3, #0
 801945e:	bf0c      	ite	eq
 8019460:	2301      	moveq	r3, #1
 8019462:	2300      	movne	r3, #0
 8019464:	b2db      	uxtb	r3, r3
 8019466:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801946c:	b299      	uxth	r1, r3
 801946e:	6a3b      	ldr	r3, [r7, #32]
 8019470:	68db      	ldr	r3, [r3, #12]
 8019472:	685b      	ldr	r3, [r3, #4]
 8019474:	8bba      	ldrh	r2, [r7, #28]
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f7ff fdfa 	bl	8019070 <tcp_output_alloc_header>
 801947c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d102      	bne.n	801948a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019484:	f04f 33ff 	mov.w	r3, #4294967295
 8019488:	e04c      	b.n	8019524 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019490:	7ffb      	ldrb	r3, [r7, #31]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d011      	beq.n	80194ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	899b      	ldrh	r3, [r3, #12]
 801949a:	b29b      	uxth	r3, r3
 801949c:	b21b      	sxth	r3, r3
 801949e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80194a2:	b21c      	sxth	r4, r3
 80194a4:	2011      	movs	r0, #17
 80194a6:	f7f8 f8e7 	bl	8011678 <lwip_htons>
 80194aa:	4603      	mov	r3, r0
 80194ac:	b21b      	sxth	r3, r3
 80194ae:	4323      	orrs	r3, r4
 80194b0:	b21b      	sxth	r3, r3
 80194b2:	b29a      	uxth	r2, r3
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	819a      	strh	r2, [r3, #12]
 80194b8:	e010      	b.n	80194dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80194ba:	69bb      	ldr	r3, [r7, #24]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	3314      	adds	r3, #20
 80194c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80194c2:	6a3b      	ldr	r3, [r7, #32]
 80194c4:	6858      	ldr	r0, [r3, #4]
 80194c6:	6a3b      	ldr	r3, [r7, #32]
 80194c8:	685b      	ldr	r3, [r3, #4]
 80194ca:	891a      	ldrh	r2, [r3, #8]
 80194cc:	6a3b      	ldr	r3, [r7, #32]
 80194ce:	891b      	ldrh	r3, [r3, #8]
 80194d0:	1ad3      	subs	r3, r2, r3
 80194d2:	b29b      	uxth	r3, r3
 80194d4:	2201      	movs	r2, #1
 80194d6:	6939      	ldr	r1, [r7, #16]
 80194d8:	f7f9 fefc 	bl	80132d4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80194dc:	6a3b      	ldr	r3, [r7, #32]
 80194de:	68db      	ldr	r3, [r3, #12]
 80194e0:	685b      	ldr	r3, [r3, #4]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7f8 f8dd 	bl	80116a2 <lwip_htonl>
 80194e8:	4603      	mov	r3, r0
 80194ea:	3301      	adds	r3, #1
 80194ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	1ad3      	subs	r3, r2, r3
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	da02      	bge.n	8019500 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	68fa      	ldr	r2, [r7, #12]
 80194fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019500:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019504:	2200      	movs	r2, #0
 8019506:	69b9      	ldr	r1, [r7, #24]
 8019508:	6878      	ldr	r0, [r7, #4]
 801950a:	f7ff fdef 	bl	80190ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801950e:	687a      	ldr	r2, [r7, #4]
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	3304      	adds	r3, #4
 8019514:	69b9      	ldr	r1, [r7, #24]
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f7ff fe26 	bl	8019168 <tcp_output_control_segment>
 801951c:	4603      	mov	r3, r0
 801951e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019520:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019524:	4618      	mov	r0, r3
 8019526:	372c      	adds	r7, #44	@ 0x2c
 8019528:	46bd      	mov	sp, r7
 801952a:	bd90      	pop	{r4, r7, pc}
 801952c:	08020654 	.word	0x08020654
 8019530:	08020e4c 	.word	0x08020e4c
 8019534:	080206a8 	.word	0x080206a8

08019538 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b082      	sub	sp, #8
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019540:	f7f9 ffb6 	bl	80134b0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019544:	4b0a      	ldr	r3, [pc, #40]	@ (8019570 <tcpip_tcp_timer+0x38>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	2b00      	cmp	r3, #0
 801954a:	d103      	bne.n	8019554 <tcpip_tcp_timer+0x1c>
 801954c:	4b09      	ldr	r3, [pc, #36]	@ (8019574 <tcpip_tcp_timer+0x3c>)
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d005      	beq.n	8019560 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019554:	2200      	movs	r2, #0
 8019556:	4908      	ldr	r1, [pc, #32]	@ (8019578 <tcpip_tcp_timer+0x40>)
 8019558:	20fa      	movs	r0, #250	@ 0xfa
 801955a:	f000 f8f3 	bl	8019744 <sys_timeout>
 801955e:	e003      	b.n	8019568 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019560:	4b06      	ldr	r3, [pc, #24]	@ (801957c <tcpip_tcp_timer+0x44>)
 8019562:	2200      	movs	r2, #0
 8019564:	601a      	str	r2, [r3, #0]
  }
}
 8019566:	bf00      	nop
 8019568:	bf00      	nop
 801956a:	3708      	adds	r7, #8
 801956c:	46bd      	mov	sp, r7
 801956e:	bd80      	pop	{r7, pc}
 8019570:	2000f27c 	.word	0x2000f27c
 8019574:	2000f280 	.word	0x2000f280
 8019578:	08019539 	.word	0x08019539
 801957c:	2000f2c8 	.word	0x2000f2c8

08019580 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019584:	4b0a      	ldr	r3, [pc, #40]	@ (80195b0 <tcp_timer_needed+0x30>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d10f      	bne.n	80195ac <tcp_timer_needed+0x2c>
 801958c:	4b09      	ldr	r3, [pc, #36]	@ (80195b4 <tcp_timer_needed+0x34>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d103      	bne.n	801959c <tcp_timer_needed+0x1c>
 8019594:	4b08      	ldr	r3, [pc, #32]	@ (80195b8 <tcp_timer_needed+0x38>)
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d007      	beq.n	80195ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801959c:	4b04      	ldr	r3, [pc, #16]	@ (80195b0 <tcp_timer_needed+0x30>)
 801959e:	2201      	movs	r2, #1
 80195a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80195a2:	2200      	movs	r2, #0
 80195a4:	4905      	ldr	r1, [pc, #20]	@ (80195bc <tcp_timer_needed+0x3c>)
 80195a6:	20fa      	movs	r0, #250	@ 0xfa
 80195a8:	f000 f8cc 	bl	8019744 <sys_timeout>
  }
}
 80195ac:	bf00      	nop
 80195ae:	bd80      	pop	{r7, pc}
 80195b0:	2000f2c8 	.word	0x2000f2c8
 80195b4:	2000f27c 	.word	0x2000f27c
 80195b8:	2000f280 	.word	0x2000f280
 80195bc:	08019539 	.word	0x08019539

080195c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b086      	sub	sp, #24
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	60f8      	str	r0, [r7, #12]
 80195c8:	60b9      	str	r1, [r7, #8]
 80195ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80195cc:	200a      	movs	r0, #10
 80195ce:	f7f8 fd61 	bl	8012094 <memp_malloc>
 80195d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d109      	bne.n	80195ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80195da:	693b      	ldr	r3, [r7, #16]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d151      	bne.n	8019684 <sys_timeout_abs+0xc4>
 80195e0:	4b2a      	ldr	r3, [pc, #168]	@ (801968c <sys_timeout_abs+0xcc>)
 80195e2:	22be      	movs	r2, #190	@ 0xbe
 80195e4:	492a      	ldr	r1, [pc, #168]	@ (8019690 <sys_timeout_abs+0xd0>)
 80195e6:	482b      	ldr	r0, [pc, #172]	@ (8019694 <sys_timeout_abs+0xd4>)
 80195e8:	f003 fbd6 	bl	801cd98 <iprintf>
    return;
 80195ec:	e04a      	b.n	8019684 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	2200      	movs	r2, #0
 80195f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	68ba      	ldr	r2, [r7, #8]
 80195f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80195fa:	693b      	ldr	r3, [r7, #16]
 80195fc:	687a      	ldr	r2, [r7, #4]
 80195fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	68fa      	ldr	r2, [r7, #12]
 8019604:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019606:	4b24      	ldr	r3, [pc, #144]	@ (8019698 <sys_timeout_abs+0xd8>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d103      	bne.n	8019616 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801960e:	4a22      	ldr	r2, [pc, #136]	@ (8019698 <sys_timeout_abs+0xd8>)
 8019610:	693b      	ldr	r3, [r7, #16]
 8019612:	6013      	str	r3, [r2, #0]
    return;
 8019614:	e037      	b.n	8019686 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019616:	693b      	ldr	r3, [r7, #16]
 8019618:	685a      	ldr	r2, [r3, #4]
 801961a:	4b1f      	ldr	r3, [pc, #124]	@ (8019698 <sys_timeout_abs+0xd8>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	685b      	ldr	r3, [r3, #4]
 8019620:	1ad3      	subs	r3, r2, r3
 8019622:	0fdb      	lsrs	r3, r3, #31
 8019624:	f003 0301 	and.w	r3, r3, #1
 8019628:	b2db      	uxtb	r3, r3
 801962a:	2b00      	cmp	r3, #0
 801962c:	d007      	beq.n	801963e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801962e:	4b1a      	ldr	r3, [pc, #104]	@ (8019698 <sys_timeout_abs+0xd8>)
 8019630:	681a      	ldr	r2, [r3, #0]
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019636:	4a18      	ldr	r2, [pc, #96]	@ (8019698 <sys_timeout_abs+0xd8>)
 8019638:	693b      	ldr	r3, [r7, #16]
 801963a:	6013      	str	r3, [r2, #0]
 801963c:	e023      	b.n	8019686 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801963e:	4b16      	ldr	r3, [pc, #88]	@ (8019698 <sys_timeout_abs+0xd8>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	617b      	str	r3, [r7, #20]
 8019644:	e01a      	b.n	801967c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d00b      	beq.n	8019666 <sys_timeout_abs+0xa6>
 801964e:	693b      	ldr	r3, [r7, #16]
 8019650:	685a      	ldr	r2, [r3, #4]
 8019652:	697b      	ldr	r3, [r7, #20]
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	685b      	ldr	r3, [r3, #4]
 8019658:	1ad3      	subs	r3, r2, r3
 801965a:	0fdb      	lsrs	r3, r3, #31
 801965c:	f003 0301 	and.w	r3, r3, #1
 8019660:	b2db      	uxtb	r3, r3
 8019662:	2b00      	cmp	r3, #0
 8019664:	d007      	beq.n	8019676 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019666:	697b      	ldr	r3, [r7, #20]
 8019668:	681a      	ldr	r2, [r3, #0]
 801966a:	693b      	ldr	r3, [r7, #16]
 801966c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801966e:	697b      	ldr	r3, [r7, #20]
 8019670:	693a      	ldr	r2, [r7, #16]
 8019672:	601a      	str	r2, [r3, #0]
        break;
 8019674:	e007      	b.n	8019686 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	617b      	str	r3, [r7, #20]
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d1e1      	bne.n	8019646 <sys_timeout_abs+0x86>
 8019682:	e000      	b.n	8019686 <sys_timeout_abs+0xc6>
    return;
 8019684:	bf00      	nop
      }
    }
  }
}
 8019686:	3718      	adds	r7, #24
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}
 801968c:	08020e70 	.word	0x08020e70
 8019690:	08020ea4 	.word	0x08020ea4
 8019694:	08020ee4 	.word	0x08020ee4
 8019698:	2000f2c0 	.word	0x2000f2c0

0801969c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b086      	sub	sp, #24
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80196a8:	697b      	ldr	r3, [r7, #20]
 80196aa:	685b      	ldr	r3, [r3, #4]
 80196ac:	4798      	blx	r3

  now = sys_now();
 80196ae:	f7f1 fb3b 	bl	800ad28 <sys_now>
 80196b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	681a      	ldr	r2, [r3, #0]
 80196b8:	4b0f      	ldr	r3, [pc, #60]	@ (80196f8 <lwip_cyclic_timer+0x5c>)
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	4413      	add	r3, r2
 80196be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80196c0:	68fa      	ldr	r2, [r7, #12]
 80196c2:	693b      	ldr	r3, [r7, #16]
 80196c4:	1ad3      	subs	r3, r2, r3
 80196c6:	0fdb      	lsrs	r3, r3, #31
 80196c8:	f003 0301 	and.w	r3, r3, #1
 80196cc:	b2db      	uxtb	r3, r3
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d009      	beq.n	80196e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	681a      	ldr	r2, [r3, #0]
 80196d6:	693b      	ldr	r3, [r7, #16]
 80196d8:	4413      	add	r3, r2
 80196da:	687a      	ldr	r2, [r7, #4]
 80196dc:	4907      	ldr	r1, [pc, #28]	@ (80196fc <lwip_cyclic_timer+0x60>)
 80196de:	4618      	mov	r0, r3
 80196e0:	f7ff ff6e 	bl	80195c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80196e4:	e004      	b.n	80196f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80196e6:	687a      	ldr	r2, [r7, #4]
 80196e8:	4904      	ldr	r1, [pc, #16]	@ (80196fc <lwip_cyclic_timer+0x60>)
 80196ea:	68f8      	ldr	r0, [r7, #12]
 80196ec:	f7ff ff68 	bl	80195c0 <sys_timeout_abs>
}
 80196f0:	bf00      	nop
 80196f2:	3718      	adds	r7, #24
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd80      	pop	{r7, pc}
 80196f8:	2000f2c4 	.word	0x2000f2c4
 80196fc:	0801969d 	.word	0x0801969d

08019700 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019706:	2301      	movs	r3, #1
 8019708:	607b      	str	r3, [r7, #4]
 801970a:	e00e      	b.n	801972a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801970c:	4a0b      	ldr	r2, [pc, #44]	@ (801973c <sys_timeouts_init+0x3c>)
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	00db      	lsls	r3, r3, #3
 8019718:	4a08      	ldr	r2, [pc, #32]	@ (801973c <sys_timeouts_init+0x3c>)
 801971a:	4413      	add	r3, r2
 801971c:	461a      	mov	r2, r3
 801971e:	4908      	ldr	r1, [pc, #32]	@ (8019740 <sys_timeouts_init+0x40>)
 8019720:	f000 f810 	bl	8019744 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	3301      	adds	r3, #1
 8019728:	607b      	str	r3, [r7, #4]
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	2b02      	cmp	r3, #2
 801972e:	d9ed      	bls.n	801970c <sys_timeouts_init+0xc>
  }
}
 8019730:	bf00      	nop
 8019732:	bf00      	nop
 8019734:	3708      	adds	r7, #8
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	08022760 	.word	0x08022760
 8019740:	0801969d 	.word	0x0801969d

08019744 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b086      	sub	sp, #24
 8019748:	af00      	add	r7, sp, #0
 801974a:	60f8      	str	r0, [r7, #12]
 801974c:	60b9      	str	r1, [r7, #8]
 801974e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019750:	68fb      	ldr	r3, [r7, #12]
 8019752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019756:	d306      	bcc.n	8019766 <sys_timeout+0x22>
 8019758:	4b0a      	ldr	r3, [pc, #40]	@ (8019784 <sys_timeout+0x40>)
 801975a:	f240 1229 	movw	r2, #297	@ 0x129
 801975e:	490a      	ldr	r1, [pc, #40]	@ (8019788 <sys_timeout+0x44>)
 8019760:	480a      	ldr	r0, [pc, #40]	@ (801978c <sys_timeout+0x48>)
 8019762:	f003 fb19 	bl	801cd98 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019766:	f7f1 fadf 	bl	800ad28 <sys_now>
 801976a:	4602      	mov	r2, r0
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	4413      	add	r3, r2
 8019770:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019772:	687a      	ldr	r2, [r7, #4]
 8019774:	68b9      	ldr	r1, [r7, #8]
 8019776:	6978      	ldr	r0, [r7, #20]
 8019778:	f7ff ff22 	bl	80195c0 <sys_timeout_abs>
#endif
}
 801977c:	bf00      	nop
 801977e:	3718      	adds	r7, #24
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	08020e70 	.word	0x08020e70
 8019788:	08020f0c 	.word	0x08020f0c
 801978c:	08020ee4 	.word	0x08020ee4

08019790 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b084      	sub	sp, #16
 8019794:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019796:	f7f1 fac7 	bl	800ad28 <sys_now>
 801979a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801979c:	4b17      	ldr	r3, [pc, #92]	@ (80197fc <sys_check_timeouts+0x6c>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d022      	beq.n	80197ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	68fa      	ldr	r2, [r7, #12]
 80197ae:	1ad3      	subs	r3, r2, r3
 80197b0:	0fdb      	lsrs	r3, r3, #31
 80197b2:	f003 0301 	and.w	r3, r3, #1
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d11a      	bne.n	80197f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a0e      	ldr	r2, [pc, #56]	@ (80197fc <sys_check_timeouts+0x6c>)
 80197c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	689b      	ldr	r3, [r3, #8]
 80197c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80197ca:	68bb      	ldr	r3, [r7, #8]
 80197cc:	68db      	ldr	r3, [r3, #12]
 80197ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80197d0:	68bb      	ldr	r3, [r7, #8]
 80197d2:	685b      	ldr	r3, [r3, #4]
 80197d4:	4a0a      	ldr	r2, [pc, #40]	@ (8019800 <sys_check_timeouts+0x70>)
 80197d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80197d8:	68b9      	ldr	r1, [r7, #8]
 80197da:	200a      	movs	r0, #10
 80197dc:	f7f8 fcd0 	bl	8012180 <memp_free>
    if (handler != NULL) {
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d0da      	beq.n	801979c <sys_check_timeouts+0xc>
      handler(arg);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6838      	ldr	r0, [r7, #0]
 80197ea:	4798      	blx	r3
  do {
 80197ec:	e7d6      	b.n	801979c <sys_check_timeouts+0xc>
      return;
 80197ee:	bf00      	nop
 80197f0:	e000      	b.n	80197f4 <sys_check_timeouts+0x64>
      return;
 80197f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80197f4:	3710      	adds	r7, #16
 80197f6:	46bd      	mov	sp, r7
 80197f8:	bd80      	pop	{r7, pc}
 80197fa:	bf00      	nop
 80197fc:	2000f2c0 	.word	0x2000f2c0
 8019800:	2000f2c4 	.word	0x2000f2c4

08019804 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b082      	sub	sp, #8
 8019808:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801980a:	4b16      	ldr	r3, [pc, #88]	@ (8019864 <sys_timeouts_sleeptime+0x60>)
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d102      	bne.n	8019818 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019812:	f04f 33ff 	mov.w	r3, #4294967295
 8019816:	e020      	b.n	801985a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019818:	f7f1 fa86 	bl	800ad28 <sys_now>
 801981c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801981e:	4b11      	ldr	r3, [pc, #68]	@ (8019864 <sys_timeouts_sleeptime+0x60>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	685a      	ldr	r2, [r3, #4]
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	1ad3      	subs	r3, r2, r3
 8019828:	0fdb      	lsrs	r3, r3, #31
 801982a:	f003 0301 	and.w	r3, r3, #1
 801982e:	b2db      	uxtb	r3, r3
 8019830:	2b00      	cmp	r3, #0
 8019832:	d001      	beq.n	8019838 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019834:	2300      	movs	r3, #0
 8019836:	e010      	b.n	801985a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019838:	4b0a      	ldr	r3, [pc, #40]	@ (8019864 <sys_timeouts_sleeptime+0x60>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	685a      	ldr	r2, [r3, #4]
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	2b00      	cmp	r3, #0
 8019848:	da06      	bge.n	8019858 <sys_timeouts_sleeptime+0x54>
 801984a:	4b07      	ldr	r3, [pc, #28]	@ (8019868 <sys_timeouts_sleeptime+0x64>)
 801984c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019850:	4906      	ldr	r1, [pc, #24]	@ (801986c <sys_timeouts_sleeptime+0x68>)
 8019852:	4807      	ldr	r0, [pc, #28]	@ (8019870 <sys_timeouts_sleeptime+0x6c>)
 8019854:	f003 faa0 	bl	801cd98 <iprintf>
    return ret;
 8019858:	683b      	ldr	r3, [r7, #0]
  }
}
 801985a:	4618      	mov	r0, r3
 801985c:	3708      	adds	r7, #8
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}
 8019862:	bf00      	nop
 8019864:	2000f2c0 	.word	0x2000f2c0
 8019868:	08020e70 	.word	0x08020e70
 801986c:	08020f44 	.word	0x08020f44
 8019870:	08020ee4 	.word	0x08020ee4

08019874 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019874:	b580      	push	{r7, lr}
 8019876:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019878:	f003 f98e 	bl	801cb98 <rand>
 801987c:	4603      	mov	r3, r0
 801987e:	b29b      	uxth	r3, r3
 8019880:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019884:	b29b      	uxth	r3, r3
 8019886:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801988a:	b29a      	uxth	r2, r3
 801988c:	4b01      	ldr	r3, [pc, #4]	@ (8019894 <udp_init+0x20>)
 801988e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019890:	bf00      	nop
 8019892:	bd80      	pop	{r7, pc}
 8019894:	20000080 	.word	0x20000080

08019898 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019898:	b480      	push	{r7}
 801989a:	b083      	sub	sp, #12
 801989c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801989e:	2300      	movs	r3, #0
 80198a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80198a2:	4b17      	ldr	r3, [pc, #92]	@ (8019900 <udp_new_port+0x68>)
 80198a4:	881b      	ldrh	r3, [r3, #0]
 80198a6:	1c5a      	adds	r2, r3, #1
 80198a8:	b291      	uxth	r1, r2
 80198aa:	4a15      	ldr	r2, [pc, #84]	@ (8019900 <udp_new_port+0x68>)
 80198ac:	8011      	strh	r1, [r2, #0]
 80198ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80198b2:	4293      	cmp	r3, r2
 80198b4:	d103      	bne.n	80198be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80198b6:	4b12      	ldr	r3, [pc, #72]	@ (8019900 <udp_new_port+0x68>)
 80198b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80198bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80198be:	4b11      	ldr	r3, [pc, #68]	@ (8019904 <udp_new_port+0x6c>)
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	603b      	str	r3, [r7, #0]
 80198c4:	e011      	b.n	80198ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	8a5a      	ldrh	r2, [r3, #18]
 80198ca:	4b0d      	ldr	r3, [pc, #52]	@ (8019900 <udp_new_port+0x68>)
 80198cc:	881b      	ldrh	r3, [r3, #0]
 80198ce:	429a      	cmp	r2, r3
 80198d0:	d108      	bne.n	80198e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80198d2:	88fb      	ldrh	r3, [r7, #6]
 80198d4:	3301      	adds	r3, #1
 80198d6:	80fb      	strh	r3, [r7, #6]
 80198d8:	88fb      	ldrh	r3, [r7, #6]
 80198da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80198de:	d3e0      	bcc.n	80198a2 <udp_new_port+0xa>
        return 0;
 80198e0:	2300      	movs	r3, #0
 80198e2:	e007      	b.n	80198f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80198e4:	683b      	ldr	r3, [r7, #0]
 80198e6:	68db      	ldr	r3, [r3, #12]
 80198e8:	603b      	str	r3, [r7, #0]
 80198ea:	683b      	ldr	r3, [r7, #0]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d1ea      	bne.n	80198c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80198f0:	4b03      	ldr	r3, [pc, #12]	@ (8019900 <udp_new_port+0x68>)
 80198f2:	881b      	ldrh	r3, [r3, #0]
}
 80198f4:	4618      	mov	r0, r3
 80198f6:	370c      	adds	r7, #12
 80198f8:	46bd      	mov	sp, r7
 80198fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fe:	4770      	bx	lr
 8019900:	20000080 	.word	0x20000080
 8019904:	2000f2cc 	.word	0x2000f2cc

08019908 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b084      	sub	sp, #16
 801990c:	af00      	add	r7, sp, #0
 801990e:	60f8      	str	r0, [r7, #12]
 8019910:	60b9      	str	r1, [r7, #8]
 8019912:	4613      	mov	r3, r2
 8019914:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d105      	bne.n	8019928 <udp_input_local_match+0x20>
 801991c:	4b27      	ldr	r3, [pc, #156]	@ (80199bc <udp_input_local_match+0xb4>)
 801991e:	2287      	movs	r2, #135	@ 0x87
 8019920:	4927      	ldr	r1, [pc, #156]	@ (80199c0 <udp_input_local_match+0xb8>)
 8019922:	4828      	ldr	r0, [pc, #160]	@ (80199c4 <udp_input_local_match+0xbc>)
 8019924:	f003 fa38 	bl	801cd98 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d105      	bne.n	801993a <udp_input_local_match+0x32>
 801992e:	4b23      	ldr	r3, [pc, #140]	@ (80199bc <udp_input_local_match+0xb4>)
 8019930:	2288      	movs	r2, #136	@ 0x88
 8019932:	4925      	ldr	r1, [pc, #148]	@ (80199c8 <udp_input_local_match+0xc0>)
 8019934:	4823      	ldr	r0, [pc, #140]	@ (80199c4 <udp_input_local_match+0xbc>)
 8019936:	f003 fa2f 	bl	801cd98 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801993a:	68fb      	ldr	r3, [r7, #12]
 801993c:	7a1b      	ldrb	r3, [r3, #8]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d00b      	beq.n	801995a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	7a1a      	ldrb	r2, [r3, #8]
 8019946:	4b21      	ldr	r3, [pc, #132]	@ (80199cc <udp_input_local_match+0xc4>)
 8019948:	685b      	ldr	r3, [r3, #4]
 801994a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801994e:	3301      	adds	r3, #1
 8019950:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019952:	429a      	cmp	r2, r3
 8019954:	d001      	beq.n	801995a <udp_input_local_match+0x52>
    return 0;
 8019956:	2300      	movs	r3, #0
 8019958:	e02b      	b.n	80199b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801995a:	79fb      	ldrb	r3, [r7, #7]
 801995c:	2b00      	cmp	r3, #0
 801995e:	d018      	beq.n	8019992 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019960:	68fb      	ldr	r3, [r7, #12]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d013      	beq.n	801998e <udp_input_local_match+0x86>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d00f      	beq.n	801998e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801996e:	4b17      	ldr	r3, [pc, #92]	@ (80199cc <udp_input_local_match+0xc4>)
 8019970:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019976:	d00a      	beq.n	801998e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	681a      	ldr	r2, [r3, #0]
 801997c:	4b13      	ldr	r3, [pc, #76]	@ (80199cc <udp_input_local_match+0xc4>)
 801997e:	695b      	ldr	r3, [r3, #20]
 8019980:	405a      	eors	r2, r3
 8019982:	68bb      	ldr	r3, [r7, #8]
 8019984:	3308      	adds	r3, #8
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801998a:	2b00      	cmp	r3, #0
 801998c:	d110      	bne.n	80199b0 <udp_input_local_match+0xa8>
          return 1;
 801998e:	2301      	movs	r3, #1
 8019990:	e00f      	b.n	80199b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	2b00      	cmp	r3, #0
 8019996:	d009      	beq.n	80199ac <udp_input_local_match+0xa4>
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d005      	beq.n	80199ac <udp_input_local_match+0xa4>
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	681a      	ldr	r2, [r3, #0]
 80199a4:	4b09      	ldr	r3, [pc, #36]	@ (80199cc <udp_input_local_match+0xc4>)
 80199a6:	695b      	ldr	r3, [r3, #20]
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d101      	bne.n	80199b0 <udp_input_local_match+0xa8>
        return 1;
 80199ac:	2301      	movs	r3, #1
 80199ae:	e000      	b.n	80199b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80199b0:	2300      	movs	r3, #0
}
 80199b2:	4618      	mov	r0, r3
 80199b4:	3710      	adds	r7, #16
 80199b6:	46bd      	mov	sp, r7
 80199b8:	bd80      	pop	{r7, pc}
 80199ba:	bf00      	nop
 80199bc:	08020f58 	.word	0x08020f58
 80199c0:	08020f88 	.word	0x08020f88
 80199c4:	08020fac 	.word	0x08020fac
 80199c8:	08020fd4 	.word	0x08020fd4
 80199cc:	2000bb1c 	.word	0x2000bb1c

080199d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80199d0:	b590      	push	{r4, r7, lr}
 80199d2:	b08d      	sub	sp, #52	@ 0x34
 80199d4:	af02      	add	r7, sp, #8
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80199da:	2300      	movs	r3, #0
 80199dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d105      	bne.n	80199f0 <udp_input+0x20>
 80199e4:	4b7c      	ldr	r3, [pc, #496]	@ (8019bd8 <udp_input+0x208>)
 80199e6:	22cf      	movs	r2, #207	@ 0xcf
 80199e8:	497c      	ldr	r1, [pc, #496]	@ (8019bdc <udp_input+0x20c>)
 80199ea:	487d      	ldr	r0, [pc, #500]	@ (8019be0 <udp_input+0x210>)
 80199ec:	f003 f9d4 	bl	801cd98 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d105      	bne.n	8019a02 <udp_input+0x32>
 80199f6:	4b78      	ldr	r3, [pc, #480]	@ (8019bd8 <udp_input+0x208>)
 80199f8:	22d0      	movs	r2, #208	@ 0xd0
 80199fa:	497a      	ldr	r1, [pc, #488]	@ (8019be4 <udp_input+0x214>)
 80199fc:	4878      	ldr	r0, [pc, #480]	@ (8019be0 <udp_input+0x210>)
 80199fe:	f003 f9cb 	bl	801cd98 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	895b      	ldrh	r3, [r3, #10]
 8019a06:	2b07      	cmp	r3, #7
 8019a08:	d803      	bhi.n	8019a12 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019a0a:	6878      	ldr	r0, [r7, #4]
 8019a0c:	f7f9 fa5c 	bl	8012ec8 <pbuf_free>
    goto end;
 8019a10:	e0de      	b.n	8019bd0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	685b      	ldr	r3, [r3, #4]
 8019a16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019a18:	4b73      	ldr	r3, [pc, #460]	@ (8019be8 <udp_input+0x218>)
 8019a1a:	695b      	ldr	r3, [r3, #20]
 8019a1c:	4a72      	ldr	r2, [pc, #456]	@ (8019be8 <udp_input+0x218>)
 8019a1e:	6812      	ldr	r2, [r2, #0]
 8019a20:	4611      	mov	r1, r2
 8019a22:	4618      	mov	r0, r3
 8019a24:	f001 ff80 	bl	801b928 <ip4_addr_isbroadcast_u32>
 8019a28:	4603      	mov	r3, r0
 8019a2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019a2c:	697b      	ldr	r3, [r7, #20]
 8019a2e:	881b      	ldrh	r3, [r3, #0]
 8019a30:	b29b      	uxth	r3, r3
 8019a32:	4618      	mov	r0, r3
 8019a34:	f7f7 fe20 	bl	8011678 <lwip_htons>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	885b      	ldrh	r3, [r3, #2]
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	4618      	mov	r0, r3
 8019a44:	f7f7 fe18 	bl	8011678 <lwip_htons>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019a50:	2300      	movs	r3, #0
 8019a52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019a54:	2300      	movs	r3, #0
 8019a56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a58:	4b64      	ldr	r3, [pc, #400]	@ (8019bec <udp_input+0x21c>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8019a5e:	e054      	b.n	8019b0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a62:	8a5b      	ldrh	r3, [r3, #18]
 8019a64:	89fa      	ldrh	r2, [r7, #14]
 8019a66:	429a      	cmp	r2, r3
 8019a68:	d14a      	bne.n	8019b00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019a6a:	7cfb      	ldrb	r3, [r7, #19]
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	6839      	ldr	r1, [r7, #0]
 8019a70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019a72:	f7ff ff49 	bl	8019908 <udp_input_local_match>
 8019a76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d041      	beq.n	8019b00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a7e:	7c1b      	ldrb	r3, [r3, #16]
 8019a80:	f003 0304 	and.w	r3, r3, #4
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d11d      	bne.n	8019ac4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019a88:	69fb      	ldr	r3, [r7, #28]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d102      	bne.n	8019a94 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a90:	61fb      	str	r3, [r7, #28]
 8019a92:	e017      	b.n	8019ac4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019a94:	7cfb      	ldrb	r3, [r7, #19]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d014      	beq.n	8019ac4 <udp_input+0xf4>
 8019a9a:	4b53      	ldr	r3, [pc, #332]	@ (8019be8 <udp_input+0x218>)
 8019a9c:	695b      	ldr	r3, [r3, #20]
 8019a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019aa2:	d10f      	bne.n	8019ac4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019aa4:	69fb      	ldr	r3, [r7, #28]
 8019aa6:	681a      	ldr	r2, [r3, #0]
 8019aa8:	683b      	ldr	r3, [r7, #0]
 8019aaa:	3304      	adds	r3, #4
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d008      	beq.n	8019ac4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ab4:	681a      	ldr	r2, [r3, #0]
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	3304      	adds	r3, #4
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	429a      	cmp	r2, r3
 8019abe:	d101      	bne.n	8019ac4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ac2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ac6:	8a9b      	ldrh	r3, [r3, #20]
 8019ac8:	8a3a      	ldrh	r2, [r7, #16]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d118      	bne.n	8019b00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d005      	beq.n	8019ae2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ad8:	685a      	ldr	r2, [r3, #4]
 8019ada:	4b43      	ldr	r3, [pc, #268]	@ (8019be8 <udp_input+0x218>)
 8019adc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019ade:	429a      	cmp	r2, r3
 8019ae0:	d10e      	bne.n	8019b00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019ae2:	6a3b      	ldr	r3, [r7, #32]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d014      	beq.n	8019b12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019aea:	68da      	ldr	r2, [r3, #12]
 8019aec:	6a3b      	ldr	r3, [r7, #32]
 8019aee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019af0:	4b3e      	ldr	r3, [pc, #248]	@ (8019bec <udp_input+0x21c>)
 8019af2:	681a      	ldr	r2, [r3, #0]
 8019af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019af6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019af8:	4a3c      	ldr	r2, [pc, #240]	@ (8019bec <udp_input+0x21c>)
 8019afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019afc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019afe:	e008      	b.n	8019b12 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b06:	68db      	ldr	r3, [r3, #12]
 8019b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d1a7      	bne.n	8019a60 <udp_input+0x90>
 8019b10:	e000      	b.n	8019b14 <udp_input+0x144>
        break;
 8019b12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d101      	bne.n	8019b1e <udp_input+0x14e>
    pcb = uncon_pcb;
 8019b1a:	69fb      	ldr	r3, [r7, #28]
 8019b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d002      	beq.n	8019b2a <udp_input+0x15a>
    for_us = 1;
 8019b24:	2301      	movs	r3, #1
 8019b26:	76fb      	strb	r3, [r7, #27]
 8019b28:	e00a      	b.n	8019b40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019b2a:	683b      	ldr	r3, [r7, #0]
 8019b2c:	3304      	adds	r3, #4
 8019b2e:	681a      	ldr	r2, [r3, #0]
 8019b30:	4b2d      	ldr	r3, [pc, #180]	@ (8019be8 <udp_input+0x218>)
 8019b32:	695b      	ldr	r3, [r3, #20]
 8019b34:	429a      	cmp	r2, r3
 8019b36:	bf0c      	ite	eq
 8019b38:	2301      	moveq	r3, #1
 8019b3a:	2300      	movne	r3, #0
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019b40:	7efb      	ldrb	r3, [r7, #27]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d041      	beq.n	8019bca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019b46:	2108      	movs	r1, #8
 8019b48:	6878      	ldr	r0, [r7, #4]
 8019b4a:	f7f9 f937 	bl	8012dbc <pbuf_remove_header>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d00a      	beq.n	8019b6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019b54:	4b20      	ldr	r3, [pc, #128]	@ (8019bd8 <udp_input+0x208>)
 8019b56:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8019b5a:	4925      	ldr	r1, [pc, #148]	@ (8019bf0 <udp_input+0x220>)
 8019b5c:	4820      	ldr	r0, [pc, #128]	@ (8019be0 <udp_input+0x210>)
 8019b5e:	f003 f91b 	bl	801cd98 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019b62:	6878      	ldr	r0, [r7, #4]
 8019b64:	f7f9 f9b0 	bl	8012ec8 <pbuf_free>
      goto end;
 8019b68:	e032      	b.n	8019bd0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d012      	beq.n	8019b96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b72:	699b      	ldr	r3, [r3, #24]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d00a      	beq.n	8019b8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b7a:	699c      	ldr	r4, [r3, #24]
 8019b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b7e:	69d8      	ldr	r0, [r3, #28]
 8019b80:	8a3b      	ldrh	r3, [r7, #16]
 8019b82:	9300      	str	r3, [sp, #0]
 8019b84:	4b1b      	ldr	r3, [pc, #108]	@ (8019bf4 <udp_input+0x224>)
 8019b86:	687a      	ldr	r2, [r7, #4]
 8019b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019b8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019b8c:	e021      	b.n	8019bd2 <udp_input+0x202>
        pbuf_free(p);
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	f7f9 f99a 	bl	8012ec8 <pbuf_free>
        goto end;
 8019b94:	e01c      	b.n	8019bd0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019b96:	7cfb      	ldrb	r3, [r7, #19]
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d112      	bne.n	8019bc2 <udp_input+0x1f2>
 8019b9c:	4b12      	ldr	r3, [pc, #72]	@ (8019be8 <udp_input+0x218>)
 8019b9e:	695b      	ldr	r3, [r3, #20]
 8019ba0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019ba4:	2be0      	cmp	r3, #224	@ 0xe0
 8019ba6:	d00c      	beq.n	8019bc2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8019be8 <udp_input+0x218>)
 8019baa:	899b      	ldrh	r3, [r3, #12]
 8019bac:	3308      	adds	r3, #8
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	b21b      	sxth	r3, r3
 8019bb2:	4619      	mov	r1, r3
 8019bb4:	6878      	ldr	r0, [r7, #4]
 8019bb6:	f7f9 f974 	bl	8012ea2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019bba:	2103      	movs	r1, #3
 8019bbc:	6878      	ldr	r0, [r7, #4]
 8019bbe:	f001 fb93 	bl	801b2e8 <icmp_dest_unreach>
      pbuf_free(p);
 8019bc2:	6878      	ldr	r0, [r7, #4]
 8019bc4:	f7f9 f980 	bl	8012ec8 <pbuf_free>
  return;
 8019bc8:	e003      	b.n	8019bd2 <udp_input+0x202>
    pbuf_free(p);
 8019bca:	6878      	ldr	r0, [r7, #4]
 8019bcc:	f7f9 f97c 	bl	8012ec8 <pbuf_free>
  return;
 8019bd0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019bd2:	372c      	adds	r7, #44	@ 0x2c
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	bd90      	pop	{r4, r7, pc}
 8019bd8:	08020f58 	.word	0x08020f58
 8019bdc:	08020ffc 	.word	0x08020ffc
 8019be0:	08020fac 	.word	0x08020fac
 8019be4:	08021014 	.word	0x08021014
 8019be8:	2000bb1c 	.word	0x2000bb1c
 8019bec:	2000f2cc 	.word	0x2000f2cc
 8019bf0:	08021030 	.word	0x08021030
 8019bf4:	2000bb2c 	.word	0x2000bb2c

08019bf8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b082      	sub	sp, #8
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
 8019c00:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d109      	bne.n	8019c1c <udp_send+0x24>
 8019c08:	4b11      	ldr	r3, [pc, #68]	@ (8019c50 <udp_send+0x58>)
 8019c0a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8019c0e:	4911      	ldr	r1, [pc, #68]	@ (8019c54 <udp_send+0x5c>)
 8019c10:	4811      	ldr	r0, [pc, #68]	@ (8019c58 <udp_send+0x60>)
 8019c12:	f003 f8c1 	bl	801cd98 <iprintf>
 8019c16:	f06f 030f 	mvn.w	r3, #15
 8019c1a:	e015      	b.n	8019c48 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019c1c:	683b      	ldr	r3, [r7, #0]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	d109      	bne.n	8019c36 <udp_send+0x3e>
 8019c22:	4b0b      	ldr	r3, [pc, #44]	@ (8019c50 <udp_send+0x58>)
 8019c24:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8019c28:	490c      	ldr	r1, [pc, #48]	@ (8019c5c <udp_send+0x64>)
 8019c2a:	480b      	ldr	r0, [pc, #44]	@ (8019c58 <udp_send+0x60>)
 8019c2c:	f003 f8b4 	bl	801cd98 <iprintf>
 8019c30:	f06f 030f 	mvn.w	r3, #15
 8019c34:	e008      	b.n	8019c48 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	1d1a      	adds	r2, r3, #4
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	8a9b      	ldrh	r3, [r3, #20]
 8019c3e:	6839      	ldr	r1, [r7, #0]
 8019c40:	6878      	ldr	r0, [r7, #4]
 8019c42:	f000 f80d 	bl	8019c60 <udp_sendto>
 8019c46:	4603      	mov	r3, r0
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3708      	adds	r7, #8
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}
 8019c50:	08020f58 	.word	0x08020f58
 8019c54:	0802104c 	.word	0x0802104c
 8019c58:	08020fac 	.word	0x08020fac
 8019c5c:	08021064 	.word	0x08021064

08019c60 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b088      	sub	sp, #32
 8019c64:	af02      	add	r7, sp, #8
 8019c66:	60f8      	str	r0, [r7, #12]
 8019c68:	60b9      	str	r1, [r7, #8]
 8019c6a:	607a      	str	r2, [r7, #4]
 8019c6c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d109      	bne.n	8019c88 <udp_sendto+0x28>
 8019c74:	4b23      	ldr	r3, [pc, #140]	@ (8019d04 <udp_sendto+0xa4>)
 8019c76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019c7a:	4923      	ldr	r1, [pc, #140]	@ (8019d08 <udp_sendto+0xa8>)
 8019c7c:	4823      	ldr	r0, [pc, #140]	@ (8019d0c <udp_sendto+0xac>)
 8019c7e:	f003 f88b 	bl	801cd98 <iprintf>
 8019c82:	f06f 030f 	mvn.w	r3, #15
 8019c86:	e038      	b.n	8019cfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d109      	bne.n	8019ca2 <udp_sendto+0x42>
 8019c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8019d04 <udp_sendto+0xa4>)
 8019c90:	f240 2219 	movw	r2, #537	@ 0x219
 8019c94:	491e      	ldr	r1, [pc, #120]	@ (8019d10 <udp_sendto+0xb0>)
 8019c96:	481d      	ldr	r0, [pc, #116]	@ (8019d0c <udp_sendto+0xac>)
 8019c98:	f003 f87e 	bl	801cd98 <iprintf>
 8019c9c:	f06f 030f 	mvn.w	r3, #15
 8019ca0:	e02b      	b.n	8019cfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d109      	bne.n	8019cbc <udp_sendto+0x5c>
 8019ca8:	4b16      	ldr	r3, [pc, #88]	@ (8019d04 <udp_sendto+0xa4>)
 8019caa:	f240 221a 	movw	r2, #538	@ 0x21a
 8019cae:	4919      	ldr	r1, [pc, #100]	@ (8019d14 <udp_sendto+0xb4>)
 8019cb0:	4816      	ldr	r0, [pc, #88]	@ (8019d0c <udp_sendto+0xac>)
 8019cb2:	f003 f871 	bl	801cd98 <iprintf>
 8019cb6:	f06f 030f 	mvn.w	r3, #15
 8019cba:	e01e      	b.n	8019cfa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	7a1b      	ldrb	r3, [r3, #8]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d006      	beq.n	8019cd2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	7a1b      	ldrb	r3, [r3, #8]
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7f8 fd6f 	bl	80127ac <netif_get_by_index>
 8019cce:	6178      	str	r0, [r7, #20]
 8019cd0:	e003      	b.n	8019cda <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019cd2:	6878      	ldr	r0, [r7, #4]
 8019cd4:	f001 fb92 	bl	801b3fc <ip4_route>
 8019cd8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019cda:	697b      	ldr	r3, [r7, #20]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d102      	bne.n	8019ce6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019ce0:	f06f 0303 	mvn.w	r3, #3
 8019ce4:	e009      	b.n	8019cfa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019ce6:	887a      	ldrh	r2, [r7, #2]
 8019ce8:	697b      	ldr	r3, [r7, #20]
 8019cea:	9300      	str	r3, [sp, #0]
 8019cec:	4613      	mov	r3, r2
 8019cee:	687a      	ldr	r2, [r7, #4]
 8019cf0:	68b9      	ldr	r1, [r7, #8]
 8019cf2:	68f8      	ldr	r0, [r7, #12]
 8019cf4:	f000 f810 	bl	8019d18 <udp_sendto_if>
 8019cf8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3718      	adds	r7, #24
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}
 8019d02:	bf00      	nop
 8019d04:	08020f58 	.word	0x08020f58
 8019d08:	0802107c 	.word	0x0802107c
 8019d0c:	08020fac 	.word	0x08020fac
 8019d10:	08021094 	.word	0x08021094
 8019d14:	080210b0 	.word	0x080210b0

08019d18 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b088      	sub	sp, #32
 8019d1c:	af02      	add	r7, sp, #8
 8019d1e:	60f8      	str	r0, [r7, #12]
 8019d20:	60b9      	str	r1, [r7, #8]
 8019d22:	607a      	str	r2, [r7, #4]
 8019d24:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d109      	bne.n	8019d40 <udp_sendto_if+0x28>
 8019d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8019de8 <udp_sendto_if+0xd0>)
 8019d2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d32:	492e      	ldr	r1, [pc, #184]	@ (8019dec <udp_sendto_if+0xd4>)
 8019d34:	482e      	ldr	r0, [pc, #184]	@ (8019df0 <udp_sendto_if+0xd8>)
 8019d36:	f003 f82f 	bl	801cd98 <iprintf>
 8019d3a:	f06f 030f 	mvn.w	r3, #15
 8019d3e:	e04f      	b.n	8019de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d109      	bne.n	8019d5a <udp_sendto_if+0x42>
 8019d46:	4b28      	ldr	r3, [pc, #160]	@ (8019de8 <udp_sendto_if+0xd0>)
 8019d48:	f240 2281 	movw	r2, #641	@ 0x281
 8019d4c:	4929      	ldr	r1, [pc, #164]	@ (8019df4 <udp_sendto_if+0xdc>)
 8019d4e:	4828      	ldr	r0, [pc, #160]	@ (8019df0 <udp_sendto_if+0xd8>)
 8019d50:	f003 f822 	bl	801cd98 <iprintf>
 8019d54:	f06f 030f 	mvn.w	r3, #15
 8019d58:	e042      	b.n	8019de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d109      	bne.n	8019d74 <udp_sendto_if+0x5c>
 8019d60:	4b21      	ldr	r3, [pc, #132]	@ (8019de8 <udp_sendto_if+0xd0>)
 8019d62:	f240 2282 	movw	r2, #642	@ 0x282
 8019d66:	4924      	ldr	r1, [pc, #144]	@ (8019df8 <udp_sendto_if+0xe0>)
 8019d68:	4821      	ldr	r0, [pc, #132]	@ (8019df0 <udp_sendto_if+0xd8>)
 8019d6a:	f003 f815 	bl	801cd98 <iprintf>
 8019d6e:	f06f 030f 	mvn.w	r3, #15
 8019d72:	e035      	b.n	8019de0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019d74:	6a3b      	ldr	r3, [r7, #32]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d109      	bne.n	8019d8e <udp_sendto_if+0x76>
 8019d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8019de8 <udp_sendto_if+0xd0>)
 8019d7c:	f240 2283 	movw	r2, #643	@ 0x283
 8019d80:	491e      	ldr	r1, [pc, #120]	@ (8019dfc <udp_sendto_if+0xe4>)
 8019d82:	481b      	ldr	r0, [pc, #108]	@ (8019df0 <udp_sendto_if+0xd8>)
 8019d84:	f003 f808 	bl	801cd98 <iprintf>
 8019d88:	f06f 030f 	mvn.w	r3, #15
 8019d8c:	e028      	b.n	8019de0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d009      	beq.n	8019da8 <udp_sendto_if+0x90>
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	681b      	ldr	r3, [r3, #0]
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d005      	beq.n	8019da8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019da4:	2be0      	cmp	r3, #224	@ 0xe0
 8019da6:	d103      	bne.n	8019db0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019da8:	6a3b      	ldr	r3, [r7, #32]
 8019daa:	3304      	adds	r3, #4
 8019dac:	617b      	str	r3, [r7, #20]
 8019dae:	e00b      	b.n	8019dc8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	681a      	ldr	r2, [r3, #0]
 8019db4:	6a3b      	ldr	r3, [r7, #32]
 8019db6:	3304      	adds	r3, #4
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	d002      	beq.n	8019dc4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019dbe:	f06f 0303 	mvn.w	r3, #3
 8019dc2:	e00d      	b.n	8019de0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019dc8:	887a      	ldrh	r2, [r7, #2]
 8019dca:	697b      	ldr	r3, [r7, #20]
 8019dcc:	9301      	str	r3, [sp, #4]
 8019dce:	6a3b      	ldr	r3, [r7, #32]
 8019dd0:	9300      	str	r3, [sp, #0]
 8019dd2:	4613      	mov	r3, r2
 8019dd4:	687a      	ldr	r2, [r7, #4]
 8019dd6:	68b9      	ldr	r1, [r7, #8]
 8019dd8:	68f8      	ldr	r0, [r7, #12]
 8019dda:	f000 f811 	bl	8019e00 <udp_sendto_if_src>
 8019dde:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019de0:	4618      	mov	r0, r3
 8019de2:	3718      	adds	r7, #24
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}
 8019de8:	08020f58 	.word	0x08020f58
 8019dec:	080210cc 	.word	0x080210cc
 8019df0:	08020fac 	.word	0x08020fac
 8019df4:	080210e8 	.word	0x080210e8
 8019df8:	08021104 	.word	0x08021104
 8019dfc:	08021124 	.word	0x08021124

08019e00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019e00:	b580      	push	{r7, lr}
 8019e02:	b08c      	sub	sp, #48	@ 0x30
 8019e04:	af04      	add	r7, sp, #16
 8019e06:	60f8      	str	r0, [r7, #12]
 8019e08:	60b9      	str	r1, [r7, #8]
 8019e0a:	607a      	str	r2, [r7, #4]
 8019e0c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d109      	bne.n	8019e28 <udp_sendto_if_src+0x28>
 8019e14:	4b65      	ldr	r3, [pc, #404]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019e16:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8019e1a:	4965      	ldr	r1, [pc, #404]	@ (8019fb0 <udp_sendto_if_src+0x1b0>)
 8019e1c:	4865      	ldr	r0, [pc, #404]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019e1e:	f002 ffbb 	bl	801cd98 <iprintf>
 8019e22:	f06f 030f 	mvn.w	r3, #15
 8019e26:	e0bc      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019e28:	68bb      	ldr	r3, [r7, #8]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d109      	bne.n	8019e42 <udp_sendto_if_src+0x42>
 8019e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019e30:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8019e34:	4960      	ldr	r1, [pc, #384]	@ (8019fb8 <udp_sendto_if_src+0x1b8>)
 8019e36:	485f      	ldr	r0, [pc, #380]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019e38:	f002 ffae 	bl	801cd98 <iprintf>
 8019e3c:	f06f 030f 	mvn.w	r3, #15
 8019e40:	e0af      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d109      	bne.n	8019e5c <udp_sendto_if_src+0x5c>
 8019e48:	4b58      	ldr	r3, [pc, #352]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019e4a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8019e4e:	495b      	ldr	r1, [pc, #364]	@ (8019fbc <udp_sendto_if_src+0x1bc>)
 8019e50:	4858      	ldr	r0, [pc, #352]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019e52:	f002 ffa1 	bl	801cd98 <iprintf>
 8019e56:	f06f 030f 	mvn.w	r3, #15
 8019e5a:	e0a2      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d109      	bne.n	8019e76 <udp_sendto_if_src+0x76>
 8019e62:	4b52      	ldr	r3, [pc, #328]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019e64:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8019e68:	4955      	ldr	r1, [pc, #340]	@ (8019fc0 <udp_sendto_if_src+0x1c0>)
 8019e6a:	4852      	ldr	r0, [pc, #328]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019e6c:	f002 ff94 	bl	801cd98 <iprintf>
 8019e70:	f06f 030f 	mvn.w	r3, #15
 8019e74:	e095      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d109      	bne.n	8019e90 <udp_sendto_if_src+0x90>
 8019e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019e7e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8019e82:	4950      	ldr	r1, [pc, #320]	@ (8019fc4 <udp_sendto_if_src+0x1c4>)
 8019e84:	484b      	ldr	r0, [pc, #300]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019e86:	f002 ff87 	bl	801cd98 <iprintf>
 8019e8a:	f06f 030f 	mvn.w	r3, #15
 8019e8e:	e088      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	8a5b      	ldrh	r3, [r3, #18]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d10f      	bne.n	8019eb8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019e98:	68f9      	ldr	r1, [r7, #12]
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	8a5b      	ldrh	r3, [r3, #18]
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	68f8      	ldr	r0, [r7, #12]
 8019ea2:	f000 f893 	bl	8019fcc <udp_bind>
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019eaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d002      	beq.n	8019eb8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019eb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019eb6:	e074      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019eb8:	68bb      	ldr	r3, [r7, #8]
 8019eba:	891b      	ldrh	r3, [r3, #8]
 8019ebc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	d902      	bls.n	8019eca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8019ec8:	e06b      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019eca:	2108      	movs	r1, #8
 8019ecc:	68b8      	ldr	r0, [r7, #8]
 8019ece:	f7f8 ff65 	bl	8012d9c <pbuf_add_header>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d015      	beq.n	8019f04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019ed8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019edc:	2108      	movs	r1, #8
 8019ede:	2022      	movs	r0, #34	@ 0x22
 8019ee0:	f7f8 fd0e 	bl	8012900 <pbuf_alloc>
 8019ee4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019ee6:	69fb      	ldr	r3, [r7, #28]
 8019ee8:	2b00      	cmp	r3, #0
 8019eea:	d102      	bne.n	8019ef2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019eec:	f04f 33ff 	mov.w	r3, #4294967295
 8019ef0:	e057      	b.n	8019fa2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	891b      	ldrh	r3, [r3, #8]
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d006      	beq.n	8019f08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019efa:	68b9      	ldr	r1, [r7, #8]
 8019efc:	69f8      	ldr	r0, [r7, #28]
 8019efe:	f7f9 f907 	bl	8013110 <pbuf_chain>
 8019f02:	e001      	b.n	8019f08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019f08:	69fb      	ldr	r3, [r7, #28]
 8019f0a:	895b      	ldrh	r3, [r3, #10]
 8019f0c:	2b07      	cmp	r3, #7
 8019f0e:	d806      	bhi.n	8019f1e <udp_sendto_if_src+0x11e>
 8019f10:	4b26      	ldr	r3, [pc, #152]	@ (8019fac <udp_sendto_if_src+0x1ac>)
 8019f12:	f240 320d 	movw	r2, #781	@ 0x30d
 8019f16:	492c      	ldr	r1, [pc, #176]	@ (8019fc8 <udp_sendto_if_src+0x1c8>)
 8019f18:	4826      	ldr	r0, [pc, #152]	@ (8019fb4 <udp_sendto_if_src+0x1b4>)
 8019f1a:	f002 ff3d 	bl	801cd98 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019f1e:	69fb      	ldr	r3, [r7, #28]
 8019f20:	685b      	ldr	r3, [r3, #4]
 8019f22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	8a5b      	ldrh	r3, [r3, #18]
 8019f28:	4618      	mov	r0, r3
 8019f2a:	f7f7 fba5 	bl	8011678 <lwip_htons>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	461a      	mov	r2, r3
 8019f32:	697b      	ldr	r3, [r7, #20]
 8019f34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019f36:	887b      	ldrh	r3, [r7, #2]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7f7 fb9d 	bl	8011678 <lwip_htons>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	461a      	mov	r2, r3
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019f46:	697b      	ldr	r3, [r7, #20]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	719a      	strb	r2, [r3, #6]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	891b      	ldrh	r3, [r3, #8]
 8019f54:	4618      	mov	r0, r3
 8019f56:	f7f7 fb8f 	bl	8011678 <lwip_htons>
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	461a      	mov	r2, r3
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019f62:	2311      	movs	r3, #17
 8019f64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	7adb      	ldrb	r3, [r3, #11]
 8019f6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	7a9b      	ldrb	r3, [r3, #10]
 8019f70:	7cb9      	ldrb	r1, [r7, #18]
 8019f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019f74:	9202      	str	r2, [sp, #8]
 8019f76:	7cfa      	ldrb	r2, [r7, #19]
 8019f78:	9201      	str	r2, [sp, #4]
 8019f7a:	9300      	str	r3, [sp, #0]
 8019f7c:	460b      	mov	r3, r1
 8019f7e:	687a      	ldr	r2, [r7, #4]
 8019f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019f82:	69f8      	ldr	r0, [r7, #28]
 8019f84:	f001 fc22 	bl	801b7cc <ip4_output_if_src>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019f8c:	69fa      	ldr	r2, [r7, #28]
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d004      	beq.n	8019f9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019f94:	69f8      	ldr	r0, [r7, #28]
 8019f96:	f7f8 ff97 	bl	8012ec8 <pbuf_free>
    q = NULL;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019f9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	3720      	adds	r7, #32
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	bd80      	pop	{r7, pc}
 8019faa:	bf00      	nop
 8019fac:	08020f58 	.word	0x08020f58
 8019fb0:	08021144 	.word	0x08021144
 8019fb4:	08020fac 	.word	0x08020fac
 8019fb8:	08021164 	.word	0x08021164
 8019fbc:	08021184 	.word	0x08021184
 8019fc0:	080211a8 	.word	0x080211a8
 8019fc4:	080211cc 	.word	0x080211cc
 8019fc8:	080211f0 	.word	0x080211f0

08019fcc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019fcc:	b580      	push	{r7, lr}
 8019fce:	b086      	sub	sp, #24
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	60f8      	str	r0, [r7, #12]
 8019fd4:	60b9      	str	r1, [r7, #8]
 8019fd6:	4613      	mov	r3, r2
 8019fd8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d101      	bne.n	8019fe4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019fe0:	4b39      	ldr	r3, [pc, #228]	@ (801a0c8 <udp_bind+0xfc>)
 8019fe2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d109      	bne.n	8019ffe <udp_bind+0x32>
 8019fea:	4b38      	ldr	r3, [pc, #224]	@ (801a0cc <udp_bind+0x100>)
 8019fec:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8019ff0:	4937      	ldr	r1, [pc, #220]	@ (801a0d0 <udp_bind+0x104>)
 8019ff2:	4838      	ldr	r0, [pc, #224]	@ (801a0d4 <udp_bind+0x108>)
 8019ff4:	f002 fed0 	bl	801cd98 <iprintf>
 8019ff8:	f06f 030f 	mvn.w	r3, #15
 8019ffc:	e060      	b.n	801a0c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019ffe:	2300      	movs	r3, #0
 801a000:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a002:	4b35      	ldr	r3, [pc, #212]	@ (801a0d8 <udp_bind+0x10c>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	617b      	str	r3, [r7, #20]
 801a008:	e009      	b.n	801a01e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a00a:	68fa      	ldr	r2, [r7, #12]
 801a00c:	697b      	ldr	r3, [r7, #20]
 801a00e:	429a      	cmp	r2, r3
 801a010:	d102      	bne.n	801a018 <udp_bind+0x4c>
      rebind = 1;
 801a012:	2301      	movs	r3, #1
 801a014:	74fb      	strb	r3, [r7, #19]
      break;
 801a016:	e005      	b.n	801a024 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	68db      	ldr	r3, [r3, #12]
 801a01c:	617b      	str	r3, [r7, #20]
 801a01e:	697b      	ldr	r3, [r7, #20]
 801a020:	2b00      	cmp	r3, #0
 801a022:	d1f2      	bne.n	801a00a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a024:	88fb      	ldrh	r3, [r7, #6]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d109      	bne.n	801a03e <udp_bind+0x72>
    port = udp_new_port();
 801a02a:	f7ff fc35 	bl	8019898 <udp_new_port>
 801a02e:	4603      	mov	r3, r0
 801a030:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a032:	88fb      	ldrh	r3, [r7, #6]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d12c      	bne.n	801a092 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a038:	f06f 0307 	mvn.w	r3, #7
 801a03c:	e040      	b.n	801a0c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a03e:	4b26      	ldr	r3, [pc, #152]	@ (801a0d8 <udp_bind+0x10c>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	617b      	str	r3, [r7, #20]
 801a044:	e022      	b.n	801a08c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a046:	68fa      	ldr	r2, [r7, #12]
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	429a      	cmp	r2, r3
 801a04c:	d01b      	beq.n	801a086 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a04e:	697b      	ldr	r3, [r7, #20]
 801a050:	8a5b      	ldrh	r3, [r3, #18]
 801a052:	88fa      	ldrh	r2, [r7, #6]
 801a054:	429a      	cmp	r2, r3
 801a056:	d116      	bne.n	801a086 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a058:	697b      	ldr	r3, [r7, #20]
 801a05a:	681a      	ldr	r2, [r3, #0]
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a060:	429a      	cmp	r2, r3
 801a062:	d00d      	beq.n	801a080 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d00a      	beq.n	801a080 <udp_bind+0xb4>
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d006      	beq.n	801a080 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a072:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a074:	2b00      	cmp	r3, #0
 801a076:	d003      	beq.n	801a080 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a078:	697b      	ldr	r3, [r7, #20]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d102      	bne.n	801a086 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a080:	f06f 0307 	mvn.w	r3, #7
 801a084:	e01c      	b.n	801a0c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	68db      	ldr	r3, [r3, #12]
 801a08a:	617b      	str	r3, [r7, #20]
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d1d9      	bne.n	801a046 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d002      	beq.n	801a09e <udp_bind+0xd2>
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	e000      	b.n	801a0a0 <udp_bind+0xd4>
 801a09e:	2300      	movs	r3, #0
 801a0a0:	68fa      	ldr	r2, [r7, #12]
 801a0a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	88fa      	ldrh	r2, [r7, #6]
 801a0a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a0aa:	7cfb      	ldrb	r3, [r7, #19]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d106      	bne.n	801a0be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a0b0:	4b09      	ldr	r3, [pc, #36]	@ (801a0d8 <udp_bind+0x10c>)
 801a0b2:	681a      	ldr	r2, [r3, #0]
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a0b8:	4a07      	ldr	r2, [pc, #28]	@ (801a0d8 <udp_bind+0x10c>)
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a0be:	2300      	movs	r3, #0
}
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	3718      	adds	r7, #24
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}
 801a0c8:	08022778 	.word	0x08022778
 801a0cc:	08020f58 	.word	0x08020f58
 801a0d0:	08021220 	.word	0x08021220
 801a0d4:	08020fac 	.word	0x08020fac
 801a0d8:	2000f2cc 	.word	0x2000f2cc

0801a0dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	60f8      	str	r0, [r7, #12]
 801a0e4:	60b9      	str	r1, [r7, #8]
 801a0e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d107      	bne.n	801a0fe <udp_recv+0x22>
 801a0ee:	4b08      	ldr	r3, [pc, #32]	@ (801a110 <udp_recv+0x34>)
 801a0f0:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a0f4:	4907      	ldr	r1, [pc, #28]	@ (801a114 <udp_recv+0x38>)
 801a0f6:	4808      	ldr	r0, [pc, #32]	@ (801a118 <udp_recv+0x3c>)
 801a0f8:	f002 fe4e 	bl	801cd98 <iprintf>
 801a0fc:	e005      	b.n	801a10a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	68ba      	ldr	r2, [r7, #8]
 801a102:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	687a      	ldr	r2, [r7, #4]
 801a108:	61da      	str	r2, [r3, #28]
}
 801a10a:	3710      	adds	r7, #16
 801a10c:	46bd      	mov	sp, r7
 801a10e:	bd80      	pop	{r7, pc}
 801a110:	08020f58 	.word	0x08020f58
 801a114:	0802128c 	.word	0x0802128c
 801a118:	08020fac 	.word	0x08020fac

0801a11c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b084      	sub	sp, #16
 801a120:	af00      	add	r7, sp, #0
 801a122:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d107      	bne.n	801a13a <udp_remove+0x1e>
 801a12a:	4b19      	ldr	r3, [pc, #100]	@ (801a190 <udp_remove+0x74>)
 801a12c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801a130:	4918      	ldr	r1, [pc, #96]	@ (801a194 <udp_remove+0x78>)
 801a132:	4819      	ldr	r0, [pc, #100]	@ (801a198 <udp_remove+0x7c>)
 801a134:	f002 fe30 	bl	801cd98 <iprintf>
 801a138:	e026      	b.n	801a188 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a13a:	4b18      	ldr	r3, [pc, #96]	@ (801a19c <udp_remove+0x80>)
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	429a      	cmp	r2, r3
 801a142:	d105      	bne.n	801a150 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a144:	4b15      	ldr	r3, [pc, #84]	@ (801a19c <udp_remove+0x80>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	4a14      	ldr	r2, [pc, #80]	@ (801a19c <udp_remove+0x80>)
 801a14c:	6013      	str	r3, [r2, #0]
 801a14e:	e017      	b.n	801a180 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a150:	4b12      	ldr	r3, [pc, #72]	@ (801a19c <udp_remove+0x80>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	60fb      	str	r3, [r7, #12]
 801a156:	e010      	b.n	801a17a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	68db      	ldr	r3, [r3, #12]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d009      	beq.n	801a174 <udp_remove+0x58>
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	68db      	ldr	r3, [r3, #12]
 801a164:	687a      	ldr	r2, [r7, #4]
 801a166:	429a      	cmp	r2, r3
 801a168:	d104      	bne.n	801a174 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	68da      	ldr	r2, [r3, #12]
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	60da      	str	r2, [r3, #12]
        break;
 801a172:	e005      	b.n	801a180 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	68db      	ldr	r3, [r3, #12]
 801a178:	60fb      	str	r3, [r7, #12]
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d1eb      	bne.n	801a158 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a180:	6879      	ldr	r1, [r7, #4]
 801a182:	2000      	movs	r0, #0
 801a184:	f7f7 fffc 	bl	8012180 <memp_free>
}
 801a188:	3710      	adds	r7, #16
 801a18a:	46bd      	mov	sp, r7
 801a18c:	bd80      	pop	{r7, pc}
 801a18e:	bf00      	nop
 801a190:	08020f58 	.word	0x08020f58
 801a194:	080212a4 	.word	0x080212a4
 801a198:	08020fac 	.word	0x08020fac
 801a19c:	2000f2cc 	.word	0x2000f2cc

0801a1a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b082      	sub	sp, #8
 801a1a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a1a6:	2000      	movs	r0, #0
 801a1a8:	f7f7 ff74 	bl	8012094 <memp_malloc>
 801a1ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d007      	beq.n	801a1c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a1b4:	2220      	movs	r2, #32
 801a1b6:	2100      	movs	r1, #0
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f002 fe8c 	bl	801ced6 <memset>
    pcb->ttl = UDP_TTL;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	22ff      	movs	r2, #255	@ 0xff
 801a1c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a1c4:	687b      	ldr	r3, [r7, #4]
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3708      	adds	r7, #8
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}

0801a1ce <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a1ce:	b580      	push	{r7, lr}
 801a1d0:	b084      	sub	sp, #16
 801a1d2:	af00      	add	r7, sp, #0
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a1d8:	f7ff ffe2 	bl	801a1a0 <udp_new>
 801a1dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a1de:	68fb      	ldr	r3, [r7, #12]
}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	3710      	adds	r7, #16
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}

0801a1e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a1e8:	b480      	push	{r7}
 801a1ea:	b085      	sub	sp, #20
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
 801a1f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d01e      	beq.n	801a236 <udp_netif_ip_addr_changed+0x4e>
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d01a      	beq.n	801a236 <udp_netif_ip_addr_changed+0x4e>
 801a200:	683b      	ldr	r3, [r7, #0]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d017      	beq.n	801a236 <udp_netif_ip_addr_changed+0x4e>
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d013      	beq.n	801a236 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a20e:	4b0d      	ldr	r3, [pc, #52]	@ (801a244 <udp_netif_ip_addr_changed+0x5c>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	60fb      	str	r3, [r7, #12]
 801a214:	e00c      	b.n	801a230 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	681a      	ldr	r2, [r3, #0]
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	429a      	cmp	r2, r3
 801a220:	d103      	bne.n	801a22a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a222:	683b      	ldr	r3, [r7, #0]
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	68db      	ldr	r3, [r3, #12]
 801a22e:	60fb      	str	r3, [r7, #12]
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	2b00      	cmp	r3, #0
 801a234:	d1ef      	bne.n	801a216 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a236:	bf00      	nop
 801a238:	3714      	adds	r7, #20
 801a23a:	46bd      	mov	sp, r7
 801a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a240:	4770      	bx	lr
 801a242:	bf00      	nop
 801a244:	2000f2cc 	.word	0x2000f2cc

0801a248 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b082      	sub	sp, #8
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a250:	4915      	ldr	r1, [pc, #84]	@ (801a2a8 <etharp_free_entry+0x60>)
 801a252:	687a      	ldr	r2, [r7, #4]
 801a254:	4613      	mov	r3, r2
 801a256:	005b      	lsls	r3, r3, #1
 801a258:	4413      	add	r3, r2
 801a25a:	00db      	lsls	r3, r3, #3
 801a25c:	440b      	add	r3, r1
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d013      	beq.n	801a28c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a264:	4910      	ldr	r1, [pc, #64]	@ (801a2a8 <etharp_free_entry+0x60>)
 801a266:	687a      	ldr	r2, [r7, #4]
 801a268:	4613      	mov	r3, r2
 801a26a:	005b      	lsls	r3, r3, #1
 801a26c:	4413      	add	r3, r2
 801a26e:	00db      	lsls	r3, r3, #3
 801a270:	440b      	add	r3, r1
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	4618      	mov	r0, r3
 801a276:	f7f8 fe27 	bl	8012ec8 <pbuf_free>
    arp_table[i].q = NULL;
 801a27a:	490b      	ldr	r1, [pc, #44]	@ (801a2a8 <etharp_free_entry+0x60>)
 801a27c:	687a      	ldr	r2, [r7, #4]
 801a27e:	4613      	mov	r3, r2
 801a280:	005b      	lsls	r3, r3, #1
 801a282:	4413      	add	r3, r2
 801a284:	00db      	lsls	r3, r3, #3
 801a286:	440b      	add	r3, r1
 801a288:	2200      	movs	r2, #0
 801a28a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a28c:	4906      	ldr	r1, [pc, #24]	@ (801a2a8 <etharp_free_entry+0x60>)
 801a28e:	687a      	ldr	r2, [r7, #4]
 801a290:	4613      	mov	r3, r2
 801a292:	005b      	lsls	r3, r3, #1
 801a294:	4413      	add	r3, r2
 801a296:	00db      	lsls	r3, r3, #3
 801a298:	440b      	add	r3, r1
 801a29a:	3314      	adds	r3, #20
 801a29c:	2200      	movs	r2, #0
 801a29e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a2a0:	bf00      	nop
 801a2a2:	3708      	adds	r7, #8
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	2000f2d0 	.word	0x2000f2d0

0801a2ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b082      	sub	sp, #8
 801a2b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	607b      	str	r3, [r7, #4]
 801a2b6:	e096      	b.n	801a3e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a2b8:	494f      	ldr	r1, [pc, #316]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a2ba:	687a      	ldr	r2, [r7, #4]
 801a2bc:	4613      	mov	r3, r2
 801a2be:	005b      	lsls	r3, r3, #1
 801a2c0:	4413      	add	r3, r2
 801a2c2:	00db      	lsls	r3, r3, #3
 801a2c4:	440b      	add	r3, r1
 801a2c6:	3314      	adds	r3, #20
 801a2c8:	781b      	ldrb	r3, [r3, #0]
 801a2ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a2cc:	78fb      	ldrb	r3, [r7, #3]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	f000 8086 	beq.w	801a3e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a2d4:	4948      	ldr	r1, [pc, #288]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a2d6:	687a      	ldr	r2, [r7, #4]
 801a2d8:	4613      	mov	r3, r2
 801a2da:	005b      	lsls	r3, r3, #1
 801a2dc:	4413      	add	r3, r2
 801a2de:	00db      	lsls	r3, r3, #3
 801a2e0:	440b      	add	r3, r1
 801a2e2:	3312      	adds	r3, #18
 801a2e4:	881b      	ldrh	r3, [r3, #0]
 801a2e6:	3301      	adds	r3, #1
 801a2e8:	b298      	uxth	r0, r3
 801a2ea:	4943      	ldr	r1, [pc, #268]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a2ec:	687a      	ldr	r2, [r7, #4]
 801a2ee:	4613      	mov	r3, r2
 801a2f0:	005b      	lsls	r3, r3, #1
 801a2f2:	4413      	add	r3, r2
 801a2f4:	00db      	lsls	r3, r3, #3
 801a2f6:	440b      	add	r3, r1
 801a2f8:	3312      	adds	r3, #18
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a2fe:	493e      	ldr	r1, [pc, #248]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a300:	687a      	ldr	r2, [r7, #4]
 801a302:	4613      	mov	r3, r2
 801a304:	005b      	lsls	r3, r3, #1
 801a306:	4413      	add	r3, r2
 801a308:	00db      	lsls	r3, r3, #3
 801a30a:	440b      	add	r3, r1
 801a30c:	3312      	adds	r3, #18
 801a30e:	881b      	ldrh	r3, [r3, #0]
 801a310:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a314:	d215      	bcs.n	801a342 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a316:	4938      	ldr	r1, [pc, #224]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a318:	687a      	ldr	r2, [r7, #4]
 801a31a:	4613      	mov	r3, r2
 801a31c:	005b      	lsls	r3, r3, #1
 801a31e:	4413      	add	r3, r2
 801a320:	00db      	lsls	r3, r3, #3
 801a322:	440b      	add	r3, r1
 801a324:	3314      	adds	r3, #20
 801a326:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a328:	2b01      	cmp	r3, #1
 801a32a:	d10e      	bne.n	801a34a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a32c:	4932      	ldr	r1, [pc, #200]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a32e:	687a      	ldr	r2, [r7, #4]
 801a330:	4613      	mov	r3, r2
 801a332:	005b      	lsls	r3, r3, #1
 801a334:	4413      	add	r3, r2
 801a336:	00db      	lsls	r3, r3, #3
 801a338:	440b      	add	r3, r1
 801a33a:	3312      	adds	r3, #18
 801a33c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a33e:	2b04      	cmp	r3, #4
 801a340:	d903      	bls.n	801a34a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a342:	6878      	ldr	r0, [r7, #4]
 801a344:	f7ff ff80 	bl	801a248 <etharp_free_entry>
 801a348:	e04a      	b.n	801a3e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a34a:	492b      	ldr	r1, [pc, #172]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a34c:	687a      	ldr	r2, [r7, #4]
 801a34e:	4613      	mov	r3, r2
 801a350:	005b      	lsls	r3, r3, #1
 801a352:	4413      	add	r3, r2
 801a354:	00db      	lsls	r3, r3, #3
 801a356:	440b      	add	r3, r1
 801a358:	3314      	adds	r3, #20
 801a35a:	781b      	ldrb	r3, [r3, #0]
 801a35c:	2b03      	cmp	r3, #3
 801a35e:	d10a      	bne.n	801a376 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a360:	4925      	ldr	r1, [pc, #148]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a362:	687a      	ldr	r2, [r7, #4]
 801a364:	4613      	mov	r3, r2
 801a366:	005b      	lsls	r3, r3, #1
 801a368:	4413      	add	r3, r2
 801a36a:	00db      	lsls	r3, r3, #3
 801a36c:	440b      	add	r3, r1
 801a36e:	3314      	adds	r3, #20
 801a370:	2204      	movs	r2, #4
 801a372:	701a      	strb	r2, [r3, #0]
 801a374:	e034      	b.n	801a3e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a376:	4920      	ldr	r1, [pc, #128]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a378:	687a      	ldr	r2, [r7, #4]
 801a37a:	4613      	mov	r3, r2
 801a37c:	005b      	lsls	r3, r3, #1
 801a37e:	4413      	add	r3, r2
 801a380:	00db      	lsls	r3, r3, #3
 801a382:	440b      	add	r3, r1
 801a384:	3314      	adds	r3, #20
 801a386:	781b      	ldrb	r3, [r3, #0]
 801a388:	2b04      	cmp	r3, #4
 801a38a:	d10a      	bne.n	801a3a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a38c:	491a      	ldr	r1, [pc, #104]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a38e:	687a      	ldr	r2, [r7, #4]
 801a390:	4613      	mov	r3, r2
 801a392:	005b      	lsls	r3, r3, #1
 801a394:	4413      	add	r3, r2
 801a396:	00db      	lsls	r3, r3, #3
 801a398:	440b      	add	r3, r1
 801a39a:	3314      	adds	r3, #20
 801a39c:	2202      	movs	r2, #2
 801a39e:	701a      	strb	r2, [r3, #0]
 801a3a0:	e01e      	b.n	801a3e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a3a2:	4915      	ldr	r1, [pc, #84]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a3a4:	687a      	ldr	r2, [r7, #4]
 801a3a6:	4613      	mov	r3, r2
 801a3a8:	005b      	lsls	r3, r3, #1
 801a3aa:	4413      	add	r3, r2
 801a3ac:	00db      	lsls	r3, r3, #3
 801a3ae:	440b      	add	r3, r1
 801a3b0:	3314      	adds	r3, #20
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	2b01      	cmp	r3, #1
 801a3b6:	d113      	bne.n	801a3e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a3b8:	490f      	ldr	r1, [pc, #60]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a3ba:	687a      	ldr	r2, [r7, #4]
 801a3bc:	4613      	mov	r3, r2
 801a3be:	005b      	lsls	r3, r3, #1
 801a3c0:	4413      	add	r3, r2
 801a3c2:	00db      	lsls	r3, r3, #3
 801a3c4:	440b      	add	r3, r1
 801a3c6:	3308      	adds	r3, #8
 801a3c8:	6818      	ldr	r0, [r3, #0]
 801a3ca:	687a      	ldr	r2, [r7, #4]
 801a3cc:	4613      	mov	r3, r2
 801a3ce:	005b      	lsls	r3, r3, #1
 801a3d0:	4413      	add	r3, r2
 801a3d2:	00db      	lsls	r3, r3, #3
 801a3d4:	4a08      	ldr	r2, [pc, #32]	@ (801a3f8 <etharp_tmr+0x14c>)
 801a3d6:	4413      	add	r3, r2
 801a3d8:	3304      	adds	r3, #4
 801a3da:	4619      	mov	r1, r3
 801a3dc:	f000 fe6e 	bl	801b0bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	3301      	adds	r3, #1
 801a3e4:	607b      	str	r3, [r7, #4]
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	2b09      	cmp	r3, #9
 801a3ea:	f77f af65 	ble.w	801a2b8 <etharp_tmr+0xc>
      }
    }
  }
}
 801a3ee:	bf00      	nop
 801a3f0:	bf00      	nop
 801a3f2:	3708      	adds	r7, #8
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	2000f2d0 	.word	0x2000f2d0

0801a3fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b08a      	sub	sp, #40	@ 0x28
 801a400:	af00      	add	r7, sp, #0
 801a402:	60f8      	str	r0, [r7, #12]
 801a404:	460b      	mov	r3, r1
 801a406:	607a      	str	r2, [r7, #4]
 801a408:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a40a:	230a      	movs	r3, #10
 801a40c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a40e:	230a      	movs	r3, #10
 801a410:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a412:	230a      	movs	r3, #10
 801a414:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a416:	2300      	movs	r3, #0
 801a418:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a41a:	230a      	movs	r3, #10
 801a41c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a41e:	2300      	movs	r3, #0
 801a420:	83bb      	strh	r3, [r7, #28]
 801a422:	2300      	movs	r3, #0
 801a424:	837b      	strh	r3, [r7, #26]
 801a426:	2300      	movs	r3, #0
 801a428:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a42a:	2300      	movs	r3, #0
 801a42c:	843b      	strh	r3, [r7, #32]
 801a42e:	e0ae      	b.n	801a58e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a430:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a434:	49a6      	ldr	r1, [pc, #664]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a436:	4613      	mov	r3, r2
 801a438:	005b      	lsls	r3, r3, #1
 801a43a:	4413      	add	r3, r2
 801a43c:	00db      	lsls	r3, r3, #3
 801a43e:	440b      	add	r3, r1
 801a440:	3314      	adds	r3, #20
 801a442:	781b      	ldrb	r3, [r3, #0]
 801a444:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a446:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a44a:	2b0a      	cmp	r3, #10
 801a44c:	d105      	bne.n	801a45a <etharp_find_entry+0x5e>
 801a44e:	7dfb      	ldrb	r3, [r7, #23]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d102      	bne.n	801a45a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a454:	8c3b      	ldrh	r3, [r7, #32]
 801a456:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a458:	e095      	b.n	801a586 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a45a:	7dfb      	ldrb	r3, [r7, #23]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	f000 8092 	beq.w	801a586 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a462:	7dfb      	ldrb	r3, [r7, #23]
 801a464:	2b01      	cmp	r3, #1
 801a466:	d009      	beq.n	801a47c <etharp_find_entry+0x80>
 801a468:	7dfb      	ldrb	r3, [r7, #23]
 801a46a:	2b01      	cmp	r3, #1
 801a46c:	d806      	bhi.n	801a47c <etharp_find_entry+0x80>
 801a46e:	4b99      	ldr	r3, [pc, #612]	@ (801a6d4 <etharp_find_entry+0x2d8>)
 801a470:	f240 1223 	movw	r2, #291	@ 0x123
 801a474:	4998      	ldr	r1, [pc, #608]	@ (801a6d8 <etharp_find_entry+0x2dc>)
 801a476:	4899      	ldr	r0, [pc, #612]	@ (801a6dc <etharp_find_entry+0x2e0>)
 801a478:	f002 fc8e 	bl	801cd98 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d020      	beq.n	801a4c4 <etharp_find_entry+0xc8>
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	6819      	ldr	r1, [r3, #0]
 801a486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a48a:	4891      	ldr	r0, [pc, #580]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a48c:	4613      	mov	r3, r2
 801a48e:	005b      	lsls	r3, r3, #1
 801a490:	4413      	add	r3, r2
 801a492:	00db      	lsls	r3, r3, #3
 801a494:	4403      	add	r3, r0
 801a496:	3304      	adds	r3, #4
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4299      	cmp	r1, r3
 801a49c:	d112      	bne.n	801a4c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d00c      	beq.n	801a4be <etharp_find_entry+0xc2>
 801a4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4a8:	4989      	ldr	r1, [pc, #548]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a4aa:	4613      	mov	r3, r2
 801a4ac:	005b      	lsls	r3, r3, #1
 801a4ae:	4413      	add	r3, r2
 801a4b0:	00db      	lsls	r3, r3, #3
 801a4b2:	440b      	add	r3, r1
 801a4b4:	3308      	adds	r3, #8
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	687a      	ldr	r2, [r7, #4]
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d102      	bne.n	801a4c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a4be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4c2:	e100      	b.n	801a6c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a4c4:	7dfb      	ldrb	r3, [r7, #23]
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d140      	bne.n	801a54c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a4ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4ce:	4980      	ldr	r1, [pc, #512]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a4d0:	4613      	mov	r3, r2
 801a4d2:	005b      	lsls	r3, r3, #1
 801a4d4:	4413      	add	r3, r2
 801a4d6:	00db      	lsls	r3, r3, #3
 801a4d8:	440b      	add	r3, r1
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d01a      	beq.n	801a516 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4e4:	497a      	ldr	r1, [pc, #488]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	440b      	add	r3, r1
 801a4f0:	3312      	adds	r3, #18
 801a4f2:	881b      	ldrh	r3, [r3, #0]
 801a4f4:	8bba      	ldrh	r2, [r7, #28]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	d845      	bhi.n	801a586 <etharp_find_entry+0x18a>
            old_queue = i;
 801a4fa:	8c3b      	ldrh	r3, [r7, #32]
 801a4fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a4fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a502:	4973      	ldr	r1, [pc, #460]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a504:	4613      	mov	r3, r2
 801a506:	005b      	lsls	r3, r3, #1
 801a508:	4413      	add	r3, r2
 801a50a:	00db      	lsls	r3, r3, #3
 801a50c:	440b      	add	r3, r1
 801a50e:	3312      	adds	r3, #18
 801a510:	881b      	ldrh	r3, [r3, #0]
 801a512:	83bb      	strh	r3, [r7, #28]
 801a514:	e037      	b.n	801a586 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a51a:	496d      	ldr	r1, [pc, #436]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a51c:	4613      	mov	r3, r2
 801a51e:	005b      	lsls	r3, r3, #1
 801a520:	4413      	add	r3, r2
 801a522:	00db      	lsls	r3, r3, #3
 801a524:	440b      	add	r3, r1
 801a526:	3312      	adds	r3, #18
 801a528:	881b      	ldrh	r3, [r3, #0]
 801a52a:	8b7a      	ldrh	r2, [r7, #26]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d82a      	bhi.n	801a586 <etharp_find_entry+0x18a>
            old_pending = i;
 801a530:	8c3b      	ldrh	r3, [r7, #32]
 801a532:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a538:	4965      	ldr	r1, [pc, #404]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a53a:	4613      	mov	r3, r2
 801a53c:	005b      	lsls	r3, r3, #1
 801a53e:	4413      	add	r3, r2
 801a540:	00db      	lsls	r3, r3, #3
 801a542:	440b      	add	r3, r1
 801a544:	3312      	adds	r3, #18
 801a546:	881b      	ldrh	r3, [r3, #0]
 801a548:	837b      	strh	r3, [r7, #26]
 801a54a:	e01c      	b.n	801a586 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a54c:	7dfb      	ldrb	r3, [r7, #23]
 801a54e:	2b01      	cmp	r3, #1
 801a550:	d919      	bls.n	801a586 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a552:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a556:	495e      	ldr	r1, [pc, #376]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a558:	4613      	mov	r3, r2
 801a55a:	005b      	lsls	r3, r3, #1
 801a55c:	4413      	add	r3, r2
 801a55e:	00db      	lsls	r3, r3, #3
 801a560:	440b      	add	r3, r1
 801a562:	3312      	adds	r3, #18
 801a564:	881b      	ldrh	r3, [r3, #0]
 801a566:	8b3a      	ldrh	r2, [r7, #24]
 801a568:	429a      	cmp	r2, r3
 801a56a:	d80c      	bhi.n	801a586 <etharp_find_entry+0x18a>
            old_stable = i;
 801a56c:	8c3b      	ldrh	r3, [r7, #32]
 801a56e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a570:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a574:	4956      	ldr	r1, [pc, #344]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a576:	4613      	mov	r3, r2
 801a578:	005b      	lsls	r3, r3, #1
 801a57a:	4413      	add	r3, r2
 801a57c:	00db      	lsls	r3, r3, #3
 801a57e:	440b      	add	r3, r1
 801a580:	3312      	adds	r3, #18
 801a582:	881b      	ldrh	r3, [r3, #0]
 801a584:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a586:	8c3b      	ldrh	r3, [r7, #32]
 801a588:	3301      	adds	r3, #1
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	843b      	strh	r3, [r7, #32]
 801a58e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a592:	2b09      	cmp	r3, #9
 801a594:	f77f af4c 	ble.w	801a430 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a598:	7afb      	ldrb	r3, [r7, #11]
 801a59a:	f003 0302 	and.w	r3, r3, #2
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d108      	bne.n	801a5b4 <etharp_find_entry+0x1b8>
 801a5a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a5a6:	2b0a      	cmp	r3, #10
 801a5a8:	d107      	bne.n	801a5ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a5aa:	7afb      	ldrb	r3, [r7, #11]
 801a5ac:	f003 0301 	and.w	r3, r3, #1
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d102      	bne.n	801a5ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a5b4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5b8:	e085      	b.n	801a6c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a5ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a5be:	2b09      	cmp	r3, #9
 801a5c0:	dc02      	bgt.n	801a5c8 <etharp_find_entry+0x1cc>
    i = empty;
 801a5c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5c4:	843b      	strh	r3, [r7, #32]
 801a5c6:	e039      	b.n	801a63c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a5c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a5cc:	2b09      	cmp	r3, #9
 801a5ce:	dc14      	bgt.n	801a5fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a5d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a5d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a5d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5d8:	493d      	ldr	r1, [pc, #244]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a5da:	4613      	mov	r3, r2
 801a5dc:	005b      	lsls	r3, r3, #1
 801a5de:	4413      	add	r3, r2
 801a5e0:	00db      	lsls	r3, r3, #3
 801a5e2:	440b      	add	r3, r1
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d018      	beq.n	801a61c <etharp_find_entry+0x220>
 801a5ea:	4b3a      	ldr	r3, [pc, #232]	@ (801a6d4 <etharp_find_entry+0x2d8>)
 801a5ec:	f240 126d 	movw	r2, #365	@ 0x16d
 801a5f0:	493b      	ldr	r1, [pc, #236]	@ (801a6e0 <etharp_find_entry+0x2e4>)
 801a5f2:	483a      	ldr	r0, [pc, #232]	@ (801a6dc <etharp_find_entry+0x2e0>)
 801a5f4:	f002 fbd0 	bl	801cd98 <iprintf>
 801a5f8:	e010      	b.n	801a61c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a5fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a5fe:	2b09      	cmp	r3, #9
 801a600:	dc02      	bgt.n	801a608 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a602:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a604:	843b      	strh	r3, [r7, #32]
 801a606:	e009      	b.n	801a61c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a608:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a60c:	2b09      	cmp	r3, #9
 801a60e:	dc02      	bgt.n	801a616 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a610:	8bfb      	ldrh	r3, [r7, #30]
 801a612:	843b      	strh	r3, [r7, #32]
 801a614:	e002      	b.n	801a61c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a616:	f04f 33ff 	mov.w	r3, #4294967295
 801a61a:	e054      	b.n	801a6c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a61c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a620:	2b09      	cmp	r3, #9
 801a622:	dd06      	ble.n	801a632 <etharp_find_entry+0x236>
 801a624:	4b2b      	ldr	r3, [pc, #172]	@ (801a6d4 <etharp_find_entry+0x2d8>)
 801a626:	f240 127f 	movw	r2, #383	@ 0x17f
 801a62a:	492e      	ldr	r1, [pc, #184]	@ (801a6e4 <etharp_find_entry+0x2e8>)
 801a62c:	482b      	ldr	r0, [pc, #172]	@ (801a6dc <etharp_find_entry+0x2e0>)
 801a62e:	f002 fbb3 	bl	801cd98 <iprintf>
    etharp_free_entry(i);
 801a632:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a636:	4618      	mov	r0, r3
 801a638:	f7ff fe06 	bl	801a248 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a63c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a640:	2b09      	cmp	r3, #9
 801a642:	dd06      	ble.n	801a652 <etharp_find_entry+0x256>
 801a644:	4b23      	ldr	r3, [pc, #140]	@ (801a6d4 <etharp_find_entry+0x2d8>)
 801a646:	f240 1283 	movw	r2, #387	@ 0x183
 801a64a:	4926      	ldr	r1, [pc, #152]	@ (801a6e4 <etharp_find_entry+0x2e8>)
 801a64c:	4823      	ldr	r0, [pc, #140]	@ (801a6dc <etharp_find_entry+0x2e0>)
 801a64e:	f002 fba3 	bl	801cd98 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a656:	491e      	ldr	r1, [pc, #120]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a658:	4613      	mov	r3, r2
 801a65a:	005b      	lsls	r3, r3, #1
 801a65c:	4413      	add	r3, r2
 801a65e:	00db      	lsls	r3, r3, #3
 801a660:	440b      	add	r3, r1
 801a662:	3314      	adds	r3, #20
 801a664:	781b      	ldrb	r3, [r3, #0]
 801a666:	2b00      	cmp	r3, #0
 801a668:	d006      	beq.n	801a678 <etharp_find_entry+0x27c>
 801a66a:	4b1a      	ldr	r3, [pc, #104]	@ (801a6d4 <etharp_find_entry+0x2d8>)
 801a66c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a670:	491d      	ldr	r1, [pc, #116]	@ (801a6e8 <etharp_find_entry+0x2ec>)
 801a672:	481a      	ldr	r0, [pc, #104]	@ (801a6dc <etharp_find_entry+0x2e0>)
 801a674:	f002 fb90 	bl	801cd98 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d00b      	beq.n	801a696 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a67e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	6819      	ldr	r1, [r3, #0]
 801a686:	4812      	ldr	r0, [pc, #72]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a688:	4613      	mov	r3, r2
 801a68a:	005b      	lsls	r3, r3, #1
 801a68c:	4413      	add	r3, r2
 801a68e:	00db      	lsls	r3, r3, #3
 801a690:	4403      	add	r3, r0
 801a692:	3304      	adds	r3, #4
 801a694:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a69a:	490d      	ldr	r1, [pc, #52]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a69c:	4613      	mov	r3, r2
 801a69e:	005b      	lsls	r3, r3, #1
 801a6a0:	4413      	add	r3, r2
 801a6a2:	00db      	lsls	r3, r3, #3
 801a6a4:	440b      	add	r3, r1
 801a6a6:	3312      	adds	r3, #18
 801a6a8:	2200      	movs	r2, #0
 801a6aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a6ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6b0:	4907      	ldr	r1, [pc, #28]	@ (801a6d0 <etharp_find_entry+0x2d4>)
 801a6b2:	4613      	mov	r3, r2
 801a6b4:	005b      	lsls	r3, r3, #1
 801a6b6:	4413      	add	r3, r2
 801a6b8:	00db      	lsls	r3, r3, #3
 801a6ba:	440b      	add	r3, r1
 801a6bc:	3308      	adds	r3, #8
 801a6be:	687a      	ldr	r2, [r7, #4]
 801a6c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a6c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3728      	adds	r7, #40	@ 0x28
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	2000f2d0 	.word	0x2000f2d0
 801a6d4:	080212bc 	.word	0x080212bc
 801a6d8:	080212f4 	.word	0x080212f4
 801a6dc:	08021334 	.word	0x08021334
 801a6e0:	0802135c 	.word	0x0802135c
 801a6e4:	08021374 	.word	0x08021374
 801a6e8:	08021388 	.word	0x08021388

0801a6ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b088      	sub	sp, #32
 801a6f0:	af02      	add	r7, sp, #8
 801a6f2:	60f8      	str	r0, [r7, #12]
 801a6f4:	60b9      	str	r1, [r7, #8]
 801a6f6:	607a      	str	r2, [r7, #4]
 801a6f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a700:	2b06      	cmp	r3, #6
 801a702:	d006      	beq.n	801a712 <etharp_update_arp_entry+0x26>
 801a704:	4b48      	ldr	r3, [pc, #288]	@ (801a828 <etharp_update_arp_entry+0x13c>)
 801a706:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a70a:	4948      	ldr	r1, [pc, #288]	@ (801a82c <etharp_update_arp_entry+0x140>)
 801a70c:	4848      	ldr	r0, [pc, #288]	@ (801a830 <etharp_update_arp_entry+0x144>)
 801a70e:	f002 fb43 	bl	801cd98 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a712:	68bb      	ldr	r3, [r7, #8]
 801a714:	2b00      	cmp	r3, #0
 801a716:	d012      	beq.n	801a73e <etharp_update_arp_entry+0x52>
 801a718:	68bb      	ldr	r3, [r7, #8]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d00e      	beq.n	801a73e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a720:	68bb      	ldr	r3, [r7, #8]
 801a722:	681b      	ldr	r3, [r3, #0]
 801a724:	68f9      	ldr	r1, [r7, #12]
 801a726:	4618      	mov	r0, r3
 801a728:	f001 f8fe 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801a72c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d105      	bne.n	801a73e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a732:	68bb      	ldr	r3, [r7, #8]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a73a:	2be0      	cmp	r3, #224	@ 0xe0
 801a73c:	d102      	bne.n	801a744 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a73e:	f06f 030f 	mvn.w	r3, #15
 801a742:	e06c      	b.n	801a81e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a744:	78fb      	ldrb	r3, [r7, #3]
 801a746:	68fa      	ldr	r2, [r7, #12]
 801a748:	4619      	mov	r1, r3
 801a74a:	68b8      	ldr	r0, [r7, #8]
 801a74c:	f7ff fe56 	bl	801a3fc <etharp_find_entry>
 801a750:	4603      	mov	r3, r0
 801a752:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a754:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a758:	2b00      	cmp	r3, #0
 801a75a:	da02      	bge.n	801a762 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a75c:	8afb      	ldrh	r3, [r7, #22]
 801a75e:	b25b      	sxtb	r3, r3
 801a760:	e05d      	b.n	801a81e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a762:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a766:	4933      	ldr	r1, [pc, #204]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a768:	4613      	mov	r3, r2
 801a76a:	005b      	lsls	r3, r3, #1
 801a76c:	4413      	add	r3, r2
 801a76e:	00db      	lsls	r3, r3, #3
 801a770:	440b      	add	r3, r1
 801a772:	3314      	adds	r3, #20
 801a774:	2202      	movs	r2, #2
 801a776:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a778:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a77c:	492d      	ldr	r1, [pc, #180]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a77e:	4613      	mov	r3, r2
 801a780:	005b      	lsls	r3, r3, #1
 801a782:	4413      	add	r3, r2
 801a784:	00db      	lsls	r3, r3, #3
 801a786:	440b      	add	r3, r1
 801a788:	3308      	adds	r3, #8
 801a78a:	68fa      	ldr	r2, [r7, #12]
 801a78c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a78e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a792:	4613      	mov	r3, r2
 801a794:	005b      	lsls	r3, r3, #1
 801a796:	4413      	add	r3, r2
 801a798:	00db      	lsls	r3, r3, #3
 801a79a:	3308      	adds	r3, #8
 801a79c:	4a25      	ldr	r2, [pc, #148]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a79e:	4413      	add	r3, r2
 801a7a0:	3304      	adds	r3, #4
 801a7a2:	2206      	movs	r2, #6
 801a7a4:	6879      	ldr	r1, [r7, #4]
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f002 fc7f 	bl	801d0aa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a7ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7b0:	4920      	ldr	r1, [pc, #128]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a7b2:	4613      	mov	r3, r2
 801a7b4:	005b      	lsls	r3, r3, #1
 801a7b6:	4413      	add	r3, r2
 801a7b8:	00db      	lsls	r3, r3, #3
 801a7ba:	440b      	add	r3, r1
 801a7bc:	3312      	adds	r3, #18
 801a7be:	2200      	movs	r2, #0
 801a7c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a7c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7c6:	491b      	ldr	r1, [pc, #108]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a7c8:	4613      	mov	r3, r2
 801a7ca:	005b      	lsls	r3, r3, #1
 801a7cc:	4413      	add	r3, r2
 801a7ce:	00db      	lsls	r3, r3, #3
 801a7d0:	440b      	add	r3, r1
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d021      	beq.n	801a81c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a7d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7dc:	4915      	ldr	r1, [pc, #84]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a7de:	4613      	mov	r3, r2
 801a7e0:	005b      	lsls	r3, r3, #1
 801a7e2:	4413      	add	r3, r2
 801a7e4:	00db      	lsls	r3, r3, #3
 801a7e6:	440b      	add	r3, r1
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a7ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7f0:	4910      	ldr	r1, [pc, #64]	@ (801a834 <etharp_update_arp_entry+0x148>)
 801a7f2:	4613      	mov	r3, r2
 801a7f4:	005b      	lsls	r3, r3, #1
 801a7f6:	4413      	add	r3, r2
 801a7f8:	00db      	lsls	r3, r3, #3
 801a7fa:	440b      	add	r3, r1
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a806:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a80a:	9300      	str	r3, [sp, #0]
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	6939      	ldr	r1, [r7, #16]
 801a810:	68f8      	ldr	r0, [r7, #12]
 801a812:	f001 ff97 	bl	801c744 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a816:	6938      	ldr	r0, [r7, #16]
 801a818:	f7f8 fb56 	bl	8012ec8 <pbuf_free>
  }
  return ERR_OK;
 801a81c:	2300      	movs	r3, #0
}
 801a81e:	4618      	mov	r0, r3
 801a820:	3718      	adds	r7, #24
 801a822:	46bd      	mov	sp, r7
 801a824:	bd80      	pop	{r7, pc}
 801a826:	bf00      	nop
 801a828:	080212bc 	.word	0x080212bc
 801a82c:	080213b4 	.word	0x080213b4
 801a830:	08021334 	.word	0x08021334
 801a834:	2000f2d0 	.word	0x2000f2d0

0801a838 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a838:	b580      	push	{r7, lr}
 801a83a:	b084      	sub	sp, #16
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a840:	2300      	movs	r3, #0
 801a842:	60fb      	str	r3, [r7, #12]
 801a844:	e01e      	b.n	801a884 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a846:	4913      	ldr	r1, [pc, #76]	@ (801a894 <etharp_cleanup_netif+0x5c>)
 801a848:	68fa      	ldr	r2, [r7, #12]
 801a84a:	4613      	mov	r3, r2
 801a84c:	005b      	lsls	r3, r3, #1
 801a84e:	4413      	add	r3, r2
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	440b      	add	r3, r1
 801a854:	3314      	adds	r3, #20
 801a856:	781b      	ldrb	r3, [r3, #0]
 801a858:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a85a:	7afb      	ldrb	r3, [r7, #11]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d00e      	beq.n	801a87e <etharp_cleanup_netif+0x46>
 801a860:	490c      	ldr	r1, [pc, #48]	@ (801a894 <etharp_cleanup_netif+0x5c>)
 801a862:	68fa      	ldr	r2, [r7, #12]
 801a864:	4613      	mov	r3, r2
 801a866:	005b      	lsls	r3, r3, #1
 801a868:	4413      	add	r3, r2
 801a86a:	00db      	lsls	r3, r3, #3
 801a86c:	440b      	add	r3, r1
 801a86e:	3308      	adds	r3, #8
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	687a      	ldr	r2, [r7, #4]
 801a874:	429a      	cmp	r2, r3
 801a876:	d102      	bne.n	801a87e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a878:	68f8      	ldr	r0, [r7, #12]
 801a87a:	f7ff fce5 	bl	801a248 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	3301      	adds	r3, #1
 801a882:	60fb      	str	r3, [r7, #12]
 801a884:	68fb      	ldr	r3, [r7, #12]
 801a886:	2b09      	cmp	r3, #9
 801a888:	dddd      	ble.n	801a846 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a88a:	bf00      	nop
 801a88c:	bf00      	nop
 801a88e:	3710      	adds	r7, #16
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}
 801a894:	2000f2d0 	.word	0x2000f2d0

0801a898 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a898:	b5b0      	push	{r4, r5, r7, lr}
 801a89a:	b08a      	sub	sp, #40	@ 0x28
 801a89c:	af04      	add	r7, sp, #16
 801a89e:	6078      	str	r0, [r7, #4]
 801a8a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a8a2:	683b      	ldr	r3, [r7, #0]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d107      	bne.n	801a8b8 <etharp_input+0x20>
 801a8a8:	4b3d      	ldr	r3, [pc, #244]	@ (801a9a0 <etharp_input+0x108>)
 801a8aa:	f240 228a 	movw	r2, #650	@ 0x28a
 801a8ae:	493d      	ldr	r1, [pc, #244]	@ (801a9a4 <etharp_input+0x10c>)
 801a8b0:	483d      	ldr	r0, [pc, #244]	@ (801a9a8 <etharp_input+0x110>)
 801a8b2:	f002 fa71 	bl	801cd98 <iprintf>
 801a8b6:	e06f      	b.n	801a998 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	685b      	ldr	r3, [r3, #4]
 801a8bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a8be:	693b      	ldr	r3, [r7, #16]
 801a8c0:	881b      	ldrh	r3, [r3, #0]
 801a8c2:	b29b      	uxth	r3, r3
 801a8c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a8c8:	d10c      	bne.n	801a8e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a8ca:	693b      	ldr	r3, [r7, #16]
 801a8cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a8ce:	2b06      	cmp	r3, #6
 801a8d0:	d108      	bne.n	801a8e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a8d2:	693b      	ldr	r3, [r7, #16]
 801a8d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a8d6:	2b04      	cmp	r3, #4
 801a8d8:	d104      	bne.n	801a8e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a8da:	693b      	ldr	r3, [r7, #16]
 801a8dc:	885b      	ldrh	r3, [r3, #2]
 801a8de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a8e0:	2b08      	cmp	r3, #8
 801a8e2:	d003      	beq.n	801a8ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f7f8 faef 	bl	8012ec8 <pbuf_free>
    return;
 801a8ea:	e055      	b.n	801a998 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a8ec:	693b      	ldr	r3, [r7, #16]
 801a8ee:	330e      	adds	r3, #14
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a8f4:	693b      	ldr	r3, [r7, #16]
 801a8f6:	3318      	adds	r3, #24
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	3304      	adds	r3, #4
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	2b00      	cmp	r3, #0
 801a904:	d102      	bne.n	801a90c <etharp_input+0x74>
    for_us = 0;
 801a906:	2300      	movs	r3, #0
 801a908:	75fb      	strb	r3, [r7, #23]
 801a90a:	e009      	b.n	801a920 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a90c:	68ba      	ldr	r2, [r7, #8]
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	3304      	adds	r3, #4
 801a912:	681b      	ldr	r3, [r3, #0]
 801a914:	429a      	cmp	r2, r3
 801a916:	bf0c      	ite	eq
 801a918:	2301      	moveq	r3, #1
 801a91a:	2300      	movne	r3, #0
 801a91c:	b2db      	uxtb	r3, r3
 801a91e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	f103 0208 	add.w	r2, r3, #8
 801a926:	7dfb      	ldrb	r3, [r7, #23]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d001      	beq.n	801a930 <etharp_input+0x98>
 801a92c:	2301      	movs	r3, #1
 801a92e:	e000      	b.n	801a932 <etharp_input+0x9a>
 801a930:	2302      	movs	r3, #2
 801a932:	f107 010c 	add.w	r1, r7, #12
 801a936:	6838      	ldr	r0, [r7, #0]
 801a938:	f7ff fed8 	bl	801a6ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a93c:	693b      	ldr	r3, [r7, #16]
 801a93e:	88db      	ldrh	r3, [r3, #6]
 801a940:	b29b      	uxth	r3, r3
 801a942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a946:	d003      	beq.n	801a950 <etharp_input+0xb8>
 801a948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a94c:	d01e      	beq.n	801a98c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a94e:	e020      	b.n	801a992 <etharp_input+0xfa>
      if (for_us) {
 801a950:	7dfb      	ldrb	r3, [r7, #23]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d01c      	beq.n	801a990 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a95c:	693b      	ldr	r3, [r7, #16]
 801a95e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a968:	683b      	ldr	r3, [r7, #0]
 801a96a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a96c:	693a      	ldr	r2, [r7, #16]
 801a96e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a970:	2102      	movs	r1, #2
 801a972:	9103      	str	r1, [sp, #12]
 801a974:	f107 010c 	add.w	r1, r7, #12
 801a978:	9102      	str	r1, [sp, #8]
 801a97a:	9201      	str	r2, [sp, #4]
 801a97c:	9300      	str	r3, [sp, #0]
 801a97e:	462b      	mov	r3, r5
 801a980:	4622      	mov	r2, r4
 801a982:	4601      	mov	r1, r0
 801a984:	6838      	ldr	r0, [r7, #0]
 801a986:	f000 faeb 	bl	801af60 <etharp_raw>
      break;
 801a98a:	e001      	b.n	801a990 <etharp_input+0xf8>
      break;
 801a98c:	bf00      	nop
 801a98e:	e000      	b.n	801a992 <etharp_input+0xfa>
      break;
 801a990:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a992:	6878      	ldr	r0, [r7, #4]
 801a994:	f7f8 fa98 	bl	8012ec8 <pbuf_free>
}
 801a998:	3718      	adds	r7, #24
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bdb0      	pop	{r4, r5, r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	080212bc 	.word	0x080212bc
 801a9a4:	0802140c 	.word	0x0802140c
 801a9a8:	08021334 	.word	0x08021334

0801a9ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b086      	sub	sp, #24
 801a9b0:	af02      	add	r7, sp, #8
 801a9b2:	60f8      	str	r0, [r7, #12]
 801a9b4:	60b9      	str	r1, [r7, #8]
 801a9b6:	4613      	mov	r3, r2
 801a9b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a9ba:	79fa      	ldrb	r2, [r7, #7]
 801a9bc:	4944      	ldr	r1, [pc, #272]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801a9be:	4613      	mov	r3, r2
 801a9c0:	005b      	lsls	r3, r3, #1
 801a9c2:	4413      	add	r3, r2
 801a9c4:	00db      	lsls	r3, r3, #3
 801a9c6:	440b      	add	r3, r1
 801a9c8:	3314      	adds	r3, #20
 801a9ca:	781b      	ldrb	r3, [r3, #0]
 801a9cc:	2b01      	cmp	r3, #1
 801a9ce:	d806      	bhi.n	801a9de <etharp_output_to_arp_index+0x32>
 801a9d0:	4b40      	ldr	r3, [pc, #256]	@ (801aad4 <etharp_output_to_arp_index+0x128>)
 801a9d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a9d6:	4940      	ldr	r1, [pc, #256]	@ (801aad8 <etharp_output_to_arp_index+0x12c>)
 801a9d8:	4840      	ldr	r0, [pc, #256]	@ (801aadc <etharp_output_to_arp_index+0x130>)
 801a9da:	f002 f9dd 	bl	801cd98 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a9de:	79fa      	ldrb	r2, [r7, #7]
 801a9e0:	493b      	ldr	r1, [pc, #236]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801a9e2:	4613      	mov	r3, r2
 801a9e4:	005b      	lsls	r3, r3, #1
 801a9e6:	4413      	add	r3, r2
 801a9e8:	00db      	lsls	r3, r3, #3
 801a9ea:	440b      	add	r3, r1
 801a9ec:	3314      	adds	r3, #20
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	2b02      	cmp	r3, #2
 801a9f2:	d153      	bne.n	801aa9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a9f4:	79fa      	ldrb	r2, [r7, #7]
 801a9f6:	4936      	ldr	r1, [pc, #216]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	005b      	lsls	r3, r3, #1
 801a9fc:	4413      	add	r3, r2
 801a9fe:	00db      	lsls	r3, r3, #3
 801aa00:	440b      	add	r3, r1
 801aa02:	3312      	adds	r3, #18
 801aa04:	881b      	ldrh	r3, [r3, #0]
 801aa06:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801aa0a:	d919      	bls.n	801aa40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801aa0c:	79fa      	ldrb	r2, [r7, #7]
 801aa0e:	4613      	mov	r3, r2
 801aa10:	005b      	lsls	r3, r3, #1
 801aa12:	4413      	add	r3, r2
 801aa14:	00db      	lsls	r3, r3, #3
 801aa16:	4a2e      	ldr	r2, [pc, #184]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa18:	4413      	add	r3, r2
 801aa1a:	3304      	adds	r3, #4
 801aa1c:	4619      	mov	r1, r3
 801aa1e:	68f8      	ldr	r0, [r7, #12]
 801aa20:	f000 fb4c 	bl	801b0bc <etharp_request>
 801aa24:	4603      	mov	r3, r0
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d138      	bne.n	801aa9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aa2a:	79fa      	ldrb	r2, [r7, #7]
 801aa2c:	4928      	ldr	r1, [pc, #160]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa2e:	4613      	mov	r3, r2
 801aa30:	005b      	lsls	r3, r3, #1
 801aa32:	4413      	add	r3, r2
 801aa34:	00db      	lsls	r3, r3, #3
 801aa36:	440b      	add	r3, r1
 801aa38:	3314      	adds	r3, #20
 801aa3a:	2203      	movs	r2, #3
 801aa3c:	701a      	strb	r2, [r3, #0]
 801aa3e:	e02d      	b.n	801aa9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801aa40:	79fa      	ldrb	r2, [r7, #7]
 801aa42:	4923      	ldr	r1, [pc, #140]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa44:	4613      	mov	r3, r2
 801aa46:	005b      	lsls	r3, r3, #1
 801aa48:	4413      	add	r3, r2
 801aa4a:	00db      	lsls	r3, r3, #3
 801aa4c:	440b      	add	r3, r1
 801aa4e:	3312      	adds	r3, #18
 801aa50:	881b      	ldrh	r3, [r3, #0]
 801aa52:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801aa56:	d321      	bcc.n	801aa9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801aa58:	79fa      	ldrb	r2, [r7, #7]
 801aa5a:	4613      	mov	r3, r2
 801aa5c:	005b      	lsls	r3, r3, #1
 801aa5e:	4413      	add	r3, r2
 801aa60:	00db      	lsls	r3, r3, #3
 801aa62:	4a1b      	ldr	r2, [pc, #108]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa64:	4413      	add	r3, r2
 801aa66:	1d19      	adds	r1, r3, #4
 801aa68:	79fa      	ldrb	r2, [r7, #7]
 801aa6a:	4613      	mov	r3, r2
 801aa6c:	005b      	lsls	r3, r3, #1
 801aa6e:	4413      	add	r3, r2
 801aa70:	00db      	lsls	r3, r3, #3
 801aa72:	3308      	adds	r3, #8
 801aa74:	4a16      	ldr	r2, [pc, #88]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa76:	4413      	add	r3, r2
 801aa78:	3304      	adds	r3, #4
 801aa7a:	461a      	mov	r2, r3
 801aa7c:	68f8      	ldr	r0, [r7, #12]
 801aa7e:	f000 fafb 	bl	801b078 <etharp_request_dst>
 801aa82:	4603      	mov	r3, r0
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d109      	bne.n	801aa9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aa88:	79fa      	ldrb	r2, [r7, #7]
 801aa8a:	4911      	ldr	r1, [pc, #68]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aa8c:	4613      	mov	r3, r2
 801aa8e:	005b      	lsls	r3, r3, #1
 801aa90:	4413      	add	r3, r2
 801aa92:	00db      	lsls	r3, r3, #3
 801aa94:	440b      	add	r3, r1
 801aa96:	3314      	adds	r3, #20
 801aa98:	2203      	movs	r2, #3
 801aa9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801aaa2:	79fa      	ldrb	r2, [r7, #7]
 801aaa4:	4613      	mov	r3, r2
 801aaa6:	005b      	lsls	r3, r3, #1
 801aaa8:	4413      	add	r3, r2
 801aaaa:	00db      	lsls	r3, r3, #3
 801aaac:	3308      	adds	r3, #8
 801aaae:	4a08      	ldr	r2, [pc, #32]	@ (801aad0 <etharp_output_to_arp_index+0x124>)
 801aab0:	4413      	add	r3, r2
 801aab2:	3304      	adds	r3, #4
 801aab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aab8:	9200      	str	r2, [sp, #0]
 801aaba:	460a      	mov	r2, r1
 801aabc:	68b9      	ldr	r1, [r7, #8]
 801aabe:	68f8      	ldr	r0, [r7, #12]
 801aac0:	f001 fe40 	bl	801c744 <ethernet_output>
 801aac4:	4603      	mov	r3, r0
}
 801aac6:	4618      	mov	r0, r3
 801aac8:	3710      	adds	r7, #16
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bd80      	pop	{r7, pc}
 801aace:	bf00      	nop
 801aad0:	2000f2d0 	.word	0x2000f2d0
 801aad4:	080212bc 	.word	0x080212bc
 801aad8:	0802142c 	.word	0x0802142c
 801aadc:	08021334 	.word	0x08021334

0801aae0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	b08a      	sub	sp, #40	@ 0x28
 801aae4:	af02      	add	r7, sp, #8
 801aae6:	60f8      	str	r0, [r7, #12]
 801aae8:	60b9      	str	r1, [r7, #8]
 801aaea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d106      	bne.n	801ab04 <etharp_output+0x24>
 801aaf6:	4b73      	ldr	r3, [pc, #460]	@ (801acc4 <etharp_output+0x1e4>)
 801aaf8:	f240 321e 	movw	r2, #798	@ 0x31e
 801aafc:	4972      	ldr	r1, [pc, #456]	@ (801acc8 <etharp_output+0x1e8>)
 801aafe:	4873      	ldr	r0, [pc, #460]	@ (801accc <etharp_output+0x1ec>)
 801ab00:	f002 f94a 	bl	801cd98 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d106      	bne.n	801ab18 <etharp_output+0x38>
 801ab0a:	4b6e      	ldr	r3, [pc, #440]	@ (801acc4 <etharp_output+0x1e4>)
 801ab0c:	f240 321f 	movw	r2, #799	@ 0x31f
 801ab10:	496f      	ldr	r1, [pc, #444]	@ (801acd0 <etharp_output+0x1f0>)
 801ab12:	486e      	ldr	r0, [pc, #440]	@ (801accc <etharp_output+0x1ec>)
 801ab14:	f002 f940 	bl	801cd98 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d106      	bne.n	801ab2c <etharp_output+0x4c>
 801ab1e:	4b69      	ldr	r3, [pc, #420]	@ (801acc4 <etharp_output+0x1e4>)
 801ab20:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ab24:	496b      	ldr	r1, [pc, #428]	@ (801acd4 <etharp_output+0x1f4>)
 801ab26:	4869      	ldr	r0, [pc, #420]	@ (801accc <etharp_output+0x1ec>)
 801ab28:	f002 f936 	bl	801cd98 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	68f9      	ldr	r1, [r7, #12]
 801ab32:	4618      	mov	r0, r3
 801ab34:	f000 fef8 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801ab38:	4603      	mov	r3, r0
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d002      	beq.n	801ab44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ab3e:	4b66      	ldr	r3, [pc, #408]	@ (801acd8 <etharp_output+0x1f8>)
 801ab40:	61fb      	str	r3, [r7, #28]
 801ab42:	e0af      	b.n	801aca4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ab4c:	2be0      	cmp	r3, #224	@ 0xe0
 801ab4e:	d118      	bne.n	801ab82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ab50:	2301      	movs	r3, #1
 801ab52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ab54:	2300      	movs	r3, #0
 801ab56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ab58:	235e      	movs	r3, #94	@ 0x5e
 801ab5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	3301      	adds	r3, #1
 801ab60:	781b      	ldrb	r3, [r3, #0]
 801ab62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ab66:	b2db      	uxtb	r3, r3
 801ab68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	3302      	adds	r3, #2
 801ab6e:	781b      	ldrb	r3, [r3, #0]
 801ab70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	3303      	adds	r3, #3
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ab7a:	f107 0310 	add.w	r3, r7, #16
 801ab7e:	61fb      	str	r3, [r7, #28]
 801ab80:	e090      	b.n	801aca4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	68fb      	ldr	r3, [r7, #12]
 801ab88:	3304      	adds	r3, #4
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	405a      	eors	r2, r3
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	3308      	adds	r3, #8
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	4013      	ands	r3, r2
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d012      	beq.n	801abc0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aba0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801aba4:	4293      	cmp	r3, r2
 801aba6:	d00b      	beq.n	801abc0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	330c      	adds	r3, #12
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d003      	beq.n	801abba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	330c      	adds	r3, #12
 801abb6:	61bb      	str	r3, [r7, #24]
 801abb8:	e002      	b.n	801abc0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801abba:	f06f 0303 	mvn.w	r3, #3
 801abbe:	e07d      	b.n	801acbc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801abc0:	4b46      	ldr	r3, [pc, #280]	@ (801acdc <etharp_output+0x1fc>)
 801abc2:	781b      	ldrb	r3, [r3, #0]
 801abc4:	4619      	mov	r1, r3
 801abc6:	4a46      	ldr	r2, [pc, #280]	@ (801ace0 <etharp_output+0x200>)
 801abc8:	460b      	mov	r3, r1
 801abca:	005b      	lsls	r3, r3, #1
 801abcc:	440b      	add	r3, r1
 801abce:	00db      	lsls	r3, r3, #3
 801abd0:	4413      	add	r3, r2
 801abd2:	3314      	adds	r3, #20
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	2b01      	cmp	r3, #1
 801abd8:	d925      	bls.n	801ac26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801abda:	4b40      	ldr	r3, [pc, #256]	@ (801acdc <etharp_output+0x1fc>)
 801abdc:	781b      	ldrb	r3, [r3, #0]
 801abde:	4619      	mov	r1, r3
 801abe0:	4a3f      	ldr	r2, [pc, #252]	@ (801ace0 <etharp_output+0x200>)
 801abe2:	460b      	mov	r3, r1
 801abe4:	005b      	lsls	r3, r3, #1
 801abe6:	440b      	add	r3, r1
 801abe8:	00db      	lsls	r3, r3, #3
 801abea:	4413      	add	r3, r2
 801abec:	3308      	adds	r3, #8
 801abee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801abf0:	68fa      	ldr	r2, [r7, #12]
 801abf2:	429a      	cmp	r2, r3
 801abf4:	d117      	bne.n	801ac26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801abf6:	69bb      	ldr	r3, [r7, #24]
 801abf8:	681a      	ldr	r2, [r3, #0]
 801abfa:	4b38      	ldr	r3, [pc, #224]	@ (801acdc <etharp_output+0x1fc>)
 801abfc:	781b      	ldrb	r3, [r3, #0]
 801abfe:	4618      	mov	r0, r3
 801ac00:	4937      	ldr	r1, [pc, #220]	@ (801ace0 <etharp_output+0x200>)
 801ac02:	4603      	mov	r3, r0
 801ac04:	005b      	lsls	r3, r3, #1
 801ac06:	4403      	add	r3, r0
 801ac08:	00db      	lsls	r3, r3, #3
 801ac0a:	440b      	add	r3, r1
 801ac0c:	3304      	adds	r3, #4
 801ac0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d108      	bne.n	801ac26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ac14:	4b31      	ldr	r3, [pc, #196]	@ (801acdc <etharp_output+0x1fc>)
 801ac16:	781b      	ldrb	r3, [r3, #0]
 801ac18:	461a      	mov	r2, r3
 801ac1a:	68b9      	ldr	r1, [r7, #8]
 801ac1c:	68f8      	ldr	r0, [r7, #12]
 801ac1e:	f7ff fec5 	bl	801a9ac <etharp_output_to_arp_index>
 801ac22:	4603      	mov	r3, r0
 801ac24:	e04a      	b.n	801acbc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ac26:	2300      	movs	r3, #0
 801ac28:	75fb      	strb	r3, [r7, #23]
 801ac2a:	e031      	b.n	801ac90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac2c:	7dfa      	ldrb	r2, [r7, #23]
 801ac2e:	492c      	ldr	r1, [pc, #176]	@ (801ace0 <etharp_output+0x200>)
 801ac30:	4613      	mov	r3, r2
 801ac32:	005b      	lsls	r3, r3, #1
 801ac34:	4413      	add	r3, r2
 801ac36:	00db      	lsls	r3, r3, #3
 801ac38:	440b      	add	r3, r1
 801ac3a:	3314      	adds	r3, #20
 801ac3c:	781b      	ldrb	r3, [r3, #0]
 801ac3e:	2b01      	cmp	r3, #1
 801ac40:	d923      	bls.n	801ac8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ac42:	7dfa      	ldrb	r2, [r7, #23]
 801ac44:	4926      	ldr	r1, [pc, #152]	@ (801ace0 <etharp_output+0x200>)
 801ac46:	4613      	mov	r3, r2
 801ac48:	005b      	lsls	r3, r3, #1
 801ac4a:	4413      	add	r3, r2
 801ac4c:	00db      	lsls	r3, r3, #3
 801ac4e:	440b      	add	r3, r1
 801ac50:	3308      	adds	r3, #8
 801ac52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac54:	68fa      	ldr	r2, [r7, #12]
 801ac56:	429a      	cmp	r2, r3
 801ac58:	d117      	bne.n	801ac8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ac5a:	69bb      	ldr	r3, [r7, #24]
 801ac5c:	6819      	ldr	r1, [r3, #0]
 801ac5e:	7dfa      	ldrb	r2, [r7, #23]
 801ac60:	481f      	ldr	r0, [pc, #124]	@ (801ace0 <etharp_output+0x200>)
 801ac62:	4613      	mov	r3, r2
 801ac64:	005b      	lsls	r3, r3, #1
 801ac66:	4413      	add	r3, r2
 801ac68:	00db      	lsls	r3, r3, #3
 801ac6a:	4403      	add	r3, r0
 801ac6c:	3304      	adds	r3, #4
 801ac6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ac70:	4299      	cmp	r1, r3
 801ac72:	d10a      	bne.n	801ac8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ac74:	4a19      	ldr	r2, [pc, #100]	@ (801acdc <etharp_output+0x1fc>)
 801ac76:	7dfb      	ldrb	r3, [r7, #23]
 801ac78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ac7a:	7dfb      	ldrb	r3, [r7, #23]
 801ac7c:	461a      	mov	r2, r3
 801ac7e:	68b9      	ldr	r1, [r7, #8]
 801ac80:	68f8      	ldr	r0, [r7, #12]
 801ac82:	f7ff fe93 	bl	801a9ac <etharp_output_to_arp_index>
 801ac86:	4603      	mov	r3, r0
 801ac88:	e018      	b.n	801acbc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ac8a:	7dfb      	ldrb	r3, [r7, #23]
 801ac8c:	3301      	adds	r3, #1
 801ac8e:	75fb      	strb	r3, [r7, #23]
 801ac90:	7dfb      	ldrb	r3, [r7, #23]
 801ac92:	2b09      	cmp	r3, #9
 801ac94:	d9ca      	bls.n	801ac2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ac96:	68ba      	ldr	r2, [r7, #8]
 801ac98:	69b9      	ldr	r1, [r7, #24]
 801ac9a:	68f8      	ldr	r0, [r7, #12]
 801ac9c:	f000 f822 	bl	801ace4 <etharp_query>
 801aca0:	4603      	mov	r3, r0
 801aca2:	e00b      	b.n	801acbc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801acaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801acae:	9300      	str	r3, [sp, #0]
 801acb0:	69fb      	ldr	r3, [r7, #28]
 801acb2:	68b9      	ldr	r1, [r7, #8]
 801acb4:	68f8      	ldr	r0, [r7, #12]
 801acb6:	f001 fd45 	bl	801c744 <ethernet_output>
 801acba:	4603      	mov	r3, r0
}
 801acbc:	4618      	mov	r0, r3
 801acbe:	3720      	adds	r7, #32
 801acc0:	46bd      	mov	sp, r7
 801acc2:	bd80      	pop	{r7, pc}
 801acc4:	080212bc 	.word	0x080212bc
 801acc8:	0802140c 	.word	0x0802140c
 801accc:	08021334 	.word	0x08021334
 801acd0:	0802145c 	.word	0x0802145c
 801acd4:	080213fc 	.word	0x080213fc
 801acd8:	0802277c 	.word	0x0802277c
 801acdc:	2000f3c0 	.word	0x2000f3c0
 801ace0:	2000f2d0 	.word	0x2000f2d0

0801ace4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b08c      	sub	sp, #48	@ 0x30
 801ace8:	af02      	add	r7, sp, #8
 801acea:	60f8      	str	r0, [r7, #12]
 801acec:	60b9      	str	r1, [r7, #8]
 801acee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	3326      	adds	r3, #38	@ 0x26
 801acf4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801acf6:	23ff      	movs	r3, #255	@ 0xff
 801acf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801acfc:	2300      	movs	r3, #0
 801acfe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	68f9      	ldr	r1, [r7, #12]
 801ad06:	4618      	mov	r0, r3
 801ad08:	f000 fe0e 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	2b00      	cmp	r3, #0
 801ad10:	d10c      	bne.n	801ad2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ad12:	68bb      	ldr	r3, [r7, #8]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad1a:	2be0      	cmp	r3, #224	@ 0xe0
 801ad1c:	d006      	beq.n	801ad2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ad1e:	68bb      	ldr	r3, [r7, #8]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d003      	beq.n	801ad2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ad24:	68bb      	ldr	r3, [r7, #8]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d102      	bne.n	801ad32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ad2c:	f06f 030f 	mvn.w	r3, #15
 801ad30:	e101      	b.n	801af36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ad32:	68fa      	ldr	r2, [r7, #12]
 801ad34:	2101      	movs	r1, #1
 801ad36:	68b8      	ldr	r0, [r7, #8]
 801ad38:	f7ff fb60 	bl	801a3fc <etharp_find_entry>
 801ad3c:	4603      	mov	r3, r0
 801ad3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ad40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	da02      	bge.n	801ad4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ad48:	8a7b      	ldrh	r3, [r7, #18]
 801ad4a:	b25b      	sxtb	r3, r3
 801ad4c:	e0f3      	b.n	801af36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ad4e:	8a7b      	ldrh	r3, [r7, #18]
 801ad50:	2b7e      	cmp	r3, #126	@ 0x7e
 801ad52:	d906      	bls.n	801ad62 <etharp_query+0x7e>
 801ad54:	4b7a      	ldr	r3, [pc, #488]	@ (801af40 <etharp_query+0x25c>)
 801ad56:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ad5a:	497a      	ldr	r1, [pc, #488]	@ (801af44 <etharp_query+0x260>)
 801ad5c:	487a      	ldr	r0, [pc, #488]	@ (801af48 <etharp_query+0x264>)
 801ad5e:	f002 f81b 	bl	801cd98 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ad62:	8a7b      	ldrh	r3, [r7, #18]
 801ad64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ad66:	7c7a      	ldrb	r2, [r7, #17]
 801ad68:	4978      	ldr	r1, [pc, #480]	@ (801af4c <etharp_query+0x268>)
 801ad6a:	4613      	mov	r3, r2
 801ad6c:	005b      	lsls	r3, r3, #1
 801ad6e:	4413      	add	r3, r2
 801ad70:	00db      	lsls	r3, r3, #3
 801ad72:	440b      	add	r3, r1
 801ad74:	3314      	adds	r3, #20
 801ad76:	781b      	ldrb	r3, [r3, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d115      	bne.n	801ada8 <etharp_query+0xc4>
    is_new_entry = 1;
 801ad7c:	2301      	movs	r3, #1
 801ad7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ad80:	7c7a      	ldrb	r2, [r7, #17]
 801ad82:	4972      	ldr	r1, [pc, #456]	@ (801af4c <etharp_query+0x268>)
 801ad84:	4613      	mov	r3, r2
 801ad86:	005b      	lsls	r3, r3, #1
 801ad88:	4413      	add	r3, r2
 801ad8a:	00db      	lsls	r3, r3, #3
 801ad8c:	440b      	add	r3, r1
 801ad8e:	3314      	adds	r3, #20
 801ad90:	2201      	movs	r2, #1
 801ad92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ad94:	7c7a      	ldrb	r2, [r7, #17]
 801ad96:	496d      	ldr	r1, [pc, #436]	@ (801af4c <etharp_query+0x268>)
 801ad98:	4613      	mov	r3, r2
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	4413      	add	r3, r2
 801ad9e:	00db      	lsls	r3, r3, #3
 801ada0:	440b      	add	r3, r1
 801ada2:	3308      	adds	r3, #8
 801ada4:	68fa      	ldr	r2, [r7, #12]
 801ada6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ada8:	7c7a      	ldrb	r2, [r7, #17]
 801adaa:	4968      	ldr	r1, [pc, #416]	@ (801af4c <etharp_query+0x268>)
 801adac:	4613      	mov	r3, r2
 801adae:	005b      	lsls	r3, r3, #1
 801adb0:	4413      	add	r3, r2
 801adb2:	00db      	lsls	r3, r3, #3
 801adb4:	440b      	add	r3, r1
 801adb6:	3314      	adds	r3, #20
 801adb8:	781b      	ldrb	r3, [r3, #0]
 801adba:	2b01      	cmp	r3, #1
 801adbc:	d011      	beq.n	801ade2 <etharp_query+0xfe>
 801adbe:	7c7a      	ldrb	r2, [r7, #17]
 801adc0:	4962      	ldr	r1, [pc, #392]	@ (801af4c <etharp_query+0x268>)
 801adc2:	4613      	mov	r3, r2
 801adc4:	005b      	lsls	r3, r3, #1
 801adc6:	4413      	add	r3, r2
 801adc8:	00db      	lsls	r3, r3, #3
 801adca:	440b      	add	r3, r1
 801adcc:	3314      	adds	r3, #20
 801adce:	781b      	ldrb	r3, [r3, #0]
 801add0:	2b01      	cmp	r3, #1
 801add2:	d806      	bhi.n	801ade2 <etharp_query+0xfe>
 801add4:	4b5a      	ldr	r3, [pc, #360]	@ (801af40 <etharp_query+0x25c>)
 801add6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801adda:	495d      	ldr	r1, [pc, #372]	@ (801af50 <etharp_query+0x26c>)
 801addc:	485a      	ldr	r0, [pc, #360]	@ (801af48 <etharp_query+0x264>)
 801adde:	f001 ffdb 	bl	801cd98 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ade2:	6a3b      	ldr	r3, [r7, #32]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d102      	bne.n	801adee <etharp_query+0x10a>
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d10c      	bne.n	801ae08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801adee:	68b9      	ldr	r1, [r7, #8]
 801adf0:	68f8      	ldr	r0, [r7, #12]
 801adf2:	f000 f963 	bl	801b0bc <etharp_request>
 801adf6:	4603      	mov	r3, r0
 801adf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801adfc:	687b      	ldr	r3, [r7, #4]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d102      	bne.n	801ae08 <etharp_query+0x124>
      return result;
 801ae02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801ae06:	e096      	b.n	801af36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d106      	bne.n	801ae1c <etharp_query+0x138>
 801ae0e:	4b4c      	ldr	r3, [pc, #304]	@ (801af40 <etharp_query+0x25c>)
 801ae10:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ae14:	494f      	ldr	r1, [pc, #316]	@ (801af54 <etharp_query+0x270>)
 801ae16:	484c      	ldr	r0, [pc, #304]	@ (801af48 <etharp_query+0x264>)
 801ae18:	f001 ffbe 	bl	801cd98 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ae1c:	7c7a      	ldrb	r2, [r7, #17]
 801ae1e:	494b      	ldr	r1, [pc, #300]	@ (801af4c <etharp_query+0x268>)
 801ae20:	4613      	mov	r3, r2
 801ae22:	005b      	lsls	r3, r3, #1
 801ae24:	4413      	add	r3, r2
 801ae26:	00db      	lsls	r3, r3, #3
 801ae28:	440b      	add	r3, r1
 801ae2a:	3314      	adds	r3, #20
 801ae2c:	781b      	ldrb	r3, [r3, #0]
 801ae2e:	2b01      	cmp	r3, #1
 801ae30:	d917      	bls.n	801ae62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ae32:	4a49      	ldr	r2, [pc, #292]	@ (801af58 <etharp_query+0x274>)
 801ae34:	7c7b      	ldrb	r3, [r7, #17]
 801ae36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ae38:	7c7a      	ldrb	r2, [r7, #17]
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	005b      	lsls	r3, r3, #1
 801ae3e:	4413      	add	r3, r2
 801ae40:	00db      	lsls	r3, r3, #3
 801ae42:	3308      	adds	r3, #8
 801ae44:	4a41      	ldr	r2, [pc, #260]	@ (801af4c <etharp_query+0x268>)
 801ae46:	4413      	add	r3, r2
 801ae48:	3304      	adds	r3, #4
 801ae4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae4e:	9200      	str	r2, [sp, #0]
 801ae50:	697a      	ldr	r2, [r7, #20]
 801ae52:	6879      	ldr	r1, [r7, #4]
 801ae54:	68f8      	ldr	r0, [r7, #12]
 801ae56:	f001 fc75 	bl	801c744 <ethernet_output>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae60:	e067      	b.n	801af32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ae62:	7c7a      	ldrb	r2, [r7, #17]
 801ae64:	4939      	ldr	r1, [pc, #228]	@ (801af4c <etharp_query+0x268>)
 801ae66:	4613      	mov	r3, r2
 801ae68:	005b      	lsls	r3, r3, #1
 801ae6a:	4413      	add	r3, r2
 801ae6c:	00db      	lsls	r3, r3, #3
 801ae6e:	440b      	add	r3, r1
 801ae70:	3314      	adds	r3, #20
 801ae72:	781b      	ldrb	r3, [r3, #0]
 801ae74:	2b01      	cmp	r3, #1
 801ae76:	d15c      	bne.n	801af32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ae80:	e01c      	b.n	801aebc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ae82:	69fb      	ldr	r3, [r7, #28]
 801ae84:	895a      	ldrh	r2, [r3, #10]
 801ae86:	69fb      	ldr	r3, [r7, #28]
 801ae88:	891b      	ldrh	r3, [r3, #8]
 801ae8a:	429a      	cmp	r2, r3
 801ae8c:	d10a      	bne.n	801aea4 <etharp_query+0x1c0>
 801ae8e:	69fb      	ldr	r3, [r7, #28]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	2b00      	cmp	r3, #0
 801ae94:	d006      	beq.n	801aea4 <etharp_query+0x1c0>
 801ae96:	4b2a      	ldr	r3, [pc, #168]	@ (801af40 <etharp_query+0x25c>)
 801ae98:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ae9c:	492f      	ldr	r1, [pc, #188]	@ (801af5c <etharp_query+0x278>)
 801ae9e:	482a      	ldr	r0, [pc, #168]	@ (801af48 <etharp_query+0x264>)
 801aea0:	f001 ff7a 	bl	801cd98 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801aea4:	69fb      	ldr	r3, [r7, #28]
 801aea6:	7b1b      	ldrb	r3, [r3, #12]
 801aea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d002      	beq.n	801aeb6 <etharp_query+0x1d2>
        copy_needed = 1;
 801aeb0:	2301      	movs	r3, #1
 801aeb2:	61bb      	str	r3, [r7, #24]
        break;
 801aeb4:	e005      	b.n	801aec2 <etharp_query+0x1de>
      }
      p = p->next;
 801aeb6:	69fb      	ldr	r3, [r7, #28]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aebc:	69fb      	ldr	r3, [r7, #28]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d1df      	bne.n	801ae82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801aec2:	69bb      	ldr	r3, [r7, #24]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d007      	beq.n	801aed8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801aec8:	687a      	ldr	r2, [r7, #4]
 801aeca:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801aece:	200e      	movs	r0, #14
 801aed0:	f7f8 fa72 	bl	80133b8 <pbuf_clone>
 801aed4:	61f8      	str	r0, [r7, #28]
 801aed6:	e004      	b.n	801aee2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801aedc:	69f8      	ldr	r0, [r7, #28]
 801aede:	f7f8 f899 	bl	8013014 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801aee2:	69fb      	ldr	r3, [r7, #28]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d021      	beq.n	801af2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801aee8:	7c7a      	ldrb	r2, [r7, #17]
 801aeea:	4918      	ldr	r1, [pc, #96]	@ (801af4c <etharp_query+0x268>)
 801aeec:	4613      	mov	r3, r2
 801aeee:	005b      	lsls	r3, r3, #1
 801aef0:	4413      	add	r3, r2
 801aef2:	00db      	lsls	r3, r3, #3
 801aef4:	440b      	add	r3, r1
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d00a      	beq.n	801af12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801aefc:	7c7a      	ldrb	r2, [r7, #17]
 801aefe:	4913      	ldr	r1, [pc, #76]	@ (801af4c <etharp_query+0x268>)
 801af00:	4613      	mov	r3, r2
 801af02:	005b      	lsls	r3, r3, #1
 801af04:	4413      	add	r3, r2
 801af06:	00db      	lsls	r3, r3, #3
 801af08:	440b      	add	r3, r1
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	4618      	mov	r0, r3
 801af0e:	f7f7 ffdb 	bl	8012ec8 <pbuf_free>
      }
      arp_table[i].q = p;
 801af12:	7c7a      	ldrb	r2, [r7, #17]
 801af14:	490d      	ldr	r1, [pc, #52]	@ (801af4c <etharp_query+0x268>)
 801af16:	4613      	mov	r3, r2
 801af18:	005b      	lsls	r3, r3, #1
 801af1a:	4413      	add	r3, r2
 801af1c:	00db      	lsls	r3, r3, #3
 801af1e:	440b      	add	r3, r1
 801af20:	69fa      	ldr	r2, [r7, #28]
 801af22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801af24:	2300      	movs	r3, #0
 801af26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801af2a:	e002      	b.n	801af32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801af2c:	23ff      	movs	r3, #255	@ 0xff
 801af2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801af32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801af36:	4618      	mov	r0, r3
 801af38:	3728      	adds	r7, #40	@ 0x28
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}
 801af3e:	bf00      	nop
 801af40:	080212bc 	.word	0x080212bc
 801af44:	08021468 	.word	0x08021468
 801af48:	08021334 	.word	0x08021334
 801af4c:	2000f2d0 	.word	0x2000f2d0
 801af50:	08021478 	.word	0x08021478
 801af54:	0802145c 	.word	0x0802145c
 801af58:	2000f3c0 	.word	0x2000f3c0
 801af5c:	080214a0 	.word	0x080214a0

0801af60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801af60:	b580      	push	{r7, lr}
 801af62:	b08a      	sub	sp, #40	@ 0x28
 801af64:	af02      	add	r7, sp, #8
 801af66:	60f8      	str	r0, [r7, #12]
 801af68:	60b9      	str	r1, [r7, #8]
 801af6a:	607a      	str	r2, [r7, #4]
 801af6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801af6e:	2300      	movs	r3, #0
 801af70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d106      	bne.n	801af86 <etharp_raw+0x26>
 801af78:	4b3a      	ldr	r3, [pc, #232]	@ (801b064 <etharp_raw+0x104>)
 801af7a:	f240 4257 	movw	r2, #1111	@ 0x457
 801af7e:	493a      	ldr	r1, [pc, #232]	@ (801b068 <etharp_raw+0x108>)
 801af80:	483a      	ldr	r0, [pc, #232]	@ (801b06c <etharp_raw+0x10c>)
 801af82:	f001 ff09 	bl	801cd98 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801af86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801af8a:	211c      	movs	r1, #28
 801af8c:	200e      	movs	r0, #14
 801af8e:	f7f7 fcb7 	bl	8012900 <pbuf_alloc>
 801af92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801af94:	69bb      	ldr	r3, [r7, #24]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d102      	bne.n	801afa0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801af9a:	f04f 33ff 	mov.w	r3, #4294967295
 801af9e:	e05d      	b.n	801b05c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801afa0:	69bb      	ldr	r3, [r7, #24]
 801afa2:	895b      	ldrh	r3, [r3, #10]
 801afa4:	2b1b      	cmp	r3, #27
 801afa6:	d806      	bhi.n	801afb6 <etharp_raw+0x56>
 801afa8:	4b2e      	ldr	r3, [pc, #184]	@ (801b064 <etharp_raw+0x104>)
 801afaa:	f240 4262 	movw	r2, #1122	@ 0x462
 801afae:	4930      	ldr	r1, [pc, #192]	@ (801b070 <etharp_raw+0x110>)
 801afb0:	482e      	ldr	r0, [pc, #184]	@ (801b06c <etharp_raw+0x10c>)
 801afb2:	f001 fef1 	bl	801cd98 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801afb6:	69bb      	ldr	r3, [r7, #24]
 801afb8:	685b      	ldr	r3, [r3, #4]
 801afba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801afbc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801afbe:	4618      	mov	r0, r3
 801afc0:	f7f6 fb5a 	bl	8011678 <lwip_htons>
 801afc4:	4603      	mov	r3, r0
 801afc6:	461a      	mov	r2, r3
 801afc8:	697b      	ldr	r3, [r7, #20]
 801afca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801afd2:	2b06      	cmp	r3, #6
 801afd4:	d006      	beq.n	801afe4 <etharp_raw+0x84>
 801afd6:	4b23      	ldr	r3, [pc, #140]	@ (801b064 <etharp_raw+0x104>)
 801afd8:	f240 4269 	movw	r2, #1129	@ 0x469
 801afdc:	4925      	ldr	r1, [pc, #148]	@ (801b074 <etharp_raw+0x114>)
 801afde:	4823      	ldr	r0, [pc, #140]	@ (801b06c <etharp_raw+0x10c>)
 801afe0:	f001 feda 	bl	801cd98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801afe4:	697b      	ldr	r3, [r7, #20]
 801afe6:	3308      	adds	r3, #8
 801afe8:	2206      	movs	r2, #6
 801afea:	6839      	ldr	r1, [r7, #0]
 801afec:	4618      	mov	r0, r3
 801afee:	f002 f85c 	bl	801d0aa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aff2:	697b      	ldr	r3, [r7, #20]
 801aff4:	3312      	adds	r3, #18
 801aff6:	2206      	movs	r2, #6
 801aff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801affa:	4618      	mov	r0, r3
 801affc:	f002 f855 	bl	801d0aa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	330e      	adds	r3, #14
 801b004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b006:	6812      	ldr	r2, [r2, #0]
 801b008:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b00a:	697b      	ldr	r3, [r7, #20]
 801b00c:	3318      	adds	r3, #24
 801b00e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b010:	6812      	ldr	r2, [r2, #0]
 801b012:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b014:	697b      	ldr	r3, [r7, #20]
 801b016:	2200      	movs	r2, #0
 801b018:	701a      	strb	r2, [r3, #0]
 801b01a:	2200      	movs	r2, #0
 801b01c:	f042 0201 	orr.w	r2, r2, #1
 801b020:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	2200      	movs	r2, #0
 801b026:	f042 0208 	orr.w	r2, r2, #8
 801b02a:	709a      	strb	r2, [r3, #2]
 801b02c:	2200      	movs	r2, #0
 801b02e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b030:	697b      	ldr	r3, [r7, #20]
 801b032:	2206      	movs	r2, #6
 801b034:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b036:	697b      	ldr	r3, [r7, #20]
 801b038:	2204      	movs	r2, #4
 801b03a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b03c:	f640 0306 	movw	r3, #2054	@ 0x806
 801b040:	9300      	str	r3, [sp, #0]
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	68ba      	ldr	r2, [r7, #8]
 801b046:	69b9      	ldr	r1, [r7, #24]
 801b048:	68f8      	ldr	r0, [r7, #12]
 801b04a:	f001 fb7b 	bl	801c744 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b04e:	69b8      	ldr	r0, [r7, #24]
 801b050:	f7f7 ff3a 	bl	8012ec8 <pbuf_free>
  p = NULL;
 801b054:	2300      	movs	r3, #0
 801b056:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b058:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b05c:	4618      	mov	r0, r3
 801b05e:	3720      	adds	r7, #32
 801b060:	46bd      	mov	sp, r7
 801b062:	bd80      	pop	{r7, pc}
 801b064:	080212bc 	.word	0x080212bc
 801b068:	0802140c 	.word	0x0802140c
 801b06c:	08021334 	.word	0x08021334
 801b070:	080214bc 	.word	0x080214bc
 801b074:	080214f0 	.word	0x080214f0

0801b078 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b088      	sub	sp, #32
 801b07c:	af04      	add	r7, sp, #16
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b084:	68fb      	ldr	r3, [r7, #12]
 801b086:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b090:	68fb      	ldr	r3, [r7, #12]
 801b092:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b094:	2201      	movs	r2, #1
 801b096:	9203      	str	r2, [sp, #12]
 801b098:	68ba      	ldr	r2, [r7, #8]
 801b09a:	9202      	str	r2, [sp, #8]
 801b09c:	4a06      	ldr	r2, [pc, #24]	@ (801b0b8 <etharp_request_dst+0x40>)
 801b09e:	9201      	str	r2, [sp, #4]
 801b0a0:	9300      	str	r3, [sp, #0]
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	687a      	ldr	r2, [r7, #4]
 801b0a6:	68f8      	ldr	r0, [r7, #12]
 801b0a8:	f7ff ff5a 	bl	801af60 <etharp_raw>
 801b0ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	3710      	adds	r7, #16
 801b0b2:	46bd      	mov	sp, r7
 801b0b4:	bd80      	pop	{r7, pc}
 801b0b6:	bf00      	nop
 801b0b8:	08022784 	.word	0x08022784

0801b0bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b082      	sub	sp, #8
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b0c6:	4a05      	ldr	r2, [pc, #20]	@ (801b0dc <etharp_request+0x20>)
 801b0c8:	6839      	ldr	r1, [r7, #0]
 801b0ca:	6878      	ldr	r0, [r7, #4]
 801b0cc:	f7ff ffd4 	bl	801b078 <etharp_request_dst>
 801b0d0:	4603      	mov	r3, r0
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3708      	adds	r7, #8
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}
 801b0da:	bf00      	nop
 801b0dc:	0802277c 	.word	0x0802277c

0801b0e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b08e      	sub	sp, #56	@ 0x38
 801b0e4:	af04      	add	r7, sp, #16
 801b0e6:	6078      	str	r0, [r7, #4]
 801b0e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b0ea:	4b79      	ldr	r3, [pc, #484]	@ (801b2d0 <icmp_input+0x1f0>)
 801b0ec:	689b      	ldr	r3, [r3, #8]
 801b0ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0f2:	781b      	ldrb	r3, [r3, #0]
 801b0f4:	f003 030f 	and.w	r3, r3, #15
 801b0f8:	b2db      	uxtb	r3, r3
 801b0fa:	009b      	lsls	r3, r3, #2
 801b0fc:	b2db      	uxtb	r3, r3
 801b0fe:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b100:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b102:	2b13      	cmp	r3, #19
 801b104:	f240 80cd 	bls.w	801b2a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	895b      	ldrh	r3, [r3, #10]
 801b10c:	2b03      	cmp	r3, #3
 801b10e:	f240 80ca 	bls.w	801b2a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	685b      	ldr	r3, [r3, #4]
 801b116:	781b      	ldrb	r3, [r3, #0]
 801b118:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b11c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b120:	2b00      	cmp	r3, #0
 801b122:	f000 80b7 	beq.w	801b294 <icmp_input+0x1b4>
 801b126:	2b08      	cmp	r3, #8
 801b128:	f040 80b7 	bne.w	801b29a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b12c:	4b69      	ldr	r3, [pc, #420]	@ (801b2d4 <icmp_input+0x1f4>)
 801b12e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b130:	4b67      	ldr	r3, [pc, #412]	@ (801b2d0 <icmp_input+0x1f0>)
 801b132:	695b      	ldr	r3, [r3, #20]
 801b134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b138:	2be0      	cmp	r3, #224	@ 0xe0
 801b13a:	f000 80bb 	beq.w	801b2b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b13e:	4b64      	ldr	r3, [pc, #400]	@ (801b2d0 <icmp_input+0x1f0>)
 801b140:	695b      	ldr	r3, [r3, #20]
 801b142:	4a63      	ldr	r2, [pc, #396]	@ (801b2d0 <icmp_input+0x1f0>)
 801b144:	6812      	ldr	r2, [r2, #0]
 801b146:	4611      	mov	r1, r2
 801b148:	4618      	mov	r0, r3
 801b14a:	f000 fbed 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801b14e:	4603      	mov	r3, r0
 801b150:	2b00      	cmp	r3, #0
 801b152:	f040 80b1 	bne.w	801b2b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	891b      	ldrh	r3, [r3, #8]
 801b15a:	2b07      	cmp	r3, #7
 801b15c:	f240 80a5 	bls.w	801b2aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b160:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b162:	330e      	adds	r3, #14
 801b164:	4619      	mov	r1, r3
 801b166:	6878      	ldr	r0, [r7, #4]
 801b168:	f7f7 fe18 	bl	8012d9c <pbuf_add_header>
 801b16c:	4603      	mov	r3, r0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d04b      	beq.n	801b20a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	891a      	ldrh	r2, [r3, #8]
 801b176:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b178:	4413      	add	r3, r2
 801b17a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	891b      	ldrh	r3, [r3, #8]
 801b180:	8b7a      	ldrh	r2, [r7, #26]
 801b182:	429a      	cmp	r2, r3
 801b184:	f0c0 809a 	bcc.w	801b2bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b188:	8b7b      	ldrh	r3, [r7, #26]
 801b18a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b18e:	4619      	mov	r1, r3
 801b190:	200e      	movs	r0, #14
 801b192:	f7f7 fbb5 	bl	8012900 <pbuf_alloc>
 801b196:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b198:	697b      	ldr	r3, [r7, #20]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	f000 8090 	beq.w	801b2c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b1a0:	697b      	ldr	r3, [r7, #20]
 801b1a2:	895b      	ldrh	r3, [r3, #10]
 801b1a4:	461a      	mov	r2, r3
 801b1a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1a8:	3308      	adds	r3, #8
 801b1aa:	429a      	cmp	r2, r3
 801b1ac:	d203      	bcs.n	801b1b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b1ae:	6978      	ldr	r0, [r7, #20]
 801b1b0:	f7f7 fe8a 	bl	8012ec8 <pbuf_free>
          goto icmperr;
 801b1b4:	e085      	b.n	801b2c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	685b      	ldr	r3, [r3, #4]
 801b1ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b1bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f001 ff73 	bl	801d0aa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b1c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1c6:	4619      	mov	r1, r3
 801b1c8:	6978      	ldr	r0, [r7, #20]
 801b1ca:	f7f7 fdf7 	bl	8012dbc <pbuf_remove_header>
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	2b00      	cmp	r3, #0
 801b1d2:	d009      	beq.n	801b1e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b1d4:	4b40      	ldr	r3, [pc, #256]	@ (801b2d8 <icmp_input+0x1f8>)
 801b1d6:	22b6      	movs	r2, #182	@ 0xb6
 801b1d8:	4940      	ldr	r1, [pc, #256]	@ (801b2dc <icmp_input+0x1fc>)
 801b1da:	4841      	ldr	r0, [pc, #260]	@ (801b2e0 <icmp_input+0x200>)
 801b1dc:	f001 fddc 	bl	801cd98 <iprintf>
          pbuf_free(r);
 801b1e0:	6978      	ldr	r0, [r7, #20]
 801b1e2:	f7f7 fe71 	bl	8012ec8 <pbuf_free>
          goto icmperr;
 801b1e6:	e06c      	b.n	801b2c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b1e8:	6879      	ldr	r1, [r7, #4]
 801b1ea:	6978      	ldr	r0, [r7, #20]
 801b1ec:	f7f7 ffa0 	bl	8013130 <pbuf_copy>
 801b1f0:	4603      	mov	r3, r0
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d003      	beq.n	801b1fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b1f6:	6978      	ldr	r0, [r7, #20]
 801b1f8:	f7f7 fe66 	bl	8012ec8 <pbuf_free>
          goto icmperr;
 801b1fc:	e061      	b.n	801b2c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b1fe:	6878      	ldr	r0, [r7, #4]
 801b200:	f7f7 fe62 	bl	8012ec8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b204:	697b      	ldr	r3, [r7, #20]
 801b206:	607b      	str	r3, [r7, #4]
 801b208:	e00f      	b.n	801b22a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b20a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b20c:	330e      	adds	r3, #14
 801b20e:	4619      	mov	r1, r3
 801b210:	6878      	ldr	r0, [r7, #4]
 801b212:	f7f7 fdd3 	bl	8012dbc <pbuf_remove_header>
 801b216:	4603      	mov	r3, r0
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d006      	beq.n	801b22a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b21c:	4b2e      	ldr	r3, [pc, #184]	@ (801b2d8 <icmp_input+0x1f8>)
 801b21e:	22c7      	movs	r2, #199	@ 0xc7
 801b220:	4930      	ldr	r1, [pc, #192]	@ (801b2e4 <icmp_input+0x204>)
 801b222:	482f      	ldr	r0, [pc, #188]	@ (801b2e0 <icmp_input+0x200>)
 801b224:	f001 fdb8 	bl	801cd98 <iprintf>
          goto icmperr;
 801b228:	e04b      	b.n	801b2c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	685b      	ldr	r3, [r3, #4]
 801b22e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b230:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b232:	4619      	mov	r1, r3
 801b234:	6878      	ldr	r0, [r7, #4]
 801b236:	f7f7 fdb1 	bl	8012d9c <pbuf_add_header>
 801b23a:	4603      	mov	r3, r0
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d12b      	bne.n	801b298 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b246:	69fb      	ldr	r3, [r7, #28]
 801b248:	681a      	ldr	r2, [r3, #0]
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b24e:	4b20      	ldr	r3, [pc, #128]	@ (801b2d0 <icmp_input+0x1f0>)
 801b250:	691a      	ldr	r2, [r3, #16]
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b256:	693b      	ldr	r3, [r7, #16]
 801b258:	2200      	movs	r2, #0
 801b25a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	2200      	movs	r2, #0
 801b260:	709a      	strb	r2, [r3, #2]
 801b262:	2200      	movs	r2, #0
 801b264:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	22ff      	movs	r2, #255	@ 0xff
 801b26a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	2200      	movs	r2, #0
 801b270:	729a      	strb	r2, [r3, #10]
 801b272:	2200      	movs	r2, #0
 801b274:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	9302      	str	r3, [sp, #8]
 801b27a:	2301      	movs	r3, #1
 801b27c:	9301      	str	r3, [sp, #4]
 801b27e:	2300      	movs	r3, #0
 801b280:	9300      	str	r3, [sp, #0]
 801b282:	23ff      	movs	r3, #255	@ 0xff
 801b284:	2200      	movs	r2, #0
 801b286:	69f9      	ldr	r1, [r7, #28]
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	f000 fa75 	bl	801b778 <ip4_output_if>
 801b28e:	4603      	mov	r3, r0
 801b290:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b292:	e001      	b.n	801b298 <icmp_input+0x1b8>
      break;
 801b294:	bf00      	nop
 801b296:	e000      	b.n	801b29a <icmp_input+0x1ba>
      break;
 801b298:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b29a:	6878      	ldr	r0, [r7, #4]
 801b29c:	f7f7 fe14 	bl	8012ec8 <pbuf_free>
  return;
 801b2a0:	e013      	b.n	801b2ca <icmp_input+0x1ea>
    goto lenerr;
 801b2a2:	bf00      	nop
 801b2a4:	e002      	b.n	801b2ac <icmp_input+0x1cc>
    goto lenerr;
 801b2a6:	bf00      	nop
 801b2a8:	e000      	b.n	801b2ac <icmp_input+0x1cc>
        goto lenerr;
 801b2aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b2ac:	6878      	ldr	r0, [r7, #4]
 801b2ae:	f7f7 fe0b 	bl	8012ec8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b2b2:	e00a      	b.n	801b2ca <icmp_input+0x1ea>
        goto icmperr;
 801b2b4:	bf00      	nop
 801b2b6:	e004      	b.n	801b2c2 <icmp_input+0x1e2>
        goto icmperr;
 801b2b8:	bf00      	nop
 801b2ba:	e002      	b.n	801b2c2 <icmp_input+0x1e2>
          goto icmperr;
 801b2bc:	bf00      	nop
 801b2be:	e000      	b.n	801b2c2 <icmp_input+0x1e2>
          goto icmperr;
 801b2c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b2c2:	6878      	ldr	r0, [r7, #4]
 801b2c4:	f7f7 fe00 	bl	8012ec8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b2c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b2ca:	3728      	adds	r7, #40	@ 0x28
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	bd80      	pop	{r7, pc}
 801b2d0:	2000bb1c 	.word	0x2000bb1c
 801b2d4:	2000bb30 	.word	0x2000bb30
 801b2d8:	08021534 	.word	0x08021534
 801b2dc:	0802156c 	.word	0x0802156c
 801b2e0:	080215a4 	.word	0x080215a4
 801b2e4:	080215cc 	.word	0x080215cc

0801b2e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b2e8:	b580      	push	{r7, lr}
 801b2ea:	b082      	sub	sp, #8
 801b2ec:	af00      	add	r7, sp, #0
 801b2ee:	6078      	str	r0, [r7, #4]
 801b2f0:	460b      	mov	r3, r1
 801b2f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b2f4:	78fb      	ldrb	r3, [r7, #3]
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	2103      	movs	r1, #3
 801b2fa:	6878      	ldr	r0, [r7, #4]
 801b2fc:	f000 f814 	bl	801b328 <icmp_send_response>
}
 801b300:	bf00      	nop
 801b302:	3708      	adds	r7, #8
 801b304:	46bd      	mov	sp, r7
 801b306:	bd80      	pop	{r7, pc}

0801b308 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b082      	sub	sp, #8
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
 801b310:	460b      	mov	r3, r1
 801b312:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b314:	78fb      	ldrb	r3, [r7, #3]
 801b316:	461a      	mov	r2, r3
 801b318:	210b      	movs	r1, #11
 801b31a:	6878      	ldr	r0, [r7, #4]
 801b31c:	f000 f804 	bl	801b328 <icmp_send_response>
}
 801b320:	bf00      	nop
 801b322:	3708      	adds	r7, #8
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}

0801b328 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b08c      	sub	sp, #48	@ 0x30
 801b32c:	af04      	add	r7, sp, #16
 801b32e:	6078      	str	r0, [r7, #4]
 801b330:	460b      	mov	r3, r1
 801b332:	70fb      	strb	r3, [r7, #3]
 801b334:	4613      	mov	r3, r2
 801b336:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b338:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b33c:	2124      	movs	r1, #36	@ 0x24
 801b33e:	2022      	movs	r0, #34	@ 0x22
 801b340:	f7f7 fade 	bl	8012900 <pbuf_alloc>
 801b344:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b346:	69fb      	ldr	r3, [r7, #28]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d04c      	beq.n	801b3e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b34c:	69fb      	ldr	r3, [r7, #28]
 801b34e:	895b      	ldrh	r3, [r3, #10]
 801b350:	2b23      	cmp	r3, #35	@ 0x23
 801b352:	d806      	bhi.n	801b362 <icmp_send_response+0x3a>
 801b354:	4b26      	ldr	r3, [pc, #152]	@ (801b3f0 <icmp_send_response+0xc8>)
 801b356:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b35a:	4926      	ldr	r1, [pc, #152]	@ (801b3f4 <icmp_send_response+0xcc>)
 801b35c:	4826      	ldr	r0, [pc, #152]	@ (801b3f8 <icmp_send_response+0xd0>)
 801b35e:	f001 fd1b 	bl	801cd98 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	685b      	ldr	r3, [r3, #4]
 801b366:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b368:	69fb      	ldr	r3, [r7, #28]
 801b36a:	685b      	ldr	r3, [r3, #4]
 801b36c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	78fa      	ldrb	r2, [r7, #3]
 801b372:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b374:	697b      	ldr	r3, [r7, #20]
 801b376:	78ba      	ldrb	r2, [r7, #2]
 801b378:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b37a:	697b      	ldr	r3, [r7, #20]
 801b37c:	2200      	movs	r2, #0
 801b37e:	711a      	strb	r2, [r3, #4]
 801b380:	2200      	movs	r2, #0
 801b382:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	2200      	movs	r2, #0
 801b388:	719a      	strb	r2, [r3, #6]
 801b38a:	2200      	movs	r2, #0
 801b38c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b38e:	69fb      	ldr	r3, [r7, #28]
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	f103 0008 	add.w	r0, r3, #8
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	685b      	ldr	r3, [r3, #4]
 801b39a:	221c      	movs	r2, #28
 801b39c:	4619      	mov	r1, r3
 801b39e:	f001 fe84 	bl	801d0aa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b3a2:	69bb      	ldr	r3, [r7, #24]
 801b3a4:	68db      	ldr	r3, [r3, #12]
 801b3a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b3a8:	f107 030c 	add.w	r3, r7, #12
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	f000 f825 	bl	801b3fc <ip4_route>
 801b3b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d011      	beq.n	801b3de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b3ba:	697b      	ldr	r3, [r7, #20]
 801b3bc:	2200      	movs	r2, #0
 801b3be:	709a      	strb	r2, [r3, #2]
 801b3c0:	2200      	movs	r2, #0
 801b3c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b3c4:	f107 020c 	add.w	r2, r7, #12
 801b3c8:	693b      	ldr	r3, [r7, #16]
 801b3ca:	9302      	str	r3, [sp, #8]
 801b3cc:	2301      	movs	r3, #1
 801b3ce:	9301      	str	r3, [sp, #4]
 801b3d0:	2300      	movs	r3, #0
 801b3d2:	9300      	str	r3, [sp, #0]
 801b3d4:	23ff      	movs	r3, #255	@ 0xff
 801b3d6:	2100      	movs	r1, #0
 801b3d8:	69f8      	ldr	r0, [r7, #28]
 801b3da:	f000 f9cd 	bl	801b778 <ip4_output_if>
  }
  pbuf_free(q);
 801b3de:	69f8      	ldr	r0, [r7, #28]
 801b3e0:	f7f7 fd72 	bl	8012ec8 <pbuf_free>
 801b3e4:	e000      	b.n	801b3e8 <icmp_send_response+0xc0>
    return;
 801b3e6:	bf00      	nop
}
 801b3e8:	3720      	adds	r7, #32
 801b3ea:	46bd      	mov	sp, r7
 801b3ec:	bd80      	pop	{r7, pc}
 801b3ee:	bf00      	nop
 801b3f0:	08021534 	.word	0x08021534
 801b3f4:	08021600 	.word	0x08021600
 801b3f8:	080215a4 	.word	0x080215a4

0801b3fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b3fc:	b480      	push	{r7}
 801b3fe:	b085      	sub	sp, #20
 801b400:	af00      	add	r7, sp, #0
 801b402:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b404:	4b33      	ldr	r3, [pc, #204]	@ (801b4d4 <ip4_route+0xd8>)
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	60fb      	str	r3, [r7, #12]
 801b40a:	e036      	b.n	801b47a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b412:	f003 0301 	and.w	r3, r3, #1
 801b416:	b2db      	uxtb	r3, r3
 801b418:	2b00      	cmp	r3, #0
 801b41a:	d02b      	beq.n	801b474 <ip4_route+0x78>
 801b41c:	68fb      	ldr	r3, [r7, #12]
 801b41e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b422:	089b      	lsrs	r3, r3, #2
 801b424:	f003 0301 	and.w	r3, r3, #1
 801b428:	b2db      	uxtb	r3, r3
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d022      	beq.n	801b474 <ip4_route+0x78>
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	3304      	adds	r3, #4
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d01d      	beq.n	801b474 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681a      	ldr	r2, [r3, #0]
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	3304      	adds	r3, #4
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	405a      	eors	r2, r3
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	3308      	adds	r3, #8
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	4013      	ands	r3, r2
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d101      	bne.n	801b454 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b450:	68fb      	ldr	r3, [r7, #12]
 801b452:	e038      	b.n	801b4c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b45a:	f003 0302 	and.w	r3, r3, #2
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d108      	bne.n	801b474 <ip4_route+0x78>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681a      	ldr	r2, [r3, #0]
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	330c      	adds	r3, #12
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	429a      	cmp	r2, r3
 801b46e:	d101      	bne.n	801b474 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	e028      	b.n	801b4c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b474:	68fb      	ldr	r3, [r7, #12]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	60fb      	str	r3, [r7, #12]
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d1c5      	bne.n	801b40c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b480:	4b15      	ldr	r3, [pc, #84]	@ (801b4d8 <ip4_route+0xdc>)
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	2b00      	cmp	r3, #0
 801b486:	d01a      	beq.n	801b4be <ip4_route+0xc2>
 801b488:	4b13      	ldr	r3, [pc, #76]	@ (801b4d8 <ip4_route+0xdc>)
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b490:	f003 0301 	and.w	r3, r3, #1
 801b494:	2b00      	cmp	r3, #0
 801b496:	d012      	beq.n	801b4be <ip4_route+0xc2>
 801b498:	4b0f      	ldr	r3, [pc, #60]	@ (801b4d8 <ip4_route+0xdc>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b4a0:	f003 0304 	and.w	r3, r3, #4
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d00a      	beq.n	801b4be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b4a8:	4b0b      	ldr	r3, [pc, #44]	@ (801b4d8 <ip4_route+0xdc>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	3304      	adds	r3, #4
 801b4ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d004      	beq.n	801b4be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	2b7f      	cmp	r3, #127	@ 0x7f
 801b4bc:	d101      	bne.n	801b4c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b4be:	2300      	movs	r3, #0
 801b4c0:	e001      	b.n	801b4c6 <ip4_route+0xca>
  }

  return netif_default;
 801b4c2:	4b05      	ldr	r3, [pc, #20]	@ (801b4d8 <ip4_route+0xdc>)
 801b4c4:	681b      	ldr	r3, [r3, #0]
}
 801b4c6:	4618      	mov	r0, r3
 801b4c8:	3714      	adds	r7, #20
 801b4ca:	46bd      	mov	sp, r7
 801b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d0:	4770      	bx	lr
 801b4d2:	bf00      	nop
 801b4d4:	2000f264 	.word	0x2000f264
 801b4d8:	2000f268 	.word	0x2000f268

0801b4dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b082      	sub	sp, #8
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b4ea:	f003 0301 	and.w	r3, r3, #1
 801b4ee:	b2db      	uxtb	r3, r3
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d016      	beq.n	801b522 <ip4_input_accept+0x46>
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	3304      	adds	r3, #4
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d011      	beq.n	801b522 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b4fe:	4b0b      	ldr	r3, [pc, #44]	@ (801b52c <ip4_input_accept+0x50>)
 801b500:	695a      	ldr	r2, [r3, #20]
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	3304      	adds	r3, #4
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	429a      	cmp	r2, r3
 801b50a:	d008      	beq.n	801b51e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b50c:	4b07      	ldr	r3, [pc, #28]	@ (801b52c <ip4_input_accept+0x50>)
 801b50e:	695b      	ldr	r3, [r3, #20]
 801b510:	6879      	ldr	r1, [r7, #4]
 801b512:	4618      	mov	r0, r3
 801b514:	f000 fa08 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801b518:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d001      	beq.n	801b522 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b51e:	2301      	movs	r3, #1
 801b520:	e000      	b.n	801b524 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b522:	2300      	movs	r3, #0
}
 801b524:	4618      	mov	r0, r3
 801b526:	3708      	adds	r7, #8
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}
 801b52c:	2000bb1c 	.word	0x2000bb1c

0801b530 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b530:	b580      	push	{r7, lr}
 801b532:	b086      	sub	sp, #24
 801b534:	af00      	add	r7, sp, #0
 801b536:	6078      	str	r0, [r7, #4]
 801b538:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	685b      	ldr	r3, [r3, #4]
 801b53e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b540:	697b      	ldr	r3, [r7, #20]
 801b542:	781b      	ldrb	r3, [r3, #0]
 801b544:	091b      	lsrs	r3, r3, #4
 801b546:	b2db      	uxtb	r3, r3
 801b548:	2b04      	cmp	r3, #4
 801b54a:	d004      	beq.n	801b556 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b54c:	6878      	ldr	r0, [r7, #4]
 801b54e:	f7f7 fcbb 	bl	8012ec8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b552:	2300      	movs	r3, #0
 801b554:	e107      	b.n	801b766 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b556:	697b      	ldr	r3, [r7, #20]
 801b558:	781b      	ldrb	r3, [r3, #0]
 801b55a:	f003 030f 	and.w	r3, r3, #15
 801b55e:	b2db      	uxtb	r3, r3
 801b560:	009b      	lsls	r3, r3, #2
 801b562:	b2db      	uxtb	r3, r3
 801b564:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b566:	697b      	ldr	r3, [r7, #20]
 801b568:	885b      	ldrh	r3, [r3, #2]
 801b56a:	b29b      	uxth	r3, r3
 801b56c:	4618      	mov	r0, r3
 801b56e:	f7f6 f883 	bl	8011678 <lwip_htons>
 801b572:	4603      	mov	r3, r0
 801b574:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	891b      	ldrh	r3, [r3, #8]
 801b57a:	89ba      	ldrh	r2, [r7, #12]
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d204      	bcs.n	801b58a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b580:	89bb      	ldrh	r3, [r7, #12]
 801b582:	4619      	mov	r1, r3
 801b584:	6878      	ldr	r0, [r7, #4]
 801b586:	f7f7 fb19 	bl	8012bbc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	895b      	ldrh	r3, [r3, #10]
 801b58e:	89fa      	ldrh	r2, [r7, #14]
 801b590:	429a      	cmp	r2, r3
 801b592:	d807      	bhi.n	801b5a4 <ip4_input+0x74>
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	891b      	ldrh	r3, [r3, #8]
 801b598:	89ba      	ldrh	r2, [r7, #12]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d802      	bhi.n	801b5a4 <ip4_input+0x74>
 801b59e:	89fb      	ldrh	r3, [r7, #14]
 801b5a0:	2b13      	cmp	r3, #19
 801b5a2:	d804      	bhi.n	801b5ae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b5a4:	6878      	ldr	r0, [r7, #4]
 801b5a6:	f7f7 fc8f 	bl	8012ec8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	e0db      	b.n	801b766 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	691b      	ldr	r3, [r3, #16]
 801b5b2:	4a6f      	ldr	r2, [pc, #444]	@ (801b770 <ip4_input+0x240>)
 801b5b4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	68db      	ldr	r3, [r3, #12]
 801b5ba:	4a6d      	ldr	r2, [pc, #436]	@ (801b770 <ip4_input+0x240>)
 801b5bc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5be:	4b6c      	ldr	r3, [pc, #432]	@ (801b770 <ip4_input+0x240>)
 801b5c0:	695b      	ldr	r3, [r3, #20]
 801b5c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b5c6:	2be0      	cmp	r3, #224	@ 0xe0
 801b5c8:	d112      	bne.n	801b5f0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b5d0:	f003 0301 	and.w	r3, r3, #1
 801b5d4:	b2db      	uxtb	r3, r3
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d007      	beq.n	801b5ea <ip4_input+0xba>
 801b5da:	683b      	ldr	r3, [r7, #0]
 801b5dc:	3304      	adds	r3, #4
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d002      	beq.n	801b5ea <ip4_input+0xba>
      netif = inp;
 801b5e4:	683b      	ldr	r3, [r7, #0]
 801b5e6:	613b      	str	r3, [r7, #16]
 801b5e8:	e02a      	b.n	801b640 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	613b      	str	r3, [r7, #16]
 801b5ee:	e027      	b.n	801b640 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b5f0:	6838      	ldr	r0, [r7, #0]
 801b5f2:	f7ff ff73 	bl	801b4dc <ip4_input_accept>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d002      	beq.n	801b602 <ip4_input+0xd2>
      netif = inp;
 801b5fc:	683b      	ldr	r3, [r7, #0]
 801b5fe:	613b      	str	r3, [r7, #16]
 801b600:	e01e      	b.n	801b640 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b602:	2300      	movs	r3, #0
 801b604:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b606:	4b5a      	ldr	r3, [pc, #360]	@ (801b770 <ip4_input+0x240>)
 801b608:	695b      	ldr	r3, [r3, #20]
 801b60a:	b2db      	uxtb	r3, r3
 801b60c:	2b7f      	cmp	r3, #127	@ 0x7f
 801b60e:	d017      	beq.n	801b640 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b610:	4b58      	ldr	r3, [pc, #352]	@ (801b774 <ip4_input+0x244>)
 801b612:	681b      	ldr	r3, [r3, #0]
 801b614:	613b      	str	r3, [r7, #16]
 801b616:	e00e      	b.n	801b636 <ip4_input+0x106>
          if (netif == inp) {
 801b618:	693a      	ldr	r2, [r7, #16]
 801b61a:	683b      	ldr	r3, [r7, #0]
 801b61c:	429a      	cmp	r2, r3
 801b61e:	d006      	beq.n	801b62e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b620:	6938      	ldr	r0, [r7, #16]
 801b622:	f7ff ff5b 	bl	801b4dc <ip4_input_accept>
 801b626:	4603      	mov	r3, r0
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d108      	bne.n	801b63e <ip4_input+0x10e>
 801b62c:	e000      	b.n	801b630 <ip4_input+0x100>
            continue;
 801b62e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	613b      	str	r3, [r7, #16]
 801b636:	693b      	ldr	r3, [r7, #16]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d1ed      	bne.n	801b618 <ip4_input+0xe8>
 801b63c:	e000      	b.n	801b640 <ip4_input+0x110>
            break;
 801b63e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b640:	4b4b      	ldr	r3, [pc, #300]	@ (801b770 <ip4_input+0x240>)
 801b642:	691b      	ldr	r3, [r3, #16]
 801b644:	6839      	ldr	r1, [r7, #0]
 801b646:	4618      	mov	r0, r3
 801b648:	f000 f96e 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801b64c:	4603      	mov	r3, r0
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d105      	bne.n	801b65e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b652:	4b47      	ldr	r3, [pc, #284]	@ (801b770 <ip4_input+0x240>)
 801b654:	691b      	ldr	r3, [r3, #16]
 801b656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b65a:	2be0      	cmp	r3, #224	@ 0xe0
 801b65c:	d104      	bne.n	801b668 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b65e:	6878      	ldr	r0, [r7, #4]
 801b660:	f7f7 fc32 	bl	8012ec8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b664:	2300      	movs	r3, #0
 801b666:	e07e      	b.n	801b766 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b668:	693b      	ldr	r3, [r7, #16]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d104      	bne.n	801b678 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b66e:	6878      	ldr	r0, [r7, #4]
 801b670:	f7f7 fc2a 	bl	8012ec8 <pbuf_free>
    return ERR_OK;
 801b674:	2300      	movs	r3, #0
 801b676:	e076      	b.n	801b766 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b678:	697b      	ldr	r3, [r7, #20]
 801b67a:	88db      	ldrh	r3, [r3, #6]
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	461a      	mov	r2, r3
 801b680:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b684:	4013      	ands	r3, r2
 801b686:	2b00      	cmp	r3, #0
 801b688:	d00b      	beq.n	801b6a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b68a:	6878      	ldr	r0, [r7, #4]
 801b68c:	f000 fc92 	bl	801bfb4 <ip4_reass>
 801b690:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d101      	bne.n	801b69c <ip4_input+0x16c>
      return ERR_OK;
 801b698:	2300      	movs	r3, #0
 801b69a:	e064      	b.n	801b766 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	685b      	ldr	r3, [r3, #4]
 801b6a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b6a2:	4a33      	ldr	r2, [pc, #204]	@ (801b770 <ip4_input+0x240>)
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b6a8:	4a31      	ldr	r2, [pc, #196]	@ (801b770 <ip4_input+0x240>)
 801b6aa:	683b      	ldr	r3, [r7, #0]
 801b6ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b6ae:	4a30      	ldr	r2, [pc, #192]	@ (801b770 <ip4_input+0x240>)
 801b6b0:	697b      	ldr	r3, [r7, #20]
 801b6b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b6b4:	697b      	ldr	r3, [r7, #20]
 801b6b6:	781b      	ldrb	r3, [r3, #0]
 801b6b8:	f003 030f 	and.w	r3, r3, #15
 801b6bc:	b2db      	uxtb	r3, r3
 801b6be:	009b      	lsls	r3, r3, #2
 801b6c0:	b2db      	uxtb	r3, r3
 801b6c2:	461a      	mov	r2, r3
 801b6c4:	4b2a      	ldr	r3, [pc, #168]	@ (801b770 <ip4_input+0x240>)
 801b6c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b6c8:	89fb      	ldrh	r3, [r7, #14]
 801b6ca:	4619      	mov	r1, r3
 801b6cc:	6878      	ldr	r0, [r7, #4]
 801b6ce:	f7f7 fb75 	bl	8012dbc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	7a5b      	ldrb	r3, [r3, #9]
 801b6d6:	2b11      	cmp	r3, #17
 801b6d8:	d006      	beq.n	801b6e8 <ip4_input+0x1b8>
 801b6da:	2b11      	cmp	r3, #17
 801b6dc:	dc13      	bgt.n	801b706 <ip4_input+0x1d6>
 801b6de:	2b01      	cmp	r3, #1
 801b6e0:	d00c      	beq.n	801b6fc <ip4_input+0x1cc>
 801b6e2:	2b06      	cmp	r3, #6
 801b6e4:	d005      	beq.n	801b6f2 <ip4_input+0x1c2>
 801b6e6:	e00e      	b.n	801b706 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b6e8:	6839      	ldr	r1, [r7, #0]
 801b6ea:	6878      	ldr	r0, [r7, #4]
 801b6ec:	f7fe f970 	bl	80199d0 <udp_input>
        break;
 801b6f0:	e026      	b.n	801b740 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b6f2:	6839      	ldr	r1, [r7, #0]
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7f9 fd2f 	bl	8015158 <tcp_input>
        break;
 801b6fa:	e021      	b.n	801b740 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b6fc:	6839      	ldr	r1, [r7, #0]
 801b6fe:	6878      	ldr	r0, [r7, #4]
 801b700:	f7ff fcee 	bl	801b0e0 <icmp_input>
        break;
 801b704:	e01c      	b.n	801b740 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b706:	4b1a      	ldr	r3, [pc, #104]	@ (801b770 <ip4_input+0x240>)
 801b708:	695b      	ldr	r3, [r3, #20]
 801b70a:	6939      	ldr	r1, [r7, #16]
 801b70c:	4618      	mov	r0, r3
 801b70e:	f000 f90b 	bl	801b928 <ip4_addr_isbroadcast_u32>
 801b712:	4603      	mov	r3, r0
 801b714:	2b00      	cmp	r3, #0
 801b716:	d10f      	bne.n	801b738 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b718:	4b15      	ldr	r3, [pc, #84]	@ (801b770 <ip4_input+0x240>)
 801b71a:	695b      	ldr	r3, [r3, #20]
 801b71c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b720:	2be0      	cmp	r3, #224	@ 0xe0
 801b722:	d009      	beq.n	801b738 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b728:	4619      	mov	r1, r3
 801b72a:	6878      	ldr	r0, [r7, #4]
 801b72c:	f7f7 fbb9 	bl	8012ea2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b730:	2102      	movs	r1, #2
 801b732:	6878      	ldr	r0, [r7, #4]
 801b734:	f7ff fdd8 	bl	801b2e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b738:	6878      	ldr	r0, [r7, #4]
 801b73a:	f7f7 fbc5 	bl	8012ec8 <pbuf_free>
        break;
 801b73e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b740:	4b0b      	ldr	r3, [pc, #44]	@ (801b770 <ip4_input+0x240>)
 801b742:	2200      	movs	r2, #0
 801b744:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b746:	4b0a      	ldr	r3, [pc, #40]	@ (801b770 <ip4_input+0x240>)
 801b748:	2200      	movs	r2, #0
 801b74a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b74c:	4b08      	ldr	r3, [pc, #32]	@ (801b770 <ip4_input+0x240>)
 801b74e:	2200      	movs	r2, #0
 801b750:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b752:	4b07      	ldr	r3, [pc, #28]	@ (801b770 <ip4_input+0x240>)
 801b754:	2200      	movs	r2, #0
 801b756:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b758:	4b05      	ldr	r3, [pc, #20]	@ (801b770 <ip4_input+0x240>)
 801b75a:	2200      	movs	r2, #0
 801b75c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b75e:	4b04      	ldr	r3, [pc, #16]	@ (801b770 <ip4_input+0x240>)
 801b760:	2200      	movs	r2, #0
 801b762:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b764:	2300      	movs	r3, #0
}
 801b766:	4618      	mov	r0, r3
 801b768:	3718      	adds	r7, #24
 801b76a:	46bd      	mov	sp, r7
 801b76c:	bd80      	pop	{r7, pc}
 801b76e:	bf00      	nop
 801b770:	2000bb1c 	.word	0x2000bb1c
 801b774:	2000f264 	.word	0x2000f264

0801b778 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	b08a      	sub	sp, #40	@ 0x28
 801b77c:	af04      	add	r7, sp, #16
 801b77e:	60f8      	str	r0, [r7, #12]
 801b780:	60b9      	str	r1, [r7, #8]
 801b782:	607a      	str	r2, [r7, #4]
 801b784:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	d009      	beq.n	801b7a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d003      	beq.n	801b79e <ip4_output_if+0x26>
 801b796:	68bb      	ldr	r3, [r7, #8]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	d102      	bne.n	801b7a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7a0:	3304      	adds	r3, #4
 801b7a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b7a4:	78fa      	ldrb	r2, [r7, #3]
 801b7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7a8:	9302      	str	r3, [sp, #8]
 801b7aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b7ae:	9301      	str	r3, [sp, #4]
 801b7b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b7b4:	9300      	str	r3, [sp, #0]
 801b7b6:	4613      	mov	r3, r2
 801b7b8:	687a      	ldr	r2, [r7, #4]
 801b7ba:	6979      	ldr	r1, [r7, #20]
 801b7bc:	68f8      	ldr	r0, [r7, #12]
 801b7be:	f000 f805 	bl	801b7cc <ip4_output_if_src>
 801b7c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b7c4:	4618      	mov	r0, r3
 801b7c6:	3718      	adds	r7, #24
 801b7c8:	46bd      	mov	sp, r7
 801b7ca:	bd80      	pop	{r7, pc}

0801b7cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b7cc:	b580      	push	{r7, lr}
 801b7ce:	b088      	sub	sp, #32
 801b7d0:	af00      	add	r7, sp, #0
 801b7d2:	60f8      	str	r0, [r7, #12]
 801b7d4:	60b9      	str	r1, [r7, #8]
 801b7d6:	607a      	str	r2, [r7, #4]
 801b7d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	7b9b      	ldrb	r3, [r3, #14]
 801b7de:	2b01      	cmp	r3, #1
 801b7e0:	d006      	beq.n	801b7f0 <ip4_output_if_src+0x24>
 801b7e2:	4b4b      	ldr	r3, [pc, #300]	@ (801b910 <ip4_output_if_src+0x144>)
 801b7e4:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b7e8:	494a      	ldr	r1, [pc, #296]	@ (801b914 <ip4_output_if_src+0x148>)
 801b7ea:	484b      	ldr	r0, [pc, #300]	@ (801b918 <ip4_output_if_src+0x14c>)
 801b7ec:	f001 fad4 	bl	801cd98 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d060      	beq.n	801b8b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b7f6:	2314      	movs	r3, #20
 801b7f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b7fa:	2114      	movs	r1, #20
 801b7fc:	68f8      	ldr	r0, [r7, #12]
 801b7fe:	f7f7 facd 	bl	8012d9c <pbuf_add_header>
 801b802:	4603      	mov	r3, r0
 801b804:	2b00      	cmp	r3, #0
 801b806:	d002      	beq.n	801b80e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b808:	f06f 0301 	mvn.w	r3, #1
 801b80c:	e07c      	b.n	801b908 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b80e:	68fb      	ldr	r3, [r7, #12]
 801b810:	685b      	ldr	r3, [r3, #4]
 801b812:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	895b      	ldrh	r3, [r3, #10]
 801b818:	2b13      	cmp	r3, #19
 801b81a:	d806      	bhi.n	801b82a <ip4_output_if_src+0x5e>
 801b81c:	4b3c      	ldr	r3, [pc, #240]	@ (801b910 <ip4_output_if_src+0x144>)
 801b81e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b822:	493e      	ldr	r1, [pc, #248]	@ (801b91c <ip4_output_if_src+0x150>)
 801b824:	483c      	ldr	r0, [pc, #240]	@ (801b918 <ip4_output_if_src+0x14c>)
 801b826:	f001 fab7 	bl	801cd98 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b82a:	69fb      	ldr	r3, [r7, #28]
 801b82c:	78fa      	ldrb	r2, [r7, #3]
 801b82e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b830:	69fb      	ldr	r3, [r7, #28]
 801b832:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b836:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	681a      	ldr	r2, [r3, #0]
 801b83c:	69fb      	ldr	r3, [r7, #28]
 801b83e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b840:	8b7b      	ldrh	r3, [r7, #26]
 801b842:	089b      	lsrs	r3, r3, #2
 801b844:	b29b      	uxth	r3, r3
 801b846:	b2db      	uxtb	r3, r3
 801b848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b84c:	b2da      	uxtb	r2, r3
 801b84e:	69fb      	ldr	r3, [r7, #28]
 801b850:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b852:	69fb      	ldr	r3, [r7, #28]
 801b854:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b858:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	891b      	ldrh	r3, [r3, #8]
 801b85e:	4618      	mov	r0, r3
 801b860:	f7f5 ff0a 	bl	8011678 <lwip_htons>
 801b864:	4603      	mov	r3, r0
 801b866:	461a      	mov	r2, r3
 801b868:	69fb      	ldr	r3, [r7, #28]
 801b86a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	2200      	movs	r2, #0
 801b870:	719a      	strb	r2, [r3, #6]
 801b872:	2200      	movs	r2, #0
 801b874:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b876:	4b2a      	ldr	r3, [pc, #168]	@ (801b920 <ip4_output_if_src+0x154>)
 801b878:	881b      	ldrh	r3, [r3, #0]
 801b87a:	4618      	mov	r0, r3
 801b87c:	f7f5 fefc 	bl	8011678 <lwip_htons>
 801b880:	4603      	mov	r3, r0
 801b882:	461a      	mov	r2, r3
 801b884:	69fb      	ldr	r3, [r7, #28]
 801b886:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b888:	4b25      	ldr	r3, [pc, #148]	@ (801b920 <ip4_output_if_src+0x154>)
 801b88a:	881b      	ldrh	r3, [r3, #0]
 801b88c:	3301      	adds	r3, #1
 801b88e:	b29a      	uxth	r2, r3
 801b890:	4b23      	ldr	r3, [pc, #140]	@ (801b920 <ip4_output_if_src+0x154>)
 801b892:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b894:	68bb      	ldr	r3, [r7, #8]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d104      	bne.n	801b8a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b89a:	4b22      	ldr	r3, [pc, #136]	@ (801b924 <ip4_output_if_src+0x158>)
 801b89c:	681a      	ldr	r2, [r3, #0]
 801b89e:	69fb      	ldr	r3, [r7, #28]
 801b8a0:	60da      	str	r2, [r3, #12]
 801b8a2:	e003      	b.n	801b8ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b8a4:	68bb      	ldr	r3, [r7, #8]
 801b8a6:	681a      	ldr	r2, [r3, #0]
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	729a      	strb	r2, [r3, #10]
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	72da      	strb	r2, [r3, #11]
 801b8b6:	e00f      	b.n	801b8d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	895b      	ldrh	r3, [r3, #10]
 801b8bc:	2b13      	cmp	r3, #19
 801b8be:	d802      	bhi.n	801b8c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b8c0:	f06f 0301 	mvn.w	r3, #1
 801b8c4:	e020      	b.n	801b908 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	685b      	ldr	r3, [r3, #4]
 801b8ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b8cc:	69fb      	ldr	r3, [r7, #28]
 801b8ce:	691b      	ldr	r3, [r3, #16]
 801b8d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b8d2:	f107 0314 	add.w	r3, r7, #20
 801b8d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8da:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d00c      	beq.n	801b8fa <ip4_output_if_src+0x12e>
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	891a      	ldrh	r2, [r3, #8]
 801b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b8e8:	429a      	cmp	r2, r3
 801b8ea:	d906      	bls.n	801b8fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b8ec:	687a      	ldr	r2, [r7, #4]
 801b8ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b8f0:	68f8      	ldr	r0, [r7, #12]
 801b8f2:	f000 fd53 	bl	801c39c <ip4_frag>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	e006      	b.n	801b908 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b8fc:	695b      	ldr	r3, [r3, #20]
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	68f9      	ldr	r1, [r7, #12]
 801b902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b904:	4798      	blx	r3
 801b906:	4603      	mov	r3, r0
}
 801b908:	4618      	mov	r0, r3
 801b90a:	3720      	adds	r7, #32
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}
 801b910:	0802162c 	.word	0x0802162c
 801b914:	08021660 	.word	0x08021660
 801b918:	0802166c 	.word	0x0802166c
 801b91c:	08021694 	.word	0x08021694
 801b920:	2000f3c2 	.word	0x2000f3c2
 801b924:	08022778 	.word	0x08022778

0801b928 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b928:	b480      	push	{r7}
 801b92a:	b085      	sub	sp, #20
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
 801b930:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b93c:	d002      	beq.n	801b944 <ip4_addr_isbroadcast_u32+0x1c>
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	2b00      	cmp	r3, #0
 801b942:	d101      	bne.n	801b948 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b944:	2301      	movs	r3, #1
 801b946:	e02a      	b.n	801b99e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b94e:	f003 0302 	and.w	r3, r3, #2
 801b952:	2b00      	cmp	r3, #0
 801b954:	d101      	bne.n	801b95a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b956:	2300      	movs	r3, #0
 801b958:	e021      	b.n	801b99e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b95a:	683b      	ldr	r3, [r7, #0]
 801b95c:	3304      	adds	r3, #4
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	687a      	ldr	r2, [r7, #4]
 801b962:	429a      	cmp	r2, r3
 801b964:	d101      	bne.n	801b96a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b966:	2300      	movs	r3, #0
 801b968:	e019      	b.n	801b99e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b96a:	68fa      	ldr	r2, [r7, #12]
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	3304      	adds	r3, #4
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	405a      	eors	r2, r3
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	3308      	adds	r3, #8
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4013      	ands	r3, r2
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d10d      	bne.n	801b99c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	3308      	adds	r3, #8
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	43da      	mvns	r2, r3
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b98c:	683b      	ldr	r3, [r7, #0]
 801b98e:	3308      	adds	r3, #8
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b994:	429a      	cmp	r2, r3
 801b996:	d101      	bne.n	801b99c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b998:	2301      	movs	r3, #1
 801b99a:	e000      	b.n	801b99e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b99c:	2300      	movs	r3, #0
  }
}
 801b99e:	4618      	mov	r0, r3
 801b9a0:	3714      	adds	r7, #20
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a8:	4770      	bx	lr
	...

0801b9ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b084      	sub	sp, #16
 801b9b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b9b2:	2300      	movs	r3, #0
 801b9b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b9b6:	4b12      	ldr	r3, [pc, #72]	@ (801ba00 <ip_reass_tmr+0x54>)
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b9bc:	e018      	b.n	801b9f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	7fdb      	ldrb	r3, [r3, #31]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d00b      	beq.n	801b9de <ip_reass_tmr+0x32>
      r->timer--;
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	7fdb      	ldrb	r3, [r3, #31]
 801b9ca:	3b01      	subs	r3, #1
 801b9cc:	b2da      	uxtb	r2, r3
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	60fb      	str	r3, [r7, #12]
 801b9dc:	e008      	b.n	801b9f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b9de:	68fb      	ldr	r3, [r7, #12]
 801b9e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b9e2:	68fb      	ldr	r3, [r7, #12]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b9e8:	68b9      	ldr	r1, [r7, #8]
 801b9ea:	6878      	ldr	r0, [r7, #4]
 801b9ec:	f000 f80a 	bl	801ba04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d1e3      	bne.n	801b9be <ip_reass_tmr+0x12>
    }
  }
}
 801b9f6:	bf00      	nop
 801b9f8:	bf00      	nop
 801b9fa:	3710      	adds	r7, #16
 801b9fc:	46bd      	mov	sp, r7
 801b9fe:	bd80      	pop	{r7, pc}
 801ba00:	2000f3c4 	.word	0x2000f3c4

0801ba04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ba04:	b580      	push	{r7, lr}
 801ba06:	b088      	sub	sp, #32
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	6078      	str	r0, [r7, #4]
 801ba0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ba0e:	2300      	movs	r3, #0
 801ba10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ba12:	683a      	ldr	r2, [r7, #0]
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	429a      	cmp	r2, r3
 801ba18:	d105      	bne.n	801ba26 <ip_reass_free_complete_datagram+0x22>
 801ba1a:	4b45      	ldr	r3, [pc, #276]	@ (801bb30 <ip_reass_free_complete_datagram+0x12c>)
 801ba1c:	22ab      	movs	r2, #171	@ 0xab
 801ba1e:	4945      	ldr	r1, [pc, #276]	@ (801bb34 <ip_reass_free_complete_datagram+0x130>)
 801ba20:	4845      	ldr	r0, [pc, #276]	@ (801bb38 <ip_reass_free_complete_datagram+0x134>)
 801ba22:	f001 f9b9 	bl	801cd98 <iprintf>
  if (prev != NULL) {
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d00a      	beq.n	801ba42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	687a      	ldr	r2, [r7, #4]
 801ba32:	429a      	cmp	r2, r3
 801ba34:	d005      	beq.n	801ba42 <ip_reass_free_complete_datagram+0x3e>
 801ba36:	4b3e      	ldr	r3, [pc, #248]	@ (801bb30 <ip_reass_free_complete_datagram+0x12c>)
 801ba38:	22ad      	movs	r2, #173	@ 0xad
 801ba3a:	4940      	ldr	r1, [pc, #256]	@ (801bb3c <ip_reass_free_complete_datagram+0x138>)
 801ba3c:	483e      	ldr	r0, [pc, #248]	@ (801bb38 <ip_reass_free_complete_datagram+0x134>)
 801ba3e:	f001 f9ab 	bl	801cd98 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	685b      	ldr	r3, [r3, #4]
 801ba46:	685b      	ldr	r3, [r3, #4]
 801ba48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ba4a:	697b      	ldr	r3, [r7, #20]
 801ba4c:	889b      	ldrh	r3, [r3, #4]
 801ba4e:	b29b      	uxth	r3, r3
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d12a      	bne.n	801baaa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	685b      	ldr	r3, [r3, #4]
 801ba58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ba5a:	697b      	ldr	r3, [r7, #20]
 801ba5c:	681a      	ldr	r2, [r3, #0]
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ba62:	69bb      	ldr	r3, [r7, #24]
 801ba64:	6858      	ldr	r0, [r3, #4]
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	3308      	adds	r3, #8
 801ba6a:	2214      	movs	r2, #20
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	f001 fb1c 	bl	801d0aa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ba72:	2101      	movs	r1, #1
 801ba74:	69b8      	ldr	r0, [r7, #24]
 801ba76:	f7ff fc47 	bl	801b308 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ba7a:	69b8      	ldr	r0, [r7, #24]
 801ba7c:	f7f7 fab2 	bl	8012fe4 <pbuf_clen>
 801ba80:	4603      	mov	r3, r0
 801ba82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba84:	8bfa      	ldrh	r2, [r7, #30]
 801ba86:	8a7b      	ldrh	r3, [r7, #18]
 801ba88:	4413      	add	r3, r2
 801ba8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba8e:	db05      	blt.n	801ba9c <ip_reass_free_complete_datagram+0x98>
 801ba90:	4b27      	ldr	r3, [pc, #156]	@ (801bb30 <ip_reass_free_complete_datagram+0x12c>)
 801ba92:	22bc      	movs	r2, #188	@ 0xbc
 801ba94:	492a      	ldr	r1, [pc, #168]	@ (801bb40 <ip_reass_free_complete_datagram+0x13c>)
 801ba96:	4828      	ldr	r0, [pc, #160]	@ (801bb38 <ip_reass_free_complete_datagram+0x134>)
 801ba98:	f001 f97e 	bl	801cd98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba9c:	8bfa      	ldrh	r2, [r7, #30]
 801ba9e:	8a7b      	ldrh	r3, [r7, #18]
 801baa0:	4413      	add	r3, r2
 801baa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801baa4:	69b8      	ldr	r0, [r7, #24]
 801baa6:	f7f7 fa0f 	bl	8012ec8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801bab0:	e01f      	b.n	801baf2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801bab2:	69bb      	ldr	r3, [r7, #24]
 801bab4:	685b      	ldr	r3, [r3, #4]
 801bab6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bab8:	69bb      	ldr	r3, [r7, #24]
 801baba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801bac2:	68f8      	ldr	r0, [r7, #12]
 801bac4:	f7f7 fa8e 	bl	8012fe4 <pbuf_clen>
 801bac8:	4603      	mov	r3, r0
 801baca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bacc:	8bfa      	ldrh	r2, [r7, #30]
 801bace:	8a7b      	ldrh	r3, [r7, #18]
 801bad0:	4413      	add	r3, r2
 801bad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bad6:	db05      	blt.n	801bae4 <ip_reass_free_complete_datagram+0xe0>
 801bad8:	4b15      	ldr	r3, [pc, #84]	@ (801bb30 <ip_reass_free_complete_datagram+0x12c>)
 801bada:	22cc      	movs	r2, #204	@ 0xcc
 801badc:	4918      	ldr	r1, [pc, #96]	@ (801bb40 <ip_reass_free_complete_datagram+0x13c>)
 801bade:	4816      	ldr	r0, [pc, #88]	@ (801bb38 <ip_reass_free_complete_datagram+0x134>)
 801bae0:	f001 f95a 	bl	801cd98 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bae4:	8bfa      	ldrh	r2, [r7, #30]
 801bae6:	8a7b      	ldrh	r3, [r7, #18]
 801bae8:	4413      	add	r3, r2
 801baea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801baec:	68f8      	ldr	r0, [r7, #12]
 801baee:	f7f7 f9eb 	bl	8012ec8 <pbuf_free>
  while (p != NULL) {
 801baf2:	69bb      	ldr	r3, [r7, #24]
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d1dc      	bne.n	801bab2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801baf8:	6839      	ldr	r1, [r7, #0]
 801bafa:	6878      	ldr	r0, [r7, #4]
 801bafc:	f000 f8c2 	bl	801bc84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bb00:	4b10      	ldr	r3, [pc, #64]	@ (801bb44 <ip_reass_free_complete_datagram+0x140>)
 801bb02:	881b      	ldrh	r3, [r3, #0]
 801bb04:	8bfa      	ldrh	r2, [r7, #30]
 801bb06:	429a      	cmp	r2, r3
 801bb08:	d905      	bls.n	801bb16 <ip_reass_free_complete_datagram+0x112>
 801bb0a:	4b09      	ldr	r3, [pc, #36]	@ (801bb30 <ip_reass_free_complete_datagram+0x12c>)
 801bb0c:	22d2      	movs	r2, #210	@ 0xd2
 801bb0e:	490e      	ldr	r1, [pc, #56]	@ (801bb48 <ip_reass_free_complete_datagram+0x144>)
 801bb10:	4809      	ldr	r0, [pc, #36]	@ (801bb38 <ip_reass_free_complete_datagram+0x134>)
 801bb12:	f001 f941 	bl	801cd98 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bb16:	4b0b      	ldr	r3, [pc, #44]	@ (801bb44 <ip_reass_free_complete_datagram+0x140>)
 801bb18:	881a      	ldrh	r2, [r3, #0]
 801bb1a:	8bfb      	ldrh	r3, [r7, #30]
 801bb1c:	1ad3      	subs	r3, r2, r3
 801bb1e:	b29a      	uxth	r2, r3
 801bb20:	4b08      	ldr	r3, [pc, #32]	@ (801bb44 <ip_reass_free_complete_datagram+0x140>)
 801bb22:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bb24:	8bfb      	ldrh	r3, [r7, #30]
}
 801bb26:	4618      	mov	r0, r3
 801bb28:	3720      	adds	r7, #32
 801bb2a:	46bd      	mov	sp, r7
 801bb2c:	bd80      	pop	{r7, pc}
 801bb2e:	bf00      	nop
 801bb30:	080216c4 	.word	0x080216c4
 801bb34:	08021700 	.word	0x08021700
 801bb38:	0802170c 	.word	0x0802170c
 801bb3c:	08021734 	.word	0x08021734
 801bb40:	08021748 	.word	0x08021748
 801bb44:	2000f3c8 	.word	0x2000f3c8
 801bb48:	08021768 	.word	0x08021768

0801bb4c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bb4c:	b580      	push	{r7, lr}
 801bb4e:	b08a      	sub	sp, #40	@ 0x28
 801bb50:	af00      	add	r7, sp, #0
 801bb52:	6078      	str	r0, [r7, #4]
 801bb54:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bb56:	2300      	movs	r3, #0
 801bb58:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bb5e:	2300      	movs	r3, #0
 801bb60:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bb62:	2300      	movs	r3, #0
 801bb64:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bb66:	2300      	movs	r3, #0
 801bb68:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bb6a:	4b28      	ldr	r3, [pc, #160]	@ (801bc0c <ip_reass_remove_oldest_datagram+0xc0>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bb70:	e030      	b.n	801bbd4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb74:	695a      	ldr	r2, [r3, #20]
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	68db      	ldr	r3, [r3, #12]
 801bb7a:	429a      	cmp	r2, r3
 801bb7c:	d10c      	bne.n	801bb98 <ip_reass_remove_oldest_datagram+0x4c>
 801bb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb80:	699a      	ldr	r2, [r3, #24]
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	691b      	ldr	r3, [r3, #16]
 801bb86:	429a      	cmp	r2, r3
 801bb88:	d106      	bne.n	801bb98 <ip_reass_remove_oldest_datagram+0x4c>
 801bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb8c:	899a      	ldrh	r2, [r3, #12]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	889b      	ldrh	r3, [r3, #4]
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	429a      	cmp	r2, r3
 801bb96:	d014      	beq.n	801bbc2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bb9e:	6a3b      	ldr	r3, [r7, #32]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d104      	bne.n	801bbae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bba6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bba8:	69fb      	ldr	r3, [r7, #28]
 801bbaa:	61bb      	str	r3, [r7, #24]
 801bbac:	e009      	b.n	801bbc2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbb0:	7fda      	ldrb	r2, [r3, #31]
 801bbb2:	6a3b      	ldr	r3, [r7, #32]
 801bbb4:	7fdb      	ldrb	r3, [r3, #31]
 801bbb6:	429a      	cmp	r2, r3
 801bbb8:	d803      	bhi.n	801bbc2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbbc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bbbe:	69fb      	ldr	r3, [r7, #28]
 801bbc0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d001      	beq.n	801bbce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbcc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d1cb      	bne.n	801bb72 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bbda:	6a3b      	ldr	r3, [r7, #32]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d008      	beq.n	801bbf2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bbe0:	69b9      	ldr	r1, [r7, #24]
 801bbe2:	6a38      	ldr	r0, [r7, #32]
 801bbe4:	f7ff ff0e 	bl	801ba04 <ip_reass_free_complete_datagram>
 801bbe8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bbea:	697a      	ldr	r2, [r7, #20]
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	4413      	add	r3, r2
 801bbf0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bbf2:	697a      	ldr	r2, [r7, #20]
 801bbf4:	683b      	ldr	r3, [r7, #0]
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	da02      	bge.n	801bc00 <ip_reass_remove_oldest_datagram+0xb4>
 801bbfa:	693b      	ldr	r3, [r7, #16]
 801bbfc:	2b01      	cmp	r3, #1
 801bbfe:	dcac      	bgt.n	801bb5a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bc00:	697b      	ldr	r3, [r7, #20]
}
 801bc02:	4618      	mov	r0, r3
 801bc04:	3728      	adds	r7, #40	@ 0x28
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bd80      	pop	{r7, pc}
 801bc0a:	bf00      	nop
 801bc0c:	2000f3c4 	.word	0x2000f3c4

0801bc10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b084      	sub	sp, #16
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
 801bc18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc1a:	2004      	movs	r0, #4
 801bc1c:	f7f6 fa3a 	bl	8012094 <memp_malloc>
 801bc20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d110      	bne.n	801bc4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bc28:	6839      	ldr	r1, [r7, #0]
 801bc2a:	6878      	ldr	r0, [r7, #4]
 801bc2c:	f7ff ff8e 	bl	801bb4c <ip_reass_remove_oldest_datagram>
 801bc30:	4602      	mov	r2, r0
 801bc32:	683b      	ldr	r3, [r7, #0]
 801bc34:	4293      	cmp	r3, r2
 801bc36:	dc03      	bgt.n	801bc40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc38:	2004      	movs	r0, #4
 801bc3a:	f7f6 fa2b 	bl	8012094 <memp_malloc>
 801bc3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d101      	bne.n	801bc4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bc46:	2300      	movs	r3, #0
 801bc48:	e016      	b.n	801bc78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bc4a:	2220      	movs	r2, #32
 801bc4c:	2100      	movs	r1, #0
 801bc4e:	68f8      	ldr	r0, [r7, #12]
 801bc50:	f001 f941 	bl	801ced6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	220f      	movs	r2, #15
 801bc58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bc5a:	4b09      	ldr	r3, [pc, #36]	@ (801bc80 <ip_reass_enqueue_new_datagram+0x70>)
 801bc5c:	681a      	ldr	r2, [r3, #0]
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bc62:	4a07      	ldr	r2, [pc, #28]	@ (801bc80 <ip_reass_enqueue_new_datagram+0x70>)
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	3308      	adds	r3, #8
 801bc6c:	2214      	movs	r2, #20
 801bc6e:	6879      	ldr	r1, [r7, #4]
 801bc70:	4618      	mov	r0, r3
 801bc72:	f001 fa1a 	bl	801d0aa <memcpy>
  return ipr;
 801bc76:	68fb      	ldr	r3, [r7, #12]
}
 801bc78:	4618      	mov	r0, r3
 801bc7a:	3710      	adds	r7, #16
 801bc7c:	46bd      	mov	sp, r7
 801bc7e:	bd80      	pop	{r7, pc}
 801bc80:	2000f3c4 	.word	0x2000f3c4

0801bc84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b082      	sub	sp, #8
 801bc88:	af00      	add	r7, sp, #0
 801bc8a:	6078      	str	r0, [r7, #4]
 801bc8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bc8e:	4b10      	ldr	r3, [pc, #64]	@ (801bcd0 <ip_reass_dequeue_datagram+0x4c>)
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	687a      	ldr	r2, [r7, #4]
 801bc94:	429a      	cmp	r2, r3
 801bc96:	d104      	bne.n	801bca2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	681b      	ldr	r3, [r3, #0]
 801bc9c:	4a0c      	ldr	r2, [pc, #48]	@ (801bcd0 <ip_reass_dequeue_datagram+0x4c>)
 801bc9e:	6013      	str	r3, [r2, #0]
 801bca0:	e00d      	b.n	801bcbe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bca2:	683b      	ldr	r3, [r7, #0]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d106      	bne.n	801bcb6 <ip_reass_dequeue_datagram+0x32>
 801bca8:	4b0a      	ldr	r3, [pc, #40]	@ (801bcd4 <ip_reass_dequeue_datagram+0x50>)
 801bcaa:	f240 1245 	movw	r2, #325	@ 0x145
 801bcae:	490a      	ldr	r1, [pc, #40]	@ (801bcd8 <ip_reass_dequeue_datagram+0x54>)
 801bcb0:	480a      	ldr	r0, [pc, #40]	@ (801bcdc <ip_reass_dequeue_datagram+0x58>)
 801bcb2:	f001 f871 	bl	801cd98 <iprintf>
    prev->next = ipr->next;
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	681a      	ldr	r2, [r3, #0]
 801bcba:	683b      	ldr	r3, [r7, #0]
 801bcbc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bcbe:	6879      	ldr	r1, [r7, #4]
 801bcc0:	2004      	movs	r0, #4
 801bcc2:	f7f6 fa5d 	bl	8012180 <memp_free>
}
 801bcc6:	bf00      	nop
 801bcc8:	3708      	adds	r7, #8
 801bcca:	46bd      	mov	sp, r7
 801bccc:	bd80      	pop	{r7, pc}
 801bcce:	bf00      	nop
 801bcd0:	2000f3c4 	.word	0x2000f3c4
 801bcd4:	080216c4 	.word	0x080216c4
 801bcd8:	0802178c 	.word	0x0802178c
 801bcdc:	0802170c 	.word	0x0802170c

0801bce0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b08c      	sub	sp, #48	@ 0x30
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	60f8      	str	r0, [r7, #12]
 801bce8:	60b9      	str	r1, [r7, #8]
 801bcea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bcec:	2300      	movs	r3, #0
 801bcee:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bcf0:	2301      	movs	r3, #1
 801bcf2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	685b      	ldr	r3, [r3, #4]
 801bcf8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bcfa:	69fb      	ldr	r3, [r7, #28]
 801bcfc:	885b      	ldrh	r3, [r3, #2]
 801bcfe:	b29b      	uxth	r3, r3
 801bd00:	4618      	mov	r0, r3
 801bd02:	f7f5 fcb9 	bl	8011678 <lwip_htons>
 801bd06:	4603      	mov	r3, r0
 801bd08:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bd0a:	69fb      	ldr	r3, [r7, #28]
 801bd0c:	781b      	ldrb	r3, [r3, #0]
 801bd0e:	f003 030f 	and.w	r3, r3, #15
 801bd12:	b2db      	uxtb	r3, r3
 801bd14:	009b      	lsls	r3, r3, #2
 801bd16:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bd18:	7e7b      	ldrb	r3, [r7, #25]
 801bd1a:	b29b      	uxth	r3, r3
 801bd1c:	8b7a      	ldrh	r2, [r7, #26]
 801bd1e:	429a      	cmp	r2, r3
 801bd20:	d202      	bcs.n	801bd28 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd22:	f04f 33ff 	mov.w	r3, #4294967295
 801bd26:	e135      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bd28:	7e7b      	ldrb	r3, [r7, #25]
 801bd2a:	b29b      	uxth	r3, r3
 801bd2c:	8b7a      	ldrh	r2, [r7, #26]
 801bd2e:	1ad3      	subs	r3, r2, r3
 801bd30:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bd32:	69fb      	ldr	r3, [r7, #28]
 801bd34:	88db      	ldrh	r3, [r3, #6]
 801bd36:	b29b      	uxth	r3, r3
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7f5 fc9d 	bl	8011678 <lwip_htons>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	00db      	lsls	r3, r3, #3
 801bd48:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bd4a:	68bb      	ldr	r3, [r7, #8]
 801bd4c:	685b      	ldr	r3, [r3, #4]
 801bd4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd52:	2200      	movs	r2, #0
 801bd54:	701a      	strb	r2, [r3, #0]
 801bd56:	2200      	movs	r2, #0
 801bd58:	705a      	strb	r2, [r3, #1]
 801bd5a:	2200      	movs	r2, #0
 801bd5c:	709a      	strb	r2, [r3, #2]
 801bd5e:	2200      	movs	r2, #0
 801bd60:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd64:	8afa      	ldrh	r2, [r7, #22]
 801bd66:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bd68:	8afa      	ldrh	r2, [r7, #22]
 801bd6a:	8b7b      	ldrh	r3, [r7, #26]
 801bd6c:	4413      	add	r3, r2
 801bd6e:	b29a      	uxth	r2, r3
 801bd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd72:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd76:	88db      	ldrh	r3, [r3, #6]
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	8afa      	ldrh	r2, [r7, #22]
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	d902      	bls.n	801bd86 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd80:	f04f 33ff 	mov.w	r3, #4294967295
 801bd84:	e106      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd8c:	e068      	b.n	801be60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd90:	685b      	ldr	r3, [r3, #4]
 801bd92:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd96:	889b      	ldrh	r3, [r3, #4]
 801bd98:	b29a      	uxth	r2, r3
 801bd9a:	693b      	ldr	r3, [r7, #16]
 801bd9c:	889b      	ldrh	r3, [r3, #4]
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d235      	bcs.n	801be10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bda6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bda8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d020      	beq.n	801bdf2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdb2:	889b      	ldrh	r3, [r3, #4]
 801bdb4:	b29a      	uxth	r2, r3
 801bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb8:	88db      	ldrh	r3, [r3, #6]
 801bdba:	b29b      	uxth	r3, r3
 801bdbc:	429a      	cmp	r2, r3
 801bdbe:	d307      	bcc.n	801bdd0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdc2:	88db      	ldrh	r3, [r3, #6]
 801bdc4:	b29a      	uxth	r2, r3
 801bdc6:	693b      	ldr	r3, [r7, #16]
 801bdc8:	889b      	ldrh	r3, [r3, #4]
 801bdca:	b29b      	uxth	r3, r3
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	d902      	bls.n	801bdd6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 801bdd4:	e0de      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bdd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdd8:	68ba      	ldr	r2, [r7, #8]
 801bdda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdde:	88db      	ldrh	r3, [r3, #6]
 801bde0:	b29a      	uxth	r2, r3
 801bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bde4:	889b      	ldrh	r3, [r3, #4]
 801bde6:	b29b      	uxth	r3, r3
 801bde8:	429a      	cmp	r2, r3
 801bdea:	d03d      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bdec:	2300      	movs	r3, #0
 801bdee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bdf0:	e03a      	b.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bdf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdf4:	88db      	ldrh	r3, [r3, #6]
 801bdf6:	b29a      	uxth	r2, r3
 801bdf8:	693b      	ldr	r3, [r7, #16]
 801bdfa:	889b      	ldrh	r3, [r3, #4]
 801bdfc:	b29b      	uxth	r3, r3
 801bdfe:	429a      	cmp	r2, r3
 801be00:	d902      	bls.n	801be08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be02:	f04f 33ff 	mov.w	r3, #4294967295
 801be06:	e0c5      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	68ba      	ldr	r2, [r7, #8]
 801be0c:	605a      	str	r2, [r3, #4]
      break;
 801be0e:	e02b      	b.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801be10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be12:	889b      	ldrh	r3, [r3, #4]
 801be14:	b29a      	uxth	r2, r3
 801be16:	693b      	ldr	r3, [r7, #16]
 801be18:	889b      	ldrh	r3, [r3, #4]
 801be1a:	b29b      	uxth	r3, r3
 801be1c:	429a      	cmp	r2, r3
 801be1e:	d102      	bne.n	801be26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be20:	f04f 33ff 	mov.w	r3, #4294967295
 801be24:	e0b6      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801be26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be28:	889b      	ldrh	r3, [r3, #4]
 801be2a:	b29a      	uxth	r2, r3
 801be2c:	693b      	ldr	r3, [r7, #16]
 801be2e:	88db      	ldrh	r3, [r3, #6]
 801be30:	b29b      	uxth	r3, r3
 801be32:	429a      	cmp	r2, r3
 801be34:	d202      	bcs.n	801be3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be36:	f04f 33ff 	mov.w	r3, #4294967295
 801be3a:	e0ab      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d009      	beq.n	801be56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801be42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be44:	88db      	ldrh	r3, [r3, #6]
 801be46:	b29a      	uxth	r2, r3
 801be48:	693b      	ldr	r3, [r7, #16]
 801be4a:	889b      	ldrh	r3, [r3, #4]
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	429a      	cmp	r2, r3
 801be50:	d001      	beq.n	801be56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be52:	2300      	movs	r3, #0
 801be54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801be56:	693b      	ldr	r3, [r7, #16]
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801be5c:	693b      	ldr	r3, [r7, #16]
 801be5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be62:	2b00      	cmp	r3, #0
 801be64:	d193      	bne.n	801bd8e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801be66:	e000      	b.n	801be6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801be68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d12d      	bne.n	801becc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be72:	2b00      	cmp	r3, #0
 801be74:	d01c      	beq.n	801beb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801be76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be78:	88db      	ldrh	r3, [r3, #6]
 801be7a:	b29a      	uxth	r2, r3
 801be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be7e:	889b      	ldrh	r3, [r3, #4]
 801be80:	b29b      	uxth	r3, r3
 801be82:	429a      	cmp	r2, r3
 801be84:	d906      	bls.n	801be94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801be86:	4b45      	ldr	r3, [pc, #276]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be88:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801be8c:	4944      	ldr	r1, [pc, #272]	@ (801bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801be8e:	4845      	ldr	r0, [pc, #276]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be90:	f000 ff82 	bl	801cd98 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801be94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be96:	68ba      	ldr	r2, [r7, #8]
 801be98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801be9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be9c:	88db      	ldrh	r3, [r3, #6]
 801be9e:	b29a      	uxth	r2, r3
 801bea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bea2:	889b      	ldrh	r3, [r3, #4]
 801bea4:	b29b      	uxth	r3, r3
 801bea6:	429a      	cmp	r2, r3
 801bea8:	d010      	beq.n	801becc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801beaa:	2300      	movs	r3, #0
 801beac:	623b      	str	r3, [r7, #32]
 801beae:	e00d      	b.n	801becc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	685b      	ldr	r3, [r3, #4]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d006      	beq.n	801bec6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801beb8:	4b38      	ldr	r3, [pc, #224]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801beba:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801bebe:	493a      	ldr	r1, [pc, #232]	@ (801bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bec0:	4838      	ldr	r0, [pc, #224]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bec2:	f000 ff69 	bl	801cd98 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	68ba      	ldr	r2, [r7, #8]
 801beca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2b00      	cmp	r3, #0
 801bed0:	d105      	bne.n	801bede <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	7f9b      	ldrb	r3, [r3, #30]
 801bed6:	f003 0301 	and.w	r3, r3, #1
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d059      	beq.n	801bf92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bede:	6a3b      	ldr	r3, [r7, #32]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d04f      	beq.n	801bf84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	685b      	ldr	r3, [r3, #4]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d006      	beq.n	801befa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	685b      	ldr	r3, [r3, #4]
 801bef0:	685b      	ldr	r3, [r3, #4]
 801bef2:	889b      	ldrh	r3, [r3, #4]
 801bef4:	b29b      	uxth	r3, r3
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d002      	beq.n	801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801befa:	2300      	movs	r3, #0
 801befc:	623b      	str	r3, [r7, #32]
 801befe:	e041      	b.n	801bf84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf02:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801bf04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf06:	681b      	ldr	r3, [r3, #0]
 801bf08:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf0a:	e012      	b.n	801bf32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf14:	88db      	ldrh	r3, [r3, #6]
 801bf16:	b29a      	uxth	r2, r3
 801bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf1a:	889b      	ldrh	r3, [r3, #4]
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	429a      	cmp	r2, r3
 801bf20:	d002      	beq.n	801bf28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bf22:	2300      	movs	r3, #0
 801bf24:	623b      	str	r3, [r7, #32]
            break;
 801bf26:	e007      	b.n	801bf38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bf28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf2a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d1e9      	bne.n	801bf0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bf38:	6a3b      	ldr	r3, [r7, #32]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d022      	beq.n	801bf84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	685b      	ldr	r3, [r3, #4]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d106      	bne.n	801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bf46:	4b15      	ldr	r3, [pc, #84]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf48:	f240 12df 	movw	r2, #479	@ 0x1df
 801bf4c:	4917      	ldr	r1, [pc, #92]	@ (801bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf4e:	4815      	ldr	r0, [pc, #84]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf50:	f000 ff22 	bl	801cd98 <iprintf>
          LWIP_ASSERT("sanity check",
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	685b      	ldr	r3, [r3, #4]
 801bf58:	685b      	ldr	r3, [r3, #4]
 801bf5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d106      	bne.n	801bf6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bf60:	4b0e      	ldr	r3, [pc, #56]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf62:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bf66:	4911      	ldr	r1, [pc, #68]	@ (801bfac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf68:	480e      	ldr	r0, [pc, #56]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf6a:	f000 ff15 	bl	801cd98 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bf6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d006      	beq.n	801bf84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bf76:	4b09      	ldr	r3, [pc, #36]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf78:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bf7c:	490c      	ldr	r1, [pc, #48]	@ (801bfb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bf7e:	4809      	ldr	r0, [pc, #36]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf80:	f000 ff0a 	bl	801cd98 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bf84:	6a3b      	ldr	r3, [r7, #32]
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	bf14      	ite	ne
 801bf8a:	2301      	movne	r3, #1
 801bf8c:	2300      	moveq	r3, #0
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	e000      	b.n	801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bf92:	2300      	movs	r3, #0
}
 801bf94:	4618      	mov	r0, r3
 801bf96:	3730      	adds	r7, #48	@ 0x30
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	080216c4 	.word	0x080216c4
 801bfa0:	080217a8 	.word	0x080217a8
 801bfa4:	0802170c 	.word	0x0802170c
 801bfa8:	080217c8 	.word	0x080217c8
 801bfac:	08021800 	.word	0x08021800
 801bfb0:	08021810 	.word	0x08021810

0801bfb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	b08e      	sub	sp, #56	@ 0x38
 801bfb8:	af00      	add	r7, sp, #0
 801bfba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	685b      	ldr	r3, [r3, #4]
 801bfc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	f003 030f 	and.w	r3, r3, #15
 801bfca:	b2db      	uxtb	r3, r3
 801bfcc:	009b      	lsls	r3, r3, #2
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	2b14      	cmp	r3, #20
 801bfd2:	f040 8171 	bne.w	801c2b8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd8:	88db      	ldrh	r3, [r3, #6]
 801bfda:	b29b      	uxth	r3, r3
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f7f5 fb4b 	bl	8011678 <lwip_htons>
 801bfe2:	4603      	mov	r3, r0
 801bfe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bfe8:	b29b      	uxth	r3, r3
 801bfea:	00db      	lsls	r3, r3, #3
 801bfec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bfee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bff0:	885b      	ldrh	r3, [r3, #2]
 801bff2:	b29b      	uxth	r3, r3
 801bff4:	4618      	mov	r0, r3
 801bff6:	f7f5 fb3f 	bl	8011678 <lwip_htons>
 801bffa:	4603      	mov	r3, r0
 801bffc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	f003 030f 	and.w	r3, r3, #15
 801c006:	b2db      	uxtb	r3, r3
 801c008:	009b      	lsls	r3, r3, #2
 801c00a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c00e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c012:	b29b      	uxth	r3, r3
 801c014:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c016:	429a      	cmp	r2, r3
 801c018:	f0c0 8150 	bcc.w	801c2bc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c01c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c020:	b29b      	uxth	r3, r3
 801c022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c024:	1ad3      	subs	r3, r2, r3
 801c026:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c028:	6878      	ldr	r0, [r7, #4]
 801c02a:	f7f6 ffdb 	bl	8012fe4 <pbuf_clen>
 801c02e:	4603      	mov	r3, r0
 801c030:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c032:	4b8c      	ldr	r3, [pc, #560]	@ (801c264 <ip4_reass+0x2b0>)
 801c034:	881b      	ldrh	r3, [r3, #0]
 801c036:	461a      	mov	r2, r3
 801c038:	8c3b      	ldrh	r3, [r7, #32]
 801c03a:	4413      	add	r3, r2
 801c03c:	2b0a      	cmp	r3, #10
 801c03e:	dd10      	ble.n	801c062 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c040:	8c3b      	ldrh	r3, [r7, #32]
 801c042:	4619      	mov	r1, r3
 801c044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c046:	f7ff fd81 	bl	801bb4c <ip_reass_remove_oldest_datagram>
 801c04a:	4603      	mov	r3, r0
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f000 8137 	beq.w	801c2c0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c052:	4b84      	ldr	r3, [pc, #528]	@ (801c264 <ip4_reass+0x2b0>)
 801c054:	881b      	ldrh	r3, [r3, #0]
 801c056:	461a      	mov	r2, r3
 801c058:	8c3b      	ldrh	r3, [r7, #32]
 801c05a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c05c:	2b0a      	cmp	r3, #10
 801c05e:	f300 812f 	bgt.w	801c2c0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c062:	4b81      	ldr	r3, [pc, #516]	@ (801c268 <ip4_reass+0x2b4>)
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	633b      	str	r3, [r7, #48]	@ 0x30
 801c068:	e015      	b.n	801c096 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c06c:	695a      	ldr	r2, [r3, #20]
 801c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c070:	68db      	ldr	r3, [r3, #12]
 801c072:	429a      	cmp	r2, r3
 801c074:	d10c      	bne.n	801c090 <ip4_reass+0xdc>
 801c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c078:	699a      	ldr	r2, [r3, #24]
 801c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c07c:	691b      	ldr	r3, [r3, #16]
 801c07e:	429a      	cmp	r2, r3
 801c080:	d106      	bne.n	801c090 <ip4_reass+0xdc>
 801c082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c084:	899a      	ldrh	r2, [r3, #12]
 801c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c088:	889b      	ldrh	r3, [r3, #4]
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	429a      	cmp	r2, r3
 801c08e:	d006      	beq.n	801c09e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	633b      	str	r3, [r7, #48]	@ 0x30
 801c096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d1e6      	bne.n	801c06a <ip4_reass+0xb6>
 801c09c:	e000      	b.n	801c0a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c09e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d109      	bne.n	801c0ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c0a6:	8c3b      	ldrh	r3, [r7, #32]
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c0ac:	f7ff fdb0 	bl	801bc10 <ip_reass_enqueue_new_datagram>
 801c0b0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d11c      	bne.n	801c0f2 <ip4_reass+0x13e>
      goto nullreturn;
 801c0b8:	e105      	b.n	801c2c6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0bc:	88db      	ldrh	r3, [r3, #6]
 801c0be:	b29b      	uxth	r3, r3
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f7f5 fad9 	bl	8011678 <lwip_htons>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d110      	bne.n	801c0f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0d2:	89db      	ldrh	r3, [r3, #14]
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f7f5 facf 	bl	8011678 <lwip_htons>
 801c0da:	4603      	mov	r3, r0
 801c0dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d006      	beq.n	801c0f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0e6:	3308      	adds	r3, #8
 801c0e8:	2214      	movs	r2, #20
 801c0ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	f000 ffdc 	bl	801d0aa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0f4:	88db      	ldrh	r3, [r3, #6]
 801c0f6:	b29b      	uxth	r3, r3
 801c0f8:	f003 0320 	and.w	r3, r3, #32
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	bf0c      	ite	eq
 801c100:	2301      	moveq	r3, #1
 801c102:	2300      	movne	r3, #0
 801c104:	b2db      	uxtb	r3, r3
 801c106:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c108:	69fb      	ldr	r3, [r7, #28]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d00e      	beq.n	801c12c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c10e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c110:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c112:	4413      	add	r3, r2
 801c114:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c116:	8b7a      	ldrh	r2, [r7, #26]
 801c118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c11a:	429a      	cmp	r2, r3
 801c11c:	f0c0 80a0 	bcc.w	801c260 <ip4_reass+0x2ac>
 801c120:	8b7b      	ldrh	r3, [r7, #26]
 801c122:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c126:	4293      	cmp	r3, r2
 801c128:	f200 809a 	bhi.w	801c260 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c12c:	69fa      	ldr	r2, [r7, #28]
 801c12e:	6879      	ldr	r1, [r7, #4]
 801c130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c132:	f7ff fdd5 	bl	801bce0 <ip_reass_chain_frag_into_datagram_and_validate>
 801c136:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c138:	697b      	ldr	r3, [r7, #20]
 801c13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c13e:	f000 809b 	beq.w	801c278 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c142:	4b48      	ldr	r3, [pc, #288]	@ (801c264 <ip4_reass+0x2b0>)
 801c144:	881a      	ldrh	r2, [r3, #0]
 801c146:	8c3b      	ldrh	r3, [r7, #32]
 801c148:	4413      	add	r3, r2
 801c14a:	b29a      	uxth	r2, r3
 801c14c:	4b45      	ldr	r3, [pc, #276]	@ (801c264 <ip4_reass+0x2b0>)
 801c14e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c150:	69fb      	ldr	r3, [r7, #28]
 801c152:	2b00      	cmp	r3, #0
 801c154:	d00d      	beq.n	801c172 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c156:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c15a:	4413      	add	r3, r2
 801c15c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c160:	8a7a      	ldrh	r2, [r7, #18]
 801c162:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c166:	7f9b      	ldrb	r3, [r3, #30]
 801c168:	f043 0301 	orr.w	r3, r3, #1
 801c16c:	b2da      	uxtb	r2, r3
 801c16e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c170:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c172:	697b      	ldr	r3, [r7, #20]
 801c174:	2b01      	cmp	r3, #1
 801c176:	d171      	bne.n	801c25c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c17a:	8b9b      	ldrh	r3, [r3, #28]
 801c17c:	3314      	adds	r3, #20
 801c17e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c182:	685b      	ldr	r3, [r3, #4]
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c18c:	685b      	ldr	r3, [r3, #4]
 801c18e:	685b      	ldr	r3, [r3, #4]
 801c190:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c194:	3308      	adds	r3, #8
 801c196:	2214      	movs	r2, #20
 801c198:	4619      	mov	r1, r3
 801c19a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c19c:	f000 ff85 	bl	801d0aa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c1a0:	8a3b      	ldrh	r3, [r7, #16]
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7f5 fa68 	bl	8011678 <lwip_htons>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	461a      	mov	r2, r3
 801c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	719a      	strb	r2, [r3, #6]
 801c1b6:	2200      	movs	r2, #0
 801c1b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1bc:	2200      	movs	r2, #0
 801c1be:	729a      	strb	r2, [r3, #10]
 801c1c0:	2200      	movs	r2, #0
 801c1c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c1ca:	e00d      	b.n	801c1e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ce:	685b      	ldr	r3, [r3, #4]
 801c1d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c1d2:	2114      	movs	r1, #20
 801c1d4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c1d6:	f7f6 fdf1 	bl	8012dbc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c1da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c1dc:	6878      	ldr	r0, [r7, #4]
 801c1de:	f7f6 ff41 	bl	8013064 <pbuf_cat>
      r = iprh->next_pbuf;
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d1ee      	bne.n	801c1cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c1ee:	4b1e      	ldr	r3, [pc, #120]	@ (801c268 <ip4_reass+0x2b4>)
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d102      	bne.n	801c1fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1fc:	e010      	b.n	801c220 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c1fe:	4b1a      	ldr	r3, [pc, #104]	@ (801c268 <ip4_reass+0x2b4>)
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c204:	e007      	b.n	801c216 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d006      	beq.n	801c21e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d1f4      	bne.n	801c206 <ip4_reass+0x252>
 801c21c:	e000      	b.n	801c220 <ip4_reass+0x26c>
          break;
 801c21e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c220:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c222:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c224:	f7ff fd2e 	bl	801bc84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f7f6 fedb 	bl	8012fe4 <pbuf_clen>
 801c22e:	4603      	mov	r3, r0
 801c230:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c232:	4b0c      	ldr	r3, [pc, #48]	@ (801c264 <ip4_reass+0x2b0>)
 801c234:	881b      	ldrh	r3, [r3, #0]
 801c236:	8c3a      	ldrh	r2, [r7, #32]
 801c238:	429a      	cmp	r2, r3
 801c23a:	d906      	bls.n	801c24a <ip4_reass+0x296>
 801c23c:	4b0b      	ldr	r3, [pc, #44]	@ (801c26c <ip4_reass+0x2b8>)
 801c23e:	f240 229b 	movw	r2, #667	@ 0x29b
 801c242:	490b      	ldr	r1, [pc, #44]	@ (801c270 <ip4_reass+0x2bc>)
 801c244:	480b      	ldr	r0, [pc, #44]	@ (801c274 <ip4_reass+0x2c0>)
 801c246:	f000 fda7 	bl	801cd98 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c24a:	4b06      	ldr	r3, [pc, #24]	@ (801c264 <ip4_reass+0x2b0>)
 801c24c:	881a      	ldrh	r2, [r3, #0]
 801c24e:	8c3b      	ldrh	r3, [r7, #32]
 801c250:	1ad3      	subs	r3, r2, r3
 801c252:	b29a      	uxth	r2, r3
 801c254:	4b03      	ldr	r3, [pc, #12]	@ (801c264 <ip4_reass+0x2b0>)
 801c256:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	e038      	b.n	801c2ce <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c25c:	2300      	movs	r3, #0
 801c25e:	e036      	b.n	801c2ce <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c260:	bf00      	nop
 801c262:	e00a      	b.n	801c27a <ip4_reass+0x2c6>
 801c264:	2000f3c8 	.word	0x2000f3c8
 801c268:	2000f3c4 	.word	0x2000f3c4
 801c26c:	080216c4 	.word	0x080216c4
 801c270:	08021834 	.word	0x08021834
 801c274:	0802170c 	.word	0x0802170c
    goto nullreturn_ipr;
 801c278:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d106      	bne.n	801c28e <ip4_reass+0x2da>
 801c280:	4b15      	ldr	r3, [pc, #84]	@ (801c2d8 <ip4_reass+0x324>)
 801c282:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c286:	4915      	ldr	r1, [pc, #84]	@ (801c2dc <ip4_reass+0x328>)
 801c288:	4815      	ldr	r0, [pc, #84]	@ (801c2e0 <ip4_reass+0x32c>)
 801c28a:	f000 fd85 	bl	801cd98 <iprintf>
  if (ipr->p == NULL) {
 801c28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c290:	685b      	ldr	r3, [r3, #4]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d116      	bne.n	801c2c4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c296:	4b13      	ldr	r3, [pc, #76]	@ (801c2e4 <ip4_reass+0x330>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c29c:	429a      	cmp	r2, r3
 801c29e:	d006      	beq.n	801c2ae <ip4_reass+0x2fa>
 801c2a0:	4b0d      	ldr	r3, [pc, #52]	@ (801c2d8 <ip4_reass+0x324>)
 801c2a2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c2a6:	4910      	ldr	r1, [pc, #64]	@ (801c2e8 <ip4_reass+0x334>)
 801c2a8:	480d      	ldr	r0, [pc, #52]	@ (801c2e0 <ip4_reass+0x32c>)
 801c2aa:	f000 fd75 	bl	801cd98 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c2ae:	2100      	movs	r1, #0
 801c2b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c2b2:	f7ff fce7 	bl	801bc84 <ip_reass_dequeue_datagram>
 801c2b6:	e006      	b.n	801c2c6 <ip4_reass+0x312>
    goto nullreturn;
 801c2b8:	bf00      	nop
 801c2ba:	e004      	b.n	801c2c6 <ip4_reass+0x312>
    goto nullreturn;
 801c2bc:	bf00      	nop
 801c2be:	e002      	b.n	801c2c6 <ip4_reass+0x312>
      goto nullreturn;
 801c2c0:	bf00      	nop
 801c2c2:	e000      	b.n	801c2c6 <ip4_reass+0x312>
  }

nullreturn:
 801c2c4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c2c6:	6878      	ldr	r0, [r7, #4]
 801c2c8:	f7f6 fdfe 	bl	8012ec8 <pbuf_free>
  return NULL;
 801c2cc:	2300      	movs	r3, #0
}
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	3738      	adds	r7, #56	@ 0x38
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}
 801c2d6:	bf00      	nop
 801c2d8:	080216c4 	.word	0x080216c4
 801c2dc:	08021850 	.word	0x08021850
 801c2e0:	0802170c 	.word	0x0802170c
 801c2e4:	2000f3c4 	.word	0x2000f3c4
 801c2e8:	0802185c 	.word	0x0802185c

0801c2ec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c2f0:	2005      	movs	r0, #5
 801c2f2:	f7f5 fecf 	bl	8012094 <memp_malloc>
 801c2f6:	4603      	mov	r3, r0
}
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	bd80      	pop	{r7, pc}

0801c2fc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b082      	sub	sp, #8
 801c300:	af00      	add	r7, sp, #0
 801c302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d106      	bne.n	801c318 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c30a:	4b07      	ldr	r3, [pc, #28]	@ (801c328 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c30c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c310:	4906      	ldr	r1, [pc, #24]	@ (801c32c <ip_frag_free_pbuf_custom_ref+0x30>)
 801c312:	4807      	ldr	r0, [pc, #28]	@ (801c330 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c314:	f000 fd40 	bl	801cd98 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c318:	6879      	ldr	r1, [r7, #4]
 801c31a:	2005      	movs	r0, #5
 801c31c:	f7f5 ff30 	bl	8012180 <memp_free>
}
 801c320:	bf00      	nop
 801c322:	3708      	adds	r7, #8
 801c324:	46bd      	mov	sp, r7
 801c326:	bd80      	pop	{r7, pc}
 801c328:	080216c4 	.word	0x080216c4
 801c32c:	0802187c 	.word	0x0802187c
 801c330:	0802170c 	.word	0x0802170c

0801c334 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b084      	sub	sp, #16
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d106      	bne.n	801c354 <ipfrag_free_pbuf_custom+0x20>
 801c346:	4b11      	ldr	r3, [pc, #68]	@ (801c38c <ipfrag_free_pbuf_custom+0x58>)
 801c348:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c34c:	4910      	ldr	r1, [pc, #64]	@ (801c390 <ipfrag_free_pbuf_custom+0x5c>)
 801c34e:	4811      	ldr	r0, [pc, #68]	@ (801c394 <ipfrag_free_pbuf_custom+0x60>)
 801c350:	f000 fd22 	bl	801cd98 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c354:	68fa      	ldr	r2, [r7, #12]
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	429a      	cmp	r2, r3
 801c35a:	d006      	beq.n	801c36a <ipfrag_free_pbuf_custom+0x36>
 801c35c:	4b0b      	ldr	r3, [pc, #44]	@ (801c38c <ipfrag_free_pbuf_custom+0x58>)
 801c35e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c362:	490d      	ldr	r1, [pc, #52]	@ (801c398 <ipfrag_free_pbuf_custom+0x64>)
 801c364:	480b      	ldr	r0, [pc, #44]	@ (801c394 <ipfrag_free_pbuf_custom+0x60>)
 801c366:	f000 fd17 	bl	801cd98 <iprintf>
  if (pcr->original != NULL) {
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	695b      	ldr	r3, [r3, #20]
 801c36e:	2b00      	cmp	r3, #0
 801c370:	d004      	beq.n	801c37c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	695b      	ldr	r3, [r3, #20]
 801c376:	4618      	mov	r0, r3
 801c378:	f7f6 fda6 	bl	8012ec8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c37c:	68f8      	ldr	r0, [r7, #12]
 801c37e:	f7ff ffbd 	bl	801c2fc <ip_frag_free_pbuf_custom_ref>
}
 801c382:	bf00      	nop
 801c384:	3710      	adds	r7, #16
 801c386:	46bd      	mov	sp, r7
 801c388:	bd80      	pop	{r7, pc}
 801c38a:	bf00      	nop
 801c38c:	080216c4 	.word	0x080216c4
 801c390:	08021888 	.word	0x08021888
 801c394:	0802170c 	.word	0x0802170c
 801c398:	08021894 	.word	0x08021894

0801c39c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b094      	sub	sp, #80	@ 0x50
 801c3a0:	af02      	add	r7, sp, #8
 801c3a2:	60f8      	str	r0, [r7, #12]
 801c3a4:	60b9      	str	r1, [r7, #8]
 801c3a6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c3ae:	68bb      	ldr	r3, [r7, #8]
 801c3b0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3b2:	3b14      	subs	r3, #20
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	da00      	bge.n	801c3ba <ip4_frag+0x1e>
 801c3b8:	3307      	adds	r3, #7
 801c3ba:	10db      	asrs	r3, r3, #3
 801c3bc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c3be:	2314      	movs	r3, #20
 801c3c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	685b      	ldr	r3, [r3, #4]
 801c3c6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c3c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3ca:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3ce:	781b      	ldrb	r3, [r3, #0]
 801c3d0:	f003 030f 	and.w	r3, r3, #15
 801c3d4:	b2db      	uxtb	r3, r3
 801c3d6:	009b      	lsls	r3, r3, #2
 801c3d8:	b2db      	uxtb	r3, r3
 801c3da:	2b14      	cmp	r3, #20
 801c3dc:	d002      	beq.n	801c3e4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c3de:	f06f 0305 	mvn.w	r3, #5
 801c3e2:	e110      	b.n	801c606 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	895b      	ldrh	r3, [r3, #10]
 801c3e8:	2b13      	cmp	r3, #19
 801c3ea:	d809      	bhi.n	801c400 <ip4_frag+0x64>
 801c3ec:	4b88      	ldr	r3, [pc, #544]	@ (801c610 <ip4_frag+0x274>)
 801c3ee:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c3f2:	4988      	ldr	r1, [pc, #544]	@ (801c614 <ip4_frag+0x278>)
 801c3f4:	4888      	ldr	r0, [pc, #544]	@ (801c618 <ip4_frag+0x27c>)
 801c3f6:	f000 fccf 	bl	801cd98 <iprintf>
 801c3fa:	f06f 0305 	mvn.w	r3, #5
 801c3fe:	e102      	b.n	801c606 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c402:	88db      	ldrh	r3, [r3, #6]
 801c404:	b29b      	uxth	r3, r3
 801c406:	4618      	mov	r0, r3
 801c408:	f7f5 f936 	bl	8011678 <lwip_htons>
 801c40c:	4603      	mov	r3, r0
 801c40e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c410:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c412:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c416:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c41a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c41c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c420:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	891b      	ldrh	r3, [r3, #8]
 801c426:	3b14      	subs	r3, #20
 801c428:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c42c:	e0e1      	b.n	801c5f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c42e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c430:	00db      	lsls	r3, r3, #3
 801c432:	b29b      	uxth	r3, r3
 801c434:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c438:	4293      	cmp	r3, r2
 801c43a:	bf28      	it	cs
 801c43c:	4613      	movcs	r3, r2
 801c43e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c440:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c444:	2114      	movs	r1, #20
 801c446:	200e      	movs	r0, #14
 801c448:	f7f6 fa5a 	bl	8012900 <pbuf_alloc>
 801c44c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c450:	2b00      	cmp	r3, #0
 801c452:	f000 80d5 	beq.w	801c600 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c458:	895b      	ldrh	r3, [r3, #10]
 801c45a:	2b13      	cmp	r3, #19
 801c45c:	d806      	bhi.n	801c46c <ip4_frag+0xd0>
 801c45e:	4b6c      	ldr	r3, [pc, #432]	@ (801c610 <ip4_frag+0x274>)
 801c460:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c464:	496d      	ldr	r1, [pc, #436]	@ (801c61c <ip4_frag+0x280>)
 801c466:	486c      	ldr	r0, [pc, #432]	@ (801c618 <ip4_frag+0x27c>)
 801c468:	f000 fc96 	bl	801cd98 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	2214      	movs	r2, #20
 801c472:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c474:	4618      	mov	r0, r3
 801c476:	f000 fe18 	bl	801d0aa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c47c:	685b      	ldr	r3, [r3, #4]
 801c47e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c480:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c482:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c486:	e064      	b.n	801c552 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	895a      	ldrh	r2, [r3, #10]
 801c48c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c48e:	1ad3      	subs	r3, r2, r3
 801c490:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	895b      	ldrh	r3, [r3, #10]
 801c496:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c498:	429a      	cmp	r2, r3
 801c49a:	d906      	bls.n	801c4aa <ip4_frag+0x10e>
 801c49c:	4b5c      	ldr	r3, [pc, #368]	@ (801c610 <ip4_frag+0x274>)
 801c49e:	f240 322d 	movw	r2, #813	@ 0x32d
 801c4a2:	495f      	ldr	r1, [pc, #380]	@ (801c620 <ip4_frag+0x284>)
 801c4a4:	485c      	ldr	r0, [pc, #368]	@ (801c618 <ip4_frag+0x27c>)
 801c4a6:	f000 fc77 	bl	801cd98 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c4aa:	8bfa      	ldrh	r2, [r7, #30]
 801c4ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4b0:	4293      	cmp	r3, r2
 801c4b2:	bf28      	it	cs
 801c4b4:	4613      	movcs	r3, r2
 801c4b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c4ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d105      	bne.n	801c4ce <ip4_frag+0x132>
        poff = 0;
 801c4c2:	2300      	movs	r3, #0
 801c4c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	60fb      	str	r3, [r7, #12]
        continue;
 801c4cc:	e041      	b.n	801c552 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c4ce:	f7ff ff0d 	bl	801c2ec <ip_frag_alloc_pbuf_custom_ref>
 801c4d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c4d4:	69bb      	ldr	r3, [r7, #24]
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	d103      	bne.n	801c4e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c4da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c4dc:	f7f6 fcf4 	bl	8012ec8 <pbuf_free>
        goto memerr;
 801c4e0:	e08f      	b.n	801c602 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c4e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c4e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c4ea:	4413      	add	r3, r2
 801c4ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c4f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c4f4:	9201      	str	r2, [sp, #4]
 801c4f6:	9300      	str	r3, [sp, #0]
 801c4f8:	4603      	mov	r3, r0
 801c4fa:	2241      	movs	r2, #65	@ 0x41
 801c4fc:	2000      	movs	r0, #0
 801c4fe:	f7f6 fb29 	bl	8012b54 <pbuf_alloced_custom>
 801c502:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c504:	697b      	ldr	r3, [r7, #20]
 801c506:	2b00      	cmp	r3, #0
 801c508:	d106      	bne.n	801c518 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c50a:	69b8      	ldr	r0, [r7, #24]
 801c50c:	f7ff fef6 	bl	801c2fc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c512:	f7f6 fcd9 	bl	8012ec8 <pbuf_free>
        goto memerr;
 801c516:	e074      	b.n	801c602 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c518:	68f8      	ldr	r0, [r7, #12]
 801c51a:	f7f6 fd7b 	bl	8013014 <pbuf_ref>
      pcr->original = p;
 801c51e:	69bb      	ldr	r3, [r7, #24]
 801c520:	68fa      	ldr	r2, [r7, #12]
 801c522:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c524:	69bb      	ldr	r3, [r7, #24]
 801c526:	4a3f      	ldr	r2, [pc, #252]	@ (801c624 <ip4_frag+0x288>)
 801c528:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c52a:	6979      	ldr	r1, [r7, #20]
 801c52c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c52e:	f7f6 fd99 	bl	8013064 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c532:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c536:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c53a:	1ad3      	subs	r3, r2, r3
 801c53c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c540:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c544:	2b00      	cmp	r3, #0
 801c546:	d004      	beq.n	801c552 <ip4_frag+0x1b6>
        poff = 0;
 801c548:	2300      	movs	r3, #0
 801c54a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c552:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c556:	2b00      	cmp	r3, #0
 801c558:	d196      	bne.n	801c488 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c55a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c55c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c560:	4413      	add	r3, r2
 801c562:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c564:	68bb      	ldr	r3, [r7, #8]
 801c566:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c568:	f1a3 0213 	sub.w	r2, r3, #19
 801c56c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c570:	429a      	cmp	r2, r3
 801c572:	bfcc      	ite	gt
 801c574:	2301      	movgt	r3, #1
 801c576:	2300      	movle	r3, #0
 801c578:	b2db      	uxtb	r3, r3
 801c57a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c57c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c584:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c586:	6a3b      	ldr	r3, [r7, #32]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d002      	beq.n	801c592 <ip4_frag+0x1f6>
 801c58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d003      	beq.n	801c59a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c592:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c598:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c59a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c59c:	4618      	mov	r0, r3
 801c59e:	f7f5 f86b 	bl	8011678 <lwip_htons>
 801c5a2:	4603      	mov	r3, r0
 801c5a4:	461a      	mov	r2, r3
 801c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c5aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5ac:	3314      	adds	r3, #20
 801c5ae:	b29b      	uxth	r3, r3
 801c5b0:	4618      	mov	r0, r3
 801c5b2:	f7f5 f861 	bl	8011678 <lwip_htons>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	461a      	mov	r2, r3
 801c5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	729a      	strb	r2, [r3, #10]
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c5c8:	68bb      	ldr	r3, [r7, #8]
 801c5ca:	695b      	ldr	r3, [r3, #20]
 801c5cc:	687a      	ldr	r2, [r7, #4]
 801c5ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c5d0:	68b8      	ldr	r0, [r7, #8]
 801c5d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c5d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c5d6:	f7f6 fc77 	bl	8012ec8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c5da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c5de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5e0:	1ad3      	subs	r3, r2, r3
 801c5e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c5e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c5ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c5ec:	4413      	add	r3, r2
 801c5ee:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c5f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	f47f af19 	bne.w	801c42e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	e002      	b.n	801c606 <ip4_frag+0x26a>
      goto memerr;
 801c600:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c602:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c606:	4618      	mov	r0, r3
 801c608:	3748      	adds	r7, #72	@ 0x48
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bd80      	pop	{r7, pc}
 801c60e:	bf00      	nop
 801c610:	080216c4 	.word	0x080216c4
 801c614:	080218a0 	.word	0x080218a0
 801c618:	0802170c 	.word	0x0802170c
 801c61c:	080218bc 	.word	0x080218bc
 801c620:	080218dc 	.word	0x080218dc
 801c624:	0801c335 	.word	0x0801c335

0801c628 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b086      	sub	sp, #24
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	6078      	str	r0, [r7, #4]
 801c630:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c632:	230e      	movs	r3, #14
 801c634:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	895b      	ldrh	r3, [r3, #10]
 801c63a:	2b0e      	cmp	r3, #14
 801c63c:	d96e      	bls.n	801c71c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	7bdb      	ldrb	r3, [r3, #15]
 801c642:	2b00      	cmp	r3, #0
 801c644:	d106      	bne.n	801c654 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c64c:	3301      	adds	r3, #1
 801c64e:	b2da      	uxtb	r2, r3
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	685b      	ldr	r3, [r3, #4]
 801c658:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c65a:	693b      	ldr	r3, [r7, #16]
 801c65c:	7b1a      	ldrb	r2, [r3, #12]
 801c65e:	7b5b      	ldrb	r3, [r3, #13]
 801c660:	021b      	lsls	r3, r3, #8
 801c662:	4313      	orrs	r3, r2
 801c664:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c666:	693b      	ldr	r3, [r7, #16]
 801c668:	781b      	ldrb	r3, [r3, #0]
 801c66a:	f003 0301 	and.w	r3, r3, #1
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d023      	beq.n	801c6ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c672:	693b      	ldr	r3, [r7, #16]
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	2b01      	cmp	r3, #1
 801c678:	d10f      	bne.n	801c69a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	785b      	ldrb	r3, [r3, #1]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d11b      	bne.n	801c6ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c682:	693b      	ldr	r3, [r7, #16]
 801c684:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c686:	2b5e      	cmp	r3, #94	@ 0x5e
 801c688:	d117      	bne.n	801c6ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	7b5b      	ldrb	r3, [r3, #13]
 801c68e:	f043 0310 	orr.w	r3, r3, #16
 801c692:	b2da      	uxtb	r2, r3
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	735a      	strb	r2, [r3, #13]
 801c698:	e00f      	b.n	801c6ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c69a:	693b      	ldr	r3, [r7, #16]
 801c69c:	2206      	movs	r2, #6
 801c69e:	4928      	ldr	r1, [pc, #160]	@ (801c740 <ethernet_input+0x118>)
 801c6a0:	4618      	mov	r0, r3
 801c6a2:	f000 fbee 	bl	801ce82 <memcmp>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d106      	bne.n	801c6ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	7b5b      	ldrb	r3, [r3, #13]
 801c6b0:	f043 0308 	orr.w	r3, r3, #8
 801c6b4:	b2da      	uxtb	r2, r3
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c6ba:	89fb      	ldrh	r3, [r7, #14]
 801c6bc:	2b08      	cmp	r3, #8
 801c6be:	d003      	beq.n	801c6c8 <ethernet_input+0xa0>
 801c6c0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c6c4:	d014      	beq.n	801c6f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c6c6:	e032      	b.n	801c72e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c6c8:	683b      	ldr	r3, [r7, #0]
 801c6ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c6ce:	f003 0308 	and.w	r3, r3, #8
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d024      	beq.n	801c720 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c6d6:	8afb      	ldrh	r3, [r7, #22]
 801c6d8:	4619      	mov	r1, r3
 801c6da:	6878      	ldr	r0, [r7, #4]
 801c6dc:	f7f6 fb6e 	bl	8012dbc <pbuf_remove_header>
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d11e      	bne.n	801c724 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c6e6:	6839      	ldr	r1, [r7, #0]
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	f7fe ff21 	bl	801b530 <ip4_input>
      break;
 801c6ee:	e013      	b.n	801c718 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c6f0:	683b      	ldr	r3, [r7, #0]
 801c6f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c6f6:	f003 0308 	and.w	r3, r3, #8
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d014      	beq.n	801c728 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c6fe:	8afb      	ldrh	r3, [r7, #22]
 801c700:	4619      	mov	r1, r3
 801c702:	6878      	ldr	r0, [r7, #4]
 801c704:	f7f6 fb5a 	bl	8012dbc <pbuf_remove_header>
 801c708:	4603      	mov	r3, r0
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d10e      	bne.n	801c72c <ethernet_input+0x104>
        etharp_input(p, netif);
 801c70e:	6839      	ldr	r1, [r7, #0]
 801c710:	6878      	ldr	r0, [r7, #4]
 801c712:	f7fe f8c1 	bl	801a898 <etharp_input>
      break;
 801c716:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c718:	2300      	movs	r3, #0
 801c71a:	e00c      	b.n	801c736 <ethernet_input+0x10e>
    goto free_and_return;
 801c71c:	bf00      	nop
 801c71e:	e006      	b.n	801c72e <ethernet_input+0x106>
        goto free_and_return;
 801c720:	bf00      	nop
 801c722:	e004      	b.n	801c72e <ethernet_input+0x106>
        goto free_and_return;
 801c724:	bf00      	nop
 801c726:	e002      	b.n	801c72e <ethernet_input+0x106>
        goto free_and_return;
 801c728:	bf00      	nop
 801c72a:	e000      	b.n	801c72e <ethernet_input+0x106>
        goto free_and_return;
 801c72c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	f7f6 fbca 	bl	8012ec8 <pbuf_free>
  return ERR_OK;
 801c734:	2300      	movs	r3, #0
}
 801c736:	4618      	mov	r0, r3
 801c738:	3718      	adds	r7, #24
 801c73a:	46bd      	mov	sp, r7
 801c73c:	bd80      	pop	{r7, pc}
 801c73e:	bf00      	nop
 801c740:	0802277c 	.word	0x0802277c

0801c744 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c744:	b580      	push	{r7, lr}
 801c746:	b086      	sub	sp, #24
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	607a      	str	r2, [r7, #4]
 801c750:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c752:	8c3b      	ldrh	r3, [r7, #32]
 801c754:	4618      	mov	r0, r3
 801c756:	f7f4 ff8f 	bl	8011678 <lwip_htons>
 801c75a:	4603      	mov	r3, r0
 801c75c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c75e:	210e      	movs	r1, #14
 801c760:	68b8      	ldr	r0, [r7, #8]
 801c762:	f7f6 fb1b 	bl	8012d9c <pbuf_add_header>
 801c766:	4603      	mov	r3, r0
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d125      	bne.n	801c7b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	685b      	ldr	r3, [r3, #4]
 801c770:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c772:	693b      	ldr	r3, [r7, #16]
 801c774:	8afa      	ldrh	r2, [r7, #22]
 801c776:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c778:	693b      	ldr	r3, [r7, #16]
 801c77a:	2206      	movs	r2, #6
 801c77c:	6839      	ldr	r1, [r7, #0]
 801c77e:	4618      	mov	r0, r3
 801c780:	f000 fc93 	bl	801d0aa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c784:	693b      	ldr	r3, [r7, #16]
 801c786:	3306      	adds	r3, #6
 801c788:	2206      	movs	r2, #6
 801c78a:	6879      	ldr	r1, [r7, #4]
 801c78c:	4618      	mov	r0, r3
 801c78e:	f000 fc8c 	bl	801d0aa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c798:	2b06      	cmp	r3, #6
 801c79a:	d006      	beq.n	801c7aa <ethernet_output+0x66>
 801c79c:	4b0a      	ldr	r3, [pc, #40]	@ (801c7c8 <ethernet_output+0x84>)
 801c79e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c7a2:	490a      	ldr	r1, [pc, #40]	@ (801c7cc <ethernet_output+0x88>)
 801c7a4:	480a      	ldr	r0, [pc, #40]	@ (801c7d0 <ethernet_output+0x8c>)
 801c7a6:	f000 faf7 	bl	801cd98 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	699b      	ldr	r3, [r3, #24]
 801c7ae:	68b9      	ldr	r1, [r7, #8]
 801c7b0:	68f8      	ldr	r0, [r7, #12]
 801c7b2:	4798      	blx	r3
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	e002      	b.n	801c7be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c7b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c7ba:	f06f 0301 	mvn.w	r3, #1
}
 801c7be:	4618      	mov	r0, r3
 801c7c0:	3718      	adds	r7, #24
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd80      	pop	{r7, pc}
 801c7c6:	bf00      	nop
 801c7c8:	080218ec 	.word	0x080218ec
 801c7cc:	08021924 	.word	0x08021924
 801c7d0:	08021958 	.word	0x08021958

0801c7d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c7d4:	b580      	push	{r7, lr}
 801c7d6:	b086      	sub	sp, #24
 801c7d8:	af00      	add	r7, sp, #0
 801c7da:	6078      	str	r0, [r7, #4]
 801c7dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c7de:	683b      	ldr	r3, [r7, #0]
 801c7e0:	60bb      	str	r3, [r7, #8]
 801c7e2:	2304      	movs	r3, #4
 801c7e4:	60fb      	str	r3, [r7, #12]
 801c7e6:	2300      	movs	r3, #0
 801c7e8:	613b      	str	r3, [r7, #16]
 801c7ea:	2300      	movs	r3, #0
 801c7ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c7ee:	f107 0308 	add.w	r3, r7, #8
 801c7f2:	2100      	movs	r1, #0
 801c7f4:	4618      	mov	r0, r3
 801c7f6:	f7ee febe 	bl	800b576 <osMessageCreate>
 801c7fa:	4602      	mov	r2, r0
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	681b      	ldr	r3, [r3, #0]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d102      	bne.n	801c80e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c808:	f04f 33ff 	mov.w	r3, #4294967295
 801c80c:	e000      	b.n	801c810 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c80e:	2300      	movs	r3, #0
}
 801c810:	4618      	mov	r0, r3
 801c812:	3718      	adds	r7, #24
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}

0801c818 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b082      	sub	sp, #8
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	4618      	mov	r0, r3
 801c826:	f7ee ff83 	bl	800b730 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	4618      	mov	r0, r3
 801c830:	f7ee ff94 	bl	800b75c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c834:	bf00      	nop
 801c836:	3708      	adds	r7, #8
 801c838:	46bd      	mov	sp, r7
 801c83a:	bd80      	pop	{r7, pc}

0801c83c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b084      	sub	sp, #16
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
 801c844:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	6839      	ldr	r1, [r7, #0]
 801c84c:	2200      	movs	r2, #0
 801c84e:	4618      	mov	r0, r3
 801c850:	f7ee feba 	bl	800b5c8 <osMessagePut>
 801c854:	4603      	mov	r3, r0
 801c856:	2b00      	cmp	r3, #0
 801c858:	d102      	bne.n	801c860 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c85a:	2300      	movs	r3, #0
 801c85c:	73fb      	strb	r3, [r7, #15]
 801c85e:	e001      	b.n	801c864 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c860:	23ff      	movs	r3, #255	@ 0xff
 801c862:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c868:	4618      	mov	r0, r3
 801c86a:	3710      	adds	r7, #16
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd80      	pop	{r7, pc}

0801c870 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c870:	b580      	push	{r7, lr}
 801c872:	b08c      	sub	sp, #48	@ 0x30
 801c874:	af00      	add	r7, sp, #0
 801c876:	61f8      	str	r0, [r7, #28]
 801c878:	61b9      	str	r1, [r7, #24]
 801c87a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c87c:	f7ee fca6 	bl	800b1cc <osKernelSysTick>
 801c880:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c882:	697b      	ldr	r3, [r7, #20]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d017      	beq.n	801c8b8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c888:	69fb      	ldr	r3, [r7, #28]
 801c88a:	6819      	ldr	r1, [r3, #0]
 801c88c:	f107 0320 	add.w	r3, r7, #32
 801c890:	697a      	ldr	r2, [r7, #20]
 801c892:	4618      	mov	r0, r3
 801c894:	f7ee fed8 	bl	800b648 <osMessageGet>

    if(event.status == osEventMessage)
 801c898:	6a3b      	ldr	r3, [r7, #32]
 801c89a:	2b10      	cmp	r3, #16
 801c89c:	d109      	bne.n	801c8b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8a0:	461a      	mov	r2, r3
 801c8a2:	69bb      	ldr	r3, [r7, #24]
 801c8a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c8a6:	f7ee fc91 	bl	800b1cc <osKernelSysTick>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8ae:	1ad3      	subs	r3, r2, r3
 801c8b0:	e019      	b.n	801c8e6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c8b6:	e016      	b.n	801c8e6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c8b8:	69fb      	ldr	r3, [r7, #28]
 801c8ba:	6819      	ldr	r1, [r3, #0]
 801c8bc:	463b      	mov	r3, r7
 801c8be:	f04f 32ff 	mov.w	r2, #4294967295
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	f7ee fec0 	bl	800b648 <osMessageGet>
 801c8c8:	f107 0320 	add.w	r3, r7, #32
 801c8cc:	463a      	mov	r2, r7
 801c8ce:	ca07      	ldmia	r2, {r0, r1, r2}
 801c8d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8d6:	461a      	mov	r2, r3
 801c8d8:	69bb      	ldr	r3, [r7, #24]
 801c8da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c8dc:	f7ee fc76 	bl	800b1cc <osKernelSysTick>
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8e4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	3730      	adds	r7, #48	@ 0x30
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}

0801c8ee <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c8ee:	b580      	push	{r7, lr}
 801c8f0:	b086      	sub	sp, #24
 801c8f2:	af00      	add	r7, sp, #0
 801c8f4:	6078      	str	r0, [r7, #4]
 801c8f6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	6819      	ldr	r1, [r3, #0]
 801c8fc:	f107 030c 	add.w	r3, r7, #12
 801c900:	2200      	movs	r2, #0
 801c902:	4618      	mov	r0, r3
 801c904:	f7ee fea0 	bl	800b648 <osMessageGet>

  if(event.status == osEventMessage)
 801c908:	68fb      	ldr	r3, [r7, #12]
 801c90a:	2b10      	cmp	r3, #16
 801c90c:	d105      	bne.n	801c91a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c90e:	693b      	ldr	r3, [r7, #16]
 801c910:	461a      	mov	r2, r3
 801c912:	683b      	ldr	r3, [r7, #0]
 801c914:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c916:	2300      	movs	r3, #0
 801c918:	e001      	b.n	801c91e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c91a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c91e:	4618      	mov	r0, r3
 801c920:	3718      	adds	r7, #24
 801c922:	46bd      	mov	sp, r7
 801c924:	bd80      	pop	{r7, pc}

0801c926 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c926:	b480      	push	{r7}
 801c928:	b083      	sub	sp, #12
 801c92a:	af00      	add	r7, sp, #0
 801c92c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d101      	bne.n	801c93a <sys_mbox_valid+0x14>
    return 0;
 801c936:	2300      	movs	r3, #0
 801c938:	e000      	b.n	801c93c <sys_mbox_valid+0x16>
  else
    return 1;
 801c93a:	2301      	movs	r3, #1
}
 801c93c:	4618      	mov	r0, r3
 801c93e:	370c      	adds	r7, #12
 801c940:	46bd      	mov	sp, r7
 801c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c946:	4770      	bx	lr

0801c948 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c948:	b480      	push	{r7}
 801c94a:	b083      	sub	sp, #12
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	2200      	movs	r2, #0
 801c954:	601a      	str	r2, [r3, #0]
}
 801c956:	bf00      	nop
 801c958:	370c      	adds	r7, #12
 801c95a:	46bd      	mov	sp, r7
 801c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c960:	4770      	bx	lr

0801c962 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c962:	b580      	push	{r7, lr}
 801c964:	b084      	sub	sp, #16
 801c966:	af00      	add	r7, sp, #0
 801c968:	6078      	str	r0, [r7, #4]
 801c96a:	460b      	mov	r3, r1
 801c96c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c96e:	2300      	movs	r3, #0
 801c970:	60bb      	str	r3, [r7, #8]
 801c972:	2300      	movs	r3, #0
 801c974:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c976:	f107 0308 	add.w	r3, r7, #8
 801c97a:	2101      	movs	r1, #1
 801c97c:	4618      	mov	r0, r3
 801c97e:	f7ee fd31 	bl	800b3e4 <osSemaphoreCreate>
 801c982:	4602      	mov	r2, r0
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	681b      	ldr	r3, [r3, #0]
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d102      	bne.n	801c996 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c990:	f04f 33ff 	mov.w	r3, #4294967295
 801c994:	e009      	b.n	801c9aa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c996:	78fb      	ldrb	r3, [r7, #3]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d105      	bne.n	801c9a8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	681b      	ldr	r3, [r3, #0]
 801c9a0:	2100      	movs	r1, #0
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f7ee fd50 	bl	800b448 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c9a8:	2300      	movs	r3, #0
}
 801c9aa:	4618      	mov	r0, r3
 801c9ac:	3710      	adds	r7, #16
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	bd80      	pop	{r7, pc}

0801c9b2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c9b2:	b580      	push	{r7, lr}
 801c9b4:	b084      	sub	sp, #16
 801c9b6:	af00      	add	r7, sp, #0
 801c9b8:	6078      	str	r0, [r7, #4]
 801c9ba:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c9bc:	f7ee fc06 	bl	800b1cc <osKernelSysTick>
 801c9c0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c9c2:	683b      	ldr	r3, [r7, #0]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d011      	beq.n	801c9ec <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	6839      	ldr	r1, [r7, #0]
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	f7ee fd3a 	bl	800b448 <osSemaphoreWait>
 801c9d4:	4603      	mov	r3, r0
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d105      	bne.n	801c9e6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c9da:	f7ee fbf7 	bl	800b1cc <osKernelSysTick>
 801c9de:	4602      	mov	r2, r0
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	1ad3      	subs	r3, r2, r3
 801c9e4:	e012      	b.n	801ca0c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c9e6:	f04f 33ff 	mov.w	r3, #4294967295
 801c9ea:	e00f      	b.n	801ca0c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c9ec:	bf00      	nop
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	f04f 31ff 	mov.w	r1, #4294967295
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f7ee fd26 	bl	800b448 <osSemaphoreWait>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d1f5      	bne.n	801c9ee <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801ca02:	f7ee fbe3 	bl	800b1cc <osKernelSysTick>
 801ca06:	4602      	mov	r2, r0
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	3710      	adds	r7, #16
 801ca10:	46bd      	mov	sp, r7
 801ca12:	bd80      	pop	{r7, pc}

0801ca14 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b082      	sub	sp, #8
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	4618      	mov	r0, r3
 801ca22:	f7ee fd5f 	bl	800b4e4 <osSemaphoreRelease>
}
 801ca26:	bf00      	nop
 801ca28:	3708      	adds	r7, #8
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}

0801ca2e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ca2e:	b580      	push	{r7, lr}
 801ca30:	b082      	sub	sp, #8
 801ca32:	af00      	add	r7, sp, #0
 801ca34:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	681b      	ldr	r3, [r3, #0]
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f7ee fd88 	bl	800b550 <osSemaphoreDelete>
}
 801ca40:	bf00      	nop
 801ca42:	3708      	adds	r7, #8
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}

0801ca48 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ca48:	b480      	push	{r7}
 801ca4a:	b083      	sub	sp, #12
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d101      	bne.n	801ca5c <sys_sem_valid+0x14>
    return 0;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	e000      	b.n	801ca5e <sys_sem_valid+0x16>
  else
    return 1;
 801ca5c:	2301      	movs	r3, #1
}
 801ca5e:	4618      	mov	r0, r3
 801ca60:	370c      	adds	r7, #12
 801ca62:	46bd      	mov	sp, r7
 801ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca68:	4770      	bx	lr

0801ca6a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ca6a:	b480      	push	{r7}
 801ca6c:	b083      	sub	sp, #12
 801ca6e:	af00      	add	r7, sp, #0
 801ca70:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2200      	movs	r2, #0
 801ca76:	601a      	str	r2, [r3, #0]
}
 801ca78:	bf00      	nop
 801ca7a:	370c      	adds	r7, #12
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca82:	4770      	bx	lr

0801ca84 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ca88:	4803      	ldr	r0, [pc, #12]	@ (801ca98 <sys_init+0x14>)
 801ca8a:	f7ee fc0f 	bl	800b2ac <osMutexCreate>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	4a02      	ldr	r2, [pc, #8]	@ (801ca9c <sys_init+0x18>)
 801ca92:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ca94:	bf00      	nop
 801ca96:	bd80      	pop	{r7, pc}
 801ca98:	0802278c 	.word	0x0802278c
 801ca9c:	2000f3cc 	.word	0x2000f3cc

0801caa0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b084      	sub	sp, #16
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801caa8:	2300      	movs	r3, #0
 801caaa:	60bb      	str	r3, [r7, #8]
 801caac:	2300      	movs	r3, #0
 801caae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801cab0:	f107 0308 	add.w	r3, r7, #8
 801cab4:	4618      	mov	r0, r3
 801cab6:	f7ee fbf9 	bl	800b2ac <osMutexCreate>
 801caba:	4602      	mov	r2, r0
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d102      	bne.n	801cace <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cac8:	f04f 33ff 	mov.w	r3, #4294967295
 801cacc:	e000      	b.n	801cad0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cace:	2300      	movs	r3, #0
}
 801cad0:	4618      	mov	r0, r3
 801cad2:	3710      	adds	r7, #16
 801cad4:	46bd      	mov	sp, r7
 801cad6:	bd80      	pop	{r7, pc}

0801cad8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cad8:	b580      	push	{r7, lr}
 801cada:	b082      	sub	sp, #8
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	f04f 31ff 	mov.w	r1, #4294967295
 801cae8:	4618      	mov	r0, r3
 801caea:	f7ee fbf7 	bl	800b2dc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801caee:	bf00      	nop
 801caf0:	3708      	adds	r7, #8
 801caf2:	46bd      	mov	sp, r7
 801caf4:	bd80      	pop	{r7, pc}

0801caf6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801caf6:	b580      	push	{r7, lr}
 801caf8:	b082      	sub	sp, #8
 801cafa:	af00      	add	r7, sp, #0
 801cafc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	4618      	mov	r0, r3
 801cb04:	f7ee fc38 	bl	800b378 <osMutexRelease>
}
 801cb08:	bf00      	nop
 801cb0a:	3708      	adds	r7, #8
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	bd80      	pop	{r7, pc}

0801cb10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cb10:	b580      	push	{r7, lr}
 801cb12:	b08c      	sub	sp, #48	@ 0x30
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	60f8      	str	r0, [r7, #12]
 801cb18:	60b9      	str	r1, [r7, #8]
 801cb1a:	607a      	str	r2, [r7, #4]
 801cb1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cb1e:	f107 0314 	add.w	r3, r7, #20
 801cb22:	2200      	movs	r2, #0
 801cb24:	601a      	str	r2, [r3, #0]
 801cb26:	605a      	str	r2, [r3, #4]
 801cb28:	609a      	str	r2, [r3, #8]
 801cb2a:	60da      	str	r2, [r3, #12]
 801cb2c:	611a      	str	r2, [r3, #16]
 801cb2e:	615a      	str	r2, [r3, #20]
 801cb30:	619a      	str	r2, [r3, #24]
 801cb32:	68fb      	ldr	r3, [r7, #12]
 801cb34:	617b      	str	r3, [r7, #20]
 801cb36:	68bb      	ldr	r3, [r7, #8]
 801cb38:	61bb      	str	r3, [r7, #24]
 801cb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cb3c:	b21b      	sxth	r3, r3
 801cb3e:	83bb      	strh	r3, [r7, #28]
 801cb40:	683b      	ldr	r3, [r7, #0]
 801cb42:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801cb44:	f107 0314 	add.w	r3, r7, #20
 801cb48:	6879      	ldr	r1, [r7, #4]
 801cb4a:	4618      	mov	r0, r3
 801cb4c:	f7ee fb4e 	bl	800b1ec <osThreadCreate>
 801cb50:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801cb52:	4618      	mov	r0, r3
 801cb54:	3730      	adds	r7, #48	@ 0x30
 801cb56:	46bd      	mov	sp, r7
 801cb58:	bd80      	pop	{r7, pc}
	...

0801cb5c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801cb60:	4b04      	ldr	r3, [pc, #16]	@ (801cb74 <sys_arch_protect+0x18>)
 801cb62:	681b      	ldr	r3, [r3, #0]
 801cb64:	f04f 31ff 	mov.w	r1, #4294967295
 801cb68:	4618      	mov	r0, r3
 801cb6a:	f7ee fbb7 	bl	800b2dc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801cb6e:	2301      	movs	r3, #1
}
 801cb70:	4618      	mov	r0, r3
 801cb72:	bd80      	pop	{r7, pc}
 801cb74:	2000f3cc 	.word	0x2000f3cc

0801cb78 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b082      	sub	sp, #8
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cb80:	4b04      	ldr	r3, [pc, #16]	@ (801cb94 <sys_arch_unprotect+0x1c>)
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	4618      	mov	r0, r3
 801cb86:	f7ee fbf7 	bl	800b378 <osMutexRelease>
}
 801cb8a:	bf00      	nop
 801cb8c:	3708      	adds	r7, #8
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}
 801cb92:	bf00      	nop
 801cb94:	2000f3cc 	.word	0x2000f3cc

0801cb98 <rand>:
 801cb98:	4b16      	ldr	r3, [pc, #88]	@ (801cbf4 <rand+0x5c>)
 801cb9a:	b510      	push	{r4, lr}
 801cb9c:	681c      	ldr	r4, [r3, #0]
 801cb9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cba0:	b9b3      	cbnz	r3, 801cbd0 <rand+0x38>
 801cba2:	2018      	movs	r0, #24
 801cba4:	f000 faf8 	bl	801d198 <malloc>
 801cba8:	4602      	mov	r2, r0
 801cbaa:	6320      	str	r0, [r4, #48]	@ 0x30
 801cbac:	b920      	cbnz	r0, 801cbb8 <rand+0x20>
 801cbae:	4b12      	ldr	r3, [pc, #72]	@ (801cbf8 <rand+0x60>)
 801cbb0:	4812      	ldr	r0, [pc, #72]	@ (801cbfc <rand+0x64>)
 801cbb2:	2152      	movs	r1, #82	@ 0x52
 801cbb4:	f000 fa88 	bl	801d0c8 <__assert_func>
 801cbb8:	4911      	ldr	r1, [pc, #68]	@ (801cc00 <rand+0x68>)
 801cbba:	4b12      	ldr	r3, [pc, #72]	@ (801cc04 <rand+0x6c>)
 801cbbc:	e9c0 1300 	strd	r1, r3, [r0]
 801cbc0:	4b11      	ldr	r3, [pc, #68]	@ (801cc08 <rand+0x70>)
 801cbc2:	6083      	str	r3, [r0, #8]
 801cbc4:	230b      	movs	r3, #11
 801cbc6:	8183      	strh	r3, [r0, #12]
 801cbc8:	2100      	movs	r1, #0
 801cbca:	2001      	movs	r0, #1
 801cbcc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cbd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cbd2:	480e      	ldr	r0, [pc, #56]	@ (801cc0c <rand+0x74>)
 801cbd4:	690b      	ldr	r3, [r1, #16]
 801cbd6:	694c      	ldr	r4, [r1, #20]
 801cbd8:	4a0d      	ldr	r2, [pc, #52]	@ (801cc10 <rand+0x78>)
 801cbda:	4358      	muls	r0, r3
 801cbdc:	fb02 0004 	mla	r0, r2, r4, r0
 801cbe0:	fba3 3202 	umull	r3, r2, r3, r2
 801cbe4:	3301      	adds	r3, #1
 801cbe6:	eb40 0002 	adc.w	r0, r0, r2
 801cbea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801cbee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801cbf2:	bd10      	pop	{r4, pc}
 801cbf4:	20000090 	.word	0x20000090
 801cbf8:	08022794 	.word	0x08022794
 801cbfc:	080227ab 	.word	0x080227ab
 801cc00:	abcd330e 	.word	0xabcd330e
 801cc04:	e66d1234 	.word	0xe66d1234
 801cc08:	0005deec 	.word	0x0005deec
 801cc0c:	5851f42d 	.word	0x5851f42d
 801cc10:	4c957f2d 	.word	0x4c957f2d

0801cc14 <std>:
 801cc14:	2300      	movs	r3, #0
 801cc16:	b510      	push	{r4, lr}
 801cc18:	4604      	mov	r4, r0
 801cc1a:	e9c0 3300 	strd	r3, r3, [r0]
 801cc1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc22:	6083      	str	r3, [r0, #8]
 801cc24:	8181      	strh	r1, [r0, #12]
 801cc26:	6643      	str	r3, [r0, #100]	@ 0x64
 801cc28:	81c2      	strh	r2, [r0, #14]
 801cc2a:	6183      	str	r3, [r0, #24]
 801cc2c:	4619      	mov	r1, r3
 801cc2e:	2208      	movs	r2, #8
 801cc30:	305c      	adds	r0, #92	@ 0x5c
 801cc32:	f000 f950 	bl	801ced6 <memset>
 801cc36:	4b0d      	ldr	r3, [pc, #52]	@ (801cc6c <std+0x58>)
 801cc38:	6263      	str	r3, [r4, #36]	@ 0x24
 801cc3a:	4b0d      	ldr	r3, [pc, #52]	@ (801cc70 <std+0x5c>)
 801cc3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cc3e:	4b0d      	ldr	r3, [pc, #52]	@ (801cc74 <std+0x60>)
 801cc40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cc42:	4b0d      	ldr	r3, [pc, #52]	@ (801cc78 <std+0x64>)
 801cc44:	6323      	str	r3, [r4, #48]	@ 0x30
 801cc46:	4b0d      	ldr	r3, [pc, #52]	@ (801cc7c <std+0x68>)
 801cc48:	6224      	str	r4, [r4, #32]
 801cc4a:	429c      	cmp	r4, r3
 801cc4c:	d006      	beq.n	801cc5c <std+0x48>
 801cc4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cc52:	4294      	cmp	r4, r2
 801cc54:	d002      	beq.n	801cc5c <std+0x48>
 801cc56:	33d0      	adds	r3, #208	@ 0xd0
 801cc58:	429c      	cmp	r4, r3
 801cc5a:	d105      	bne.n	801cc68 <std+0x54>
 801cc5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc64:	f000 ba1e 	b.w	801d0a4 <__retarget_lock_init_recursive>
 801cc68:	bd10      	pop	{r4, pc}
 801cc6a:	bf00      	nop
 801cc6c:	0801cdfd 	.word	0x0801cdfd
 801cc70:	0801ce1f 	.word	0x0801ce1f
 801cc74:	0801ce57 	.word	0x0801ce57
 801cc78:	0801ce7b 	.word	0x0801ce7b
 801cc7c:	2000f3d0 	.word	0x2000f3d0

0801cc80 <stdio_exit_handler>:
 801cc80:	4a02      	ldr	r2, [pc, #8]	@ (801cc8c <stdio_exit_handler+0xc>)
 801cc82:	4903      	ldr	r1, [pc, #12]	@ (801cc90 <stdio_exit_handler+0x10>)
 801cc84:	4803      	ldr	r0, [pc, #12]	@ (801cc94 <stdio_exit_handler+0x14>)
 801cc86:	f000 b869 	b.w	801cd5c <_fwalk_sglue>
 801cc8a:	bf00      	nop
 801cc8c:	20000084 	.word	0x20000084
 801cc90:	0801dc5d 	.word	0x0801dc5d
 801cc94:	20000094 	.word	0x20000094

0801cc98 <cleanup_stdio>:
 801cc98:	6841      	ldr	r1, [r0, #4]
 801cc9a:	4b0c      	ldr	r3, [pc, #48]	@ (801cccc <cleanup_stdio+0x34>)
 801cc9c:	4299      	cmp	r1, r3
 801cc9e:	b510      	push	{r4, lr}
 801cca0:	4604      	mov	r4, r0
 801cca2:	d001      	beq.n	801cca8 <cleanup_stdio+0x10>
 801cca4:	f000 ffda 	bl	801dc5c <_fflush_r>
 801cca8:	68a1      	ldr	r1, [r4, #8]
 801ccaa:	4b09      	ldr	r3, [pc, #36]	@ (801ccd0 <cleanup_stdio+0x38>)
 801ccac:	4299      	cmp	r1, r3
 801ccae:	d002      	beq.n	801ccb6 <cleanup_stdio+0x1e>
 801ccb0:	4620      	mov	r0, r4
 801ccb2:	f000 ffd3 	bl	801dc5c <_fflush_r>
 801ccb6:	68e1      	ldr	r1, [r4, #12]
 801ccb8:	4b06      	ldr	r3, [pc, #24]	@ (801ccd4 <cleanup_stdio+0x3c>)
 801ccba:	4299      	cmp	r1, r3
 801ccbc:	d004      	beq.n	801ccc8 <cleanup_stdio+0x30>
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccc4:	f000 bfca 	b.w	801dc5c <_fflush_r>
 801ccc8:	bd10      	pop	{r4, pc}
 801ccca:	bf00      	nop
 801cccc:	2000f3d0 	.word	0x2000f3d0
 801ccd0:	2000f438 	.word	0x2000f438
 801ccd4:	2000f4a0 	.word	0x2000f4a0

0801ccd8 <global_stdio_init.part.0>:
 801ccd8:	b510      	push	{r4, lr}
 801ccda:	4b0b      	ldr	r3, [pc, #44]	@ (801cd08 <global_stdio_init.part.0+0x30>)
 801ccdc:	4c0b      	ldr	r4, [pc, #44]	@ (801cd0c <global_stdio_init.part.0+0x34>)
 801ccde:	4a0c      	ldr	r2, [pc, #48]	@ (801cd10 <global_stdio_init.part.0+0x38>)
 801cce0:	601a      	str	r2, [r3, #0]
 801cce2:	4620      	mov	r0, r4
 801cce4:	2200      	movs	r2, #0
 801cce6:	2104      	movs	r1, #4
 801cce8:	f7ff ff94 	bl	801cc14 <std>
 801ccec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ccf0:	2201      	movs	r2, #1
 801ccf2:	2109      	movs	r1, #9
 801ccf4:	f7ff ff8e 	bl	801cc14 <std>
 801ccf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ccfc:	2202      	movs	r2, #2
 801ccfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd02:	2112      	movs	r1, #18
 801cd04:	f7ff bf86 	b.w	801cc14 <std>
 801cd08:	2000f508 	.word	0x2000f508
 801cd0c:	2000f3d0 	.word	0x2000f3d0
 801cd10:	0801cc81 	.word	0x0801cc81

0801cd14 <__sfp_lock_acquire>:
 801cd14:	4801      	ldr	r0, [pc, #4]	@ (801cd1c <__sfp_lock_acquire+0x8>)
 801cd16:	f000 b9c6 	b.w	801d0a6 <__retarget_lock_acquire_recursive>
 801cd1a:	bf00      	nop
 801cd1c:	2000f511 	.word	0x2000f511

0801cd20 <__sfp_lock_release>:
 801cd20:	4801      	ldr	r0, [pc, #4]	@ (801cd28 <__sfp_lock_release+0x8>)
 801cd22:	f000 b9c1 	b.w	801d0a8 <__retarget_lock_release_recursive>
 801cd26:	bf00      	nop
 801cd28:	2000f511 	.word	0x2000f511

0801cd2c <__sinit>:
 801cd2c:	b510      	push	{r4, lr}
 801cd2e:	4604      	mov	r4, r0
 801cd30:	f7ff fff0 	bl	801cd14 <__sfp_lock_acquire>
 801cd34:	6a23      	ldr	r3, [r4, #32]
 801cd36:	b11b      	cbz	r3, 801cd40 <__sinit+0x14>
 801cd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cd3c:	f7ff bff0 	b.w	801cd20 <__sfp_lock_release>
 801cd40:	4b04      	ldr	r3, [pc, #16]	@ (801cd54 <__sinit+0x28>)
 801cd42:	6223      	str	r3, [r4, #32]
 801cd44:	4b04      	ldr	r3, [pc, #16]	@ (801cd58 <__sinit+0x2c>)
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d1f5      	bne.n	801cd38 <__sinit+0xc>
 801cd4c:	f7ff ffc4 	bl	801ccd8 <global_stdio_init.part.0>
 801cd50:	e7f2      	b.n	801cd38 <__sinit+0xc>
 801cd52:	bf00      	nop
 801cd54:	0801cc99 	.word	0x0801cc99
 801cd58:	2000f508 	.word	0x2000f508

0801cd5c <_fwalk_sglue>:
 801cd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd60:	4607      	mov	r7, r0
 801cd62:	4688      	mov	r8, r1
 801cd64:	4614      	mov	r4, r2
 801cd66:	2600      	movs	r6, #0
 801cd68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cd6c:	f1b9 0901 	subs.w	r9, r9, #1
 801cd70:	d505      	bpl.n	801cd7e <_fwalk_sglue+0x22>
 801cd72:	6824      	ldr	r4, [r4, #0]
 801cd74:	2c00      	cmp	r4, #0
 801cd76:	d1f7      	bne.n	801cd68 <_fwalk_sglue+0xc>
 801cd78:	4630      	mov	r0, r6
 801cd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd7e:	89ab      	ldrh	r3, [r5, #12]
 801cd80:	2b01      	cmp	r3, #1
 801cd82:	d907      	bls.n	801cd94 <_fwalk_sglue+0x38>
 801cd84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd88:	3301      	adds	r3, #1
 801cd8a:	d003      	beq.n	801cd94 <_fwalk_sglue+0x38>
 801cd8c:	4629      	mov	r1, r5
 801cd8e:	4638      	mov	r0, r7
 801cd90:	47c0      	blx	r8
 801cd92:	4306      	orrs	r6, r0
 801cd94:	3568      	adds	r5, #104	@ 0x68
 801cd96:	e7e9      	b.n	801cd6c <_fwalk_sglue+0x10>

0801cd98 <iprintf>:
 801cd98:	b40f      	push	{r0, r1, r2, r3}
 801cd9a:	b507      	push	{r0, r1, r2, lr}
 801cd9c:	4906      	ldr	r1, [pc, #24]	@ (801cdb8 <iprintf+0x20>)
 801cd9e:	ab04      	add	r3, sp, #16
 801cda0:	6808      	ldr	r0, [r1, #0]
 801cda2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cda6:	6881      	ldr	r1, [r0, #8]
 801cda8:	9301      	str	r3, [sp, #4]
 801cdaa:	f000 fc2d 	bl	801d608 <_vfiprintf_r>
 801cdae:	b003      	add	sp, #12
 801cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdb4:	b004      	add	sp, #16
 801cdb6:	4770      	bx	lr
 801cdb8:	20000090 	.word	0x20000090

0801cdbc <siprintf>:
 801cdbc:	b40e      	push	{r1, r2, r3}
 801cdbe:	b500      	push	{lr}
 801cdc0:	b09c      	sub	sp, #112	@ 0x70
 801cdc2:	ab1d      	add	r3, sp, #116	@ 0x74
 801cdc4:	9002      	str	r0, [sp, #8]
 801cdc6:	9006      	str	r0, [sp, #24]
 801cdc8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801cdcc:	4809      	ldr	r0, [pc, #36]	@ (801cdf4 <siprintf+0x38>)
 801cdce:	9107      	str	r1, [sp, #28]
 801cdd0:	9104      	str	r1, [sp, #16]
 801cdd2:	4909      	ldr	r1, [pc, #36]	@ (801cdf8 <siprintf+0x3c>)
 801cdd4:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdd8:	9105      	str	r1, [sp, #20]
 801cdda:	6800      	ldr	r0, [r0, #0]
 801cddc:	9301      	str	r3, [sp, #4]
 801cdde:	a902      	add	r1, sp, #8
 801cde0:	f000 faec 	bl	801d3bc <_svfiprintf_r>
 801cde4:	9b02      	ldr	r3, [sp, #8]
 801cde6:	2200      	movs	r2, #0
 801cde8:	701a      	strb	r2, [r3, #0]
 801cdea:	b01c      	add	sp, #112	@ 0x70
 801cdec:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdf0:	b003      	add	sp, #12
 801cdf2:	4770      	bx	lr
 801cdf4:	20000090 	.word	0x20000090
 801cdf8:	ffff0208 	.word	0xffff0208

0801cdfc <__sread>:
 801cdfc:	b510      	push	{r4, lr}
 801cdfe:	460c      	mov	r4, r1
 801ce00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce04:	f000 f906 	bl	801d014 <_read_r>
 801ce08:	2800      	cmp	r0, #0
 801ce0a:	bfab      	itete	ge
 801ce0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801ce0e:	89a3      	ldrhlt	r3, [r4, #12]
 801ce10:	181b      	addge	r3, r3, r0
 801ce12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801ce16:	bfac      	ite	ge
 801ce18:	6563      	strge	r3, [r4, #84]	@ 0x54
 801ce1a:	81a3      	strhlt	r3, [r4, #12]
 801ce1c:	bd10      	pop	{r4, pc}

0801ce1e <__swrite>:
 801ce1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce22:	461f      	mov	r7, r3
 801ce24:	898b      	ldrh	r3, [r1, #12]
 801ce26:	05db      	lsls	r3, r3, #23
 801ce28:	4605      	mov	r5, r0
 801ce2a:	460c      	mov	r4, r1
 801ce2c:	4616      	mov	r6, r2
 801ce2e:	d505      	bpl.n	801ce3c <__swrite+0x1e>
 801ce30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce34:	2302      	movs	r3, #2
 801ce36:	2200      	movs	r2, #0
 801ce38:	f000 f8da 	bl	801cff0 <_lseek_r>
 801ce3c:	89a3      	ldrh	r3, [r4, #12]
 801ce3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801ce46:	81a3      	strh	r3, [r4, #12]
 801ce48:	4632      	mov	r2, r6
 801ce4a:	463b      	mov	r3, r7
 801ce4c:	4628      	mov	r0, r5
 801ce4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ce52:	f000 b8f1 	b.w	801d038 <_write_r>

0801ce56 <__sseek>:
 801ce56:	b510      	push	{r4, lr}
 801ce58:	460c      	mov	r4, r1
 801ce5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce5e:	f000 f8c7 	bl	801cff0 <_lseek_r>
 801ce62:	1c43      	adds	r3, r0, #1
 801ce64:	89a3      	ldrh	r3, [r4, #12]
 801ce66:	bf15      	itete	ne
 801ce68:	6560      	strne	r0, [r4, #84]	@ 0x54
 801ce6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801ce6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801ce72:	81a3      	strheq	r3, [r4, #12]
 801ce74:	bf18      	it	ne
 801ce76:	81a3      	strhne	r3, [r4, #12]
 801ce78:	bd10      	pop	{r4, pc}

0801ce7a <__sclose>:
 801ce7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ce7e:	f000 b851 	b.w	801cf24 <_close_r>

0801ce82 <memcmp>:
 801ce82:	b510      	push	{r4, lr}
 801ce84:	3901      	subs	r1, #1
 801ce86:	4402      	add	r2, r0
 801ce88:	4290      	cmp	r0, r2
 801ce8a:	d101      	bne.n	801ce90 <memcmp+0xe>
 801ce8c:	2000      	movs	r0, #0
 801ce8e:	e005      	b.n	801ce9c <memcmp+0x1a>
 801ce90:	7803      	ldrb	r3, [r0, #0]
 801ce92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce96:	42a3      	cmp	r3, r4
 801ce98:	d001      	beq.n	801ce9e <memcmp+0x1c>
 801ce9a:	1b18      	subs	r0, r3, r4
 801ce9c:	bd10      	pop	{r4, pc}
 801ce9e:	3001      	adds	r0, #1
 801cea0:	e7f2      	b.n	801ce88 <memcmp+0x6>

0801cea2 <memmove>:
 801cea2:	4288      	cmp	r0, r1
 801cea4:	b510      	push	{r4, lr}
 801cea6:	eb01 0402 	add.w	r4, r1, r2
 801ceaa:	d902      	bls.n	801ceb2 <memmove+0x10>
 801ceac:	4284      	cmp	r4, r0
 801ceae:	4623      	mov	r3, r4
 801ceb0:	d807      	bhi.n	801cec2 <memmove+0x20>
 801ceb2:	1e43      	subs	r3, r0, #1
 801ceb4:	42a1      	cmp	r1, r4
 801ceb6:	d008      	beq.n	801ceca <memmove+0x28>
 801ceb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cebc:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cec0:	e7f8      	b.n	801ceb4 <memmove+0x12>
 801cec2:	4402      	add	r2, r0
 801cec4:	4601      	mov	r1, r0
 801cec6:	428a      	cmp	r2, r1
 801cec8:	d100      	bne.n	801cecc <memmove+0x2a>
 801ceca:	bd10      	pop	{r4, pc}
 801cecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ced0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ced4:	e7f7      	b.n	801cec6 <memmove+0x24>

0801ced6 <memset>:
 801ced6:	4402      	add	r2, r0
 801ced8:	4603      	mov	r3, r0
 801ceda:	4293      	cmp	r3, r2
 801cedc:	d100      	bne.n	801cee0 <memset+0xa>
 801cede:	4770      	bx	lr
 801cee0:	f803 1b01 	strb.w	r1, [r3], #1
 801cee4:	e7f9      	b.n	801ceda <memset+0x4>

0801cee6 <strchr>:
 801cee6:	b2c9      	uxtb	r1, r1
 801cee8:	4603      	mov	r3, r0
 801ceea:	4618      	mov	r0, r3
 801ceec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cef0:	b112      	cbz	r2, 801cef8 <strchr+0x12>
 801cef2:	428a      	cmp	r2, r1
 801cef4:	d1f9      	bne.n	801ceea <strchr+0x4>
 801cef6:	4770      	bx	lr
 801cef8:	2900      	cmp	r1, #0
 801cefa:	bf18      	it	ne
 801cefc:	2000      	movne	r0, #0
 801cefe:	4770      	bx	lr

0801cf00 <strncmp>:
 801cf00:	b510      	push	{r4, lr}
 801cf02:	b16a      	cbz	r2, 801cf20 <strncmp+0x20>
 801cf04:	3901      	subs	r1, #1
 801cf06:	1884      	adds	r4, r0, r2
 801cf08:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cf10:	429a      	cmp	r2, r3
 801cf12:	d103      	bne.n	801cf1c <strncmp+0x1c>
 801cf14:	42a0      	cmp	r0, r4
 801cf16:	d001      	beq.n	801cf1c <strncmp+0x1c>
 801cf18:	2a00      	cmp	r2, #0
 801cf1a:	d1f5      	bne.n	801cf08 <strncmp+0x8>
 801cf1c:	1ad0      	subs	r0, r2, r3
 801cf1e:	bd10      	pop	{r4, pc}
 801cf20:	4610      	mov	r0, r2
 801cf22:	e7fc      	b.n	801cf1e <strncmp+0x1e>

0801cf24 <_close_r>:
 801cf24:	b538      	push	{r3, r4, r5, lr}
 801cf26:	4d06      	ldr	r5, [pc, #24]	@ (801cf40 <_close_r+0x1c>)
 801cf28:	2300      	movs	r3, #0
 801cf2a:	4604      	mov	r4, r0
 801cf2c:	4608      	mov	r0, r1
 801cf2e:	602b      	str	r3, [r5, #0]
 801cf30:	f7e6 f8b0 	bl	8003094 <_close>
 801cf34:	1c43      	adds	r3, r0, #1
 801cf36:	d102      	bne.n	801cf3e <_close_r+0x1a>
 801cf38:	682b      	ldr	r3, [r5, #0]
 801cf3a:	b103      	cbz	r3, 801cf3e <_close_r+0x1a>
 801cf3c:	6023      	str	r3, [r4, #0]
 801cf3e:	bd38      	pop	{r3, r4, r5, pc}
 801cf40:	2000f50c 	.word	0x2000f50c

0801cf44 <_reclaim_reent>:
 801cf44:	4b29      	ldr	r3, [pc, #164]	@ (801cfec <_reclaim_reent+0xa8>)
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	4283      	cmp	r3, r0
 801cf4a:	b570      	push	{r4, r5, r6, lr}
 801cf4c:	4604      	mov	r4, r0
 801cf4e:	d04b      	beq.n	801cfe8 <_reclaim_reent+0xa4>
 801cf50:	69c3      	ldr	r3, [r0, #28]
 801cf52:	b1ab      	cbz	r3, 801cf80 <_reclaim_reent+0x3c>
 801cf54:	68db      	ldr	r3, [r3, #12]
 801cf56:	b16b      	cbz	r3, 801cf74 <_reclaim_reent+0x30>
 801cf58:	2500      	movs	r5, #0
 801cf5a:	69e3      	ldr	r3, [r4, #28]
 801cf5c:	68db      	ldr	r3, [r3, #12]
 801cf5e:	5959      	ldr	r1, [r3, r5]
 801cf60:	2900      	cmp	r1, #0
 801cf62:	d13b      	bne.n	801cfdc <_reclaim_reent+0x98>
 801cf64:	3504      	adds	r5, #4
 801cf66:	2d80      	cmp	r5, #128	@ 0x80
 801cf68:	d1f7      	bne.n	801cf5a <_reclaim_reent+0x16>
 801cf6a:	69e3      	ldr	r3, [r4, #28]
 801cf6c:	4620      	mov	r0, r4
 801cf6e:	68d9      	ldr	r1, [r3, #12]
 801cf70:	f000 f8c8 	bl	801d104 <_free_r>
 801cf74:	69e3      	ldr	r3, [r4, #28]
 801cf76:	6819      	ldr	r1, [r3, #0]
 801cf78:	b111      	cbz	r1, 801cf80 <_reclaim_reent+0x3c>
 801cf7a:	4620      	mov	r0, r4
 801cf7c:	f000 f8c2 	bl	801d104 <_free_r>
 801cf80:	6961      	ldr	r1, [r4, #20]
 801cf82:	b111      	cbz	r1, 801cf8a <_reclaim_reent+0x46>
 801cf84:	4620      	mov	r0, r4
 801cf86:	f000 f8bd 	bl	801d104 <_free_r>
 801cf8a:	69e1      	ldr	r1, [r4, #28]
 801cf8c:	b111      	cbz	r1, 801cf94 <_reclaim_reent+0x50>
 801cf8e:	4620      	mov	r0, r4
 801cf90:	f000 f8b8 	bl	801d104 <_free_r>
 801cf94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cf96:	b111      	cbz	r1, 801cf9e <_reclaim_reent+0x5a>
 801cf98:	4620      	mov	r0, r4
 801cf9a:	f000 f8b3 	bl	801d104 <_free_r>
 801cf9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cfa0:	b111      	cbz	r1, 801cfa8 <_reclaim_reent+0x64>
 801cfa2:	4620      	mov	r0, r4
 801cfa4:	f000 f8ae 	bl	801d104 <_free_r>
 801cfa8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801cfaa:	b111      	cbz	r1, 801cfb2 <_reclaim_reent+0x6e>
 801cfac:	4620      	mov	r0, r4
 801cfae:	f000 f8a9 	bl	801d104 <_free_r>
 801cfb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801cfb4:	b111      	cbz	r1, 801cfbc <_reclaim_reent+0x78>
 801cfb6:	4620      	mov	r0, r4
 801cfb8:	f000 f8a4 	bl	801d104 <_free_r>
 801cfbc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801cfbe:	b111      	cbz	r1, 801cfc6 <_reclaim_reent+0x82>
 801cfc0:	4620      	mov	r0, r4
 801cfc2:	f000 f89f 	bl	801d104 <_free_r>
 801cfc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801cfc8:	b111      	cbz	r1, 801cfd0 <_reclaim_reent+0x8c>
 801cfca:	4620      	mov	r0, r4
 801cfcc:	f000 f89a 	bl	801d104 <_free_r>
 801cfd0:	6a23      	ldr	r3, [r4, #32]
 801cfd2:	b14b      	cbz	r3, 801cfe8 <_reclaim_reent+0xa4>
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cfda:	4718      	bx	r3
 801cfdc:	680e      	ldr	r6, [r1, #0]
 801cfde:	4620      	mov	r0, r4
 801cfe0:	f000 f890 	bl	801d104 <_free_r>
 801cfe4:	4631      	mov	r1, r6
 801cfe6:	e7bb      	b.n	801cf60 <_reclaim_reent+0x1c>
 801cfe8:	bd70      	pop	{r4, r5, r6, pc}
 801cfea:	bf00      	nop
 801cfec:	20000090 	.word	0x20000090

0801cff0 <_lseek_r>:
 801cff0:	b538      	push	{r3, r4, r5, lr}
 801cff2:	4d07      	ldr	r5, [pc, #28]	@ (801d010 <_lseek_r+0x20>)
 801cff4:	4604      	mov	r4, r0
 801cff6:	4608      	mov	r0, r1
 801cff8:	4611      	mov	r1, r2
 801cffa:	2200      	movs	r2, #0
 801cffc:	602a      	str	r2, [r5, #0]
 801cffe:	461a      	mov	r2, r3
 801d000:	f7e6 f86f 	bl	80030e2 <_lseek>
 801d004:	1c43      	adds	r3, r0, #1
 801d006:	d102      	bne.n	801d00e <_lseek_r+0x1e>
 801d008:	682b      	ldr	r3, [r5, #0]
 801d00a:	b103      	cbz	r3, 801d00e <_lseek_r+0x1e>
 801d00c:	6023      	str	r3, [r4, #0]
 801d00e:	bd38      	pop	{r3, r4, r5, pc}
 801d010:	2000f50c 	.word	0x2000f50c

0801d014 <_read_r>:
 801d014:	b538      	push	{r3, r4, r5, lr}
 801d016:	4d07      	ldr	r5, [pc, #28]	@ (801d034 <_read_r+0x20>)
 801d018:	4604      	mov	r4, r0
 801d01a:	4608      	mov	r0, r1
 801d01c:	4611      	mov	r1, r2
 801d01e:	2200      	movs	r2, #0
 801d020:	602a      	str	r2, [r5, #0]
 801d022:	461a      	mov	r2, r3
 801d024:	f7e6 f819 	bl	800305a <_read>
 801d028:	1c43      	adds	r3, r0, #1
 801d02a:	d102      	bne.n	801d032 <_read_r+0x1e>
 801d02c:	682b      	ldr	r3, [r5, #0]
 801d02e:	b103      	cbz	r3, 801d032 <_read_r+0x1e>
 801d030:	6023      	str	r3, [r4, #0]
 801d032:	bd38      	pop	{r3, r4, r5, pc}
 801d034:	2000f50c 	.word	0x2000f50c

0801d038 <_write_r>:
 801d038:	b538      	push	{r3, r4, r5, lr}
 801d03a:	4d07      	ldr	r5, [pc, #28]	@ (801d058 <_write_r+0x20>)
 801d03c:	4604      	mov	r4, r0
 801d03e:	4608      	mov	r0, r1
 801d040:	4611      	mov	r1, r2
 801d042:	2200      	movs	r2, #0
 801d044:	602a      	str	r2, [r5, #0]
 801d046:	461a      	mov	r2, r3
 801d048:	f7e5 fcb2 	bl	80029b0 <_write>
 801d04c:	1c43      	adds	r3, r0, #1
 801d04e:	d102      	bne.n	801d056 <_write_r+0x1e>
 801d050:	682b      	ldr	r3, [r5, #0]
 801d052:	b103      	cbz	r3, 801d056 <_write_r+0x1e>
 801d054:	6023      	str	r3, [r4, #0]
 801d056:	bd38      	pop	{r3, r4, r5, pc}
 801d058:	2000f50c 	.word	0x2000f50c

0801d05c <__libc_init_array>:
 801d05c:	b570      	push	{r4, r5, r6, lr}
 801d05e:	4d0d      	ldr	r5, [pc, #52]	@ (801d094 <__libc_init_array+0x38>)
 801d060:	4c0d      	ldr	r4, [pc, #52]	@ (801d098 <__libc_init_array+0x3c>)
 801d062:	1b64      	subs	r4, r4, r5
 801d064:	10a4      	asrs	r4, r4, #2
 801d066:	2600      	movs	r6, #0
 801d068:	42a6      	cmp	r6, r4
 801d06a:	d109      	bne.n	801d080 <__libc_init_array+0x24>
 801d06c:	4d0b      	ldr	r5, [pc, #44]	@ (801d09c <__libc_init_array+0x40>)
 801d06e:	4c0c      	ldr	r4, [pc, #48]	@ (801d0a0 <__libc_init_array+0x44>)
 801d070:	f000 ffd8 	bl	801e024 <_init>
 801d074:	1b64      	subs	r4, r4, r5
 801d076:	10a4      	asrs	r4, r4, #2
 801d078:	2600      	movs	r6, #0
 801d07a:	42a6      	cmp	r6, r4
 801d07c:	d105      	bne.n	801d08a <__libc_init_array+0x2e>
 801d07e:	bd70      	pop	{r4, r5, r6, pc}
 801d080:	f855 3b04 	ldr.w	r3, [r5], #4
 801d084:	4798      	blx	r3
 801d086:	3601      	adds	r6, #1
 801d088:	e7ee      	b.n	801d068 <__libc_init_array+0xc>
 801d08a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d08e:	4798      	blx	r3
 801d090:	3601      	adds	r6, #1
 801d092:	e7f2      	b.n	801d07a <__libc_init_array+0x1e>
 801d094:	0802287c 	.word	0x0802287c
 801d098:	0802287c 	.word	0x0802287c
 801d09c:	0802287c 	.word	0x0802287c
 801d0a0:	08022880 	.word	0x08022880

0801d0a4 <__retarget_lock_init_recursive>:
 801d0a4:	4770      	bx	lr

0801d0a6 <__retarget_lock_acquire_recursive>:
 801d0a6:	4770      	bx	lr

0801d0a8 <__retarget_lock_release_recursive>:
 801d0a8:	4770      	bx	lr

0801d0aa <memcpy>:
 801d0aa:	440a      	add	r2, r1
 801d0ac:	4291      	cmp	r1, r2
 801d0ae:	f100 33ff 	add.w	r3, r0, #4294967295
 801d0b2:	d100      	bne.n	801d0b6 <memcpy+0xc>
 801d0b4:	4770      	bx	lr
 801d0b6:	b510      	push	{r4, lr}
 801d0b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d0bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d0c0:	4291      	cmp	r1, r2
 801d0c2:	d1f9      	bne.n	801d0b8 <memcpy+0xe>
 801d0c4:	bd10      	pop	{r4, pc}
	...

0801d0c8 <__assert_func>:
 801d0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d0ca:	4614      	mov	r4, r2
 801d0cc:	461a      	mov	r2, r3
 801d0ce:	4b09      	ldr	r3, [pc, #36]	@ (801d0f4 <__assert_func+0x2c>)
 801d0d0:	681b      	ldr	r3, [r3, #0]
 801d0d2:	4605      	mov	r5, r0
 801d0d4:	68d8      	ldr	r0, [r3, #12]
 801d0d6:	b954      	cbnz	r4, 801d0ee <__assert_func+0x26>
 801d0d8:	4b07      	ldr	r3, [pc, #28]	@ (801d0f8 <__assert_func+0x30>)
 801d0da:	461c      	mov	r4, r3
 801d0dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d0e0:	9100      	str	r1, [sp, #0]
 801d0e2:	462b      	mov	r3, r5
 801d0e4:	4905      	ldr	r1, [pc, #20]	@ (801d0fc <__assert_func+0x34>)
 801d0e6:	f000 fde1 	bl	801dcac <fiprintf>
 801d0ea:	f000 fe95 	bl	801de18 <abort>
 801d0ee:	4b04      	ldr	r3, [pc, #16]	@ (801d100 <__assert_func+0x38>)
 801d0f0:	e7f4      	b.n	801d0dc <__assert_func+0x14>
 801d0f2:	bf00      	nop
 801d0f4:	20000090 	.word	0x20000090
 801d0f8:	0802283e 	.word	0x0802283e
 801d0fc:	08022810 	.word	0x08022810
 801d100:	08022803 	.word	0x08022803

0801d104 <_free_r>:
 801d104:	b538      	push	{r3, r4, r5, lr}
 801d106:	4605      	mov	r5, r0
 801d108:	2900      	cmp	r1, #0
 801d10a:	d041      	beq.n	801d190 <_free_r+0x8c>
 801d10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d110:	1f0c      	subs	r4, r1, #4
 801d112:	2b00      	cmp	r3, #0
 801d114:	bfb8      	it	lt
 801d116:	18e4      	addlt	r4, r4, r3
 801d118:	f000 f8e8 	bl	801d2ec <__malloc_lock>
 801d11c:	4a1d      	ldr	r2, [pc, #116]	@ (801d194 <_free_r+0x90>)
 801d11e:	6813      	ldr	r3, [r2, #0]
 801d120:	b933      	cbnz	r3, 801d130 <_free_r+0x2c>
 801d122:	6063      	str	r3, [r4, #4]
 801d124:	6014      	str	r4, [r2, #0]
 801d126:	4628      	mov	r0, r5
 801d128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d12c:	f000 b8e4 	b.w	801d2f8 <__malloc_unlock>
 801d130:	42a3      	cmp	r3, r4
 801d132:	d908      	bls.n	801d146 <_free_r+0x42>
 801d134:	6820      	ldr	r0, [r4, #0]
 801d136:	1821      	adds	r1, r4, r0
 801d138:	428b      	cmp	r3, r1
 801d13a:	bf01      	itttt	eq
 801d13c:	6819      	ldreq	r1, [r3, #0]
 801d13e:	685b      	ldreq	r3, [r3, #4]
 801d140:	1809      	addeq	r1, r1, r0
 801d142:	6021      	streq	r1, [r4, #0]
 801d144:	e7ed      	b.n	801d122 <_free_r+0x1e>
 801d146:	461a      	mov	r2, r3
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	b10b      	cbz	r3, 801d150 <_free_r+0x4c>
 801d14c:	42a3      	cmp	r3, r4
 801d14e:	d9fa      	bls.n	801d146 <_free_r+0x42>
 801d150:	6811      	ldr	r1, [r2, #0]
 801d152:	1850      	adds	r0, r2, r1
 801d154:	42a0      	cmp	r0, r4
 801d156:	d10b      	bne.n	801d170 <_free_r+0x6c>
 801d158:	6820      	ldr	r0, [r4, #0]
 801d15a:	4401      	add	r1, r0
 801d15c:	1850      	adds	r0, r2, r1
 801d15e:	4283      	cmp	r3, r0
 801d160:	6011      	str	r1, [r2, #0]
 801d162:	d1e0      	bne.n	801d126 <_free_r+0x22>
 801d164:	6818      	ldr	r0, [r3, #0]
 801d166:	685b      	ldr	r3, [r3, #4]
 801d168:	6053      	str	r3, [r2, #4]
 801d16a:	4408      	add	r0, r1
 801d16c:	6010      	str	r0, [r2, #0]
 801d16e:	e7da      	b.n	801d126 <_free_r+0x22>
 801d170:	d902      	bls.n	801d178 <_free_r+0x74>
 801d172:	230c      	movs	r3, #12
 801d174:	602b      	str	r3, [r5, #0]
 801d176:	e7d6      	b.n	801d126 <_free_r+0x22>
 801d178:	6820      	ldr	r0, [r4, #0]
 801d17a:	1821      	adds	r1, r4, r0
 801d17c:	428b      	cmp	r3, r1
 801d17e:	bf04      	itt	eq
 801d180:	6819      	ldreq	r1, [r3, #0]
 801d182:	685b      	ldreq	r3, [r3, #4]
 801d184:	6063      	str	r3, [r4, #4]
 801d186:	bf04      	itt	eq
 801d188:	1809      	addeq	r1, r1, r0
 801d18a:	6021      	streq	r1, [r4, #0]
 801d18c:	6054      	str	r4, [r2, #4]
 801d18e:	e7ca      	b.n	801d126 <_free_r+0x22>
 801d190:	bd38      	pop	{r3, r4, r5, pc}
 801d192:	bf00      	nop
 801d194:	2000f518 	.word	0x2000f518

0801d198 <malloc>:
 801d198:	4b02      	ldr	r3, [pc, #8]	@ (801d1a4 <malloc+0xc>)
 801d19a:	4601      	mov	r1, r0
 801d19c:	6818      	ldr	r0, [r3, #0]
 801d19e:	f000 b825 	b.w	801d1ec <_malloc_r>
 801d1a2:	bf00      	nop
 801d1a4:	20000090 	.word	0x20000090

0801d1a8 <sbrk_aligned>:
 801d1a8:	b570      	push	{r4, r5, r6, lr}
 801d1aa:	4e0f      	ldr	r6, [pc, #60]	@ (801d1e8 <sbrk_aligned+0x40>)
 801d1ac:	460c      	mov	r4, r1
 801d1ae:	6831      	ldr	r1, [r6, #0]
 801d1b0:	4605      	mov	r5, r0
 801d1b2:	b911      	cbnz	r1, 801d1ba <sbrk_aligned+0x12>
 801d1b4:	f000 fe20 	bl	801ddf8 <_sbrk_r>
 801d1b8:	6030      	str	r0, [r6, #0]
 801d1ba:	4621      	mov	r1, r4
 801d1bc:	4628      	mov	r0, r5
 801d1be:	f000 fe1b 	bl	801ddf8 <_sbrk_r>
 801d1c2:	1c43      	adds	r3, r0, #1
 801d1c4:	d103      	bne.n	801d1ce <sbrk_aligned+0x26>
 801d1c6:	f04f 34ff 	mov.w	r4, #4294967295
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	bd70      	pop	{r4, r5, r6, pc}
 801d1ce:	1cc4      	adds	r4, r0, #3
 801d1d0:	f024 0403 	bic.w	r4, r4, #3
 801d1d4:	42a0      	cmp	r0, r4
 801d1d6:	d0f8      	beq.n	801d1ca <sbrk_aligned+0x22>
 801d1d8:	1a21      	subs	r1, r4, r0
 801d1da:	4628      	mov	r0, r5
 801d1dc:	f000 fe0c 	bl	801ddf8 <_sbrk_r>
 801d1e0:	3001      	adds	r0, #1
 801d1e2:	d1f2      	bne.n	801d1ca <sbrk_aligned+0x22>
 801d1e4:	e7ef      	b.n	801d1c6 <sbrk_aligned+0x1e>
 801d1e6:	bf00      	nop
 801d1e8:	2000f514 	.word	0x2000f514

0801d1ec <_malloc_r>:
 801d1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1f0:	1ccd      	adds	r5, r1, #3
 801d1f2:	f025 0503 	bic.w	r5, r5, #3
 801d1f6:	3508      	adds	r5, #8
 801d1f8:	2d0c      	cmp	r5, #12
 801d1fa:	bf38      	it	cc
 801d1fc:	250c      	movcc	r5, #12
 801d1fe:	2d00      	cmp	r5, #0
 801d200:	4606      	mov	r6, r0
 801d202:	db01      	blt.n	801d208 <_malloc_r+0x1c>
 801d204:	42a9      	cmp	r1, r5
 801d206:	d904      	bls.n	801d212 <_malloc_r+0x26>
 801d208:	230c      	movs	r3, #12
 801d20a:	6033      	str	r3, [r6, #0]
 801d20c:	2000      	movs	r0, #0
 801d20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d2e8 <_malloc_r+0xfc>
 801d216:	f000 f869 	bl	801d2ec <__malloc_lock>
 801d21a:	f8d8 3000 	ldr.w	r3, [r8]
 801d21e:	461c      	mov	r4, r3
 801d220:	bb44      	cbnz	r4, 801d274 <_malloc_r+0x88>
 801d222:	4629      	mov	r1, r5
 801d224:	4630      	mov	r0, r6
 801d226:	f7ff ffbf 	bl	801d1a8 <sbrk_aligned>
 801d22a:	1c43      	adds	r3, r0, #1
 801d22c:	4604      	mov	r4, r0
 801d22e:	d158      	bne.n	801d2e2 <_malloc_r+0xf6>
 801d230:	f8d8 4000 	ldr.w	r4, [r8]
 801d234:	4627      	mov	r7, r4
 801d236:	2f00      	cmp	r7, #0
 801d238:	d143      	bne.n	801d2c2 <_malloc_r+0xd6>
 801d23a:	2c00      	cmp	r4, #0
 801d23c:	d04b      	beq.n	801d2d6 <_malloc_r+0xea>
 801d23e:	6823      	ldr	r3, [r4, #0]
 801d240:	4639      	mov	r1, r7
 801d242:	4630      	mov	r0, r6
 801d244:	eb04 0903 	add.w	r9, r4, r3
 801d248:	f000 fdd6 	bl	801ddf8 <_sbrk_r>
 801d24c:	4581      	cmp	r9, r0
 801d24e:	d142      	bne.n	801d2d6 <_malloc_r+0xea>
 801d250:	6821      	ldr	r1, [r4, #0]
 801d252:	1a6d      	subs	r5, r5, r1
 801d254:	4629      	mov	r1, r5
 801d256:	4630      	mov	r0, r6
 801d258:	f7ff ffa6 	bl	801d1a8 <sbrk_aligned>
 801d25c:	3001      	adds	r0, #1
 801d25e:	d03a      	beq.n	801d2d6 <_malloc_r+0xea>
 801d260:	6823      	ldr	r3, [r4, #0]
 801d262:	442b      	add	r3, r5
 801d264:	6023      	str	r3, [r4, #0]
 801d266:	f8d8 3000 	ldr.w	r3, [r8]
 801d26a:	685a      	ldr	r2, [r3, #4]
 801d26c:	bb62      	cbnz	r2, 801d2c8 <_malloc_r+0xdc>
 801d26e:	f8c8 7000 	str.w	r7, [r8]
 801d272:	e00f      	b.n	801d294 <_malloc_r+0xa8>
 801d274:	6822      	ldr	r2, [r4, #0]
 801d276:	1b52      	subs	r2, r2, r5
 801d278:	d420      	bmi.n	801d2bc <_malloc_r+0xd0>
 801d27a:	2a0b      	cmp	r2, #11
 801d27c:	d917      	bls.n	801d2ae <_malloc_r+0xc2>
 801d27e:	1961      	adds	r1, r4, r5
 801d280:	42a3      	cmp	r3, r4
 801d282:	6025      	str	r5, [r4, #0]
 801d284:	bf18      	it	ne
 801d286:	6059      	strne	r1, [r3, #4]
 801d288:	6863      	ldr	r3, [r4, #4]
 801d28a:	bf08      	it	eq
 801d28c:	f8c8 1000 	streq.w	r1, [r8]
 801d290:	5162      	str	r2, [r4, r5]
 801d292:	604b      	str	r3, [r1, #4]
 801d294:	4630      	mov	r0, r6
 801d296:	f000 f82f 	bl	801d2f8 <__malloc_unlock>
 801d29a:	f104 000b 	add.w	r0, r4, #11
 801d29e:	1d23      	adds	r3, r4, #4
 801d2a0:	f020 0007 	bic.w	r0, r0, #7
 801d2a4:	1ac2      	subs	r2, r0, r3
 801d2a6:	bf1c      	itt	ne
 801d2a8:	1a1b      	subne	r3, r3, r0
 801d2aa:	50a3      	strne	r3, [r4, r2]
 801d2ac:	e7af      	b.n	801d20e <_malloc_r+0x22>
 801d2ae:	6862      	ldr	r2, [r4, #4]
 801d2b0:	42a3      	cmp	r3, r4
 801d2b2:	bf0c      	ite	eq
 801d2b4:	f8c8 2000 	streq.w	r2, [r8]
 801d2b8:	605a      	strne	r2, [r3, #4]
 801d2ba:	e7eb      	b.n	801d294 <_malloc_r+0xa8>
 801d2bc:	4623      	mov	r3, r4
 801d2be:	6864      	ldr	r4, [r4, #4]
 801d2c0:	e7ae      	b.n	801d220 <_malloc_r+0x34>
 801d2c2:	463c      	mov	r4, r7
 801d2c4:	687f      	ldr	r7, [r7, #4]
 801d2c6:	e7b6      	b.n	801d236 <_malloc_r+0x4a>
 801d2c8:	461a      	mov	r2, r3
 801d2ca:	685b      	ldr	r3, [r3, #4]
 801d2cc:	42a3      	cmp	r3, r4
 801d2ce:	d1fb      	bne.n	801d2c8 <_malloc_r+0xdc>
 801d2d0:	2300      	movs	r3, #0
 801d2d2:	6053      	str	r3, [r2, #4]
 801d2d4:	e7de      	b.n	801d294 <_malloc_r+0xa8>
 801d2d6:	230c      	movs	r3, #12
 801d2d8:	6033      	str	r3, [r6, #0]
 801d2da:	4630      	mov	r0, r6
 801d2dc:	f000 f80c 	bl	801d2f8 <__malloc_unlock>
 801d2e0:	e794      	b.n	801d20c <_malloc_r+0x20>
 801d2e2:	6005      	str	r5, [r0, #0]
 801d2e4:	e7d6      	b.n	801d294 <_malloc_r+0xa8>
 801d2e6:	bf00      	nop
 801d2e8:	2000f518 	.word	0x2000f518

0801d2ec <__malloc_lock>:
 801d2ec:	4801      	ldr	r0, [pc, #4]	@ (801d2f4 <__malloc_lock+0x8>)
 801d2ee:	f7ff beda 	b.w	801d0a6 <__retarget_lock_acquire_recursive>
 801d2f2:	bf00      	nop
 801d2f4:	2000f510 	.word	0x2000f510

0801d2f8 <__malloc_unlock>:
 801d2f8:	4801      	ldr	r0, [pc, #4]	@ (801d300 <__malloc_unlock+0x8>)
 801d2fa:	f7ff bed5 	b.w	801d0a8 <__retarget_lock_release_recursive>
 801d2fe:	bf00      	nop
 801d300:	2000f510 	.word	0x2000f510

0801d304 <__ssputs_r>:
 801d304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d308:	688e      	ldr	r6, [r1, #8]
 801d30a:	461f      	mov	r7, r3
 801d30c:	42be      	cmp	r6, r7
 801d30e:	680b      	ldr	r3, [r1, #0]
 801d310:	4682      	mov	sl, r0
 801d312:	460c      	mov	r4, r1
 801d314:	4690      	mov	r8, r2
 801d316:	d82d      	bhi.n	801d374 <__ssputs_r+0x70>
 801d318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d31c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d320:	d026      	beq.n	801d370 <__ssputs_r+0x6c>
 801d322:	6965      	ldr	r5, [r4, #20]
 801d324:	6909      	ldr	r1, [r1, #16]
 801d326:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d32a:	eba3 0901 	sub.w	r9, r3, r1
 801d32e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d332:	1c7b      	adds	r3, r7, #1
 801d334:	444b      	add	r3, r9
 801d336:	106d      	asrs	r5, r5, #1
 801d338:	429d      	cmp	r5, r3
 801d33a:	bf38      	it	cc
 801d33c:	461d      	movcc	r5, r3
 801d33e:	0553      	lsls	r3, r2, #21
 801d340:	d527      	bpl.n	801d392 <__ssputs_r+0x8e>
 801d342:	4629      	mov	r1, r5
 801d344:	f7ff ff52 	bl	801d1ec <_malloc_r>
 801d348:	4606      	mov	r6, r0
 801d34a:	b360      	cbz	r0, 801d3a6 <__ssputs_r+0xa2>
 801d34c:	6921      	ldr	r1, [r4, #16]
 801d34e:	464a      	mov	r2, r9
 801d350:	f7ff feab 	bl	801d0aa <memcpy>
 801d354:	89a3      	ldrh	r3, [r4, #12]
 801d356:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d35e:	81a3      	strh	r3, [r4, #12]
 801d360:	6126      	str	r6, [r4, #16]
 801d362:	6165      	str	r5, [r4, #20]
 801d364:	444e      	add	r6, r9
 801d366:	eba5 0509 	sub.w	r5, r5, r9
 801d36a:	6026      	str	r6, [r4, #0]
 801d36c:	60a5      	str	r5, [r4, #8]
 801d36e:	463e      	mov	r6, r7
 801d370:	42be      	cmp	r6, r7
 801d372:	d900      	bls.n	801d376 <__ssputs_r+0x72>
 801d374:	463e      	mov	r6, r7
 801d376:	6820      	ldr	r0, [r4, #0]
 801d378:	4632      	mov	r2, r6
 801d37a:	4641      	mov	r1, r8
 801d37c:	f7ff fd91 	bl	801cea2 <memmove>
 801d380:	68a3      	ldr	r3, [r4, #8]
 801d382:	1b9b      	subs	r3, r3, r6
 801d384:	60a3      	str	r3, [r4, #8]
 801d386:	6823      	ldr	r3, [r4, #0]
 801d388:	4433      	add	r3, r6
 801d38a:	6023      	str	r3, [r4, #0]
 801d38c:	2000      	movs	r0, #0
 801d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d392:	462a      	mov	r2, r5
 801d394:	f000 fd47 	bl	801de26 <_realloc_r>
 801d398:	4606      	mov	r6, r0
 801d39a:	2800      	cmp	r0, #0
 801d39c:	d1e0      	bne.n	801d360 <__ssputs_r+0x5c>
 801d39e:	6921      	ldr	r1, [r4, #16]
 801d3a0:	4650      	mov	r0, sl
 801d3a2:	f7ff feaf 	bl	801d104 <_free_r>
 801d3a6:	230c      	movs	r3, #12
 801d3a8:	f8ca 3000 	str.w	r3, [sl]
 801d3ac:	89a3      	ldrh	r3, [r4, #12]
 801d3ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3b2:	81a3      	strh	r3, [r4, #12]
 801d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d3b8:	e7e9      	b.n	801d38e <__ssputs_r+0x8a>
	...

0801d3bc <_svfiprintf_r>:
 801d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c0:	4698      	mov	r8, r3
 801d3c2:	898b      	ldrh	r3, [r1, #12]
 801d3c4:	061b      	lsls	r3, r3, #24
 801d3c6:	b09d      	sub	sp, #116	@ 0x74
 801d3c8:	4607      	mov	r7, r0
 801d3ca:	460d      	mov	r5, r1
 801d3cc:	4614      	mov	r4, r2
 801d3ce:	d510      	bpl.n	801d3f2 <_svfiprintf_r+0x36>
 801d3d0:	690b      	ldr	r3, [r1, #16]
 801d3d2:	b973      	cbnz	r3, 801d3f2 <_svfiprintf_r+0x36>
 801d3d4:	2140      	movs	r1, #64	@ 0x40
 801d3d6:	f7ff ff09 	bl	801d1ec <_malloc_r>
 801d3da:	6028      	str	r0, [r5, #0]
 801d3dc:	6128      	str	r0, [r5, #16]
 801d3de:	b930      	cbnz	r0, 801d3ee <_svfiprintf_r+0x32>
 801d3e0:	230c      	movs	r3, #12
 801d3e2:	603b      	str	r3, [r7, #0]
 801d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801d3e8:	b01d      	add	sp, #116	@ 0x74
 801d3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ee:	2340      	movs	r3, #64	@ 0x40
 801d3f0:	616b      	str	r3, [r5, #20]
 801d3f2:	2300      	movs	r3, #0
 801d3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801d3f6:	2320      	movs	r3, #32
 801d3f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d3fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801d400:	2330      	movs	r3, #48	@ 0x30
 801d402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d5a0 <_svfiprintf_r+0x1e4>
 801d406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d40a:	f04f 0901 	mov.w	r9, #1
 801d40e:	4623      	mov	r3, r4
 801d410:	469a      	mov	sl, r3
 801d412:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d416:	b10a      	cbz	r2, 801d41c <_svfiprintf_r+0x60>
 801d418:	2a25      	cmp	r2, #37	@ 0x25
 801d41a:	d1f9      	bne.n	801d410 <_svfiprintf_r+0x54>
 801d41c:	ebba 0b04 	subs.w	fp, sl, r4
 801d420:	d00b      	beq.n	801d43a <_svfiprintf_r+0x7e>
 801d422:	465b      	mov	r3, fp
 801d424:	4622      	mov	r2, r4
 801d426:	4629      	mov	r1, r5
 801d428:	4638      	mov	r0, r7
 801d42a:	f7ff ff6b 	bl	801d304 <__ssputs_r>
 801d42e:	3001      	adds	r0, #1
 801d430:	f000 80a7 	beq.w	801d582 <_svfiprintf_r+0x1c6>
 801d434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d436:	445a      	add	r2, fp
 801d438:	9209      	str	r2, [sp, #36]	@ 0x24
 801d43a:	f89a 3000 	ldrb.w	r3, [sl]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	f000 809f 	beq.w	801d582 <_svfiprintf_r+0x1c6>
 801d444:	2300      	movs	r3, #0
 801d446:	f04f 32ff 	mov.w	r2, #4294967295
 801d44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d44e:	f10a 0a01 	add.w	sl, sl, #1
 801d452:	9304      	str	r3, [sp, #16]
 801d454:	9307      	str	r3, [sp, #28]
 801d456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d45a:	931a      	str	r3, [sp, #104]	@ 0x68
 801d45c:	4654      	mov	r4, sl
 801d45e:	2205      	movs	r2, #5
 801d460:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d464:	484e      	ldr	r0, [pc, #312]	@ (801d5a0 <_svfiprintf_r+0x1e4>)
 801d466:	f7e2 feeb 	bl	8000240 <memchr>
 801d46a:	9a04      	ldr	r2, [sp, #16]
 801d46c:	b9d8      	cbnz	r0, 801d4a6 <_svfiprintf_r+0xea>
 801d46e:	06d0      	lsls	r0, r2, #27
 801d470:	bf44      	itt	mi
 801d472:	2320      	movmi	r3, #32
 801d474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d478:	0711      	lsls	r1, r2, #28
 801d47a:	bf44      	itt	mi
 801d47c:	232b      	movmi	r3, #43	@ 0x2b
 801d47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d482:	f89a 3000 	ldrb.w	r3, [sl]
 801d486:	2b2a      	cmp	r3, #42	@ 0x2a
 801d488:	d015      	beq.n	801d4b6 <_svfiprintf_r+0xfa>
 801d48a:	9a07      	ldr	r2, [sp, #28]
 801d48c:	4654      	mov	r4, sl
 801d48e:	2000      	movs	r0, #0
 801d490:	f04f 0c0a 	mov.w	ip, #10
 801d494:	4621      	mov	r1, r4
 801d496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d49a:	3b30      	subs	r3, #48	@ 0x30
 801d49c:	2b09      	cmp	r3, #9
 801d49e:	d94b      	bls.n	801d538 <_svfiprintf_r+0x17c>
 801d4a0:	b1b0      	cbz	r0, 801d4d0 <_svfiprintf_r+0x114>
 801d4a2:	9207      	str	r2, [sp, #28]
 801d4a4:	e014      	b.n	801d4d0 <_svfiprintf_r+0x114>
 801d4a6:	eba0 0308 	sub.w	r3, r0, r8
 801d4aa:	fa09 f303 	lsl.w	r3, r9, r3
 801d4ae:	4313      	orrs	r3, r2
 801d4b0:	9304      	str	r3, [sp, #16]
 801d4b2:	46a2      	mov	sl, r4
 801d4b4:	e7d2      	b.n	801d45c <_svfiprintf_r+0xa0>
 801d4b6:	9b03      	ldr	r3, [sp, #12]
 801d4b8:	1d19      	adds	r1, r3, #4
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	9103      	str	r1, [sp, #12]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	bfbb      	ittet	lt
 801d4c2:	425b      	neglt	r3, r3
 801d4c4:	f042 0202 	orrlt.w	r2, r2, #2
 801d4c8:	9307      	strge	r3, [sp, #28]
 801d4ca:	9307      	strlt	r3, [sp, #28]
 801d4cc:	bfb8      	it	lt
 801d4ce:	9204      	strlt	r2, [sp, #16]
 801d4d0:	7823      	ldrb	r3, [r4, #0]
 801d4d2:	2b2e      	cmp	r3, #46	@ 0x2e
 801d4d4:	d10a      	bne.n	801d4ec <_svfiprintf_r+0x130>
 801d4d6:	7863      	ldrb	r3, [r4, #1]
 801d4d8:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4da:	d132      	bne.n	801d542 <_svfiprintf_r+0x186>
 801d4dc:	9b03      	ldr	r3, [sp, #12]
 801d4de:	1d1a      	adds	r2, r3, #4
 801d4e0:	681b      	ldr	r3, [r3, #0]
 801d4e2:	9203      	str	r2, [sp, #12]
 801d4e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d4e8:	3402      	adds	r4, #2
 801d4ea:	9305      	str	r3, [sp, #20]
 801d4ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d5b0 <_svfiprintf_r+0x1f4>
 801d4f0:	7821      	ldrb	r1, [r4, #0]
 801d4f2:	2203      	movs	r2, #3
 801d4f4:	4650      	mov	r0, sl
 801d4f6:	f7e2 fea3 	bl	8000240 <memchr>
 801d4fa:	b138      	cbz	r0, 801d50c <_svfiprintf_r+0x150>
 801d4fc:	9b04      	ldr	r3, [sp, #16]
 801d4fe:	eba0 000a 	sub.w	r0, r0, sl
 801d502:	2240      	movs	r2, #64	@ 0x40
 801d504:	4082      	lsls	r2, r0
 801d506:	4313      	orrs	r3, r2
 801d508:	3401      	adds	r4, #1
 801d50a:	9304      	str	r3, [sp, #16]
 801d50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d510:	4824      	ldr	r0, [pc, #144]	@ (801d5a4 <_svfiprintf_r+0x1e8>)
 801d512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d516:	2206      	movs	r2, #6
 801d518:	f7e2 fe92 	bl	8000240 <memchr>
 801d51c:	2800      	cmp	r0, #0
 801d51e:	d036      	beq.n	801d58e <_svfiprintf_r+0x1d2>
 801d520:	4b21      	ldr	r3, [pc, #132]	@ (801d5a8 <_svfiprintf_r+0x1ec>)
 801d522:	bb1b      	cbnz	r3, 801d56c <_svfiprintf_r+0x1b0>
 801d524:	9b03      	ldr	r3, [sp, #12]
 801d526:	3307      	adds	r3, #7
 801d528:	f023 0307 	bic.w	r3, r3, #7
 801d52c:	3308      	adds	r3, #8
 801d52e:	9303      	str	r3, [sp, #12]
 801d530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d532:	4433      	add	r3, r6
 801d534:	9309      	str	r3, [sp, #36]	@ 0x24
 801d536:	e76a      	b.n	801d40e <_svfiprintf_r+0x52>
 801d538:	fb0c 3202 	mla	r2, ip, r2, r3
 801d53c:	460c      	mov	r4, r1
 801d53e:	2001      	movs	r0, #1
 801d540:	e7a8      	b.n	801d494 <_svfiprintf_r+0xd8>
 801d542:	2300      	movs	r3, #0
 801d544:	3401      	adds	r4, #1
 801d546:	9305      	str	r3, [sp, #20]
 801d548:	4619      	mov	r1, r3
 801d54a:	f04f 0c0a 	mov.w	ip, #10
 801d54e:	4620      	mov	r0, r4
 801d550:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d554:	3a30      	subs	r2, #48	@ 0x30
 801d556:	2a09      	cmp	r2, #9
 801d558:	d903      	bls.n	801d562 <_svfiprintf_r+0x1a6>
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d0c6      	beq.n	801d4ec <_svfiprintf_r+0x130>
 801d55e:	9105      	str	r1, [sp, #20]
 801d560:	e7c4      	b.n	801d4ec <_svfiprintf_r+0x130>
 801d562:	fb0c 2101 	mla	r1, ip, r1, r2
 801d566:	4604      	mov	r4, r0
 801d568:	2301      	movs	r3, #1
 801d56a:	e7f0      	b.n	801d54e <_svfiprintf_r+0x192>
 801d56c:	ab03      	add	r3, sp, #12
 801d56e:	9300      	str	r3, [sp, #0]
 801d570:	462a      	mov	r2, r5
 801d572:	4b0e      	ldr	r3, [pc, #56]	@ (801d5ac <_svfiprintf_r+0x1f0>)
 801d574:	a904      	add	r1, sp, #16
 801d576:	4638      	mov	r0, r7
 801d578:	f3af 8000 	nop.w
 801d57c:	1c42      	adds	r2, r0, #1
 801d57e:	4606      	mov	r6, r0
 801d580:	d1d6      	bne.n	801d530 <_svfiprintf_r+0x174>
 801d582:	89ab      	ldrh	r3, [r5, #12]
 801d584:	065b      	lsls	r3, r3, #25
 801d586:	f53f af2d 	bmi.w	801d3e4 <_svfiprintf_r+0x28>
 801d58a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d58c:	e72c      	b.n	801d3e8 <_svfiprintf_r+0x2c>
 801d58e:	ab03      	add	r3, sp, #12
 801d590:	9300      	str	r3, [sp, #0]
 801d592:	462a      	mov	r2, r5
 801d594:	4b05      	ldr	r3, [pc, #20]	@ (801d5ac <_svfiprintf_r+0x1f0>)
 801d596:	a904      	add	r1, sp, #16
 801d598:	4638      	mov	r0, r7
 801d59a:	f000 f9bb 	bl	801d914 <_printf_i>
 801d59e:	e7ed      	b.n	801d57c <_svfiprintf_r+0x1c0>
 801d5a0:	0802283f 	.word	0x0802283f
 801d5a4:	08022849 	.word	0x08022849
 801d5a8:	00000000 	.word	0x00000000
 801d5ac:	0801d305 	.word	0x0801d305
 801d5b0:	08022845 	.word	0x08022845

0801d5b4 <__sfputc_r>:
 801d5b4:	6893      	ldr	r3, [r2, #8]
 801d5b6:	3b01      	subs	r3, #1
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	b410      	push	{r4}
 801d5bc:	6093      	str	r3, [r2, #8]
 801d5be:	da08      	bge.n	801d5d2 <__sfputc_r+0x1e>
 801d5c0:	6994      	ldr	r4, [r2, #24]
 801d5c2:	42a3      	cmp	r3, r4
 801d5c4:	db01      	blt.n	801d5ca <__sfputc_r+0x16>
 801d5c6:	290a      	cmp	r1, #10
 801d5c8:	d103      	bne.n	801d5d2 <__sfputc_r+0x1e>
 801d5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5ce:	f000 bb7f 	b.w	801dcd0 <__swbuf_r>
 801d5d2:	6813      	ldr	r3, [r2, #0]
 801d5d4:	1c58      	adds	r0, r3, #1
 801d5d6:	6010      	str	r0, [r2, #0]
 801d5d8:	7019      	strb	r1, [r3, #0]
 801d5da:	4608      	mov	r0, r1
 801d5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d5e0:	4770      	bx	lr

0801d5e2 <__sfputs_r>:
 801d5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5e4:	4606      	mov	r6, r0
 801d5e6:	460f      	mov	r7, r1
 801d5e8:	4614      	mov	r4, r2
 801d5ea:	18d5      	adds	r5, r2, r3
 801d5ec:	42ac      	cmp	r4, r5
 801d5ee:	d101      	bne.n	801d5f4 <__sfputs_r+0x12>
 801d5f0:	2000      	movs	r0, #0
 801d5f2:	e007      	b.n	801d604 <__sfputs_r+0x22>
 801d5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5f8:	463a      	mov	r2, r7
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	f7ff ffda 	bl	801d5b4 <__sfputc_r>
 801d600:	1c43      	adds	r3, r0, #1
 801d602:	d1f3      	bne.n	801d5ec <__sfputs_r+0xa>
 801d604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d608 <_vfiprintf_r>:
 801d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d60c:	460d      	mov	r5, r1
 801d60e:	b09d      	sub	sp, #116	@ 0x74
 801d610:	4614      	mov	r4, r2
 801d612:	4698      	mov	r8, r3
 801d614:	4606      	mov	r6, r0
 801d616:	b118      	cbz	r0, 801d620 <_vfiprintf_r+0x18>
 801d618:	6a03      	ldr	r3, [r0, #32]
 801d61a:	b90b      	cbnz	r3, 801d620 <_vfiprintf_r+0x18>
 801d61c:	f7ff fb86 	bl	801cd2c <__sinit>
 801d620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d622:	07d9      	lsls	r1, r3, #31
 801d624:	d405      	bmi.n	801d632 <_vfiprintf_r+0x2a>
 801d626:	89ab      	ldrh	r3, [r5, #12]
 801d628:	059a      	lsls	r2, r3, #22
 801d62a:	d402      	bmi.n	801d632 <_vfiprintf_r+0x2a>
 801d62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d62e:	f7ff fd3a 	bl	801d0a6 <__retarget_lock_acquire_recursive>
 801d632:	89ab      	ldrh	r3, [r5, #12]
 801d634:	071b      	lsls	r3, r3, #28
 801d636:	d501      	bpl.n	801d63c <_vfiprintf_r+0x34>
 801d638:	692b      	ldr	r3, [r5, #16]
 801d63a:	b99b      	cbnz	r3, 801d664 <_vfiprintf_r+0x5c>
 801d63c:	4629      	mov	r1, r5
 801d63e:	4630      	mov	r0, r6
 801d640:	f000 fb84 	bl	801dd4c <__swsetup_r>
 801d644:	b170      	cbz	r0, 801d664 <_vfiprintf_r+0x5c>
 801d646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d648:	07dc      	lsls	r4, r3, #31
 801d64a:	d504      	bpl.n	801d656 <_vfiprintf_r+0x4e>
 801d64c:	f04f 30ff 	mov.w	r0, #4294967295
 801d650:	b01d      	add	sp, #116	@ 0x74
 801d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d656:	89ab      	ldrh	r3, [r5, #12]
 801d658:	0598      	lsls	r0, r3, #22
 801d65a:	d4f7      	bmi.n	801d64c <_vfiprintf_r+0x44>
 801d65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d65e:	f7ff fd23 	bl	801d0a8 <__retarget_lock_release_recursive>
 801d662:	e7f3      	b.n	801d64c <_vfiprintf_r+0x44>
 801d664:	2300      	movs	r3, #0
 801d666:	9309      	str	r3, [sp, #36]	@ 0x24
 801d668:	2320      	movs	r3, #32
 801d66a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d66e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d672:	2330      	movs	r3, #48	@ 0x30
 801d674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d824 <_vfiprintf_r+0x21c>
 801d678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d67c:	f04f 0901 	mov.w	r9, #1
 801d680:	4623      	mov	r3, r4
 801d682:	469a      	mov	sl, r3
 801d684:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d688:	b10a      	cbz	r2, 801d68e <_vfiprintf_r+0x86>
 801d68a:	2a25      	cmp	r2, #37	@ 0x25
 801d68c:	d1f9      	bne.n	801d682 <_vfiprintf_r+0x7a>
 801d68e:	ebba 0b04 	subs.w	fp, sl, r4
 801d692:	d00b      	beq.n	801d6ac <_vfiprintf_r+0xa4>
 801d694:	465b      	mov	r3, fp
 801d696:	4622      	mov	r2, r4
 801d698:	4629      	mov	r1, r5
 801d69a:	4630      	mov	r0, r6
 801d69c:	f7ff ffa1 	bl	801d5e2 <__sfputs_r>
 801d6a0:	3001      	adds	r0, #1
 801d6a2:	f000 80a7 	beq.w	801d7f4 <_vfiprintf_r+0x1ec>
 801d6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d6a8:	445a      	add	r2, fp
 801d6aa:	9209      	str	r2, [sp, #36]	@ 0x24
 801d6ac:	f89a 3000 	ldrb.w	r3, [sl]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	f000 809f 	beq.w	801d7f4 <_vfiprintf_r+0x1ec>
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	f04f 32ff 	mov.w	r2, #4294967295
 801d6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d6c0:	f10a 0a01 	add.w	sl, sl, #1
 801d6c4:	9304      	str	r3, [sp, #16]
 801d6c6:	9307      	str	r3, [sp, #28]
 801d6c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d6cc:	931a      	str	r3, [sp, #104]	@ 0x68
 801d6ce:	4654      	mov	r4, sl
 801d6d0:	2205      	movs	r2, #5
 801d6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d6d6:	4853      	ldr	r0, [pc, #332]	@ (801d824 <_vfiprintf_r+0x21c>)
 801d6d8:	f7e2 fdb2 	bl	8000240 <memchr>
 801d6dc:	9a04      	ldr	r2, [sp, #16]
 801d6de:	b9d8      	cbnz	r0, 801d718 <_vfiprintf_r+0x110>
 801d6e0:	06d1      	lsls	r1, r2, #27
 801d6e2:	bf44      	itt	mi
 801d6e4:	2320      	movmi	r3, #32
 801d6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d6ea:	0713      	lsls	r3, r2, #28
 801d6ec:	bf44      	itt	mi
 801d6ee:	232b      	movmi	r3, #43	@ 0x2b
 801d6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d6f4:	f89a 3000 	ldrb.w	r3, [sl]
 801d6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 801d6fa:	d015      	beq.n	801d728 <_vfiprintf_r+0x120>
 801d6fc:	9a07      	ldr	r2, [sp, #28]
 801d6fe:	4654      	mov	r4, sl
 801d700:	2000      	movs	r0, #0
 801d702:	f04f 0c0a 	mov.w	ip, #10
 801d706:	4621      	mov	r1, r4
 801d708:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d70c:	3b30      	subs	r3, #48	@ 0x30
 801d70e:	2b09      	cmp	r3, #9
 801d710:	d94b      	bls.n	801d7aa <_vfiprintf_r+0x1a2>
 801d712:	b1b0      	cbz	r0, 801d742 <_vfiprintf_r+0x13a>
 801d714:	9207      	str	r2, [sp, #28]
 801d716:	e014      	b.n	801d742 <_vfiprintf_r+0x13a>
 801d718:	eba0 0308 	sub.w	r3, r0, r8
 801d71c:	fa09 f303 	lsl.w	r3, r9, r3
 801d720:	4313      	orrs	r3, r2
 801d722:	9304      	str	r3, [sp, #16]
 801d724:	46a2      	mov	sl, r4
 801d726:	e7d2      	b.n	801d6ce <_vfiprintf_r+0xc6>
 801d728:	9b03      	ldr	r3, [sp, #12]
 801d72a:	1d19      	adds	r1, r3, #4
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	9103      	str	r1, [sp, #12]
 801d730:	2b00      	cmp	r3, #0
 801d732:	bfbb      	ittet	lt
 801d734:	425b      	neglt	r3, r3
 801d736:	f042 0202 	orrlt.w	r2, r2, #2
 801d73a:	9307      	strge	r3, [sp, #28]
 801d73c:	9307      	strlt	r3, [sp, #28]
 801d73e:	bfb8      	it	lt
 801d740:	9204      	strlt	r2, [sp, #16]
 801d742:	7823      	ldrb	r3, [r4, #0]
 801d744:	2b2e      	cmp	r3, #46	@ 0x2e
 801d746:	d10a      	bne.n	801d75e <_vfiprintf_r+0x156>
 801d748:	7863      	ldrb	r3, [r4, #1]
 801d74a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d74c:	d132      	bne.n	801d7b4 <_vfiprintf_r+0x1ac>
 801d74e:	9b03      	ldr	r3, [sp, #12]
 801d750:	1d1a      	adds	r2, r3, #4
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	9203      	str	r2, [sp, #12]
 801d756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d75a:	3402      	adds	r4, #2
 801d75c:	9305      	str	r3, [sp, #20]
 801d75e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d834 <_vfiprintf_r+0x22c>
 801d762:	7821      	ldrb	r1, [r4, #0]
 801d764:	2203      	movs	r2, #3
 801d766:	4650      	mov	r0, sl
 801d768:	f7e2 fd6a 	bl	8000240 <memchr>
 801d76c:	b138      	cbz	r0, 801d77e <_vfiprintf_r+0x176>
 801d76e:	9b04      	ldr	r3, [sp, #16]
 801d770:	eba0 000a 	sub.w	r0, r0, sl
 801d774:	2240      	movs	r2, #64	@ 0x40
 801d776:	4082      	lsls	r2, r0
 801d778:	4313      	orrs	r3, r2
 801d77a:	3401      	adds	r4, #1
 801d77c:	9304      	str	r3, [sp, #16]
 801d77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d782:	4829      	ldr	r0, [pc, #164]	@ (801d828 <_vfiprintf_r+0x220>)
 801d784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d788:	2206      	movs	r2, #6
 801d78a:	f7e2 fd59 	bl	8000240 <memchr>
 801d78e:	2800      	cmp	r0, #0
 801d790:	d03f      	beq.n	801d812 <_vfiprintf_r+0x20a>
 801d792:	4b26      	ldr	r3, [pc, #152]	@ (801d82c <_vfiprintf_r+0x224>)
 801d794:	bb1b      	cbnz	r3, 801d7de <_vfiprintf_r+0x1d6>
 801d796:	9b03      	ldr	r3, [sp, #12]
 801d798:	3307      	adds	r3, #7
 801d79a:	f023 0307 	bic.w	r3, r3, #7
 801d79e:	3308      	adds	r3, #8
 801d7a0:	9303      	str	r3, [sp, #12]
 801d7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7a4:	443b      	add	r3, r7
 801d7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7a8:	e76a      	b.n	801d680 <_vfiprintf_r+0x78>
 801d7aa:	fb0c 3202 	mla	r2, ip, r2, r3
 801d7ae:	460c      	mov	r4, r1
 801d7b0:	2001      	movs	r0, #1
 801d7b2:	e7a8      	b.n	801d706 <_vfiprintf_r+0xfe>
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	3401      	adds	r4, #1
 801d7b8:	9305      	str	r3, [sp, #20]
 801d7ba:	4619      	mov	r1, r3
 801d7bc:	f04f 0c0a 	mov.w	ip, #10
 801d7c0:	4620      	mov	r0, r4
 801d7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d7c6:	3a30      	subs	r2, #48	@ 0x30
 801d7c8:	2a09      	cmp	r2, #9
 801d7ca:	d903      	bls.n	801d7d4 <_vfiprintf_r+0x1cc>
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	d0c6      	beq.n	801d75e <_vfiprintf_r+0x156>
 801d7d0:	9105      	str	r1, [sp, #20]
 801d7d2:	e7c4      	b.n	801d75e <_vfiprintf_r+0x156>
 801d7d4:	fb0c 2101 	mla	r1, ip, r1, r2
 801d7d8:	4604      	mov	r4, r0
 801d7da:	2301      	movs	r3, #1
 801d7dc:	e7f0      	b.n	801d7c0 <_vfiprintf_r+0x1b8>
 801d7de:	ab03      	add	r3, sp, #12
 801d7e0:	9300      	str	r3, [sp, #0]
 801d7e2:	462a      	mov	r2, r5
 801d7e4:	4b12      	ldr	r3, [pc, #72]	@ (801d830 <_vfiprintf_r+0x228>)
 801d7e6:	a904      	add	r1, sp, #16
 801d7e8:	4630      	mov	r0, r6
 801d7ea:	f3af 8000 	nop.w
 801d7ee:	4607      	mov	r7, r0
 801d7f0:	1c78      	adds	r0, r7, #1
 801d7f2:	d1d6      	bne.n	801d7a2 <_vfiprintf_r+0x19a>
 801d7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d7f6:	07d9      	lsls	r1, r3, #31
 801d7f8:	d405      	bmi.n	801d806 <_vfiprintf_r+0x1fe>
 801d7fa:	89ab      	ldrh	r3, [r5, #12]
 801d7fc:	059a      	lsls	r2, r3, #22
 801d7fe:	d402      	bmi.n	801d806 <_vfiprintf_r+0x1fe>
 801d800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d802:	f7ff fc51 	bl	801d0a8 <__retarget_lock_release_recursive>
 801d806:	89ab      	ldrh	r3, [r5, #12]
 801d808:	065b      	lsls	r3, r3, #25
 801d80a:	f53f af1f 	bmi.w	801d64c <_vfiprintf_r+0x44>
 801d80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d810:	e71e      	b.n	801d650 <_vfiprintf_r+0x48>
 801d812:	ab03      	add	r3, sp, #12
 801d814:	9300      	str	r3, [sp, #0]
 801d816:	462a      	mov	r2, r5
 801d818:	4b05      	ldr	r3, [pc, #20]	@ (801d830 <_vfiprintf_r+0x228>)
 801d81a:	a904      	add	r1, sp, #16
 801d81c:	4630      	mov	r0, r6
 801d81e:	f000 f879 	bl	801d914 <_printf_i>
 801d822:	e7e4      	b.n	801d7ee <_vfiprintf_r+0x1e6>
 801d824:	0802283f 	.word	0x0802283f
 801d828:	08022849 	.word	0x08022849
 801d82c:	00000000 	.word	0x00000000
 801d830:	0801d5e3 	.word	0x0801d5e3
 801d834:	08022845 	.word	0x08022845

0801d838 <_printf_common>:
 801d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d83c:	4616      	mov	r6, r2
 801d83e:	4698      	mov	r8, r3
 801d840:	688a      	ldr	r2, [r1, #8]
 801d842:	690b      	ldr	r3, [r1, #16]
 801d844:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d848:	4293      	cmp	r3, r2
 801d84a:	bfb8      	it	lt
 801d84c:	4613      	movlt	r3, r2
 801d84e:	6033      	str	r3, [r6, #0]
 801d850:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d854:	4607      	mov	r7, r0
 801d856:	460c      	mov	r4, r1
 801d858:	b10a      	cbz	r2, 801d85e <_printf_common+0x26>
 801d85a:	3301      	adds	r3, #1
 801d85c:	6033      	str	r3, [r6, #0]
 801d85e:	6823      	ldr	r3, [r4, #0]
 801d860:	0699      	lsls	r1, r3, #26
 801d862:	bf42      	ittt	mi
 801d864:	6833      	ldrmi	r3, [r6, #0]
 801d866:	3302      	addmi	r3, #2
 801d868:	6033      	strmi	r3, [r6, #0]
 801d86a:	6825      	ldr	r5, [r4, #0]
 801d86c:	f015 0506 	ands.w	r5, r5, #6
 801d870:	d106      	bne.n	801d880 <_printf_common+0x48>
 801d872:	f104 0a19 	add.w	sl, r4, #25
 801d876:	68e3      	ldr	r3, [r4, #12]
 801d878:	6832      	ldr	r2, [r6, #0]
 801d87a:	1a9b      	subs	r3, r3, r2
 801d87c:	42ab      	cmp	r3, r5
 801d87e:	dc26      	bgt.n	801d8ce <_printf_common+0x96>
 801d880:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d884:	6822      	ldr	r2, [r4, #0]
 801d886:	3b00      	subs	r3, #0
 801d888:	bf18      	it	ne
 801d88a:	2301      	movne	r3, #1
 801d88c:	0692      	lsls	r2, r2, #26
 801d88e:	d42b      	bmi.n	801d8e8 <_printf_common+0xb0>
 801d890:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d894:	4641      	mov	r1, r8
 801d896:	4638      	mov	r0, r7
 801d898:	47c8      	blx	r9
 801d89a:	3001      	adds	r0, #1
 801d89c:	d01e      	beq.n	801d8dc <_printf_common+0xa4>
 801d89e:	6823      	ldr	r3, [r4, #0]
 801d8a0:	6922      	ldr	r2, [r4, #16]
 801d8a2:	f003 0306 	and.w	r3, r3, #6
 801d8a6:	2b04      	cmp	r3, #4
 801d8a8:	bf02      	ittt	eq
 801d8aa:	68e5      	ldreq	r5, [r4, #12]
 801d8ac:	6833      	ldreq	r3, [r6, #0]
 801d8ae:	1aed      	subeq	r5, r5, r3
 801d8b0:	68a3      	ldr	r3, [r4, #8]
 801d8b2:	bf0c      	ite	eq
 801d8b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d8b8:	2500      	movne	r5, #0
 801d8ba:	4293      	cmp	r3, r2
 801d8bc:	bfc4      	itt	gt
 801d8be:	1a9b      	subgt	r3, r3, r2
 801d8c0:	18ed      	addgt	r5, r5, r3
 801d8c2:	2600      	movs	r6, #0
 801d8c4:	341a      	adds	r4, #26
 801d8c6:	42b5      	cmp	r5, r6
 801d8c8:	d11a      	bne.n	801d900 <_printf_common+0xc8>
 801d8ca:	2000      	movs	r0, #0
 801d8cc:	e008      	b.n	801d8e0 <_printf_common+0xa8>
 801d8ce:	2301      	movs	r3, #1
 801d8d0:	4652      	mov	r2, sl
 801d8d2:	4641      	mov	r1, r8
 801d8d4:	4638      	mov	r0, r7
 801d8d6:	47c8      	blx	r9
 801d8d8:	3001      	adds	r0, #1
 801d8da:	d103      	bne.n	801d8e4 <_printf_common+0xac>
 801d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8e4:	3501      	adds	r5, #1
 801d8e6:	e7c6      	b.n	801d876 <_printf_common+0x3e>
 801d8e8:	18e1      	adds	r1, r4, r3
 801d8ea:	1c5a      	adds	r2, r3, #1
 801d8ec:	2030      	movs	r0, #48	@ 0x30
 801d8ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d8f2:	4422      	add	r2, r4
 801d8f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d8f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d8fc:	3302      	adds	r3, #2
 801d8fe:	e7c7      	b.n	801d890 <_printf_common+0x58>
 801d900:	2301      	movs	r3, #1
 801d902:	4622      	mov	r2, r4
 801d904:	4641      	mov	r1, r8
 801d906:	4638      	mov	r0, r7
 801d908:	47c8      	blx	r9
 801d90a:	3001      	adds	r0, #1
 801d90c:	d0e6      	beq.n	801d8dc <_printf_common+0xa4>
 801d90e:	3601      	adds	r6, #1
 801d910:	e7d9      	b.n	801d8c6 <_printf_common+0x8e>
	...

0801d914 <_printf_i>:
 801d914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d918:	7e0f      	ldrb	r7, [r1, #24]
 801d91a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d91c:	2f78      	cmp	r7, #120	@ 0x78
 801d91e:	4691      	mov	r9, r2
 801d920:	4680      	mov	r8, r0
 801d922:	460c      	mov	r4, r1
 801d924:	469a      	mov	sl, r3
 801d926:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d92a:	d807      	bhi.n	801d93c <_printf_i+0x28>
 801d92c:	2f62      	cmp	r7, #98	@ 0x62
 801d92e:	d80a      	bhi.n	801d946 <_printf_i+0x32>
 801d930:	2f00      	cmp	r7, #0
 801d932:	f000 80d2 	beq.w	801dada <_printf_i+0x1c6>
 801d936:	2f58      	cmp	r7, #88	@ 0x58
 801d938:	f000 80b9 	beq.w	801daae <_printf_i+0x19a>
 801d93c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d940:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d944:	e03a      	b.n	801d9bc <_printf_i+0xa8>
 801d946:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d94a:	2b15      	cmp	r3, #21
 801d94c:	d8f6      	bhi.n	801d93c <_printf_i+0x28>
 801d94e:	a101      	add	r1, pc, #4	@ (adr r1, 801d954 <_printf_i+0x40>)
 801d950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d954:	0801d9ad 	.word	0x0801d9ad
 801d958:	0801d9c1 	.word	0x0801d9c1
 801d95c:	0801d93d 	.word	0x0801d93d
 801d960:	0801d93d 	.word	0x0801d93d
 801d964:	0801d93d 	.word	0x0801d93d
 801d968:	0801d93d 	.word	0x0801d93d
 801d96c:	0801d9c1 	.word	0x0801d9c1
 801d970:	0801d93d 	.word	0x0801d93d
 801d974:	0801d93d 	.word	0x0801d93d
 801d978:	0801d93d 	.word	0x0801d93d
 801d97c:	0801d93d 	.word	0x0801d93d
 801d980:	0801dac1 	.word	0x0801dac1
 801d984:	0801d9eb 	.word	0x0801d9eb
 801d988:	0801da7b 	.word	0x0801da7b
 801d98c:	0801d93d 	.word	0x0801d93d
 801d990:	0801d93d 	.word	0x0801d93d
 801d994:	0801dae3 	.word	0x0801dae3
 801d998:	0801d93d 	.word	0x0801d93d
 801d99c:	0801d9eb 	.word	0x0801d9eb
 801d9a0:	0801d93d 	.word	0x0801d93d
 801d9a4:	0801d93d 	.word	0x0801d93d
 801d9a8:	0801da83 	.word	0x0801da83
 801d9ac:	6833      	ldr	r3, [r6, #0]
 801d9ae:	1d1a      	adds	r2, r3, #4
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	6032      	str	r2, [r6, #0]
 801d9b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d9b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d9bc:	2301      	movs	r3, #1
 801d9be:	e09d      	b.n	801dafc <_printf_i+0x1e8>
 801d9c0:	6833      	ldr	r3, [r6, #0]
 801d9c2:	6820      	ldr	r0, [r4, #0]
 801d9c4:	1d19      	adds	r1, r3, #4
 801d9c6:	6031      	str	r1, [r6, #0]
 801d9c8:	0606      	lsls	r6, r0, #24
 801d9ca:	d501      	bpl.n	801d9d0 <_printf_i+0xbc>
 801d9cc:	681d      	ldr	r5, [r3, #0]
 801d9ce:	e003      	b.n	801d9d8 <_printf_i+0xc4>
 801d9d0:	0645      	lsls	r5, r0, #25
 801d9d2:	d5fb      	bpl.n	801d9cc <_printf_i+0xb8>
 801d9d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d9d8:	2d00      	cmp	r5, #0
 801d9da:	da03      	bge.n	801d9e4 <_printf_i+0xd0>
 801d9dc:	232d      	movs	r3, #45	@ 0x2d
 801d9de:	426d      	negs	r5, r5
 801d9e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d9e4:	4859      	ldr	r0, [pc, #356]	@ (801db4c <_printf_i+0x238>)
 801d9e6:	230a      	movs	r3, #10
 801d9e8:	e011      	b.n	801da0e <_printf_i+0xfa>
 801d9ea:	6821      	ldr	r1, [r4, #0]
 801d9ec:	6833      	ldr	r3, [r6, #0]
 801d9ee:	0608      	lsls	r0, r1, #24
 801d9f0:	f853 5b04 	ldr.w	r5, [r3], #4
 801d9f4:	d402      	bmi.n	801d9fc <_printf_i+0xe8>
 801d9f6:	0649      	lsls	r1, r1, #25
 801d9f8:	bf48      	it	mi
 801d9fa:	b2ad      	uxthmi	r5, r5
 801d9fc:	2f6f      	cmp	r7, #111	@ 0x6f
 801d9fe:	4853      	ldr	r0, [pc, #332]	@ (801db4c <_printf_i+0x238>)
 801da00:	6033      	str	r3, [r6, #0]
 801da02:	bf14      	ite	ne
 801da04:	230a      	movne	r3, #10
 801da06:	2308      	moveq	r3, #8
 801da08:	2100      	movs	r1, #0
 801da0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801da0e:	6866      	ldr	r6, [r4, #4]
 801da10:	60a6      	str	r6, [r4, #8]
 801da12:	2e00      	cmp	r6, #0
 801da14:	bfa2      	ittt	ge
 801da16:	6821      	ldrge	r1, [r4, #0]
 801da18:	f021 0104 	bicge.w	r1, r1, #4
 801da1c:	6021      	strge	r1, [r4, #0]
 801da1e:	b90d      	cbnz	r5, 801da24 <_printf_i+0x110>
 801da20:	2e00      	cmp	r6, #0
 801da22:	d04b      	beq.n	801dabc <_printf_i+0x1a8>
 801da24:	4616      	mov	r6, r2
 801da26:	fbb5 f1f3 	udiv	r1, r5, r3
 801da2a:	fb03 5711 	mls	r7, r3, r1, r5
 801da2e:	5dc7      	ldrb	r7, [r0, r7]
 801da30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801da34:	462f      	mov	r7, r5
 801da36:	42bb      	cmp	r3, r7
 801da38:	460d      	mov	r5, r1
 801da3a:	d9f4      	bls.n	801da26 <_printf_i+0x112>
 801da3c:	2b08      	cmp	r3, #8
 801da3e:	d10b      	bne.n	801da58 <_printf_i+0x144>
 801da40:	6823      	ldr	r3, [r4, #0]
 801da42:	07df      	lsls	r7, r3, #31
 801da44:	d508      	bpl.n	801da58 <_printf_i+0x144>
 801da46:	6923      	ldr	r3, [r4, #16]
 801da48:	6861      	ldr	r1, [r4, #4]
 801da4a:	4299      	cmp	r1, r3
 801da4c:	bfde      	ittt	le
 801da4e:	2330      	movle	r3, #48	@ 0x30
 801da50:	f806 3c01 	strble.w	r3, [r6, #-1]
 801da54:	f106 36ff 	addle.w	r6, r6, #4294967295
 801da58:	1b92      	subs	r2, r2, r6
 801da5a:	6122      	str	r2, [r4, #16]
 801da5c:	f8cd a000 	str.w	sl, [sp]
 801da60:	464b      	mov	r3, r9
 801da62:	aa03      	add	r2, sp, #12
 801da64:	4621      	mov	r1, r4
 801da66:	4640      	mov	r0, r8
 801da68:	f7ff fee6 	bl	801d838 <_printf_common>
 801da6c:	3001      	adds	r0, #1
 801da6e:	d14a      	bne.n	801db06 <_printf_i+0x1f2>
 801da70:	f04f 30ff 	mov.w	r0, #4294967295
 801da74:	b004      	add	sp, #16
 801da76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da7a:	6823      	ldr	r3, [r4, #0]
 801da7c:	f043 0320 	orr.w	r3, r3, #32
 801da80:	6023      	str	r3, [r4, #0]
 801da82:	4833      	ldr	r0, [pc, #204]	@ (801db50 <_printf_i+0x23c>)
 801da84:	2778      	movs	r7, #120	@ 0x78
 801da86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801da8a:	6823      	ldr	r3, [r4, #0]
 801da8c:	6831      	ldr	r1, [r6, #0]
 801da8e:	061f      	lsls	r7, r3, #24
 801da90:	f851 5b04 	ldr.w	r5, [r1], #4
 801da94:	d402      	bmi.n	801da9c <_printf_i+0x188>
 801da96:	065f      	lsls	r7, r3, #25
 801da98:	bf48      	it	mi
 801da9a:	b2ad      	uxthmi	r5, r5
 801da9c:	6031      	str	r1, [r6, #0]
 801da9e:	07d9      	lsls	r1, r3, #31
 801daa0:	bf44      	itt	mi
 801daa2:	f043 0320 	orrmi.w	r3, r3, #32
 801daa6:	6023      	strmi	r3, [r4, #0]
 801daa8:	b11d      	cbz	r5, 801dab2 <_printf_i+0x19e>
 801daaa:	2310      	movs	r3, #16
 801daac:	e7ac      	b.n	801da08 <_printf_i+0xf4>
 801daae:	4827      	ldr	r0, [pc, #156]	@ (801db4c <_printf_i+0x238>)
 801dab0:	e7e9      	b.n	801da86 <_printf_i+0x172>
 801dab2:	6823      	ldr	r3, [r4, #0]
 801dab4:	f023 0320 	bic.w	r3, r3, #32
 801dab8:	6023      	str	r3, [r4, #0]
 801daba:	e7f6      	b.n	801daaa <_printf_i+0x196>
 801dabc:	4616      	mov	r6, r2
 801dabe:	e7bd      	b.n	801da3c <_printf_i+0x128>
 801dac0:	6833      	ldr	r3, [r6, #0]
 801dac2:	6825      	ldr	r5, [r4, #0]
 801dac4:	6961      	ldr	r1, [r4, #20]
 801dac6:	1d18      	adds	r0, r3, #4
 801dac8:	6030      	str	r0, [r6, #0]
 801daca:	062e      	lsls	r6, r5, #24
 801dacc:	681b      	ldr	r3, [r3, #0]
 801dace:	d501      	bpl.n	801dad4 <_printf_i+0x1c0>
 801dad0:	6019      	str	r1, [r3, #0]
 801dad2:	e002      	b.n	801dada <_printf_i+0x1c6>
 801dad4:	0668      	lsls	r0, r5, #25
 801dad6:	d5fb      	bpl.n	801dad0 <_printf_i+0x1bc>
 801dad8:	8019      	strh	r1, [r3, #0]
 801dada:	2300      	movs	r3, #0
 801dadc:	6123      	str	r3, [r4, #16]
 801dade:	4616      	mov	r6, r2
 801dae0:	e7bc      	b.n	801da5c <_printf_i+0x148>
 801dae2:	6833      	ldr	r3, [r6, #0]
 801dae4:	1d1a      	adds	r2, r3, #4
 801dae6:	6032      	str	r2, [r6, #0]
 801dae8:	681e      	ldr	r6, [r3, #0]
 801daea:	6862      	ldr	r2, [r4, #4]
 801daec:	2100      	movs	r1, #0
 801daee:	4630      	mov	r0, r6
 801daf0:	f7e2 fba6 	bl	8000240 <memchr>
 801daf4:	b108      	cbz	r0, 801dafa <_printf_i+0x1e6>
 801daf6:	1b80      	subs	r0, r0, r6
 801daf8:	6060      	str	r0, [r4, #4]
 801dafa:	6863      	ldr	r3, [r4, #4]
 801dafc:	6123      	str	r3, [r4, #16]
 801dafe:	2300      	movs	r3, #0
 801db00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db04:	e7aa      	b.n	801da5c <_printf_i+0x148>
 801db06:	6923      	ldr	r3, [r4, #16]
 801db08:	4632      	mov	r2, r6
 801db0a:	4649      	mov	r1, r9
 801db0c:	4640      	mov	r0, r8
 801db0e:	47d0      	blx	sl
 801db10:	3001      	adds	r0, #1
 801db12:	d0ad      	beq.n	801da70 <_printf_i+0x15c>
 801db14:	6823      	ldr	r3, [r4, #0]
 801db16:	079b      	lsls	r3, r3, #30
 801db18:	d413      	bmi.n	801db42 <_printf_i+0x22e>
 801db1a:	68e0      	ldr	r0, [r4, #12]
 801db1c:	9b03      	ldr	r3, [sp, #12]
 801db1e:	4298      	cmp	r0, r3
 801db20:	bfb8      	it	lt
 801db22:	4618      	movlt	r0, r3
 801db24:	e7a6      	b.n	801da74 <_printf_i+0x160>
 801db26:	2301      	movs	r3, #1
 801db28:	4632      	mov	r2, r6
 801db2a:	4649      	mov	r1, r9
 801db2c:	4640      	mov	r0, r8
 801db2e:	47d0      	blx	sl
 801db30:	3001      	adds	r0, #1
 801db32:	d09d      	beq.n	801da70 <_printf_i+0x15c>
 801db34:	3501      	adds	r5, #1
 801db36:	68e3      	ldr	r3, [r4, #12]
 801db38:	9903      	ldr	r1, [sp, #12]
 801db3a:	1a5b      	subs	r3, r3, r1
 801db3c:	42ab      	cmp	r3, r5
 801db3e:	dcf2      	bgt.n	801db26 <_printf_i+0x212>
 801db40:	e7eb      	b.n	801db1a <_printf_i+0x206>
 801db42:	2500      	movs	r5, #0
 801db44:	f104 0619 	add.w	r6, r4, #25
 801db48:	e7f5      	b.n	801db36 <_printf_i+0x222>
 801db4a:	bf00      	nop
 801db4c:	08022850 	.word	0x08022850
 801db50:	08022861 	.word	0x08022861

0801db54 <__sflush_r>:
 801db54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801db58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db5c:	0716      	lsls	r6, r2, #28
 801db5e:	4605      	mov	r5, r0
 801db60:	460c      	mov	r4, r1
 801db62:	d454      	bmi.n	801dc0e <__sflush_r+0xba>
 801db64:	684b      	ldr	r3, [r1, #4]
 801db66:	2b00      	cmp	r3, #0
 801db68:	dc02      	bgt.n	801db70 <__sflush_r+0x1c>
 801db6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	dd48      	ble.n	801dc02 <__sflush_r+0xae>
 801db70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801db72:	2e00      	cmp	r6, #0
 801db74:	d045      	beq.n	801dc02 <__sflush_r+0xae>
 801db76:	2300      	movs	r3, #0
 801db78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801db7c:	682f      	ldr	r7, [r5, #0]
 801db7e:	6a21      	ldr	r1, [r4, #32]
 801db80:	602b      	str	r3, [r5, #0]
 801db82:	d030      	beq.n	801dbe6 <__sflush_r+0x92>
 801db84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801db86:	89a3      	ldrh	r3, [r4, #12]
 801db88:	0759      	lsls	r1, r3, #29
 801db8a:	d505      	bpl.n	801db98 <__sflush_r+0x44>
 801db8c:	6863      	ldr	r3, [r4, #4]
 801db8e:	1ad2      	subs	r2, r2, r3
 801db90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801db92:	b10b      	cbz	r3, 801db98 <__sflush_r+0x44>
 801db94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801db96:	1ad2      	subs	r2, r2, r3
 801db98:	2300      	movs	r3, #0
 801db9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801db9c:	6a21      	ldr	r1, [r4, #32]
 801db9e:	4628      	mov	r0, r5
 801dba0:	47b0      	blx	r6
 801dba2:	1c43      	adds	r3, r0, #1
 801dba4:	89a3      	ldrh	r3, [r4, #12]
 801dba6:	d106      	bne.n	801dbb6 <__sflush_r+0x62>
 801dba8:	6829      	ldr	r1, [r5, #0]
 801dbaa:	291d      	cmp	r1, #29
 801dbac:	d82b      	bhi.n	801dc06 <__sflush_r+0xb2>
 801dbae:	4a2a      	ldr	r2, [pc, #168]	@ (801dc58 <__sflush_r+0x104>)
 801dbb0:	410a      	asrs	r2, r1
 801dbb2:	07d6      	lsls	r6, r2, #31
 801dbb4:	d427      	bmi.n	801dc06 <__sflush_r+0xb2>
 801dbb6:	2200      	movs	r2, #0
 801dbb8:	6062      	str	r2, [r4, #4]
 801dbba:	04d9      	lsls	r1, r3, #19
 801dbbc:	6922      	ldr	r2, [r4, #16]
 801dbbe:	6022      	str	r2, [r4, #0]
 801dbc0:	d504      	bpl.n	801dbcc <__sflush_r+0x78>
 801dbc2:	1c42      	adds	r2, r0, #1
 801dbc4:	d101      	bne.n	801dbca <__sflush_r+0x76>
 801dbc6:	682b      	ldr	r3, [r5, #0]
 801dbc8:	b903      	cbnz	r3, 801dbcc <__sflush_r+0x78>
 801dbca:	6560      	str	r0, [r4, #84]	@ 0x54
 801dbcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dbce:	602f      	str	r7, [r5, #0]
 801dbd0:	b1b9      	cbz	r1, 801dc02 <__sflush_r+0xae>
 801dbd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dbd6:	4299      	cmp	r1, r3
 801dbd8:	d002      	beq.n	801dbe0 <__sflush_r+0x8c>
 801dbda:	4628      	mov	r0, r5
 801dbdc:	f7ff fa92 	bl	801d104 <_free_r>
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	6363      	str	r3, [r4, #52]	@ 0x34
 801dbe4:	e00d      	b.n	801dc02 <__sflush_r+0xae>
 801dbe6:	2301      	movs	r3, #1
 801dbe8:	4628      	mov	r0, r5
 801dbea:	47b0      	blx	r6
 801dbec:	4602      	mov	r2, r0
 801dbee:	1c50      	adds	r0, r2, #1
 801dbf0:	d1c9      	bne.n	801db86 <__sflush_r+0x32>
 801dbf2:	682b      	ldr	r3, [r5, #0]
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d0c6      	beq.n	801db86 <__sflush_r+0x32>
 801dbf8:	2b1d      	cmp	r3, #29
 801dbfa:	d001      	beq.n	801dc00 <__sflush_r+0xac>
 801dbfc:	2b16      	cmp	r3, #22
 801dbfe:	d11e      	bne.n	801dc3e <__sflush_r+0xea>
 801dc00:	602f      	str	r7, [r5, #0]
 801dc02:	2000      	movs	r0, #0
 801dc04:	e022      	b.n	801dc4c <__sflush_r+0xf8>
 801dc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc0a:	b21b      	sxth	r3, r3
 801dc0c:	e01b      	b.n	801dc46 <__sflush_r+0xf2>
 801dc0e:	690f      	ldr	r7, [r1, #16]
 801dc10:	2f00      	cmp	r7, #0
 801dc12:	d0f6      	beq.n	801dc02 <__sflush_r+0xae>
 801dc14:	0793      	lsls	r3, r2, #30
 801dc16:	680e      	ldr	r6, [r1, #0]
 801dc18:	bf08      	it	eq
 801dc1a:	694b      	ldreq	r3, [r1, #20]
 801dc1c:	600f      	str	r7, [r1, #0]
 801dc1e:	bf18      	it	ne
 801dc20:	2300      	movne	r3, #0
 801dc22:	eba6 0807 	sub.w	r8, r6, r7
 801dc26:	608b      	str	r3, [r1, #8]
 801dc28:	f1b8 0f00 	cmp.w	r8, #0
 801dc2c:	dde9      	ble.n	801dc02 <__sflush_r+0xae>
 801dc2e:	6a21      	ldr	r1, [r4, #32]
 801dc30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801dc32:	4643      	mov	r3, r8
 801dc34:	463a      	mov	r2, r7
 801dc36:	4628      	mov	r0, r5
 801dc38:	47b0      	blx	r6
 801dc3a:	2800      	cmp	r0, #0
 801dc3c:	dc08      	bgt.n	801dc50 <__sflush_r+0xfc>
 801dc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dc46:	81a3      	strh	r3, [r4, #12]
 801dc48:	f04f 30ff 	mov.w	r0, #4294967295
 801dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc50:	4407      	add	r7, r0
 801dc52:	eba8 0800 	sub.w	r8, r8, r0
 801dc56:	e7e7      	b.n	801dc28 <__sflush_r+0xd4>
 801dc58:	dfbffffe 	.word	0xdfbffffe

0801dc5c <_fflush_r>:
 801dc5c:	b538      	push	{r3, r4, r5, lr}
 801dc5e:	690b      	ldr	r3, [r1, #16]
 801dc60:	4605      	mov	r5, r0
 801dc62:	460c      	mov	r4, r1
 801dc64:	b913      	cbnz	r3, 801dc6c <_fflush_r+0x10>
 801dc66:	2500      	movs	r5, #0
 801dc68:	4628      	mov	r0, r5
 801dc6a:	bd38      	pop	{r3, r4, r5, pc}
 801dc6c:	b118      	cbz	r0, 801dc76 <_fflush_r+0x1a>
 801dc6e:	6a03      	ldr	r3, [r0, #32]
 801dc70:	b90b      	cbnz	r3, 801dc76 <_fflush_r+0x1a>
 801dc72:	f7ff f85b 	bl	801cd2c <__sinit>
 801dc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d0f3      	beq.n	801dc66 <_fflush_r+0xa>
 801dc7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dc80:	07d0      	lsls	r0, r2, #31
 801dc82:	d404      	bmi.n	801dc8e <_fflush_r+0x32>
 801dc84:	0599      	lsls	r1, r3, #22
 801dc86:	d402      	bmi.n	801dc8e <_fflush_r+0x32>
 801dc88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc8a:	f7ff fa0c 	bl	801d0a6 <__retarget_lock_acquire_recursive>
 801dc8e:	4628      	mov	r0, r5
 801dc90:	4621      	mov	r1, r4
 801dc92:	f7ff ff5f 	bl	801db54 <__sflush_r>
 801dc96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dc98:	07da      	lsls	r2, r3, #31
 801dc9a:	4605      	mov	r5, r0
 801dc9c:	d4e4      	bmi.n	801dc68 <_fflush_r+0xc>
 801dc9e:	89a3      	ldrh	r3, [r4, #12]
 801dca0:	059b      	lsls	r3, r3, #22
 801dca2:	d4e1      	bmi.n	801dc68 <_fflush_r+0xc>
 801dca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dca6:	f7ff f9ff 	bl	801d0a8 <__retarget_lock_release_recursive>
 801dcaa:	e7dd      	b.n	801dc68 <_fflush_r+0xc>

0801dcac <fiprintf>:
 801dcac:	b40e      	push	{r1, r2, r3}
 801dcae:	b503      	push	{r0, r1, lr}
 801dcb0:	4601      	mov	r1, r0
 801dcb2:	ab03      	add	r3, sp, #12
 801dcb4:	4805      	ldr	r0, [pc, #20]	@ (801dccc <fiprintf+0x20>)
 801dcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dcba:	6800      	ldr	r0, [r0, #0]
 801dcbc:	9301      	str	r3, [sp, #4]
 801dcbe:	f7ff fca3 	bl	801d608 <_vfiprintf_r>
 801dcc2:	b002      	add	sp, #8
 801dcc4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dcc8:	b003      	add	sp, #12
 801dcca:	4770      	bx	lr
 801dccc:	20000090 	.word	0x20000090

0801dcd0 <__swbuf_r>:
 801dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcd2:	460e      	mov	r6, r1
 801dcd4:	4614      	mov	r4, r2
 801dcd6:	4605      	mov	r5, r0
 801dcd8:	b118      	cbz	r0, 801dce2 <__swbuf_r+0x12>
 801dcda:	6a03      	ldr	r3, [r0, #32]
 801dcdc:	b90b      	cbnz	r3, 801dce2 <__swbuf_r+0x12>
 801dcde:	f7ff f825 	bl	801cd2c <__sinit>
 801dce2:	69a3      	ldr	r3, [r4, #24]
 801dce4:	60a3      	str	r3, [r4, #8]
 801dce6:	89a3      	ldrh	r3, [r4, #12]
 801dce8:	071a      	lsls	r2, r3, #28
 801dcea:	d501      	bpl.n	801dcf0 <__swbuf_r+0x20>
 801dcec:	6923      	ldr	r3, [r4, #16]
 801dcee:	b943      	cbnz	r3, 801dd02 <__swbuf_r+0x32>
 801dcf0:	4621      	mov	r1, r4
 801dcf2:	4628      	mov	r0, r5
 801dcf4:	f000 f82a 	bl	801dd4c <__swsetup_r>
 801dcf8:	b118      	cbz	r0, 801dd02 <__swbuf_r+0x32>
 801dcfa:	f04f 37ff 	mov.w	r7, #4294967295
 801dcfe:	4638      	mov	r0, r7
 801dd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd02:	6823      	ldr	r3, [r4, #0]
 801dd04:	6922      	ldr	r2, [r4, #16]
 801dd06:	1a98      	subs	r0, r3, r2
 801dd08:	6963      	ldr	r3, [r4, #20]
 801dd0a:	b2f6      	uxtb	r6, r6
 801dd0c:	4283      	cmp	r3, r0
 801dd0e:	4637      	mov	r7, r6
 801dd10:	dc05      	bgt.n	801dd1e <__swbuf_r+0x4e>
 801dd12:	4621      	mov	r1, r4
 801dd14:	4628      	mov	r0, r5
 801dd16:	f7ff ffa1 	bl	801dc5c <_fflush_r>
 801dd1a:	2800      	cmp	r0, #0
 801dd1c:	d1ed      	bne.n	801dcfa <__swbuf_r+0x2a>
 801dd1e:	68a3      	ldr	r3, [r4, #8]
 801dd20:	3b01      	subs	r3, #1
 801dd22:	60a3      	str	r3, [r4, #8]
 801dd24:	6823      	ldr	r3, [r4, #0]
 801dd26:	1c5a      	adds	r2, r3, #1
 801dd28:	6022      	str	r2, [r4, #0]
 801dd2a:	701e      	strb	r6, [r3, #0]
 801dd2c:	6962      	ldr	r2, [r4, #20]
 801dd2e:	1c43      	adds	r3, r0, #1
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d004      	beq.n	801dd3e <__swbuf_r+0x6e>
 801dd34:	89a3      	ldrh	r3, [r4, #12]
 801dd36:	07db      	lsls	r3, r3, #31
 801dd38:	d5e1      	bpl.n	801dcfe <__swbuf_r+0x2e>
 801dd3a:	2e0a      	cmp	r6, #10
 801dd3c:	d1df      	bne.n	801dcfe <__swbuf_r+0x2e>
 801dd3e:	4621      	mov	r1, r4
 801dd40:	4628      	mov	r0, r5
 801dd42:	f7ff ff8b 	bl	801dc5c <_fflush_r>
 801dd46:	2800      	cmp	r0, #0
 801dd48:	d0d9      	beq.n	801dcfe <__swbuf_r+0x2e>
 801dd4a:	e7d6      	b.n	801dcfa <__swbuf_r+0x2a>

0801dd4c <__swsetup_r>:
 801dd4c:	b538      	push	{r3, r4, r5, lr}
 801dd4e:	4b29      	ldr	r3, [pc, #164]	@ (801ddf4 <__swsetup_r+0xa8>)
 801dd50:	4605      	mov	r5, r0
 801dd52:	6818      	ldr	r0, [r3, #0]
 801dd54:	460c      	mov	r4, r1
 801dd56:	b118      	cbz	r0, 801dd60 <__swsetup_r+0x14>
 801dd58:	6a03      	ldr	r3, [r0, #32]
 801dd5a:	b90b      	cbnz	r3, 801dd60 <__swsetup_r+0x14>
 801dd5c:	f7fe ffe6 	bl	801cd2c <__sinit>
 801dd60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd64:	0719      	lsls	r1, r3, #28
 801dd66:	d422      	bmi.n	801ddae <__swsetup_r+0x62>
 801dd68:	06da      	lsls	r2, r3, #27
 801dd6a:	d407      	bmi.n	801dd7c <__swsetup_r+0x30>
 801dd6c:	2209      	movs	r2, #9
 801dd6e:	602a      	str	r2, [r5, #0]
 801dd70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd74:	81a3      	strh	r3, [r4, #12]
 801dd76:	f04f 30ff 	mov.w	r0, #4294967295
 801dd7a:	e033      	b.n	801dde4 <__swsetup_r+0x98>
 801dd7c:	0758      	lsls	r0, r3, #29
 801dd7e:	d512      	bpl.n	801dda6 <__swsetup_r+0x5a>
 801dd80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd82:	b141      	cbz	r1, 801dd96 <__swsetup_r+0x4a>
 801dd84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd88:	4299      	cmp	r1, r3
 801dd8a:	d002      	beq.n	801dd92 <__swsetup_r+0x46>
 801dd8c:	4628      	mov	r0, r5
 801dd8e:	f7ff f9b9 	bl	801d104 <_free_r>
 801dd92:	2300      	movs	r3, #0
 801dd94:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd96:	89a3      	ldrh	r3, [r4, #12]
 801dd98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dd9c:	81a3      	strh	r3, [r4, #12]
 801dd9e:	2300      	movs	r3, #0
 801dda0:	6063      	str	r3, [r4, #4]
 801dda2:	6923      	ldr	r3, [r4, #16]
 801dda4:	6023      	str	r3, [r4, #0]
 801dda6:	89a3      	ldrh	r3, [r4, #12]
 801dda8:	f043 0308 	orr.w	r3, r3, #8
 801ddac:	81a3      	strh	r3, [r4, #12]
 801ddae:	6923      	ldr	r3, [r4, #16]
 801ddb0:	b94b      	cbnz	r3, 801ddc6 <__swsetup_r+0x7a>
 801ddb2:	89a3      	ldrh	r3, [r4, #12]
 801ddb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ddb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ddbc:	d003      	beq.n	801ddc6 <__swsetup_r+0x7a>
 801ddbe:	4621      	mov	r1, r4
 801ddc0:	4628      	mov	r0, r5
 801ddc2:	f000 f884 	bl	801dece <__smakebuf_r>
 801ddc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ddca:	f013 0201 	ands.w	r2, r3, #1
 801ddce:	d00a      	beq.n	801dde6 <__swsetup_r+0x9a>
 801ddd0:	2200      	movs	r2, #0
 801ddd2:	60a2      	str	r2, [r4, #8]
 801ddd4:	6962      	ldr	r2, [r4, #20]
 801ddd6:	4252      	negs	r2, r2
 801ddd8:	61a2      	str	r2, [r4, #24]
 801ddda:	6922      	ldr	r2, [r4, #16]
 801dddc:	b942      	cbnz	r2, 801ddf0 <__swsetup_r+0xa4>
 801ddde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dde2:	d1c5      	bne.n	801dd70 <__swsetup_r+0x24>
 801dde4:	bd38      	pop	{r3, r4, r5, pc}
 801dde6:	0799      	lsls	r1, r3, #30
 801dde8:	bf58      	it	pl
 801ddea:	6962      	ldrpl	r2, [r4, #20]
 801ddec:	60a2      	str	r2, [r4, #8]
 801ddee:	e7f4      	b.n	801ddda <__swsetup_r+0x8e>
 801ddf0:	2000      	movs	r0, #0
 801ddf2:	e7f7      	b.n	801dde4 <__swsetup_r+0x98>
 801ddf4:	20000090 	.word	0x20000090

0801ddf8 <_sbrk_r>:
 801ddf8:	b538      	push	{r3, r4, r5, lr}
 801ddfa:	4d06      	ldr	r5, [pc, #24]	@ (801de14 <_sbrk_r+0x1c>)
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	4604      	mov	r4, r0
 801de00:	4608      	mov	r0, r1
 801de02:	602b      	str	r3, [r5, #0]
 801de04:	f7e5 f97a 	bl	80030fc <_sbrk>
 801de08:	1c43      	adds	r3, r0, #1
 801de0a:	d102      	bne.n	801de12 <_sbrk_r+0x1a>
 801de0c:	682b      	ldr	r3, [r5, #0]
 801de0e:	b103      	cbz	r3, 801de12 <_sbrk_r+0x1a>
 801de10:	6023      	str	r3, [r4, #0]
 801de12:	bd38      	pop	{r3, r4, r5, pc}
 801de14:	2000f50c 	.word	0x2000f50c

0801de18 <abort>:
 801de18:	b508      	push	{r3, lr}
 801de1a:	2006      	movs	r0, #6
 801de1c:	f000 f8bc 	bl	801df98 <raise>
 801de20:	2001      	movs	r0, #1
 801de22:	f7e5 f90f 	bl	8003044 <_exit>

0801de26 <_realloc_r>:
 801de26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de2a:	4680      	mov	r8, r0
 801de2c:	4615      	mov	r5, r2
 801de2e:	460c      	mov	r4, r1
 801de30:	b921      	cbnz	r1, 801de3c <_realloc_r+0x16>
 801de32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de36:	4611      	mov	r1, r2
 801de38:	f7ff b9d8 	b.w	801d1ec <_malloc_r>
 801de3c:	b92a      	cbnz	r2, 801de4a <_realloc_r+0x24>
 801de3e:	f7ff f961 	bl	801d104 <_free_r>
 801de42:	2400      	movs	r4, #0
 801de44:	4620      	mov	r0, r4
 801de46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de4a:	f000 f8e3 	bl	801e014 <_malloc_usable_size_r>
 801de4e:	4285      	cmp	r5, r0
 801de50:	4606      	mov	r6, r0
 801de52:	d802      	bhi.n	801de5a <_realloc_r+0x34>
 801de54:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801de58:	d8f4      	bhi.n	801de44 <_realloc_r+0x1e>
 801de5a:	4629      	mov	r1, r5
 801de5c:	4640      	mov	r0, r8
 801de5e:	f7ff f9c5 	bl	801d1ec <_malloc_r>
 801de62:	4607      	mov	r7, r0
 801de64:	2800      	cmp	r0, #0
 801de66:	d0ec      	beq.n	801de42 <_realloc_r+0x1c>
 801de68:	42b5      	cmp	r5, r6
 801de6a:	462a      	mov	r2, r5
 801de6c:	4621      	mov	r1, r4
 801de6e:	bf28      	it	cs
 801de70:	4632      	movcs	r2, r6
 801de72:	f7ff f91a 	bl	801d0aa <memcpy>
 801de76:	4621      	mov	r1, r4
 801de78:	4640      	mov	r0, r8
 801de7a:	f7ff f943 	bl	801d104 <_free_r>
 801de7e:	463c      	mov	r4, r7
 801de80:	e7e0      	b.n	801de44 <_realloc_r+0x1e>

0801de82 <__swhatbuf_r>:
 801de82:	b570      	push	{r4, r5, r6, lr}
 801de84:	460c      	mov	r4, r1
 801de86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de8a:	2900      	cmp	r1, #0
 801de8c:	b096      	sub	sp, #88	@ 0x58
 801de8e:	4615      	mov	r5, r2
 801de90:	461e      	mov	r6, r3
 801de92:	da0d      	bge.n	801deb0 <__swhatbuf_r+0x2e>
 801de94:	89a3      	ldrh	r3, [r4, #12]
 801de96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801de9a:	f04f 0100 	mov.w	r1, #0
 801de9e:	bf14      	ite	ne
 801dea0:	2340      	movne	r3, #64	@ 0x40
 801dea2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dea6:	2000      	movs	r0, #0
 801dea8:	6031      	str	r1, [r6, #0]
 801deaa:	602b      	str	r3, [r5, #0]
 801deac:	b016      	add	sp, #88	@ 0x58
 801deae:	bd70      	pop	{r4, r5, r6, pc}
 801deb0:	466a      	mov	r2, sp
 801deb2:	f000 f879 	bl	801dfa8 <_fstat_r>
 801deb6:	2800      	cmp	r0, #0
 801deb8:	dbec      	blt.n	801de94 <__swhatbuf_r+0x12>
 801deba:	9901      	ldr	r1, [sp, #4]
 801debc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dec0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dec4:	4259      	negs	r1, r3
 801dec6:	4159      	adcs	r1, r3
 801dec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801decc:	e7eb      	b.n	801dea6 <__swhatbuf_r+0x24>

0801dece <__smakebuf_r>:
 801dece:	898b      	ldrh	r3, [r1, #12]
 801ded0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ded2:	079d      	lsls	r5, r3, #30
 801ded4:	4606      	mov	r6, r0
 801ded6:	460c      	mov	r4, r1
 801ded8:	d507      	bpl.n	801deea <__smakebuf_r+0x1c>
 801deda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dede:	6023      	str	r3, [r4, #0]
 801dee0:	6123      	str	r3, [r4, #16]
 801dee2:	2301      	movs	r3, #1
 801dee4:	6163      	str	r3, [r4, #20]
 801dee6:	b003      	add	sp, #12
 801dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801deea:	ab01      	add	r3, sp, #4
 801deec:	466a      	mov	r2, sp
 801deee:	f7ff ffc8 	bl	801de82 <__swhatbuf_r>
 801def2:	9f00      	ldr	r7, [sp, #0]
 801def4:	4605      	mov	r5, r0
 801def6:	4639      	mov	r1, r7
 801def8:	4630      	mov	r0, r6
 801defa:	f7ff f977 	bl	801d1ec <_malloc_r>
 801defe:	b948      	cbnz	r0, 801df14 <__smakebuf_r+0x46>
 801df00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df04:	059a      	lsls	r2, r3, #22
 801df06:	d4ee      	bmi.n	801dee6 <__smakebuf_r+0x18>
 801df08:	f023 0303 	bic.w	r3, r3, #3
 801df0c:	f043 0302 	orr.w	r3, r3, #2
 801df10:	81a3      	strh	r3, [r4, #12]
 801df12:	e7e2      	b.n	801deda <__smakebuf_r+0xc>
 801df14:	89a3      	ldrh	r3, [r4, #12]
 801df16:	6020      	str	r0, [r4, #0]
 801df18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801df1c:	81a3      	strh	r3, [r4, #12]
 801df1e:	9b01      	ldr	r3, [sp, #4]
 801df20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801df24:	b15b      	cbz	r3, 801df3e <__smakebuf_r+0x70>
 801df26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df2a:	4630      	mov	r0, r6
 801df2c:	f000 f84e 	bl	801dfcc <_isatty_r>
 801df30:	b128      	cbz	r0, 801df3e <__smakebuf_r+0x70>
 801df32:	89a3      	ldrh	r3, [r4, #12]
 801df34:	f023 0303 	bic.w	r3, r3, #3
 801df38:	f043 0301 	orr.w	r3, r3, #1
 801df3c:	81a3      	strh	r3, [r4, #12]
 801df3e:	89a3      	ldrh	r3, [r4, #12]
 801df40:	431d      	orrs	r5, r3
 801df42:	81a5      	strh	r5, [r4, #12]
 801df44:	e7cf      	b.n	801dee6 <__smakebuf_r+0x18>

0801df46 <_raise_r>:
 801df46:	291f      	cmp	r1, #31
 801df48:	b538      	push	{r3, r4, r5, lr}
 801df4a:	4605      	mov	r5, r0
 801df4c:	460c      	mov	r4, r1
 801df4e:	d904      	bls.n	801df5a <_raise_r+0x14>
 801df50:	2316      	movs	r3, #22
 801df52:	6003      	str	r3, [r0, #0]
 801df54:	f04f 30ff 	mov.w	r0, #4294967295
 801df58:	bd38      	pop	{r3, r4, r5, pc}
 801df5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801df5c:	b112      	cbz	r2, 801df64 <_raise_r+0x1e>
 801df5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df62:	b94b      	cbnz	r3, 801df78 <_raise_r+0x32>
 801df64:	4628      	mov	r0, r5
 801df66:	f000 f853 	bl	801e010 <_getpid_r>
 801df6a:	4622      	mov	r2, r4
 801df6c:	4601      	mov	r1, r0
 801df6e:	4628      	mov	r0, r5
 801df70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df74:	f000 b83a 	b.w	801dfec <_kill_r>
 801df78:	2b01      	cmp	r3, #1
 801df7a:	d00a      	beq.n	801df92 <_raise_r+0x4c>
 801df7c:	1c59      	adds	r1, r3, #1
 801df7e:	d103      	bne.n	801df88 <_raise_r+0x42>
 801df80:	2316      	movs	r3, #22
 801df82:	6003      	str	r3, [r0, #0]
 801df84:	2001      	movs	r0, #1
 801df86:	e7e7      	b.n	801df58 <_raise_r+0x12>
 801df88:	2100      	movs	r1, #0
 801df8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801df8e:	4620      	mov	r0, r4
 801df90:	4798      	blx	r3
 801df92:	2000      	movs	r0, #0
 801df94:	e7e0      	b.n	801df58 <_raise_r+0x12>
	...

0801df98 <raise>:
 801df98:	4b02      	ldr	r3, [pc, #8]	@ (801dfa4 <raise+0xc>)
 801df9a:	4601      	mov	r1, r0
 801df9c:	6818      	ldr	r0, [r3, #0]
 801df9e:	f7ff bfd2 	b.w	801df46 <_raise_r>
 801dfa2:	bf00      	nop
 801dfa4:	20000090 	.word	0x20000090

0801dfa8 <_fstat_r>:
 801dfa8:	b538      	push	{r3, r4, r5, lr}
 801dfaa:	4d07      	ldr	r5, [pc, #28]	@ (801dfc8 <_fstat_r+0x20>)
 801dfac:	2300      	movs	r3, #0
 801dfae:	4604      	mov	r4, r0
 801dfb0:	4608      	mov	r0, r1
 801dfb2:	4611      	mov	r1, r2
 801dfb4:	602b      	str	r3, [r5, #0]
 801dfb6:	f7e5 f879 	bl	80030ac <_fstat>
 801dfba:	1c43      	adds	r3, r0, #1
 801dfbc:	d102      	bne.n	801dfc4 <_fstat_r+0x1c>
 801dfbe:	682b      	ldr	r3, [r5, #0]
 801dfc0:	b103      	cbz	r3, 801dfc4 <_fstat_r+0x1c>
 801dfc2:	6023      	str	r3, [r4, #0]
 801dfc4:	bd38      	pop	{r3, r4, r5, pc}
 801dfc6:	bf00      	nop
 801dfc8:	2000f50c 	.word	0x2000f50c

0801dfcc <_isatty_r>:
 801dfcc:	b538      	push	{r3, r4, r5, lr}
 801dfce:	4d06      	ldr	r5, [pc, #24]	@ (801dfe8 <_isatty_r+0x1c>)
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	4604      	mov	r4, r0
 801dfd4:	4608      	mov	r0, r1
 801dfd6:	602b      	str	r3, [r5, #0]
 801dfd8:	f7e5 f878 	bl	80030cc <_isatty>
 801dfdc:	1c43      	adds	r3, r0, #1
 801dfde:	d102      	bne.n	801dfe6 <_isatty_r+0x1a>
 801dfe0:	682b      	ldr	r3, [r5, #0]
 801dfe2:	b103      	cbz	r3, 801dfe6 <_isatty_r+0x1a>
 801dfe4:	6023      	str	r3, [r4, #0]
 801dfe6:	bd38      	pop	{r3, r4, r5, pc}
 801dfe8:	2000f50c 	.word	0x2000f50c

0801dfec <_kill_r>:
 801dfec:	b538      	push	{r3, r4, r5, lr}
 801dfee:	4d07      	ldr	r5, [pc, #28]	@ (801e00c <_kill_r+0x20>)
 801dff0:	2300      	movs	r3, #0
 801dff2:	4604      	mov	r4, r0
 801dff4:	4608      	mov	r0, r1
 801dff6:	4611      	mov	r1, r2
 801dff8:	602b      	str	r3, [r5, #0]
 801dffa:	f7e5 f811 	bl	8003020 <_kill>
 801dffe:	1c43      	adds	r3, r0, #1
 801e000:	d102      	bne.n	801e008 <_kill_r+0x1c>
 801e002:	682b      	ldr	r3, [r5, #0]
 801e004:	b103      	cbz	r3, 801e008 <_kill_r+0x1c>
 801e006:	6023      	str	r3, [r4, #0]
 801e008:	bd38      	pop	{r3, r4, r5, pc}
 801e00a:	bf00      	nop
 801e00c:	2000f50c 	.word	0x2000f50c

0801e010 <_getpid_r>:
 801e010:	f7e4 bffe 	b.w	8003010 <_getpid>

0801e014 <_malloc_usable_size_r>:
 801e014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e018:	1f18      	subs	r0, r3, #4
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	bfbc      	itt	lt
 801e01e:	580b      	ldrlt	r3, [r1, r0]
 801e020:	18c0      	addlt	r0, r0, r3
 801e022:	4770      	bx	lr

0801e024 <_init>:
 801e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e026:	bf00      	nop
 801e028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e02a:	bc08      	pop	{r3}
 801e02c:	469e      	mov	lr, r3
 801e02e:	4770      	bx	lr

0801e030 <_fini>:
 801e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e032:	bf00      	nop
 801e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e036:	bc08      	pop	{r3}
 801e038:	469e      	mov	lr, r3
 801e03a:	4770      	bx	lr
